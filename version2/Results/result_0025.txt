
final statics:
total operators:28
tensorflow --> nums:0,distinct_bugs:0
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
mindspore --> 
torch --> 

generate models:0

final statics:
total operators:28
tensorflow --> nums:0,distinct_bugs:0
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
mindspore --> 
torch --> 

generate models:0

final statics:
total operators:28
tensorflow --> nums:0,distinct_bugs:0
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
mindspore --> 
torch --> 

generate models:0

final statics:
total operators:28
tensorflow --> nums:0,distinct_bugs:0
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
mindspore --> 
torch --> 

generate models:0

analyse the exceptions in iter:0
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:2

analyse the exceptions in iter:2
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [113., 111., 105., ...,  72.,  72.,  72.],
          [111., 104.,  99., ...,  68.,  70.,  78.],
          [106.,  99.,  95., ...,  78.,  79.,  80.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [120., 118., 112., ...,  81.,  80.,  80.],
          [118., 111., 106., ...,  75.,  76.,  84.],
          [113., 106., 102., ...,  85.,  85.,  86.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [112., 111., 106., ...,  80.,  79.,  79.],
          [110., 104.,  98., ...,  73.,  75.,  82.],
          [105.,  98.,  94., ...,  83.,  83.,  84.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:3

final statics:
total operators:28
tensorflow --> nums:3,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:3
mindspore --> 
torch --> 

generate models:3

analyse the exceptions in iter:16
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[235., 235., 237., ..., 233., 227., 223.],
          [231., 232., 234., ..., 231., 225., 221.],
          [231., 233., 237., ..., 232., 225., 221.],
          ...,
          [125., 126., 143., ...,  66.,  65.,  68.],
          [127., 141., 149., ...,  63.,  67.,  62.],
          [137., 142., 149., ...,  62.,  61.,  51.]],

         [[236., 236., 238., ..., 234., 230., 228.],
          [232., 233., 235., ..., 232., 228., 225.],
          [232., 234., 238., ..., 233., 228., 226.],
          ...,
          [124., 125., 142., ...,  89.,  86.,  83.],
          [125., 140., 148., ...,  89.,  88.,  79.],
          [135., 140., 147., ...,  90.,  84.,  68.]],

         [[238., 238., 240., ..., 236., 233., 232.],
          [234., 235., 237., ..., 234., 232., 233.],
          [234., 236., 240., ..., 235., 232., 233.],
          ...,
          [122., 123., 140., ...,  23.,  23.,  37.],
          [125., 139., 148., ...,  24.,  26.,  29.],
          [136., 141., 148., ...,  27.,  23.,  14.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:4

final statics:
total operators:28
tensorflow --> nums:4,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:4
mindspore --> 
torch --> 

generate models:4

final statics:
total operators:28
tensorflow --> nums:4,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:4
mindspore --> 
torch --> 

generate models:4

final statics:
total operators:28
tensorflow --> nums:4,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:4
mindspore --> 
torch --> 

generate models:4

analyse the exceptions in iter:0
tensorflow exception:
{'id': 0, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 0, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:2

analyse the exceptions in iter:3
tensorflow exception:
{'id': 0, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  37.,  38., ...,  76.,  81.,  85.],
          [ 33.,  34.,  32., ...,  95.,  96.,  85.],
          [ 39.,  40.,  57., ...,  93., 107.,  95.],
          ...,
          [ 83.,  87.,  84., ...,  99.,  90.,  81.],
          [ 88.,  90.,  93., ...,  80.,  76.,  82.],
          [ 97.,  94.,  93., ...,  54.,  63.,  72.]],

         [[ 25.,  34.,  35., ...,  67.,  72.,  76.],
          [ 28.,  30.,  27., ...,  82.,  82.,  72.],
          [ 32.,  33.,  50., ...,  76.,  89.,  77.],
          ...,
          [ 73.,  77.,  74., ...,  93.,  84.,  75.],
          [ 72.,  74.,  77., ...,  74.,  70.,  76.],
          [ 78.,  75.,  75., ...,  47.,  56.,  65.]],

         [[ 10.,  19.,  20., ...,  39.,  43.,  47.],
          [ 13.,  14.,  12., ...,  55.,  56.,  45.],
          [ 15.,  17.,  33., ...,  52.,  66.,  54.],
          ...,
          [ 52.,  56.,  52., ...,  70.,  61.,  52.],
          [ 51.,  52.,  56., ...,  53.,  49.,  55.],
          [ 56.,  53.,  53., ...,  28.,  37.,  46.]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:3

final statics:
total operators:28
tensorflow --> nums:3,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
maxpool2d:3
mindspore --> 
torch --> 

generate models:3

final statics:
total operators:28
tensorflow --> nums:3,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
maxpool2d:3
mindspore --> 
torch --> 

generate models:3

final statics:
total operators:28
tensorflow --> nums:3,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
maxpool2d:3
mindspore --> 
torch --> 

generate models:3

final statics:
total operators:28
tensorflow --> nums:3,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
maxpool2d:3
mindspore --> 
torch --> 

generate models:3

final statics:
total operators:28
tensorflow --> nums:0,distinct_bugs:0
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
mindspore --> 
torch --> 

generate models:0

final statics:
total operators:28
tensorflow --> nums:0,distinct_bugs:0
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
mindspore --> 
torch --> 

generate models:0

final statics:
total operators:28
tensorflow --> nums:0,distinct_bugs:0
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
mindspore --> 
torch --> 

generate models:0

final statics:
total operators:28
tensorflow --> nums:0,distinct_bugs:0
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
mindspore --> 
torch --> 

generate models:0

analyse the exceptions in iter:0
tensorflow exception:
{'id': 0, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 0, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:2

analyse the exceptions in iter:3
tensorflow exception:
{'id': 0, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  37.,  38., ...,  76.,  81.,  85.],
          [ 33.,  34.,  32., ...,  95.,  96.,  85.],
          [ 39.,  40.,  57., ...,  93., 107.,  95.],
          ...,
          [ 83.,  87.,  84., ...,  99.,  90.,  81.],
          [ 88.,  90.,  93., ...,  80.,  76.,  82.],
          [ 97.,  94.,  93., ...,  54.,  63.,  72.]],

         [[ 25.,  34.,  35., ...,  67.,  72.,  76.],
          [ 28.,  30.,  27., ...,  82.,  82.,  72.],
          [ 32.,  33.,  50., ...,  76.,  89.,  77.],
          ...,
          [ 73.,  77.,  74., ...,  93.,  84.,  75.],
          [ 72.,  74.,  77., ...,  74.,  70.,  76.],
          [ 78.,  75.,  75., ...,  47.,  56.,  65.]],

         [[ 10.,  19.,  20., ...,  39.,  43.,  47.],
          [ 13.,  14.,  12., ...,  55.,  56.,  45.],
          [ 15.,  17.,  33., ...,  52.,  66.,  54.],
          ...,
          [ 52.,  56.,  52., ...,  70.,  61.,  52.],
          [ 51.,  52.,  56., ...,  53.,  49.,  55.],
          [ 56.,  53.,  53., ...,  28.,  37.,  46.]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:3

final statics:
total operators:28
tensorflow --> nums:3,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
maxpool2d:3
mindspore --> 
torch --> 

generate models:3

analyse the exceptions in iter:18
tensorflow exception:
{'id': 0, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[197., 198., 201., ..., 217., 217., 217.],
          [193., 195., 198., ..., 216., 215., 214.],
          [192., 194., 197., ..., 217., 216., 215.],
          ...,
          [156., 156., 156., ...,  98., 117., 128.],
          [158., 159., 154., ..., 131., 117.,  91.],
          [152., 151., 145., ...,  91.,  90.,  79.]],

         [[187., 188., 191., ..., 201., 201., 201.],
          [183., 185., 188., ..., 200., 200., 198.],
          [182., 184., 187., ..., 201., 200., 199.],
          ...,
          [146., 146., 146., ...,  79.,  96., 105.],
          [148., 149., 144., ..., 110.,  99.,  75.],
          [142., 141., 135., ...,  72.,  73.,  65.]],

         [[188., 189., 192., ..., 204., 204., 204.],
          [184., 186., 189., ..., 203., 202., 201.],
          [183., 185., 188., ..., 204., 203., 202.],
          ...,
          [147., 147., 147., ...,  65.,  82.,  89.],
          [149., 150., 145., ...,  96.,  86.,  64.],
          [143., 142., 136., ...,  61.,  63.,  57.]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:4

final statics:
total operators:28
tensorflow --> nums:4,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
maxpool2d:4
mindspore --> 
torch --> 

generate models:4

final statics:
total operators:28
tensorflow --> nums:4,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
maxpool2d:4
mindspore --> 
torch --> 

generate models:4

final statics:
total operators:28
tensorflow --> nums:4,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
maxpool2d:4
mindspore --> 
torch --> 

generate models:4

analyse the exceptions in iter:0
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:2

analyse the exceptions in iter:3
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  37.,  38., ...,  76.,  81.,  85.],
          [ 33.,  34.,  32., ...,  95.,  96.,  85.],
          [ 39.,  40.,  57., ...,  93., 107.,  95.],
          ...,
          [ 83.,  87.,  84., ...,  99.,  90.,  81.],
          [ 88.,  90.,  93., ...,  80.,  76.,  82.],
          [ 97.,  94.,  93., ...,  54.,  63.,  72.]],

         [[ 25.,  34.,  35., ...,  67.,  72.,  76.],
          [ 28.,  30.,  27., ...,  82.,  82.,  72.],
          [ 32.,  33.,  50., ...,  76.,  89.,  77.],
          ...,
          [ 73.,  77.,  74., ...,  93.,  84.,  75.],
          [ 72.,  74.,  77., ...,  74.,  70.,  76.],
          [ 78.,  75.,  75., ...,  47.,  56.,  65.]],

         [[ 10.,  19.,  20., ...,  39.,  43.,  47.],
          [ 13.,  14.,  12., ...,  55.,  56.,  45.],
          [ 15.,  17.,  33., ...,  52.,  66.,  54.],
          ...,
          [ 52.,  56.,  52., ...,  70.,  61.,  52.],
          [ 51.,  52.,  56., ...,  53.,  49.,  55.],
          [ 56.,  53.,  53., ...,  28.,  37.,  46.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:3

final statics:
total operators:28
tensorflow --> nums:3,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:3
mindspore --> 
torch --> 

generate models:3

final statics:
total operators:28
tensorflow --> nums:3,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:3
mindspore --> 
torch --> 

generate models:3

final statics:
total operators:28
tensorflow --> nums:3,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:3
mindspore --> 
torch --> 

generate models:3

final statics:
total operators:28
tensorflow --> nums:3,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:3
mindspore --> 
torch --> 

generate models:3

analyse the exceptions in iter:0
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:2

analyse the exceptions in iter:2
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [113., 111., 105., ...,  72.,  72.,  72.],
          [111., 104.,  99., ...,  68.,  70.,  78.],
          [106.,  99.,  95., ...,  78.,  79.,  80.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [120., 118., 112., ...,  81.,  80.,  80.],
          [118., 111., 106., ...,  75.,  76.,  84.],
          [113., 106., 102., ...,  85.,  85.,  86.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [112., 111., 106., ...,  80.,  79.,  79.],
          [110., 104.,  98., ...,  73.,  75.,  82.],
          [105.,  98.,  94., ...,  83.,  83.,  84.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:3

analyse the exceptions in iter:3
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  37.,  38., ...,  76.,  81.,  85.],
          [ 33.,  34.,  32., ...,  95.,  96.,  85.],
          [ 39.,  40.,  57., ...,  93., 107.,  95.],
          ...,
          [ 83.,  87.,  84., ...,  99.,  90.,  81.],
          [ 88.,  90.,  93., ...,  80.,  76.,  82.],
          [ 97.,  94.,  93., ...,  54.,  63.,  72.]],

         [[ 25.,  34.,  35., ...,  67.,  72.,  76.],
          [ 28.,  30.,  27., ...,  82.,  82.,  72.],
          [ 32.,  33.,  50., ...,  76.,  89.,  77.],
          ...,
          [ 73.,  77.,  74., ...,  93.,  84.,  75.],
          [ 72.,  74.,  77., ...,  74.,  70.,  76.],
          [ 78.,  75.,  75., ...,  47.,  56.,  65.]],

         [[ 10.,  19.,  20., ...,  39.,  43.,  47.],
          [ 13.,  14.,  12., ...,  55.,  56.,  45.],
          [ 15.,  17.,  33., ...,  52.,  66.,  54.],
          ...,
          [ 52.,  56.,  52., ...,  70.,  61.,  52.],
          [ 51.,  52.,  56., ...,  53.,  49.,  55.],
          [ 56.,  53.,  53., ...,  28.,  37.,  46.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:4

final statics:
total operators:28
tensorflow --> nums:4,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:4
mindspore --> 
torch --> 

generate models:4

final statics:
total operators:28
tensorflow --> nums:4,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:4
mindspore --> 
torch --> 

generate models:4

final statics:
total operators:28
tensorflow --> nums:4,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:4
mindspore --> 
torch --> 

generate models:4

final statics:
total operators:28
tensorflow --> nums:4,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:4
mindspore --> 
torch --> 

generate models:4

analyse the exceptions in iter:0
tensorflow exception:
{'id': 0, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]
torch exception:
{'id': 0, 'name': 'maxpool2d', 'frame_work': 'torch', 'input_datas': tensor([[[[[ 59.,  43.,  50.,  ..., 158., 152., 148.],
           [ 16.,   0.,  18.,  ..., 123., 119., 122.],
           [ 25.,  16.,  49.,  ..., 118., 120., 109.],
           ...,
           [208., 201., 198.,  ..., 160.,  56.,  53.],
           [180., 173., 186.,  ..., 184.,  97.,  83.],
           [177., 168., 179.,  ..., 216., 151., 123.]],

          [[ 62.,  46.,  48.,  ..., 132., 125., 124.],
           [ 20.,   0.,   8.,  ...,  88.,  83.,  87.],
           [ 24.,   7.,  27.,  ...,  84.,  84.,  73.],
           ...,
           [170., 153., 161.,  ..., 133.,  31.,  34.],
           [139., 123., 144.,  ..., 148.,  62.,  53.],
           [144., 129., 142.,  ..., 184., 118.,  92.]],

          [[ 63.,  45.,  43.,  ..., 108., 102., 103.],
           [ 20.,   0.,   0.,  ...,  55.,  50.,  57.],
           [ 21.,   0.,   8.,  ...,  50.,  50.,  42.],
           ...,
           [ 96.,  34.,  26.,  ...,  70.,   7.,  20.],
           [ 96.,  42.,  30.,  ...,  94.,  34.,  34.],
           [116.,  94.,  87.,  ..., 140.,  84.,  72.]]]]])}
pad should be smaller than or equal to half of kernel size, but got padW = 1, padH = 1, kW = 1, kH = 1

generate models:1

final statics:
total operators:28
tensorflow --> nums:1,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:1,distinct_bugs:1
tensorflow --> 
maxpool2d:1
mindspore --> 
torch --> 
maxpool2d:1

generate models:1

analyse the exceptions in iter:0
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:1

final statics:
total operators:28
tensorflow --> nums:1,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:1
mindspore --> 
torch --> 

generate models:1

final statics:
total operators:28
tensorflow --> nums:1,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:1
mindspore --> 
torch --> 

generate models:1

final statics:
total operators:28
tensorflow --> nums:1,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:1
mindspore --> 
torch --> 

generate models:1

final statics:
total operators:28
tensorflow --> nums:1,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:1
mindspore --> 
torch --> 

generate models:1

analyse the exceptions in iter:0
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:1

analyse the exceptions in iter:4
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[170., 168., 177., ..., 162., 158., 157.],
          [168., 172., 171., ..., 159., 156., 154.],
          [154., 149., 129., ..., 161., 157., 154.],
          ...,
          [ 74.,  76.,  78., ...,  71.,  68.,  61.],
          [ 68.,  69.,  72., ...,  76.,  71.,  71.],
          [ 67.,  68.,  69., ...,  75.,  71.,  73.]],

         [[180., 178., 185., ..., 179., 178., 177.],
          [181., 185., 183., ..., 177., 176., 174.],
          [170., 165., 144., ..., 178., 177., 174.],
          ...,
          [ 84.,  85.,  85., ...,  75.,  72.,  65.],
          [ 76.,  77.,  79., ...,  80.,  75.,  75.],
          [ 75.,  76.,  75., ...,  79.,  75.,  77.]],

         [[198., 196., 203., ..., 215., 214., 212.],
          [198., 201., 200., ..., 212., 211., 209.],
          [186., 181., 162., ..., 214., 212., 209.],
          ...,
          [ 80.,  81.,  82., ...,  78.,  75.,  68.],
          [ 77.,  78.,  78., ...,  83.,  78.,  78.],
          [ 78.,  79.,  76., ...,  82.,  78.,  80.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:2

final statics:
total operators:28
tensorflow --> nums:2,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:2
mindspore --> 
torch --> 

generate models:2

analyse the exceptions in iter:0
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:2

final statics:
total operators:28
tensorflow --> nums:2,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:2
mindspore --> 
torch --> 

generate models:2

analyse the exceptions in iter:0
tensorflow exception:
{'id': 0, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 0, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:2

analyse the exceptions in iter:2
tensorflow exception:
{'id': 0, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [113., 111., 105., ...,  72.,  72.,  72.],
          [111., 104.,  99., ...,  68.,  70.,  78.],
          [106.,  99.,  95., ...,  78.,  79.,  80.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [120., 118., 112., ...,  81.,  80.,  80.],
          [118., 111., 106., ...,  75.,  76.,  84.],
          [113., 106., 102., ...,  85.,  85.,  86.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [112., 111., 106., ...,  80.,  79.,  79.],
          [110., 104.,  98., ...,  73.,  75.,  82.],
          [105.,  98.,  94., ...,  83.,  83.,  84.]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:3

final statics:
total operators:28
tensorflow --> nums:3,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
maxpool2d:3
mindspore --> 
torch --> 

generate models:3

analyse the exceptions in iter:0
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:2

analyse the exceptions in iter:4
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[170., 168., 177., ..., 162., 158., 157.],
          [168., 172., 171., ..., 159., 156., 154.],
          [154., 149., 129., ..., 161., 157., 154.],
          ...,
          [ 74.,  76.,  78., ...,  71.,  68.,  61.],
          [ 68.,  69.,  72., ...,  76.,  71.,  71.],
          [ 67.,  68.,  69., ...,  75.,  71.,  73.]],

         [[180., 178., 185., ..., 179., 178., 177.],
          [181., 185., 183., ..., 177., 176., 174.],
          [170., 165., 144., ..., 178., 177., 174.],
          ...,
          [ 84.,  85.,  85., ...,  75.,  72.,  65.],
          [ 76.,  77.,  79., ...,  80.,  75.,  75.],
          [ 75.,  76.,  75., ...,  79.,  75.,  77.]],

         [[198., 196., 203., ..., 215., 214., 212.],
          [198., 201., 200., ..., 212., 211., 209.],
          [186., 181., 162., ..., 214., 212., 209.],
          ...,
          [ 80.,  81.,  82., ...,  78.,  75.,  68.],
          [ 77.,  78.,  78., ...,  83.,  78.,  78.],
          [ 78.,  79.,  76., ...,  82.,  78.,  80.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:3

analyse the exceptions in iter:7
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  30.,  33., ...,  43.,  52.,  46.],
          [ 27.,  27.,  21., ..., 112., 117., 115.],
          [ 34.,  33.,  24., ..., 175., 177., 176.],
          ...,
          [142., 142., 150., ..., 134., 128., 134.],
          [140., 145., 150., ..., 131., 130., 122.],
          [134., 136., 136., ..., 106., 104., 101.]],

         [[ 35.,  34.,  44., ...,  56.,  64.,  58.],
          [ 30.,  28.,  31., ..., 136., 140., 138.],
          [ 36.,  33.,  30., ..., 208., 209., 208.],
          ...,
          [176., 176., 184., ..., 175., 168., 175.],
          [176., 180., 186., ..., 170., 170., 162.],
          [171., 171., 171., ..., 144., 142., 140.]],

         [[ 39.,  44.,  47., ...,  45.,  53.,  47.],
          [ 38.,  41.,  39., ...,  97., 101., 100.],
          [ 42.,  43.,  40., ..., 143., 144., 143.],
          ...,
          [118., 118., 127., ..., 119., 112., 119.],
          [124., 129., 134., ..., 119., 119., 111.],
          [123., 124., 124., ..., 100.,  99.,  96.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:4

final statics:
total operators:28
tensorflow --> nums:4,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:4
mindspore --> 
torch --> 

generate models:4

analyse the exceptions in iter:20
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[153., 174., 155., ..., 122., 138.,  97.],
          [160., 164., 150., ..., 137., 160., 103.],
          [140., 147., 136., ..., 104., 125.,  93.],
          ...,
          [175., 170., 170., ..., 193., 197., 199.],
          [174., 173., 171., ..., 200., 202., 208.],
          [168., 164., 166., ..., 204., 204., 206.]],

         [[157., 180., 165., ..., 125., 143., 101.],
          [163., 170., 159., ..., 135., 161., 109.],
          [143., 152., 145., ..., 103., 128., 102.],
          ...,
          [177., 172., 172., ..., 203., 206., 204.],
          [177., 176., 174., ..., 208., 209., 212.],
          [173., 169., 171., ..., 209., 208., 210.]],

         [[155., 188., 172., ..., 123., 141.,  97.],
          [165., 180., 169., ..., 129., 157., 107.],
          [147., 166., 158., ...,  99., 125., 101.],
          ...,
          [179., 174., 174., ..., 212., 214., 213.],
          [181., 180., 178., ..., 216., 218., 221.],
          [180., 175., 177., ..., 217., 217., 219.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:5

analyse the exceptions in iter:0
tensorflow exception:
{'id': 0, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:1

final statics:
total operators:28
tensorflow --> nums:1,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
maxpool2d:1
mindspore --> 
torch --> 

generate models:1

analyse the exceptions in iter:0
tensorflow exception:
{'id': 0, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 0, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:2

final statics:
total operators:28
tensorflow --> nums:2,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
maxpool2d:2
mindspore --> 
torch --> 

generate models:2

analyse the exceptions in iter:0
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:2

analyse the exceptions in iter:2
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [113., 111., 105., ...,  72.,  72.,  72.],
          [111., 104.,  99., ...,  68.,  70.,  78.],
          [106.,  99.,  95., ...,  78.,  79.,  80.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [120., 118., 112., ...,  81.,  80.,  80.],
          [118., 111., 106., ...,  75.,  76.,  84.],
          [113., 106., 102., ...,  85.,  85.,  86.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [112., 111., 106., ...,  80.,  79.,  79.],
          [110., 104.,  98., ...,  73.,  75.,  82.],
          [105.,  98.,  94., ...,  83.,  83.,  84.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:3

final statics:
total operators:28
tensorflow --> nums:3,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:3
mindspore --> 
torch --> 

generate models:3

analyse the exceptions in iter:0
tensorflow exception:
{'id': 0, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:1

analyse the exceptions in iter:3
tensorflow exception:
{'id': 0, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  37.,  38., ...,  76.,  81.,  85.],
          [ 33.,  34.,  32., ...,  95.,  96.,  85.],
          [ 39.,  40.,  57., ...,  93., 107.,  95.],
          ...,
          [ 83.,  87.,  84., ...,  99.,  90.,  81.],
          [ 88.,  90.,  93., ...,  80.,  76.,  82.],
          [ 97.,  94.,  93., ...,  54.,  63.,  72.]],

         [[ 25.,  34.,  35., ...,  67.,  72.,  76.],
          [ 28.,  30.,  27., ...,  82.,  82.,  72.],
          [ 32.,  33.,  50., ...,  76.,  89.,  77.],
          ...,
          [ 73.,  77.,  74., ...,  93.,  84.,  75.],
          [ 72.,  74.,  77., ...,  74.,  70.,  76.],
          [ 78.,  75.,  75., ...,  47.,  56.,  65.]],

         [[ 10.,  19.,  20., ...,  39.,  43.,  47.],
          [ 13.,  14.,  12., ...,  55.,  56.,  45.],
          [ 15.,  17.,  33., ...,  52.,  66.,  54.],
          ...,
          [ 52.,  56.,  52., ...,  70.,  61.,  52.],
          [ 51.,  52.,  56., ...,  53.,  49.,  55.],
          [ 56.,  53.,  53., ...,  28.,  37.,  46.]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:2

final statics:
total operators:28
tensorflow --> nums:2,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
maxpool2d:2
mindspore --> 
torch --> 

generate models:2

analyse the exceptions in iter:0
tensorflow exception:
{'id': 0, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 0, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:2

analyse the exceptions in iter:2
tensorflow exception:
{'id': 0, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [113., 111., 105., ...,  72.,  72.,  72.],
          [111., 104.,  99., ...,  68.,  70.,  78.],
          [106.,  99.,  95., ...,  78.,  79.,  80.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [120., 118., 112., ...,  81.,  80.,  80.],
          [118., 111., 106., ...,  75.,  76.,  84.],
          [113., 106., 102., ...,  85.,  85.,  86.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [112., 111., 106., ...,  80.,  79.,  79.],
          [110., 104.,  98., ...,  73.,  75.,  82.],
          [105.,  98.,  94., ...,  83.,  83.,  84.]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:3

analyse the exceptions in iter:3
tensorflow exception:
{'id': 0, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  37.,  38., ...,  76.,  81.,  85.],
          [ 33.,  34.,  32., ...,  95.,  96.,  85.],
          [ 39.,  40.,  57., ...,  93., 107.,  95.],
          ...,
          [ 83.,  87.,  84., ...,  99.,  90.,  81.],
          [ 88.,  90.,  93., ...,  80.,  76.,  82.],
          [ 97.,  94.,  93., ...,  54.,  63.,  72.]],

         [[ 25.,  34.,  35., ...,  67.,  72.,  76.],
          [ 28.,  30.,  27., ...,  82.,  82.,  72.],
          [ 32.,  33.,  50., ...,  76.,  89.,  77.],
          ...,
          [ 73.,  77.,  74., ...,  93.,  84.,  75.],
          [ 72.,  74.,  77., ...,  74.,  70.,  76.],
          [ 78.,  75.,  75., ...,  47.,  56.,  65.]],

         [[ 10.,  19.,  20., ...,  39.,  43.,  47.],
          [ 13.,  14.,  12., ...,  55.,  56.,  45.],
          [ 15.,  17.,  33., ...,  52.,  66.,  54.],
          ...,
          [ 52.,  56.,  52., ...,  70.,  61.,  52.],
          [ 51.,  52.,  56., ...,  53.,  49.,  55.],
          [ 56.,  53.,  53., ...,  28.,  37.,  46.]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:4

analyse the exceptions in iter:6
tensorflow exception:
{'id': 0, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[164., 105., 118., ..., 109., 108.,  91.],
          [167., 116.,  72., ..., 105., 105.,  89.],
          [140., 142., 119., ..., 104.,  84.,  78.],
          ...,
          [139., 142., 135., ...,  89.,  97., 126.],
          [163., 153., 146., ...,  85.,  98., 127.],
          [183., 176., 154., ...,  94.,  91., 122.]],

         [[206., 140., 148., ..., 147., 147., 129.],
          [213., 160., 109., ..., 142., 142., 127.],
          [191., 193., 163., ..., 139., 120., 115.],
          ...,
          [148., 155., 156., ..., 134., 148., 176.],
          [157., 164., 164., ..., 130., 148., 178.],
          [153., 182., 154., ..., 134., 133., 170.]],

         [[ 84.,  61., 101., ...,  73.,  69.,  57.],
          [ 84.,  49.,  43., ...,  79.,  72.,  57.],
          [ 65.,  66.,  79., ...,  84.,  58.,  49.],
          ...,
          [ 81.,  74.,  72., ...,  28.,  24.,  49.],
          [ 85.,  82.,  90., ...,  19.,  27.,  48.],
          [102., 116., 100., ...,  29.,  26.,  44.]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:5

final statics:
total operators:28
tensorflow --> nums:5,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
maxpool2d:5
mindspore --> 
torch --> 

generate models:5

final statics:
total operators:28
tensorflow --> nums:5,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
maxpool2d:5
mindspore --> 
torch --> 

generate models:5

analyse the exceptions in iter:0
tensorflow exception:
{'id': 0, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 0, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:2

analyse the exceptions in iter:2
tensorflow exception:
{'id': 0, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [113., 111., 105., ...,  72.,  72.,  72.],
          [111., 104.,  99., ...,  68.,  70.,  78.],
          [106.,  99.,  95., ...,  78.,  79.,  80.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [120., 118., 112., ...,  81.,  80.,  80.],
          [118., 111., 106., ...,  75.,  76.,  84.],
          [113., 106., 102., ...,  85.,  85.,  86.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [112., 111., 106., ...,  80.,  79.,  79.],
          [110., 104.,  98., ...,  73.,  75.,  82.],
          [105.,  98.,  94., ...,  83.,  83.,  84.]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:3

analyse the exceptions in iter:3
tensorflow exception:
{'id': 0, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  37.,  38., ...,  76.,  81.,  85.],
          [ 33.,  34.,  32., ...,  95.,  96.,  85.],
          [ 39.,  40.,  57., ...,  93., 107.,  95.],
          ...,
          [ 83.,  87.,  84., ...,  99.,  90.,  81.],
          [ 88.,  90.,  93., ...,  80.,  76.,  82.],
          [ 97.,  94.,  93., ...,  54.,  63.,  72.]],

         [[ 25.,  34.,  35., ...,  67.,  72.,  76.],
          [ 28.,  30.,  27., ...,  82.,  82.,  72.],
          [ 32.,  33.,  50., ...,  76.,  89.,  77.],
          ...,
          [ 73.,  77.,  74., ...,  93.,  84.,  75.],
          [ 72.,  74.,  77., ...,  74.,  70.,  76.],
          [ 78.,  75.,  75., ...,  47.,  56.,  65.]],

         [[ 10.,  19.,  20., ...,  39.,  43.,  47.],
          [ 13.,  14.,  12., ...,  55.,  56.,  45.],
          [ 15.,  17.,  33., ...,  52.,  66.,  54.],
          ...,
          [ 52.,  56.,  52., ...,  70.,  61.,  52.],
          [ 51.,  52.,  56., ...,  53.,  49.,  55.],
          [ 56.,  53.,  53., ...,  28.,  37.,  46.]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:4

analyse the exceptions in iter:6
tensorflow exception:
{'id': 0, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[164., 105., 118., ..., 109., 108.,  91.],
          [167., 116.,  72., ..., 105., 105.,  89.],
          [140., 142., 119., ..., 104.,  84.,  78.],
          ...,
          [139., 142., 135., ...,  89.,  97., 126.],
          [163., 153., 146., ...,  85.,  98., 127.],
          [183., 176., 154., ...,  94.,  91., 122.]],

         [[206., 140., 148., ..., 147., 147., 129.],
          [213., 160., 109., ..., 142., 142., 127.],
          [191., 193., 163., ..., 139., 120., 115.],
          ...,
          [148., 155., 156., ..., 134., 148., 176.],
          [157., 164., 164., ..., 130., 148., 178.],
          [153., 182., 154., ..., 134., 133., 170.]],

         [[ 84.,  61., 101., ...,  73.,  69.,  57.],
          [ 84.,  49.,  43., ...,  79.,  72.,  57.],
          [ 65.,  66.,  79., ...,  84.,  58.,  49.],
          ...,
          [ 81.,  74.,  72., ...,  28.,  24.,  49.],
          [ 85.,  82.,  90., ...,  19.,  27.,  48.],
          [102., 116., 100., ...,  29.,  26.,  44.]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:5

analyse the exceptions in iter:7
tensorflow exception:
{'id': 0, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  30.,  33., ...,  43.,  52.,  46.],
          [ 27.,  27.,  21., ..., 112., 117., 115.],
          [ 34.,  33.,  24., ..., 175., 177., 176.],
          ...,
          [142., 142., 150., ..., 134., 128., 134.],
          [140., 145., 150., ..., 131., 130., 122.],
          [134., 136., 136., ..., 106., 104., 101.]],

         [[ 35.,  34.,  44., ...,  56.,  64.,  58.],
          [ 30.,  28.,  31., ..., 136., 140., 138.],
          [ 36.,  33.,  30., ..., 208., 209., 208.],
          ...,
          [176., 176., 184., ..., 175., 168., 175.],
          [176., 180., 186., ..., 170., 170., 162.],
          [171., 171., 171., ..., 144., 142., 140.]],

         [[ 39.,  44.,  47., ...,  45.,  53.,  47.],
          [ 38.,  41.,  39., ...,  97., 101., 100.],
          [ 42.,  43.,  40., ..., 143., 144., 143.],
          ...,
          [118., 118., 127., ..., 119., 112., 119.],
          [124., 129., 134., ..., 119., 119., 111.],
          [123., 124., 124., ..., 100.,  99.,  96.]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:6

final statics:
total operators:28
tensorflow --> nums:6,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
maxpool2d:6
mindspore --> 
torch --> 

generate models:6

final statics:
total operators:28
tensorflow --> nums:6,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
maxpool2d:6
mindspore --> 
torch --> 

generate models:6

final statics:
total operators:28
tensorflow --> nums:6,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
maxpool2d:6
mindspore --> 
torch --> 

generate models:6

analyse the exceptions in iter:0
tensorflow exception:
{'id': 0, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 0, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:2

analyse the exceptions in iter:6
tensorflow exception:
{'id': 0, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[164., 105., 118., ..., 109., 108.,  91.],
          [167., 116.,  72., ..., 105., 105.,  89.],
          [140., 142., 119., ..., 104.,  84.,  78.],
          ...,
          [139., 142., 135., ...,  89.,  97., 126.],
          [163., 153., 146., ...,  85.,  98., 127.],
          [183., 176., 154., ...,  94.,  91., 122.]],

         [[206., 140., 148., ..., 147., 147., 129.],
          [213., 160., 109., ..., 142., 142., 127.],
          [191., 193., 163., ..., 139., 120., 115.],
          ...,
          [148., 155., 156., ..., 134., 148., 176.],
          [157., 164., 164., ..., 130., 148., 178.],
          [153., 182., 154., ..., 134., 133., 170.]],

         [[ 84.,  61., 101., ...,  73.,  69.,  57.],
          [ 84.,  49.,  43., ...,  79.,  72.,  57.],
          [ 65.,  66.,  79., ...,  84.,  58.,  49.],
          ...,
          [ 81.,  74.,  72., ...,  28.,  24.,  49.],
          [ 85.,  82.,  90., ...,  19.,  27.,  48.],
          [102., 116., 100., ...,  29.,  26.,  44.]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:3

analyse the exceptions in iter:7
tensorflow exception:
{'id': 0, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  30.,  33., ...,  43.,  52.,  46.],
          [ 27.,  27.,  21., ..., 112., 117., 115.],
          [ 34.,  33.,  24., ..., 175., 177., 176.],
          ...,
          [142., 142., 150., ..., 134., 128., 134.],
          [140., 145., 150., ..., 131., 130., 122.],
          [134., 136., 136., ..., 106., 104., 101.]],

         [[ 35.,  34.,  44., ...,  56.,  64.,  58.],
          [ 30.,  28.,  31., ..., 136., 140., 138.],
          [ 36.,  33.,  30., ..., 208., 209., 208.],
          ...,
          [176., 176., 184., ..., 175., 168., 175.],
          [176., 180., 186., ..., 170., 170., 162.],
          [171., 171., 171., ..., 144., 142., 140.]],

         [[ 39.,  44.,  47., ...,  45.,  53.,  47.],
          [ 38.,  41.,  39., ...,  97., 101., 100.],
          [ 42.,  43.,  40., ..., 143., 144., 143.],
          ...,
          [118., 118., 127., ..., 119., 112., 119.],
          [124., 129., 134., ..., 119., 119., 111.],
          [123., 124., 124., ..., 100.,  99.,  96.]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:4

final statics:
total operators:28
tensorflow --> nums:4,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
maxpool2d:4
mindspore --> 
torch --> 

generate models:4

analyse the exceptions in iter:0
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:2

analyse the exceptions in iter:2
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [113., 111., 105., ...,  72.,  72.,  72.],
          [111., 104.,  99., ...,  68.,  70.,  78.],
          [106.,  99.,  95., ...,  78.,  79.,  80.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [120., 118., 112., ...,  81.,  80.,  80.],
          [118., 111., 106., ...,  75.,  76.,  84.],
          [113., 106., 102., ...,  85.,  85.,  86.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [112., 111., 106., ...,  80.,  79.,  79.],
          [110., 104.,  98., ...,  73.,  75.,  82.],
          [105.,  98.,  94., ...,  83.,  83.,  84.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:3

analyse the exceptions in iter:3
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  37.,  38., ...,  76.,  81.,  85.],
          [ 33.,  34.,  32., ...,  95.,  96.,  85.],
          [ 39.,  40.,  57., ...,  93., 107.,  95.],
          ...,
          [ 83.,  87.,  84., ...,  99.,  90.,  81.],
          [ 88.,  90.,  93., ...,  80.,  76.,  82.],
          [ 97.,  94.,  93., ...,  54.,  63.,  72.]],

         [[ 25.,  34.,  35., ...,  67.,  72.,  76.],
          [ 28.,  30.,  27., ...,  82.,  82.,  72.],
          [ 32.,  33.,  50., ...,  76.,  89.,  77.],
          ...,
          [ 73.,  77.,  74., ...,  93.,  84.,  75.],
          [ 72.,  74.,  77., ...,  74.,  70.,  76.],
          [ 78.,  75.,  75., ...,  47.,  56.,  65.]],

         [[ 10.,  19.,  20., ...,  39.,  43.,  47.],
          [ 13.,  14.,  12., ...,  55.,  56.,  45.],
          [ 15.,  17.,  33., ...,  52.,  66.,  54.],
          ...,
          [ 52.,  56.,  52., ...,  70.,  61.,  52.],
          [ 51.,  52.,  56., ...,  53.,  49.,  55.],
          [ 56.,  53.,  53., ...,  28.,  37.,  46.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:4

final statics:
total operators:28
tensorflow --> nums:4,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:4
mindspore --> 
torch --> 

generate models:4

final statics:
total operators:28
tensorflow --> nums:4,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:4
mindspore --> 
torch --> 

generate models:4

final statics:
total operators:28
tensorflow --> nums:4,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:4
mindspore --> 
torch --> 

generate models:4

analyse the exceptions in iter:0
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:2

analyse the exceptions in iter:5
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[159., 150., 153., ...,  91.,  74.,  76.],
          [142., 146., 155., ..., 127., 122.,  86.],
          [109.,  99., 105., ..., 137., 163.,  93.],
          ...,
          [244., 240., 241., ..., 156., 179., 200.],
          [246., 243., 243., ..., 162., 178., 192.],
          [246., 243., 244., ..., 166., 173., 182.]],

         [[102.,  91.,  95., ...,  71.,  63.,  58.],
          [ 75.,  72.,  76., ..., 105., 111.,  69.],
          [ 67.,  58.,  59., ..., 112., 132.,  72.],
          ...,
          [129., 123., 122., ...,  42.,  59.,  73.],
          [133., 128., 127., ...,  44.,  56.,  65.],
          [139., 133., 132., ...,  47.,  51.,  57.]],

         [[101.,  95.,  97., ...,  56.,  55.,  55.],
          [ 68.,  66.,  65., ...,  71.,  93.,  61.],
          [ 75.,  60.,  52., ...,  80., 105.,  71.],
          ...,
          [ 70.,  65.,  65., ...,  15.,  26.,  36.],
          [ 74.,  72.,  70., ...,  14.,  22.,  27.],
          [ 82.,  78.,  77., ...,  14.,  17.,  19.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:3

final statics:
total operators:28
tensorflow --> nums:3,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:3
mindspore --> 
torch --> 

generate models:3

analyse the exceptions in iter:11
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[142., 172., 176., ..., 216., 198., 205.],
          [191., 196., 174., ..., 229., 222., 217.],
          [220., 217., 192., ..., 224., 225., 218.],
          ...,
          [197., 196., 201., ..., 200., 199., 205.],
          [196., 191., 193., ..., 198., 199., 201.],
          [186., 182., 174., ..., 158., 158., 163.]],

         [[149., 172., 168., ..., 212., 194., 202.],
          [190., 192., 166., ..., 222., 215., 210.],
          [212., 209., 183., ..., 214., 214., 208.],
          ...,
          [152., 152., 156., ..., 165., 165., 164.],
          [157., 152., 154., ..., 164., 165., 161.],
          [150., 147., 139., ..., 124., 125., 125.]],

         [[152., 167., 154., ..., 211., 193., 200.],
          [192., 190., 159., ..., 220., 213., 207.],
          [212., 208., 182., ..., 209., 210., 203.],
          ...,
          [136., 135., 140., ..., 146., 146., 150.],
          [139., 135., 136., ..., 144., 145., 146.],
          [133., 130., 121., ..., 105., 106., 111.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:4

analyse the exceptions in iter:15
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[100., 100., 101., ...,  95.,  94.,  95.],
          [103., 103., 104., ...,  97.,  97.,  97.],
          [107., 106., 106., ..., 100., 100., 101.],
          ...,
          [165., 159., 167., ...,  75.,  75.,  72.],
          [158., 173., 182., ...,  76.,  75.,  77.],
          [161., 162., 160., ...,  98., 129., 162.]],

         [[168., 168., 167., ..., 165., 165., 167.],
          [170., 168., 168., ..., 167., 166., 168.],
          [174., 172., 173., ..., 170., 170., 172.],
          ...,
          [178., 170., 177., ..., 117., 120., 120.],
          [174., 186., 193., ..., 119., 119., 121.],
          [176., 176., 171., ..., 137., 160., 185.]],

         [[231., 229., 230., ..., 231., 228., 229.],
          [230., 228., 226., ..., 229., 227., 229.],
          [233., 230., 229., ..., 230., 230., 232.],
          ...,
          [177., 167., 170., ..., 154., 157., 158.],
          [172., 182., 188., ..., 154., 153., 154.],
          [174., 172., 169., ..., 167., 183., 202.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:5

analyse the exceptions in iter:20
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[153., 174., 155., ..., 122., 138.,  97.],
          [160., 164., 150., ..., 137., 160., 103.],
          [140., 147., 136., ..., 104., 125.,  93.],
          ...,
          [175., 170., 170., ..., 193., 197., 199.],
          [174., 173., 171., ..., 200., 202., 208.],
          [168., 164., 166., ..., 204., 204., 206.]],

         [[157., 180., 165., ..., 125., 143., 101.],
          [163., 170., 159., ..., 135., 161., 109.],
          [143., 152., 145., ..., 103., 128., 102.],
          ...,
          [177., 172., 172., ..., 203., 206., 204.],
          [177., 176., 174., ..., 208., 209., 212.],
          [173., 169., 171., ..., 209., 208., 210.]],

         [[155., 188., 172., ..., 123., 141.,  97.],
          [165., 180., 169., ..., 129., 157., 107.],
          [147., 166., 158., ...,  99., 125., 101.],
          ...,
          [179., 174., 174., ..., 212., 214., 213.],
          [181., 180., 178., ..., 216., 218., 221.],
          [180., 175., 177., ..., 217., 217., 219.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:6

analyse the exceptions in iter:21
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[252., 249., 250., ..., 251., 251., 251.],
          [255., 252., 253., ..., 255., 255., 254.],
          [253., 250., 250., ..., 254., 254., 252.],
          ...,
          [254., 252., 253., ..., 252., 253., 252.],
          [250., 252., 255., ..., 254., 255., 254.],
          [236., 249., 250., ..., 250., 250., 251.]],

         [[  8.,  15.,   8., ...,   1.,   0.,   1.],
          [  7.,  15.,  13., ...,   1.,   0.,   4.],
          [  6.,  16.,  24., ...,   1.,   0.,   9.],
          ...,
          [ 66.,  62.,  64., ...,  70.,  69.,  70.],
          [ 49.,  53.,  59., ...,  70.,  68.,  59.],
          [ 37.,  48.,  42., ...,  78.,  74.,  58.]],

         [[ 42.,  42.,  39., ...,  11.,  15.,  30.],
          [ 43.,  44.,  42., ...,  11.,  18.,  33.],
          [ 42.,  42.,  43., ...,  10.,  20.,  37.],
          ...,
          [ 94.,  92.,  93., ..., 101., 103., 104.],
          [ 81.,  82.,  86., ..., 103., 100.,  89.],
          [ 68.,  76.,  73., ..., 113., 109.,  88.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:7

final statics:
total operators:28
tensorflow --> nums:7,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:7
mindspore --> 
torch --> 

generate models:7

final statics:
total operators:28
tensorflow --> nums:7,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:7
mindspore --> 
torch --> 

generate models:7

analyse the exceptions in iter:0
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:2

analyse the exceptions in iter:2
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [113., 111., 105., ...,  72.,  72.,  72.],
          [111., 104.,  99., ...,  68.,  70.,  78.],
          [106.,  99.,  95., ...,  78.,  79.,  80.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [120., 118., 112., ...,  81.,  80.,  80.],
          [118., 111., 106., ...,  75.,  76.,  84.],
          [113., 106., 102., ...,  85.,  85.,  86.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [112., 111., 106., ...,  80.,  79.,  79.],
          [110., 104.,  98., ...,  73.,  75.,  82.],
          [105.,  98.,  94., ...,  83.,  83.,  84.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:3

analyse the exceptions in iter:3
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  37.,  38., ...,  76.,  81.,  85.],
          [ 33.,  34.,  32., ...,  95.,  96.,  85.],
          [ 39.,  40.,  57., ...,  93., 107.,  95.],
          ...,
          [ 83.,  87.,  84., ...,  99.,  90.,  81.],
          [ 88.,  90.,  93., ...,  80.,  76.,  82.],
          [ 97.,  94.,  93., ...,  54.,  63.,  72.]],

         [[ 25.,  34.,  35., ...,  67.,  72.,  76.],
          [ 28.,  30.,  27., ...,  82.,  82.,  72.],
          [ 32.,  33.,  50., ...,  76.,  89.,  77.],
          ...,
          [ 73.,  77.,  74., ...,  93.,  84.,  75.],
          [ 72.,  74.,  77., ...,  74.,  70.,  76.],
          [ 78.,  75.,  75., ...,  47.,  56.,  65.]],

         [[ 10.,  19.,  20., ...,  39.,  43.,  47.],
          [ 13.,  14.,  12., ...,  55.,  56.,  45.],
          [ 15.,  17.,  33., ...,  52.,  66.,  54.],
          ...,
          [ 52.,  56.,  52., ...,  70.,  61.,  52.],
          [ 51.,  52.,  56., ...,  53.,  49.,  55.],
          [ 56.,  53.,  53., ...,  28.,  37.,  46.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:4

analyse the exceptions in iter:7
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  30.,  33., ...,  43.,  52.,  46.],
          [ 27.,  27.,  21., ..., 112., 117., 115.],
          [ 34.,  33.,  24., ..., 175., 177., 176.],
          ...,
          [142., 142., 150., ..., 134., 128., 134.],
          [140., 145., 150., ..., 131., 130., 122.],
          [134., 136., 136., ..., 106., 104., 101.]],

         [[ 35.,  34.,  44., ...,  56.,  64.,  58.],
          [ 30.,  28.,  31., ..., 136., 140., 138.],
          [ 36.,  33.,  30., ..., 208., 209., 208.],
          ...,
          [176., 176., 184., ..., 175., 168., 175.],
          [176., 180., 186., ..., 170., 170., 162.],
          [171., 171., 171., ..., 144., 142., 140.]],

         [[ 39.,  44.,  47., ...,  45.,  53.,  47.],
          [ 38.,  41.,  39., ...,  97., 101., 100.],
          [ 42.,  43.,  40., ..., 143., 144., 143.],
          ...,
          [118., 118., 127., ..., 119., 112., 119.],
          [124., 129., 134., ..., 119., 119., 111.],
          [123., 124., 124., ..., 100.,  99.,  96.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:5

final statics:
total operators:28
tensorflow --> nums:5,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:5
mindspore --> 
torch --> 

generate models:5

analyse the exceptions in iter:14
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[100.,  98.,  99., ..., 165., 163., 165.],
          [101., 100., 100., ..., 164., 163., 159.],
          [105., 104., 104., ..., 156., 136., 114.],
          ...,
          [166., 166., 168., ..., 137., 137., 147.],
          [161., 162., 167., ..., 131., 138., 137.],
          [164., 162., 164., ..., 153., 157., 156.]],

         [[146., 144., 144., ..., 165., 163., 165.],
          [145., 143., 143., ..., 161., 162., 161.],
          [147., 145., 145., ..., 150., 133., 117.],
          ...,
          [156., 156., 157., ..., 127., 126., 136.],
          [152., 153., 158., ..., 125., 133., 132.],
          [158., 156., 158., ..., 146., 151., 150.]],

         [[192., 189., 189., ..., 165., 163., 165.],
          [188., 186., 186., ..., 159., 159., 157.],
          [189., 186., 187., ..., 147., 129., 111.],
          ...,
          [150., 151., 152., ..., 112., 114., 127.],
          [149., 150., 155., ..., 117., 124., 120.],
          [155., 153., 155., ..., 139., 141., 137.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:6

analyse the exceptions in iter:19
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 23.,  47.,  52., ..., 131., 182., 215.],
          [ 32.,  51.,  56., ..., 149., 204., 209.],
          [ 41.,  59.,  60., ..., 138., 196., 203.],
          ...,
          [167., 177., 182., ..., 199., 176., 145.],
          [166., 165., 165., ..., 183., 183., 189.],
          [175., 173., 173., ..., 190., 188., 192.]],

         [[ 27.,  49.,  46., ..., 130., 180., 212.],
          [ 31.,  49.,  49., ..., 148., 206., 217.],
          [ 37.,  57.,  59., ..., 138., 200., 217.],
          ...,
          [167., 177., 182., ..., 192., 171., 140.],
          [166., 165., 165., ..., 181., 182., 187.],
          [175., 173., 173., ..., 187., 186., 189.]],

         [[ 22.,  41.,  30., ..., 117., 174., 230.],
          [ 24.,  38.,  34., ..., 133., 197., 232.],
          [ 25.,  47.,  51., ..., 125., 194., 233.],
          ...,
          [168., 177., 182., ..., 192., 171., 140.],
          [166., 165., 165., ..., 181., 182., 188.],
          [175., 173., 173., ..., 184., 183., 186.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:7

analyse the exceptions in iter:48
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[191., 190., 190., ..., 135., 142., 146.],
          [187., 184., 179., ..., 147., 152., 153.],
          [181., 176., 165., ..., 154., 162., 158.],
          ...,
          [220., 221., 222., ..., 211., 214., 224.],
          [212., 220., 225., ..., 216., 216., 221.],
          [201., 212., 217., ..., 220., 217., 217.]],

         [[191., 192., 193., ..., 143., 149., 150.],
          [188., 187., 183., ..., 154., 158., 158.],
          [183., 178., 169., ..., 161., 167., 163.],
          ...,
          [245., 245., 244., ..., 238., 240., 248.],
          [238., 245., 247., ..., 242., 241., 244.],
          [226., 239., 243., ..., 242., 240., 238.]],

         [[168., 172., 174., ..., 123., 126., 127.],
          [165., 166., 163., ..., 134., 135., 134.],
          [160., 157., 148., ..., 140., 143., 139.],
          ...,
          [198., 199., 202., ..., 189., 193., 203.],
          [190., 198., 204., ..., 194., 195., 201.],
          [178., 190., 196., ..., 197., 196., 195.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:8

final statics:
total operators:28
tensorflow --> nums:8,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:8
mindspore --> 
torch --> 

generate models:8

final statics:
total operators:28
tensorflow --> nums:8,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:8
mindspore --> 
torch --> 

generate models:8

analyse the exceptions in iter:0
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:2

analyse the exceptions in iter:5
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[159., 150., 153., ...,  91.,  74.,  76.],
          [142., 146., 155., ..., 127., 122.,  86.],
          [109.,  99., 105., ..., 137., 163.,  93.],
          ...,
          [244., 240., 241., ..., 156., 179., 200.],
          [246., 243., 243., ..., 162., 178., 192.],
          [246., 243., 244., ..., 166., 173., 182.]],

         [[102.,  91.,  95., ...,  71.,  63.,  58.],
          [ 75.,  72.,  76., ..., 105., 111.,  69.],
          [ 67.,  58.,  59., ..., 112., 132.,  72.],
          ...,
          [129., 123., 122., ...,  42.,  59.,  73.],
          [133., 128., 127., ...,  44.,  56.,  65.],
          [139., 133., 132., ...,  47.,  51.,  57.]],

         [[101.,  95.,  97., ...,  56.,  55.,  55.],
          [ 68.,  66.,  65., ...,  71.,  93.,  61.],
          [ 75.,  60.,  52., ...,  80., 105.,  71.],
          ...,
          [ 70.,  65.,  65., ...,  15.,  26.,  36.],
          [ 74.,  72.,  70., ...,  14.,  22.,  27.],
          [ 82.,  78.,  77., ...,  14.,  17.,  19.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:3

analyse the exceptions in iter:7
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  30.,  33., ...,  43.,  52.,  46.],
          [ 27.,  27.,  21., ..., 112., 117., 115.],
          [ 34.,  33.,  24., ..., 175., 177., 176.],
          ...,
          [142., 142., 150., ..., 134., 128., 134.],
          [140., 145., 150., ..., 131., 130., 122.],
          [134., 136., 136., ..., 106., 104., 101.]],

         [[ 35.,  34.,  44., ...,  56.,  64.,  58.],
          [ 30.,  28.,  31., ..., 136., 140., 138.],
          [ 36.,  33.,  30., ..., 208., 209., 208.],
          ...,
          [176., 176., 184., ..., 175., 168., 175.],
          [176., 180., 186., ..., 170., 170., 162.],
          [171., 171., 171., ..., 144., 142., 140.]],

         [[ 39.,  44.,  47., ...,  45.,  53.,  47.],
          [ 38.,  41.,  39., ...,  97., 101., 100.],
          [ 42.,  43.,  40., ..., 143., 144., 143.],
          ...,
          [118., 118., 127., ..., 119., 112., 119.],
          [124., 129., 134., ..., 119., 119., 111.],
          [123., 124., 124., ..., 100.,  99.,  96.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:4

analyse the exceptions in iter:8
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[134., 131., 128., ..., 127., 127., 128.],
          [133., 129., 128., ..., 127., 127., 128.],
          [128., 127., 128., ..., 126., 126., 126.],
          ...,
          [174., 171., 155., ...,  27.,  29.,  28.],
          [194., 189., 159., ...,  30.,  30.,  30.],
          [193., 181., 168., ...,  31.,  32.,  32.]],

         [[186., 184., 182., ..., 181., 181., 182.],
          [189., 186., 186., ..., 183., 183., 184.],
          [185., 182., 182., ..., 181., 181., 180.],
          ...,
          [208., 206., 189., ...,  94.,  96.,  94.],
          [221., 215., 196., ...,  95.,  96.,  95.],
          [217., 208., 201., ...,  94.,  94.,  94.]],

         [[223., 220., 218., ..., 222., 222., 223.],
          [228., 224., 224., ..., 224., 224., 225.],
          [226., 223., 223., ..., 222., 222., 221.],
          ...,
          [235., 229., 216., ..., 136., 137., 136.],
          [244., 239., 225., ..., 138., 139., 140.],
          [237., 230., 227., ..., 136., 137., 138.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:5

final statics:
total operators:28
tensorflow --> nums:5,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:5
mindspore --> 
torch --> 

generate models:5

analyse the exceptions in iter:14
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[100.,  98.,  99., ..., 165., 163., 165.],
          [101., 100., 100., ..., 164., 163., 159.],
          [105., 104., 104., ..., 156., 136., 114.],
          ...,
          [166., 166., 168., ..., 137., 137., 147.],
          [161., 162., 167., ..., 131., 138., 137.],
          [164., 162., 164., ..., 153., 157., 156.]],

         [[146., 144., 144., ..., 165., 163., 165.],
          [145., 143., 143., ..., 161., 162., 161.],
          [147., 145., 145., ..., 150., 133., 117.],
          ...,
          [156., 156., 157., ..., 127., 126., 136.],
          [152., 153., 158., ..., 125., 133., 132.],
          [158., 156., 158., ..., 146., 151., 150.]],

         [[192., 189., 189., ..., 165., 163., 165.],
          [188., 186., 186., ..., 159., 159., 157.],
          [189., 186., 187., ..., 147., 129., 111.],
          ...,
          [150., 151., 152., ..., 112., 114., 127.],
          [149., 150., 155., ..., 117., 124., 120.],
          [155., 153., 155., ..., 139., 141., 137.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:6

analyse the exceptions in iter:17
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[110., 142., 151., ...,  39.,  40.,  38.],
          [109., 141., 152., ...,  36.,  40.,  36.],
          [105., 142., 151., ...,  39.,  44.,  39.],
          ...,
          [ 62.,  39.,  60., ...,  42.,  46.,  47.],
          [ 62.,  52.,  58., ...,  43.,  47.,  49.],
          [ 55.,  60.,  56., ...,  45.,  47.,  51.]],

         [[104., 135., 146., ...,  39.,  40.,  38.],
          [103., 133., 147., ...,  36.,  40.,  36.],
          [ 98., 133., 145., ...,  39.,  44.,  39.],
          ...,
          [ 59.,  38.,  64., ...,  44.,  44.,  44.],
          [ 57.,  51.,  61., ...,  46.,  45.,  46.],
          [ 51.,  60.,  60., ...,  48.,  46.,  48.]],

         [[ 97., 118., 120., ...,  39.,  40.,  38.],
          [ 95., 115., 119., ...,  37.,  40.,  36.],
          [ 90., 114., 117., ...,  41.,  45.,  40.],
          ...,
          [ 60.,  49.,  81., ...,  56.,  55.,  55.],
          [ 56.,  61.,  78., ...,  58.,  58.,  60.],
          [ 50.,  71.,  78., ...,  60.,  60.,  62.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:7

analyse the exceptions in iter:38
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[110., 223., 243., ...,   7.,   0.,   0.],
          [102., 213., 244., ...,  98.,  80.,  31.],
          [ 99., 204., 248., ..., 221., 198.,  89.],
          ...,
          [ 58.,  58.,  51., ...,   8.,   9.,   6.],
          [ 69.,  54.,  49., ...,  48.,  52.,  35.],
          [ 81.,  52.,  50., ...,  15.,  16.,  13.]],

         [[ 90., 197., 215., ...,   2.,   0.,   0.],
          [ 83., 187., 217., ...,  90.,  74.,  27.],
          [ 78., 179., 221., ..., 209., 188.,  81.],
          ...,
          [ 63.,  70.,  69., ...,   8.,  10.,   8.],
          [ 72.,  64.,  65., ...,  44.,  47.,  32.],
          [ 80.,  58.,  63., ...,   5.,   5.,   3.]],

         [[ 84., 185., 201., ...,   3.,   0.,   0.],
          [ 77., 176., 203., ...,  92.,  75.,  28.],
          [ 72., 167., 207., ..., 213., 191.,  83.],
          ...,
          [ 87., 100., 103., ...,  10.,   7.,   5.],
          [ 94.,  92.,  98., ...,  43.,  44.,  30.],
          [100.,  84.,  93., ...,   5.,   5.,   4.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:8

final statics:
total operators:28
tensorflow --> nums:8,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:8
mindspore --> 
torch --> 

generate models:8

analyse the exceptions in iter:77
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 44.,  47.,  51., ...,  75.,  72.,  74.],
          [ 52.,  47.,  51., ...,  73.,  74.,  76.],
          [ 65.,  57.,  54., ...,  73.,  73.,  75.],
          ...,
          [ 56.,  49.,  49., ...,  53.,  52.,  53.],
          [ 41.,  56.,  52., ...,  52.,  52.,  49.],
          [ 24.,  49.,  40., ...,  54.,  55.,  46.]],

         [[ 73.,  77.,  81., ..., 107., 104., 106.],
          [ 85.,  79.,  82., ..., 105., 106., 108.],
          [100.,  91.,  87., ..., 105., 105., 108.],
          ...,
          [ 82.,  75.,  74., ...,  77.,  77.,  77.],
          [ 64.,  79.,  75., ...,  74.,  74.,  72.],
          [ 44.,  69.,  60., ...,  74.,  74.,  66.]],

         [[ 49.,  53.,  57., ...,  83.,  80.,  82.],
          [ 55.,  54.,  60., ...,  81.,  82.,  84.],
          [ 67.,  65.,  66., ...,  81.,  81.,  82.],
          ...,
          [ 48.,  41.,  41., ...,  49.,  48.,  49.],
          [ 35.,  50.,  46., ...,  49.,  49.,  46.],
          [ 19.,  44.,  36., ...,  51.,  52.,  43.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:9

final statics:
total operators:28
tensorflow --> nums:9,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:9
mindspore --> 
torch --> 

generate models:9

analyse the exceptions in iter:0
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:2

analyse the exceptions in iter:5
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[159., 150., 153., ...,  91.,  74.,  76.],
          [142., 146., 155., ..., 127., 122.,  86.],
          [109.,  99., 105., ..., 137., 163.,  93.],
          ...,
          [244., 240., 241., ..., 156., 179., 200.],
          [246., 243., 243., ..., 162., 178., 192.],
          [246., 243., 244., ..., 166., 173., 182.]],

         [[102.,  91.,  95., ...,  71.,  63.,  58.],
          [ 75.,  72.,  76., ..., 105., 111.,  69.],
          [ 67.,  58.,  59., ..., 112., 132.,  72.],
          ...,
          [129., 123., 122., ...,  42.,  59.,  73.],
          [133., 128., 127., ...,  44.,  56.,  65.],
          [139., 133., 132., ...,  47.,  51.,  57.]],

         [[101.,  95.,  97., ...,  56.,  55.,  55.],
          [ 68.,  66.,  65., ...,  71.,  93.,  61.],
          [ 75.,  60.,  52., ...,  80., 105.,  71.],
          ...,
          [ 70.,  65.,  65., ...,  15.,  26.,  36.],
          [ 74.,  72.,  70., ...,  14.,  22.,  27.],
          [ 82.,  78.,  77., ...,  14.,  17.,  19.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:3

analyse the exceptions in iter:6
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[164., 105., 118., ..., 109., 108.,  91.],
          [167., 116.,  72., ..., 105., 105.,  89.],
          [140., 142., 119., ..., 104.,  84.,  78.],
          ...,
          [139., 142., 135., ...,  89.,  97., 126.],
          [163., 153., 146., ...,  85.,  98., 127.],
          [183., 176., 154., ...,  94.,  91., 122.]],

         [[206., 140., 148., ..., 147., 147., 129.],
          [213., 160., 109., ..., 142., 142., 127.],
          [191., 193., 163., ..., 139., 120., 115.],
          ...,
          [148., 155., 156., ..., 134., 148., 176.],
          [157., 164., 164., ..., 130., 148., 178.],
          [153., 182., 154., ..., 134., 133., 170.]],

         [[ 84.,  61., 101., ...,  73.,  69.,  57.],
          [ 84.,  49.,  43., ...,  79.,  72.,  57.],
          [ 65.,  66.,  79., ...,  84.,  58.,  49.],
          ...,
          [ 81.,  74.,  72., ...,  28.,  24.,  49.],
          [ 85.,  82.,  90., ...,  19.,  27.,  48.],
          [102., 116., 100., ...,  29.,  26.,  44.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:4

final statics:
total operators:28
tensorflow --> nums:4,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:4
mindspore --> 
torch --> 

generate models:4

analyse the exceptions in iter:10
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[53., 54., 56., ..., 47., 41., 24.],
          [46., 53., 54., ..., 42., 39., 28.],
          [45., 50., 46., ..., 38., 36., 29.],
          ...,
          [71., 74., 80., ..., 51., 46., 49.],
          [75., 79., 81., ..., 61., 64., 48.],
          [85., 85., 86., ..., 61., 64., 49.]],

         [[65., 63., 60., ..., 51., 45., 28.],
          [59., 62., 59., ..., 46., 43., 32.],
          [59., 60., 52., ..., 42., 40., 33.],
          ...,
          [83., 83., 85., ..., 54., 49., 50.],
          [82., 85., 85., ..., 65., 67., 50.],
          [83., 84., 86., ..., 65., 67., 50.]],

         [[53., 52., 50., ..., 50., 44., 27.],
          [41., 45., 44., ..., 45., 42., 31.],
          [38., 41., 34., ..., 41., 39., 32.],
          ...,
          [66., 66., 67., ..., 33., 34., 41.],
          [67., 69., 67., ..., 41., 48., 41.],
          [71., 71., 70., ..., 39., 46., 41.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:5

analyse the exceptions in iter:19
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 23.,  47.,  52., ..., 131., 182., 215.],
          [ 32.,  51.,  56., ..., 149., 204., 209.],
          [ 41.,  59.,  60., ..., 138., 196., 203.],
          ...,
          [167., 177., 182., ..., 199., 176., 145.],
          [166., 165., 165., ..., 183., 183., 189.],
          [175., 173., 173., ..., 190., 188., 192.]],

         [[ 27.,  49.,  46., ..., 130., 180., 212.],
          [ 31.,  49.,  49., ..., 148., 206., 217.],
          [ 37.,  57.,  59., ..., 138., 200., 217.],
          ...,
          [167., 177., 182., ..., 192., 171., 140.],
          [166., 165., 165., ..., 181., 182., 187.],
          [175., 173., 173., ..., 187., 186., 189.]],

         [[ 22.,  41.,  30., ..., 117., 174., 230.],
          [ 24.,  38.,  34., ..., 133., 197., 232.],
          [ 25.,  47.,  51., ..., 125., 194., 233.],
          ...,
          [168., 177., 182., ..., 192., 171., 140.],
          [166., 165., 165., ..., 181., 182., 188.],
          [175., 173., 173., ..., 184., 183., 186.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:6

analyse the exceptions in iter:25
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[162., 164., 169., ..., 184., 190., 202.],
          [153., 158., 164., ..., 178., 189., 201.],
          [157., 161., 164., ..., 178., 190., 202.],
          ...,
          [214., 213., 213., ..., 240., 241., 242.],
          [218., 209., 208., ..., 232., 236., 239.],
          [216., 207., 201., ..., 231., 233., 235.]],

         [[164., 167., 171., ..., 176., 186., 198.],
          [151., 156., 163., ..., 171., 184., 198.],
          [151., 156., 160., ..., 170., 186., 199.],
          ...,
          [205., 193., 185., ..., 207., 206., 209.],
          [209., 188., 180., ..., 195., 196., 200.],
          [204., 189., 174., ..., 192., 194., 198.]],

         [[130., 128., 131., ..., 137., 146., 161.],
          [119., 120., 124., ..., 131., 143., 158.],
          [120., 121., 122., ..., 131., 142., 156.],
          ...,
          [193., 181., 174., ..., 193., 194., 196.],
          [198., 176., 169., ..., 182., 185., 187.],
          [197., 178., 156., ..., 178., 181., 183.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:7

analyse the exceptions in iter:39
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 98., 119., 109., ...,  75.,  60.,  61.],
          [ 44.,  75.,  69., ...,  81.,  55.,  65.],
          [ 73.,  94., 111., ...,  77.,  60.,  58.],
          ...,
          [ 96., 100., 129., ...,  72.,  68.,  85.],
          [124., 114., 110., ...,  84.,  81.,  73.],
          [ 93.,  98.,  95., ...,  73.,  55.,  72.]],

         [[110., 132., 122., ...,  97.,  82.,  84.],
          [ 56.,  86.,  80., ..., 103.,  77.,  87.],
          [ 84., 105., 122., ...,  99.,  82.,  82.],
          ...,
          [ 98., 100., 126., ...,  73.,  71.,  93.],
          [137., 124., 117., ...,  92.,  89.,  81.],
          [110., 112., 106., ...,  82.,  63.,  79.]],

         [[ 96., 117., 107., ...,  76.,  62.,  67.],
          [ 46.,  76.,  70., ...,  82.,  57.,  74.],
          [ 77.,  98., 115., ...,  78.,  61.,  61.],
          ...,
          [ 99., 100., 124., ...,  69.,  67.,  85.],
          [135., 121., 111., ...,  85.,  84.,  74.],
          [107., 107.,  99., ...,  75.,  58.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:8

final statics:
total operators:28
tensorflow --> nums:8,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:8
mindspore --> 
torch --> 

generate models:8

final statics:
total operators:28
tensorflow --> nums:8,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:8
mindspore --> 
torch --> 

generate models:8

analyse the exceptions in iter:0
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:2

analyse the exceptions in iter:2
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [113., 111., 105., ...,  72.,  72.,  72.],
          [111., 104.,  99., ...,  68.,  70.,  78.],
          [106.,  99.,  95., ...,  78.,  79.,  80.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [120., 118., 112., ...,  81.,  80.,  80.],
          [118., 111., 106., ...,  75.,  76.,  84.],
          [113., 106., 102., ...,  85.,  85.,  86.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [112., 111., 106., ...,  80.,  79.,  79.],
          [110., 104.,  98., ...,  73.,  75.,  82.],
          [105.,  98.,  94., ...,  83.,  83.,  84.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:3

analyse the exceptions in iter:3
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  37.,  38., ...,  76.,  81.,  85.],
          [ 33.,  34.,  32., ...,  95.,  96.,  85.],
          [ 39.,  40.,  57., ...,  93., 107.,  95.],
          ...,
          [ 83.,  87.,  84., ...,  99.,  90.,  81.],
          [ 88.,  90.,  93., ...,  80.,  76.,  82.],
          [ 97.,  94.,  93., ...,  54.,  63.,  72.]],

         [[ 25.,  34.,  35., ...,  67.,  72.,  76.],
          [ 28.,  30.,  27., ...,  82.,  82.,  72.],
          [ 32.,  33.,  50., ...,  76.,  89.,  77.],
          ...,
          [ 73.,  77.,  74., ...,  93.,  84.,  75.],
          [ 72.,  74.,  77., ...,  74.,  70.,  76.],
          [ 78.,  75.,  75., ...,  47.,  56.,  65.]],

         [[ 10.,  19.,  20., ...,  39.,  43.,  47.],
          [ 13.,  14.,  12., ...,  55.,  56.,  45.],
          [ 15.,  17.,  33., ...,  52.,  66.,  54.],
          ...,
          [ 52.,  56.,  52., ...,  70.,  61.,  52.],
          [ 51.,  52.,  56., ...,  53.,  49.,  55.],
          [ 56.,  53.,  53., ...,  28.,  37.,  46.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:4

analyse the exceptions in iter:5
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[159., 150., 153., ...,  91.,  74.,  76.],
          [142., 146., 155., ..., 127., 122.,  86.],
          [109.,  99., 105., ..., 137., 163.,  93.],
          ...,
          [244., 240., 241., ..., 156., 179., 200.],
          [246., 243., 243., ..., 162., 178., 192.],
          [246., 243., 244., ..., 166., 173., 182.]],

         [[102.,  91.,  95., ...,  71.,  63.,  58.],
          [ 75.,  72.,  76., ..., 105., 111.,  69.],
          [ 67.,  58.,  59., ..., 112., 132.,  72.],
          ...,
          [129., 123., 122., ...,  42.,  59.,  73.],
          [133., 128., 127., ...,  44.,  56.,  65.],
          [139., 133., 132., ...,  47.,  51.,  57.]],

         [[101.,  95.,  97., ...,  56.,  55.,  55.],
          [ 68.,  66.,  65., ...,  71.,  93.,  61.],
          [ 75.,  60.,  52., ...,  80., 105.,  71.],
          ...,
          [ 70.,  65.,  65., ...,  15.,  26.,  36.],
          [ 74.,  72.,  70., ...,  14.,  22.,  27.],
          [ 82.,  78.,  77., ...,  14.,  17.,  19.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:5

final statics:
total operators:28
tensorflow --> nums:5,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:5
mindspore --> 
torch --> 

generate models:5

analyse the exceptions in iter:10
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[53., 54., 56., ..., 47., 41., 24.],
          [46., 53., 54., ..., 42., 39., 28.],
          [45., 50., 46., ..., 38., 36., 29.],
          ...,
          [71., 74., 80., ..., 51., 46., 49.],
          [75., 79., 81., ..., 61., 64., 48.],
          [85., 85., 86., ..., 61., 64., 49.]],

         [[65., 63., 60., ..., 51., 45., 28.],
          [59., 62., 59., ..., 46., 43., 32.],
          [59., 60., 52., ..., 42., 40., 33.],
          ...,
          [83., 83., 85., ..., 54., 49., 50.],
          [82., 85., 85., ..., 65., 67., 50.],
          [83., 84., 86., ..., 65., 67., 50.]],

         [[53., 52., 50., ..., 50., 44., 27.],
          [41., 45., 44., ..., 45., 42., 31.],
          [38., 41., 34., ..., 41., 39., 32.],
          ...,
          [66., 66., 67., ..., 33., 34., 41.],
          [67., 69., 67., ..., 41., 48., 41.],
          [71., 71., 70., ..., 39., 46., 41.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:6

analyse the exceptions in iter:17
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[110., 142., 151., ...,  39.,  40.,  38.],
          [109., 141., 152., ...,  36.,  40.,  36.],
          [105., 142., 151., ...,  39.,  44.,  39.],
          ...,
          [ 62.,  39.,  60., ...,  42.,  46.,  47.],
          [ 62.,  52.,  58., ...,  43.,  47.,  49.],
          [ 55.,  60.,  56., ...,  45.,  47.,  51.]],

         [[104., 135., 146., ...,  39.,  40.,  38.],
          [103., 133., 147., ...,  36.,  40.,  36.],
          [ 98., 133., 145., ...,  39.,  44.,  39.],
          ...,
          [ 59.,  38.,  64., ...,  44.,  44.,  44.],
          [ 57.,  51.,  61., ...,  46.,  45.,  46.],
          [ 51.,  60.,  60., ...,  48.,  46.,  48.]],

         [[ 97., 118., 120., ...,  39.,  40.,  38.],
          [ 95., 115., 119., ...,  37.,  40.,  36.],
          [ 90., 114., 117., ...,  41.,  45.,  40.],
          ...,
          [ 60.,  49.,  81., ...,  56.,  55.,  55.],
          [ 56.,  61.,  78., ...,  58.,  58.,  60.],
          [ 50.,  71.,  78., ...,  60.,  60.,  62.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:7

analyse the exceptions in iter:32
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 50.,  51.,  42., ...,  48.,  18.,  14.],
          [ 86.,  92.,  82., ...,  46.,  17.,  11.],
          [ 43.,  43.,  51., ...,  42.,  10.,   6.],
          ...,
          [220., 209., 199., ..., 177., 176., 175.],
          [188., 182., 182., ..., 176., 175., 174.],
          [188., 184., 186., ..., 176., 176., 173.]],

         [[ 64.,  63.,  55., ...,  45.,  18.,  15.],
          [107., 110.,  99., ...,  43.,  17.,  12.],
          [ 60.,  56.,  65., ...,  39.,  10.,   6.],
          ...,
          [165., 174., 172., ..., 171., 170., 168.],
          [178., 170., 161., ..., 168., 167., 166.],
          [167., 163., 167., ..., 169., 168., 165.]],

         [[ 37.,  41.,  41., ...,  42.,  14.,  12.],
          [ 67.,  76.,  67., ...,  41.,  14.,  10.],
          [ 42.,  41.,  46., ...,  37.,   9.,   5.],
          ...,
          [151., 165., 164., ..., 168., 167., 166.],
          [162., 162., 157., ..., 166., 165., 164.],
          [162., 157., 160., ..., 166., 166., 162.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:8

analyse the exceptions in iter:37
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 95.,  88.,  86., ..., 101.,  91., 105.],
          [ 82.,  75.,  76., ...,  94.,  51.,  84.],
          [ 77.,  74.,  71., ...,  71.,  47.,  88.],
          ...,
          [ 97.,  92.,  97., ...,  86.,  94.,  90.],
          [ 95.,  84.,  89., ...,  96., 102.,  97.],
          [ 91.,  83.,  82., ..., 100., 105., 108.]],

         [[105.,  97.,  96., ..., 116., 108., 124.],
          [ 90.,  83.,  84., ..., 102.,  61.,  97.],
          [ 85.,  81.,  78., ...,  74.,  52.,  95.],
          ...,
          [ 95.,  92.,  93., ...,  91.,  97.,  97.],
          [ 90.,  86.,  89., ...,  97.,  96.,  94.],
          [ 84.,  81.,  81., ...,  96.,  97., 102.]],

         [[127., 120., 118., ..., 144., 136., 157.],
          [110., 104., 104., ..., 123.,  80., 122.],
          [103.,  98.,  95., ...,  86.,  63., 111.],
          ...,
          [ 72.,  69.,  70., ...,  65.,  72.,  71.],
          [ 65.,  59.,  62., ...,  76.,  77.,  73.],
          [ 63.,  57.,  55., ...,  78.,  80.,  83.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:9

final statics:
total operators:28
tensorflow --> nums:9,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:9
mindspore --> 
torch --> 

generate models:9

final statics:
total operators:28
tensorflow --> nums:9,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:9
mindspore --> 
torch --> 

generate models:9

analyse the exceptions in iter:0
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:2

analyse the exceptions in iter:2
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [113., 111., 105., ...,  72.,  72.,  72.],
          [111., 104.,  99., ...,  68.,  70.,  78.],
          [106.,  99.,  95., ...,  78.,  79.,  80.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [120., 118., 112., ...,  81.,  80.,  80.],
          [118., 111., 106., ...,  75.,  76.,  84.],
          [113., 106., 102., ...,  85.,  85.,  86.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [112., 111., 106., ...,  80.,  79.,  79.],
          [110., 104.,  98., ...,  73.,  75.,  82.],
          [105.,  98.,  94., ...,  83.,  83.,  84.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:3

analyse the exceptions in iter:3
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  37.,  38., ...,  76.,  81.,  85.],
          [ 33.,  34.,  32., ...,  95.,  96.,  85.],
          [ 39.,  40.,  57., ...,  93., 107.,  95.],
          ...,
          [ 83.,  87.,  84., ...,  99.,  90.,  81.],
          [ 88.,  90.,  93., ...,  80.,  76.,  82.],
          [ 97.,  94.,  93., ...,  54.,  63.,  72.]],

         [[ 25.,  34.,  35., ...,  67.,  72.,  76.],
          [ 28.,  30.,  27., ...,  82.,  82.,  72.],
          [ 32.,  33.,  50., ...,  76.,  89.,  77.],
          ...,
          [ 73.,  77.,  74., ...,  93.,  84.,  75.],
          [ 72.,  74.,  77., ...,  74.,  70.,  76.],
          [ 78.,  75.,  75., ...,  47.,  56.,  65.]],

         [[ 10.,  19.,  20., ...,  39.,  43.,  47.],
          [ 13.,  14.,  12., ...,  55.,  56.,  45.],
          [ 15.,  17.,  33., ...,  52.,  66.,  54.],
          ...,
          [ 52.,  56.,  52., ...,  70.,  61.,  52.],
          [ 51.,  52.,  56., ...,  53.,  49.,  55.],
          [ 56.,  53.,  53., ...,  28.,  37.,  46.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:4

analyse the exceptions in iter:5
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[159., 150., 153., ...,  91.,  74.,  76.],
          [142., 146., 155., ..., 127., 122.,  86.],
          [109.,  99., 105., ..., 137., 163.,  93.],
          ...,
          [244., 240., 241., ..., 156., 179., 200.],
          [246., 243., 243., ..., 162., 178., 192.],
          [246., 243., 244., ..., 166., 173., 182.]],

         [[102.,  91.,  95., ...,  71.,  63.,  58.],
          [ 75.,  72.,  76., ..., 105., 111.,  69.],
          [ 67.,  58.,  59., ..., 112., 132.,  72.],
          ...,
          [129., 123., 122., ...,  42.,  59.,  73.],
          [133., 128., 127., ...,  44.,  56.,  65.],
          [139., 133., 132., ...,  47.,  51.,  57.]],

         [[101.,  95.,  97., ...,  56.,  55.,  55.],
          [ 68.,  66.,  65., ...,  71.,  93.,  61.],
          [ 75.,  60.,  52., ...,  80., 105.,  71.],
          ...,
          [ 70.,  65.,  65., ...,  15.,  26.,  36.],
          [ 74.,  72.,  70., ...,  14.,  22.,  27.],
          [ 82.,  78.,  77., ...,  14.,  17.,  19.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:5

analyse the exceptions in iter:7
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  30.,  33., ...,  43.,  52.,  46.],
          [ 27.,  27.,  21., ..., 112., 117., 115.],
          [ 34.,  33.,  24., ..., 175., 177., 176.],
          ...,
          [142., 142., 150., ..., 134., 128., 134.],
          [140., 145., 150., ..., 131., 130., 122.],
          [134., 136., 136., ..., 106., 104., 101.]],

         [[ 35.,  34.,  44., ...,  56.,  64.,  58.],
          [ 30.,  28.,  31., ..., 136., 140., 138.],
          [ 36.,  33.,  30., ..., 208., 209., 208.],
          ...,
          [176., 176., 184., ..., 175., 168., 175.],
          [176., 180., 186., ..., 170., 170., 162.],
          [171., 171., 171., ..., 144., 142., 140.]],

         [[ 39.,  44.,  47., ...,  45.,  53.,  47.],
          [ 38.,  41.,  39., ...,  97., 101., 100.],
          [ 42.,  43.,  40., ..., 143., 144., 143.],
          ...,
          [118., 118., 127., ..., 119., 112., 119.],
          [124., 129., 134., ..., 119., 119., 111.],
          [123., 124., 124., ..., 100.,  99.,  96.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:6

final statics:
total operators:28
tensorflow --> nums:6,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:6
mindspore --> 
torch --> 

generate models:6

analyse the exceptions in iter:15
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[100., 100., 101., ...,  95.,  94.,  95.],
          [103., 103., 104., ...,  97.,  97.,  97.],
          [107., 106., 106., ..., 100., 100., 101.],
          ...,
          [165., 159., 167., ...,  75.,  75.,  72.],
          [158., 173., 182., ...,  76.,  75.,  77.],
          [161., 162., 160., ...,  98., 129., 162.]],

         [[168., 168., 167., ..., 165., 165., 167.],
          [170., 168., 168., ..., 167., 166., 168.],
          [174., 172., 173., ..., 170., 170., 172.],
          ...,
          [178., 170., 177., ..., 117., 120., 120.],
          [174., 186., 193., ..., 119., 119., 121.],
          [176., 176., 171., ..., 137., 160., 185.]],

         [[231., 229., 230., ..., 231., 228., 229.],
          [230., 228., 226., ..., 229., 227., 229.],
          [233., 230., 229., ..., 230., 230., 232.],
          ...,
          [177., 167., 170., ..., 154., 157., 158.],
          [172., 182., 188., ..., 154., 153., 154.],
          [174., 172., 169., ..., 167., 183., 202.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:7

analyse the exceptions in iter:20
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[153., 174., 155., ..., 122., 138.,  97.],
          [160., 164., 150., ..., 137., 160., 103.],
          [140., 147., 136., ..., 104., 125.,  93.],
          ...,
          [175., 170., 170., ..., 193., 197., 199.],
          [174., 173., 171., ..., 200., 202., 208.],
          [168., 164., 166., ..., 204., 204., 206.]],

         [[157., 180., 165., ..., 125., 143., 101.],
          [163., 170., 159., ..., 135., 161., 109.],
          [143., 152., 145., ..., 103., 128., 102.],
          ...,
          [177., 172., 172., ..., 203., 206., 204.],
          [177., 176., 174., ..., 208., 209., 212.],
          [173., 169., 171., ..., 209., 208., 210.]],

         [[155., 188., 172., ..., 123., 141.,  97.],
          [165., 180., 169., ..., 129., 157., 107.],
          [147., 166., 158., ...,  99., 125., 101.],
          ...,
          [179., 174., 174., ..., 212., 214., 213.],
          [181., 180., 178., ..., 216., 218., 221.],
          [180., 175., 177., ..., 217., 217., 219.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:8

final statics:
total operators:28
tensorflow --> nums:8,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:8
mindspore --> 
torch --> 

generate models:8

final statics:
total operators:28
tensorflow --> nums:8,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:8
mindspore --> 
torch --> 

generate models:8

analyse the exceptions in iter:0
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:2

analyse the exceptions in iter:2
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [113., 111., 105., ...,  72.,  72.,  72.],
          [111., 104.,  99., ...,  68.,  70.,  78.],
          [106.,  99.,  95., ...,  78.,  79.,  80.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [120., 118., 112., ...,  81.,  80.,  80.],
          [118., 111., 106., ...,  75.,  76.,  84.],
          [113., 106., 102., ...,  85.,  85.,  86.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [112., 111., 106., ...,  80.,  79.,  79.],
          [110., 104.,  98., ...,  73.,  75.,  82.],
          [105.,  98.,  94., ...,  83.,  83.,  84.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:3

analyse the exceptions in iter:3
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  37.,  38., ...,  76.,  81.,  85.],
          [ 33.,  34.,  32., ...,  95.,  96.,  85.],
          [ 39.,  40.,  57., ...,  93., 107.,  95.],
          ...,
          [ 83.,  87.,  84., ...,  99.,  90.,  81.],
          [ 88.,  90.,  93., ...,  80.,  76.,  82.],
          [ 97.,  94.,  93., ...,  54.,  63.,  72.]],

         [[ 25.,  34.,  35., ...,  67.,  72.,  76.],
          [ 28.,  30.,  27., ...,  82.,  82.,  72.],
          [ 32.,  33.,  50., ...,  76.,  89.,  77.],
          ...,
          [ 73.,  77.,  74., ...,  93.,  84.,  75.],
          [ 72.,  74.,  77., ...,  74.,  70.,  76.],
          [ 78.,  75.,  75., ...,  47.,  56.,  65.]],

         [[ 10.,  19.,  20., ...,  39.,  43.,  47.],
          [ 13.,  14.,  12., ...,  55.,  56.,  45.],
          [ 15.,  17.,  33., ...,  52.,  66.,  54.],
          ...,
          [ 52.,  56.,  52., ...,  70.,  61.,  52.],
          [ 51.,  52.,  56., ...,  53.,  49.,  55.],
          [ 56.,  53.,  53., ...,  28.,  37.,  46.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:4

analyse the exceptions in iter:4
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[170., 168., 177., ..., 162., 158., 157.],
          [168., 172., 171., ..., 159., 156., 154.],
          [154., 149., 129., ..., 161., 157., 154.],
          ...,
          [ 74.,  76.,  78., ...,  71.,  68.,  61.],
          [ 68.,  69.,  72., ...,  76.,  71.,  71.],
          [ 67.,  68.,  69., ...,  75.,  71.,  73.]],

         [[180., 178., 185., ..., 179., 178., 177.],
          [181., 185., 183., ..., 177., 176., 174.],
          [170., 165., 144., ..., 178., 177., 174.],
          ...,
          [ 84.,  85.,  85., ...,  75.,  72.,  65.],
          [ 76.,  77.,  79., ...,  80.,  75.,  75.],
          [ 75.,  76.,  75., ...,  79.,  75.,  77.]],

         [[198., 196., 203., ..., 215., 214., 212.],
          [198., 201., 200., ..., 212., 211., 209.],
          [186., 181., 162., ..., 214., 212., 209.],
          ...,
          [ 80.,  81.,  82., ...,  78.,  75.,  68.],
          [ 77.,  78.,  78., ...,  83.,  78.,  78.],
          [ 78.,  79.,  76., ...,  82.,  78.,  80.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:5

analyse the exceptions in iter:5
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[159., 150., 153., ...,  91.,  74.,  76.],
          [142., 146., 155., ..., 127., 122.,  86.],
          [109.,  99., 105., ..., 137., 163.,  93.],
          ...,
          [244., 240., 241., ..., 156., 179., 200.],
          [246., 243., 243., ..., 162., 178., 192.],
          [246., 243., 244., ..., 166., 173., 182.]],

         [[102.,  91.,  95., ...,  71.,  63.,  58.],
          [ 75.,  72.,  76., ..., 105., 111.,  69.],
          [ 67.,  58.,  59., ..., 112., 132.,  72.],
          ...,
          [129., 123., 122., ...,  42.,  59.,  73.],
          [133., 128., 127., ...,  44.,  56.,  65.],
          [139., 133., 132., ...,  47.,  51.,  57.]],

         [[101.,  95.,  97., ...,  56.,  55.,  55.],
          [ 68.,  66.,  65., ...,  71.,  93.,  61.],
          [ 75.,  60.,  52., ...,  80., 105.,  71.],
          ...,
          [ 70.,  65.,  65., ...,  15.,  26.,  36.],
          [ 74.,  72.,  70., ...,  14.,  22.,  27.],
          [ 82.,  78.,  77., ...,  14.,  17.,  19.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:6

analyse the exceptions in iter:6
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[164., 105., 118., ..., 109., 108.,  91.],
          [167., 116.,  72., ..., 105., 105.,  89.],
          [140., 142., 119., ..., 104.,  84.,  78.],
          ...,
          [139., 142., 135., ...,  89.,  97., 126.],
          [163., 153., 146., ...,  85.,  98., 127.],
          [183., 176., 154., ...,  94.,  91., 122.]],

         [[206., 140., 148., ..., 147., 147., 129.],
          [213., 160., 109., ..., 142., 142., 127.],
          [191., 193., 163., ..., 139., 120., 115.],
          ...,
          [148., 155., 156., ..., 134., 148., 176.],
          [157., 164., 164., ..., 130., 148., 178.],
          [153., 182., 154., ..., 134., 133., 170.]],

         [[ 84.,  61., 101., ...,  73.,  69.,  57.],
          [ 84.,  49.,  43., ...,  79.,  72.,  57.],
          [ 65.,  66.,  79., ...,  84.,  58.,  49.],
          ...,
          [ 81.,  74.,  72., ...,  28.,  24.,  49.],
          [ 85.,  82.,  90., ...,  19.,  27.,  48.],
          [102., 116., 100., ...,  29.,  26.,  44.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:7

analyse the exceptions in iter:7
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  30.,  33., ...,  43.,  52.,  46.],
          [ 27.,  27.,  21., ..., 112., 117., 115.],
          [ 34.,  33.,  24., ..., 175., 177., 176.],
          ...,
          [142., 142., 150., ..., 134., 128., 134.],
          [140., 145., 150., ..., 131., 130., 122.],
          [134., 136., 136., ..., 106., 104., 101.]],

         [[ 35.,  34.,  44., ...,  56.,  64.,  58.],
          [ 30.,  28.,  31., ..., 136., 140., 138.],
          [ 36.,  33.,  30., ..., 208., 209., 208.],
          ...,
          [176., 176., 184., ..., 175., 168., 175.],
          [176., 180., 186., ..., 170., 170., 162.],
          [171., 171., 171., ..., 144., 142., 140.]],

         [[ 39.,  44.,  47., ...,  45.,  53.,  47.],
          [ 38.,  41.,  39., ...,  97., 101., 100.],
          [ 42.,  43.,  40., ..., 143., 144., 143.],
          ...,
          [118., 118., 127., ..., 119., 112., 119.],
          [124., 129., 134., ..., 119., 119., 111.],
          [123., 124., 124., ..., 100.,  99.,  96.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:8

analyse the exceptions in iter:8
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[134., 131., 128., ..., 127., 127., 128.],
          [133., 129., 128., ..., 127., 127., 128.],
          [128., 127., 128., ..., 126., 126., 126.],
          ...,
          [174., 171., 155., ...,  27.,  29.,  28.],
          [194., 189., 159., ...,  30.,  30.,  30.],
          [193., 181., 168., ...,  31.,  32.,  32.]],

         [[186., 184., 182., ..., 181., 181., 182.],
          [189., 186., 186., ..., 183., 183., 184.],
          [185., 182., 182., ..., 181., 181., 180.],
          ...,
          [208., 206., 189., ...,  94.,  96.,  94.],
          [221., 215., 196., ...,  95.,  96.,  95.],
          [217., 208., 201., ...,  94.,  94.,  94.]],

         [[223., 220., 218., ..., 222., 222., 223.],
          [228., 224., 224., ..., 224., 224., 225.],
          [226., 223., 223., ..., 222., 222., 221.],
          ...,
          [235., 229., 216., ..., 136., 137., 136.],
          [244., 239., 225., ..., 138., 139., 140.],
          [237., 230., 227., ..., 136., 137., 138.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:9

analyse the exceptions in iter:9
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[125., 110., 102., ..., 202., 200., 202.],
          [142., 146., 176., ..., 195., 198., 204.],
          [180., 143., 156., ..., 122., 139., 158.],
          ...,
          [104., 101., 101., ..., 126., 126., 125.],
          [104., 105., 109., ..., 138., 137., 137.],
          [105., 108., 115., ..., 143., 143., 144.]],

         [[125., 101.,  90., ..., 207., 205., 208.],
          [146., 144., 172., ..., 201., 205., 211.],
          [185., 146., 157., ..., 111., 128., 147.],
          ...,
          [ 82.,  80.,  81., ..., 103., 103., 101.],
          [ 81.,  84.,  88., ..., 113., 113., 112.],
          [ 83.,  87.,  94., ..., 117., 116., 116.]],

         [[116.,  91.,  83., ..., 214., 212., 214.],
          [142., 139., 170., ..., 205., 209., 215.],
          [183., 146., 157., ..., 113., 131., 150.],
          ...,
          [ 41.,  39.,  38., ...,  67.,  69.,  68.],
          [ 40.,  41.,  43., ...,  78.,  80.,  81.],
          [ 42.,  45.,  50., ...,  82.,  84.,  86.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:10

final statics:
total operators:28
tensorflow --> nums:10,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:10
mindspore --> 
torch --> 

generate models:10

analyse the exceptions in iter:10
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[53., 54., 56., ..., 47., 41., 24.],
          [46., 53., 54., ..., 42., 39., 28.],
          [45., 50., 46., ..., 38., 36., 29.],
          ...,
          [71., 74., 80., ..., 51., 46., 49.],
          [75., 79., 81., ..., 61., 64., 48.],
          [85., 85., 86., ..., 61., 64., 49.]],

         [[65., 63., 60., ..., 51., 45., 28.],
          [59., 62., 59., ..., 46., 43., 32.],
          [59., 60., 52., ..., 42., 40., 33.],
          ...,
          [83., 83., 85., ..., 54., 49., 50.],
          [82., 85., 85., ..., 65., 67., 50.],
          [83., 84., 86., ..., 65., 67., 50.]],

         [[53., 52., 50., ..., 50., 44., 27.],
          [41., 45., 44., ..., 45., 42., 31.],
          [38., 41., 34., ..., 41., 39., 32.],
          ...,
          [66., 66., 67., ..., 33., 34., 41.],
          [67., 69., 67., ..., 41., 48., 41.],
          [71., 71., 70., ..., 39., 46., 41.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:11

analyse the exceptions in iter:11
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[142., 172., 176., ..., 216., 198., 205.],
          [191., 196., 174., ..., 229., 222., 217.],
          [220., 217., 192., ..., 224., 225., 218.],
          ...,
          [197., 196., 201., ..., 200., 199., 205.],
          [196., 191., 193., ..., 198., 199., 201.],
          [186., 182., 174., ..., 158., 158., 163.]],

         [[149., 172., 168., ..., 212., 194., 202.],
          [190., 192., 166., ..., 222., 215., 210.],
          [212., 209., 183., ..., 214., 214., 208.],
          ...,
          [152., 152., 156., ..., 165., 165., 164.],
          [157., 152., 154., ..., 164., 165., 161.],
          [150., 147., 139., ..., 124., 125., 125.]],

         [[152., 167., 154., ..., 211., 193., 200.],
          [192., 190., 159., ..., 220., 213., 207.],
          [212., 208., 182., ..., 209., 210., 203.],
          ...,
          [136., 135., 140., ..., 146., 146., 150.],
          [139., 135., 136., ..., 144., 145., 146.],
          [133., 130., 121., ..., 105., 106., 111.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:12

analyse the exceptions in iter:12
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[164., 162., 162., ..., 157., 153., 153.],
          [168., 166., 166., ..., 164., 160., 158.],
          [172., 170., 171., ..., 168., 165., 163.],
          ...,
          [123., 117., 112., ..., 117.,  95., 120.],
          [120., 116., 112., ..., 126., 120., 120.],
          [121., 120., 116., ..., 124., 124., 120.]],

         [[215., 212., 212., ..., 210., 208., 203.],
          [218., 215., 215., ..., 212., 209., 205.],
          [220., 217., 218., ..., 212., 208., 207.],
          ...,
          [160., 154., 149., ..., 136., 115., 149.],
          [156., 151., 147., ..., 149., 144., 152.],
          [154., 152., 148., ..., 152., 154., 154.]],

         [[244., 240., 240., ..., 237., 235., 234.],
          [245., 242., 242., ..., 238., 236., 235.],
          [246., 243., 244., ..., 238., 235., 236.],
          ...,
          [105., 102.,  99., ..., 100.,  79., 100.],
          [100.,  99.,  96., ..., 110., 103., 101.],
          [ 96.,  99.,  97., ..., 108., 107., 100.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:13

analyse the exceptions in iter:13
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 17.,  17.,  17., ...,  23.,  22.,  19.],
          [ 18.,  18.,  18., ...,  24.,  23.,  22.],
          [ 18.,  18.,  19., ...,  24.,  23.,  23.],
          ...,
          [217., 226., 210., ...,  33.,  32.,  33.],
          [219., 222., 214., ...,  35.,  34.,  33.],
          [210., 221., 215., ...,  36.,  34.,  32.]],

         [[  3.,   3.,   2., ...,  13.,  12.,   9.],
          [  4.,   4.,   4., ...,  14.,  13.,  12.],
          [  4.,   4.,   5., ...,  14.,  13.,  13.],
          ...,
          [214., 219., 201., ...,  24.,  23.,  24.],
          [215., 215., 208., ...,  26.,  25.,  24.],
          [208., 216., 212., ...,  27.,  25.,  23.]],

         [[  2.,   2.,   1., ...,  11.,  10.,   7.],
          [  3.,   3.,   3., ...,  12.,  11.,  10.],
          [  3.,   3.,   4., ...,  12.,  11.,  11.],
          ...,
          [223., 227., 213., ...,  17.,  16.,  17.],
          [230., 229., 225., ...,  19.,  18.,  17.],
          [223., 229., 227., ...,  20.,  18.,  16.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:14

analyse the exceptions in iter:15
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[100., 100., 101., ...,  95.,  94.,  95.],
          [103., 103., 104., ...,  97.,  97.,  97.],
          [107., 106., 106., ..., 100., 100., 101.],
          ...,
          [165., 159., 167., ...,  75.,  75.,  72.],
          [158., 173., 182., ...,  76.,  75.,  77.],
          [161., 162., 160., ...,  98., 129., 162.]],

         [[168., 168., 167., ..., 165., 165., 167.],
          [170., 168., 168., ..., 167., 166., 168.],
          [174., 172., 173., ..., 170., 170., 172.],
          ...,
          [178., 170., 177., ..., 117., 120., 120.],
          [174., 186., 193., ..., 119., 119., 121.],
          [176., 176., 171., ..., 137., 160., 185.]],

         [[231., 229., 230., ..., 231., 228., 229.],
          [230., 228., 226., ..., 229., 227., 229.],
          [233., 230., 229., ..., 230., 230., 232.],
          ...,
          [177., 167., 170., ..., 154., 157., 158.],
          [172., 182., 188., ..., 154., 153., 154.],
          [174., 172., 169., ..., 167., 183., 202.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:15

analyse the exceptions in iter:17
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[110., 142., 151., ...,  39.,  40.,  38.],
          [109., 141., 152., ...,  36.,  40.,  36.],
          [105., 142., 151., ...,  39.,  44.,  39.],
          ...,
          [ 62.,  39.,  60., ...,  42.,  46.,  47.],
          [ 62.,  52.,  58., ...,  43.,  47.,  49.],
          [ 55.,  60.,  56., ...,  45.,  47.,  51.]],

         [[104., 135., 146., ...,  39.,  40.,  38.],
          [103., 133., 147., ...,  36.,  40.,  36.],
          [ 98., 133., 145., ...,  39.,  44.,  39.],
          ...,
          [ 59.,  38.,  64., ...,  44.,  44.,  44.],
          [ 57.,  51.,  61., ...,  46.,  45.,  46.],
          [ 51.,  60.,  60., ...,  48.,  46.,  48.]],

         [[ 97., 118., 120., ...,  39.,  40.,  38.],
          [ 95., 115., 119., ...,  37.,  40.,  36.],
          [ 90., 114., 117., ...,  41.,  45.,  40.],
          ...,
          [ 60.,  49.,  81., ...,  56.,  55.,  55.],
          [ 56.,  61.,  78., ...,  58.,  58.,  60.],
          [ 50.,  71.,  78., ...,  60.,  60.,  62.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:16

analyse the exceptions in iter:18
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[197., 198., 201., ..., 217., 217., 217.],
          [193., 195., 198., ..., 216., 215., 214.],
          [192., 194., 197., ..., 217., 216., 215.],
          ...,
          [156., 156., 156., ...,  98., 117., 128.],
          [158., 159., 154., ..., 131., 117.,  91.],
          [152., 151., 145., ...,  91.,  90.,  79.]],

         [[187., 188., 191., ..., 201., 201., 201.],
          [183., 185., 188., ..., 200., 200., 198.],
          [182., 184., 187., ..., 201., 200., 199.],
          ...,
          [146., 146., 146., ...,  79.,  96., 105.],
          [148., 149., 144., ..., 110.,  99.,  75.],
          [142., 141., 135., ...,  72.,  73.,  65.]],

         [[188., 189., 192., ..., 204., 204., 204.],
          [184., 186., 189., ..., 203., 202., 201.],
          [183., 185., 188., ..., 204., 203., 202.],
          ...,
          [147., 147., 147., ...,  65.,  82.,  89.],
          [149., 150., 145., ...,  96.,  86.,  64.],
          [143., 142., 136., ...,  61.,  63.,  57.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:17

analyse the exceptions in iter:19
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 23.,  47.,  52., ..., 131., 182., 215.],
          [ 32.,  51.,  56., ..., 149., 204., 209.],
          [ 41.,  59.,  60., ..., 138., 196., 203.],
          ...,
          [167., 177., 182., ..., 199., 176., 145.],
          [166., 165., 165., ..., 183., 183., 189.],
          [175., 173., 173., ..., 190., 188., 192.]],

         [[ 27.,  49.,  46., ..., 130., 180., 212.],
          [ 31.,  49.,  49., ..., 148., 206., 217.],
          [ 37.,  57.,  59., ..., 138., 200., 217.],
          ...,
          [167., 177., 182., ..., 192., 171., 140.],
          [166., 165., 165., ..., 181., 182., 187.],
          [175., 173., 173., ..., 187., 186., 189.]],

         [[ 22.,  41.,  30., ..., 117., 174., 230.],
          [ 24.,  38.,  34., ..., 133., 197., 232.],
          [ 25.,  47.,  51., ..., 125., 194., 233.],
          ...,
          [168., 177., 182., ..., 192., 171., 140.],
          [166., 165., 165., ..., 181., 182., 188.],
          [175., 173., 173., ..., 184., 183., 186.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:18

analyse the exceptions in iter:20
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[153., 174., 155., ..., 122., 138.,  97.],
          [160., 164., 150., ..., 137., 160., 103.],
          [140., 147., 136., ..., 104., 125.,  93.],
          ...,
          [175., 170., 170., ..., 193., 197., 199.],
          [174., 173., 171., ..., 200., 202., 208.],
          [168., 164., 166., ..., 204., 204., 206.]],

         [[157., 180., 165., ..., 125., 143., 101.],
          [163., 170., 159., ..., 135., 161., 109.],
          [143., 152., 145., ..., 103., 128., 102.],
          ...,
          [177., 172., 172., ..., 203., 206., 204.],
          [177., 176., 174., ..., 208., 209., 212.],
          [173., 169., 171., ..., 209., 208., 210.]],

         [[155., 188., 172., ..., 123., 141.,  97.],
          [165., 180., 169., ..., 129., 157., 107.],
          [147., 166., 158., ...,  99., 125., 101.],
          ...,
          [179., 174., 174., ..., 212., 214., 213.],
          [181., 180., 178., ..., 216., 218., 221.],
          [180., 175., 177., ..., 217., 217., 219.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:19

analyse the exceptions in iter:22
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 86.,  96., 115., ...,  84.,  95.,  79.],
          [125.,  99.,  71., ...,  78.,  88.,  93.],
          [112.,  87.,  58., ...,  89.,  88.,  85.],
          ...,
          [ 66.,  56.,  46., ...,  70.,  61.,  47.],
          [108.,  96.,  86., ...,  57.,  57.,  46.],
          [130., 120.,  98., ...,  44.,  44.,  45.]],

         [[ 74.,  83., 109., ...,  72.,  84.,  68.],
          [110.,  83.,  61., ...,  74.,  82.,  82.],
          [ 95.,  69.,  45., ...,  88.,  84.,  77.],
          ...,
          [ 61.,  53.,  46., ...,  79.,  74.,  57.],
          [100.,  91.,  82., ...,  60.,  65.,  51.],
          [117., 110.,  90., ...,  43.,  46.,  45.]],

         [[ 62.,  65.,  83., ...,  50.,  61.,  45.],
          [104.,  74.,  46., ...,  44.,  51.,  53.],
          [ 89.,  62.,  35., ...,  54.,  50.,  45.],
          ...,
          [ 39.,  33.,  28., ...,  46.,  42.,  31.],
          [ 73.,  66.,  59., ...,  38.,  41.,  31.],
          [ 91.,  86.,  67., ...,  30.,  32.,  32.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:20

analyse the exceptions in iter:24
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 73.,  71.,  77., ..., 183., 180., 185.],
          [ 73.,  75.,  78., ..., 181., 172., 174.],
          [ 77.,  94.,  99., ..., 175., 191., 185.],
          ...,
          [ 84.,  86., 118., ...,  79., 159., 117.],
          [ 76.,  81., 103., ...,  56.,  69., 104.],
          [102.,  91.,  95., ..., 100.,  72.,  48.]],

         [[ 77.,  68.,  69., ..., 210., 214., 225.],
          [ 74.,  68.,  64., ..., 229., 220., 218.],
          [ 72.,  82.,  81., ..., 213., 230., 226.],
          ...,
          [106., 105., 133., ...,  95., 177., 133.],
          [ 96.,  98., 116., ...,  80.,  90., 120.],
          [120., 109., 110., ..., 134.,  97.,  59.]],

         [[ 58.,  50.,  44., ..., 149., 143., 144.],
          [ 52.,  55.,  50., ..., 139., 129., 127.],
          [ 64.,  79.,  73., ..., 139., 152., 142.],
          ...,
          [ 56.,  58.,  84., ...,  78., 137.,  94.],
          [ 60.,  56.,  73., ...,  36.,  40.,  69.],
          [ 92.,  62.,  62., ...,  55.,  38.,  29.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:21

analyse the exceptions in iter:25
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[162., 164., 169., ..., 184., 190., 202.],
          [153., 158., 164., ..., 178., 189., 201.],
          [157., 161., 164., ..., 178., 190., 202.],
          ...,
          [214., 213., 213., ..., 240., 241., 242.],
          [218., 209., 208., ..., 232., 236., 239.],
          [216., 207., 201., ..., 231., 233., 235.]],

         [[164., 167., 171., ..., 176., 186., 198.],
          [151., 156., 163., ..., 171., 184., 198.],
          [151., 156., 160., ..., 170., 186., 199.],
          ...,
          [205., 193., 185., ..., 207., 206., 209.],
          [209., 188., 180., ..., 195., 196., 200.],
          [204., 189., 174., ..., 192., 194., 198.]],

         [[130., 128., 131., ..., 137., 146., 161.],
          [119., 120., 124., ..., 131., 143., 158.],
          [120., 121., 122., ..., 131., 142., 156.],
          ...,
          [193., 181., 174., ..., 193., 194., 196.],
          [198., 176., 169., ..., 182., 185., 187.],
          [197., 178., 156., ..., 178., 181., 183.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:22

analyse the exceptions in iter:26
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[131., 124., 116., ..., 184., 185., 184.],
          [127., 124., 116., ..., 177., 180., 186.],
          [123., 121., 113., ..., 179., 187., 194.],
          ...,
          [ 99.,  83.,  54., ..., 138., 155., 165.],
          [ 97.,  77.,  43., ..., 140., 154., 163.],
          [ 96.,  71.,  35., ..., 140., 156., 164.]],

         [[ 81.,  76.,  70., ..., 152., 153., 152.],
          [ 76.,  75.,  69., ..., 142., 146., 152.],
          [ 73.,  73.,  67., ..., 142., 150., 158.],
          ...,
          [ 50.,  42.,  27., ..., 103., 113., 118.],
          [ 50.,  39.,  21., ..., 105., 112., 116.],
          [ 49.,  36.,  16., ..., 104., 114., 118.]],

         [[ 32.,  27.,  20., ..., 114., 117., 120.],
          [ 27.,  26.,  19., ..., 106., 110., 116.],
          [ 23.,  24.,  17., ..., 106., 114., 118.],
          ...,
          [ 10.,   5.,   5., ...,  68.,  72.,  74.],
          [ 10.,   5.,   4., ...,  69.,  71.,  71.],
          [ 10.,   4.,   3., ...,  69.,  73.,  73.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:23

analyse the exceptions in iter:27
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 45.,  42.,  35., ...,  93.,  51.,  39.],
          [ 46.,  42.,  40., ..., 105.,  66.,  48.],
          [ 43.,  40.,  48., ...,  88.,  77.,  58.],
          ...,
          [ 55.,  67.,  73., ...,  93., 101., 103.],
          [ 55.,  62.,  68., ...,  69.,  81.,  99.],
          [ 58.,  59.,  58., ...,  77.,  66.,  83.]],

         [[ 20.,  21.,  17., ...,  86.,  47.,  36.],
          [ 22.,  22.,  22., ...,  93.,  53.,  39.],
          [ 22.,  21.,  32., ...,  74.,  59.,  44.],
          ...,
          [ 54.,  57.,  64., ...,  87., 116., 123.],
          [ 54.,  53.,  59., ...,  62.,  93., 117.],
          [ 53.,  46.,  45., ...,  68.,  75.,  99.]],

         [[ 19.,  18.,  13., ...,  81.,  42.,  32.],
          [ 20.,  18.,  18., ...,  92.,  52.,  36.],
          [ 19.,  17.,  27., ...,  77.,  60.,  43.],
          ...,
          [ 51.,  54.,  57., ...,  49.,  34.,  30.],
          [ 51.,  50.,  52., ...,  38.,  29.,  35.],
          [ 51.,  44.,  40., ...,  53.,  29.,  31.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:24

analyse the exceptions in iter:28
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[128., 121., 138., ..., 130., 101., 122.],
          [133., 125., 136., ..., 131., 106., 127.],
          [141., 126., 141., ..., 132., 114., 126.],
          ...,
          [191., 186., 175., ..., 190., 182., 195.],
          [210., 207., 198., ..., 194., 184., 192.],
          [209., 206., 207., ..., 201., 193., 196.]],

         [[141., 134., 151., ..., 150., 121., 141.],
          [146., 138., 149., ..., 151., 126., 147.],
          [155., 139., 154., ..., 152., 134., 146.],
          ...,
          [178., 174., 160., ..., 179., 175., 188.],
          [195., 197., 179., ..., 179., 178., 186.],
          [194., 195., 189., ..., 187., 187., 190.]],

         [[123., 116., 133., ..., 138., 109., 129.],
          [128., 120., 131., ..., 139., 114., 135.],
          [136., 121., 136., ..., 140., 122., 134.],
          ...,
          [126., 124., 112., ..., 138., 137., 145.],
          [143., 144., 129., ..., 138., 133., 142.],
          [142., 143., 138., ..., 145., 142., 146.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:25

analyse the exceptions in iter:30
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[126., 122., 126., ..., 124., 120., 117.],
          [122., 119., 121., ..., 124., 122., 117.],
          [122., 121., 121., ..., 126., 123., 121.],
          ...,
          [126., 126., 128., ..., 133., 122., 114.],
          [125., 126., 127., ..., 128., 121., 114.],
          [123., 123., 126., ..., 128., 126., 121.]],

         [[118., 115., 119., ..., 118., 114., 111.],
          [115., 112., 114., ..., 118., 116., 111.],
          [115., 114., 114., ..., 120., 117., 115.],
          ...,
          [118., 118., 120., ..., 125., 114., 106.],
          [117., 118., 119., ..., 120., 113., 106.],
          [115., 115., 118., ..., 119., 118., 113.]],

         [[110., 108., 111., ..., 106., 102.,  99.],
          [107., 104., 106., ..., 106., 104.,  99.],
          [107., 106., 106., ..., 108., 105., 103.],
          ...,
          [107., 107., 109., ..., 114., 103.,  95.],
          [106., 107., 108., ..., 109., 102.,  95.],
          [104., 104., 107., ..., 109., 107., 102.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:26

analyse the exceptions in iter:32
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 50.,  51.,  42., ...,  48.,  18.,  14.],
          [ 86.,  92.,  82., ...,  46.,  17.,  11.],
          [ 43.,  43.,  51., ...,  42.,  10.,   6.],
          ...,
          [220., 209., 199., ..., 177., 176., 175.],
          [188., 182., 182., ..., 176., 175., 174.],
          [188., 184., 186., ..., 176., 176., 173.]],

         [[ 64.,  63.,  55., ...,  45.,  18.,  15.],
          [107., 110.,  99., ...,  43.,  17.,  12.],
          [ 60.,  56.,  65., ...,  39.,  10.,   6.],
          ...,
          [165., 174., 172., ..., 171., 170., 168.],
          [178., 170., 161., ..., 168., 167., 166.],
          [167., 163., 167., ..., 169., 168., 165.]],

         [[ 37.,  41.,  41., ...,  42.,  14.,  12.],
          [ 67.,  76.,  67., ...,  41.,  14.,  10.],
          [ 42.,  41.,  46., ...,  37.,   9.,   5.],
          ...,
          [151., 165., 164., ..., 168., 167., 166.],
          [162., 162., 157., ..., 166., 165., 164.],
          [162., 157., 160., ..., 166., 166., 162.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:27

analyse the exceptions in iter:33
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[  7.,   7.,   5., ...,  82.,  80.,  69.],
          [  6.,   6.,   5., ...,  85.,  86.,  81.],
          [  1.,   7.,   8., ...,  98.,  96.,  86.],
          ...,
          [150., 135., 129., ...,  72.,  45.,  26.],
          [156., 153., 138., ...,  57.,  23.,  38.],
          [183., 191., 182., ...,  83.,  67., 114.]],

         [[  5.,   5.,   4., ...,  84.,  85.,  73.],
          [  4.,   4.,   3., ...,  86.,  88.,  80.],
          [  1.,   7.,   8., ...,  96.,  96.,  84.],
          ...,
          [153., 136., 129., ...,  72.,  51.,  32.],
          [156., 151., 136., ...,  58.,  32.,  45.],
          [193., 199., 189., ...,  83.,  74., 120.]],

         [[  8.,   8.,   6., ...,  78.,  81.,  68.],
          [  8.,   9.,   8., ...,  77.,  81.,  72.],
          [  6.,  12.,  13., ...,  83.,  85.,  73.],
          ...,
          [139., 121., 113., ...,  69.,  63.,  51.],
          [139., 130., 110., ...,  56.,  48.,  64.],
          [183., 185., 171., ...,  76.,  81., 119.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:28

analyse the exceptions in iter:34
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[172., 171., 168., ..., 158., 156., 147.],
          [169., 168., 168., ..., 158., 152., 145.],
          [174., 169., 170., ..., 157., 149., 146.],
          ...,
          [150., 157., 162., ..., 158., 147., 139.],
          [143., 149., 155., ..., 148., 143., 140.],
          [148., 146., 149., ..., 137., 134., 136.]],

         [[187., 186., 182., ..., 170., 169., 163.],
          [185., 183., 184., ..., 175., 170., 165.],
          [190., 185., 186., ..., 177., 170., 168.],
          ...,
          [163., 168., 170., ..., 168., 160., 154.],
          [154., 158., 161., ..., 157., 153., 153.],
          [158., 155., 157., ..., 143., 139., 143.]],

         [[130., 130., 126., ..., 113., 113., 107.],
          [123., 122., 123., ..., 114., 110., 107.],
          [126., 122., 123., ..., 115., 108., 109.],
          ...,
          [100., 103., 104., ..., 108.,  99.,  90.],
          [ 89.,  90.,  96., ...,  99.,  92.,  88.],
          [ 93.,  89.,  92., ...,  86.,  80.,  82.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:29

analyse the exceptions in iter:35
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[251., 247., 247., ..., 229., 244., 251.],
          [249., 246., 246., ..., 233., 249., 252.],
          [167., 167., 167., ..., 217., 217., 220.],
          ...,
          [133., 123., 124., ..., 118., 114., 115.],
          [123., 124., 126., ..., 112., 108., 104.],
          [125., 129., 126., ..., 118., 112., 105.]],

         [[249., 245., 245., ..., 190., 231., 241.],
          [248., 244., 245., ..., 188., 237., 242.],
          [165., 164., 164., ..., 182., 211., 213.],
          ...,
          [130., 127., 130., ..., 125., 122., 125.],
          [125., 127., 129., ..., 122., 119., 119.],
          [128., 132., 130., ..., 128., 122., 121.]],

         [[250., 247., 247., ..., 146., 224., 241.],
          [248., 244., 244., ..., 141., 233., 241.],
          [148., 148., 149., ..., 139., 203., 208.],
          ...,
          [ 39.,  36.,  35., ...,  30.,  26.,  27.],
          [ 36.,  36.,  32., ...,  26.,  27.,  22.],
          [ 42.,  43.,  36., ...,  35.,  33.,  26.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:30

final statics:
total operators:28
tensorflow --> nums:30,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:30
mindspore --> 
torch --> 

generate models:30

analyse the exceptions in iter:0
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:2

analyse the exceptions in iter:2
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [113., 111., 105., ...,  72.,  72.,  72.],
          [111., 104.,  99., ...,  68.,  70.,  78.],
          [106.,  99.,  95., ...,  78.,  79.,  80.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [120., 118., 112., ...,  81.,  80.,  80.],
          [118., 111., 106., ...,  75.,  76.,  84.],
          [113., 106., 102., ...,  85.,  85.,  86.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [112., 111., 106., ...,  80.,  79.,  79.],
          [110., 104.,  98., ...,  73.,  75.,  82.],
          [105.,  98.,  94., ...,  83.,  83.,  84.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:3

analyse the exceptions in iter:3
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  37.,  38., ...,  76.,  81.,  85.],
          [ 33.,  34.,  32., ...,  95.,  96.,  85.],
          [ 39.,  40.,  57., ...,  93., 107.,  95.],
          ...,
          [ 83.,  87.,  84., ...,  99.,  90.,  81.],
          [ 88.,  90.,  93., ...,  80.,  76.,  82.],
          [ 97.,  94.,  93., ...,  54.,  63.,  72.]],

         [[ 25.,  34.,  35., ...,  67.,  72.,  76.],
          [ 28.,  30.,  27., ...,  82.,  82.,  72.],
          [ 32.,  33.,  50., ...,  76.,  89.,  77.],
          ...,
          [ 73.,  77.,  74., ...,  93.,  84.,  75.],
          [ 72.,  74.,  77., ...,  74.,  70.,  76.],
          [ 78.,  75.,  75., ...,  47.,  56.,  65.]],

         [[ 10.,  19.,  20., ...,  39.,  43.,  47.],
          [ 13.,  14.,  12., ...,  55.,  56.,  45.],
          [ 15.,  17.,  33., ...,  52.,  66.,  54.],
          ...,
          [ 52.,  56.,  52., ...,  70.,  61.,  52.],
          [ 51.,  52.,  56., ...,  53.,  49.,  55.],
          [ 56.,  53.,  53., ...,  28.,  37.,  46.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:4

analyse the exceptions in iter:4
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[170., 168., 177., ..., 162., 158., 157.],
          [168., 172., 171., ..., 159., 156., 154.],
          [154., 149., 129., ..., 161., 157., 154.],
          ...,
          [ 74.,  76.,  78., ...,  71.,  68.,  61.],
          [ 68.,  69.,  72., ...,  76.,  71.,  71.],
          [ 67.,  68.,  69., ...,  75.,  71.,  73.]],

         [[180., 178., 185., ..., 179., 178., 177.],
          [181., 185., 183., ..., 177., 176., 174.],
          [170., 165., 144., ..., 178., 177., 174.],
          ...,
          [ 84.,  85.,  85., ...,  75.,  72.,  65.],
          [ 76.,  77.,  79., ...,  80.,  75.,  75.],
          [ 75.,  76.,  75., ...,  79.,  75.,  77.]],

         [[198., 196., 203., ..., 215., 214., 212.],
          [198., 201., 200., ..., 212., 211., 209.],
          [186., 181., 162., ..., 214., 212., 209.],
          ...,
          [ 80.,  81.,  82., ...,  78.,  75.,  68.],
          [ 77.,  78.,  78., ...,  83.,  78.,  78.],
          [ 78.,  79.,  76., ...,  82.,  78.,  80.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:5

analyse the exceptions in iter:5
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[159., 150., 153., ...,  91.,  74.,  76.],
          [142., 146., 155., ..., 127., 122.,  86.],
          [109.,  99., 105., ..., 137., 163.,  93.],
          ...,
          [244., 240., 241., ..., 156., 179., 200.],
          [246., 243., 243., ..., 162., 178., 192.],
          [246., 243., 244., ..., 166., 173., 182.]],

         [[102.,  91.,  95., ...,  71.,  63.,  58.],
          [ 75.,  72.,  76., ..., 105., 111.,  69.],
          [ 67.,  58.,  59., ..., 112., 132.,  72.],
          ...,
          [129., 123., 122., ...,  42.,  59.,  73.],
          [133., 128., 127., ...,  44.,  56.,  65.],
          [139., 133., 132., ...,  47.,  51.,  57.]],

         [[101.,  95.,  97., ...,  56.,  55.,  55.],
          [ 68.,  66.,  65., ...,  71.,  93.,  61.],
          [ 75.,  60.,  52., ...,  80., 105.,  71.],
          ...,
          [ 70.,  65.,  65., ...,  15.,  26.,  36.],
          [ 74.,  72.,  70., ...,  14.,  22.,  27.],
          [ 82.,  78.,  77., ...,  14.,  17.,  19.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:6

analyse the exceptions in iter:6
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[164., 105., 118., ..., 109., 108.,  91.],
          [167., 116.,  72., ..., 105., 105.,  89.],
          [140., 142., 119., ..., 104.,  84.,  78.],
          ...,
          [139., 142., 135., ...,  89.,  97., 126.],
          [163., 153., 146., ...,  85.,  98., 127.],
          [183., 176., 154., ...,  94.,  91., 122.]],

         [[206., 140., 148., ..., 147., 147., 129.],
          [213., 160., 109., ..., 142., 142., 127.],
          [191., 193., 163., ..., 139., 120., 115.],
          ...,
          [148., 155., 156., ..., 134., 148., 176.],
          [157., 164., 164., ..., 130., 148., 178.],
          [153., 182., 154., ..., 134., 133., 170.]],

         [[ 84.,  61., 101., ...,  73.,  69.,  57.],
          [ 84.,  49.,  43., ...,  79.,  72.,  57.],
          [ 65.,  66.,  79., ...,  84.,  58.,  49.],
          ...,
          [ 81.,  74.,  72., ...,  28.,  24.,  49.],
          [ 85.,  82.,  90., ...,  19.,  27.,  48.],
          [102., 116., 100., ...,  29.,  26.,  44.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:7

analyse the exceptions in iter:7
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  30.,  33., ...,  43.,  52.,  46.],
          [ 27.,  27.,  21., ..., 112., 117., 115.],
          [ 34.,  33.,  24., ..., 175., 177., 176.],
          ...,
          [142., 142., 150., ..., 134., 128., 134.],
          [140., 145., 150., ..., 131., 130., 122.],
          [134., 136., 136., ..., 106., 104., 101.]],

         [[ 35.,  34.,  44., ...,  56.,  64.,  58.],
          [ 30.,  28.,  31., ..., 136., 140., 138.],
          [ 36.,  33.,  30., ..., 208., 209., 208.],
          ...,
          [176., 176., 184., ..., 175., 168., 175.],
          [176., 180., 186., ..., 170., 170., 162.],
          [171., 171., 171., ..., 144., 142., 140.]],

         [[ 39.,  44.,  47., ...,  45.,  53.,  47.],
          [ 38.,  41.,  39., ...,  97., 101., 100.],
          [ 42.,  43.,  40., ..., 143., 144., 143.],
          ...,
          [118., 118., 127., ..., 119., 112., 119.],
          [124., 129., 134., ..., 119., 119., 111.],
          [123., 124., 124., ..., 100.,  99.,  96.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:8

analyse the exceptions in iter:8
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[134., 131., 128., ..., 127., 127., 128.],
          [133., 129., 128., ..., 127., 127., 128.],
          [128., 127., 128., ..., 126., 126., 126.],
          ...,
          [174., 171., 155., ...,  27.,  29.,  28.],
          [194., 189., 159., ...,  30.,  30.,  30.],
          [193., 181., 168., ...,  31.,  32.,  32.]],

         [[186., 184., 182., ..., 181., 181., 182.],
          [189., 186., 186., ..., 183., 183., 184.],
          [185., 182., 182., ..., 181., 181., 180.],
          ...,
          [208., 206., 189., ...,  94.,  96.,  94.],
          [221., 215., 196., ...,  95.,  96.,  95.],
          [217., 208., 201., ...,  94.,  94.,  94.]],

         [[223., 220., 218., ..., 222., 222., 223.],
          [228., 224., 224., ..., 224., 224., 225.],
          [226., 223., 223., ..., 222., 222., 221.],
          ...,
          [235., 229., 216., ..., 136., 137., 136.],
          [244., 239., 225., ..., 138., 139., 140.],
          [237., 230., 227., ..., 136., 137., 138.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:9

analyse the exceptions in iter:9
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[125., 110., 102., ..., 202., 200., 202.],
          [142., 146., 176., ..., 195., 198., 204.],
          [180., 143., 156., ..., 122., 139., 158.],
          ...,
          [104., 101., 101., ..., 126., 126., 125.],
          [104., 105., 109., ..., 138., 137., 137.],
          [105., 108., 115., ..., 143., 143., 144.]],

         [[125., 101.,  90., ..., 207., 205., 208.],
          [146., 144., 172., ..., 201., 205., 211.],
          [185., 146., 157., ..., 111., 128., 147.],
          ...,
          [ 82.,  80.,  81., ..., 103., 103., 101.],
          [ 81.,  84.,  88., ..., 113., 113., 112.],
          [ 83.,  87.,  94., ..., 117., 116., 116.]],

         [[116.,  91.,  83., ..., 214., 212., 214.],
          [142., 139., 170., ..., 205., 209., 215.],
          [183., 146., 157., ..., 113., 131., 150.],
          ...,
          [ 41.,  39.,  38., ...,  67.,  69.,  68.],
          [ 40.,  41.,  43., ...,  78.,  80.,  81.],
          [ 42.,  45.,  50., ...,  82.,  84.,  86.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:10

final statics:
total operators:28
tensorflow --> nums:10,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:10
mindspore --> 
torch --> 

generate models:10

analyse the exceptions in iter:10
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[53., 54., 56., ..., 47., 41., 24.],
          [46., 53., 54., ..., 42., 39., 28.],
          [45., 50., 46., ..., 38., 36., 29.],
          ...,
          [71., 74., 80., ..., 51., 46., 49.],
          [75., 79., 81., ..., 61., 64., 48.],
          [85., 85., 86., ..., 61., 64., 49.]],

         [[65., 63., 60., ..., 51., 45., 28.],
          [59., 62., 59., ..., 46., 43., 32.],
          [59., 60., 52., ..., 42., 40., 33.],
          ...,
          [83., 83., 85., ..., 54., 49., 50.],
          [82., 85., 85., ..., 65., 67., 50.],
          [83., 84., 86., ..., 65., 67., 50.]],

         [[53., 52., 50., ..., 50., 44., 27.],
          [41., 45., 44., ..., 45., 42., 31.],
          [38., 41., 34., ..., 41., 39., 32.],
          ...,
          [66., 66., 67., ..., 33., 34., 41.],
          [67., 69., 67., ..., 41., 48., 41.],
          [71., 71., 70., ..., 39., 46., 41.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:11

analyse the exceptions in iter:11
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[142., 172., 176., ..., 216., 198., 205.],
          [191., 196., 174., ..., 229., 222., 217.],
          [220., 217., 192., ..., 224., 225., 218.],
          ...,
          [197., 196., 201., ..., 200., 199., 205.],
          [196., 191., 193., ..., 198., 199., 201.],
          [186., 182., 174., ..., 158., 158., 163.]],

         [[149., 172., 168., ..., 212., 194., 202.],
          [190., 192., 166., ..., 222., 215., 210.],
          [212., 209., 183., ..., 214., 214., 208.],
          ...,
          [152., 152., 156., ..., 165., 165., 164.],
          [157., 152., 154., ..., 164., 165., 161.],
          [150., 147., 139., ..., 124., 125., 125.]],

         [[152., 167., 154., ..., 211., 193., 200.],
          [192., 190., 159., ..., 220., 213., 207.],
          [212., 208., 182., ..., 209., 210., 203.],
          ...,
          [136., 135., 140., ..., 146., 146., 150.],
          [139., 135., 136., ..., 144., 145., 146.],
          [133., 130., 121., ..., 105., 106., 111.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:12

analyse the exceptions in iter:12
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[164., 162., 162., ..., 157., 153., 153.],
          [168., 166., 166., ..., 164., 160., 158.],
          [172., 170., 171., ..., 168., 165., 163.],
          ...,
          [123., 117., 112., ..., 117.,  95., 120.],
          [120., 116., 112., ..., 126., 120., 120.],
          [121., 120., 116., ..., 124., 124., 120.]],

         [[215., 212., 212., ..., 210., 208., 203.],
          [218., 215., 215., ..., 212., 209., 205.],
          [220., 217., 218., ..., 212., 208., 207.],
          ...,
          [160., 154., 149., ..., 136., 115., 149.],
          [156., 151., 147., ..., 149., 144., 152.],
          [154., 152., 148., ..., 152., 154., 154.]],

         [[244., 240., 240., ..., 237., 235., 234.],
          [245., 242., 242., ..., 238., 236., 235.],
          [246., 243., 244., ..., 238., 235., 236.],
          ...,
          [105., 102.,  99., ..., 100.,  79., 100.],
          [100.,  99.,  96., ..., 110., 103., 101.],
          [ 96.,  99.,  97., ..., 108., 107., 100.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:13

analyse the exceptions in iter:13
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 17.,  17.,  17., ...,  23.,  22.,  19.],
          [ 18.,  18.,  18., ...,  24.,  23.,  22.],
          [ 18.,  18.,  19., ...,  24.,  23.,  23.],
          ...,
          [217., 226., 210., ...,  33.,  32.,  33.],
          [219., 222., 214., ...,  35.,  34.,  33.],
          [210., 221., 215., ...,  36.,  34.,  32.]],

         [[  3.,   3.,   2., ...,  13.,  12.,   9.],
          [  4.,   4.,   4., ...,  14.,  13.,  12.],
          [  4.,   4.,   5., ...,  14.,  13.,  13.],
          ...,
          [214., 219., 201., ...,  24.,  23.,  24.],
          [215., 215., 208., ...,  26.,  25.,  24.],
          [208., 216., 212., ...,  27.,  25.,  23.]],

         [[  2.,   2.,   1., ...,  11.,  10.,   7.],
          [  3.,   3.,   3., ...,  12.,  11.,  10.],
          [  3.,   3.,   4., ...,  12.,  11.,  11.],
          ...,
          [223., 227., 213., ...,  17.,  16.,  17.],
          [230., 229., 225., ...,  19.,  18.,  17.],
          [223., 229., 227., ...,  20.,  18.,  16.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:14

analyse the exceptions in iter:14
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[100.,  98.,  99., ..., 165., 163., 165.],
          [101., 100., 100., ..., 164., 163., 159.],
          [105., 104., 104., ..., 156., 136., 114.],
          ...,
          [166., 166., 168., ..., 137., 137., 147.],
          [161., 162., 167., ..., 131., 138., 137.],
          [164., 162., 164., ..., 153., 157., 156.]],

         [[146., 144., 144., ..., 165., 163., 165.],
          [145., 143., 143., ..., 161., 162., 161.],
          [147., 145., 145., ..., 150., 133., 117.],
          ...,
          [156., 156., 157., ..., 127., 126., 136.],
          [152., 153., 158., ..., 125., 133., 132.],
          [158., 156., 158., ..., 146., 151., 150.]],

         [[192., 189., 189., ..., 165., 163., 165.],
          [188., 186., 186., ..., 159., 159., 157.],
          [189., 186., 187., ..., 147., 129., 111.],
          ...,
          [150., 151., 152., ..., 112., 114., 127.],
          [149., 150., 155., ..., 117., 124., 120.],
          [155., 153., 155., ..., 139., 141., 137.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:15

analyse the exceptions in iter:15
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[100., 100., 101., ...,  95.,  94.,  95.],
          [103., 103., 104., ...,  97.,  97.,  97.],
          [107., 106., 106., ..., 100., 100., 101.],
          ...,
          [165., 159., 167., ...,  75.,  75.,  72.],
          [158., 173., 182., ...,  76.,  75.,  77.],
          [161., 162., 160., ...,  98., 129., 162.]],

         [[168., 168., 167., ..., 165., 165., 167.],
          [170., 168., 168., ..., 167., 166., 168.],
          [174., 172., 173., ..., 170., 170., 172.],
          ...,
          [178., 170., 177., ..., 117., 120., 120.],
          [174., 186., 193., ..., 119., 119., 121.],
          [176., 176., 171., ..., 137., 160., 185.]],

         [[231., 229., 230., ..., 231., 228., 229.],
          [230., 228., 226., ..., 229., 227., 229.],
          [233., 230., 229., ..., 230., 230., 232.],
          ...,
          [177., 167., 170., ..., 154., 157., 158.],
          [172., 182., 188., ..., 154., 153., 154.],
          [174., 172., 169., ..., 167., 183., 202.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:16

analyse the exceptions in iter:16
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[235., 235., 237., ..., 233., 227., 223.],
          [231., 232., 234., ..., 231., 225., 221.],
          [231., 233., 237., ..., 232., 225., 221.],
          ...,
          [125., 126., 143., ...,  66.,  65.,  68.],
          [127., 141., 149., ...,  63.,  67.,  62.],
          [137., 142., 149., ...,  62.,  61.,  51.]],

         [[236., 236., 238., ..., 234., 230., 228.],
          [232., 233., 235., ..., 232., 228., 225.],
          [232., 234., 238., ..., 233., 228., 226.],
          ...,
          [124., 125., 142., ...,  89.,  86.,  83.],
          [125., 140., 148., ...,  89.,  88.,  79.],
          [135., 140., 147., ...,  90.,  84.,  68.]],

         [[238., 238., 240., ..., 236., 233., 232.],
          [234., 235., 237., ..., 234., 232., 233.],
          [234., 236., 240., ..., 235., 232., 233.],
          ...,
          [122., 123., 140., ...,  23.,  23.,  37.],
          [125., 139., 148., ...,  24.,  26.,  29.],
          [136., 141., 148., ...,  27.,  23.,  14.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:17

analyse the exceptions in iter:17
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[110., 142., 151., ...,  39.,  40.,  38.],
          [109., 141., 152., ...,  36.,  40.,  36.],
          [105., 142., 151., ...,  39.,  44.,  39.],
          ...,
          [ 62.,  39.,  60., ...,  42.,  46.,  47.],
          [ 62.,  52.,  58., ...,  43.,  47.,  49.],
          [ 55.,  60.,  56., ...,  45.,  47.,  51.]],

         [[104., 135., 146., ...,  39.,  40.,  38.],
          [103., 133., 147., ...,  36.,  40.,  36.],
          [ 98., 133., 145., ...,  39.,  44.,  39.],
          ...,
          [ 59.,  38.,  64., ...,  44.,  44.,  44.],
          [ 57.,  51.,  61., ...,  46.,  45.,  46.],
          [ 51.,  60.,  60., ...,  48.,  46.,  48.]],

         [[ 97., 118., 120., ...,  39.,  40.,  38.],
          [ 95., 115., 119., ...,  37.,  40.,  36.],
          [ 90., 114., 117., ...,  41.,  45.,  40.],
          ...,
          [ 60.,  49.,  81., ...,  56.,  55.,  55.],
          [ 56.,  61.,  78., ...,  58.,  58.,  60.],
          [ 50.,  71.,  78., ...,  60.,  60.,  62.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:18

analyse the exceptions in iter:18
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[197., 198., 201., ..., 217., 217., 217.],
          [193., 195., 198., ..., 216., 215., 214.],
          [192., 194., 197., ..., 217., 216., 215.],
          ...,
          [156., 156., 156., ...,  98., 117., 128.],
          [158., 159., 154., ..., 131., 117.,  91.],
          [152., 151., 145., ...,  91.,  90.,  79.]],

         [[187., 188., 191., ..., 201., 201., 201.],
          [183., 185., 188., ..., 200., 200., 198.],
          [182., 184., 187., ..., 201., 200., 199.],
          ...,
          [146., 146., 146., ...,  79.,  96., 105.],
          [148., 149., 144., ..., 110.,  99.,  75.],
          [142., 141., 135., ...,  72.,  73.,  65.]],

         [[188., 189., 192., ..., 204., 204., 204.],
          [184., 186., 189., ..., 203., 202., 201.],
          [183., 185., 188., ..., 204., 203., 202.],
          ...,
          [147., 147., 147., ...,  65.,  82.,  89.],
          [149., 150., 145., ...,  96.,  86.,  64.],
          [143., 142., 136., ...,  61.,  63.,  57.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:19

analyse the exceptions in iter:19
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 23.,  47.,  52., ..., 131., 182., 215.],
          [ 32.,  51.,  56., ..., 149., 204., 209.],
          [ 41.,  59.,  60., ..., 138., 196., 203.],
          ...,
          [167., 177., 182., ..., 199., 176., 145.],
          [166., 165., 165., ..., 183., 183., 189.],
          [175., 173., 173., ..., 190., 188., 192.]],

         [[ 27.,  49.,  46., ..., 130., 180., 212.],
          [ 31.,  49.,  49., ..., 148., 206., 217.],
          [ 37.,  57.,  59., ..., 138., 200., 217.],
          ...,
          [167., 177., 182., ..., 192., 171., 140.],
          [166., 165., 165., ..., 181., 182., 187.],
          [175., 173., 173., ..., 187., 186., 189.]],

         [[ 22.,  41.,  30., ..., 117., 174., 230.],
          [ 24.,  38.,  34., ..., 133., 197., 232.],
          [ 25.,  47.,  51., ..., 125., 194., 233.],
          ...,
          [168., 177., 182., ..., 192., 171., 140.],
          [166., 165., 165., ..., 181., 182., 188.],
          [175., 173., 173., ..., 184., 183., 186.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:20

analyse the exceptions in iter:20
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[153., 174., 155., ..., 122., 138.,  97.],
          [160., 164., 150., ..., 137., 160., 103.],
          [140., 147., 136., ..., 104., 125.,  93.],
          ...,
          [175., 170., 170., ..., 193., 197., 199.],
          [174., 173., 171., ..., 200., 202., 208.],
          [168., 164., 166., ..., 204., 204., 206.]],

         [[157., 180., 165., ..., 125., 143., 101.],
          [163., 170., 159., ..., 135., 161., 109.],
          [143., 152., 145., ..., 103., 128., 102.],
          ...,
          [177., 172., 172., ..., 203., 206., 204.],
          [177., 176., 174., ..., 208., 209., 212.],
          [173., 169., 171., ..., 209., 208., 210.]],

         [[155., 188., 172., ..., 123., 141.,  97.],
          [165., 180., 169., ..., 129., 157., 107.],
          [147., 166., 158., ...,  99., 125., 101.],
          ...,
          [179., 174., 174., ..., 212., 214., 213.],
          [181., 180., 178., ..., 216., 218., 221.],
          [180., 175., 177., ..., 217., 217., 219.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:21

analyse the exceptions in iter:22
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 86.,  96., 115., ...,  84.,  95.,  79.],
          [125.,  99.,  71., ...,  78.,  88.,  93.],
          [112.,  87.,  58., ...,  89.,  88.,  85.],
          ...,
          [ 66.,  56.,  46., ...,  70.,  61.,  47.],
          [108.,  96.,  86., ...,  57.,  57.,  46.],
          [130., 120.,  98., ...,  44.,  44.,  45.]],

         [[ 74.,  83., 109., ...,  72.,  84.,  68.],
          [110.,  83.,  61., ...,  74.,  82.,  82.],
          [ 95.,  69.,  45., ...,  88.,  84.,  77.],
          ...,
          [ 61.,  53.,  46., ...,  79.,  74.,  57.],
          [100.,  91.,  82., ...,  60.,  65.,  51.],
          [117., 110.,  90., ...,  43.,  46.,  45.]],

         [[ 62.,  65.,  83., ...,  50.,  61.,  45.],
          [104.,  74.,  46., ...,  44.,  51.,  53.],
          [ 89.,  62.,  35., ...,  54.,  50.,  45.],
          ...,
          [ 39.,  33.,  28., ...,  46.,  42.,  31.],
          [ 73.,  66.,  59., ...,  38.,  41.,  31.],
          [ 91.,  86.,  67., ...,  30.,  32.,  32.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:22

analyse the exceptions in iter:23
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[126., 102., 117., ...,  96., 113., 107.],
          [135., 113., 121., ..., 115., 114., 115.],
          [126., 124., 128., ..., 134., 115., 114.],
          ...,
          [141., 155., 134., ..., 149., 147., 122.],
          [153., 164., 146., ..., 163., 189., 184.],
          [125., 129., 124., ..., 133., 180., 168.]],

         [[100.,  76.,  93., ...,  74.,  90.,  84.],
          [109.,  86.,  94., ...,  89.,  89.,  90.],
          [102.,  97., 101., ..., 109.,  90.,  90.],
          ...,
          [111., 123., 102., ..., 140., 133., 106.],
          [122., 132., 119., ..., 156., 178., 174.],
          [100., 106., 102., ..., 127., 173., 162.]],

         [[ 71.,  49.,  60., ...,  42.,  58.,  52.],
          [ 73.,  52.,  56., ...,  58.,  55.,  53.],
          [ 61.,  59.,  60., ...,  77.,  55.,  50.],
          ...,
          [ 85.,  87.,  65., ..., 118., 116.,  94.],
          [ 83.,  89.,  81., ..., 147., 174., 173.],
          [ 56.,  64.,  68., ..., 124., 174., 164.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:23

analyse the exceptions in iter:24
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 73.,  71.,  77., ..., 183., 180., 185.],
          [ 73.,  75.,  78., ..., 181., 172., 174.],
          [ 77.,  94.,  99., ..., 175., 191., 185.],
          ...,
          [ 84.,  86., 118., ...,  79., 159., 117.],
          [ 76.,  81., 103., ...,  56.,  69., 104.],
          [102.,  91.,  95., ..., 100.,  72.,  48.]],

         [[ 77.,  68.,  69., ..., 210., 214., 225.],
          [ 74.,  68.,  64., ..., 229., 220., 218.],
          [ 72.,  82.,  81., ..., 213., 230., 226.],
          ...,
          [106., 105., 133., ...,  95., 177., 133.],
          [ 96.,  98., 116., ...,  80.,  90., 120.],
          [120., 109., 110., ..., 134.,  97.,  59.]],

         [[ 58.,  50.,  44., ..., 149., 143., 144.],
          [ 52.,  55.,  50., ..., 139., 129., 127.],
          [ 64.,  79.,  73., ..., 139., 152., 142.],
          ...,
          [ 56.,  58.,  84., ...,  78., 137.,  94.],
          [ 60.,  56.,  73., ...,  36.,  40.,  69.],
          [ 92.,  62.,  62., ...,  55.,  38.,  29.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:24

analyse the exceptions in iter:25
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[162., 164., 169., ..., 184., 190., 202.],
          [153., 158., 164., ..., 178., 189., 201.],
          [157., 161., 164., ..., 178., 190., 202.],
          ...,
          [214., 213., 213., ..., 240., 241., 242.],
          [218., 209., 208., ..., 232., 236., 239.],
          [216., 207., 201., ..., 231., 233., 235.]],

         [[164., 167., 171., ..., 176., 186., 198.],
          [151., 156., 163., ..., 171., 184., 198.],
          [151., 156., 160., ..., 170., 186., 199.],
          ...,
          [205., 193., 185., ..., 207., 206., 209.],
          [209., 188., 180., ..., 195., 196., 200.],
          [204., 189., 174., ..., 192., 194., 198.]],

         [[130., 128., 131., ..., 137., 146., 161.],
          [119., 120., 124., ..., 131., 143., 158.],
          [120., 121., 122., ..., 131., 142., 156.],
          ...,
          [193., 181., 174., ..., 193., 194., 196.],
          [198., 176., 169., ..., 182., 185., 187.],
          [197., 178., 156., ..., 178., 181., 183.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:25

analyse the exceptions in iter:26
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[131., 124., 116., ..., 184., 185., 184.],
          [127., 124., 116., ..., 177., 180., 186.],
          [123., 121., 113., ..., 179., 187., 194.],
          ...,
          [ 99.,  83.,  54., ..., 138., 155., 165.],
          [ 97.,  77.,  43., ..., 140., 154., 163.],
          [ 96.,  71.,  35., ..., 140., 156., 164.]],

         [[ 81.,  76.,  70., ..., 152., 153., 152.],
          [ 76.,  75.,  69., ..., 142., 146., 152.],
          [ 73.,  73.,  67., ..., 142., 150., 158.],
          ...,
          [ 50.,  42.,  27., ..., 103., 113., 118.],
          [ 50.,  39.,  21., ..., 105., 112., 116.],
          [ 49.,  36.,  16., ..., 104., 114., 118.]],

         [[ 32.,  27.,  20., ..., 114., 117., 120.],
          [ 27.,  26.,  19., ..., 106., 110., 116.],
          [ 23.,  24.,  17., ..., 106., 114., 118.],
          ...,
          [ 10.,   5.,   5., ...,  68.,  72.,  74.],
          [ 10.,   5.,   4., ...,  69.,  71.,  71.],
          [ 10.,   4.,   3., ...,  69.,  73.,  73.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:26

analyse the exceptions in iter:27
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 45.,  42.,  35., ...,  93.,  51.,  39.],
          [ 46.,  42.,  40., ..., 105.,  66.,  48.],
          [ 43.,  40.,  48., ...,  88.,  77.,  58.],
          ...,
          [ 55.,  67.,  73., ...,  93., 101., 103.],
          [ 55.,  62.,  68., ...,  69.,  81.,  99.],
          [ 58.,  59.,  58., ...,  77.,  66.,  83.]],

         [[ 20.,  21.,  17., ...,  86.,  47.,  36.],
          [ 22.,  22.,  22., ...,  93.,  53.,  39.],
          [ 22.,  21.,  32., ...,  74.,  59.,  44.],
          ...,
          [ 54.,  57.,  64., ...,  87., 116., 123.],
          [ 54.,  53.,  59., ...,  62.,  93., 117.],
          [ 53.,  46.,  45., ...,  68.,  75.,  99.]],

         [[ 19.,  18.,  13., ...,  81.,  42.,  32.],
          [ 20.,  18.,  18., ...,  92.,  52.,  36.],
          [ 19.,  17.,  27., ...,  77.,  60.,  43.],
          ...,
          [ 51.,  54.,  57., ...,  49.,  34.,  30.],
          [ 51.,  50.,  52., ...,  38.,  29.,  35.],
          [ 51.,  44.,  40., ...,  53.,  29.,  31.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:27

analyse the exceptions in iter:28
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[128., 121., 138., ..., 130., 101., 122.],
          [133., 125., 136., ..., 131., 106., 127.],
          [141., 126., 141., ..., 132., 114., 126.],
          ...,
          [191., 186., 175., ..., 190., 182., 195.],
          [210., 207., 198., ..., 194., 184., 192.],
          [209., 206., 207., ..., 201., 193., 196.]],

         [[141., 134., 151., ..., 150., 121., 141.],
          [146., 138., 149., ..., 151., 126., 147.],
          [155., 139., 154., ..., 152., 134., 146.],
          ...,
          [178., 174., 160., ..., 179., 175., 188.],
          [195., 197., 179., ..., 179., 178., 186.],
          [194., 195., 189., ..., 187., 187., 190.]],

         [[123., 116., 133., ..., 138., 109., 129.],
          [128., 120., 131., ..., 139., 114., 135.],
          [136., 121., 136., ..., 140., 122., 134.],
          ...,
          [126., 124., 112., ..., 138., 137., 145.],
          [143., 144., 129., ..., 138., 133., 142.],
          [142., 143., 138., ..., 145., 142., 146.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:28

analyse the exceptions in iter:30
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[126., 122., 126., ..., 124., 120., 117.],
          [122., 119., 121., ..., 124., 122., 117.],
          [122., 121., 121., ..., 126., 123., 121.],
          ...,
          [126., 126., 128., ..., 133., 122., 114.],
          [125., 126., 127., ..., 128., 121., 114.],
          [123., 123., 126., ..., 128., 126., 121.]],

         [[118., 115., 119., ..., 118., 114., 111.],
          [115., 112., 114., ..., 118., 116., 111.],
          [115., 114., 114., ..., 120., 117., 115.],
          ...,
          [118., 118., 120., ..., 125., 114., 106.],
          [117., 118., 119., ..., 120., 113., 106.],
          [115., 115., 118., ..., 119., 118., 113.]],

         [[110., 108., 111., ..., 106., 102.,  99.],
          [107., 104., 106., ..., 106., 104.,  99.],
          [107., 106., 106., ..., 108., 105., 103.],
          ...,
          [107., 107., 109., ..., 114., 103.,  95.],
          [106., 107., 108., ..., 109., 102.,  95.],
          [104., 104., 107., ..., 109., 107., 102.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:29

analyse the exceptions in iter:32
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 50.,  51.,  42., ...,  48.,  18.,  14.],
          [ 86.,  92.,  82., ...,  46.,  17.,  11.],
          [ 43.,  43.,  51., ...,  42.,  10.,   6.],
          ...,
          [220., 209., 199., ..., 177., 176., 175.],
          [188., 182., 182., ..., 176., 175., 174.],
          [188., 184., 186., ..., 176., 176., 173.]],

         [[ 64.,  63.,  55., ...,  45.,  18.,  15.],
          [107., 110.,  99., ...,  43.,  17.,  12.],
          [ 60.,  56.,  65., ...,  39.,  10.,   6.],
          ...,
          [165., 174., 172., ..., 171., 170., 168.],
          [178., 170., 161., ..., 168., 167., 166.],
          [167., 163., 167., ..., 169., 168., 165.]],

         [[ 37.,  41.,  41., ...,  42.,  14.,  12.],
          [ 67.,  76.,  67., ...,  41.,  14.,  10.],
          [ 42.,  41.,  46., ...,  37.,   9.,   5.],
          ...,
          [151., 165., 164., ..., 168., 167., 166.],
          [162., 162., 157., ..., 166., 165., 164.],
          [162., 157., 160., ..., 166., 166., 162.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:30

analyse the exceptions in iter:33
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[  7.,   7.,   5., ...,  82.,  80.,  69.],
          [  6.,   6.,   5., ...,  85.,  86.,  81.],
          [  1.,   7.,   8., ...,  98.,  96.,  86.],
          ...,
          [150., 135., 129., ...,  72.,  45.,  26.],
          [156., 153., 138., ...,  57.,  23.,  38.],
          [183., 191., 182., ...,  83.,  67., 114.]],

         [[  5.,   5.,   4., ...,  84.,  85.,  73.],
          [  4.,   4.,   3., ...,  86.,  88.,  80.],
          [  1.,   7.,   8., ...,  96.,  96.,  84.],
          ...,
          [153., 136., 129., ...,  72.,  51.,  32.],
          [156., 151., 136., ...,  58.,  32.,  45.],
          [193., 199., 189., ...,  83.,  74., 120.]],

         [[  8.,   8.,   6., ...,  78.,  81.,  68.],
          [  8.,   9.,   8., ...,  77.,  81.,  72.],
          [  6.,  12.,  13., ...,  83.,  85.,  73.],
          ...,
          [139., 121., 113., ...,  69.,  63.,  51.],
          [139., 130., 110., ...,  56.,  48.,  64.],
          [183., 185., 171., ...,  76.,  81., 119.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:31

analyse the exceptions in iter:34
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[172., 171., 168., ..., 158., 156., 147.],
          [169., 168., 168., ..., 158., 152., 145.],
          [174., 169., 170., ..., 157., 149., 146.],
          ...,
          [150., 157., 162., ..., 158., 147., 139.],
          [143., 149., 155., ..., 148., 143., 140.],
          [148., 146., 149., ..., 137., 134., 136.]],

         [[187., 186., 182., ..., 170., 169., 163.],
          [185., 183., 184., ..., 175., 170., 165.],
          [190., 185., 186., ..., 177., 170., 168.],
          ...,
          [163., 168., 170., ..., 168., 160., 154.],
          [154., 158., 161., ..., 157., 153., 153.],
          [158., 155., 157., ..., 143., 139., 143.]],

         [[130., 130., 126., ..., 113., 113., 107.],
          [123., 122., 123., ..., 114., 110., 107.],
          [126., 122., 123., ..., 115., 108., 109.],
          ...,
          [100., 103., 104., ..., 108.,  99.,  90.],
          [ 89.,  90.,  96., ...,  99.,  92.,  88.],
          [ 93.,  89.,  92., ...,  86.,  80.,  82.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:32

analyse the exceptions in iter:36
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[169., 131., 193., ..., 172., 169., 166.],
          [165., 127., 189., ..., 172., 169., 166.],
          [163., 126., 186., ..., 173., 170., 168.],
          ...,
          [147., 139., 145., ..., 220., 218., 219.],
          [146., 143., 152., ..., 221., 220., 219.],
          [148., 143., 146., ..., 223., 221., 220.]],

         [[122., 108., 196., ..., 187., 183., 181.],
          [119., 104., 192., ..., 186., 183., 180.],
          [117., 103., 189., ..., 187., 184., 182.],
          ...,
          [ 93.,  85.,  91., ..., 220., 218., 219.],
          [ 87.,  83.,  94., ..., 221., 220., 219.],
          [ 87.,  82.,  85., ..., 223., 221., 220.]],

         [[ 65.,  75., 192., ..., 187., 183., 181.],
          [ 62.,  72., 187., ..., 186., 183., 180.],
          [ 60.,  71., 185., ..., 187., 184., 182.],
          ...,
          [ 35.,  39.,  42., ..., 220., 218., 219.],
          [ 31.,  39.,  43., ..., 222., 220., 219.],
          [ 28.,  31.,  30., ..., 223., 221., 220.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:33

analyse the exceptions in iter:37
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 95.,  88.,  86., ..., 101.,  91., 105.],
          [ 82.,  75.,  76., ...,  94.,  51.,  84.],
          [ 77.,  74.,  71., ...,  71.,  47.,  88.],
          ...,
          [ 97.,  92.,  97., ...,  86.,  94.,  90.],
          [ 95.,  84.,  89., ...,  96., 102.,  97.],
          [ 91.,  83.,  82., ..., 100., 105., 108.]],

         [[105.,  97.,  96., ..., 116., 108., 124.],
          [ 90.,  83.,  84., ..., 102.,  61.,  97.],
          [ 85.,  81.,  78., ...,  74.,  52.,  95.],
          ...,
          [ 95.,  92.,  93., ...,  91.,  97.,  97.],
          [ 90.,  86.,  89., ...,  97.,  96.,  94.],
          [ 84.,  81.,  81., ...,  96.,  97., 102.]],

         [[127., 120., 118., ..., 144., 136., 157.],
          [110., 104., 104., ..., 123.,  80., 122.],
          [103.,  98.,  95., ...,  86.,  63., 111.],
          ...,
          [ 72.,  69.,  70., ...,  65.,  72.,  71.],
          [ 65.,  59.,  62., ...,  76.,  77.,  73.],
          [ 63.,  57.,  55., ...,  78.,  80.,  83.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:34

analyse the exceptions in iter:38
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[110., 223., 243., ...,   7.,   0.,   0.],
          [102., 213., 244., ...,  98.,  80.,  31.],
          [ 99., 204., 248., ..., 221., 198.,  89.],
          ...,
          [ 58.,  58.,  51., ...,   8.,   9.,   6.],
          [ 69.,  54.,  49., ...,  48.,  52.,  35.],
          [ 81.,  52.,  50., ...,  15.,  16.,  13.]],

         [[ 90., 197., 215., ...,   2.,   0.,   0.],
          [ 83., 187., 217., ...,  90.,  74.,  27.],
          [ 78., 179., 221., ..., 209., 188.,  81.],
          ...,
          [ 63.,  70.,  69., ...,   8.,  10.,   8.],
          [ 72.,  64.,  65., ...,  44.,  47.,  32.],
          [ 80.,  58.,  63., ...,   5.,   5.,   3.]],

         [[ 84., 185., 201., ...,   3.,   0.,   0.],
          [ 77., 176., 203., ...,  92.,  75.,  28.],
          [ 72., 167., 207., ..., 213., 191.,  83.],
          ...,
          [ 87., 100., 103., ...,  10.,   7.,   5.],
          [ 94.,  92.,  98., ...,  43.,  44.,  30.],
          [100.,  84.,  93., ...,   5.,   5.,   4.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:35

analyse the exceptions in iter:39
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 98., 119., 109., ...,  75.,  60.,  61.],
          [ 44.,  75.,  69., ...,  81.,  55.,  65.],
          [ 73.,  94., 111., ...,  77.,  60.,  58.],
          ...,
          [ 96., 100., 129., ...,  72.,  68.,  85.],
          [124., 114., 110., ...,  84.,  81.,  73.],
          [ 93.,  98.,  95., ...,  73.,  55.,  72.]],

         [[110., 132., 122., ...,  97.,  82.,  84.],
          [ 56.,  86.,  80., ..., 103.,  77.,  87.],
          [ 84., 105., 122., ...,  99.,  82.,  82.],
          ...,
          [ 98., 100., 126., ...,  73.,  71.,  93.],
          [137., 124., 117., ...,  92.,  89.,  81.],
          [110., 112., 106., ...,  82.,  63.,  79.]],

         [[ 96., 117., 107., ...,  76.,  62.,  67.],
          [ 46.,  76.,  70., ...,  82.,  57.,  74.],
          [ 77.,  98., 115., ...,  78.,  61.,  61.],
          ...,
          [ 99., 100., 124., ...,  69.,  67.,  85.],
          [135., 121., 111., ...,  85.,  84.,  74.],
          [107., 107.,  99., ...,  75.,  58.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:36

analyse the exceptions in iter:40
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[101.,  94.,  98., ..., 121., 127., 143.],
          [120., 131., 124., ..., 115., 121., 144.],
          [120., 139., 140., ..., 105., 107., 121.],
          ...,
          [ 48.,  31.,  37., ..., 188., 159., 125.],
          [ 52.,  42.,  44., ..., 173., 165., 150.],
          [ 41.,  38.,  42., ..., 164., 145., 155.]],

         [[114., 116., 112., ..., 119., 130., 136.],
          [122., 132., 119., ..., 116., 126., 141.],
          [126., 140., 139., ...,  97., 103., 121.],
          ...,
          [ 45.,  31.,  37., ..., 157., 130., 106.],
          [ 46.,  40.,  45., ..., 135., 136., 132.],
          [ 42.,  38.,  41., ..., 130., 120., 134.]],

         [[ 35.,  48.,  42., ...,  58.,  66.,  90.],
          [ 64.,  98.,  74., ...,  53.,  63.,  77.],
          [ 50.,  82.,  82., ...,  56.,  61.,  65.],
          ...,
          [ 40.,  24.,  27., ..., 103.,  93.,  60.],
          [ 41.,  32.,  32., ..., 102.,  99.,  92.],
          [ 32.,  33.,  33., ...,  98.,  79.,  91.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:37

analyse the exceptions in iter:41
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[145., 145., 148., ..., 237., 230., 224.],
          [147., 150., 168., ..., 231., 221., 214.],
          [145., 150., 178., ..., 229., 230., 232.],
          ...,
          [231., 230., 227., ..., 235., 234., 231.],
          [224., 231., 231., ..., 240., 228., 223.],
          [125., 225., 232., ..., 224., 216., 228.]],

         [[125., 126., 130., ..., 210., 202., 199.],
          [126., 132., 147., ..., 203., 192., 190.],
          [124., 130., 155., ..., 201., 201., 205.],
          ...,
          [202., 202., 198., ..., 209., 207., 203.],
          [199., 200., 202., ..., 213., 201., 199.],
          [120., 200., 204., ..., 197., 189., 203.]],

         [[ 83.,  82.,  82., ..., 170., 161., 158.],
          [ 83.,  84., 107., ..., 163., 151., 149.],
          [ 79.,  84., 110., ..., 161., 160., 166.],
          ...,
          [169., 170., 166., ..., 172., 170., 167.],
          [163., 167., 170., ..., 177., 162., 162.],
          [ 98., 166., 170., ..., 160., 150., 167.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:38

analyse the exceptions in iter:42
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[127., 148., 192., ..., 112., 144., 153.],
          [ 89., 111., 151., ..., 161., 166., 163.],
          [ 98.,  94., 110., ..., 173., 169., 173.],
          ...,
          [156., 151., 149., ..., 150., 149., 142.],
          [163., 162., 161., ..., 135., 141., 138.],
          [160., 160., 163., ..., 138., 143., 151.]],

         [[126., 144., 181., ..., 102., 135., 142.],
          [ 90., 110., 141., ..., 152., 158., 154.],
          [ 94.,  94., 109., ..., 159., 154., 157.],
          ...,
          [152., 145., 144., ..., 144., 148., 143.],
          [158., 155., 151., ..., 131., 137., 134.],
          [152., 151., 153., ..., 121., 131., 135.]],

         [[129., 144., 175., ...,  98., 123., 130.],
          [ 94., 116., 137., ..., 129., 132., 128.],
          [ 94.,  99., 118., ..., 132., 129., 132.],
          ...,
          [115., 107., 104., ..., 110., 114., 104.],
          [122., 120., 118., ...,  99., 109., 103.],
          [122., 120., 120., ..., 103., 107., 117.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:39

analyse the exceptions in iter:43
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 99.,  98., 100., ..., 129., 132., 130.],
          [100., 100., 102., ..., 122., 135., 132.],
          [104., 104., 106., ..., 165., 149., 140.],
          ...,
          [195., 199., 221., ..., 209., 209., 208.],
          [197., 201., 211., ..., 208., 210., 209.],
          [199., 197., 204., ..., 208., 210., 209.]],

         [[166., 165., 167., ..., 186., 190., 188.],
          [166., 164., 167., ..., 152., 189., 188.],
          [169., 167., 170., ..., 165., 189., 189.],
          ...,
          [173., 177., 194., ..., 191., 190., 188.],
          [173., 178., 184., ..., 190., 191., 191.],
          [173., 172., 174., ..., 189., 191., 190.]],

         [[198., 196., 199., ..., 212., 215., 213.],
          [195., 194., 197., ..., 169., 213., 214.],
          [197., 195., 198., ..., 160., 205., 212.],
          ...,
          [149., 153., 166., ..., 169., 171., 173.],
          [149., 149., 147., ..., 171., 173., 175.],
          [149., 144., 137., ..., 174., 177., 175.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:40

analyse the exceptions in iter:44
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[139., 144., 146., ..., 132., 131., 129.],
          [139., 124., 128., ..., 110., 108., 114.],
          [172., 126., 116., ...,  67.,  68., 113.],
          ...,
          [ 95.,  93.,  91., ...,  81., 104., 107.],
          [132., 124., 119., ..., 114., 131., 132.],
          [110., 124., 129., ..., 129., 128., 112.]],

         [[154., 160., 162., ..., 140., 142., 141.],
          [148., 137., 149., ..., 114., 112., 127.],
          [162., 114., 109., ...,  71.,  68., 119.],
          ...,
          [ 88.,  82.,  84., ...,  94., 103., 102.],
          [109., 105., 104., ..., 104., 112., 110.],
          [108., 116., 116., ..., 117., 114., 105.]],

         [[188., 192., 192., ...,  77.,  76.,  70.],
          [180., 167., 178., ...,  81.,  76.,  68.],
          [172., 121., 129., ...,  50.,  58.,  78.],
          ...,
          [ 44.,  45.,  44., ...,  30.,  51.,  53.],
          [ 74.,  69.,  61., ...,  59.,  74.,  70.],
          [ 52.,  67.,  67., ...,  80.,  75.,  59.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:41

analyse the exceptions in iter:45
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 54.,  59.,  56., ..., 133., 131., 132.],
          [ 59.,  62.,  55., ..., 193., 200., 197.],
          [ 41.,  41.,  36., ..., 202., 196., 190.],
          ...,
          [105.,  97.,  96., ...,  98., 100., 100.],
          [ 86.,  96.,  97., ...,  94.,  98., 100.],
          [ 70.,  92., 113., ...,  98.,  96.,  92.]],

         [[ 31.,  34.,  37., ...,  92.,  89.,  94.],
          [ 38.,  39.,  36., ..., 135., 144., 142.],
          [ 26.,  25.,  21., ..., 144., 141., 136.],
          ...,
          [161., 163., 170., ..., 145., 138., 130.],
          [149., 157., 164., ..., 127., 126., 124.],
          [136., 146., 169., ..., 121., 117., 112.]],

         [[ 18.,  19.,  22., ...,  53.,  49.,  53.],
          [ 26.,  26.,  25., ...,  77.,  86.,  86.],
          [ 18.,  16.,  13., ...,  84.,  81.,  79.],
          ...,
          [157., 162., 164., ..., 144., 135., 123.],
          [143., 156., 160., ..., 122., 120., 114.],
          [128., 145., 168., ..., 111., 106., 101.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:42

analyse the exceptions in iter:46
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 94.,  72.,  60., ...,  72.,  71.,  77.],
          [ 85.,  67.,  52., ...,  67.,  72.,  77.],
          [ 82.,  54.,  41., ...,  70.,  71.,  78.],
          ...,
          [ 78.,  54.,  37., ...,  51.,  44.,  52.],
          [133., 117.,  98., ...,  62.,  53.,  60.],
          [140., 137., 138., ...,  85.,  79.,  69.]],

         [[ 91.,  71.,  68., ...,  78.,  75.,  82.],
          [ 83.,  66.,  57., ...,  73.,  78.,  85.],
          [ 82.,  53.,  44., ...,  76.,  77.,  85.],
          ...,
          [ 79.,  54.,  37., ...,  49.,  47.,  50.],
          [127., 111.,  92., ...,  58.,  56.,  59.],
          [129., 126., 126., ...,  68.,  71.,  63.]],

         [[ 62.,  42.,  35., ...,  43.,  39.,  41.],
          [ 55.,  38.,  29., ...,  41.,  37.,  39.],
          [ 53.,  24.,  19., ...,  53.,  37.,  39.],
          ...,
          [ 86.,  63.,  46., ...,  28.,  20.,  28.],
          [129., 115.,  98., ...,  35.,  28.,  36.],
          [126., 125., 129., ...,  46.,  46.,  42.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:43

analyse the exceptions in iter:47
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 77.,  76.,  78., ...,  68.,  58.,  48.],
          [ 71.,  67.,  69., ...,  57.,  44.,  36.],
          [ 55.,  52.,  58., ...,  62.,  53.,  48.],
          ...,
          [ 63.,  62.,  67., ...,  63.,  58.,  55.],
          [ 89.,  91.,  89., ...,  65.,  68.,  66.],
          [103., 107.,  92., ...,  69.,  77.,  77.]],

         [[113., 112., 114., ..., 104.,  94.,  84.],
          [107., 102., 105., ...,  93.,  80.,  72.],
          [ 91.,  88.,  94., ...,  98.,  89.,  84.],
          ...,
          [ 97.,  92.,  97., ...,  97.,  92.,  89.],
          [118., 116., 114., ...,  99., 102., 101.],
          [129., 131., 119., ..., 104., 111., 112.]],

         [[137., 136., 139., ..., 128., 118., 108.],
          [131., 126., 130., ..., 116., 104.,  96.],
          [115., 112., 119., ..., 122., 113., 108.],
          ...,
          [119., 115., 121., ..., 123., 118., 115.],
          [136., 135., 136., ..., 122., 125., 124.],
          [144., 147., 138., ..., 127., 134., 135.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:44

analyse the exceptions in iter:48
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[191., 190., 190., ..., 135., 142., 146.],
          [187., 184., 179., ..., 147., 152., 153.],
          [181., 176., 165., ..., 154., 162., 158.],
          ...,
          [220., 221., 222., ..., 211., 214., 224.],
          [212., 220., 225., ..., 216., 216., 221.],
          [201., 212., 217., ..., 220., 217., 217.]],

         [[191., 192., 193., ..., 143., 149., 150.],
          [188., 187., 183., ..., 154., 158., 158.],
          [183., 178., 169., ..., 161., 167., 163.],
          ...,
          [245., 245., 244., ..., 238., 240., 248.],
          [238., 245., 247., ..., 242., 241., 244.],
          [226., 239., 243., ..., 242., 240., 238.]],

         [[168., 172., 174., ..., 123., 126., 127.],
          [165., 166., 163., ..., 134., 135., 134.],
          [160., 157., 148., ..., 140., 143., 139.],
          ...,
          [198., 199., 202., ..., 189., 193., 203.],
          [190., 198., 204., ..., 194., 195., 201.],
          [178., 190., 196., ..., 197., 196., 195.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:45

final statics:
total operators:28
tensorflow --> nums:45,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:45
mindspore --> 
torch --> 

generate models:45

analyse the exceptions in iter:50
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 16.,  17.,  17., ...,  62.,  55.,  51.],
          [ 16.,  16.,  15., ...,  62.,  58.,  52.],
          [ 16.,  15.,  15., ...,  57.,  59.,  56.],
          ...,
          [ 96., 114., 119., ..., 128., 120., 117.],
          [118., 100., 114., ..., 139., 131., 121.],
          [144., 136., 105., ..., 145., 137., 131.]],

         [[ 76.,  77.,  77., ..., 106.,  99.,  94.],
          [ 76.,  76.,  75., ..., 109., 105., 100.],
          [ 76.,  75.,  75., ..., 110., 111., 109.],
          ...,
          [110., 127., 132., ..., 135., 130., 131.],
          [132., 113., 126., ..., 146., 140., 134.],
          [148., 140., 114., ..., 151., 144., 141.]],

         [[ 74.,  75.,  75., ...,  87.,  80.,  75.],
          [ 74.,  74.,  74., ...,  84.,  80.,  75.],
          [ 74.,  73.,  73., ...,  79.,  80.,  78.],
          ...,
          [138., 159., 167., ..., 153., 145., 142.],
          [159., 145., 163., ..., 159., 153., 147.],
          [173., 168., 143., ..., 170., 163., 158.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:46

analyse the exceptions in iter:51
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[213., 119.,  58., ..., 143., 140., 117.],
          [214., 128.,  62., ..., 138., 136., 111.],
          [215., 139.,  75., ..., 136., 134., 107.],
          ...,
          [118., 122., 129., ..., 158., 151., 145.],
          [111., 117., 128., ..., 153., 147., 141.],
          [110., 116., 127., ..., 141., 136., 139.]],

         [[221., 127.,  71., ..., 158., 142., 101.],
          [223., 137.,  75., ..., 152., 138.,  95.],
          [224., 148.,  88., ..., 151., 136.,  91.],
          ...,
          [ 45.,  45.,  46., ...,  65.,  68.,  67.],
          [ 38.,  42.,  47., ...,  62.,  59.,  63.],
          [ 38.,  40.,  48., ...,  55.,  52.,  58.]],

         [[221., 122.,  81., ..., 150., 136.,  87.],
          [220., 130.,  83., ..., 145., 133.,  82.],
          [219., 139.,  94., ..., 143., 131.,  77.],
          ...,
          [ 37.,  40.,  42., ...,  54.,  55.,  55.],
          [ 32.,  36.,  41., ...,  53.,  49.,  51.],
          [ 32.,  34.,  41., ...,  46.,  43.,  47.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:47

analyse the exceptions in iter:52
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 63.,  77.,  66., ...,  76.,  86., 114.],
          [ 72.,  70.,  64., ...,  84.,  81.,  88.],
          [ 56.,  70.,  54., ..., 139., 104.,  77.],
          ...,
          [118., 152., 175., ..., 102., 128., 179.],
          [137., 148., 148., ..., 121., 170., 203.],
          [171., 173., 153., ..., 167., 187., 174.]],

         [[ 70.,  88.,  88., ...,  91.,  94., 116.],
          [ 71.,  83.,  85., ...,  94.,  91.,  97.],
          [ 65.,  82.,  76., ..., 142., 114.,  93.],
          ...,
          [107., 135., 155., ...,  79., 105., 150.],
          [123., 129., 129., ...,  94., 142., 168.],
          [145., 146., 130., ..., 136., 157., 143.]],

         [[ 37.,  63.,  63., ...,  65.,  71.,  95.],
          [ 39.,  58.,  58., ...,  71.,  67.,  73.],
          [ 34.,  53.,  48., ..., 120.,  90.,  71.],
          ...,
          [ 85., 111., 133., ...,  63.,  85., 114.],
          [101., 109., 105., ...,  74., 116., 130.],
          [108., 107.,  96., ..., 107., 129., 115.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:48

analyse the exceptions in iter:53
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[157., 156., 157., ..., 177., 177., 175.],
          [162., 162., 162., ..., 187., 182., 179.],
          [165., 164., 165., ..., 211., 204., 191.],
          ...,
          [172., 168., 166., ..., 203., 203., 200.],
          [177., 175., 172., ..., 203., 203., 200.],
          [182., 182., 179., ..., 203., 203., 200.]],

         [[159., 158., 159., ..., 183., 180., 179.],
          [164., 164., 164., ..., 194., 187., 183.],
          [167., 166., 167., ..., 220., 210., 196.],
          ...,
          [174., 170., 167., ..., 205., 205., 202.],
          [179., 177., 173., ..., 205., 205., 202.],
          [184., 183., 180., ..., 205., 205., 202.]],

         [[146., 145., 146., ..., 185., 183., 179.],
          [151., 151., 151., ..., 200., 193., 186.],
          [154., 153., 154., ..., 226., 219., 201.],
          ...,
          [161., 158., 158., ..., 201., 201., 199.],
          [166., 166., 164., ..., 202., 202., 199.],
          [171., 174., 173., ..., 202., 202., 199.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:49

analyse the exceptions in iter:54
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 45.,  47.,  48., ...,  50.,  47.,  46.],
          [ 45.,  47.,  48., ...,  55.,  51.,  51.],
          [ 45.,  46.,  47., ...,  60.,  56.,  55.],
          ...,
          [ 50.,  50.,  51., ...,  97.,  79.,  76.],
          [ 50.,  49.,  51., ...,  81., 103.,  72.],
          [ 50.,  50.,  51., ...,  83.,  90.,  88.]],

         [[ 73.,  75.,  76., ...,  73.,  69.,  70.],
          [ 72.,  74.,  75., ...,  77.,  74.,  75.],
          [ 71.,  72.,  73., ...,  83.,  80.,  80.],
          ...,
          [ 76.,  78.,  78., ..., 118., 112., 104.],
          [ 76.,  77.,  78., ...,  92., 121., 101.],
          [ 75.,  78.,  77., ...,  91., 100., 110.]],

         [[ 28.,  30.,  33., ...,  28.,  29.,  31.],
          [ 27.,  29.,  32., ...,  32.,  31.,  32.],
          [ 29.,  30.,  31., ...,  36.,  34.,  34.],
          ...,
          [ 34.,  34.,  35., ...,  99.,  50.,  49.],
          [ 34.,  34.,  35., ..., 105., 100.,  44.],
          [ 35.,  33.,  35., ..., 100., 106.,  80.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:50

analyse the exceptions in iter:55
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[156., 167., 169., ..., 243., 230., 208.],
          [174., 192., 172., ..., 237., 213., 186.],
          [192., 194., 174., ..., 226., 198., 195.],
          ...,
          [187., 211., 231., ..., 210., 217., 203.],
          [231., 220., 200., ..., 183., 189., 186.],
          [238., 238., 229., ..., 141., 151., 157.]],

         [[194., 212., 215., ..., 247., 235., 215.],
          [210., 229., 204., ..., 243., 221., 193.],
          [234., 230., 201., ..., 231., 208., 200.],
          ...,
          [211., 234., 244., ..., 204., 208., 192.],
          [238., 236., 219., ..., 170., 175., 169.],
          [242., 247., 239., ..., 126., 137., 141.]],

         [[129., 127., 129., ..., 226., 206., 180.],
          [147., 159., 163., ..., 223., 200., 169.],
          [145., 178., 194., ..., 218., 186., 165.],
          ...,
          [151., 180., 221., ..., 199., 210., 192.],
          [218., 209., 177., ..., 153., 160., 153.],
          [224., 232., 217., ..., 106., 117., 118.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:51

analyse the exceptions in iter:56
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[141., 139., 136., ..., 228., 228., 229.],
          [148., 150., 148., ..., 228., 228., 228.],
          [149., 149., 148., ..., 230., 229., 229.],
          ...,
          [125., 124., 139., ..., 220., 199., 208.],
          [126., 116., 135., ..., 246., 226., 196.],
          [143., 145., 169., ..., 254., 255., 227.]],

         [[ 70.,  61.,  55., ..., 198., 199., 200.],
          [ 71.,  67.,  64., ..., 197., 196., 197.],
          [ 72.,  66.,  64., ..., 197., 197., 197.],
          ...,
          [100., 102., 110., ..., 169., 143., 149.],
          [101.,  93., 107., ..., 205., 181., 145.],
          [105., 107., 127., ..., 208., 206., 174.]],

         [[  8.,   2.,   0., ..., 155., 156., 157.],
          [ 10.,   5.,   2., ..., 153., 152., 153.],
          [ 17.,   7.,   4., ..., 151., 151., 151.],
          ...,
          [ 73.,  80.,  75., ..., 109.,  86.,  93.],
          [ 75.,  71.,  73., ..., 144., 121.,  87.],
          [ 67.,  71.,  83., ..., 141., 138., 105.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:52

analyse the exceptions in iter:57
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 66.,  71.,  88., ...,  85.,  86.,  79.],
          [ 75.,  79.,  95., ...,  85.,  87.,  78.],
          [ 80.,  84.,  97., ...,  81.,  82.,  74.],
          ...,
          [ 79.,  87.,  60., ...,  35.,  26.,  20.],
          [ 77.,  70.,  37., ...,  79.,  77.,  66.],
          [ 78.,  63.,  31., ..., 140., 135., 128.]],

         [[ 73.,  77.,  86., ...,  80.,  81.,  73.],
          [ 81.,  84.,  92., ...,  79.,  80.,  72.],
          [ 85.,  88.,  93., ...,  75.,  74.,  68.],
          ...,
          [ 74.,  84.,  58., ...,  35.,  26.,  21.],
          [ 74.,  68.,  37., ...,  68.,  66.,  55.],
          [ 74.,  61.,  32., ..., 122., 117., 113.]],

         [[ 33.,  40.,  62., ...,  55.,  62.,  54.],
          [ 40.,  45.,  66., ...,  56.,  62.,  54.],
          [ 44.,  50.,  68., ...,  48.,  53.,  51.],
          ...,
          [ 59.,  69.,  43., ...,  22.,  14.,  10.],
          [ 59.,  53.,  22., ...,  60.,  58.,  50.],
          [ 58.,  44.,  15., ..., 116., 113., 111.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:53

analyse the exceptions in iter:58
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 97.,  96., 108., ..., 130., 117., 115.],
          [111., 104., 111., ..., 138., 128., 124.],
          [135., 132., 128., ..., 136., 130., 121.],
          ...,
          [124., 120., 126., ..., 114., 118., 119.],
          [126., 123., 125., ...,  96., 102., 102.],
          [124., 124., 126., ...,  97.,  96.,  81.]],

         [[ 83.,  84.,  98., ..., 113., 100., 100.],
          [ 97.,  91.,  99., ..., 121., 112., 111.],
          [120., 116., 113., ..., 119., 113., 109.],
          ...,
          [109., 104., 109., ...,  99., 105., 104.],
          [108., 106., 108., ...,  82.,  89.,  88.],
          [106., 107., 109., ...,  83.,  84.,  69.]],

         [[ 41.,  46.,  56., ...,  60.,  48.,  48.],
          [ 49.,  45.,  49., ...,  66.,  57.,  57.],
          [ 68.,  65.,  57., ...,  63.,  58.,  54.],
          ...,
          [ 55.,  51.,  57., ...,  57.,  61.,  55.],
          [ 54.,  52.,  53., ...,  44.,  49.,  46.],
          [ 52.,  53.,  55., ...,  42.,  45.,  36.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:54

analyse the exceptions in iter:59
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[252., 255., 194., ..., 255., 255., 253.],
          [251., 255., 211., ..., 246., 249., 251.],
          [251., 255., 218., ..., 249., 250., 252.],
          ...,
          [ 57.,  30.,  73., ...,  23.,  26., 112.],
          [ 89.,  16.,  26., ...,  21.,  32., 149.],
          [185.,  94.,  54., ...,  60., 129., 221.]],

         [[251., 255., 212., ..., 254., 253., 252.],
          [249., 255., 234., ..., 255., 255., 252.],
          [250., 255., 235., ..., 255., 254., 253.],
          ...,
          [111.,  86.,  88., ...,  60.,  81., 149.],
          [134.,  77.,  74., ...,  75.,  83., 174.],
          [208., 134.,  99., ..., 104., 159., 232.]],

         [[249., 255., 224., ..., 253., 252., 252.],
          [246., 254., 240., ..., 251., 252., 251.],
          [249., 255., 240., ..., 254., 252., 252.],
          ...,
          [159., 138., 110., ..., 100., 139., 186.],
          [177., 144., 136., ..., 140., 145., 198.],
          [229., 182., 159., ..., 159., 197., 240.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:55

analyse the exceptions in iter:60
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[201., 191., 194., ...,  83.,  39.,  36.],
          [ 57.,  62., 134., ...,  79.,  48.,  35.],
          [ 74., 123., 138., ..., 162., 132.,  56.],
          ...,
          [ 67.,  62.,  55., ...,  69.,  72.,  72.],
          [ 73.,  67.,  59., ...,  72.,  72.,  71.],
          [ 74.,  71.,  67., ...,  61.,  58.,  63.]],

         [[209., 204., 207., ...,  88.,  48.,  47.],
          [ 73.,  78., 148., ...,  91.,  59.,  45.],
          [ 99., 142., 153., ..., 175., 139.,  61.],
          ...,
          [ 80.,  72.,  62., ...,  78.,  80.,  82.],
          [ 87.,  77.,  67., ...,  81.,  81.,  81.],
          [ 89.,  84.,  79., ...,  73.,  69.,  75.]],

         [[211., 210., 216., ...,  82.,  33.,  24.],
          [ 79.,  92., 161., ...,  96.,  57.,  32.],
          [110., 165., 169., ..., 186., 145.,  56.],
          ...,
          [ 89.,  82.,  73., ...,  93.,  95.,  98.],
          [ 95.,  87.,  77., ...,  96.,  96.,  96.],
          [100.,  95.,  89., ...,  88.,  85.,  91.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:56

analyse the exceptions in iter:61
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[114., 117., 120., ..., 165., 125., 103.],
          [111., 116., 121., ..., 162., 127., 103.],
          [114., 121., 128., ..., 167., 132., 106.],
          ...,
          [165., 170., 175., ..., 185., 207., 201.],
          [175., 175., 180., ..., 187., 200., 193.],
          [173., 171., 177., ..., 205., 210., 202.]],

         [[119., 122., 126., ..., 166., 126., 103.],
          [116., 121., 126., ..., 163., 128., 103.],
          [119., 125., 132., ..., 168., 133., 108.],
          ...,
          [166., 171., 176., ..., 179., 199., 193.],
          [176., 176., 181., ..., 182., 194., 186.],
          [174., 172., 178., ..., 200., 204., 195.]],

         [[125., 126., 129., ..., 160., 121., 110.],
          [122., 127., 133., ..., 157., 123., 109.],
          [125., 136., 142., ..., 162., 126., 102.],
          ...,
          [161., 167., 171., ..., 168., 194., 185.],
          [171., 171., 176., ..., 162., 181., 178.],
          [169., 167., 173., ..., 182., 192., 187.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:57

analyse the exceptions in iter:62
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 76.,  73.,  69., ...,  75.,  72.,  70.],
          [ 76.,  71.,  66., ...,  79.,  76.,  75.],
          [ 71.,  65.,  62., ...,  80.,  77.,  76.],
          ...,
          [ 11.,   9.,   6., ...,  31.,  32.,  29.],
          [  0.,   0.,   0., ...,  12.,  12.,  13.],
          [ 87.,  83.,  81., ...,  99.,  99., 102.]],

         [[118., 118., 116., ..., 135., 134., 135.],
          [122., 119., 117., ..., 136., 135., 137.],
          [120., 117., 116., ..., 133., 132., 135.],
          ...,
          [ 36.,  32.,  32., ...,  61.,  62.,  59.],
          [ 19.,  13.,   7., ...,  38.,  37.,  38.],
          [100.,  92.,  86., ..., 116., 115., 119.]],

         [[167., 164., 162., ..., 180., 178., 179.],
          [170., 166., 163., ..., 178., 177., 179.],
          [170., 165., 164., ..., 173., 172., 174.],
          ...,
          [ 66.,  61.,  61., ...,  79.,  80.,  77.],
          [ 46.,  40.,  36., ...,  55.,  55.,  56.],
          [115., 108., 103., ..., 127., 127., 130.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:58

analyse the exceptions in iter:63
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 65.,  70.,  76., ...,  33.,  59.,  62.],
          [ 71.,  78.,  87., ...,  23.,  65.,  74.],
          [ 69.,  77.,  82., ...,  19.,  67.,  83.],
          ...,
          [ 14.,  14.,  14., ...,  54.,  54.,  52.],
          [ 14.,  14.,  14., ...,  53.,  45.,  38.],
          [ 14.,  14.,  14., ...,  49.,  31.,  21.]],

         [[114., 121., 129., ...,  47.,  62.,  66.],
          [120., 129., 140., ...,  30.,  62.,  72.],
          [118., 129., 137., ...,  20.,  57.,  73.],
          ...,
          [ 14.,  14.,  14., ...,  76.,  80.,  81.],
          [ 14.,  14.,  14., ...,  76.,  69.,  63.],
          [ 14.,  14.,  14., ...,  72.,  51.,  39.]],

         [[ 54.,  62.,  71., ...,  42.,  53.,  56.],
          [ 57.,  65.,  75., ...,  24.,  51.,  57.],
          [ 53.,  60.,  63., ...,  13.,  49.,  66.],
          ...,
          [ 14.,  14.,  14., ...,  45.,  42.,  46.],
          [ 14.,  14.,  14., ...,  46.,  37.,  34.],
          [ 14.,  14.,  14., ...,  45.,  30.,  21.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:59

analyse the exceptions in iter:64
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 65.,  67.,  69., ...,  93., 108., 102.],
          [ 65.,  65.,  69., ..., 104., 122., 132.],
          [ 62.,  63.,  68., ..., 122., 146., 140.],
          ...,
          [ 88.,  90.,  95., ...,  83.,  89.,  92.],
          [ 90.,  94.,  98., ...,  75.,  78.,  85.],
          [ 95., 102., 104., ...,  74.,  79.,  84.]],

         [[ 29.,  32.,  35., ...,  73.,  87.,  81.],
          [ 29.,  30.,  34., ...,  83.,  97., 106.],
          [ 27.,  28.,  32., ...,  99., 118., 114.],
          ...,
          [ 76.,  79.,  85., ...,  85.,  93.,  97.],
          [ 79.,  83.,  87., ...,  66.,  74.,  86.],
          [ 84.,  90.,  94., ...,  62.,  70.,  78.]],

         [[ 29.,  30.,  33., ...,  70.,  82.,  74.],
          [ 29.,  28.,  32., ...,  78.,  90.,  98.],
          [ 25.,  24.,  30., ...,  93., 110., 104.],
          ...,
          [ 84.,  86.,  92., ...,  99., 108., 111.],
          [ 85.,  90.,  95., ...,  71.,  83.,  97.],
          [ 92.,  98., 102., ...,  62.,  73.,  83.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:60

analyse the exceptions in iter:65
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[148., 132., 134., ..., 124., 108., 124.],
          [197., 168., 176., ..., 176., 162., 141.],
          [199., 199., 213., ..., 182., 178., 153.],
          ...,
          [179., 183., 182., ..., 164., 147., 136.],
          [162., 146., 127., ..., 118., 118., 132.],
          [150., 143., 123., ..., 124., 126., 157.]],

         [[141., 128., 135., ..., 131., 109., 127.],
          [181., 151., 166., ..., 178., 157., 133.],
          [194., 191., 209., ..., 186., 175., 141.],
          ...,
          [170., 165., 166., ..., 144., 127., 119.],
          [156., 133., 116., ..., 100.,  99., 116.],
          [148., 141., 125., ..., 119., 121., 154.]],

         [[174., 173., 187., ..., 186., 166., 171.],
          [214., 185., 199., ..., 213., 191., 162.],
          [207., 193., 209., ..., 193., 178., 156.],
          ...,
          [170., 148., 145., ..., 121., 106., 130.],
          [173., 140., 122., ..., 106., 108., 138.],
          [184., 176., 161., ..., 162., 162., 186.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:61

analyse the exceptions in iter:66
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[212., 208., 210., ..., 201., 195., 181.],
          [158., 141., 149., ..., 133., 120., 112.],
          [154., 135., 144., ..., 120., 117., 123.],
          ...,
          [124., 109., 106., ...,  99.,  94., 104.],
          [121., 103.,  97., ...,  81.,  79.,  94.],
          [188., 176., 170., ..., 182., 181., 187.]],

         [[189., 182., 183., ..., 190., 182., 166.],
          [135., 116., 122., ..., 125., 106.,  96.],
          [135., 119., 126., ..., 113., 105., 111.],
          ...,
          [146., 138., 136., ..., 127., 122., 126.],
          [149., 135., 128., ..., 115., 113., 119.],
          [189., 180., 175., ..., 182., 181., 185.]],

         [[148., 146., 146., ..., 146., 144., 135.],
          [102.,  91.,  96., ...,  90.,  80.,  75.],
          [102.,  90.,  91., ...,  83.,  87.,  87.],
          ...,
          [148., 143., 142., ..., 134., 132., 134.],
          [140., 142., 134., ..., 123., 123., 125.],
          [155., 152., 148., ..., 156., 154., 159.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:62

analyse the exceptions in iter:67
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[221., 214., 216., ..., 213., 211., 211.],
          [206., 201., 222., ..., 217., 215., 216.],
          [199., 205., 226., ..., 219., 218., 218.],
          ...,
          [167., 152., 152., ..., 134., 135., 140.],
          [149., 143., 142., ..., 141., 142., 142.],
          [134., 129., 129., ..., 138., 137., 135.]],

         [[208., 203., 209., ..., 206., 204., 204.],
          [192., 190., 214., ..., 211., 209., 209.],
          [184., 192., 216., ..., 213., 212., 212.],
          ...,
          [135., 117., 111., ...,  96.,  97., 102.],
          [115., 106., 103., ..., 103., 104., 104.],
          [ 98.,  93.,  92., ..., 101.,  99.,  98.]],

         [[248., 243., 247., ..., 248., 246., 246.],
          [230., 227., 250., ..., 251., 249., 249.],
          [219., 226., 249., ..., 249., 247., 248.],
          ...,
          [163., 149., 148., ..., 136., 138., 143.],
          [144., 139., 140., ..., 143., 145., 145.],
          [127., 125., 128., ..., 141., 140., 138.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:63

analyse the exceptions in iter:68
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[110., 103., 104., ..., 102.,  94.,  99.],
          [125., 119., 120., ..., 108., 104., 110.],
          [113.,  73.,  80., ...,  47.,  78., 103.],
          ...,
          [102., 125., 190., ...,  86.,  69.,  92.],
          [120., 141., 194., ...,  81.,  85., 109.],
          [159., 166., 163., ...,  98., 110., 100.]],

         [[125., 128., 130., ..., 121., 121., 120.],
          [151., 157., 160., ..., 137., 144., 145.],
          [136., 102., 107., ...,  72., 117., 141.],
          ...,
          [ 77.,  88., 159., ...,  72.,  57.,  70.],
          [ 92., 100., 163., ...,  68.,  77., 101.],
          [133., 127., 132., ...,  85., 105., 102.]],

         [[141., 147., 145., ..., 130., 132., 129.],
          [167., 181., 185., ..., 145., 155., 156.],
          [148., 122., 127., ...,  76., 124., 151.],
          ...,
          [ 37.,  49., 132., ...,  48.,  37.,  40.],
          [ 49.,  52., 124., ...,  34.,  39.,  59.],
          [ 96.,  79.,  90., ...,  57.,  64.,  67.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:64

analyse the exceptions in iter:69
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[151., 150., 151., ..., 151., 151., 151.],
          [153., 152., 153., ..., 153., 153., 153.],
          [152., 151., 152., ..., 152., 151., 151.],
          ...,
          [100.,  99., 103., ...,  93.,  98.,  98.],
          [ 96.,  94.,  93., ...,  98.,  99.,  99.],
          [ 94.,  94.,  92., ..., 100., 100., 101.]],

         [[158., 157., 158., ..., 158., 157., 157.],
          [160., 159., 160., ..., 160., 160., 160.],
          [159., 158., 159., ..., 159., 158., 158.],
          ...,
          [106., 105., 109., ...,  99., 104., 104.],
          [102., 100.,  99., ..., 104., 105., 105.],
          [100., 100.,  98., ..., 106., 106., 107.]],

         [[168., 167., 167., ..., 164., 163., 163.],
          [170., 169., 170., ..., 166., 166., 166.],
          [169., 168., 168., ..., 164., 164., 164.],
          ...,
          [102., 101., 105., ...,  95., 100., 100.],
          [ 98.,  96.,  95., ..., 100., 101., 101.],
          [ 96.,  96.,  94., ..., 102., 102., 103.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:65

analyse the exceptions in iter:70
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 159., 165., ..., 129., 125., 122.],
          [156., 160., 163., ..., 118., 120., 118.],
          [146., 130., 128., ..., 118., 112., 107.],
          ...,
          [125., 126., 124., ..., 123., 126., 131.],
          [125., 127., 125., ..., 120., 128., 129.],
          [119., 121., 135., ..., 132., 136., 146.]],

         [[179., 183., 189., ..., 161., 158., 155.],
          [177., 180., 184., ..., 150., 152., 150.],
          [169., 152., 151., ..., 150., 144., 139.],
          ...,
          [146., 147., 146., ..., 141., 140., 144.],
          [145., 148., 146., ..., 137., 142., 141.],
          [136., 138., 153., ..., 148., 149., 157.]],

         [[152., 157., 162., ..., 137., 133., 131.],
          [152., 155., 159., ..., 126., 128., 126.],
          [143., 126., 125., ..., 126., 120., 115.],
          ...,
          [129., 127., 124., ..., 117., 118., 122.],
          [127., 128., 124., ..., 119., 125., 125.],
          [120., 119., 132., ..., 135., 137., 146.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:66

analyse the exceptions in iter:71
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[169., 104.,  81., ..., 163., 210., 250.],
          [103.,   5.,   0., ...,  27.,  68., 185.],
          [163.,  23.,   1., ...,  69.,  90., 159.],
          ...,
          [235., 165., 104., ...,  55.,  87., 162.],
          [255., 231., 147., ...,  35.,  60., 189.],
          [255., 252., 240., ...,  87., 120., 215.]],

         [[170., 109.,  88., ..., 169., 214., 250.],
          [104.,   8.,   0., ...,  29.,  69., 185.],
          [163.,  25.,   3., ...,  67.,  88., 158.],
          ...,
          [235., 167., 108., ...,  60.,  91., 165.],
          [255., 231., 149., ...,  39.,  63., 191.],
          [255., 252., 240., ...,  89., 122., 216.]],

         [[164.,  98.,  82., ..., 159., 201., 242.],
          [ 93.,   0.,   0., ...,  21.,  56., 174.],
          [150.,  18.,   1., ...,  59.,  76., 147.],
          ...,
          [232., 153.,  83., ...,  28.,  63., 149.],
          [255., 226., 136., ...,  21.,  44., 179.],
          [255., 251., 237., ...,  82., 111., 207.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:67

analyse the exceptions in iter:72
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[229., 227., 208., ..., 230., 230., 213.],
          [221., 214., 145., ..., 236., 231., 201.],
          [213., 173.,  64., ..., 242., 222., 187.],
          ...,
          [224., 218., 229., ..., 190., 159., 176.],
          [224., 207., 226., ..., 162., 132., 170.],
          [233., 217., 221., ..., 153., 141., 167.]],

         [[232., 232., 214., ..., 231., 232., 218.],
          [226., 221., 150., ..., 238., 233., 207.],
          [223., 181.,  67., ..., 243., 225., 195.],
          ...,
          [224., 218., 229., ..., 193., 163., 183.],
          [224., 207., 226., ..., 165., 136., 178.],
          [233., 217., 221., ..., 156., 145., 175.]],

         [[235., 232., 219., ..., 231., 236., 223.],
          [234., 225., 157., ..., 237., 237., 214.],
          [232., 187.,  69., ..., 243., 229., 203.],
          ...,
          [222., 217., 229., ..., 199., 173., 194.],
          [223., 207., 226., ..., 173., 147., 189.],
          [233., 217., 221., ..., 164., 154., 184.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:68

analyse the exceptions in iter:73
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 64.,  72.,  73., ...,  73.,  52.,  51.],
          [ 77.,  78.,  64., ...,  56.,  42.,  43.],
          [ 90.,  87.,  69., ...,  60.,  47.,  45.],
          ...,
          [154., 159., 159., ..., 129., 131., 126.],
          [144., 143., 138., ..., 160., 159., 153.],
          [ 93.,  94.,  92., ..., 116., 115., 110.]],

         [[ 45.,  52.,  60., ...,  70.,  53.,  45.],
          [ 55.,  58.,  50., ...,  52.,  44.,  40.],
          [ 71.,  74.,  61., ...,  57.,  50.,  44.],
          ...,
          [137., 143., 142., ..., 128., 130., 126.],
          [141., 141., 136., ..., 157., 154., 149.],
          [ 93.,  94.,  90., ..., 107., 106., 102.]],

         [[ 13.,  23.,  41., ...,  30.,  20.,  31.],
          [ 28.,  36.,  38., ...,  24.,  18.,  25.],
          [ 35.,  46.,  40., ...,  40.,  30.,  30.],
          ...,
          [109., 115., 114., ...,  77.,  84.,  76.],
          [131., 131., 127., ..., 141., 144., 136.],
          [ 77.,  75.,  74., ...,  90.,  90.,  81.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:69

analyse the exceptions in iter:74
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[195., 165., 150., ..., 135., 120., 120.],
          [174., 117., 145., ..., 134., 103., 117.],
          [125.,  97., 131., ..., 129., 100., 104.],
          ...,
          [122., 125., 118., ...,  91.,  83.,  73.],
          [132., 130., 136., ...,  85.,  86.,  91.],
          [143., 137., 143., ...,  85., 107., 145.]],

         [[208., 177., 161., ..., 189., 185., 184.],
          [190., 134., 159., ..., 182., 162., 188.],
          [143., 120., 150., ..., 167., 146., 165.],
          ...,
          [146., 149., 142., ..., 118., 111.,  96.],
          [157., 155., 160., ..., 111., 113., 113.],
          [172., 165., 169., ..., 107., 127., 160.]],

         [[166., 138., 140., ..., 143., 119., 118.],
          [160., 115., 154., ..., 125.,  96., 129.],
          [125., 115., 150., ..., 120.,  97., 123.],
          ...,
          [146., 149., 142., ..., 122., 114.,  93.],
          [158., 155., 161., ..., 113., 115., 109.],
          [179., 167., 174., ..., 107., 125., 154.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:70

analyse the exceptions in iter:75
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 65.,  76., 188., ..., 146., 162., 150.],
          [ 37.,  68., 187., ..., 148., 137., 161.],
          [ 31.,  67., 177., ..., 139., 143., 178.],
          ...,
          [114., 114., 113., ..., 106., 107., 109.],
          [106., 106., 106., ..., 107., 107., 108.],
          [ 99., 105., 110., ..., 106., 107., 108.]],

         [[ 64.,  78., 187., ..., 117., 135., 130.],
          [ 41.,  70., 185., ..., 117., 115., 155.],
          [ 37.,  73., 175., ..., 110., 121., 143.],
          ...,
          [114., 114., 114., ..., 106., 107., 109.],
          [106., 106., 106., ..., 107., 107., 108.],
          [ 99., 104., 110., ..., 106., 107., 108.]],

         [[ 58.,  73., 185., ..., 110., 130., 122.],
          [ 42.,  72., 182., ..., 106., 112., 149.],
          [ 42.,  67., 169., ...,  97., 102., 134.],
          ...,
          [115., 114., 112., ..., 106., 107., 109.],
          [110., 109., 108., ..., 107., 107., 109.],
          [102., 107., 114., ..., 107., 108., 110.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:71

analyse the exceptions in iter:76
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[118., 110., 118., ..., 114., 114., 113.],
          [ 84.,  88., 120., ..., 113., 114., 115.],
          [ 85.,  99., 131., ..., 120., 120., 119.],
          ...,
          [155., 152., 151., ..., 105.,  82., 127.],
          [154., 155., 156., ..., 150., 142., 139.],
          [153., 152., 154., ..., 145., 148., 146.]],

         [[157., 162., 172., ..., 161., 161., 161.],
          [120., 136., 173., ..., 165., 164., 163.],
          [117., 141., 183., ..., 168., 168., 167.],
          ...,
          [158., 156., 155., ..., 106.,  84., 129.],
          [155., 157., 158., ..., 152., 145., 142.],
          [155., 155., 156., ..., 147., 150., 149.]],

         [[187., 196., 219., ..., 207., 207., 207.],
          [147., 168., 218., ..., 217., 216., 212.],
          [142., 171., 225., ..., 216., 215., 213.],
          ...,
          [142., 136., 133., ...,  87.,  63., 105.],
          [138., 137., 136., ..., 130., 120., 113.],
          [143., 139., 139., ..., 128., 127., 119.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:72

analyse the exceptions in iter:77
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 44.,  47.,  51., ...,  75.,  72.,  74.],
          [ 52.,  47.,  51., ...,  73.,  74.,  76.],
          [ 65.,  57.,  54., ...,  73.,  73.,  75.],
          ...,
          [ 56.,  49.,  49., ...,  53.,  52.,  53.],
          [ 41.,  56.,  52., ...,  52.,  52.,  49.],
          [ 24.,  49.,  40., ...,  54.,  55.,  46.]],

         [[ 73.,  77.,  81., ..., 107., 104., 106.],
          [ 85.,  79.,  82., ..., 105., 106., 108.],
          [100.,  91.,  87., ..., 105., 105., 108.],
          ...,
          [ 82.,  75.,  74., ...,  77.,  77.,  77.],
          [ 64.,  79.,  75., ...,  74.,  74.,  72.],
          [ 44.,  69.,  60., ...,  74.,  74.,  66.]],

         [[ 49.,  53.,  57., ...,  83.,  80.,  82.],
          [ 55.,  54.,  60., ...,  81.,  82.,  84.],
          [ 67.,  65.,  66., ...,  81.,  81.,  82.],
          ...,
          [ 48.,  41.,  41., ...,  49.,  48.,  49.],
          [ 35.,  50.,  46., ...,  49.,  49.,  46.],
          [ 19.,  44.,  36., ...,  51.,  52.,  43.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:73

analyse the exceptions in iter:79
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[248., 248., 250., ..., 253., 239., 169.],
          [246., 248., 249., ..., 251., 249., 102.],
          [228., 237., 213., ..., 252., 247., 103.],
          ...,
          [251., 248., 243., ..., 254., 252., 101.],
          [249., 250., 250., ..., 255., 251., 101.],
          [ 90.,  65.,  67., ...,  64.,  63.,  25.]],

         [[248., 248., 250., ..., 253., 239., 169.],
          [246., 248., 249., ..., 251., 249., 102.],
          [228., 237., 212., ..., 251., 247., 103.],
          ...,
          [251., 248., 243., ..., 254., 252., 101.],
          [249., 250., 250., ..., 255., 251., 101.],
          [ 90.,  65.,  67., ...,  64.,  63.,  25.]],

         [[247., 247., 248., ..., 253., 239., 169.],
          [245., 248., 250., ..., 251., 249., 102.],
          [227., 238., 216., ..., 252., 247., 103.],
          ...,
          [251., 248., 243., ..., 254., 252., 101.],
          [249., 250., 250., ..., 255., 251., 101.],
          [ 90.,  65.,  67., ...,  64.,  63.,  25.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:74

analyse the exceptions in iter:80
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 76.,  78.,  79., ..., 104., 105., 106.],
          [ 78.,  79.,  79., ..., 109., 110., 111.],
          [ 97.,  88.,  85., ..., 114., 114., 115.],
          ...,
          [101., 116., 121., ..., 186., 178., 176.],
          [134., 145., 150., ..., 176., 179., 175.],
          [150., 153., 154., ..., 178., 179., 179.]],

         [[112., 114., 114., ..., 135., 136., 137.],
          [114., 118., 119., ..., 138., 139., 140.],
          [119., 118., 119., ..., 142., 142., 143.],
          ...,
          [101., 116., 121., ..., 181., 171., 168.],
          [134., 146., 150., ..., 172., 174., 170.],
          [150., 153., 154., ..., 174., 175., 175.]],

         [[159., 162., 161., ..., 182., 183., 183.],
          [159., 161., 160., ..., 183., 183., 184.],
          [155., 161., 168., ..., 185., 186., 186.],
          ...,
          [112., 126., 130., ..., 176., 168., 166.],
          [140., 150., 154., ..., 169., 172., 169.],
          [150., 153., 154., ..., 172., 175., 176.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:75

analyse the exceptions in iter:82
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[121., 134., 135., ...,  95.,  92.,  95.],
          [ 84., 113., 125., ...,  91.,  87.,  90.],
          [ 68., 101., 114., ...,  92.,  98.,  94.],
          ...,
          [112.,  87.,  93., ..., 112., 116., 125.],
          [ 83.,  88.,  87., ..., 122., 129., 113.],
          [ 82., 102.,  85., ..., 112., 104.,  94.]],

         [[154., 163., 166., ..., 125., 126., 128.],
          [119., 142., 152., ..., 123., 121., 123.],
          [107., 135., 146., ..., 126., 130., 128.],
          ...,
          [141., 118., 127., ..., 124., 140., 148.],
          [115., 122., 117., ..., 131., 152., 137.],
          [119., 137., 109., ..., 131., 126., 120.]],

         [[106., 130., 137., ...,  67.,  72.,  72.],
          [ 85., 115., 110., ...,  65.,  64.,  64.],
          [ 60.,  89.,  74., ...,  63.,  64.,  59.],
          ...,
          [117.,  87.,  78., ..., 103.,  74.,  93.],
          [ 91.,  90.,  59., ...,  98.,  75.,  83.],
          [ 89., 104.,  60., ...,  79.,  91.,  79.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:76

analyse the exceptions in iter:83
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 87.,  95.,  95., ..., 103., 114.,  93.],
          [ 85.,  92.,  93., ..., 105., 115.,  92.],
          [ 82.,  89.,  89., ..., 107., 115.,  90.],
          ...,
          [ 50.,  51.,  50., ...,  45.,  49.,  37.],
          [ 53.,  53.,  52., ...,  49.,  56.,  40.],
          [ 52.,  54.,  55., ...,  69.,  71.,  51.]],

         [[145., 157., 156., ..., 163., 172., 138.],
          [141., 153., 154., ..., 166., 174., 138.],
          [137., 148., 149., ..., 166., 174., 137.],
          ...,
          [ 82.,  84.,  83., ...,  71.,  70.,  51.],
          [ 85.,  87.,  86., ...,  69.,  71.,  51.],
          [ 81.,  86.,  87., ...,  92.,  91.,  67.]],

         [[207., 221., 220., ..., 221., 233., 185.],
          [207., 220., 220., ..., 221., 235., 185.],
          [204., 216., 217., ..., 223., 231., 182.],
          ...,
          [132., 136., 135., ...,  99.,  78.,  52.],
          [126., 129., 128., ...,  82.,  62.,  41.],
          [113., 119., 121., ...,  93.,  82.,  58.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:77

analyse the exceptions in iter:84
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[103.,  89.,  78., ..., 112., 124., 144.],
          [ 95.,  76.,  52., ..., 126., 127., 147.],
          [ 78.,  70.,  41., ..., 160., 146., 158.],
          ...,
          [161., 154., 155., ..., 121., 120., 119.],
          [124., 122., 128., ..., 125., 139., 149.],
          [142., 144., 143., ..., 158., 165., 172.]],

         [[ 93.,  84.,  79., ..., 114., 120., 126.],
          [ 81.,  67.,  50., ..., 119., 114., 121.],
          [ 69.,  64.,  37., ..., 158., 142., 140.],
          ...,
          [176., 173., 173., ..., 141., 136., 126.],
          [143., 147., 151., ..., 130., 143., 149.],
          [138., 144., 142., ..., 160., 168., 175.]],

         [[ 68.,  59.,  59., ...,  79.,  91., 112.],
          [ 59.,  52.,  44., ...,  81.,  82., 109.],
          [ 58.,  62.,  44., ..., 103.,  91., 109.],
          ...,
          [105.,  96.,  97., ...,  86.,  85.,  82.],
          [ 89.,  87.,  98., ...,  79.,  91.,  98.],
          [ 90.,  92.,  93., ..., 105., 111., 113.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:78

analyse the exceptions in iter:85
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 1.,  1.,  1., ..., 12.,  6.,  4.],
          [ 1.,  1.,  1., ...,  9.,  2.,  1.],
          [ 1.,  1.,  1., ...,  5.,  1.,  1.],
          ...,
          [ 1.,  0., 51., ..., 48., 48., 45.],
          [ 1.,  0., 63., ..., 49., 48., 47.],
          [ 2.,  0., 43., ..., 47., 46., 48.]],

         [[ 1.,  1.,  1., ..., 15.,  7.,  4.],
          [ 1.,  1.,  1., ..., 12.,  3.,  1.],
          [ 1.,  1.,  1., ...,  8.,  2.,  1.],
          ...,
          [ 4.,  0., 34., ..., 42., 40., 36.],
          [ 2.,  0., 41., ..., 43., 40., 38.],
          [ 2.,  0., 25., ..., 42., 38., 39.]],

         [[ 1.,  1.,  1., ..., 20.,  8.,  4.],
          [ 1.,  1.,  1., ..., 17.,  5.,  1.],
          [ 1.,  1.,  1., ..., 12.,  3.,  1.],
          ...,
          [ 0.,  0., 34., ..., 40., 41., 37.],
          [ 1.,  0., 43., ..., 41., 40., 39.],
          [ 3.,  0., 27., ..., 39., 38., 40.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:79

analyse the exceptions in iter:86
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[107.,  67.,  26., ...,  89.,  72.,  73.],
          [107.,  63.,  28., ...,  93.,  81.,  91.],
          [106.,  67.,  42., ...,  88.,  84.,  93.],
          ...,
          [148., 155., 159., ..., 142., 144., 144.],
          [146., 147., 150., ..., 151., 147., 145.],
          [141., 139., 136., ..., 149., 148., 147.]],

         [[104.,  65.,  33., ..., 102.,  70.,  69.],
          [ 98.,  59.,  33., ..., 104.,  86.,  93.],
          [103.,  63.,  48., ...,  96.,  91.,  94.],
          ...,
          [172., 176., 177., ..., 165., 166., 163.],
          [171., 173., 172., ..., 176., 173., 169.],
          [165., 164., 162., ..., 173., 172., 171.]],

         [[ 85.,  53.,  23., ...,  74.,  55.,  57.],
          [ 94.,  53.,  27., ...,  75.,  62.,  73.],
          [ 85.,  57.,  39., ...,  66.,  66.,  76.],
          ...,
          [119., 128., 132., ..., 113., 113., 114.],
          [116., 120., 122., ..., 119., 112., 114.],
          [112., 111., 105., ..., 116., 118., 119.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:80

analyse the exceptions in iter:87
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 39.,  40.,  41., ...,  25.,  25.,  31.],
          [ 37.,  42.,  44., ...,  28.,  30.,  29.],
          [ 34.,  38.,  44., ...,  32.,  33.,  36.],
          ...,
          [169., 164., 171., ..., 172., 162., 173.],
          [166., 157., 169., ..., 178., 176., 178.],
          [167., 171., 175., ..., 186., 186., 182.]],

         [[ 50.,  55.,  59., ...,  29.,  29.,  37.],
          [ 48.,  56.,  63., ...,  36.,  38.,  39.],
          [ 44.,  52.,  63., ...,  46.,  47.,  51.],
          ...,
          [190., 185., 194., ..., 187., 178., 191.],
          [187., 179., 191., ..., 195., 193., 196.],
          [188., 193., 197., ..., 203., 203., 199.]],

         [[ 25.,  28.,  31., ...,  17.,  18.,  19.],
          [ 25.,  30.,  33., ...,  23.,  26.,  21.],
          [ 26.,  27.,  31., ...,  27.,  29.,  28.],
          ...,
          [ 86.,  78.,  82., ...,  92.,  78.,  86.],
          [ 81.,  70.,  77., ...,  94.,  89.,  90.],
          [ 82.,  84.,  83., ...,  98.,  98.,  95.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:81

analyse the exceptions in iter:89
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[163., 161., 167., ..., 148., 132., 127.],
          [197., 198., 197., ..., 184., 171., 178.],
          [206., 201., 206., ..., 208., 209., 213.],
          ...,
          [100.,  97.,  94., ...,  97.,  95.,  95.],
          [101.,  94.,  94., ..., 100.,  98.,  98.],
          [101.,  94.,  94., ...,  99.,  95.,  97.]],

         [[161., 160., 166., ..., 147., 133., 130.],
          [191., 193., 193., ..., 185., 173., 180.],
          [201., 194., 196., ..., 207., 208., 212.],
          ...,
          [100.,  98.,  95., ...,  95.,  94.,  94.],
          [100.,  93.,  93., ..., 100.,  98.,  97.],
          [100.,  93.,  93., ...,  98.,  94.,  95.]],

         [[130., 107., 100., ..., 117.,  91.,  77.],
          [145., 134., 125., ..., 139., 121., 124.],
          [139., 137., 142., ..., 144., 144., 147.],
          ...,
          [ 99.,  95.,  91., ...,  95.,  88.,  88.],
          [107.,  98.,  98., ...,  90.,  86.,  89.],
          [106.,  99.,  98., ...,  96.,  94.,  97.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:82

analyse the exceptions in iter:90
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[216., 201., 210., ..., 172., 196., 202.],
          [202., 222., 211., ..., 164., 173., 176.],
          [190., 186., 222., ..., 143., 145., 133.],
          ...,
          [138., 150., 152., ...,  10.,  13.,  32.],
          [140., 134., 171., ...,  22.,  28.,  28.],
          [123., 132., 159., ...,  33.,  42.,  30.]],

         [[195., 178., 184., ..., 149., 177., 189.],
          [179., 197., 184., ..., 139., 152., 160.],
          [165., 159., 193., ..., 115., 122., 115.],
          ...,
          [119., 131., 132., ...,   5.,   8.,  25.],
          [116., 113., 153., ...,  18.,  24.,  24.],
          [ 99., 111., 141., ...,  29.,  38.,  26.]],

         [[180., 160., 164., ..., 130., 153., 166.],
          [164., 179., 165., ..., 119., 128., 137.],
          [150., 142., 174., ...,  94.,  96.,  90.],
          ...,
          [ 95., 110., 114., ...,   3.,   5.,  21.],
          [ 95.,  92., 131., ...,  11.,  16.,  16.],
          [ 78.,  90., 119., ...,  20.,  29.,  17.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:83

analyse the exceptions in iter:91
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 60.,  67.,  70., ...,  53.,  44.,  36.],
          [ 57.,  82., 124., ...,  48.,  42.,  39.],
          [ 53.,  63., 125., ...,  46.,  40.,  35.],
          ...,
          [ 21.,  27.,  30., ...,  83.,  71.,  64.],
          [ 26.,  32.,  35., ...,  93.,  77.,  56.],
          [ 27.,  33.,  35., ...,  70.,  51.,  30.]],

         [[ 90.,  88.,  89., ...,  93.,  84.,  81.],
          [ 83.,  91., 121., ...,  84.,  78.,  79.],
          [ 79.,  69., 107., ...,  82.,  76.,  74.],
          ...,
          [ 40.,  42.,  46., ...,  36.,  38.,  60.],
          [ 47.,  46.,  49., ...,  52.,  43.,  48.],
          [ 45.,  43.,  45., ...,  57.,  50.,  48.]],

         [[134., 133., 131., ..., 148., 142., 139.],
          [123., 122., 137., ..., 146., 143., 144.],
          [125., 101., 119., ..., 138., 135., 134.],
          ...,
          [ 89.,  94.,  94., ...,  28.,  42.,  93.],
          [ 93.,  94.,  92., ...,  47.,  44.,  76.],
          [ 91.,  91.,  87., ...,  72.,  76.,  95.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:84

analyse the exceptions in iter:92
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[106., 105., 108., ..., 109., 109., 105.],
          [104., 100., 101., ..., 116., 112., 106.],
          [107., 100., 104., ..., 114., 114., 111.],
          ...,
          [138., 137., 138., ..., 121., 126., 127.],
          [134., 136., 142., ..., 140., 147., 147.],
          [141., 144., 143., ..., 144., 148., 151.]],

         [[162., 163., 162., ..., 163., 162., 161.],
          [163., 162., 161., ..., 170., 166., 163.],
          [166., 162., 164., ..., 169., 167., 168.],
          ...,
          [175., 173., 174., ..., 166., 175., 168.],
          [174., 176., 181., ..., 160., 175., 182.],
          [177., 178., 178., ..., 169., 176., 181.]],

         [[194., 195., 198., ..., 197., 194., 195.],
          [197., 197., 198., ..., 204., 198., 197.],
          [200., 198., 203., ..., 203., 200., 202.],
          ...,
          [192., 193., 196., ..., 185., 200., 195.],
          [193., 197., 205., ..., 175., 195., 204.],
          [192., 196., 197., ..., 183., 192., 196.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:85

analyse the exceptions in iter:93
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[138., 135., 135., ..., 143., 143., 143.],
          [126., 115., 109., ..., 145., 145., 145.],
          [ 87.,  78.,  75., ..., 147., 148., 147.],
          ...,
          [ 70.,  70.,  72., ...,  65.,  65.,  66.],
          [ 71.,  73.,  74., ...,  68.,  70.,  69.],
          [ 93.,  91.,  92., ...,  87.,  87.,  87.]],

         [[141., 137., 136., ..., 147., 147., 147.],
          [129., 121., 116., ..., 149., 149., 149.],
          [ 95.,  91.,  91., ..., 148., 148., 149.],
          ...,
          [ 70.,  69.,  70., ...,  65.,  65.,  65.],
          [ 72.,  71.,  71., ...,  69.,  72.,  70.],
          [ 81.,  79.,  79., ...,  83.,  83.,  84.]],

         [[148., 142., 141., ..., 146., 146., 146.],
          [136., 128., 123., ..., 148., 148., 148.],
          [106., 101.,  99., ..., 147., 147., 147.],
          ...,
          [ 15.,  17.,  19., ...,  11.,  13.,  13.],
          [ 37.,  37.,  38., ...,  35.,  37.,  33.],
          [ 65.,  63.,  63., ...,  64.,  64.,  61.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:86

analyse the exceptions in iter:94
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[227., 158., 172., ..., 252., 250., 248.],
          [237., 219., 219., ..., 249., 246., 230.],
          [233., 238., 212., ..., 212., 211., 189.],
          ...,
          [ 89.,  80.,  70., ..., 133., 134., 128.],
          [ 93.,  86.,  76., ..., 136., 140., 138.],
          [ 98.,  95.,  84., ..., 147., 153., 150.]],

         [[234., 165., 174., ..., 248., 248., 251.],
          [244., 226., 216., ..., 248., 250., 240.],
          [240., 242., 205., ..., 216., 219., 203.],
          ...,
          [ 93.,  83.,  73., ..., 123., 125., 122.],
          [ 97.,  89.,  78., ..., 125., 127., 128.],
          [101.,  97.,  86., ..., 133., 135., 136.]],

         [[241., 172., 172., ..., 252., 251., 253.],
          [248., 231., 215., ..., 251., 252., 247.],
          [242., 245., 203., ..., 218., 223., 214.],
          ...,
          [ 76.,  70.,  63., ...,  79.,  81.,  80.],
          [ 76.,  73.,  64., ...,  80.,  83.,  85.],
          [ 76.,  77.,  68., ...,  87.,  90.,  92.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:87

analyse the exceptions in iter:95
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[246., 252., 249., ..., 252., 250., 254.],
          [244., 253., 253., ..., 250., 249., 253.],
          [237., 251., 255., ..., 251., 251., 255.],
          ...,
          [ 50.,  46.,  93., ..., 246., 244., 251.],
          [ 61.,  58., 103., ..., 241., 245., 247.],
          [ 80.,  81., 120., ..., 244., 245., 243.]],

         [[254., 250., 252., ..., 250., 251., 254.],
          [254., 249., 248., ..., 251., 250., 254.],
          [255., 251., 249., ..., 252., 253., 255.],
          ...,
          [246., 239., 247., ..., 229., 215., 214.],
          [247., 239., 248., ..., 219., 222., 226.],
          [248., 243., 249., ..., 218., 226., 231.]],

         [[119., 170., 189., ...,  71.,  73.,  95.],
          [121., 173., 197., ...,  57.,  64.,  88.],
          [118., 169., 196., ...,  52.,  67.,  93.],
          ...,
          [117., 108., 100., ..., 146., 137., 137.],
          [122., 111., 113., ..., 140., 143., 146.],
          [124., 115., 124., ..., 143., 149., 150.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:88

analyse the exceptions in iter:96
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[106., 107., 108., ..., 125., 122., 100.],
          [107., 108., 108., ..., 134., 118.,  74.],
          [106., 107., 107., ..., 130., 106.,  72.],
          ...,
          [ 97.,  93.,  82., ...,  94.,  95.,  99.],
          [ 99.,  82.,  73., ...,  91.,  89.,  93.],
          [ 95.,  89.,  76., ...,  91.,  88.,  82.]],

         [[109., 110., 113., ..., 160., 153., 124.],
          [110., 111., 113., ..., 165., 144.,  92.],
          [108., 109., 112., ..., 154., 125.,  85.],
          ...,
          [ 86.,  82.,  74., ..., 101., 102., 106.],
          [ 87.,  74.,  66., ...,  98.,  97., 103.],
          [ 84.,  81.,  69., ...,  98.,  96.,  95.]],

         [[116., 117., 119., ..., 201., 191., 146.],
          [117., 118., 119., ..., 203., 171.,  92.],
          [115., 116., 118., ..., 181., 141.,  83.],
          ...,
          [ 72.,  65.,  61., ...,  59.,  59.,  62.],
          [ 72.,  61.,  55., ...,  54.,  55.,  58.],
          [ 71.,  68.,  56., ...,  54.,  53.,  52.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:89

analyse the exceptions in iter:97
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 33.,  29.,  32., ..., 157., 162., 160.],
          [ 25.,  24.,  23., ..., 174., 167., 165.],
          [ 55.,  47.,  53., ..., 129., 110., 123.],
          ...,
          [106., 103.,  85., ...,  78.,  54.,  44.],
          [ 97.,  92.,  88., ...,  96.,  81.,  71.],
          [106., 128., 142., ..., 100.,  81.,  71.]],

         [[ 44.,  44.,  45., ..., 197., 199., 194.],
          [ 40.,  40.,  36., ..., 209., 199., 198.],
          [ 56.,  56.,  61., ..., 162., 137., 153.],
          ...,
          [ 97.,  91., 100., ...,  91.,  64.,  56.],
          [ 91.,  97., 108., ..., 107.,  94.,  88.],
          [119., 141., 158., ..., 108.,  94.,  90.]],

         [[ 27.,  31.,  34., ..., 221., 216., 213.],
          [ 24.,  27.,  29., ..., 227., 217., 220.],
          [ 47.,  46.,  52., ..., 165., 133., 154.],
          ...,
          [ 60.,  58.,  53., ...,  52.,  36.,  31.],
          [ 59.,  57.,  61., ...,  59.,  47.,  41.],
          [ 91., 115., 137., ...,  63.,  47.,  40.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:90

analyse the exceptions in iter:98
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 90.,  94.,  87., ...,  46.,  53.,  57.],
          [ 96., 101.,  95., ...,  60.,  72.,  71.],
          [ 85., 113., 115., ...,  90.,  96.,  91.],
          ...,
          [102.,  61.,  69., ..., 157., 152., 169.],
          [101.,  69.,  64., ..., 131., 123., 115.],
          [ 91.,  78.,  87., ..., 135., 120., 102.]],

         [[ 77.,  81.,  81., ...,  44.,  45.,  46.],
          [ 92.,  84.,  80., ...,  51.,  60.,  56.],
          [ 87., 102., 101., ...,  84.,  87.,  79.],
          ...,
          [105.,  69.,  74., ..., 142., 137., 152.],
          [ 96.,  66.,  68., ..., 125., 117., 109.],
          [ 86.,  72.,  86., ..., 126., 116.,  96.]],

         [[ 59.,  64.,  65., ...,  35.,  38.,  38.],
          [ 68.,  63.,  66., ...,  44.,  50.,  45.],
          [ 66.,  75.,  76., ...,  57.,  60.,  55.],
          ...,
          [ 88.,  47.,  53., ...,  95.,  94.,  95.],
          [ 69.,  52.,  53., ..., 100.,  91.,  79.],
          [ 61.,  58.,  68., ...,  85.,  81.,  80.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:91

analyse the exceptions in iter:99
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 62.,  50.,  46., ..., 167., 183., 137.],
          [ 63.,  55.,  52., ..., 163., 171., 145.],
          [ 58.,  64.,  56., ..., 153., 150., 123.],
          ...,
          [172., 143., 130., ...,  94., 141., 139.],
          [183., 150.,  80., ...,  81., 135., 143.],
          [209., 182., 139., ...,  59., 130., 169.]],

         [[ 64.,  50.,  44., ..., 172., 184., 136.],
          [ 65.,  53.,  50., ..., 169., 174., 146.],
          [ 62.,  66.,  60., ..., 155., 154., 128.],
          ...,
          [135., 110.,  56., ...,  75., 108., 105.],
          [146., 118.,  64., ...,  72., 118., 125.],
          [174., 151., 109., ...,  54., 119., 156.]],

         [[ 44.,  26.,  19., ...,  69.,  76.,  72.],
          [ 37.,  26.,  27., ...,  61.,  75.,  77.],
          [ 36.,  37.,  37., ...,  62.,  64.,  57.],
          ...,
          [ 99.,  84.,  42., ...,  56.,  86.,  81.],
          [117.,  95.,  44., ...,  60.,  98., 110.],
          [144., 123.,  83., ...,  47., 111., 160.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:92

final statics:
total operators:28
tensorflow --> nums:92,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:92
mindspore --> 
torch --> 

generate models:92

analyse the exceptions in iter:100
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[213., 211., 211., ..., 151., 151., 149.],
          [214., 212., 212., ..., 152., 152., 151.],
          [216., 214., 213., ..., 153., 153., 151.],
          ...,
          [145., 136., 143., ..., 216., 196., 183.],
          [139., 129., 129., ..., 227., 223., 209.],
          [137., 143., 136., ..., 209., 217., 228.]],

         [[229., 227., 227., ..., 174., 174., 172.],
          [229., 227., 227., ..., 175., 175., 174.],
          [229., 227., 227., ..., 176., 176., 174.],
          ...,
          [159., 148., 152., ..., 217., 197., 183.],
          [153., 142., 139., ..., 228., 224., 209.],
          [152., 155., 145., ..., 209., 217., 228.]],

         [[242., 240., 240., ..., 206., 206., 204.],
          [241., 239., 239., ..., 207., 207., 205.],
          [239., 237., 237., ..., 206., 206., 204.],
          ...,
          [165., 154., 158., ..., 206., 191., 182.],
          [159., 148., 145., ..., 219., 219., 209.],
          [157., 161., 152., ..., 203., 213., 226.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:93

analyse the exceptions in iter:101
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[155., 153., 159., ...,   8.,   8.,  18.],
          [163., 159., 161., ...,   8.,   8.,  19.],
          [169., 166., 165., ...,   9.,   6.,  20.],
          ...,
          [144., 146., 145., ...,  33.,  25.,  33.],
          [139., 142., 143., ...,  32.,  60.,  69.],
          [135., 138., 143., ...,  64.,  88.,  81.]],

         [[156., 154., 157., ...,   8.,   7.,  16.],
          [166., 160., 161., ...,   8.,   8.,  14.],
          [172., 168., 166., ...,   9.,   6.,  13.],
          ...,
          [145., 147., 149., ...,  35.,  27.,  35.],
          [140., 143., 146., ...,  36.,  65.,  76.],
          [136., 139., 144., ...,  72.,  97.,  89.]],

         [[158., 148., 152., ...,   8.,   7.,  13.],
          [170., 158., 155., ...,   8.,   8.,  12.],
          [180., 170., 160., ...,   9.,   5.,   9.],
          ...,
          [148., 148., 148., ...,  30.,  22.,  31.],
          [143., 144., 146., ...,  30.,  60.,  71.],
          [138., 141., 150., ...,  67.,  93.,  85.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:94

analyse the exceptions in iter:102
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[150., 151., 152., ..., 147., 144., 141.],
          [158., 159., 161., ..., 157., 153., 150.],
          [164., 163., 167., ..., 163., 159., 155.],
          ...,
          [174., 178., 162., ..., 195., 180., 189.],
          [185., 173., 166., ..., 199., 186., 173.],
          [178., 161., 168., ..., 189., 191., 154.]],

         [[183., 185., 188., ..., 184., 181., 177.],
          [190., 192., 195., ..., 192., 188., 184.],
          [193., 195., 197., ..., 194., 191., 187.],
          ...,
          [146., 151., 138., ..., 168., 154., 166.],
          [159., 148., 142., ..., 172., 158., 149.],
          [155., 137., 142., ..., 162., 164., 130.]],

         [[202., 201., 201., ..., 201., 197., 195.],
          [206., 205., 204., ..., 206., 203., 199.],
          [203., 202., 203., ..., 206., 203., 200.],
          ...,
          [103., 108.,  93., ..., 120., 105., 121.],
          [115., 101.,  91., ..., 126., 111., 108.],
          [111.,  90.,  92., ..., 119., 120.,  94.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:95

analyse the exceptions in iter:103
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 3.,  3.,  2., ...,  1.,  1.,  1.],
          [ 3.,  1.,  1., ...,  1.,  1.,  1.],
          [ 1.,  1.,  1., ...,  1.,  1.,  1.],
          ...,
          [ 1.,  1.,  1., ..., 22.,  1.,  0.],
          [ 1.,  1.,  1., ...,  5.,  2.,  1.],
          [ 1.,  1.,  1., ...,  2.,  2.,  1.]],

         [[ 1.,  0.,  1., ...,  1.,  1.,  1.],
          [ 0.,  3.,  4., ...,  1.,  1.,  1.],
          [ 2.,  5.,  1., ...,  1.,  1.,  1.],
          ...,
          [ 1.,  1.,  1., ..., 13.,  1.,  2.],
          [ 1.,  1.,  1., ...,  3.,  2.,  2.],
          [ 1.,  1.,  1., ...,  1.,  2.,  1.]],

         [[ 1.,  2.,  2., ...,  1.,  1.,  1.],
          [ 4.,  4.,  5., ...,  1.,  1.,  1.],
          [ 5.,  3.,  0., ...,  1.,  1.,  1.],
          ...,
          [ 1.,  1.,  1., ..., 13.,  1.,  3.],
          [ 1.,  1.,  1., ...,  4.,  2.,  1.],
          [ 1.,  1.,  1., ...,  3.,  2.,  0.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:96

analyse the exceptions in iter:104
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[  0.,   0.,   0., ...,   5.,   0.,   1.],
          [  0.,   0.,   0., ...,   3.,   0.,   1.],
          [  1.,   1.,   0., ...,   1.,   0.,   1.],
          ...,
          [  0.,   0.,   0., ...,  44.,  66.,  25.],
          [  0.,   0.,   0., ...,  46.,  38.,   5.],
          [  0.,   0.,   0., ...,  39.,  28.,   3.]],

         [[  0.,   0.,   0., ...,   2.,   4.,   2.],
          [  0.,   0.,   0., ...,   1.,   2.,   2.],
          [  1.,   1.,   0., ...,   0.,   1.,   1.],
          ...,
          [  0.,   0.,   0., ..., 135., 119.,  46.],
          [  0.,   0.,   0., ..., 127.,  76.,   8.],
          [  0.,   0.,   0., ..., 113.,  60.,   3.]],

         [[  0.,   0.,   0., ...,   0.,   1.,   0.],
          [  0.,   0.,   0., ...,   0.,   2.,   1.],
          [  1.,   1.,   0., ...,   1.,   4.,   3.],
          ...,
          [  0.,   0.,   0., ...,  41.,  64.,  33.],
          [  0.,   0.,   0., ...,  34.,  32.,   7.],
          [  0.,   0.,   0., ...,  25.,  22.,   1.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:97

analyse the exceptions in iter:105
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[254., 254., 254., ..., 254., 254., 254.],
          [254., 254., 254., ..., 254., 254., 254.],
          [254., 254., 254., ..., 254., 254., 254.],
          ...,
          [254., 253., 253., ..., 254., 254., 254.],
          [254., 254., 254., ..., 254., 254., 254.],
          [254., 254., 254., ..., 254., 254., 254.]],

         [[254., 254., 254., ..., 254., 254., 254.],
          [254., 254., 254., ..., 254., 254., 254.],
          [254., 254., 254., ..., 254., 254., 254.],
          ...,
          [254., 253., 253., ..., 254., 254., 254.],
          [254., 254., 254., ..., 254., 254., 254.],
          [254., 254., 254., ..., 254., 254., 254.]],

         [[254., 254., 254., ..., 254., 254., 254.],
          [254., 254., 254., ..., 254., 254., 254.],
          [254., 254., 254., ..., 254., 254., 254.],
          ...,
          [254., 253., 253., ..., 254., 254., 254.],
          [254., 254., 254., ..., 254., 254., 254.],
          [254., 254., 254., ..., 254., 254., 254.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:98

analyse the exceptions in iter:106
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[107., 106., 106., ..., 112., 112., 112.],
          [107., 105., 105., ..., 113., 113., 113.],
          [109., 106., 106., ..., 113., 113., 114.],
          ...,
          [111., 113., 115., ...,  94.,  93.,  93.],
          [108., 109., 111., ..., 101., 101., 102.],
          [108., 108., 108., ..., 110., 109., 107.]],

         [[141., 140., 140., ..., 144., 144., 144.],
          [141., 139., 139., ..., 145., 145., 145.],
          [143., 140., 140., ..., 146., 146., 147.],
          ...,
          [114., 116., 118., ..., 103., 102., 102.],
          [111., 112., 114., ..., 106., 106., 107.],
          [110., 110., 110., ..., 113., 111., 110.]],

         [[179., 178., 178., ..., 184., 183., 183.],
          [179., 176., 177., ..., 183., 183., 182.],
          [182., 178., 178., ..., 182., 182., 183.],
          ...,
          [122., 124., 125., ..., 112., 111., 111.],
          [120., 121., 123., ..., 115., 115., 115.],
          [122., 122., 122., ..., 119., 118., 117.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:99

analyse the exceptions in iter:107
tensorflow exception:
{'id': 0, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 97., 104., 107., ..., 141., 141., 139.],
          [ 87.,  92.,  98., ..., 126., 125., 122.],
          [119., 120., 125., ..., 137., 133., 123.],
          ...,
          [ 82.,  22.,  35., ..., 122., 123., 120.],
          [ 79.,  21.,  62., ..., 134., 131., 129.],
          [ 61.,  15.,  53., ..., 133., 131., 128.]],

         [[ 51.,  58.,  61., ...,  95.,  95.,  93.],
          [ 42.,  46.,  53., ...,  79.,  79.,  75.],
          [ 75.,  76.,  80., ...,  91.,  86.,  77.],
          ...,
          [ 53.,  11.,  25., ...,  78.,  78.,  76.],
          [ 51.,  10.,  49., ...,  89.,  87.,  85.],
          [ 36.,   6.,  40., ...,  87.,  86.,  84.]],

         [[ 31.,  38.,  40., ...,  71.,  71.,  69.],
          [ 24.,  29.,  35., ...,  59.,  58.,  54.],
          [ 51.,  52.,  56., ...,  72.,  67.,  58.],
          ...,
          [ 33.,   4.,  25., ...,  54.,  53.,  50.],
          [ 33.,   4.,  51., ...,  65.,  63.,  61.],
          [ 20.,   1.,  40., ...,  66.,  65.,  63.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:100

final statics:
total operators:28
tensorflow --> nums:100,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:100
mindspore --> 
torch --> 

generate models:100

analyse the exceptions in iter:0
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:2

analyse the exceptions in iter:2
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [113., 111., 105., ...,  72.,  72.,  72.],
          [111., 104.,  99., ...,  68.,  70.,  78.],
          [106.,  99.,  95., ...,  78.,  79.,  80.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [120., 118., 112., ...,  81.,  80.,  80.],
          [118., 111., 106., ...,  75.,  76.,  84.],
          [113., 106., 102., ...,  85.,  85.,  86.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [112., 111., 106., ...,  80.,  79.,  79.],
          [110., 104.,  98., ...,  73.,  75.,  82.],
          [105.,  98.,  94., ...,  83.,  83.,  84.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:3

analyse the exceptions in iter:3
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  37.,  38., ...,  76.,  81.,  85.],
          [ 33.,  34.,  32., ...,  95.,  96.,  85.],
          [ 39.,  40.,  57., ...,  93., 107.,  95.],
          ...,
          [ 83.,  87.,  84., ...,  99.,  90.,  81.],
          [ 88.,  90.,  93., ...,  80.,  76.,  82.],
          [ 97.,  94.,  93., ...,  54.,  63.,  72.]],

         [[ 25.,  34.,  35., ...,  67.,  72.,  76.],
          [ 28.,  30.,  27., ...,  82.,  82.,  72.],
          [ 32.,  33.,  50., ...,  76.,  89.,  77.],
          ...,
          [ 73.,  77.,  74., ...,  93.,  84.,  75.],
          [ 72.,  74.,  77., ...,  74.,  70.,  76.],
          [ 78.,  75.,  75., ...,  47.,  56.,  65.]],

         [[ 10.,  19.,  20., ...,  39.,  43.,  47.],
          [ 13.,  14.,  12., ...,  55.,  56.,  45.],
          [ 15.,  17.,  33., ...,  52.,  66.,  54.],
          ...,
          [ 52.,  56.,  52., ...,  70.,  61.,  52.],
          [ 51.,  52.,  56., ...,  53.,  49.,  55.],
          [ 56.,  53.,  53., ...,  28.,  37.,  46.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:4

analyse the exceptions in iter:4
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[170., 168., 177., ..., 162., 158., 157.],
          [168., 172., 171., ..., 159., 156., 154.],
          [154., 149., 129., ..., 161., 157., 154.],
          ...,
          [ 74.,  76.,  78., ...,  71.,  68.,  61.],
          [ 68.,  69.,  72., ...,  76.,  71.,  71.],
          [ 67.,  68.,  69., ...,  75.,  71.,  73.]],

         [[180., 178., 185., ..., 179., 178., 177.],
          [181., 185., 183., ..., 177., 176., 174.],
          [170., 165., 144., ..., 178., 177., 174.],
          ...,
          [ 84.,  85.,  85., ...,  75.,  72.,  65.],
          [ 76.,  77.,  79., ...,  80.,  75.,  75.],
          [ 75.,  76.,  75., ...,  79.,  75.,  77.]],

         [[198., 196., 203., ..., 215., 214., 212.],
          [198., 201., 200., ..., 212., 211., 209.],
          [186., 181., 162., ..., 214., 212., 209.],
          ...,
          [ 80.,  81.,  82., ...,  78.,  75.,  68.],
          [ 77.,  78.,  78., ...,  83.,  78.,  78.],
          [ 78.,  79.,  76., ...,  82.,  78.,  80.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:5

analyse the exceptions in iter:5
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[159., 150., 153., ...,  91.,  74.,  76.],
          [142., 146., 155., ..., 127., 122.,  86.],
          [109.,  99., 105., ..., 137., 163.,  93.],
          ...,
          [244., 240., 241., ..., 156., 179., 200.],
          [246., 243., 243., ..., 162., 178., 192.],
          [246., 243., 244., ..., 166., 173., 182.]],

         [[102.,  91.,  95., ...,  71.,  63.,  58.],
          [ 75.,  72.,  76., ..., 105., 111.,  69.],
          [ 67.,  58.,  59., ..., 112., 132.,  72.],
          ...,
          [129., 123., 122., ...,  42.,  59.,  73.],
          [133., 128., 127., ...,  44.,  56.,  65.],
          [139., 133., 132., ...,  47.,  51.,  57.]],

         [[101.,  95.,  97., ...,  56.,  55.,  55.],
          [ 68.,  66.,  65., ...,  71.,  93.,  61.],
          [ 75.,  60.,  52., ...,  80., 105.,  71.],
          ...,
          [ 70.,  65.,  65., ...,  15.,  26.,  36.],
          [ 74.,  72.,  70., ...,  14.,  22.,  27.],
          [ 82.,  78.,  77., ...,  14.,  17.,  19.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:6

analyse the exceptions in iter:6
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[164., 105., 118., ..., 109., 108.,  91.],
          [167., 116.,  72., ..., 105., 105.,  89.],
          [140., 142., 119., ..., 104.,  84.,  78.],
          ...,
          [139., 142., 135., ...,  89.,  97., 126.],
          [163., 153., 146., ...,  85.,  98., 127.],
          [183., 176., 154., ...,  94.,  91., 122.]],

         [[206., 140., 148., ..., 147., 147., 129.],
          [213., 160., 109., ..., 142., 142., 127.],
          [191., 193., 163., ..., 139., 120., 115.],
          ...,
          [148., 155., 156., ..., 134., 148., 176.],
          [157., 164., 164., ..., 130., 148., 178.],
          [153., 182., 154., ..., 134., 133., 170.]],

         [[ 84.,  61., 101., ...,  73.,  69.,  57.],
          [ 84.,  49.,  43., ...,  79.,  72.,  57.],
          [ 65.,  66.,  79., ...,  84.,  58.,  49.],
          ...,
          [ 81.,  74.,  72., ...,  28.,  24.,  49.],
          [ 85.,  82.,  90., ...,  19.,  27.,  48.],
          [102., 116., 100., ...,  29.,  26.,  44.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:7

analyse the exceptions in iter:7
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  30.,  33., ...,  43.,  52.,  46.],
          [ 27.,  27.,  21., ..., 112., 117., 115.],
          [ 34.,  33.,  24., ..., 175., 177., 176.],
          ...,
          [142., 142., 150., ..., 134., 128., 134.],
          [140., 145., 150., ..., 131., 130., 122.],
          [134., 136., 136., ..., 106., 104., 101.]],

         [[ 35.,  34.,  44., ...,  56.,  64.,  58.],
          [ 30.,  28.,  31., ..., 136., 140., 138.],
          [ 36.,  33.,  30., ..., 208., 209., 208.],
          ...,
          [176., 176., 184., ..., 175., 168., 175.],
          [176., 180., 186., ..., 170., 170., 162.],
          [171., 171., 171., ..., 144., 142., 140.]],

         [[ 39.,  44.,  47., ...,  45.,  53.,  47.],
          [ 38.,  41.,  39., ...,  97., 101., 100.],
          [ 42.,  43.,  40., ..., 143., 144., 143.],
          ...,
          [118., 118., 127., ..., 119., 112., 119.],
          [124., 129., 134., ..., 119., 119., 111.],
          [123., 124., 124., ..., 100.,  99.,  96.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:8

analyse the exceptions in iter:8
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[134., 131., 128., ..., 127., 127., 128.],
          [133., 129., 128., ..., 127., 127., 128.],
          [128., 127., 128., ..., 126., 126., 126.],
          ...,
          [174., 171., 155., ...,  27.,  29.,  28.],
          [194., 189., 159., ...,  30.,  30.,  30.],
          [193., 181., 168., ...,  31.,  32.,  32.]],

         [[186., 184., 182., ..., 181., 181., 182.],
          [189., 186., 186., ..., 183., 183., 184.],
          [185., 182., 182., ..., 181., 181., 180.],
          ...,
          [208., 206., 189., ...,  94.,  96.,  94.],
          [221., 215., 196., ...,  95.,  96.,  95.],
          [217., 208., 201., ...,  94.,  94.,  94.]],

         [[223., 220., 218., ..., 222., 222., 223.],
          [228., 224., 224., ..., 224., 224., 225.],
          [226., 223., 223., ..., 222., 222., 221.],
          ...,
          [235., 229., 216., ..., 136., 137., 136.],
          [244., 239., 225., ..., 138., 139., 140.],
          [237., 230., 227., ..., 136., 137., 138.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:9

analyse the exceptions in iter:9
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[125., 110., 102., ..., 202., 200., 202.],
          [142., 146., 176., ..., 195., 198., 204.],
          [180., 143., 156., ..., 122., 139., 158.],
          ...,
          [104., 101., 101., ..., 126., 126., 125.],
          [104., 105., 109., ..., 138., 137., 137.],
          [105., 108., 115., ..., 143., 143., 144.]],

         [[125., 101.,  90., ..., 207., 205., 208.],
          [146., 144., 172., ..., 201., 205., 211.],
          [185., 146., 157., ..., 111., 128., 147.],
          ...,
          [ 82.,  80.,  81., ..., 103., 103., 101.],
          [ 81.,  84.,  88., ..., 113., 113., 112.],
          [ 83.,  87.,  94., ..., 117., 116., 116.]],

         [[116.,  91.,  83., ..., 214., 212., 214.],
          [142., 139., 170., ..., 205., 209., 215.],
          [183., 146., 157., ..., 113., 131., 150.],
          ...,
          [ 41.,  39.,  38., ...,  67.,  69.,  68.],
          [ 40.,  41.,  43., ...,  78.,  80.,  81.],
          [ 42.,  45.,  50., ...,  82.,  84.,  86.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:10

final statics:
total operators:28
tensorflow --> nums:10,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:10
mindspore --> 
torch --> 

generate models:10

analyse the exceptions in iter:11
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[142., 172., 176., ..., 216., 198., 205.],
          [191., 196., 174., ..., 229., 222., 217.],
          [220., 217., 192., ..., 224., 225., 218.],
          ...,
          [197., 196., 201., ..., 200., 199., 205.],
          [196., 191., 193., ..., 198., 199., 201.],
          [186., 182., 174., ..., 158., 158., 163.]],

         [[149., 172., 168., ..., 212., 194., 202.],
          [190., 192., 166., ..., 222., 215., 210.],
          [212., 209., 183., ..., 214., 214., 208.],
          ...,
          [152., 152., 156., ..., 165., 165., 164.],
          [157., 152., 154., ..., 164., 165., 161.],
          [150., 147., 139., ..., 124., 125., 125.]],

         [[152., 167., 154., ..., 211., 193., 200.],
          [192., 190., 159., ..., 220., 213., 207.],
          [212., 208., 182., ..., 209., 210., 203.],
          ...,
          [136., 135., 140., ..., 146., 146., 150.],
          [139., 135., 136., ..., 144., 145., 146.],
          [133., 130., 121., ..., 105., 106., 111.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:11

analyse the exceptions in iter:12
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[164., 162., 162., ..., 157., 153., 153.],
          [168., 166., 166., ..., 164., 160., 158.],
          [172., 170., 171., ..., 168., 165., 163.],
          ...,
          [123., 117., 112., ..., 117.,  95., 120.],
          [120., 116., 112., ..., 126., 120., 120.],
          [121., 120., 116., ..., 124., 124., 120.]],

         [[215., 212., 212., ..., 210., 208., 203.],
          [218., 215., 215., ..., 212., 209., 205.],
          [220., 217., 218., ..., 212., 208., 207.],
          ...,
          [160., 154., 149., ..., 136., 115., 149.],
          [156., 151., 147., ..., 149., 144., 152.],
          [154., 152., 148., ..., 152., 154., 154.]],

         [[244., 240., 240., ..., 237., 235., 234.],
          [245., 242., 242., ..., 238., 236., 235.],
          [246., 243., 244., ..., 238., 235., 236.],
          ...,
          [105., 102.,  99., ..., 100.,  79., 100.],
          [100.,  99.,  96., ..., 110., 103., 101.],
          [ 96.,  99.,  97., ..., 108., 107., 100.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:12

analyse the exceptions in iter:14
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[100.,  98.,  99., ..., 165., 163., 165.],
          [101., 100., 100., ..., 164., 163., 159.],
          [105., 104., 104., ..., 156., 136., 114.],
          ...,
          [166., 166., 168., ..., 137., 137., 147.],
          [161., 162., 167., ..., 131., 138., 137.],
          [164., 162., 164., ..., 153., 157., 156.]],

         [[146., 144., 144., ..., 165., 163., 165.],
          [145., 143., 143., ..., 161., 162., 161.],
          [147., 145., 145., ..., 150., 133., 117.],
          ...,
          [156., 156., 157., ..., 127., 126., 136.],
          [152., 153., 158., ..., 125., 133., 132.],
          [158., 156., 158., ..., 146., 151., 150.]],

         [[192., 189., 189., ..., 165., 163., 165.],
          [188., 186., 186., ..., 159., 159., 157.],
          [189., 186., 187., ..., 147., 129., 111.],
          ...,
          [150., 151., 152., ..., 112., 114., 127.],
          [149., 150., 155., ..., 117., 124., 120.],
          [155., 153., 155., ..., 139., 141., 137.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:13

analyse the exceptions in iter:15
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[100., 100., 101., ...,  95.,  94.,  95.],
          [103., 103., 104., ...,  97.,  97.,  97.],
          [107., 106., 106., ..., 100., 100., 101.],
          ...,
          [165., 159., 167., ...,  75.,  75.,  72.],
          [158., 173., 182., ...,  76.,  75.,  77.],
          [161., 162., 160., ...,  98., 129., 162.]],

         [[168., 168., 167., ..., 165., 165., 167.],
          [170., 168., 168., ..., 167., 166., 168.],
          [174., 172., 173., ..., 170., 170., 172.],
          ...,
          [178., 170., 177., ..., 117., 120., 120.],
          [174., 186., 193., ..., 119., 119., 121.],
          [176., 176., 171., ..., 137., 160., 185.]],

         [[231., 229., 230., ..., 231., 228., 229.],
          [230., 228., 226., ..., 229., 227., 229.],
          [233., 230., 229., ..., 230., 230., 232.],
          ...,
          [177., 167., 170., ..., 154., 157., 158.],
          [172., 182., 188., ..., 154., 153., 154.],
          [174., 172., 169., ..., 167., 183., 202.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:14

analyse the exceptions in iter:16
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[235., 235., 237., ..., 233., 227., 223.],
          [231., 232., 234., ..., 231., 225., 221.],
          [231., 233., 237., ..., 232., 225., 221.],
          ...,
          [125., 126., 143., ...,  66.,  65.,  68.],
          [127., 141., 149., ...,  63.,  67.,  62.],
          [137., 142., 149., ...,  62.,  61.,  51.]],

         [[236., 236., 238., ..., 234., 230., 228.],
          [232., 233., 235., ..., 232., 228., 225.],
          [232., 234., 238., ..., 233., 228., 226.],
          ...,
          [124., 125., 142., ...,  89.,  86.,  83.],
          [125., 140., 148., ...,  89.,  88.,  79.],
          [135., 140., 147., ...,  90.,  84.,  68.]],

         [[238., 238., 240., ..., 236., 233., 232.],
          [234., 235., 237., ..., 234., 232., 233.],
          [234., 236., 240., ..., 235., 232., 233.],
          ...,
          [122., 123., 140., ...,  23.,  23.,  37.],
          [125., 139., 148., ...,  24.,  26.,  29.],
          [136., 141., 148., ...,  27.,  23.,  14.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:15

analyse the exceptions in iter:17
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[110., 142., 151., ...,  39.,  40.,  38.],
          [109., 141., 152., ...,  36.,  40.,  36.],
          [105., 142., 151., ...,  39.,  44.,  39.],
          ...,
          [ 62.,  39.,  60., ...,  42.,  46.,  47.],
          [ 62.,  52.,  58., ...,  43.,  47.,  49.],
          [ 55.,  60.,  56., ...,  45.,  47.,  51.]],

         [[104., 135., 146., ...,  39.,  40.,  38.],
          [103., 133., 147., ...,  36.,  40.,  36.],
          [ 98., 133., 145., ...,  39.,  44.,  39.],
          ...,
          [ 59.,  38.,  64., ...,  44.,  44.,  44.],
          [ 57.,  51.,  61., ...,  46.,  45.,  46.],
          [ 51.,  60.,  60., ...,  48.,  46.,  48.]],

         [[ 97., 118., 120., ...,  39.,  40.,  38.],
          [ 95., 115., 119., ...,  37.,  40.,  36.],
          [ 90., 114., 117., ...,  41.,  45.,  40.],
          ...,
          [ 60.,  49.,  81., ...,  56.,  55.,  55.],
          [ 56.,  61.,  78., ...,  58.,  58.,  60.],
          [ 50.,  71.,  78., ...,  60.,  60.,  62.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:16

analyse the exceptions in iter:18
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[197., 198., 201., ..., 217., 217., 217.],
          [193., 195., 198., ..., 216., 215., 214.],
          [192., 194., 197., ..., 217., 216., 215.],
          ...,
          [156., 156., 156., ...,  98., 117., 128.],
          [158., 159., 154., ..., 131., 117.,  91.],
          [152., 151., 145., ...,  91.,  90.,  79.]],

         [[187., 188., 191., ..., 201., 201., 201.],
          [183., 185., 188., ..., 200., 200., 198.],
          [182., 184., 187., ..., 201., 200., 199.],
          ...,
          [146., 146., 146., ...,  79.,  96., 105.],
          [148., 149., 144., ..., 110.,  99.,  75.],
          [142., 141., 135., ...,  72.,  73.,  65.]],

         [[188., 189., 192., ..., 204., 204., 204.],
          [184., 186., 189., ..., 203., 202., 201.],
          [183., 185., 188., ..., 204., 203., 202.],
          ...,
          [147., 147., 147., ...,  65.,  82.,  89.],
          [149., 150., 145., ...,  96.,  86.,  64.],
          [143., 142., 136., ...,  61.,  63.,  57.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:17

analyse the exceptions in iter:21
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[252., 249., 250., ..., 251., 251., 251.],
          [255., 252., 253., ..., 255., 255., 254.],
          [253., 250., 250., ..., 254., 254., 252.],
          ...,
          [254., 252., 253., ..., 252., 253., 252.],
          [250., 252., 255., ..., 254., 255., 254.],
          [236., 249., 250., ..., 250., 250., 251.]],

         [[  8.,  15.,   8., ...,   1.,   0.,   1.],
          [  7.,  15.,  13., ...,   1.,   0.,   4.],
          [  6.,  16.,  24., ...,   1.,   0.,   9.],
          ...,
          [ 66.,  62.,  64., ...,  70.,  69.,  70.],
          [ 49.,  53.,  59., ...,  70.,  68.,  59.],
          [ 37.,  48.,  42., ...,  78.,  74.,  58.]],

         [[ 42.,  42.,  39., ...,  11.,  15.,  30.],
          [ 43.,  44.,  42., ...,  11.,  18.,  33.],
          [ 42.,  42.,  43., ...,  10.,  20.,  37.],
          ...,
          [ 94.,  92.,  93., ..., 101., 103., 104.],
          [ 81.,  82.,  86., ..., 103., 100.,  89.],
          [ 68.,  76.,  73., ..., 113., 109.,  88.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:18

analyse the exceptions in iter:23
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[126., 102., 117., ...,  96., 113., 107.],
          [135., 113., 121., ..., 115., 114., 115.],
          [126., 124., 128., ..., 134., 115., 114.],
          ...,
          [141., 155., 134., ..., 149., 147., 122.],
          [153., 164., 146., ..., 163., 189., 184.],
          [125., 129., 124., ..., 133., 180., 168.]],

         [[100.,  76.,  93., ...,  74.,  90.,  84.],
          [109.,  86.,  94., ...,  89.,  89.,  90.],
          [102.,  97., 101., ..., 109.,  90.,  90.],
          ...,
          [111., 123., 102., ..., 140., 133., 106.],
          [122., 132., 119., ..., 156., 178., 174.],
          [100., 106., 102., ..., 127., 173., 162.]],

         [[ 71.,  49.,  60., ...,  42.,  58.,  52.],
          [ 73.,  52.,  56., ...,  58.,  55.,  53.],
          [ 61.,  59.,  60., ...,  77.,  55.,  50.],
          ...,
          [ 85.,  87.,  65., ..., 118., 116.,  94.],
          [ 83.,  89.,  81., ..., 147., 174., 173.],
          [ 56.,  64.,  68., ..., 124., 174., 164.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:19

analyse the exceptions in iter:24
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 73.,  71.,  77., ..., 183., 180., 185.],
          [ 73.,  75.,  78., ..., 181., 172., 174.],
          [ 77.,  94.,  99., ..., 175., 191., 185.],
          ...,
          [ 84.,  86., 118., ...,  79., 159., 117.],
          [ 76.,  81., 103., ...,  56.,  69., 104.],
          [102.,  91.,  95., ..., 100.,  72.,  48.]],

         [[ 77.,  68.,  69., ..., 210., 214., 225.],
          [ 74.,  68.,  64., ..., 229., 220., 218.],
          [ 72.,  82.,  81., ..., 213., 230., 226.],
          ...,
          [106., 105., 133., ...,  95., 177., 133.],
          [ 96.,  98., 116., ...,  80.,  90., 120.],
          [120., 109., 110., ..., 134.,  97.,  59.]],

         [[ 58.,  50.,  44., ..., 149., 143., 144.],
          [ 52.,  55.,  50., ..., 139., 129., 127.],
          [ 64.,  79.,  73., ..., 139., 152., 142.],
          ...,
          [ 56.,  58.,  84., ...,  78., 137.,  94.],
          [ 60.,  56.,  73., ...,  36.,  40.,  69.],
          [ 92.,  62.,  62., ...,  55.,  38.,  29.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:20

analyse the exceptions in iter:25
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[162., 164., 169., ..., 184., 190., 202.],
          [153., 158., 164., ..., 178., 189., 201.],
          [157., 161., 164., ..., 178., 190., 202.],
          ...,
          [214., 213., 213., ..., 240., 241., 242.],
          [218., 209., 208., ..., 232., 236., 239.],
          [216., 207., 201., ..., 231., 233., 235.]],

         [[164., 167., 171., ..., 176., 186., 198.],
          [151., 156., 163., ..., 171., 184., 198.],
          [151., 156., 160., ..., 170., 186., 199.],
          ...,
          [205., 193., 185., ..., 207., 206., 209.],
          [209., 188., 180., ..., 195., 196., 200.],
          [204., 189., 174., ..., 192., 194., 198.]],

         [[130., 128., 131., ..., 137., 146., 161.],
          [119., 120., 124., ..., 131., 143., 158.],
          [120., 121., 122., ..., 131., 142., 156.],
          ...,
          [193., 181., 174., ..., 193., 194., 196.],
          [198., 176., 169., ..., 182., 185., 187.],
          [197., 178., 156., ..., 178., 181., 183.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:21

analyse the exceptions in iter:26
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[131., 124., 116., ..., 184., 185., 184.],
          [127., 124., 116., ..., 177., 180., 186.],
          [123., 121., 113., ..., 179., 187., 194.],
          ...,
          [ 99.,  83.,  54., ..., 138., 155., 165.],
          [ 97.,  77.,  43., ..., 140., 154., 163.],
          [ 96.,  71.,  35., ..., 140., 156., 164.]],

         [[ 81.,  76.,  70., ..., 152., 153., 152.],
          [ 76.,  75.,  69., ..., 142., 146., 152.],
          [ 73.,  73.,  67., ..., 142., 150., 158.],
          ...,
          [ 50.,  42.,  27., ..., 103., 113., 118.],
          [ 50.,  39.,  21., ..., 105., 112., 116.],
          [ 49.,  36.,  16., ..., 104., 114., 118.]],

         [[ 32.,  27.,  20., ..., 114., 117., 120.],
          [ 27.,  26.,  19., ..., 106., 110., 116.],
          [ 23.,  24.,  17., ..., 106., 114., 118.],
          ...,
          [ 10.,   5.,   5., ...,  68.,  72.,  74.],
          [ 10.,   5.,   4., ...,  69.,  71.,  71.],
          [ 10.,   4.,   3., ...,  69.,  73.,  73.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:22

analyse the exceptions in iter:28
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[128., 121., 138., ..., 130., 101., 122.],
          [133., 125., 136., ..., 131., 106., 127.],
          [141., 126., 141., ..., 132., 114., 126.],
          ...,
          [191., 186., 175., ..., 190., 182., 195.],
          [210., 207., 198., ..., 194., 184., 192.],
          [209., 206., 207., ..., 201., 193., 196.]],

         [[141., 134., 151., ..., 150., 121., 141.],
          [146., 138., 149., ..., 151., 126., 147.],
          [155., 139., 154., ..., 152., 134., 146.],
          ...,
          [178., 174., 160., ..., 179., 175., 188.],
          [195., 197., 179., ..., 179., 178., 186.],
          [194., 195., 189., ..., 187., 187., 190.]],

         [[123., 116., 133., ..., 138., 109., 129.],
          [128., 120., 131., ..., 139., 114., 135.],
          [136., 121., 136., ..., 140., 122., 134.],
          ...,
          [126., 124., 112., ..., 138., 137., 145.],
          [143., 144., 129., ..., 138., 133., 142.],
          [142., 143., 138., ..., 145., 142., 146.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:23

analyse the exceptions in iter:33
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[  7.,   7.,   5., ...,  82.,  80.,  69.],
          [  6.,   6.,   5., ...,  85.,  86.,  81.],
          [  1.,   7.,   8., ...,  98.,  96.,  86.],
          ...,
          [150., 135., 129., ...,  72.,  45.,  26.],
          [156., 153., 138., ...,  57.,  23.,  38.],
          [183., 191., 182., ...,  83.,  67., 114.]],

         [[  5.,   5.,   4., ...,  84.,  85.,  73.],
          [  4.,   4.,   3., ...,  86.,  88.,  80.],
          [  1.,   7.,   8., ...,  96.,  96.,  84.],
          ...,
          [153., 136., 129., ...,  72.,  51.,  32.],
          [156., 151., 136., ...,  58.,  32.,  45.],
          [193., 199., 189., ...,  83.,  74., 120.]],

         [[  8.,   8.,   6., ...,  78.,  81.,  68.],
          [  8.,   9.,   8., ...,  77.,  81.,  72.],
          [  6.,  12.,  13., ...,  83.,  85.,  73.],
          ...,
          [139., 121., 113., ...,  69.,  63.,  51.],
          [139., 130., 110., ...,  56.,  48.,  64.],
          [183., 185., 171., ...,  76.,  81., 119.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:24

analyse the exceptions in iter:34
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[172., 171., 168., ..., 158., 156., 147.],
          [169., 168., 168., ..., 158., 152., 145.],
          [174., 169., 170., ..., 157., 149., 146.],
          ...,
          [150., 157., 162., ..., 158., 147., 139.],
          [143., 149., 155., ..., 148., 143., 140.],
          [148., 146., 149., ..., 137., 134., 136.]],

         [[187., 186., 182., ..., 170., 169., 163.],
          [185., 183., 184., ..., 175., 170., 165.],
          [190., 185., 186., ..., 177., 170., 168.],
          ...,
          [163., 168., 170., ..., 168., 160., 154.],
          [154., 158., 161., ..., 157., 153., 153.],
          [158., 155., 157., ..., 143., 139., 143.]],

         [[130., 130., 126., ..., 113., 113., 107.],
          [123., 122., 123., ..., 114., 110., 107.],
          [126., 122., 123., ..., 115., 108., 109.],
          ...,
          [100., 103., 104., ..., 108.,  99.,  90.],
          [ 89.,  90.,  96., ...,  99.,  92.,  88.],
          [ 93.,  89.,  92., ...,  86.,  80.,  82.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:25

analyse the exceptions in iter:35
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[251., 247., 247., ..., 229., 244., 251.],
          [249., 246., 246., ..., 233., 249., 252.],
          [167., 167., 167., ..., 217., 217., 220.],
          ...,
          [133., 123., 124., ..., 118., 114., 115.],
          [123., 124., 126., ..., 112., 108., 104.],
          [125., 129., 126., ..., 118., 112., 105.]],

         [[249., 245., 245., ..., 190., 231., 241.],
          [248., 244., 245., ..., 188., 237., 242.],
          [165., 164., 164., ..., 182., 211., 213.],
          ...,
          [130., 127., 130., ..., 125., 122., 125.],
          [125., 127., 129., ..., 122., 119., 119.],
          [128., 132., 130., ..., 128., 122., 121.]],

         [[250., 247., 247., ..., 146., 224., 241.],
          [248., 244., 244., ..., 141., 233., 241.],
          [148., 148., 149., ..., 139., 203., 208.],
          ...,
          [ 39.,  36.,  35., ...,  30.,  26.,  27.],
          [ 36.,  36.,  32., ...,  26.,  27.,  22.],
          [ 42.,  43.,  36., ...,  35.,  33.,  26.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:26

analyse the exceptions in iter:36
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[169., 131., 193., ..., 172., 169., 166.],
          [165., 127., 189., ..., 172., 169., 166.],
          [163., 126., 186., ..., 173., 170., 168.],
          ...,
          [147., 139., 145., ..., 220., 218., 219.],
          [146., 143., 152., ..., 221., 220., 219.],
          [148., 143., 146., ..., 223., 221., 220.]],

         [[122., 108., 196., ..., 187., 183., 181.],
          [119., 104., 192., ..., 186., 183., 180.],
          [117., 103., 189., ..., 187., 184., 182.],
          ...,
          [ 93.,  85.,  91., ..., 220., 218., 219.],
          [ 87.,  83.,  94., ..., 221., 220., 219.],
          [ 87.,  82.,  85., ..., 223., 221., 220.]],

         [[ 65.,  75., 192., ..., 187., 183., 181.],
          [ 62.,  72., 187., ..., 186., 183., 180.],
          [ 60.,  71., 185., ..., 187., 184., 182.],
          ...,
          [ 35.,  39.,  42., ..., 220., 218., 219.],
          [ 31.,  39.,  43., ..., 222., 220., 219.],
          [ 28.,  31.,  30., ..., 223., 221., 220.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:27

analyse the exceptions in iter:37
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 95.,  88.,  86., ..., 101.,  91., 105.],
          [ 82.,  75.,  76., ...,  94.,  51.,  84.],
          [ 77.,  74.,  71., ...,  71.,  47.,  88.],
          ...,
          [ 97.,  92.,  97., ...,  86.,  94.,  90.],
          [ 95.,  84.,  89., ...,  96., 102.,  97.],
          [ 91.,  83.,  82., ..., 100., 105., 108.]],

         [[105.,  97.,  96., ..., 116., 108., 124.],
          [ 90.,  83.,  84., ..., 102.,  61.,  97.],
          [ 85.,  81.,  78., ...,  74.,  52.,  95.],
          ...,
          [ 95.,  92.,  93., ...,  91.,  97.,  97.],
          [ 90.,  86.,  89., ...,  97.,  96.,  94.],
          [ 84.,  81.,  81., ...,  96.,  97., 102.]],

         [[127., 120., 118., ..., 144., 136., 157.],
          [110., 104., 104., ..., 123.,  80., 122.],
          [103.,  98.,  95., ...,  86.,  63., 111.],
          ...,
          [ 72.,  69.,  70., ...,  65.,  72.,  71.],
          [ 65.,  59.,  62., ...,  76.,  77.,  73.],
          [ 63.,  57.,  55., ...,  78.,  80.,  83.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:28

analyse the exceptions in iter:38
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[110., 223., 243., ...,   7.,   0.,   0.],
          [102., 213., 244., ...,  98.,  80.,  31.],
          [ 99., 204., 248., ..., 221., 198.,  89.],
          ...,
          [ 58.,  58.,  51., ...,   8.,   9.,   6.],
          [ 69.,  54.,  49., ...,  48.,  52.,  35.],
          [ 81.,  52.,  50., ...,  15.,  16.,  13.]],

         [[ 90., 197., 215., ...,   2.,   0.,   0.],
          [ 83., 187., 217., ...,  90.,  74.,  27.],
          [ 78., 179., 221., ..., 209., 188.,  81.],
          ...,
          [ 63.,  70.,  69., ...,   8.,  10.,   8.],
          [ 72.,  64.,  65., ...,  44.,  47.,  32.],
          [ 80.,  58.,  63., ...,   5.,   5.,   3.]],

         [[ 84., 185., 201., ...,   3.,   0.,   0.],
          [ 77., 176., 203., ...,  92.,  75.,  28.],
          [ 72., 167., 207., ..., 213., 191.,  83.],
          ...,
          [ 87., 100., 103., ...,  10.,   7.,   5.],
          [ 94.,  92.,  98., ...,  43.,  44.,  30.],
          [100.,  84.,  93., ...,   5.,   5.,   4.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:29

analyse the exceptions in iter:39
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 98., 119., 109., ...,  75.,  60.,  61.],
          [ 44.,  75.,  69., ...,  81.,  55.,  65.],
          [ 73.,  94., 111., ...,  77.,  60.,  58.],
          ...,
          [ 96., 100., 129., ...,  72.,  68.,  85.],
          [124., 114., 110., ...,  84.,  81.,  73.],
          [ 93.,  98.,  95., ...,  73.,  55.,  72.]],

         [[110., 132., 122., ...,  97.,  82.,  84.],
          [ 56.,  86.,  80., ..., 103.,  77.,  87.],
          [ 84., 105., 122., ...,  99.,  82.,  82.],
          ...,
          [ 98., 100., 126., ...,  73.,  71.,  93.],
          [137., 124., 117., ...,  92.,  89.,  81.],
          [110., 112., 106., ...,  82.,  63.,  79.]],

         [[ 96., 117., 107., ...,  76.,  62.,  67.],
          [ 46.,  76.,  70., ...,  82.,  57.,  74.],
          [ 77.,  98., 115., ...,  78.,  61.,  61.],
          ...,
          [ 99., 100., 124., ...,  69.,  67.,  85.],
          [135., 121., 111., ...,  85.,  84.,  74.],
          [107., 107.,  99., ...,  75.,  58.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:30

analyse the exceptions in iter:40
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[101.,  94.,  98., ..., 121., 127., 143.],
          [120., 131., 124., ..., 115., 121., 144.],
          [120., 139., 140., ..., 105., 107., 121.],
          ...,
          [ 48.,  31.,  37., ..., 188., 159., 125.],
          [ 52.,  42.,  44., ..., 173., 165., 150.],
          [ 41.,  38.,  42., ..., 164., 145., 155.]],

         [[114., 116., 112., ..., 119., 130., 136.],
          [122., 132., 119., ..., 116., 126., 141.],
          [126., 140., 139., ...,  97., 103., 121.],
          ...,
          [ 45.,  31.,  37., ..., 157., 130., 106.],
          [ 46.,  40.,  45., ..., 135., 136., 132.],
          [ 42.,  38.,  41., ..., 130., 120., 134.]],

         [[ 35.,  48.,  42., ...,  58.,  66.,  90.],
          [ 64.,  98.,  74., ...,  53.,  63.,  77.],
          [ 50.,  82.,  82., ...,  56.,  61.,  65.],
          ...,
          [ 40.,  24.,  27., ..., 103.,  93.,  60.],
          [ 41.,  32.,  32., ..., 102.,  99.,  92.],
          [ 32.,  33.,  33., ...,  98.,  79.,  91.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:31

analyse the exceptions in iter:41
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[145., 145., 148., ..., 237., 230., 224.],
          [147., 150., 168., ..., 231., 221., 214.],
          [145., 150., 178., ..., 229., 230., 232.],
          ...,
          [231., 230., 227., ..., 235., 234., 231.],
          [224., 231., 231., ..., 240., 228., 223.],
          [125., 225., 232., ..., 224., 216., 228.]],

         [[125., 126., 130., ..., 210., 202., 199.],
          [126., 132., 147., ..., 203., 192., 190.],
          [124., 130., 155., ..., 201., 201., 205.],
          ...,
          [202., 202., 198., ..., 209., 207., 203.],
          [199., 200., 202., ..., 213., 201., 199.],
          [120., 200., 204., ..., 197., 189., 203.]],

         [[ 83.,  82.,  82., ..., 170., 161., 158.],
          [ 83.,  84., 107., ..., 163., 151., 149.],
          [ 79.,  84., 110., ..., 161., 160., 166.],
          ...,
          [169., 170., 166., ..., 172., 170., 167.],
          [163., 167., 170., ..., 177., 162., 162.],
          [ 98., 166., 170., ..., 160., 150., 167.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:32

analyse the exceptions in iter:43
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 99.,  98., 100., ..., 129., 132., 130.],
          [100., 100., 102., ..., 122., 135., 132.],
          [104., 104., 106., ..., 165., 149., 140.],
          ...,
          [195., 199., 221., ..., 209., 209., 208.],
          [197., 201., 211., ..., 208., 210., 209.],
          [199., 197., 204., ..., 208., 210., 209.]],

         [[166., 165., 167., ..., 186., 190., 188.],
          [166., 164., 167., ..., 152., 189., 188.],
          [169., 167., 170., ..., 165., 189., 189.],
          ...,
          [173., 177., 194., ..., 191., 190., 188.],
          [173., 178., 184., ..., 190., 191., 191.],
          [173., 172., 174., ..., 189., 191., 190.]],

         [[198., 196., 199., ..., 212., 215., 213.],
          [195., 194., 197., ..., 169., 213., 214.],
          [197., 195., 198., ..., 160., 205., 212.],
          ...,
          [149., 153., 166., ..., 169., 171., 173.],
          [149., 149., 147., ..., 171., 173., 175.],
          [149., 144., 137., ..., 174., 177., 175.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:33

analyse the exceptions in iter:44
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[139., 144., 146., ..., 132., 131., 129.],
          [139., 124., 128., ..., 110., 108., 114.],
          [172., 126., 116., ...,  67.,  68., 113.],
          ...,
          [ 95.,  93.,  91., ...,  81., 104., 107.],
          [132., 124., 119., ..., 114., 131., 132.],
          [110., 124., 129., ..., 129., 128., 112.]],

         [[154., 160., 162., ..., 140., 142., 141.],
          [148., 137., 149., ..., 114., 112., 127.],
          [162., 114., 109., ...,  71.,  68., 119.],
          ...,
          [ 88.,  82.,  84., ...,  94., 103., 102.],
          [109., 105., 104., ..., 104., 112., 110.],
          [108., 116., 116., ..., 117., 114., 105.]],

         [[188., 192., 192., ...,  77.,  76.,  70.],
          [180., 167., 178., ...,  81.,  76.,  68.],
          [172., 121., 129., ...,  50.,  58.,  78.],
          ...,
          [ 44.,  45.,  44., ...,  30.,  51.,  53.],
          [ 74.,  69.,  61., ...,  59.,  74.,  70.],
          [ 52.,  67.,  67., ...,  80.,  75.,  59.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:34

analyse the exceptions in iter:47
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 77.,  76.,  78., ...,  68.,  58.,  48.],
          [ 71.,  67.,  69., ...,  57.,  44.,  36.],
          [ 55.,  52.,  58., ...,  62.,  53.,  48.],
          ...,
          [ 63.,  62.,  67., ...,  63.,  58.,  55.],
          [ 89.,  91.,  89., ...,  65.,  68.,  66.],
          [103., 107.,  92., ...,  69.,  77.,  77.]],

         [[113., 112., 114., ..., 104.,  94.,  84.],
          [107., 102., 105., ...,  93.,  80.,  72.],
          [ 91.,  88.,  94., ...,  98.,  89.,  84.],
          ...,
          [ 97.,  92.,  97., ...,  97.,  92.,  89.],
          [118., 116., 114., ...,  99., 102., 101.],
          [129., 131., 119., ..., 104., 111., 112.]],

         [[137., 136., 139., ..., 128., 118., 108.],
          [131., 126., 130., ..., 116., 104.,  96.],
          [115., 112., 119., ..., 122., 113., 108.],
          ...,
          [119., 115., 121., ..., 123., 118., 115.],
          [136., 135., 136., ..., 122., 125., 124.],
          [144., 147., 138., ..., 127., 134., 135.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:35

analyse the exceptions in iter:48
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[191., 190., 190., ..., 135., 142., 146.],
          [187., 184., 179., ..., 147., 152., 153.],
          [181., 176., 165., ..., 154., 162., 158.],
          ...,
          [220., 221., 222., ..., 211., 214., 224.],
          [212., 220., 225., ..., 216., 216., 221.],
          [201., 212., 217., ..., 220., 217., 217.]],

         [[191., 192., 193., ..., 143., 149., 150.],
          [188., 187., 183., ..., 154., 158., 158.],
          [183., 178., 169., ..., 161., 167., 163.],
          ...,
          [245., 245., 244., ..., 238., 240., 248.],
          [238., 245., 247., ..., 242., 241., 244.],
          [226., 239., 243., ..., 242., 240., 238.]],

         [[168., 172., 174., ..., 123., 126., 127.],
          [165., 166., 163., ..., 134., 135., 134.],
          [160., 157., 148., ..., 140., 143., 139.],
          ...,
          [198., 199., 202., ..., 189., 193., 203.],
          [190., 198., 204., ..., 194., 195., 201.],
          [178., 190., 196., ..., 197., 196., 195.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:36

final statics:
total operators:28
tensorflow --> nums:36,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:36
mindspore --> 
torch --> 

generate models:36

analyse the exceptions in iter:50
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 16.,  17.,  17., ...,  62.,  55.,  51.],
          [ 16.,  16.,  15., ...,  62.,  58.,  52.],
          [ 16.,  15.,  15., ...,  57.,  59.,  56.],
          ...,
          [ 96., 114., 119., ..., 128., 120., 117.],
          [118., 100., 114., ..., 139., 131., 121.],
          [144., 136., 105., ..., 145., 137., 131.]],

         [[ 76.,  77.,  77., ..., 106.,  99.,  94.],
          [ 76.,  76.,  75., ..., 109., 105., 100.],
          [ 76.,  75.,  75., ..., 110., 111., 109.],
          ...,
          [110., 127., 132., ..., 135., 130., 131.],
          [132., 113., 126., ..., 146., 140., 134.],
          [148., 140., 114., ..., 151., 144., 141.]],

         [[ 74.,  75.,  75., ...,  87.,  80.,  75.],
          [ 74.,  74.,  74., ...,  84.,  80.,  75.],
          [ 74.,  73.,  73., ...,  79.,  80.,  78.],
          ...,
          [138., 159., 167., ..., 153., 145., 142.],
          [159., 145., 163., ..., 159., 153., 147.],
          [173., 168., 143., ..., 170., 163., 158.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:37

analyse the exceptions in iter:51
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[213., 119.,  58., ..., 143., 140., 117.],
          [214., 128.,  62., ..., 138., 136., 111.],
          [215., 139.,  75., ..., 136., 134., 107.],
          ...,
          [118., 122., 129., ..., 158., 151., 145.],
          [111., 117., 128., ..., 153., 147., 141.],
          [110., 116., 127., ..., 141., 136., 139.]],

         [[221., 127.,  71., ..., 158., 142., 101.],
          [223., 137.,  75., ..., 152., 138.,  95.],
          [224., 148.,  88., ..., 151., 136.,  91.],
          ...,
          [ 45.,  45.,  46., ...,  65.,  68.,  67.],
          [ 38.,  42.,  47., ...,  62.,  59.,  63.],
          [ 38.,  40.,  48., ...,  55.,  52.,  58.]],

         [[221., 122.,  81., ..., 150., 136.,  87.],
          [220., 130.,  83., ..., 145., 133.,  82.],
          [219., 139.,  94., ..., 143., 131.,  77.],
          ...,
          [ 37.,  40.,  42., ...,  54.,  55.,  55.],
          [ 32.,  36.,  41., ...,  53.,  49.,  51.],
          [ 32.,  34.,  41., ...,  46.,  43.,  47.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:38

analyse the exceptions in iter:52
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 63.,  77.,  66., ...,  76.,  86., 114.],
          [ 72.,  70.,  64., ...,  84.,  81.,  88.],
          [ 56.,  70.,  54., ..., 139., 104.,  77.],
          ...,
          [118., 152., 175., ..., 102., 128., 179.],
          [137., 148., 148., ..., 121., 170., 203.],
          [171., 173., 153., ..., 167., 187., 174.]],

         [[ 70.,  88.,  88., ...,  91.,  94., 116.],
          [ 71.,  83.,  85., ...,  94.,  91.,  97.],
          [ 65.,  82.,  76., ..., 142., 114.,  93.],
          ...,
          [107., 135., 155., ...,  79., 105., 150.],
          [123., 129., 129., ...,  94., 142., 168.],
          [145., 146., 130., ..., 136., 157., 143.]],

         [[ 37.,  63.,  63., ...,  65.,  71.,  95.],
          [ 39.,  58.,  58., ...,  71.,  67.,  73.],
          [ 34.,  53.,  48., ..., 120.,  90.,  71.],
          ...,
          [ 85., 111., 133., ...,  63.,  85., 114.],
          [101., 109., 105., ...,  74., 116., 130.],
          [108., 107.,  96., ..., 107., 129., 115.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:39

analyse the exceptions in iter:53
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[157., 156., 157., ..., 177., 177., 175.],
          [162., 162., 162., ..., 187., 182., 179.],
          [165., 164., 165., ..., 211., 204., 191.],
          ...,
          [172., 168., 166., ..., 203., 203., 200.],
          [177., 175., 172., ..., 203., 203., 200.],
          [182., 182., 179., ..., 203., 203., 200.]],

         [[159., 158., 159., ..., 183., 180., 179.],
          [164., 164., 164., ..., 194., 187., 183.],
          [167., 166., 167., ..., 220., 210., 196.],
          ...,
          [174., 170., 167., ..., 205., 205., 202.],
          [179., 177., 173., ..., 205., 205., 202.],
          [184., 183., 180., ..., 205., 205., 202.]],

         [[146., 145., 146., ..., 185., 183., 179.],
          [151., 151., 151., ..., 200., 193., 186.],
          [154., 153., 154., ..., 226., 219., 201.],
          ...,
          [161., 158., 158., ..., 201., 201., 199.],
          [166., 166., 164., ..., 202., 202., 199.],
          [171., 174., 173., ..., 202., 202., 199.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:40

analyse the exceptions in iter:55
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[156., 167., 169., ..., 243., 230., 208.],
          [174., 192., 172., ..., 237., 213., 186.],
          [192., 194., 174., ..., 226., 198., 195.],
          ...,
          [187., 211., 231., ..., 210., 217., 203.],
          [231., 220., 200., ..., 183., 189., 186.],
          [238., 238., 229., ..., 141., 151., 157.]],

         [[194., 212., 215., ..., 247., 235., 215.],
          [210., 229., 204., ..., 243., 221., 193.],
          [234., 230., 201., ..., 231., 208., 200.],
          ...,
          [211., 234., 244., ..., 204., 208., 192.],
          [238., 236., 219., ..., 170., 175., 169.],
          [242., 247., 239., ..., 126., 137., 141.]],

         [[129., 127., 129., ..., 226., 206., 180.],
          [147., 159., 163., ..., 223., 200., 169.],
          [145., 178., 194., ..., 218., 186., 165.],
          ...,
          [151., 180., 221., ..., 199., 210., 192.],
          [218., 209., 177., ..., 153., 160., 153.],
          [224., 232., 217., ..., 106., 117., 118.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:41

analyse the exceptions in iter:56
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[141., 139., 136., ..., 228., 228., 229.],
          [148., 150., 148., ..., 228., 228., 228.],
          [149., 149., 148., ..., 230., 229., 229.],
          ...,
          [125., 124., 139., ..., 220., 199., 208.],
          [126., 116., 135., ..., 246., 226., 196.],
          [143., 145., 169., ..., 254., 255., 227.]],

         [[ 70.,  61.,  55., ..., 198., 199., 200.],
          [ 71.,  67.,  64., ..., 197., 196., 197.],
          [ 72.,  66.,  64., ..., 197., 197., 197.],
          ...,
          [100., 102., 110., ..., 169., 143., 149.],
          [101.,  93., 107., ..., 205., 181., 145.],
          [105., 107., 127., ..., 208., 206., 174.]],

         [[  8.,   2.,   0., ..., 155., 156., 157.],
          [ 10.,   5.,   2., ..., 153., 152., 153.],
          [ 17.,   7.,   4., ..., 151., 151., 151.],
          ...,
          [ 73.,  80.,  75., ..., 109.,  86.,  93.],
          [ 75.,  71.,  73., ..., 144., 121.,  87.],
          [ 67.,  71.,  83., ..., 141., 138., 105.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]
torch exception:
{'id': 12, 'name': 'flatten', 'frame_work': 'torch', 'input_datas': [tensor([205290.6250], grad_fn=<SumBackward1>)]}
Dimension out of range (expected to be in range of [-1, 0], but got 1)

generate models:42

analyse the exceptions in iter:57
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 66.,  71.,  88., ...,  85.,  86.,  79.],
          [ 75.,  79.,  95., ...,  85.,  87.,  78.],
          [ 80.,  84.,  97., ...,  81.,  82.,  74.],
          ...,
          [ 79.,  87.,  60., ...,  35.,  26.,  20.],
          [ 77.,  70.,  37., ...,  79.,  77.,  66.],
          [ 78.,  63.,  31., ..., 140., 135., 128.]],

         [[ 73.,  77.,  86., ...,  80.,  81.,  73.],
          [ 81.,  84.,  92., ...,  79.,  80.,  72.],
          [ 85.,  88.,  93., ...,  75.,  74.,  68.],
          ...,
          [ 74.,  84.,  58., ...,  35.,  26.,  21.],
          [ 74.,  68.,  37., ...,  68.,  66.,  55.],
          [ 74.,  61.,  32., ..., 122., 117., 113.]],

         [[ 33.,  40.,  62., ...,  55.,  62.,  54.],
          [ 40.,  45.,  66., ...,  56.,  62.,  54.],
          [ 44.,  50.,  68., ...,  48.,  53.,  51.],
          ...,
          [ 59.,  69.,  43., ...,  22.,  14.,  10.],
          [ 59.,  53.,  22., ...,  60.,  58.,  50.],
          [ 58.,  44.,  15., ..., 116., 113., 111.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:43

analyse the exceptions in iter:60
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[201., 191., 194., ...,  83.,  39.,  36.],
          [ 57.,  62., 134., ...,  79.,  48.,  35.],
          [ 74., 123., 138., ..., 162., 132.,  56.],
          ...,
          [ 67.,  62.,  55., ...,  69.,  72.,  72.],
          [ 73.,  67.,  59., ...,  72.,  72.,  71.],
          [ 74.,  71.,  67., ...,  61.,  58.,  63.]],

         [[209., 204., 207., ...,  88.,  48.,  47.],
          [ 73.,  78., 148., ...,  91.,  59.,  45.],
          [ 99., 142., 153., ..., 175., 139.,  61.],
          ...,
          [ 80.,  72.,  62., ...,  78.,  80.,  82.],
          [ 87.,  77.,  67., ...,  81.,  81.,  81.],
          [ 89.,  84.,  79., ...,  73.,  69.,  75.]],

         [[211., 210., 216., ...,  82.,  33.,  24.],
          [ 79.,  92., 161., ...,  96.,  57.,  32.],
          [110., 165., 169., ..., 186., 145.,  56.],
          ...,
          [ 89.,  82.,  73., ...,  93.,  95.,  98.],
          [ 95.,  87.,  77., ...,  96.,  96.,  96.],
          [100.,  95.,  89., ...,  88.,  85.,  91.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:44

analyse the exceptions in iter:61
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[114., 117., 120., ..., 165., 125., 103.],
          [111., 116., 121., ..., 162., 127., 103.],
          [114., 121., 128., ..., 167., 132., 106.],
          ...,
          [165., 170., 175., ..., 185., 207., 201.],
          [175., 175., 180., ..., 187., 200., 193.],
          [173., 171., 177., ..., 205., 210., 202.]],

         [[119., 122., 126., ..., 166., 126., 103.],
          [116., 121., 126., ..., 163., 128., 103.],
          [119., 125., 132., ..., 168., 133., 108.],
          ...,
          [166., 171., 176., ..., 179., 199., 193.],
          [176., 176., 181., ..., 182., 194., 186.],
          [174., 172., 178., ..., 200., 204., 195.]],

         [[125., 126., 129., ..., 160., 121., 110.],
          [122., 127., 133., ..., 157., 123., 109.],
          [125., 136., 142., ..., 162., 126., 102.],
          ...,
          [161., 167., 171., ..., 168., 194., 185.],
          [171., 171., 176., ..., 162., 181., 178.],
          [169., 167., 173., ..., 182., 192., 187.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:45

analyse the exceptions in iter:62
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 76.,  73.,  69., ...,  75.,  72.,  70.],
          [ 76.,  71.,  66., ...,  79.,  76.,  75.],
          [ 71.,  65.,  62., ...,  80.,  77.,  76.],
          ...,
          [ 11.,   9.,   6., ...,  31.,  32.,  29.],
          [  0.,   0.,   0., ...,  12.,  12.,  13.],
          [ 87.,  83.,  81., ...,  99.,  99., 102.]],

         [[118., 118., 116., ..., 135., 134., 135.],
          [122., 119., 117., ..., 136., 135., 137.],
          [120., 117., 116., ..., 133., 132., 135.],
          ...,
          [ 36.,  32.,  32., ...,  61.,  62.,  59.],
          [ 19.,  13.,   7., ...,  38.,  37.,  38.],
          [100.,  92.,  86., ..., 116., 115., 119.]],

         [[167., 164., 162., ..., 180., 178., 179.],
          [170., 166., 163., ..., 178., 177., 179.],
          [170., 165., 164., ..., 173., 172., 174.],
          ...,
          [ 66.,  61.,  61., ...,  79.,  80.,  77.],
          [ 46.,  40.,  36., ...,  55.,  55.,  56.],
          [115., 108., 103., ..., 127., 127., 130.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:46

analyse the exceptions in iter:64
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 65.,  67.,  69., ...,  93., 108., 102.],
          [ 65.,  65.,  69., ..., 104., 122., 132.],
          [ 62.,  63.,  68., ..., 122., 146., 140.],
          ...,
          [ 88.,  90.,  95., ...,  83.,  89.,  92.],
          [ 90.,  94.,  98., ...,  75.,  78.,  85.],
          [ 95., 102., 104., ...,  74.,  79.,  84.]],

         [[ 29.,  32.,  35., ...,  73.,  87.,  81.],
          [ 29.,  30.,  34., ...,  83.,  97., 106.],
          [ 27.,  28.,  32., ...,  99., 118., 114.],
          ...,
          [ 76.,  79.,  85., ...,  85.,  93.,  97.],
          [ 79.,  83.,  87., ...,  66.,  74.,  86.],
          [ 84.,  90.,  94., ...,  62.,  70.,  78.]],

         [[ 29.,  30.,  33., ...,  70.,  82.,  74.],
          [ 29.,  28.,  32., ...,  78.,  90.,  98.],
          [ 25.,  24.,  30., ...,  93., 110., 104.],
          ...,
          [ 84.,  86.,  92., ...,  99., 108., 111.],
          [ 85.,  90.,  95., ...,  71.,  83.,  97.],
          [ 92.,  98., 102., ...,  62.,  73.,  83.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:47

analyse the exceptions in iter:65
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[148., 132., 134., ..., 124., 108., 124.],
          [197., 168., 176., ..., 176., 162., 141.],
          [199., 199., 213., ..., 182., 178., 153.],
          ...,
          [179., 183., 182., ..., 164., 147., 136.],
          [162., 146., 127., ..., 118., 118., 132.],
          [150., 143., 123., ..., 124., 126., 157.]],

         [[141., 128., 135., ..., 131., 109., 127.],
          [181., 151., 166., ..., 178., 157., 133.],
          [194., 191., 209., ..., 186., 175., 141.],
          ...,
          [170., 165., 166., ..., 144., 127., 119.],
          [156., 133., 116., ..., 100.,  99., 116.],
          [148., 141., 125., ..., 119., 121., 154.]],

         [[174., 173., 187., ..., 186., 166., 171.],
          [214., 185., 199., ..., 213., 191., 162.],
          [207., 193., 209., ..., 193., 178., 156.],
          ...,
          [170., 148., 145., ..., 121., 106., 130.],
          [173., 140., 122., ..., 106., 108., 138.],
          [184., 176., 161., ..., 162., 162., 186.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:48

analyse the exceptions in iter:68
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[110., 103., 104., ..., 102.,  94.,  99.],
          [125., 119., 120., ..., 108., 104., 110.],
          [113.,  73.,  80., ...,  47.,  78., 103.],
          ...,
          [102., 125., 190., ...,  86.,  69.,  92.],
          [120., 141., 194., ...,  81.,  85., 109.],
          [159., 166., 163., ...,  98., 110., 100.]],

         [[125., 128., 130., ..., 121., 121., 120.],
          [151., 157., 160., ..., 137., 144., 145.],
          [136., 102., 107., ...,  72., 117., 141.],
          ...,
          [ 77.,  88., 159., ...,  72.,  57.,  70.],
          [ 92., 100., 163., ...,  68.,  77., 101.],
          [133., 127., 132., ...,  85., 105., 102.]],

         [[141., 147., 145., ..., 130., 132., 129.],
          [167., 181., 185., ..., 145., 155., 156.],
          [148., 122., 127., ...,  76., 124., 151.],
          ...,
          [ 37.,  49., 132., ...,  48.,  37.,  40.],
          [ 49.,  52., 124., ...,  34.,  39.,  59.],
          [ 96.,  79.,  90., ...,  57.,  64.,  67.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:49

analyse the exceptions in iter:70
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 159., 165., ..., 129., 125., 122.],
          [156., 160., 163., ..., 118., 120., 118.],
          [146., 130., 128., ..., 118., 112., 107.],
          ...,
          [125., 126., 124., ..., 123., 126., 131.],
          [125., 127., 125., ..., 120., 128., 129.],
          [119., 121., 135., ..., 132., 136., 146.]],

         [[179., 183., 189., ..., 161., 158., 155.],
          [177., 180., 184., ..., 150., 152., 150.],
          [169., 152., 151., ..., 150., 144., 139.],
          ...,
          [146., 147., 146., ..., 141., 140., 144.],
          [145., 148., 146., ..., 137., 142., 141.],
          [136., 138., 153., ..., 148., 149., 157.]],

         [[152., 157., 162., ..., 137., 133., 131.],
          [152., 155., 159., ..., 126., 128., 126.],
          [143., 126., 125., ..., 126., 120., 115.],
          ...,
          [129., 127., 124., ..., 117., 118., 122.],
          [127., 128., 124., ..., 119., 125., 125.],
          [120., 119., 132., ..., 135., 137., 146.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:50

analyse the exceptions in iter:71
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[169., 104.,  81., ..., 163., 210., 250.],
          [103.,   5.,   0., ...,  27.,  68., 185.],
          [163.,  23.,   1., ...,  69.,  90., 159.],
          ...,
          [235., 165., 104., ...,  55.,  87., 162.],
          [255., 231., 147., ...,  35.,  60., 189.],
          [255., 252., 240., ...,  87., 120., 215.]],

         [[170., 109.,  88., ..., 169., 214., 250.],
          [104.,   8.,   0., ...,  29.,  69., 185.],
          [163.,  25.,   3., ...,  67.,  88., 158.],
          ...,
          [235., 167., 108., ...,  60.,  91., 165.],
          [255., 231., 149., ...,  39.,  63., 191.],
          [255., 252., 240., ...,  89., 122., 216.]],

         [[164.,  98.,  82., ..., 159., 201., 242.],
          [ 93.,   0.,   0., ...,  21.,  56., 174.],
          [150.,  18.,   1., ...,  59.,  76., 147.],
          ...,
          [232., 153.,  83., ...,  28.,  63., 149.],
          [255., 226., 136., ...,  21.,  44., 179.],
          [255., 251., 237., ...,  82., 111., 207.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:51

analyse the exceptions in iter:74
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[195., 165., 150., ..., 135., 120., 120.],
          [174., 117., 145., ..., 134., 103., 117.],
          [125.,  97., 131., ..., 129., 100., 104.],
          ...,
          [122., 125., 118., ...,  91.,  83.,  73.],
          [132., 130., 136., ...,  85.,  86.,  91.],
          [143., 137., 143., ...,  85., 107., 145.]],

         [[208., 177., 161., ..., 189., 185., 184.],
          [190., 134., 159., ..., 182., 162., 188.],
          [143., 120., 150., ..., 167., 146., 165.],
          ...,
          [146., 149., 142., ..., 118., 111.,  96.],
          [157., 155., 160., ..., 111., 113., 113.],
          [172., 165., 169., ..., 107., 127., 160.]],

         [[166., 138., 140., ..., 143., 119., 118.],
          [160., 115., 154., ..., 125.,  96., 129.],
          [125., 115., 150., ..., 120.,  97., 123.],
          ...,
          [146., 149., 142., ..., 122., 114.,  93.],
          [158., 155., 161., ..., 113., 115., 109.],
          [179., 167., 174., ..., 107., 125., 154.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:52

analyse the exceptions in iter:76
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[118., 110., 118., ..., 114., 114., 113.],
          [ 84.,  88., 120., ..., 113., 114., 115.],
          [ 85.,  99., 131., ..., 120., 120., 119.],
          ...,
          [155., 152., 151., ..., 105.,  82., 127.],
          [154., 155., 156., ..., 150., 142., 139.],
          [153., 152., 154., ..., 145., 148., 146.]],

         [[157., 162., 172., ..., 161., 161., 161.],
          [120., 136., 173., ..., 165., 164., 163.],
          [117., 141., 183., ..., 168., 168., 167.],
          ...,
          [158., 156., 155., ..., 106.,  84., 129.],
          [155., 157., 158., ..., 152., 145., 142.],
          [155., 155., 156., ..., 147., 150., 149.]],

         [[187., 196., 219., ..., 207., 207., 207.],
          [147., 168., 218., ..., 217., 216., 212.],
          [142., 171., 225., ..., 216., 215., 213.],
          ...,
          [142., 136., 133., ...,  87.,  63., 105.],
          [138., 137., 136., ..., 130., 120., 113.],
          [143., 139., 139., ..., 128., 127., 119.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:53

analyse the exceptions in iter:77
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 44.,  47.,  51., ...,  75.,  72.,  74.],
          [ 52.,  47.,  51., ...,  73.,  74.,  76.],
          [ 65.,  57.,  54., ...,  73.,  73.,  75.],
          ...,
          [ 56.,  49.,  49., ...,  53.,  52.,  53.],
          [ 41.,  56.,  52., ...,  52.,  52.,  49.],
          [ 24.,  49.,  40., ...,  54.,  55.,  46.]],

         [[ 73.,  77.,  81., ..., 107., 104., 106.],
          [ 85.,  79.,  82., ..., 105., 106., 108.],
          [100.,  91.,  87., ..., 105., 105., 108.],
          ...,
          [ 82.,  75.,  74., ...,  77.,  77.,  77.],
          [ 64.,  79.,  75., ...,  74.,  74.,  72.],
          [ 44.,  69.,  60., ...,  74.,  74.,  66.]],

         [[ 49.,  53.,  57., ...,  83.,  80.,  82.],
          [ 55.,  54.,  60., ...,  81.,  82.,  84.],
          [ 67.,  65.,  66., ...,  81.,  81.,  82.],
          ...,
          [ 48.,  41.,  41., ...,  49.,  48.,  49.],
          [ 35.,  50.,  46., ...,  49.,  49.,  46.],
          [ 19.,  44.,  36., ...,  51.,  52.,  43.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:54

analyse the exceptions in iter:78
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[114.,  95., 104., ..., 192., 177., 136.],
          [ 76.,  45.,  53., ..., 170., 157., 107.],
          [ 63.,  49.,  51., ..., 175., 164., 109.],
          ...,
          [ 46.,  39.,  56., ..., 133., 120.,  95.],
          [ 28.,  31.,  43., ..., 123., 113.,  85.],
          [ 48.,  40.,  44., ...,  82.,  76.,  84.]],

         [[122., 102., 112., ..., 192., 177., 136.],
          [ 89.,  57.,  65., ..., 170., 157., 107.],
          [ 72.,  58.,  60., ..., 175., 164., 109.],
          ...,
          [ 56.,  49.,  67., ..., 133., 120.,  96.],
          [ 34.,  38.,  50., ..., 123., 114.,  86.],
          [ 51.,  42.,  47., ...,  82.,  76.,  85.]],

         [[ 95.,  76.,  86., ..., 192., 177., 136.],
          [ 60.,  30.,  38., ..., 170., 157., 107.],
          [ 44.,  31.,  33., ..., 175., 164., 109.],
          ...,
          [ 35.,  29.,  46., ..., 133., 118.,  92.],
          [ 19.,  23.,  35., ..., 123., 111.,  82.],
          [ 43.,  34.,  38., ...,  82.,  74.,  80.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:55

analyse the exceptions in iter:80
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 76.,  78.,  79., ..., 104., 105., 106.],
          [ 78.,  79.,  79., ..., 109., 110., 111.],
          [ 97.,  88.,  85., ..., 114., 114., 115.],
          ...,
          [101., 116., 121., ..., 186., 178., 176.],
          [134., 145., 150., ..., 176., 179., 175.],
          [150., 153., 154., ..., 178., 179., 179.]],

         [[112., 114., 114., ..., 135., 136., 137.],
          [114., 118., 119., ..., 138., 139., 140.],
          [119., 118., 119., ..., 142., 142., 143.],
          ...,
          [101., 116., 121., ..., 181., 171., 168.],
          [134., 146., 150., ..., 172., 174., 170.],
          [150., 153., 154., ..., 174., 175., 175.]],

         [[159., 162., 161., ..., 182., 183., 183.],
          [159., 161., 160., ..., 183., 183., 184.],
          [155., 161., 168., ..., 185., 186., 186.],
          ...,
          [112., 126., 130., ..., 176., 168., 166.],
          [140., 150., 154., ..., 169., 172., 169.],
          [150., 153., 154., ..., 172., 175., 176.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:56

analyse the exceptions in iter:0
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:2

analyse the exceptions in iter:2
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [113., 111., 105., ...,  72.,  72.,  72.],
          [111., 104.,  99., ...,  68.,  70.,  78.],
          [106.,  99.,  95., ...,  78.,  79.,  80.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [120., 118., 112., ...,  81.,  80.,  80.],
          [118., 111., 106., ...,  75.,  76.,  84.],
          [113., 106., 102., ...,  85.,  85.,  86.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [112., 111., 106., ...,  80.,  79.,  79.],
          [110., 104.,  98., ...,  73.,  75.,  82.],
          [105.,  98.,  94., ...,  83.,  83.,  84.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:3

analyse the exceptions in iter:3
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  37.,  38., ...,  76.,  81.,  85.],
          [ 33.,  34.,  32., ...,  95.,  96.,  85.],
          [ 39.,  40.,  57., ...,  93., 107.,  95.],
          ...,
          [ 83.,  87.,  84., ...,  99.,  90.,  81.],
          [ 88.,  90.,  93., ...,  80.,  76.,  82.],
          [ 97.,  94.,  93., ...,  54.,  63.,  72.]],

         [[ 25.,  34.,  35., ...,  67.,  72.,  76.],
          [ 28.,  30.,  27., ...,  82.,  82.,  72.],
          [ 32.,  33.,  50., ...,  76.,  89.,  77.],
          ...,
          [ 73.,  77.,  74., ...,  93.,  84.,  75.],
          [ 72.,  74.,  77., ...,  74.,  70.,  76.],
          [ 78.,  75.,  75., ...,  47.,  56.,  65.]],

         [[ 10.,  19.,  20., ...,  39.,  43.,  47.],
          [ 13.,  14.,  12., ...,  55.,  56.,  45.],
          [ 15.,  17.,  33., ...,  52.,  66.,  54.],
          ...,
          [ 52.,  56.,  52., ...,  70.,  61.,  52.],
          [ 51.,  52.,  56., ...,  53.,  49.,  55.],
          [ 56.,  53.,  53., ...,  28.,  37.,  46.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:4

analyse the exceptions in iter:4
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[170., 168., 177., ..., 162., 158., 157.],
          [168., 172., 171., ..., 159., 156., 154.],
          [154., 149., 129., ..., 161., 157., 154.],
          ...,
          [ 74.,  76.,  78., ...,  71.,  68.,  61.],
          [ 68.,  69.,  72., ...,  76.,  71.,  71.],
          [ 67.,  68.,  69., ...,  75.,  71.,  73.]],

         [[180., 178., 185., ..., 179., 178., 177.],
          [181., 185., 183., ..., 177., 176., 174.],
          [170., 165., 144., ..., 178., 177., 174.],
          ...,
          [ 84.,  85.,  85., ...,  75.,  72.,  65.],
          [ 76.,  77.,  79., ...,  80.,  75.,  75.],
          [ 75.,  76.,  75., ...,  79.,  75.,  77.]],

         [[198., 196., 203., ..., 215., 214., 212.],
          [198., 201., 200., ..., 212., 211., 209.],
          [186., 181., 162., ..., 214., 212., 209.],
          ...,
          [ 80.,  81.,  82., ...,  78.,  75.,  68.],
          [ 77.,  78.,  78., ...,  83.,  78.,  78.],
          [ 78.,  79.,  76., ...,  82.,  78.,  80.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:5

analyse the exceptions in iter:5
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[159., 150., 153., ...,  91.,  74.,  76.],
          [142., 146., 155., ..., 127., 122.,  86.],
          [109.,  99., 105., ..., 137., 163.,  93.],
          ...,
          [244., 240., 241., ..., 156., 179., 200.],
          [246., 243., 243., ..., 162., 178., 192.],
          [246., 243., 244., ..., 166., 173., 182.]],

         [[102.,  91.,  95., ...,  71.,  63.,  58.],
          [ 75.,  72.,  76., ..., 105., 111.,  69.],
          [ 67.,  58.,  59., ..., 112., 132.,  72.],
          ...,
          [129., 123., 122., ...,  42.,  59.,  73.],
          [133., 128., 127., ...,  44.,  56.,  65.],
          [139., 133., 132., ...,  47.,  51.,  57.]],

         [[101.,  95.,  97., ...,  56.,  55.,  55.],
          [ 68.,  66.,  65., ...,  71.,  93.,  61.],
          [ 75.,  60.,  52., ...,  80., 105.,  71.],
          ...,
          [ 70.,  65.,  65., ...,  15.,  26.,  36.],
          [ 74.,  72.,  70., ...,  14.,  22.,  27.],
          [ 82.,  78.,  77., ...,  14.,  17.,  19.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:6

analyse the exceptions in iter:6
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[164., 105., 118., ..., 109., 108.,  91.],
          [167., 116.,  72., ..., 105., 105.,  89.],
          [140., 142., 119., ..., 104.,  84.,  78.],
          ...,
          [139., 142., 135., ...,  89.,  97., 126.],
          [163., 153., 146., ...,  85.,  98., 127.],
          [183., 176., 154., ...,  94.,  91., 122.]],

         [[206., 140., 148., ..., 147., 147., 129.],
          [213., 160., 109., ..., 142., 142., 127.],
          [191., 193., 163., ..., 139., 120., 115.],
          ...,
          [148., 155., 156., ..., 134., 148., 176.],
          [157., 164., 164., ..., 130., 148., 178.],
          [153., 182., 154., ..., 134., 133., 170.]],

         [[ 84.,  61., 101., ...,  73.,  69.,  57.],
          [ 84.,  49.,  43., ...,  79.,  72.,  57.],
          [ 65.,  66.,  79., ...,  84.,  58.,  49.],
          ...,
          [ 81.,  74.,  72., ...,  28.,  24.,  49.],
          [ 85.,  82.,  90., ...,  19.,  27.,  48.],
          [102., 116., 100., ...,  29.,  26.,  44.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:7

analyse the exceptions in iter:8
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[134., 131., 128., ..., 127., 127., 128.],
          [133., 129., 128., ..., 127., 127., 128.],
          [128., 127., 128., ..., 126., 126., 126.],
          ...,
          [174., 171., 155., ...,  27.,  29.,  28.],
          [194., 189., 159., ...,  30.,  30.,  30.],
          [193., 181., 168., ...,  31.,  32.,  32.]],

         [[186., 184., 182., ..., 181., 181., 182.],
          [189., 186., 186., ..., 183., 183., 184.],
          [185., 182., 182., ..., 181., 181., 180.],
          ...,
          [208., 206., 189., ...,  94.,  96.,  94.],
          [221., 215., 196., ...,  95.,  96.,  95.],
          [217., 208., 201., ...,  94.,  94.,  94.]],

         [[223., 220., 218., ..., 222., 222., 223.],
          [228., 224., 224., ..., 224., 224., 225.],
          [226., 223., 223., ..., 222., 222., 221.],
          ...,
          [235., 229., 216., ..., 136., 137., 136.],
          [244., 239., 225., ..., 138., 139., 140.],
          [237., 230., 227., ..., 136., 137., 138.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]
torch exception:
{'id': 11, 'name': 'flatten', 'frame_work': 'torch', 'input_datas': [tensor([932672.], grad_fn=<MeanBackward1>)]}
Dimension out of range (expected to be in range of [-1, 0], but got 1)

generate models:8

analyse the exceptions in iter:9
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[125., 110., 102., ..., 202., 200., 202.],
          [142., 146., 176., ..., 195., 198., 204.],
          [180., 143., 156., ..., 122., 139., 158.],
          ...,
          [104., 101., 101., ..., 126., 126., 125.],
          [104., 105., 109., ..., 138., 137., 137.],
          [105., 108., 115., ..., 143., 143., 144.]],

         [[125., 101.,  90., ..., 207., 205., 208.],
          [146., 144., 172., ..., 201., 205., 211.],
          [185., 146., 157., ..., 111., 128., 147.],
          ...,
          [ 82.,  80.,  81., ..., 103., 103., 101.],
          [ 81.,  84.,  88., ..., 113., 113., 112.],
          [ 83.,  87.,  94., ..., 117., 116., 116.]],

         [[116.,  91.,  83., ..., 214., 212., 214.],
          [142., 139., 170., ..., 205., 209., 215.],
          [183., 146., 157., ..., 113., 131., 150.],
          ...,
          [ 41.,  39.,  38., ...,  67.,  69.,  68.],
          [ 40.,  41.,  43., ...,  78.,  80.,  81.],
          [ 42.,  45.,  50., ...,  82.,  84.,  86.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]
torch exception:
{'id': 18, 'name': 'flatten', 'frame_work': 'torch', 'input_datas': [tensor([-0.9283], grad_fn=<CosBackward0>)]}
Dimension out of range (expected to be in range of [-1, 0], but got 1)

generate models:9

final statics:
total operators:28
tensorflow --> nums:9,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:2,distinct_bugs:1
tensorflow --> 
conv2d:9
mindspore --> 
torch --> 
flatten:2

generate models:9

analyse the exceptions in iter:12
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[164., 162., 162., ..., 157., 153., 153.],
          [168., 166., 166., ..., 164., 160., 158.],
          [172., 170., 171., ..., 168., 165., 163.],
          ...,
          [123., 117., 112., ..., 117.,  95., 120.],
          [120., 116., 112., ..., 126., 120., 120.],
          [121., 120., 116., ..., 124., 124., 120.]],

         [[215., 212., 212., ..., 210., 208., 203.],
          [218., 215., 215., ..., 212., 209., 205.],
          [220., 217., 218., ..., 212., 208., 207.],
          ...,
          [160., 154., 149., ..., 136., 115., 149.],
          [156., 151., 147., ..., 149., 144., 152.],
          [154., 152., 148., ..., 152., 154., 154.]],

         [[244., 240., 240., ..., 237., 235., 234.],
          [245., 242., 242., ..., 238., 236., 235.],
          [246., 243., 244., ..., 238., 235., 236.],
          ...,
          [105., 102.,  99., ..., 100.,  79., 100.],
          [100.,  99.,  96., ..., 110., 103., 101.],
          [ 96.,  99.,  97., ..., 108., 107., 100.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:10

analyse the exceptions in iter:13
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 17.,  17.,  17., ...,  23.,  22.,  19.],
          [ 18.,  18.,  18., ...,  24.,  23.,  22.],
          [ 18.,  18.,  19., ...,  24.,  23.,  23.],
          ...,
          [217., 226., 210., ...,  33.,  32.,  33.],
          [219., 222., 214., ...,  35.,  34.,  33.],
          [210., 221., 215., ...,  36.,  34.,  32.]],

         [[  3.,   3.,   2., ...,  13.,  12.,   9.],
          [  4.,   4.,   4., ...,  14.,  13.,  12.],
          [  4.,   4.,   5., ...,  14.,  13.,  13.],
          ...,
          [214., 219., 201., ...,  24.,  23.,  24.],
          [215., 215., 208., ...,  26.,  25.,  24.],
          [208., 216., 212., ...,  27.,  25.,  23.]],

         [[  2.,   2.,   1., ...,  11.,  10.,   7.],
          [  3.,   3.,   3., ...,  12.,  11.,  10.],
          [  3.,   3.,   4., ...,  12.,  11.,  11.],
          ...,
          [223., 227., 213., ...,  17.,  16.,  17.],
          [230., 229., 225., ...,  19.,  18.,  17.],
          [223., 229., 227., ...,  20.,  18.,  16.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:11

analyse the exceptions in iter:14
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[100.,  98.,  99., ..., 165., 163., 165.],
          [101., 100., 100., ..., 164., 163., 159.],
          [105., 104., 104., ..., 156., 136., 114.],
          ...,
          [166., 166., 168., ..., 137., 137., 147.],
          [161., 162., 167., ..., 131., 138., 137.],
          [164., 162., 164., ..., 153., 157., 156.]],

         [[146., 144., 144., ..., 165., 163., 165.],
          [145., 143., 143., ..., 161., 162., 161.],
          [147., 145., 145., ..., 150., 133., 117.],
          ...,
          [156., 156., 157., ..., 127., 126., 136.],
          [152., 153., 158., ..., 125., 133., 132.],
          [158., 156., 158., ..., 146., 151., 150.]],

         [[192., 189., 189., ..., 165., 163., 165.],
          [188., 186., 186., ..., 159., 159., 157.],
          [189., 186., 187., ..., 147., 129., 111.],
          ...,
          [150., 151., 152., ..., 112., 114., 127.],
          [149., 150., 155., ..., 117., 124., 120.],
          [155., 153., 155., ..., 139., 141., 137.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:12

analyse the exceptions in iter:15
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[100., 100., 101., ...,  95.,  94.,  95.],
          [103., 103., 104., ...,  97.,  97.,  97.],
          [107., 106., 106., ..., 100., 100., 101.],
          ...,
          [165., 159., 167., ...,  75.,  75.,  72.],
          [158., 173., 182., ...,  76.,  75.,  77.],
          [161., 162., 160., ...,  98., 129., 162.]],

         [[168., 168., 167., ..., 165., 165., 167.],
          [170., 168., 168., ..., 167., 166., 168.],
          [174., 172., 173., ..., 170., 170., 172.],
          ...,
          [178., 170., 177., ..., 117., 120., 120.],
          [174., 186., 193., ..., 119., 119., 121.],
          [176., 176., 171., ..., 137., 160., 185.]],

         [[231., 229., 230., ..., 231., 228., 229.],
          [230., 228., 226., ..., 229., 227., 229.],
          [233., 230., 229., ..., 230., 230., 232.],
          ...,
          [177., 167., 170., ..., 154., 157., 158.],
          [172., 182., 188., ..., 154., 153., 154.],
          [174., 172., 169., ..., 167., 183., 202.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:13

analyse the exceptions in iter:17
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[110., 142., 151., ...,  39.,  40.,  38.],
          [109., 141., 152., ...,  36.,  40.,  36.],
          [105., 142., 151., ...,  39.,  44.,  39.],
          ...,
          [ 62.,  39.,  60., ...,  42.,  46.,  47.],
          [ 62.,  52.,  58., ...,  43.,  47.,  49.],
          [ 55.,  60.,  56., ...,  45.,  47.,  51.]],

         [[104., 135., 146., ...,  39.,  40.,  38.],
          [103., 133., 147., ...,  36.,  40.,  36.],
          [ 98., 133., 145., ...,  39.,  44.,  39.],
          ...,
          [ 59.,  38.,  64., ...,  44.,  44.,  44.],
          [ 57.,  51.,  61., ...,  46.,  45.,  46.],
          [ 51.,  60.,  60., ...,  48.,  46.,  48.]],

         [[ 97., 118., 120., ...,  39.,  40.,  38.],
          [ 95., 115., 119., ...,  37.,  40.,  36.],
          [ 90., 114., 117., ...,  41.,  45.,  40.],
          ...,
          [ 60.,  49.,  81., ...,  56.,  55.,  55.],
          [ 56.,  61.,  78., ...,  58.,  58.,  60.],
          [ 50.,  71.,  78., ...,  60.,  60.,  62.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:14

analyse the exceptions in iter:21
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[252., 249., 250., ..., 251., 251., 251.],
          [255., 252., 253., ..., 255., 255., 254.],
          [253., 250., 250., ..., 254., 254., 252.],
          ...,
          [254., 252., 253., ..., 252., 253., 252.],
          [250., 252., 255., ..., 254., 255., 254.],
          [236., 249., 250., ..., 250., 250., 251.]],

         [[  8.,  15.,   8., ...,   1.,   0.,   1.],
          [  7.,  15.,  13., ...,   1.,   0.,   4.],
          [  6.,  16.,  24., ...,   1.,   0.,   9.],
          ...,
          [ 66.,  62.,  64., ...,  70.,  69.,  70.],
          [ 49.,  53.,  59., ...,  70.,  68.,  59.],
          [ 37.,  48.,  42., ...,  78.,  74.,  58.]],

         [[ 42.,  42.,  39., ...,  11.,  15.,  30.],
          [ 43.,  44.,  42., ...,  11.,  18.,  33.],
          [ 42.,  42.,  43., ...,  10.,  20.,  37.],
          ...,
          [ 94.,  92.,  93., ..., 101., 103., 104.],
          [ 81.,  82.,  86., ..., 103., 100.,  89.],
          [ 68.,  76.,  73., ..., 113., 109.,  88.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:15

analyse the exceptions in iter:23
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[126., 102., 117., ...,  96., 113., 107.],
          [135., 113., 121., ..., 115., 114., 115.],
          [126., 124., 128., ..., 134., 115., 114.],
          ...,
          [141., 155., 134., ..., 149., 147., 122.],
          [153., 164., 146., ..., 163., 189., 184.],
          [125., 129., 124., ..., 133., 180., 168.]],

         [[100.,  76.,  93., ...,  74.,  90.,  84.],
          [109.,  86.,  94., ...,  89.,  89.,  90.],
          [102.,  97., 101., ..., 109.,  90.,  90.],
          ...,
          [111., 123., 102., ..., 140., 133., 106.],
          [122., 132., 119., ..., 156., 178., 174.],
          [100., 106., 102., ..., 127., 173., 162.]],

         [[ 71.,  49.,  60., ...,  42.,  58.,  52.],
          [ 73.,  52.,  56., ...,  58.,  55.,  53.],
          [ 61.,  59.,  60., ...,  77.,  55.,  50.],
          ...,
          [ 85.,  87.,  65., ..., 118., 116.,  94.],
          [ 83.,  89.,  81., ..., 147., 174., 173.],
          [ 56.,  64.,  68., ..., 124., 174., 164.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:16

analyse the exceptions in iter:24
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 73.,  71.,  77., ..., 183., 180., 185.],
          [ 73.,  75.,  78., ..., 181., 172., 174.],
          [ 77.,  94.,  99., ..., 175., 191., 185.],
          ...,
          [ 84.,  86., 118., ...,  79., 159., 117.],
          [ 76.,  81., 103., ...,  56.,  69., 104.],
          [102.,  91.,  95., ..., 100.,  72.,  48.]],

         [[ 77.,  68.,  69., ..., 210., 214., 225.],
          [ 74.,  68.,  64., ..., 229., 220., 218.],
          [ 72.,  82.,  81., ..., 213., 230., 226.],
          ...,
          [106., 105., 133., ...,  95., 177., 133.],
          [ 96.,  98., 116., ...,  80.,  90., 120.],
          [120., 109., 110., ..., 134.,  97.,  59.]],

         [[ 58.,  50.,  44., ..., 149., 143., 144.],
          [ 52.,  55.,  50., ..., 139., 129., 127.],
          [ 64.,  79.,  73., ..., 139., 152., 142.],
          ...,
          [ 56.,  58.,  84., ...,  78., 137.,  94.],
          [ 60.,  56.,  73., ...,  36.,  40.,  69.],
          [ 92.,  62.,  62., ...,  55.,  38.,  29.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:17

analyse the exceptions in iter:25
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[162., 164., 169., ..., 184., 190., 202.],
          [153., 158., 164., ..., 178., 189., 201.],
          [157., 161., 164., ..., 178., 190., 202.],
          ...,
          [214., 213., 213., ..., 240., 241., 242.],
          [218., 209., 208., ..., 232., 236., 239.],
          [216., 207., 201., ..., 231., 233., 235.]],

         [[164., 167., 171., ..., 176., 186., 198.],
          [151., 156., 163., ..., 171., 184., 198.],
          [151., 156., 160., ..., 170., 186., 199.],
          ...,
          [205., 193., 185., ..., 207., 206., 209.],
          [209., 188., 180., ..., 195., 196., 200.],
          [204., 189., 174., ..., 192., 194., 198.]],

         [[130., 128., 131., ..., 137., 146., 161.],
          [119., 120., 124., ..., 131., 143., 158.],
          [120., 121., 122., ..., 131., 142., 156.],
          ...,
          [193., 181., 174., ..., 193., 194., 196.],
          [198., 176., 169., ..., 182., 185., 187.],
          [197., 178., 156., ..., 178., 181., 183.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:18

analyse the exceptions in iter:28
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[128., 121., 138., ..., 130., 101., 122.],
          [133., 125., 136., ..., 131., 106., 127.],
          [141., 126., 141., ..., 132., 114., 126.],
          ...,
          [191., 186., 175., ..., 190., 182., 195.],
          [210., 207., 198., ..., 194., 184., 192.],
          [209., 206., 207., ..., 201., 193., 196.]],

         [[141., 134., 151., ..., 150., 121., 141.],
          [146., 138., 149., ..., 151., 126., 147.],
          [155., 139., 154., ..., 152., 134., 146.],
          ...,
          [178., 174., 160., ..., 179., 175., 188.],
          [195., 197., 179., ..., 179., 178., 186.],
          [194., 195., 189., ..., 187., 187., 190.]],

         [[123., 116., 133., ..., 138., 109., 129.],
          [128., 120., 131., ..., 139., 114., 135.],
          [136., 121., 136., ..., 140., 122., 134.],
          ...,
          [126., 124., 112., ..., 138., 137., 145.],
          [143., 144., 129., ..., 138., 133., 142.],
          [142., 143., 138., ..., 145., 142., 146.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:19

analyse the exceptions in iter:29
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[202., 202., 204., ..., 207., 205., 203.],
          [206., 206., 207., ..., 210., 208., 206.],
          [210., 211., 212., ..., 214., 212., 210.],
          ...,
          [218., 210., 194., ..., 243., 244., 243.],
          [219., 217., 216., ..., 241., 241., 241.],
          [217., 216., 217., ..., 239., 239., 240.]],

         [[204., 204., 206., ..., 208., 206., 204.],
          [208., 208., 209., ..., 211., 209., 207.],
          [212., 213., 214., ..., 214., 213., 211.],
          ...,
          [217., 209., 194., ..., 242., 242., 243.],
          [218., 216., 216., ..., 240., 240., 240.],
          [216., 215., 216., ..., 238., 238., 238.]],

         [[199., 199., 201., ..., 200., 199., 198.],
          [203., 203., 204., ..., 205., 203., 201.],
          [207., 208., 210., ..., 210., 208., 206.],
          ...,
          [222., 214., 198., ..., 247., 247., 247.],
          [223., 221., 220., ..., 245., 245., 245.],
          [221., 220., 221., ..., 243., 243., 243.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:20

analyse the exceptions in iter:31
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[236., 233., 234., ..., 148., 147., 140.],
          [243., 242., 243., ..., 163., 161., 159.],
          [245., 242., 245., ..., 163., 161., 157.],
          ...,
          [ 79.,  70.,  72., ...,  38.,  36.,  33.],
          [ 81.,  78.,  74., ...,  47.,  31.,  24.],
          [ 80.,  80.,  74., ...,  40.,  28.,  22.]],

         [[242., 239., 240., ..., 145., 145., 137.],
          [249., 247., 250., ..., 162., 160., 158.],
          [251., 248., 251., ..., 162., 160., 157.],
          ...,
          [ 74.,  65.,  68., ...,  31.,  29.,  25.],
          [ 79.,  73.,  68., ...,  38.,  24.,  17.],
          [ 80.,  77.,  67., ...,  30.,  21.,  15.]],

         [[238., 235., 236., ..., 140., 139., 131.],
          [245., 244., 246., ..., 162., 160., 158.],
          [247., 244., 247., ..., 166., 164., 161.],
          ...,
          [ 60.,  47.,  45., ...,  25.,  23.,  19.],
          [ 62.,  56.,  49., ...,  29.,  17.,  10.],
          [ 63.,  61.,  52., ...,  20.,  12.,   8.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:21

analyse the exceptions in iter:32
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 50.,  51.,  42., ...,  48.,  18.,  14.],
          [ 86.,  92.,  82., ...,  46.,  17.,  11.],
          [ 43.,  43.,  51., ...,  42.,  10.,   6.],
          ...,
          [220., 209., 199., ..., 177., 176., 175.],
          [188., 182., 182., ..., 176., 175., 174.],
          [188., 184., 186., ..., 176., 176., 173.]],

         [[ 64.,  63.,  55., ...,  45.,  18.,  15.],
          [107., 110.,  99., ...,  43.,  17.,  12.],
          [ 60.,  56.,  65., ...,  39.,  10.,   6.],
          ...,
          [165., 174., 172., ..., 171., 170., 168.],
          [178., 170., 161., ..., 168., 167., 166.],
          [167., 163., 167., ..., 169., 168., 165.]],

         [[ 37.,  41.,  41., ...,  42.,  14.,  12.],
          [ 67.,  76.,  67., ...,  41.,  14.,  10.],
          [ 42.,  41.,  46., ...,  37.,   9.,   5.],
          ...,
          [151., 165., 164., ..., 168., 167., 166.],
          [162., 162., 157., ..., 166., 165., 164.],
          [162., 157., 160., ..., 166., 166., 162.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:22

analyse the exceptions in iter:33
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[  7.,   7.,   5., ...,  82.,  80.,  69.],
          [  6.,   6.,   5., ...,  85.,  86.,  81.],
          [  1.,   7.,   8., ...,  98.,  96.,  86.],
          ...,
          [150., 135., 129., ...,  72.,  45.,  26.],
          [156., 153., 138., ...,  57.,  23.,  38.],
          [183., 191., 182., ...,  83.,  67., 114.]],

         [[  5.,   5.,   4., ...,  84.,  85.,  73.],
          [  4.,   4.,   3., ...,  86.,  88.,  80.],
          [  1.,   7.,   8., ...,  96.,  96.,  84.],
          ...,
          [153., 136., 129., ...,  72.,  51.,  32.],
          [156., 151., 136., ...,  58.,  32.,  45.],
          [193., 199., 189., ...,  83.,  74., 120.]],

         [[  8.,   8.,   6., ...,  78.,  81.,  68.],
          [  8.,   9.,   8., ...,  77.,  81.,  72.],
          [  6.,  12.,  13., ...,  83.,  85.,  73.],
          ...,
          [139., 121., 113., ...,  69.,  63.,  51.],
          [139., 130., 110., ...,  56.,  48.,  64.],
          [183., 185., 171., ...,  76.,  81., 119.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:23

analyse the exceptions in iter:35
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[251., 247., 247., ..., 229., 244., 251.],
          [249., 246., 246., ..., 233., 249., 252.],
          [167., 167., 167., ..., 217., 217., 220.],
          ...,
          [133., 123., 124., ..., 118., 114., 115.],
          [123., 124., 126., ..., 112., 108., 104.],
          [125., 129., 126., ..., 118., 112., 105.]],

         [[249., 245., 245., ..., 190., 231., 241.],
          [248., 244., 245., ..., 188., 237., 242.],
          [165., 164., 164., ..., 182., 211., 213.],
          ...,
          [130., 127., 130., ..., 125., 122., 125.],
          [125., 127., 129., ..., 122., 119., 119.],
          [128., 132., 130., ..., 128., 122., 121.]],

         [[250., 247., 247., ..., 146., 224., 241.],
          [248., 244., 244., ..., 141., 233., 241.],
          [148., 148., 149., ..., 139., 203., 208.],
          ...,
          [ 39.,  36.,  35., ...,  30.,  26.,  27.],
          [ 36.,  36.,  32., ...,  26.,  27.,  22.],
          [ 42.,  43.,  36., ...,  35.,  33.,  26.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:24

analyse the exceptions in iter:36
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[169., 131., 193., ..., 172., 169., 166.],
          [165., 127., 189., ..., 172., 169., 166.],
          [163., 126., 186., ..., 173., 170., 168.],
          ...,
          [147., 139., 145., ..., 220., 218., 219.],
          [146., 143., 152., ..., 221., 220., 219.],
          [148., 143., 146., ..., 223., 221., 220.]],

         [[122., 108., 196., ..., 187., 183., 181.],
          [119., 104., 192., ..., 186., 183., 180.],
          [117., 103., 189., ..., 187., 184., 182.],
          ...,
          [ 93.,  85.,  91., ..., 220., 218., 219.],
          [ 87.,  83.,  94., ..., 221., 220., 219.],
          [ 87.,  82.,  85., ..., 223., 221., 220.]],

         [[ 65.,  75., 192., ..., 187., 183., 181.],
          [ 62.,  72., 187., ..., 186., 183., 180.],
          [ 60.,  71., 185., ..., 187., 184., 182.],
          ...,
          [ 35.,  39.,  42., ..., 220., 218., 219.],
          [ 31.,  39.,  43., ..., 222., 220., 219.],
          [ 28.,  31.,  30., ..., 223., 221., 220.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:25

analyse the exceptions in iter:37
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 95.,  88.,  86., ..., 101.,  91., 105.],
          [ 82.,  75.,  76., ...,  94.,  51.,  84.],
          [ 77.,  74.,  71., ...,  71.,  47.,  88.],
          ...,
          [ 97.,  92.,  97., ...,  86.,  94.,  90.],
          [ 95.,  84.,  89., ...,  96., 102.,  97.],
          [ 91.,  83.,  82., ..., 100., 105., 108.]],

         [[105.,  97.,  96., ..., 116., 108., 124.],
          [ 90.,  83.,  84., ..., 102.,  61.,  97.],
          [ 85.,  81.,  78., ...,  74.,  52.,  95.],
          ...,
          [ 95.,  92.,  93., ...,  91.,  97.,  97.],
          [ 90.,  86.,  89., ...,  97.,  96.,  94.],
          [ 84.,  81.,  81., ...,  96.,  97., 102.]],

         [[127., 120., 118., ..., 144., 136., 157.],
          [110., 104., 104., ..., 123.,  80., 122.],
          [103.,  98.,  95., ...,  86.,  63., 111.],
          ...,
          [ 72.,  69.,  70., ...,  65.,  72.,  71.],
          [ 65.,  59.,  62., ...,  76.,  77.,  73.],
          [ 63.,  57.,  55., ...,  78.,  80.,  83.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:26

analyse the exceptions in iter:38
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[110., 223., 243., ...,   7.,   0.,   0.],
          [102., 213., 244., ...,  98.,  80.,  31.],
          [ 99., 204., 248., ..., 221., 198.,  89.],
          ...,
          [ 58.,  58.,  51., ...,   8.,   9.,   6.],
          [ 69.,  54.,  49., ...,  48.,  52.,  35.],
          [ 81.,  52.,  50., ...,  15.,  16.,  13.]],

         [[ 90., 197., 215., ...,   2.,   0.,   0.],
          [ 83., 187., 217., ...,  90.,  74.,  27.],
          [ 78., 179., 221., ..., 209., 188.,  81.],
          ...,
          [ 63.,  70.,  69., ...,   8.,  10.,   8.],
          [ 72.,  64.,  65., ...,  44.,  47.,  32.],
          [ 80.,  58.,  63., ...,   5.,   5.,   3.]],

         [[ 84., 185., 201., ...,   3.,   0.,   0.],
          [ 77., 176., 203., ...,  92.,  75.,  28.],
          [ 72., 167., 207., ..., 213., 191.,  83.],
          ...,
          [ 87., 100., 103., ...,  10.,   7.,   5.],
          [ 94.,  92.,  98., ...,  43.,  44.,  30.],
          [100.,  84.,  93., ...,   5.,   5.,   4.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:27

analyse the exceptions in iter:39
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 98., 119., 109., ...,  75.,  60.,  61.],
          [ 44.,  75.,  69., ...,  81.,  55.,  65.],
          [ 73.,  94., 111., ...,  77.,  60.,  58.],
          ...,
          [ 96., 100., 129., ...,  72.,  68.,  85.],
          [124., 114., 110., ...,  84.,  81.,  73.],
          [ 93.,  98.,  95., ...,  73.,  55.,  72.]],

         [[110., 132., 122., ...,  97.,  82.,  84.],
          [ 56.,  86.,  80., ..., 103.,  77.,  87.],
          [ 84., 105., 122., ...,  99.,  82.,  82.],
          ...,
          [ 98., 100., 126., ...,  73.,  71.,  93.],
          [137., 124., 117., ...,  92.,  89.,  81.],
          [110., 112., 106., ...,  82.,  63.,  79.]],

         [[ 96., 117., 107., ...,  76.,  62.,  67.],
          [ 46.,  76.,  70., ...,  82.,  57.,  74.],
          [ 77.,  98., 115., ...,  78.,  61.,  61.],
          ...,
          [ 99., 100., 124., ...,  69.,  67.,  85.],
          [135., 121., 111., ...,  85.,  84.,  74.],
          [107., 107.,  99., ...,  75.,  58.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:28

analyse the exceptions in iter:40
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[101.,  94.,  98., ..., 121., 127., 143.],
          [120., 131., 124., ..., 115., 121., 144.],
          [120., 139., 140., ..., 105., 107., 121.],
          ...,
          [ 48.,  31.,  37., ..., 188., 159., 125.],
          [ 52.,  42.,  44., ..., 173., 165., 150.],
          [ 41.,  38.,  42., ..., 164., 145., 155.]],

         [[114., 116., 112., ..., 119., 130., 136.],
          [122., 132., 119., ..., 116., 126., 141.],
          [126., 140., 139., ...,  97., 103., 121.],
          ...,
          [ 45.,  31.,  37., ..., 157., 130., 106.],
          [ 46.,  40.,  45., ..., 135., 136., 132.],
          [ 42.,  38.,  41., ..., 130., 120., 134.]],

         [[ 35.,  48.,  42., ...,  58.,  66.,  90.],
          [ 64.,  98.,  74., ...,  53.,  63.,  77.],
          [ 50.,  82.,  82., ...,  56.,  61.,  65.],
          ...,
          [ 40.,  24.,  27., ..., 103.,  93.,  60.],
          [ 41.,  32.,  32., ..., 102.,  99.,  92.],
          [ 32.,  33.,  33., ...,  98.,  79.,  91.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:29

analyse the exceptions in iter:41
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[145., 145., 148., ..., 237., 230., 224.],
          [147., 150., 168., ..., 231., 221., 214.],
          [145., 150., 178., ..., 229., 230., 232.],
          ...,
          [231., 230., 227., ..., 235., 234., 231.],
          [224., 231., 231., ..., 240., 228., 223.],
          [125., 225., 232., ..., 224., 216., 228.]],

         [[125., 126., 130., ..., 210., 202., 199.],
          [126., 132., 147., ..., 203., 192., 190.],
          [124., 130., 155., ..., 201., 201., 205.],
          ...,
          [202., 202., 198., ..., 209., 207., 203.],
          [199., 200., 202., ..., 213., 201., 199.],
          [120., 200., 204., ..., 197., 189., 203.]],

         [[ 83.,  82.,  82., ..., 170., 161., 158.],
          [ 83.,  84., 107., ..., 163., 151., 149.],
          [ 79.,  84., 110., ..., 161., 160., 166.],
          ...,
          [169., 170., 166., ..., 172., 170., 167.],
          [163., 167., 170., ..., 177., 162., 162.],
          [ 98., 166., 170., ..., 160., 150., 167.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:30

analyse the exceptions in iter:42
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[127., 148., 192., ..., 112., 144., 153.],
          [ 89., 111., 151., ..., 161., 166., 163.],
          [ 98.,  94., 110., ..., 173., 169., 173.],
          ...,
          [156., 151., 149., ..., 150., 149., 142.],
          [163., 162., 161., ..., 135., 141., 138.],
          [160., 160., 163., ..., 138., 143., 151.]],

         [[126., 144., 181., ..., 102., 135., 142.],
          [ 90., 110., 141., ..., 152., 158., 154.],
          [ 94.,  94., 109., ..., 159., 154., 157.],
          ...,
          [152., 145., 144., ..., 144., 148., 143.],
          [158., 155., 151., ..., 131., 137., 134.],
          [152., 151., 153., ..., 121., 131., 135.]],

         [[129., 144., 175., ...,  98., 123., 130.],
          [ 94., 116., 137., ..., 129., 132., 128.],
          [ 94.,  99., 118., ..., 132., 129., 132.],
          ...,
          [115., 107., 104., ..., 110., 114., 104.],
          [122., 120., 118., ...,  99., 109., 103.],
          [122., 120., 120., ..., 103., 107., 117.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:31

analyse the exceptions in iter:43
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 99.,  98., 100., ..., 129., 132., 130.],
          [100., 100., 102., ..., 122., 135., 132.],
          [104., 104., 106., ..., 165., 149., 140.],
          ...,
          [195., 199., 221., ..., 209., 209., 208.],
          [197., 201., 211., ..., 208., 210., 209.],
          [199., 197., 204., ..., 208., 210., 209.]],

         [[166., 165., 167., ..., 186., 190., 188.],
          [166., 164., 167., ..., 152., 189., 188.],
          [169., 167., 170., ..., 165., 189., 189.],
          ...,
          [173., 177., 194., ..., 191., 190., 188.],
          [173., 178., 184., ..., 190., 191., 191.],
          [173., 172., 174., ..., 189., 191., 190.]],

         [[198., 196., 199., ..., 212., 215., 213.],
          [195., 194., 197., ..., 169., 213., 214.],
          [197., 195., 198., ..., 160., 205., 212.],
          ...,
          [149., 153., 166., ..., 169., 171., 173.],
          [149., 149., 147., ..., 171., 173., 175.],
          [149., 144., 137., ..., 174., 177., 175.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:32

analyse the exceptions in iter:44
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[139., 144., 146., ..., 132., 131., 129.],
          [139., 124., 128., ..., 110., 108., 114.],
          [172., 126., 116., ...,  67.,  68., 113.],
          ...,
          [ 95.,  93.,  91., ...,  81., 104., 107.],
          [132., 124., 119., ..., 114., 131., 132.],
          [110., 124., 129., ..., 129., 128., 112.]],

         [[154., 160., 162., ..., 140., 142., 141.],
          [148., 137., 149., ..., 114., 112., 127.],
          [162., 114., 109., ...,  71.,  68., 119.],
          ...,
          [ 88.,  82.,  84., ...,  94., 103., 102.],
          [109., 105., 104., ..., 104., 112., 110.],
          [108., 116., 116., ..., 117., 114., 105.]],

         [[188., 192., 192., ...,  77.,  76.,  70.],
          [180., 167., 178., ...,  81.,  76.,  68.],
          [172., 121., 129., ...,  50.,  58.,  78.],
          ...,
          [ 44.,  45.,  44., ...,  30.,  51.,  53.],
          [ 74.,  69.,  61., ...,  59.,  74.,  70.],
          [ 52.,  67.,  67., ...,  80.,  75.,  59.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:33

analyse the exceptions in iter:45
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 54.,  59.,  56., ..., 133., 131., 132.],
          [ 59.,  62.,  55., ..., 193., 200., 197.],
          [ 41.,  41.,  36., ..., 202., 196., 190.],
          ...,
          [105.,  97.,  96., ...,  98., 100., 100.],
          [ 86.,  96.,  97., ...,  94.,  98., 100.],
          [ 70.,  92., 113., ...,  98.,  96.,  92.]],

         [[ 31.,  34.,  37., ...,  92.,  89.,  94.],
          [ 38.,  39.,  36., ..., 135., 144., 142.],
          [ 26.,  25.,  21., ..., 144., 141., 136.],
          ...,
          [161., 163., 170., ..., 145., 138., 130.],
          [149., 157., 164., ..., 127., 126., 124.],
          [136., 146., 169., ..., 121., 117., 112.]],

         [[ 18.,  19.,  22., ...,  53.,  49.,  53.],
          [ 26.,  26.,  25., ...,  77.,  86.,  86.],
          [ 18.,  16.,  13., ...,  84.,  81.,  79.],
          ...,
          [157., 162., 164., ..., 144., 135., 123.],
          [143., 156., 160., ..., 122., 120., 114.],
          [128., 145., 168., ..., 111., 106., 101.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:34

analyse the exceptions in iter:49
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[255., 255., 255., ..., 255., 255., 255.],
          [255., 252., 255., ..., 254., 254., 254.],
          [255., 252., 255., ..., 254., 254., 254.],
          ...,
          [255., 254., 254., ..., 254., 254., 254.],
          [255., 253., 254., ..., 254., 254., 254.],
          [255., 255., 255., ..., 255., 255., 255.]],

         [[255., 255., 255., ..., 255., 255., 255.],
          [255., 252., 255., ..., 254., 254., 254.],
          [255., 252., 255., ..., 254., 254., 254.],
          ...,
          [255., 254., 254., ..., 254., 254., 254.],
          [255., 253., 254., ..., 254., 254., 254.],
          [255., 255., 255., ..., 255., 255., 255.]],

         [[255., 255., 255., ..., 255., 255., 255.],
          [255., 252., 255., ..., 254., 254., 254.],
          [255., 252., 255., ..., 254., 254., 254.],
          ...,
          [255., 254., 254., ..., 254., 254., 254.],
          [255., 253., 254., ..., 254., 254., 254.],
          [255., 255., 255., ..., 255., 255., 255.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:35

final statics:
total operators:28
tensorflow --> nums:35,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:2,distinct_bugs:1
tensorflow --> 
conv2d:35
mindspore --> 
torch --> 
flatten:2

generate models:35

analyse the exceptions in iter:52
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 63.,  77.,  66., ...,  76.,  86., 114.],
          [ 72.,  70.,  64., ...,  84.,  81.,  88.],
          [ 56.,  70.,  54., ..., 139., 104.,  77.],
          ...,
          [118., 152., 175., ..., 102., 128., 179.],
          [137., 148., 148., ..., 121., 170., 203.],
          [171., 173., 153., ..., 167., 187., 174.]],

         [[ 70.,  88.,  88., ...,  91.,  94., 116.],
          [ 71.,  83.,  85., ...,  94.,  91.,  97.],
          [ 65.,  82.,  76., ..., 142., 114.,  93.],
          ...,
          [107., 135., 155., ...,  79., 105., 150.],
          [123., 129., 129., ...,  94., 142., 168.],
          [145., 146., 130., ..., 136., 157., 143.]],

         [[ 37.,  63.,  63., ...,  65.,  71.,  95.],
          [ 39.,  58.,  58., ...,  71.,  67.,  73.],
          [ 34.,  53.,  48., ..., 120.,  90.,  71.],
          ...,
          [ 85., 111., 133., ...,  63.,  85., 114.],
          [101., 109., 105., ...,  74., 116., 130.],
          [108., 107.,  96., ..., 107., 129., 115.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:36

analyse the exceptions in iter:53
tensorflow exception:
{'id': 40, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[157., 156., 157., ..., 177., 177., 175.],
          [162., 162., 162., ..., 187., 182., 179.],
          [165., 164., 165., ..., 211., 204., 191.],
          ...,
          [172., 168., 166., ..., 203., 203., 200.],
          [177., 175., 172., ..., 203., 203., 200.],
          [182., 182., 179., ..., 203., 203., 200.]],

         [[159., 158., 159., ..., 183., 180., 179.],
          [164., 164., 164., ..., 194., 187., 183.],
          [167., 166., 167., ..., 220., 210., 196.],
          ...,
          [174., 170., 167., ..., 205., 205., 202.],
          [179., 177., 173., ..., 205., 205., 202.],
          [184., 183., 180., ..., 205., 205., 202.]],

         [[146., 145., 146., ..., 185., 183., 179.],
          [151., 151., 151., ..., 200., 193., 186.],
          [154., 153., 154., ..., 226., 219., 201.],
          ...,
          [161., 158., 158., ..., 201., 201., 199.],
          [166., 166., 164., ..., 202., 202., 199.],
          [171., 174., 173., ..., 202., 202., 199.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:37

analyse the exceptions in iter:0
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:2

analyse the exceptions in iter:2
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [113., 111., 105., ...,  72.,  72.,  72.],
          [111., 104.,  99., ...,  68.,  70.,  78.],
          [106.,  99.,  95., ...,  78.,  79.,  80.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [120., 118., 112., ...,  81.,  80.,  80.],
          [118., 111., 106., ...,  75.,  76.,  84.],
          [113., 106., 102., ...,  85.,  85.,  86.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [112., 111., 106., ...,  80.,  79.,  79.],
          [110., 104.,  98., ...,  73.,  75.,  82.],
          [105.,  98.,  94., ...,  83.,  83.,  84.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:3

analyse the exceptions in iter:3
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  37.,  38., ...,  76.,  81.,  85.],
          [ 33.,  34.,  32., ...,  95.,  96.,  85.],
          [ 39.,  40.,  57., ...,  93., 107.,  95.],
          ...,
          [ 83.,  87.,  84., ...,  99.,  90.,  81.],
          [ 88.,  90.,  93., ...,  80.,  76.,  82.],
          [ 97.,  94.,  93., ...,  54.,  63.,  72.]],

         [[ 25.,  34.,  35., ...,  67.,  72.,  76.],
          [ 28.,  30.,  27., ...,  82.,  82.,  72.],
          [ 32.,  33.,  50., ...,  76.,  89.,  77.],
          ...,
          [ 73.,  77.,  74., ...,  93.,  84.,  75.],
          [ 72.,  74.,  77., ...,  74.,  70.,  76.],
          [ 78.,  75.,  75., ...,  47.,  56.,  65.]],

         [[ 10.,  19.,  20., ...,  39.,  43.,  47.],
          [ 13.,  14.,  12., ...,  55.,  56.,  45.],
          [ 15.,  17.,  33., ...,  52.,  66.,  54.],
          ...,
          [ 52.,  56.,  52., ...,  70.,  61.,  52.],
          [ 51.,  52.,  56., ...,  53.,  49.,  55.],
          [ 56.,  53.,  53., ...,  28.,  37.,  46.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:4

analyse the exceptions in iter:4
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[170., 168., 177., ..., 162., 158., 157.],
          [168., 172., 171., ..., 159., 156., 154.],
          [154., 149., 129., ..., 161., 157., 154.],
          ...,
          [ 74.,  76.,  78., ...,  71.,  68.,  61.],
          [ 68.,  69.,  72., ...,  76.,  71.,  71.],
          [ 67.,  68.,  69., ...,  75.,  71.,  73.]],

         [[180., 178., 185., ..., 179., 178., 177.],
          [181., 185., 183., ..., 177., 176., 174.],
          [170., 165., 144., ..., 178., 177., 174.],
          ...,
          [ 84.,  85.,  85., ...,  75.,  72.,  65.],
          [ 76.,  77.,  79., ...,  80.,  75.,  75.],
          [ 75.,  76.,  75., ...,  79.,  75.,  77.]],

         [[198., 196., 203., ..., 215., 214., 212.],
          [198., 201., 200., ..., 212., 211., 209.],
          [186., 181., 162., ..., 214., 212., 209.],
          ...,
          [ 80.,  81.,  82., ...,  78.,  75.,  68.],
          [ 77.,  78.,  78., ...,  83.,  78.,  78.],
          [ 78.,  79.,  76., ...,  82.,  78.,  80.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:5

analyse the exceptions in iter:6
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[164., 105., 118., ..., 109., 108.,  91.],
          [167., 116.,  72., ..., 105., 105.,  89.],
          [140., 142., 119., ..., 104.,  84.,  78.],
          ...,
          [139., 142., 135., ...,  89.,  97., 126.],
          [163., 153., 146., ...,  85.,  98., 127.],
          [183., 176., 154., ...,  94.,  91., 122.]],

         [[206., 140., 148., ..., 147., 147., 129.],
          [213., 160., 109., ..., 142., 142., 127.],
          [191., 193., 163., ..., 139., 120., 115.],
          ...,
          [148., 155., 156., ..., 134., 148., 176.],
          [157., 164., 164., ..., 130., 148., 178.],
          [153., 182., 154., ..., 134., 133., 170.]],

         [[ 84.,  61., 101., ...,  73.,  69.,  57.],
          [ 84.,  49.,  43., ...,  79.,  72.,  57.],
          [ 65.,  66.,  79., ...,  84.,  58.,  49.],
          ...,
          [ 81.,  74.,  72., ...,  28.,  24.,  49.],
          [ 85.,  82.,  90., ...,  19.,  27.,  48.],
          [102., 116., 100., ...,  29.,  26.,  44.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:6

analyse the exceptions in iter:7
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  30.,  33., ...,  43.,  52.,  46.],
          [ 27.,  27.,  21., ..., 112., 117., 115.],
          [ 34.,  33.,  24., ..., 175., 177., 176.],
          ...,
          [142., 142., 150., ..., 134., 128., 134.],
          [140., 145., 150., ..., 131., 130., 122.],
          [134., 136., 136., ..., 106., 104., 101.]],

         [[ 35.,  34.,  44., ...,  56.,  64.,  58.],
          [ 30.,  28.,  31., ..., 136., 140., 138.],
          [ 36.,  33.,  30., ..., 208., 209., 208.],
          ...,
          [176., 176., 184., ..., 175., 168., 175.],
          [176., 180., 186., ..., 170., 170., 162.],
          [171., 171., 171., ..., 144., 142., 140.]],

         [[ 39.,  44.,  47., ...,  45.,  53.,  47.],
          [ 38.,  41.,  39., ...,  97., 101., 100.],
          [ 42.,  43.,  40., ..., 143., 144., 143.],
          ...,
          [118., 118., 127., ..., 119., 112., 119.],
          [124., 129., 134., ..., 119., 119., 111.],
          [123., 124., 124., ..., 100.,  99.,  96.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:7

analyse the exceptions in iter:8
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[134., 131., 128., ..., 127., 127., 128.],
          [133., 129., 128., ..., 127., 127., 128.],
          [128., 127., 128., ..., 126., 126., 126.],
          ...,
          [174., 171., 155., ...,  27.,  29.,  28.],
          [194., 189., 159., ...,  30.,  30.,  30.],
          [193., 181., 168., ...,  31.,  32.,  32.]],

         [[186., 184., 182., ..., 181., 181., 182.],
          [189., 186., 186., ..., 183., 183., 184.],
          [185., 182., 182., ..., 181., 181., 180.],
          ...,
          [208., 206., 189., ...,  94.,  96.,  94.],
          [221., 215., 196., ...,  95.,  96.,  95.],
          [217., 208., 201., ...,  94.,  94.,  94.]],

         [[223., 220., 218., ..., 222., 222., 223.],
          [228., 224., 224., ..., 224., 224., 225.],
          [226., 223., 223., ..., 222., 222., 221.],
          ...,
          [235., 229., 216., ..., 136., 137., 136.],
          [244., 239., 225., ..., 138., 139., 140.],
          [237., 230., 227., ..., 136., 137., 138.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:8

analyse the exceptions in iter:9
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[125., 110., 102., ..., 202., 200., 202.],
          [142., 146., 176., ..., 195., 198., 204.],
          [180., 143., 156., ..., 122., 139., 158.],
          ...,
          [104., 101., 101., ..., 126., 126., 125.],
          [104., 105., 109., ..., 138., 137., 137.],
          [105., 108., 115., ..., 143., 143., 144.]],

         [[125., 101.,  90., ..., 207., 205., 208.],
          [146., 144., 172., ..., 201., 205., 211.],
          [185., 146., 157., ..., 111., 128., 147.],
          ...,
          [ 82.,  80.,  81., ..., 103., 103., 101.],
          [ 81.,  84.,  88., ..., 113., 113., 112.],
          [ 83.,  87.,  94., ..., 117., 116., 116.]],

         [[116.,  91.,  83., ..., 214., 212., 214.],
          [142., 139., 170., ..., 205., 209., 215.],
          [183., 146., 157., ..., 113., 131., 150.],
          ...,
          [ 41.,  39.,  38., ...,  67.,  69.,  68.],
          [ 40.,  41.,  43., ...,  78.,  80.,  81.],
          [ 42.,  45.,  50., ...,  82.,  84.,  86.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:9

final statics:
total operators:28
tensorflow --> nums:9,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:9
mindspore --> 
torch --> 

generate models:9

analyse the exceptions in iter:10
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[53., 54., 56., ..., 47., 41., 24.],
          [46., 53., 54., ..., 42., 39., 28.],
          [45., 50., 46., ..., 38., 36., 29.],
          ...,
          [71., 74., 80., ..., 51., 46., 49.],
          [75., 79., 81., ..., 61., 64., 48.],
          [85., 85., 86., ..., 61., 64., 49.]],

         [[65., 63., 60., ..., 51., 45., 28.],
          [59., 62., 59., ..., 46., 43., 32.],
          [59., 60., 52., ..., 42., 40., 33.],
          ...,
          [83., 83., 85., ..., 54., 49., 50.],
          [82., 85., 85., ..., 65., 67., 50.],
          [83., 84., 86., ..., 65., 67., 50.]],

         [[53., 52., 50., ..., 50., 44., 27.],
          [41., 45., 44., ..., 45., 42., 31.],
          [38., 41., 34., ..., 41., 39., 32.],
          ...,
          [66., 66., 67., ..., 33., 34., 41.],
          [67., 69., 67., ..., 41., 48., 41.],
          [71., 71., 70., ..., 39., 46., 41.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:10

analyse the exceptions in iter:11
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[142., 172., 176., ..., 216., 198., 205.],
          [191., 196., 174., ..., 229., 222., 217.],
          [220., 217., 192., ..., 224., 225., 218.],
          ...,
          [197., 196., 201., ..., 200., 199., 205.],
          [196., 191., 193., ..., 198., 199., 201.],
          [186., 182., 174., ..., 158., 158., 163.]],

         [[149., 172., 168., ..., 212., 194., 202.],
          [190., 192., 166., ..., 222., 215., 210.],
          [212., 209., 183., ..., 214., 214., 208.],
          ...,
          [152., 152., 156., ..., 165., 165., 164.],
          [157., 152., 154., ..., 164., 165., 161.],
          [150., 147., 139., ..., 124., 125., 125.]],

         [[152., 167., 154., ..., 211., 193., 200.],
          [192., 190., 159., ..., 220., 213., 207.],
          [212., 208., 182., ..., 209., 210., 203.],
          ...,
          [136., 135., 140., ..., 146., 146., 150.],
          [139., 135., 136., ..., 144., 145., 146.],
          [133., 130., 121., ..., 105., 106., 111.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:11

analyse the exceptions in iter:12
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[164., 162., 162., ..., 157., 153., 153.],
          [168., 166., 166., ..., 164., 160., 158.],
          [172., 170., 171., ..., 168., 165., 163.],
          ...,
          [123., 117., 112., ..., 117.,  95., 120.],
          [120., 116., 112., ..., 126., 120., 120.],
          [121., 120., 116., ..., 124., 124., 120.]],

         [[215., 212., 212., ..., 210., 208., 203.],
          [218., 215., 215., ..., 212., 209., 205.],
          [220., 217., 218., ..., 212., 208., 207.],
          ...,
          [160., 154., 149., ..., 136., 115., 149.],
          [156., 151., 147., ..., 149., 144., 152.],
          [154., 152., 148., ..., 152., 154., 154.]],

         [[244., 240., 240., ..., 237., 235., 234.],
          [245., 242., 242., ..., 238., 236., 235.],
          [246., 243., 244., ..., 238., 235., 236.],
          ...,
          [105., 102.,  99., ..., 100.,  79., 100.],
          [100.,  99.,  96., ..., 110., 103., 101.],
          [ 96.,  99.,  97., ..., 108., 107., 100.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:12

analyse the exceptions in iter:13
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 17.,  17.,  17., ...,  23.,  22.,  19.],
          [ 18.,  18.,  18., ...,  24.,  23.,  22.],
          [ 18.,  18.,  19., ...,  24.,  23.,  23.],
          ...,
          [217., 226., 210., ...,  33.,  32.,  33.],
          [219., 222., 214., ...,  35.,  34.,  33.],
          [210., 221., 215., ...,  36.,  34.,  32.]],

         [[  3.,   3.,   2., ...,  13.,  12.,   9.],
          [  4.,   4.,   4., ...,  14.,  13.,  12.],
          [  4.,   4.,   5., ...,  14.,  13.,  13.],
          ...,
          [214., 219., 201., ...,  24.,  23.,  24.],
          [215., 215., 208., ...,  26.,  25.,  24.],
          [208., 216., 212., ...,  27.,  25.,  23.]],

         [[  2.,   2.,   1., ...,  11.,  10.,   7.],
          [  3.,   3.,   3., ...,  12.,  11.,  10.],
          [  3.,   3.,   4., ...,  12.,  11.,  11.],
          ...,
          [223., 227., 213., ...,  17.,  16.,  17.],
          [230., 229., 225., ...,  19.,  18.,  17.],
          [223., 229., 227., ...,  20.,  18.,  16.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:13

analyse the exceptions in iter:15
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[100., 100., 101., ...,  95.,  94.,  95.],
          [103., 103., 104., ...,  97.,  97.,  97.],
          [107., 106., 106., ..., 100., 100., 101.],
          ...,
          [165., 159., 167., ...,  75.,  75.,  72.],
          [158., 173., 182., ...,  76.,  75.,  77.],
          [161., 162., 160., ...,  98., 129., 162.]],

         [[168., 168., 167., ..., 165., 165., 167.],
          [170., 168., 168., ..., 167., 166., 168.],
          [174., 172., 173., ..., 170., 170., 172.],
          ...,
          [178., 170., 177., ..., 117., 120., 120.],
          [174., 186., 193., ..., 119., 119., 121.],
          [176., 176., 171., ..., 137., 160., 185.]],

         [[231., 229., 230., ..., 231., 228., 229.],
          [230., 228., 226., ..., 229., 227., 229.],
          [233., 230., 229., ..., 230., 230., 232.],
          ...,
          [177., 167., 170., ..., 154., 157., 158.],
          [172., 182., 188., ..., 154., 153., 154.],
          [174., 172., 169., ..., 167., 183., 202.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:14

analyse the exceptions in iter:17
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[110., 142., 151., ...,  39.,  40.,  38.],
          [109., 141., 152., ...,  36.,  40.,  36.],
          [105., 142., 151., ...,  39.,  44.,  39.],
          ...,
          [ 62.,  39.,  60., ...,  42.,  46.,  47.],
          [ 62.,  52.,  58., ...,  43.,  47.,  49.],
          [ 55.,  60.,  56., ...,  45.,  47.,  51.]],

         [[104., 135., 146., ...,  39.,  40.,  38.],
          [103., 133., 147., ...,  36.,  40.,  36.],
          [ 98., 133., 145., ...,  39.,  44.,  39.],
          ...,
          [ 59.,  38.,  64., ...,  44.,  44.,  44.],
          [ 57.,  51.,  61., ...,  46.,  45.,  46.],
          [ 51.,  60.,  60., ...,  48.,  46.,  48.]],

         [[ 97., 118., 120., ...,  39.,  40.,  38.],
          [ 95., 115., 119., ...,  37.,  40.,  36.],
          [ 90., 114., 117., ...,  41.,  45.,  40.],
          ...,
          [ 60.,  49.,  81., ...,  56.,  55.,  55.],
          [ 56.,  61.,  78., ...,  58.,  58.,  60.],
          [ 50.,  71.,  78., ...,  60.,  60.,  62.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:15

analyse the exceptions in iter:19
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 23.,  47.,  52., ..., 131., 182., 215.],
          [ 32.,  51.,  56., ..., 149., 204., 209.],
          [ 41.,  59.,  60., ..., 138., 196., 203.],
          ...,
          [167., 177., 182., ..., 199., 176., 145.],
          [166., 165., 165., ..., 183., 183., 189.],
          [175., 173., 173., ..., 190., 188., 192.]],

         [[ 27.,  49.,  46., ..., 130., 180., 212.],
          [ 31.,  49.,  49., ..., 148., 206., 217.],
          [ 37.,  57.,  59., ..., 138., 200., 217.],
          ...,
          [167., 177., 182., ..., 192., 171., 140.],
          [166., 165., 165., ..., 181., 182., 187.],
          [175., 173., 173., ..., 187., 186., 189.]],

         [[ 22.,  41.,  30., ..., 117., 174., 230.],
          [ 24.,  38.,  34., ..., 133., 197., 232.],
          [ 25.,  47.,  51., ..., 125., 194., 233.],
          ...,
          [168., 177., 182., ..., 192., 171., 140.],
          [166., 165., 165., ..., 181., 182., 188.],
          [175., 173., 173., ..., 184., 183., 186.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:16

analyse the exceptions in iter:20
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[153., 174., 155., ..., 122., 138.,  97.],
          [160., 164., 150., ..., 137., 160., 103.],
          [140., 147., 136., ..., 104., 125.,  93.],
          ...,
          [175., 170., 170., ..., 193., 197., 199.],
          [174., 173., 171., ..., 200., 202., 208.],
          [168., 164., 166., ..., 204., 204., 206.]],

         [[157., 180., 165., ..., 125., 143., 101.],
          [163., 170., 159., ..., 135., 161., 109.],
          [143., 152., 145., ..., 103., 128., 102.],
          ...,
          [177., 172., 172., ..., 203., 206., 204.],
          [177., 176., 174., ..., 208., 209., 212.],
          [173., 169., 171., ..., 209., 208., 210.]],

         [[155., 188., 172., ..., 123., 141.,  97.],
          [165., 180., 169., ..., 129., 157., 107.],
          [147., 166., 158., ...,  99., 125., 101.],
          ...,
          [179., 174., 174., ..., 212., 214., 213.],
          [181., 180., 178., ..., 216., 218., 221.],
          [180., 175., 177., ..., 217., 217., 219.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:17

analyse the exceptions in iter:21
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[252., 249., 250., ..., 251., 251., 251.],
          [255., 252., 253., ..., 255., 255., 254.],
          [253., 250., 250., ..., 254., 254., 252.],
          ...,
          [254., 252., 253., ..., 252., 253., 252.],
          [250., 252., 255., ..., 254., 255., 254.],
          [236., 249., 250., ..., 250., 250., 251.]],

         [[  8.,  15.,   8., ...,   1.,   0.,   1.],
          [  7.,  15.,  13., ...,   1.,   0.,   4.],
          [  6.,  16.,  24., ...,   1.,   0.,   9.],
          ...,
          [ 66.,  62.,  64., ...,  70.,  69.,  70.],
          [ 49.,  53.,  59., ...,  70.,  68.,  59.],
          [ 37.,  48.,  42., ...,  78.,  74.,  58.]],

         [[ 42.,  42.,  39., ...,  11.,  15.,  30.],
          [ 43.,  44.,  42., ...,  11.,  18.,  33.],
          [ 42.,  42.,  43., ...,  10.,  20.,  37.],
          ...,
          [ 94.,  92.,  93., ..., 101., 103., 104.],
          [ 81.,  82.,  86., ..., 103., 100.,  89.],
          [ 68.,  76.,  73., ..., 113., 109.,  88.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:18

analyse the exceptions in iter:26
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[131., 124., 116., ..., 184., 185., 184.],
          [127., 124., 116., ..., 177., 180., 186.],
          [123., 121., 113., ..., 179., 187., 194.],
          ...,
          [ 99.,  83.,  54., ..., 138., 155., 165.],
          [ 97.,  77.,  43., ..., 140., 154., 163.],
          [ 96.,  71.,  35., ..., 140., 156., 164.]],

         [[ 81.,  76.,  70., ..., 152., 153., 152.],
          [ 76.,  75.,  69., ..., 142., 146., 152.],
          [ 73.,  73.,  67., ..., 142., 150., 158.],
          ...,
          [ 50.,  42.,  27., ..., 103., 113., 118.],
          [ 50.,  39.,  21., ..., 105., 112., 116.],
          [ 49.,  36.,  16., ..., 104., 114., 118.]],

         [[ 32.,  27.,  20., ..., 114., 117., 120.],
          [ 27.,  26.,  19., ..., 106., 110., 116.],
          [ 23.,  24.,  17., ..., 106., 114., 118.],
          ...,
          [ 10.,   5.,   5., ...,  68.,  72.,  74.],
          [ 10.,   5.,   4., ...,  69.,  71.,  71.],
          [ 10.,   4.,   3., ...,  69.,  73.,  73.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:19

analyse the exceptions in iter:28
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[128., 121., 138., ..., 130., 101., 122.],
          [133., 125., 136., ..., 131., 106., 127.],
          [141., 126., 141., ..., 132., 114., 126.],
          ...,
          [191., 186., 175., ..., 190., 182., 195.],
          [210., 207., 198., ..., 194., 184., 192.],
          [209., 206., 207., ..., 201., 193., 196.]],

         [[141., 134., 151., ..., 150., 121., 141.],
          [146., 138., 149., ..., 151., 126., 147.],
          [155., 139., 154., ..., 152., 134., 146.],
          ...,
          [178., 174., 160., ..., 179., 175., 188.],
          [195., 197., 179., ..., 179., 178., 186.],
          [194., 195., 189., ..., 187., 187., 190.]],

         [[123., 116., 133., ..., 138., 109., 129.],
          [128., 120., 131., ..., 139., 114., 135.],
          [136., 121., 136., ..., 140., 122., 134.],
          ...,
          [126., 124., 112., ..., 138., 137., 145.],
          [143., 144., 129., ..., 138., 133., 142.],
          [142., 143., 138., ..., 145., 142., 146.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:20

analyse the exceptions in iter:29
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[202., 202., 204., ..., 207., 205., 203.],
          [206., 206., 207., ..., 210., 208., 206.],
          [210., 211., 212., ..., 214., 212., 210.],
          ...,
          [218., 210., 194., ..., 243., 244., 243.],
          [219., 217., 216., ..., 241., 241., 241.],
          [217., 216., 217., ..., 239., 239., 240.]],

         [[204., 204., 206., ..., 208., 206., 204.],
          [208., 208., 209., ..., 211., 209., 207.],
          [212., 213., 214., ..., 214., 213., 211.],
          ...,
          [217., 209., 194., ..., 242., 242., 243.],
          [218., 216., 216., ..., 240., 240., 240.],
          [216., 215., 216., ..., 238., 238., 238.]],

         [[199., 199., 201., ..., 200., 199., 198.],
          [203., 203., 204., ..., 205., 203., 201.],
          [207., 208., 210., ..., 210., 208., 206.],
          ...,
          [222., 214., 198., ..., 247., 247., 247.],
          [223., 221., 220., ..., 245., 245., 245.],
          [221., 220., 221., ..., 243., 243., 243.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:21

analyse the exceptions in iter:30
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[126., 122., 126., ..., 124., 120., 117.],
          [122., 119., 121., ..., 124., 122., 117.],
          [122., 121., 121., ..., 126., 123., 121.],
          ...,
          [126., 126., 128., ..., 133., 122., 114.],
          [125., 126., 127., ..., 128., 121., 114.],
          [123., 123., 126., ..., 128., 126., 121.]],

         [[118., 115., 119., ..., 118., 114., 111.],
          [115., 112., 114., ..., 118., 116., 111.],
          [115., 114., 114., ..., 120., 117., 115.],
          ...,
          [118., 118., 120., ..., 125., 114., 106.],
          [117., 118., 119., ..., 120., 113., 106.],
          [115., 115., 118., ..., 119., 118., 113.]],

         [[110., 108., 111., ..., 106., 102.,  99.],
          [107., 104., 106., ..., 106., 104.,  99.],
          [107., 106., 106., ..., 108., 105., 103.],
          ...,
          [107., 107., 109., ..., 114., 103.,  95.],
          [106., 107., 108., ..., 109., 102.,  95.],
          [104., 104., 107., ..., 109., 107., 102.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:22

analyse the exceptions in iter:31
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[236., 233., 234., ..., 148., 147., 140.],
          [243., 242., 243., ..., 163., 161., 159.],
          [245., 242., 245., ..., 163., 161., 157.],
          ...,
          [ 79.,  70.,  72., ...,  38.,  36.,  33.],
          [ 81.,  78.,  74., ...,  47.,  31.,  24.],
          [ 80.,  80.,  74., ...,  40.,  28.,  22.]],

         [[242., 239., 240., ..., 145., 145., 137.],
          [249., 247., 250., ..., 162., 160., 158.],
          [251., 248., 251., ..., 162., 160., 157.],
          ...,
          [ 74.,  65.,  68., ...,  31.,  29.,  25.],
          [ 79.,  73.,  68., ...,  38.,  24.,  17.],
          [ 80.,  77.,  67., ...,  30.,  21.,  15.]],

         [[238., 235., 236., ..., 140., 139., 131.],
          [245., 244., 246., ..., 162., 160., 158.],
          [247., 244., 247., ..., 166., 164., 161.],
          ...,
          [ 60.,  47.,  45., ...,  25.,  23.,  19.],
          [ 62.,  56.,  49., ...,  29.,  17.,  10.],
          [ 63.,  61.,  52., ...,  20.,  12.,   8.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:23

analyse the exceptions in iter:0
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:2

analyse the exceptions in iter:2
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [113., 111., 105., ...,  72.,  72.,  72.],
          [111., 104.,  99., ...,  68.,  70.,  78.],
          [106.,  99.,  95., ...,  78.,  79.,  80.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [120., 118., 112., ...,  81.,  80.,  80.],
          [118., 111., 106., ...,  75.,  76.,  84.],
          [113., 106., 102., ...,  85.,  85.,  86.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [112., 111., 106., ...,  80.,  79.,  79.],
          [110., 104.,  98., ...,  73.,  75.,  82.],
          [105.,  98.,  94., ...,  83.,  83.,  84.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:3

analyse the exceptions in iter:3
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  37.,  38., ...,  76.,  81.,  85.],
          [ 33.,  34.,  32., ...,  95.,  96.,  85.],
          [ 39.,  40.,  57., ...,  93., 107.,  95.],
          ...,
          [ 83.,  87.,  84., ...,  99.,  90.,  81.],
          [ 88.,  90.,  93., ...,  80.,  76.,  82.],
          [ 97.,  94.,  93., ...,  54.,  63.,  72.]],

         [[ 25.,  34.,  35., ...,  67.,  72.,  76.],
          [ 28.,  30.,  27., ...,  82.,  82.,  72.],
          [ 32.,  33.,  50., ...,  76.,  89.,  77.],
          ...,
          [ 73.,  77.,  74., ...,  93.,  84.,  75.],
          [ 72.,  74.,  77., ...,  74.,  70.,  76.],
          [ 78.,  75.,  75., ...,  47.,  56.,  65.]],

         [[ 10.,  19.,  20., ...,  39.,  43.,  47.],
          [ 13.,  14.,  12., ...,  55.,  56.,  45.],
          [ 15.,  17.,  33., ...,  52.,  66.,  54.],
          ...,
          [ 52.,  56.,  52., ...,  70.,  61.,  52.],
          [ 51.,  52.,  56., ...,  53.,  49.,  55.],
          [ 56.,  53.,  53., ...,  28.,  37.,  46.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:4

analyse the exceptions in iter:4
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[170., 168., 177., ..., 162., 158., 157.],
          [168., 172., 171., ..., 159., 156., 154.],
          [154., 149., 129., ..., 161., 157., 154.],
          ...,
          [ 74.,  76.,  78., ...,  71.,  68.,  61.],
          [ 68.,  69.,  72., ...,  76.,  71.,  71.],
          [ 67.,  68.,  69., ...,  75.,  71.,  73.]],

         [[180., 178., 185., ..., 179., 178., 177.],
          [181., 185., 183., ..., 177., 176., 174.],
          [170., 165., 144., ..., 178., 177., 174.],
          ...,
          [ 84.,  85.,  85., ...,  75.,  72.,  65.],
          [ 76.,  77.,  79., ...,  80.,  75.,  75.],
          [ 75.,  76.,  75., ...,  79.,  75.,  77.]],

         [[198., 196., 203., ..., 215., 214., 212.],
          [198., 201., 200., ..., 212., 211., 209.],
          [186., 181., 162., ..., 214., 212., 209.],
          ...,
          [ 80.,  81.,  82., ...,  78.,  75.,  68.],
          [ 77.,  78.,  78., ...,  83.,  78.,  78.],
          [ 78.,  79.,  76., ...,  82.,  78.,  80.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:5

analyse the exceptions in iter:5
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[159., 150., 153., ...,  91.,  74.,  76.],
          [142., 146., 155., ..., 127., 122.,  86.],
          [109.,  99., 105., ..., 137., 163.,  93.],
          ...,
          [244., 240., 241., ..., 156., 179., 200.],
          [246., 243., 243., ..., 162., 178., 192.],
          [246., 243., 244., ..., 166., 173., 182.]],

         [[102.,  91.,  95., ...,  71.,  63.,  58.],
          [ 75.,  72.,  76., ..., 105., 111.,  69.],
          [ 67.,  58.,  59., ..., 112., 132.,  72.],
          ...,
          [129., 123., 122., ...,  42.,  59.,  73.],
          [133., 128., 127., ...,  44.,  56.,  65.],
          [139., 133., 132., ...,  47.,  51.,  57.]],

         [[101.,  95.,  97., ...,  56.,  55.,  55.],
          [ 68.,  66.,  65., ...,  71.,  93.,  61.],
          [ 75.,  60.,  52., ...,  80., 105.,  71.],
          ...,
          [ 70.,  65.,  65., ...,  15.,  26.,  36.],
          [ 74.,  72.,  70., ...,  14.,  22.,  27.],
          [ 82.,  78.,  77., ...,  14.,  17.,  19.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:6

analyse the exceptions in iter:6
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[164., 105., 118., ..., 109., 108.,  91.],
          [167., 116.,  72., ..., 105., 105.,  89.],
          [140., 142., 119., ..., 104.,  84.,  78.],
          ...,
          [139., 142., 135., ...,  89.,  97., 126.],
          [163., 153., 146., ...,  85.,  98., 127.],
          [183., 176., 154., ...,  94.,  91., 122.]],

         [[206., 140., 148., ..., 147., 147., 129.],
          [213., 160., 109., ..., 142., 142., 127.],
          [191., 193., 163., ..., 139., 120., 115.],
          ...,
          [148., 155., 156., ..., 134., 148., 176.],
          [157., 164., 164., ..., 130., 148., 178.],
          [153., 182., 154., ..., 134., 133., 170.]],

         [[ 84.,  61., 101., ...,  73.,  69.,  57.],
          [ 84.,  49.,  43., ...,  79.,  72.,  57.],
          [ 65.,  66.,  79., ...,  84.,  58.,  49.],
          ...,
          [ 81.,  74.,  72., ...,  28.,  24.,  49.],
          [ 85.,  82.,  90., ...,  19.,  27.,  48.],
          [102., 116., 100., ...,  29.,  26.,  44.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:7

analyse the exceptions in iter:8
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[134., 131., 128., ..., 127., 127., 128.],
          [133., 129., 128., ..., 127., 127., 128.],
          [128., 127., 128., ..., 126., 126., 126.],
          ...,
          [174., 171., 155., ...,  27.,  29.,  28.],
          [194., 189., 159., ...,  30.,  30.,  30.],
          [193., 181., 168., ...,  31.,  32.,  32.]],

         [[186., 184., 182., ..., 181., 181., 182.],
          [189., 186., 186., ..., 183., 183., 184.],
          [185., 182., 182., ..., 181., 181., 180.],
          ...,
          [208., 206., 189., ...,  94.,  96.,  94.],
          [221., 215., 196., ...,  95.,  96.,  95.],
          [217., 208., 201., ...,  94.,  94.,  94.]],

         [[223., 220., 218., ..., 222., 222., 223.],
          [228., 224., 224., ..., 224., 224., 225.],
          [226., 223., 223., ..., 222., 222., 221.],
          ...,
          [235., 229., 216., ..., 136., 137., 136.],
          [244., 239., 225., ..., 138., 139., 140.],
          [237., 230., 227., ..., 136., 137., 138.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:8

analyse the exceptions in iter:9
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[125., 110., 102., ..., 202., 200., 202.],
          [142., 146., 176., ..., 195., 198., 204.],
          [180., 143., 156., ..., 122., 139., 158.],
          ...,
          [104., 101., 101., ..., 126., 126., 125.],
          [104., 105., 109., ..., 138., 137., 137.],
          [105., 108., 115., ..., 143., 143., 144.]],

         [[125., 101.,  90., ..., 207., 205., 208.],
          [146., 144., 172., ..., 201., 205., 211.],
          [185., 146., 157., ..., 111., 128., 147.],
          ...,
          [ 82.,  80.,  81., ..., 103., 103., 101.],
          [ 81.,  84.,  88., ..., 113., 113., 112.],
          [ 83.,  87.,  94., ..., 117., 116., 116.]],

         [[116.,  91.,  83., ..., 214., 212., 214.],
          [142., 139., 170., ..., 205., 209., 215.],
          [183., 146., 157., ..., 113., 131., 150.],
          ...,
          [ 41.,  39.,  38., ...,  67.,  69.,  68.],
          [ 40.,  41.,  43., ...,  78.,  80.,  81.],
          [ 42.,  45.,  50., ...,  82.,  84.,  86.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:9

final statics:
total operators:28
tensorflow --> nums:9,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:9
mindspore --> 
torch --> 

generate models:9

analyse the exceptions in iter:10
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[53., 54., 56., ..., 47., 41., 24.],
          [46., 53., 54., ..., 42., 39., 28.],
          [45., 50., 46., ..., 38., 36., 29.],
          ...,
          [71., 74., 80., ..., 51., 46., 49.],
          [75., 79., 81., ..., 61., 64., 48.],
          [85., 85., 86., ..., 61., 64., 49.]],

         [[65., 63., 60., ..., 51., 45., 28.],
          [59., 62., 59., ..., 46., 43., 32.],
          [59., 60., 52., ..., 42., 40., 33.],
          ...,
          [83., 83., 85., ..., 54., 49., 50.],
          [82., 85., 85., ..., 65., 67., 50.],
          [83., 84., 86., ..., 65., 67., 50.]],

         [[53., 52., 50., ..., 50., 44., 27.],
          [41., 45., 44., ..., 45., 42., 31.],
          [38., 41., 34., ..., 41., 39., 32.],
          ...,
          [66., 66., 67., ..., 33., 34., 41.],
          [67., 69., 67., ..., 41., 48., 41.],
          [71., 71., 70., ..., 39., 46., 41.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:10

analyse the exceptions in iter:11
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[142., 172., 176., ..., 216., 198., 205.],
          [191., 196., 174., ..., 229., 222., 217.],
          [220., 217., 192., ..., 224., 225., 218.],
          ...,
          [197., 196., 201., ..., 200., 199., 205.],
          [196., 191., 193., ..., 198., 199., 201.],
          [186., 182., 174., ..., 158., 158., 163.]],

         [[149., 172., 168., ..., 212., 194., 202.],
          [190., 192., 166., ..., 222., 215., 210.],
          [212., 209., 183., ..., 214., 214., 208.],
          ...,
          [152., 152., 156., ..., 165., 165., 164.],
          [157., 152., 154., ..., 164., 165., 161.],
          [150., 147., 139., ..., 124., 125., 125.]],

         [[152., 167., 154., ..., 211., 193., 200.],
          [192., 190., 159., ..., 220., 213., 207.],
          [212., 208., 182., ..., 209., 210., 203.],
          ...,
          [136., 135., 140., ..., 146., 146., 150.],
          [139., 135., 136., ..., 144., 145., 146.],
          [133., 130., 121., ..., 105., 106., 111.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:11

analyse the exceptions in iter:12
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[164., 162., 162., ..., 157., 153., 153.],
          [168., 166., 166., ..., 164., 160., 158.],
          [172., 170., 171., ..., 168., 165., 163.],
          ...,
          [123., 117., 112., ..., 117.,  95., 120.],
          [120., 116., 112., ..., 126., 120., 120.],
          [121., 120., 116., ..., 124., 124., 120.]],

         [[215., 212., 212., ..., 210., 208., 203.],
          [218., 215., 215., ..., 212., 209., 205.],
          [220., 217., 218., ..., 212., 208., 207.],
          ...,
          [160., 154., 149., ..., 136., 115., 149.],
          [156., 151., 147., ..., 149., 144., 152.],
          [154., 152., 148., ..., 152., 154., 154.]],

         [[244., 240., 240., ..., 237., 235., 234.],
          [245., 242., 242., ..., 238., 236., 235.],
          [246., 243., 244., ..., 238., 235., 236.],
          ...,
          [105., 102.,  99., ..., 100.,  79., 100.],
          [100.,  99.,  96., ..., 110., 103., 101.],
          [ 96.,  99.,  97., ..., 108., 107., 100.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:12

analyse the exceptions in iter:13
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 17.,  17.,  17., ...,  23.,  22.,  19.],
          [ 18.,  18.,  18., ...,  24.,  23.,  22.],
          [ 18.,  18.,  19., ...,  24.,  23.,  23.],
          ...,
          [217., 226., 210., ...,  33.,  32.,  33.],
          [219., 222., 214., ...,  35.,  34.,  33.],
          [210., 221., 215., ...,  36.,  34.,  32.]],

         [[  3.,   3.,   2., ...,  13.,  12.,   9.],
          [  4.,   4.,   4., ...,  14.,  13.,  12.],
          [  4.,   4.,   5., ...,  14.,  13.,  13.],
          ...,
          [214., 219., 201., ...,  24.,  23.,  24.],
          [215., 215., 208., ...,  26.,  25.,  24.],
          [208., 216., 212., ...,  27.,  25.,  23.]],

         [[  2.,   2.,   1., ...,  11.,  10.,   7.],
          [  3.,   3.,   3., ...,  12.,  11.,  10.],
          [  3.,   3.,   4., ...,  12.,  11.,  11.],
          ...,
          [223., 227., 213., ...,  17.,  16.,  17.],
          [230., 229., 225., ...,  19.,  18.,  17.],
          [223., 229., 227., ...,  20.,  18.,  16.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:13

analyse the exceptions in iter:14
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[100.,  98.,  99., ..., 165., 163., 165.],
          [101., 100., 100., ..., 164., 163., 159.],
          [105., 104., 104., ..., 156., 136., 114.],
          ...,
          [166., 166., 168., ..., 137., 137., 147.],
          [161., 162., 167., ..., 131., 138., 137.],
          [164., 162., 164., ..., 153., 157., 156.]],

         [[146., 144., 144., ..., 165., 163., 165.],
          [145., 143., 143., ..., 161., 162., 161.],
          [147., 145., 145., ..., 150., 133., 117.],
          ...,
          [156., 156., 157., ..., 127., 126., 136.],
          [152., 153., 158., ..., 125., 133., 132.],
          [158., 156., 158., ..., 146., 151., 150.]],

         [[192., 189., 189., ..., 165., 163., 165.],
          [188., 186., 186., ..., 159., 159., 157.],
          [189., 186., 187., ..., 147., 129., 111.],
          ...,
          [150., 151., 152., ..., 112., 114., 127.],
          [149., 150., 155., ..., 117., 124., 120.],
          [155., 153., 155., ..., 139., 141., 137.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:14

analyse the exceptions in iter:17
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[110., 142., 151., ...,  39.,  40.,  38.],
          [109., 141., 152., ...,  36.,  40.,  36.],
          [105., 142., 151., ...,  39.,  44.,  39.],
          ...,
          [ 62.,  39.,  60., ...,  42.,  46.,  47.],
          [ 62.,  52.,  58., ...,  43.,  47.,  49.],
          [ 55.,  60.,  56., ...,  45.,  47.,  51.]],

         [[104., 135., 146., ...,  39.,  40.,  38.],
          [103., 133., 147., ...,  36.,  40.,  36.],
          [ 98., 133., 145., ...,  39.,  44.,  39.],
          ...,
          [ 59.,  38.,  64., ...,  44.,  44.,  44.],
          [ 57.,  51.,  61., ...,  46.,  45.,  46.],
          [ 51.,  60.,  60., ...,  48.,  46.,  48.]],

         [[ 97., 118., 120., ...,  39.,  40.,  38.],
          [ 95., 115., 119., ...,  37.,  40.,  36.],
          [ 90., 114., 117., ...,  41.,  45.,  40.],
          ...,
          [ 60.,  49.,  81., ...,  56.,  55.,  55.],
          [ 56.,  61.,  78., ...,  58.,  58.,  60.],
          [ 50.,  71.,  78., ...,  60.,  60.,  62.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:15

analyse the exceptions in iter:18
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[197., 198., 201., ..., 217., 217., 217.],
          [193., 195., 198., ..., 216., 215., 214.],
          [192., 194., 197., ..., 217., 216., 215.],
          ...,
          [156., 156., 156., ...,  98., 117., 128.],
          [158., 159., 154., ..., 131., 117.,  91.],
          [152., 151., 145., ...,  91.,  90.,  79.]],

         [[187., 188., 191., ..., 201., 201., 201.],
          [183., 185., 188., ..., 200., 200., 198.],
          [182., 184., 187., ..., 201., 200., 199.],
          ...,
          [146., 146., 146., ...,  79.,  96., 105.],
          [148., 149., 144., ..., 110.,  99.,  75.],
          [142., 141., 135., ...,  72.,  73.,  65.]],

         [[188., 189., 192., ..., 204., 204., 204.],
          [184., 186., 189., ..., 203., 202., 201.],
          [183., 185., 188., ..., 204., 203., 202.],
          ...,
          [147., 147., 147., ...,  65.,  82.,  89.],
          [149., 150., 145., ...,  96.,  86.,  64.],
          [143., 142., 136., ...,  61.,  63.,  57.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:16

analyse the exceptions in iter:20
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[153., 174., 155., ..., 122., 138.,  97.],
          [160., 164., 150., ..., 137., 160., 103.],
          [140., 147., 136., ..., 104., 125.,  93.],
          ...,
          [175., 170., 170., ..., 193., 197., 199.],
          [174., 173., 171., ..., 200., 202., 208.],
          [168., 164., 166., ..., 204., 204., 206.]],

         [[157., 180., 165., ..., 125., 143., 101.],
          [163., 170., 159., ..., 135., 161., 109.],
          [143., 152., 145., ..., 103., 128., 102.],
          ...,
          [177., 172., 172., ..., 203., 206., 204.],
          [177., 176., 174., ..., 208., 209., 212.],
          [173., 169., 171., ..., 209., 208., 210.]],

         [[155., 188., 172., ..., 123., 141.,  97.],
          [165., 180., 169., ..., 129., 157., 107.],
          [147., 166., 158., ...,  99., 125., 101.],
          ...,
          [179., 174., 174., ..., 212., 214., 213.],
          [181., 180., 178., ..., 216., 218., 221.],
          [180., 175., 177., ..., 217., 217., 219.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:17

analyse the exceptions in iter:21
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[252., 249., 250., ..., 251., 251., 251.],
          [255., 252., 253., ..., 255., 255., 254.],
          [253., 250., 250., ..., 254., 254., 252.],
          ...,
          [254., 252., 253., ..., 252., 253., 252.],
          [250., 252., 255., ..., 254., 255., 254.],
          [236., 249., 250., ..., 250., 250., 251.]],

         [[  8.,  15.,   8., ...,   1.,   0.,   1.],
          [  7.,  15.,  13., ...,   1.,   0.,   4.],
          [  6.,  16.,  24., ...,   1.,   0.,   9.],
          ...,
          [ 66.,  62.,  64., ...,  70.,  69.,  70.],
          [ 49.,  53.,  59., ...,  70.,  68.,  59.],
          [ 37.,  48.,  42., ...,  78.,  74.,  58.]],

         [[ 42.,  42.,  39., ...,  11.,  15.,  30.],
          [ 43.,  44.,  42., ...,  11.,  18.,  33.],
          [ 42.,  42.,  43., ...,  10.,  20.,  37.],
          ...,
          [ 94.,  92.,  93., ..., 101., 103., 104.],
          [ 81.,  82.,  86., ..., 103., 100.,  89.],
          [ 68.,  76.,  73., ..., 113., 109.,  88.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:18

analyse the exceptions in iter:22
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 86.,  96., 115., ...,  84.,  95.,  79.],
          [125.,  99.,  71., ...,  78.,  88.,  93.],
          [112.,  87.,  58., ...,  89.,  88.,  85.],
          ...,
          [ 66.,  56.,  46., ...,  70.,  61.,  47.],
          [108.,  96.,  86., ...,  57.,  57.,  46.],
          [130., 120.,  98., ...,  44.,  44.,  45.]],

         [[ 74.,  83., 109., ...,  72.,  84.,  68.],
          [110.,  83.,  61., ...,  74.,  82.,  82.],
          [ 95.,  69.,  45., ...,  88.,  84.,  77.],
          ...,
          [ 61.,  53.,  46., ...,  79.,  74.,  57.],
          [100.,  91.,  82., ...,  60.,  65.,  51.],
          [117., 110.,  90., ...,  43.,  46.,  45.]],

         [[ 62.,  65.,  83., ...,  50.,  61.,  45.],
          [104.,  74.,  46., ...,  44.,  51.,  53.],
          [ 89.,  62.,  35., ...,  54.,  50.,  45.],
          ...,
          [ 39.,  33.,  28., ...,  46.,  42.,  31.],
          [ 73.,  66.,  59., ...,  38.,  41.,  31.],
          [ 91.,  86.,  67., ...,  30.,  32.,  32.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:19

analyse the exceptions in iter:23
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[126., 102., 117., ...,  96., 113., 107.],
          [135., 113., 121., ..., 115., 114., 115.],
          [126., 124., 128., ..., 134., 115., 114.],
          ...,
          [141., 155., 134., ..., 149., 147., 122.],
          [153., 164., 146., ..., 163., 189., 184.],
          [125., 129., 124., ..., 133., 180., 168.]],

         [[100.,  76.,  93., ...,  74.,  90.,  84.],
          [109.,  86.,  94., ...,  89.,  89.,  90.],
          [102.,  97., 101., ..., 109.,  90.,  90.],
          ...,
          [111., 123., 102., ..., 140., 133., 106.],
          [122., 132., 119., ..., 156., 178., 174.],
          [100., 106., 102., ..., 127., 173., 162.]],

         [[ 71.,  49.,  60., ...,  42.,  58.,  52.],
          [ 73.,  52.,  56., ...,  58.,  55.,  53.],
          [ 61.,  59.,  60., ...,  77.,  55.,  50.],
          ...,
          [ 85.,  87.,  65., ..., 118., 116.,  94.],
          [ 83.,  89.,  81., ..., 147., 174., 173.],
          [ 56.,  64.,  68., ..., 124., 174., 164.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:20

analyse the exceptions in iter:24
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 73.,  71.,  77., ..., 183., 180., 185.],
          [ 73.,  75.,  78., ..., 181., 172., 174.],
          [ 77.,  94.,  99., ..., 175., 191., 185.],
          ...,
          [ 84.,  86., 118., ...,  79., 159., 117.],
          [ 76.,  81., 103., ...,  56.,  69., 104.],
          [102.,  91.,  95., ..., 100.,  72.,  48.]],

         [[ 77.,  68.,  69., ..., 210., 214., 225.],
          [ 74.,  68.,  64., ..., 229., 220., 218.],
          [ 72.,  82.,  81., ..., 213., 230., 226.],
          ...,
          [106., 105., 133., ...,  95., 177., 133.],
          [ 96.,  98., 116., ...,  80.,  90., 120.],
          [120., 109., 110., ..., 134.,  97.,  59.]],

         [[ 58.,  50.,  44., ..., 149., 143., 144.],
          [ 52.,  55.,  50., ..., 139., 129., 127.],
          [ 64.,  79.,  73., ..., 139., 152., 142.],
          ...,
          [ 56.,  58.,  84., ...,  78., 137.,  94.],
          [ 60.,  56.,  73., ...,  36.,  40.,  69.],
          [ 92.,  62.,  62., ...,  55.,  38.,  29.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:21

analyse the exceptions in iter:25
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[162., 164., 169., ..., 184., 190., 202.],
          [153., 158., 164., ..., 178., 189., 201.],
          [157., 161., 164., ..., 178., 190., 202.],
          ...,
          [214., 213., 213., ..., 240., 241., 242.],
          [218., 209., 208., ..., 232., 236., 239.],
          [216., 207., 201., ..., 231., 233., 235.]],

         [[164., 167., 171., ..., 176., 186., 198.],
          [151., 156., 163., ..., 171., 184., 198.],
          [151., 156., 160., ..., 170., 186., 199.],
          ...,
          [205., 193., 185., ..., 207., 206., 209.],
          [209., 188., 180., ..., 195., 196., 200.],
          [204., 189., 174., ..., 192., 194., 198.]],

         [[130., 128., 131., ..., 137., 146., 161.],
          [119., 120., 124., ..., 131., 143., 158.],
          [120., 121., 122., ..., 131., 142., 156.],
          ...,
          [193., 181., 174., ..., 193., 194., 196.],
          [198., 176., 169., ..., 182., 185., 187.],
          [197., 178., 156., ..., 178., 181., 183.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:22

analyse the exceptions in iter:26
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[131., 124., 116., ..., 184., 185., 184.],
          [127., 124., 116., ..., 177., 180., 186.],
          [123., 121., 113., ..., 179., 187., 194.],
          ...,
          [ 99.,  83.,  54., ..., 138., 155., 165.],
          [ 97.,  77.,  43., ..., 140., 154., 163.],
          [ 96.,  71.,  35., ..., 140., 156., 164.]],

         [[ 81.,  76.,  70., ..., 152., 153., 152.],
          [ 76.,  75.,  69., ..., 142., 146., 152.],
          [ 73.,  73.,  67., ..., 142., 150., 158.],
          ...,
          [ 50.,  42.,  27., ..., 103., 113., 118.],
          [ 50.,  39.,  21., ..., 105., 112., 116.],
          [ 49.,  36.,  16., ..., 104., 114., 118.]],

         [[ 32.,  27.,  20., ..., 114., 117., 120.],
          [ 27.,  26.,  19., ..., 106., 110., 116.],
          [ 23.,  24.,  17., ..., 106., 114., 118.],
          ...,
          [ 10.,   5.,   5., ...,  68.,  72.,  74.],
          [ 10.,   5.,   4., ...,  69.,  71.,  71.],
          [ 10.,   4.,   3., ...,  69.,  73.,  73.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:23

analyse the exceptions in iter:27
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 45.,  42.,  35., ...,  93.,  51.,  39.],
          [ 46.,  42.,  40., ..., 105.,  66.,  48.],
          [ 43.,  40.,  48., ...,  88.,  77.,  58.],
          ...,
          [ 55.,  67.,  73., ...,  93., 101., 103.],
          [ 55.,  62.,  68., ...,  69.,  81.,  99.],
          [ 58.,  59.,  58., ...,  77.,  66.,  83.]],

         [[ 20.,  21.,  17., ...,  86.,  47.,  36.],
          [ 22.,  22.,  22., ...,  93.,  53.,  39.],
          [ 22.,  21.,  32., ...,  74.,  59.,  44.],
          ...,
          [ 54.,  57.,  64., ...,  87., 116., 123.],
          [ 54.,  53.,  59., ...,  62.,  93., 117.],
          [ 53.,  46.,  45., ...,  68.,  75.,  99.]],

         [[ 19.,  18.,  13., ...,  81.,  42.,  32.],
          [ 20.,  18.,  18., ...,  92.,  52.,  36.],
          [ 19.,  17.,  27., ...,  77.,  60.,  43.],
          ...,
          [ 51.,  54.,  57., ...,  49.,  34.,  30.],
          [ 51.,  50.,  52., ...,  38.,  29.,  35.],
          [ 51.,  44.,  40., ...,  53.,  29.,  31.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:24

analyse the exceptions in iter:30
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[126., 122., 126., ..., 124., 120., 117.],
          [122., 119., 121., ..., 124., 122., 117.],
          [122., 121., 121., ..., 126., 123., 121.],
          ...,
          [126., 126., 128., ..., 133., 122., 114.],
          [125., 126., 127., ..., 128., 121., 114.],
          [123., 123., 126., ..., 128., 126., 121.]],

         [[118., 115., 119., ..., 118., 114., 111.],
          [115., 112., 114., ..., 118., 116., 111.],
          [115., 114., 114., ..., 120., 117., 115.],
          ...,
          [118., 118., 120., ..., 125., 114., 106.],
          [117., 118., 119., ..., 120., 113., 106.],
          [115., 115., 118., ..., 119., 118., 113.]],

         [[110., 108., 111., ..., 106., 102.,  99.],
          [107., 104., 106., ..., 106., 104.,  99.],
          [107., 106., 106., ..., 108., 105., 103.],
          ...,
          [107., 107., 109., ..., 114., 103.,  95.],
          [106., 107., 108., ..., 109., 102.,  95.],
          [104., 104., 107., ..., 109., 107., 102.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:25

analyse the exceptions in iter:33
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[  7.,   7.,   5., ...,  82.,  80.,  69.],
          [  6.,   6.,   5., ...,  85.,  86.,  81.],
          [  1.,   7.,   8., ...,  98.,  96.,  86.],
          ...,
          [150., 135., 129., ...,  72.,  45.,  26.],
          [156., 153., 138., ...,  57.,  23.,  38.],
          [183., 191., 182., ...,  83.,  67., 114.]],

         [[  5.,   5.,   4., ...,  84.,  85.,  73.],
          [  4.,   4.,   3., ...,  86.,  88.,  80.],
          [  1.,   7.,   8., ...,  96.,  96.,  84.],
          ...,
          [153., 136., 129., ...,  72.,  51.,  32.],
          [156., 151., 136., ...,  58.,  32.,  45.],
          [193., 199., 189., ...,  83.,  74., 120.]],

         [[  8.,   8.,   6., ...,  78.,  81.,  68.],
          [  8.,   9.,   8., ...,  77.,  81.,  72.],
          [  6.,  12.,  13., ...,  83.,  85.,  73.],
          ...,
          [139., 121., 113., ...,  69.,  63.,  51.],
          [139., 130., 110., ...,  56.,  48.,  64.],
          [183., 185., 171., ...,  76.,  81., 119.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:26

analyse the exceptions in iter:34
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[172., 171., 168., ..., 158., 156., 147.],
          [169., 168., 168., ..., 158., 152., 145.],
          [174., 169., 170., ..., 157., 149., 146.],
          ...,
          [150., 157., 162., ..., 158., 147., 139.],
          [143., 149., 155., ..., 148., 143., 140.],
          [148., 146., 149., ..., 137., 134., 136.]],

         [[187., 186., 182., ..., 170., 169., 163.],
          [185., 183., 184., ..., 175., 170., 165.],
          [190., 185., 186., ..., 177., 170., 168.],
          ...,
          [163., 168., 170., ..., 168., 160., 154.],
          [154., 158., 161., ..., 157., 153., 153.],
          [158., 155., 157., ..., 143., 139., 143.]],

         [[130., 130., 126., ..., 113., 113., 107.],
          [123., 122., 123., ..., 114., 110., 107.],
          [126., 122., 123., ..., 115., 108., 109.],
          ...,
          [100., 103., 104., ..., 108.,  99.,  90.],
          [ 89.,  90.,  96., ...,  99.,  92.,  88.],
          [ 93.,  89.,  92., ...,  86.,  80.,  82.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:27

analyse the exceptions in iter:35
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[251., 247., 247., ..., 229., 244., 251.],
          [249., 246., 246., ..., 233., 249., 252.],
          [167., 167., 167., ..., 217., 217., 220.],
          ...,
          [133., 123., 124., ..., 118., 114., 115.],
          [123., 124., 126., ..., 112., 108., 104.],
          [125., 129., 126., ..., 118., 112., 105.]],

         [[249., 245., 245., ..., 190., 231., 241.],
          [248., 244., 245., ..., 188., 237., 242.],
          [165., 164., 164., ..., 182., 211., 213.],
          ...,
          [130., 127., 130., ..., 125., 122., 125.],
          [125., 127., 129., ..., 122., 119., 119.],
          [128., 132., 130., ..., 128., 122., 121.]],

         [[250., 247., 247., ..., 146., 224., 241.],
          [248., 244., 244., ..., 141., 233., 241.],
          [148., 148., 149., ..., 139., 203., 208.],
          ...,
          [ 39.,  36.,  35., ...,  30.,  26.,  27.],
          [ 36.,  36.,  32., ...,  26.,  27.,  22.],
          [ 42.,  43.,  36., ...,  35.,  33.,  26.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:28

analyse the exceptions in iter:37
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 95.,  88.,  86., ..., 101.,  91., 105.],
          [ 82.,  75.,  76., ...,  94.,  51.,  84.],
          [ 77.,  74.,  71., ...,  71.,  47.,  88.],
          ...,
          [ 97.,  92.,  97., ...,  86.,  94.,  90.],
          [ 95.,  84.,  89., ...,  96., 102.,  97.],
          [ 91.,  83.,  82., ..., 100., 105., 108.]],

         [[105.,  97.,  96., ..., 116., 108., 124.],
          [ 90.,  83.,  84., ..., 102.,  61.,  97.],
          [ 85.,  81.,  78., ...,  74.,  52.,  95.],
          ...,
          [ 95.,  92.,  93., ...,  91.,  97.,  97.],
          [ 90.,  86.,  89., ...,  97.,  96.,  94.],
          [ 84.,  81.,  81., ...,  96.,  97., 102.]],

         [[127., 120., 118., ..., 144., 136., 157.],
          [110., 104., 104., ..., 123.,  80., 122.],
          [103.,  98.,  95., ...,  86.,  63., 111.],
          ...,
          [ 72.,  69.,  70., ...,  65.,  72.,  71.],
          [ 65.,  59.,  62., ...,  76.,  77.,  73.],
          [ 63.,  57.,  55., ...,  78.,  80.,  83.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:29

analyse the exceptions in iter:39
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 98., 119., 109., ...,  75.,  60.,  61.],
          [ 44.,  75.,  69., ...,  81.,  55.,  65.],
          [ 73.,  94., 111., ...,  77.,  60.,  58.],
          ...,
          [ 96., 100., 129., ...,  72.,  68.,  85.],
          [124., 114., 110., ...,  84.,  81.,  73.],
          [ 93.,  98.,  95., ...,  73.,  55.,  72.]],

         [[110., 132., 122., ...,  97.,  82.,  84.],
          [ 56.,  86.,  80., ..., 103.,  77.,  87.],
          [ 84., 105., 122., ...,  99.,  82.,  82.],
          ...,
          [ 98., 100., 126., ...,  73.,  71.,  93.],
          [137., 124., 117., ...,  92.,  89.,  81.],
          [110., 112., 106., ...,  82.,  63.,  79.]],

         [[ 96., 117., 107., ...,  76.,  62.,  67.],
          [ 46.,  76.,  70., ...,  82.,  57.,  74.],
          [ 77.,  98., 115., ...,  78.,  61.,  61.],
          ...,
          [ 99., 100., 124., ...,  69.,  67.,  85.],
          [135., 121., 111., ...,  85.,  84.,  74.],
          [107., 107.,  99., ...,  75.,  58.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:30

analyse the exceptions in iter:41
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[145., 145., 148., ..., 237., 230., 224.],
          [147., 150., 168., ..., 231., 221., 214.],
          [145., 150., 178., ..., 229., 230., 232.],
          ...,
          [231., 230., 227., ..., 235., 234., 231.],
          [224., 231., 231., ..., 240., 228., 223.],
          [125., 225., 232., ..., 224., 216., 228.]],

         [[125., 126., 130., ..., 210., 202., 199.],
          [126., 132., 147., ..., 203., 192., 190.],
          [124., 130., 155., ..., 201., 201., 205.],
          ...,
          [202., 202., 198., ..., 209., 207., 203.],
          [199., 200., 202., ..., 213., 201., 199.],
          [120., 200., 204., ..., 197., 189., 203.]],

         [[ 83.,  82.,  82., ..., 170., 161., 158.],
          [ 83.,  84., 107., ..., 163., 151., 149.],
          [ 79.,  84., 110., ..., 161., 160., 166.],
          ...,
          [169., 170., 166., ..., 172., 170., 167.],
          [163., 167., 170., ..., 177., 162., 162.],
          [ 98., 166., 170., ..., 160., 150., 167.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:31

analyse the exceptions in iter:42
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[127., 148., 192., ..., 112., 144., 153.],
          [ 89., 111., 151., ..., 161., 166., 163.],
          [ 98.,  94., 110., ..., 173., 169., 173.],
          ...,
          [156., 151., 149., ..., 150., 149., 142.],
          [163., 162., 161., ..., 135., 141., 138.],
          [160., 160., 163., ..., 138., 143., 151.]],

         [[126., 144., 181., ..., 102., 135., 142.],
          [ 90., 110., 141., ..., 152., 158., 154.],
          [ 94.,  94., 109., ..., 159., 154., 157.],
          ...,
          [152., 145., 144., ..., 144., 148., 143.],
          [158., 155., 151., ..., 131., 137., 134.],
          [152., 151., 153., ..., 121., 131., 135.]],

         [[129., 144., 175., ...,  98., 123., 130.],
          [ 94., 116., 137., ..., 129., 132., 128.],
          [ 94.,  99., 118., ..., 132., 129., 132.],
          ...,
          [115., 107., 104., ..., 110., 114., 104.],
          [122., 120., 118., ...,  99., 109., 103.],
          [122., 120., 120., ..., 103., 107., 117.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:32

analyse the exceptions in iter:43
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 99.,  98., 100., ..., 129., 132., 130.],
          [100., 100., 102., ..., 122., 135., 132.],
          [104., 104., 106., ..., 165., 149., 140.],
          ...,
          [195., 199., 221., ..., 209., 209., 208.],
          [197., 201., 211., ..., 208., 210., 209.],
          [199., 197., 204., ..., 208., 210., 209.]],

         [[166., 165., 167., ..., 186., 190., 188.],
          [166., 164., 167., ..., 152., 189., 188.],
          [169., 167., 170., ..., 165., 189., 189.],
          ...,
          [173., 177., 194., ..., 191., 190., 188.],
          [173., 178., 184., ..., 190., 191., 191.],
          [173., 172., 174., ..., 189., 191., 190.]],

         [[198., 196., 199., ..., 212., 215., 213.],
          [195., 194., 197., ..., 169., 213., 214.],
          [197., 195., 198., ..., 160., 205., 212.],
          ...,
          [149., 153., 166., ..., 169., 171., 173.],
          [149., 149., 147., ..., 171., 173., 175.],
          [149., 144., 137., ..., 174., 177., 175.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:33

analyse the exceptions in iter:46
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 94.,  72.,  60., ...,  72.,  71.,  77.],
          [ 85.,  67.,  52., ...,  67.,  72.,  77.],
          [ 82.,  54.,  41., ...,  70.,  71.,  78.],
          ...,
          [ 78.,  54.,  37., ...,  51.,  44.,  52.],
          [133., 117.,  98., ...,  62.,  53.,  60.],
          [140., 137., 138., ...,  85.,  79.,  69.]],

         [[ 91.,  71.,  68., ...,  78.,  75.,  82.],
          [ 83.,  66.,  57., ...,  73.,  78.,  85.],
          [ 82.,  53.,  44., ...,  76.,  77.,  85.],
          ...,
          [ 79.,  54.,  37., ...,  49.,  47.,  50.],
          [127., 111.,  92., ...,  58.,  56.,  59.],
          [129., 126., 126., ...,  68.,  71.,  63.]],

         [[ 62.,  42.,  35., ...,  43.,  39.,  41.],
          [ 55.,  38.,  29., ...,  41.,  37.,  39.],
          [ 53.,  24.,  19., ...,  53.,  37.,  39.],
          ...,
          [ 86.,  63.,  46., ...,  28.,  20.,  28.],
          [129., 115.,  98., ...,  35.,  28.,  36.],
          [126., 125., 129., ...,  46.,  46.,  42.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:34

analyse the exceptions in iter:48
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[191., 190., 190., ..., 135., 142., 146.],
          [187., 184., 179., ..., 147., 152., 153.],
          [181., 176., 165., ..., 154., 162., 158.],
          ...,
          [220., 221., 222., ..., 211., 214., 224.],
          [212., 220., 225., ..., 216., 216., 221.],
          [201., 212., 217., ..., 220., 217., 217.]],

         [[191., 192., 193., ..., 143., 149., 150.],
          [188., 187., 183., ..., 154., 158., 158.],
          [183., 178., 169., ..., 161., 167., 163.],
          ...,
          [245., 245., 244., ..., 238., 240., 248.],
          [238., 245., 247., ..., 242., 241., 244.],
          [226., 239., 243., ..., 242., 240., 238.]],

         [[168., 172., 174., ..., 123., 126., 127.],
          [165., 166., 163., ..., 134., 135., 134.],
          [160., 157., 148., ..., 140., 143., 139.],
          ...,
          [198., 199., 202., ..., 189., 193., 203.],
          [190., 198., 204., ..., 194., 195., 201.],
          [178., 190., 196., ..., 197., 196., 195.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:35

analyse the exceptions in iter:49
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[255., 255., 255., ..., 255., 255., 255.],
          [255., 252., 255., ..., 254., 254., 254.],
          [255., 252., 255., ..., 254., 254., 254.],
          ...,
          [255., 254., 254., ..., 254., 254., 254.],
          [255., 253., 254., ..., 254., 254., 254.],
          [255., 255., 255., ..., 255., 255., 255.]],

         [[255., 255., 255., ..., 255., 255., 255.],
          [255., 252., 255., ..., 254., 254., 254.],
          [255., 252., 255., ..., 254., 254., 254.],
          ...,
          [255., 254., 254., ..., 254., 254., 254.],
          [255., 253., 254., ..., 254., 254., 254.],
          [255., 255., 255., ..., 255., 255., 255.]],

         [[255., 255., 255., ..., 255., 255., 255.],
          [255., 252., 255., ..., 254., 254., 254.],
          [255., 252., 255., ..., 254., 254., 254.],
          ...,
          [255., 254., 254., ..., 254., 254., 254.],
          [255., 253., 254., ..., 254., 254., 254.],
          [255., 255., 255., ..., 255., 255., 255.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:36

final statics:
total operators:28
tensorflow --> nums:36,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:36
mindspore --> 
torch --> 

generate models:36

analyse the exceptions in iter:50
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 16.,  17.,  17., ...,  62.,  55.,  51.],
          [ 16.,  16.,  15., ...,  62.,  58.,  52.],
          [ 16.,  15.,  15., ...,  57.,  59.,  56.],
          ...,
          [ 96., 114., 119., ..., 128., 120., 117.],
          [118., 100., 114., ..., 139., 131., 121.],
          [144., 136., 105., ..., 145., 137., 131.]],

         [[ 76.,  77.,  77., ..., 106.,  99.,  94.],
          [ 76.,  76.,  75., ..., 109., 105., 100.],
          [ 76.,  75.,  75., ..., 110., 111., 109.],
          ...,
          [110., 127., 132., ..., 135., 130., 131.],
          [132., 113., 126., ..., 146., 140., 134.],
          [148., 140., 114., ..., 151., 144., 141.]],

         [[ 74.,  75.,  75., ...,  87.,  80.,  75.],
          [ 74.,  74.,  74., ...,  84.,  80.,  75.],
          [ 74.,  73.,  73., ...,  79.,  80.,  78.],
          ...,
          [138., 159., 167., ..., 153., 145., 142.],
          [159., 145., 163., ..., 159., 153., 147.],
          [173., 168., 143., ..., 170., 163., 158.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:37

analyse the exceptions in iter:51
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[213., 119.,  58., ..., 143., 140., 117.],
          [214., 128.,  62., ..., 138., 136., 111.],
          [215., 139.,  75., ..., 136., 134., 107.],
          ...,
          [118., 122., 129., ..., 158., 151., 145.],
          [111., 117., 128., ..., 153., 147., 141.],
          [110., 116., 127., ..., 141., 136., 139.]],

         [[221., 127.,  71., ..., 158., 142., 101.],
          [223., 137.,  75., ..., 152., 138.,  95.],
          [224., 148.,  88., ..., 151., 136.,  91.],
          ...,
          [ 45.,  45.,  46., ...,  65.,  68.,  67.],
          [ 38.,  42.,  47., ...,  62.,  59.,  63.],
          [ 38.,  40.,  48., ...,  55.,  52.,  58.]],

         [[221., 122.,  81., ..., 150., 136.,  87.],
          [220., 130.,  83., ..., 145., 133.,  82.],
          [219., 139.,  94., ..., 143., 131.,  77.],
          ...,
          [ 37.,  40.,  42., ...,  54.,  55.,  55.],
          [ 32.,  36.,  41., ...,  53.,  49.,  51.],
          [ 32.,  34.,  41., ...,  46.,  43.,  47.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:38

analyse the exceptions in iter:52
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 63.,  77.,  66., ...,  76.,  86., 114.],
          [ 72.,  70.,  64., ...,  84.,  81.,  88.],
          [ 56.,  70.,  54., ..., 139., 104.,  77.],
          ...,
          [118., 152., 175., ..., 102., 128., 179.],
          [137., 148., 148., ..., 121., 170., 203.],
          [171., 173., 153., ..., 167., 187., 174.]],

         [[ 70.,  88.,  88., ...,  91.,  94., 116.],
          [ 71.,  83.,  85., ...,  94.,  91.,  97.],
          [ 65.,  82.,  76., ..., 142., 114.,  93.],
          ...,
          [107., 135., 155., ...,  79., 105., 150.],
          [123., 129., 129., ...,  94., 142., 168.],
          [145., 146., 130., ..., 136., 157., 143.]],

         [[ 37.,  63.,  63., ...,  65.,  71.,  95.],
          [ 39.,  58.,  58., ...,  71.,  67.,  73.],
          [ 34.,  53.,  48., ..., 120.,  90.,  71.],
          ...,
          [ 85., 111., 133., ...,  63.,  85., 114.],
          [101., 109., 105., ...,  74., 116., 130.],
          [108., 107.,  96., ..., 107., 129., 115.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:39

analyse the exceptions in iter:54
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 45.,  47.,  48., ...,  50.,  47.,  46.],
          [ 45.,  47.,  48., ...,  55.,  51.,  51.],
          [ 45.,  46.,  47., ...,  60.,  56.,  55.],
          ...,
          [ 50.,  50.,  51., ...,  97.,  79.,  76.],
          [ 50.,  49.,  51., ...,  81., 103.,  72.],
          [ 50.,  50.,  51., ...,  83.,  90.,  88.]],

         [[ 73.,  75.,  76., ...,  73.,  69.,  70.],
          [ 72.,  74.,  75., ...,  77.,  74.,  75.],
          [ 71.,  72.,  73., ...,  83.,  80.,  80.],
          ...,
          [ 76.,  78.,  78., ..., 118., 112., 104.],
          [ 76.,  77.,  78., ...,  92., 121., 101.],
          [ 75.,  78.,  77., ...,  91., 100., 110.]],

         [[ 28.,  30.,  33., ...,  28.,  29.,  31.],
          [ 27.,  29.,  32., ...,  32.,  31.,  32.],
          [ 29.,  30.,  31., ...,  36.,  34.,  34.],
          ...,
          [ 34.,  34.,  35., ...,  99.,  50.,  49.],
          [ 34.,  34.,  35., ..., 105., 100.,  44.],
          [ 35.,  33.,  35., ..., 100., 106.,  80.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:40

analyse the exceptions in iter:55
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[156., 167., 169., ..., 243., 230., 208.],
          [174., 192., 172., ..., 237., 213., 186.],
          [192., 194., 174., ..., 226., 198., 195.],
          ...,
          [187., 211., 231., ..., 210., 217., 203.],
          [231., 220., 200., ..., 183., 189., 186.],
          [238., 238., 229., ..., 141., 151., 157.]],

         [[194., 212., 215., ..., 247., 235., 215.],
          [210., 229., 204., ..., 243., 221., 193.],
          [234., 230., 201., ..., 231., 208., 200.],
          ...,
          [211., 234., 244., ..., 204., 208., 192.],
          [238., 236., 219., ..., 170., 175., 169.],
          [242., 247., 239., ..., 126., 137., 141.]],

         [[129., 127., 129., ..., 226., 206., 180.],
          [147., 159., 163., ..., 223., 200., 169.],
          [145., 178., 194., ..., 218., 186., 165.],
          ...,
          [151., 180., 221., ..., 199., 210., 192.],
          [218., 209., 177., ..., 153., 160., 153.],
          [224., 232., 217., ..., 106., 117., 118.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:41

analyse the exceptions in iter:56
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[141., 139., 136., ..., 228., 228., 229.],
          [148., 150., 148., ..., 228., 228., 228.],
          [149., 149., 148., ..., 230., 229., 229.],
          ...,
          [125., 124., 139., ..., 220., 199., 208.],
          [126., 116., 135., ..., 246., 226., 196.],
          [143., 145., 169., ..., 254., 255., 227.]],

         [[ 70.,  61.,  55., ..., 198., 199., 200.],
          [ 71.,  67.,  64., ..., 197., 196., 197.],
          [ 72.,  66.,  64., ..., 197., 197., 197.],
          ...,
          [100., 102., 110., ..., 169., 143., 149.],
          [101.,  93., 107., ..., 205., 181., 145.],
          [105., 107., 127., ..., 208., 206., 174.]],

         [[  8.,   2.,   0., ..., 155., 156., 157.],
          [ 10.,   5.,   2., ..., 153., 152., 153.],
          [ 17.,   7.,   4., ..., 151., 151., 151.],
          ...,
          [ 73.,  80.,  75., ..., 109.,  86.,  93.],
          [ 75.,  71.,  73., ..., 144., 121.,  87.],
          [ 67.,  71.,  83., ..., 141., 138., 105.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:42

analyse the exceptions in iter:57
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 66.,  71.,  88., ...,  85.,  86.,  79.],
          [ 75.,  79.,  95., ...,  85.,  87.,  78.],
          [ 80.,  84.,  97., ...,  81.,  82.,  74.],
          ...,
          [ 79.,  87.,  60., ...,  35.,  26.,  20.],
          [ 77.,  70.,  37., ...,  79.,  77.,  66.],
          [ 78.,  63.,  31., ..., 140., 135., 128.]],

         [[ 73.,  77.,  86., ...,  80.,  81.,  73.],
          [ 81.,  84.,  92., ...,  79.,  80.,  72.],
          [ 85.,  88.,  93., ...,  75.,  74.,  68.],
          ...,
          [ 74.,  84.,  58., ...,  35.,  26.,  21.],
          [ 74.,  68.,  37., ...,  68.,  66.,  55.],
          [ 74.,  61.,  32., ..., 122., 117., 113.]],

         [[ 33.,  40.,  62., ...,  55.,  62.,  54.],
          [ 40.,  45.,  66., ...,  56.,  62.,  54.],
          [ 44.,  50.,  68., ...,  48.,  53.,  51.],
          ...,
          [ 59.,  69.,  43., ...,  22.,  14.,  10.],
          [ 59.,  53.,  22., ...,  60.,  58.,  50.],
          [ 58.,  44.,  15., ..., 116., 113., 111.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:43

analyse the exceptions in iter:58
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 97.,  96., 108., ..., 130., 117., 115.],
          [111., 104., 111., ..., 138., 128., 124.],
          [135., 132., 128., ..., 136., 130., 121.],
          ...,
          [124., 120., 126., ..., 114., 118., 119.],
          [126., 123., 125., ...,  96., 102., 102.],
          [124., 124., 126., ...,  97.,  96.,  81.]],

         [[ 83.,  84.,  98., ..., 113., 100., 100.],
          [ 97.,  91.,  99., ..., 121., 112., 111.],
          [120., 116., 113., ..., 119., 113., 109.],
          ...,
          [109., 104., 109., ...,  99., 105., 104.],
          [108., 106., 108., ...,  82.,  89.,  88.],
          [106., 107., 109., ...,  83.,  84.,  69.]],

         [[ 41.,  46.,  56., ...,  60.,  48.,  48.],
          [ 49.,  45.,  49., ...,  66.,  57.,  57.],
          [ 68.,  65.,  57., ...,  63.,  58.,  54.],
          ...,
          [ 55.,  51.,  57., ...,  57.,  61.,  55.],
          [ 54.,  52.,  53., ...,  44.,  49.,  46.],
          [ 52.,  53.,  55., ...,  42.,  45.,  36.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:44

analyse the exceptions in iter:63
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 65.,  70.,  76., ...,  33.,  59.,  62.],
          [ 71.,  78.,  87., ...,  23.,  65.,  74.],
          [ 69.,  77.,  82., ...,  19.,  67.,  83.],
          ...,
          [ 14.,  14.,  14., ...,  54.,  54.,  52.],
          [ 14.,  14.,  14., ...,  53.,  45.,  38.],
          [ 14.,  14.,  14., ...,  49.,  31.,  21.]],

         [[114., 121., 129., ...,  47.,  62.,  66.],
          [120., 129., 140., ...,  30.,  62.,  72.],
          [118., 129., 137., ...,  20.,  57.,  73.],
          ...,
          [ 14.,  14.,  14., ...,  76.,  80.,  81.],
          [ 14.,  14.,  14., ...,  76.,  69.,  63.],
          [ 14.,  14.,  14., ...,  72.,  51.,  39.]],

         [[ 54.,  62.,  71., ...,  42.,  53.,  56.],
          [ 57.,  65.,  75., ...,  24.,  51.,  57.],
          [ 53.,  60.,  63., ...,  13.,  49.,  66.],
          ...,
          [ 14.,  14.,  14., ...,  45.,  42.,  46.],
          [ 14.,  14.,  14., ...,  46.,  37.,  34.],
          [ 14.,  14.,  14., ...,  45.,  30.,  21.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:45

analyse the exceptions in iter:64
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 65.,  67.,  69., ...,  93., 108., 102.],
          [ 65.,  65.,  69., ..., 104., 122., 132.],
          [ 62.,  63.,  68., ..., 122., 146., 140.],
          ...,
          [ 88.,  90.,  95., ...,  83.,  89.,  92.],
          [ 90.,  94.,  98., ...,  75.,  78.,  85.],
          [ 95., 102., 104., ...,  74.,  79.,  84.]],

         [[ 29.,  32.,  35., ...,  73.,  87.,  81.],
          [ 29.,  30.,  34., ...,  83.,  97., 106.],
          [ 27.,  28.,  32., ...,  99., 118., 114.],
          ...,
          [ 76.,  79.,  85., ...,  85.,  93.,  97.],
          [ 79.,  83.,  87., ...,  66.,  74.,  86.],
          [ 84.,  90.,  94., ...,  62.,  70.,  78.]],

         [[ 29.,  30.,  33., ...,  70.,  82.,  74.],
          [ 29.,  28.,  32., ...,  78.,  90.,  98.],
          [ 25.,  24.,  30., ...,  93., 110., 104.],
          ...,
          [ 84.,  86.,  92., ...,  99., 108., 111.],
          [ 85.,  90.,  95., ...,  71.,  83.,  97.],
          [ 92.,  98., 102., ...,  62.,  73.,  83.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:46

analyse the exceptions in iter:65
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[148., 132., 134., ..., 124., 108., 124.],
          [197., 168., 176., ..., 176., 162., 141.],
          [199., 199., 213., ..., 182., 178., 153.],
          ...,
          [179., 183., 182., ..., 164., 147., 136.],
          [162., 146., 127., ..., 118., 118., 132.],
          [150., 143., 123., ..., 124., 126., 157.]],

         [[141., 128., 135., ..., 131., 109., 127.],
          [181., 151., 166., ..., 178., 157., 133.],
          [194., 191., 209., ..., 186., 175., 141.],
          ...,
          [170., 165., 166., ..., 144., 127., 119.],
          [156., 133., 116., ..., 100.,  99., 116.],
          [148., 141., 125., ..., 119., 121., 154.]],

         [[174., 173., 187., ..., 186., 166., 171.],
          [214., 185., 199., ..., 213., 191., 162.],
          [207., 193., 209., ..., 193., 178., 156.],
          ...,
          [170., 148., 145., ..., 121., 106., 130.],
          [173., 140., 122., ..., 106., 108., 138.],
          [184., 176., 161., ..., 162., 162., 186.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:47

analyse the exceptions in iter:68
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[110., 103., 104., ..., 102.,  94.,  99.],
          [125., 119., 120., ..., 108., 104., 110.],
          [113.,  73.,  80., ...,  47.,  78., 103.],
          ...,
          [102., 125., 190., ...,  86.,  69.,  92.],
          [120., 141., 194., ...,  81.,  85., 109.],
          [159., 166., 163., ...,  98., 110., 100.]],

         [[125., 128., 130., ..., 121., 121., 120.],
          [151., 157., 160., ..., 137., 144., 145.],
          [136., 102., 107., ...,  72., 117., 141.],
          ...,
          [ 77.,  88., 159., ...,  72.,  57.,  70.],
          [ 92., 100., 163., ...,  68.,  77., 101.],
          [133., 127., 132., ...,  85., 105., 102.]],

         [[141., 147., 145., ..., 130., 132., 129.],
          [167., 181., 185., ..., 145., 155., 156.],
          [148., 122., 127., ...,  76., 124., 151.],
          ...,
          [ 37.,  49., 132., ...,  48.,  37.,  40.],
          [ 49.,  52., 124., ...,  34.,  39.,  59.],
          [ 96.,  79.,  90., ...,  57.,  64.,  67.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:48

analyse the exceptions in iter:0
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:2

analyse the exceptions in iter:2
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [113., 111., 105., ...,  72.,  72.,  72.],
          [111., 104.,  99., ...,  68.,  70.,  78.],
          [106.,  99.,  95., ...,  78.,  79.,  80.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [120., 118., 112., ...,  81.,  80.,  80.],
          [118., 111., 106., ...,  75.,  76.,  84.],
          [113., 106., 102., ...,  85.,  85.,  86.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [112., 111., 106., ...,  80.,  79.,  79.],
          [110., 104.,  98., ...,  73.,  75.,  82.],
          [105.,  98.,  94., ...,  83.,  83.,  84.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:3

analyse the exceptions in iter:3
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  37.,  38., ...,  76.,  81.,  85.],
          [ 33.,  34.,  32., ...,  95.,  96.,  85.],
          [ 39.,  40.,  57., ...,  93., 107.,  95.],
          ...,
          [ 83.,  87.,  84., ...,  99.,  90.,  81.],
          [ 88.,  90.,  93., ...,  80.,  76.,  82.],
          [ 97.,  94.,  93., ...,  54.,  63.,  72.]],

         [[ 25.,  34.,  35., ...,  67.,  72.,  76.],
          [ 28.,  30.,  27., ...,  82.,  82.,  72.],
          [ 32.,  33.,  50., ...,  76.,  89.,  77.],
          ...,
          [ 73.,  77.,  74., ...,  93.,  84.,  75.],
          [ 72.,  74.,  77., ...,  74.,  70.,  76.],
          [ 78.,  75.,  75., ...,  47.,  56.,  65.]],

         [[ 10.,  19.,  20., ...,  39.,  43.,  47.],
          [ 13.,  14.,  12., ...,  55.,  56.,  45.],
          [ 15.,  17.,  33., ...,  52.,  66.,  54.],
          ...,
          [ 52.,  56.,  52., ...,  70.,  61.,  52.],
          [ 51.,  52.,  56., ...,  53.,  49.,  55.],
          [ 56.,  53.,  53., ...,  28.,  37.,  46.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:4

analyse the exceptions in iter:4
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[170., 168., 177., ..., 162., 158., 157.],
          [168., 172., 171., ..., 159., 156., 154.],
          [154., 149., 129., ..., 161., 157., 154.],
          ...,
          [ 74.,  76.,  78., ...,  71.,  68.,  61.],
          [ 68.,  69.,  72., ...,  76.,  71.,  71.],
          [ 67.,  68.,  69., ...,  75.,  71.,  73.]],

         [[180., 178., 185., ..., 179., 178., 177.],
          [181., 185., 183., ..., 177., 176., 174.],
          [170., 165., 144., ..., 178., 177., 174.],
          ...,
          [ 84.,  85.,  85., ...,  75.,  72.,  65.],
          [ 76.,  77.,  79., ...,  80.,  75.,  75.],
          [ 75.,  76.,  75., ...,  79.,  75.,  77.]],

         [[198., 196., 203., ..., 215., 214., 212.],
          [198., 201., 200., ..., 212., 211., 209.],
          [186., 181., 162., ..., 214., 212., 209.],
          ...,
          [ 80.,  81.,  82., ...,  78.,  75.,  68.],
          [ 77.,  78.,  78., ...,  83.,  78.,  78.],
          [ 78.,  79.,  76., ...,  82.,  78.,  80.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:5

analyse the exceptions in iter:5
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[159., 150., 153., ...,  91.,  74.,  76.],
          [142., 146., 155., ..., 127., 122.,  86.],
          [109.,  99., 105., ..., 137., 163.,  93.],
          ...,
          [244., 240., 241., ..., 156., 179., 200.],
          [246., 243., 243., ..., 162., 178., 192.],
          [246., 243., 244., ..., 166., 173., 182.]],

         [[102.,  91.,  95., ...,  71.,  63.,  58.],
          [ 75.,  72.,  76., ..., 105., 111.,  69.],
          [ 67.,  58.,  59., ..., 112., 132.,  72.],
          ...,
          [129., 123., 122., ...,  42.,  59.,  73.],
          [133., 128., 127., ...,  44.,  56.,  65.],
          [139., 133., 132., ...,  47.,  51.,  57.]],

         [[101.,  95.,  97., ...,  56.,  55.,  55.],
          [ 68.,  66.,  65., ...,  71.,  93.,  61.],
          [ 75.,  60.,  52., ...,  80., 105.,  71.],
          ...,
          [ 70.,  65.,  65., ...,  15.,  26.,  36.],
          [ 74.,  72.,  70., ...,  14.,  22.,  27.],
          [ 82.,  78.,  77., ...,  14.,  17.,  19.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:6

analyse the exceptions in iter:6
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[164., 105., 118., ..., 109., 108.,  91.],
          [167., 116.,  72., ..., 105., 105.,  89.],
          [140., 142., 119., ..., 104.,  84.,  78.],
          ...,
          [139., 142., 135., ...,  89.,  97., 126.],
          [163., 153., 146., ...,  85.,  98., 127.],
          [183., 176., 154., ...,  94.,  91., 122.]],

         [[206., 140., 148., ..., 147., 147., 129.],
          [213., 160., 109., ..., 142., 142., 127.],
          [191., 193., 163., ..., 139., 120., 115.],
          ...,
          [148., 155., 156., ..., 134., 148., 176.],
          [157., 164., 164., ..., 130., 148., 178.],
          [153., 182., 154., ..., 134., 133., 170.]],

         [[ 84.,  61., 101., ...,  73.,  69.,  57.],
          [ 84.,  49.,  43., ...,  79.,  72.,  57.],
          [ 65.,  66.,  79., ...,  84.,  58.,  49.],
          ...,
          [ 81.,  74.,  72., ...,  28.,  24.,  49.],
          [ 85.,  82.,  90., ...,  19.,  27.,  48.],
          [102., 116., 100., ...,  29.,  26.,  44.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:7

analyse the exceptions in iter:7
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  30.,  33., ...,  43.,  52.,  46.],
          [ 27.,  27.,  21., ..., 112., 117., 115.],
          [ 34.,  33.,  24., ..., 175., 177., 176.],
          ...,
          [142., 142., 150., ..., 134., 128., 134.],
          [140., 145., 150., ..., 131., 130., 122.],
          [134., 136., 136., ..., 106., 104., 101.]],

         [[ 35.,  34.,  44., ...,  56.,  64.,  58.],
          [ 30.,  28.,  31., ..., 136., 140., 138.],
          [ 36.,  33.,  30., ..., 208., 209., 208.],
          ...,
          [176., 176., 184., ..., 175., 168., 175.],
          [176., 180., 186., ..., 170., 170., 162.],
          [171., 171., 171., ..., 144., 142., 140.]],

         [[ 39.,  44.,  47., ...,  45.,  53.,  47.],
          [ 38.,  41.,  39., ...,  97., 101., 100.],
          [ 42.,  43.,  40., ..., 143., 144., 143.],
          ...,
          [118., 118., 127., ..., 119., 112., 119.],
          [124., 129., 134., ..., 119., 119., 111.],
          [123., 124., 124., ..., 100.,  99.,  96.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:8

analyse the exceptions in iter:8
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[134., 131., 128., ..., 127., 127., 128.],
          [133., 129., 128., ..., 127., 127., 128.],
          [128., 127., 128., ..., 126., 126., 126.],
          ...,
          [174., 171., 155., ...,  27.,  29.,  28.],
          [194., 189., 159., ...,  30.,  30.,  30.],
          [193., 181., 168., ...,  31.,  32.,  32.]],

         [[186., 184., 182., ..., 181., 181., 182.],
          [189., 186., 186., ..., 183., 183., 184.],
          [185., 182., 182., ..., 181., 181., 180.],
          ...,
          [208., 206., 189., ...,  94.,  96.,  94.],
          [221., 215., 196., ...,  95.,  96.,  95.],
          [217., 208., 201., ...,  94.,  94.,  94.]],

         [[223., 220., 218., ..., 222., 222., 223.],
          [228., 224., 224., ..., 224., 224., 225.],
          [226., 223., 223., ..., 222., 222., 221.],
          ...,
          [235., 229., 216., ..., 136., 137., 136.],
          [244., 239., 225., ..., 138., 139., 140.],
          [237., 230., 227., ..., 136., 137., 138.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:9

analyse the exceptions in iter:9
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[125., 110., 102., ..., 202., 200., 202.],
          [142., 146., 176., ..., 195., 198., 204.],
          [180., 143., 156., ..., 122., 139., 158.],
          ...,
          [104., 101., 101., ..., 126., 126., 125.],
          [104., 105., 109., ..., 138., 137., 137.],
          [105., 108., 115., ..., 143., 143., 144.]],

         [[125., 101.,  90., ..., 207., 205., 208.],
          [146., 144., 172., ..., 201., 205., 211.],
          [185., 146., 157., ..., 111., 128., 147.],
          ...,
          [ 82.,  80.,  81., ..., 103., 103., 101.],
          [ 81.,  84.,  88., ..., 113., 113., 112.],
          [ 83.,  87.,  94., ..., 117., 116., 116.]],

         [[116.,  91.,  83., ..., 214., 212., 214.],
          [142., 139., 170., ..., 205., 209., 215.],
          [183., 146., 157., ..., 113., 131., 150.],
          ...,
          [ 41.,  39.,  38., ...,  67.,  69.,  68.],
          [ 40.,  41.,  43., ...,  78.,  80.,  81.],
          [ 42.,  45.,  50., ...,  82.,  84.,  86.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:10

final statics:
total operators:28
tensorflow --> nums:10,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:10
mindspore --> 
torch --> 

generate models:10

analyse the exceptions in iter:10
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[53., 54., 56., ..., 47., 41., 24.],
          [46., 53., 54., ..., 42., 39., 28.],
          [45., 50., 46., ..., 38., 36., 29.],
          ...,
          [71., 74., 80., ..., 51., 46., 49.],
          [75., 79., 81., ..., 61., 64., 48.],
          [85., 85., 86., ..., 61., 64., 49.]],

         [[65., 63., 60., ..., 51., 45., 28.],
          [59., 62., 59., ..., 46., 43., 32.],
          [59., 60., 52., ..., 42., 40., 33.],
          ...,
          [83., 83., 85., ..., 54., 49., 50.],
          [82., 85., 85., ..., 65., 67., 50.],
          [83., 84., 86., ..., 65., 67., 50.]],

         [[53., 52., 50., ..., 50., 44., 27.],
          [41., 45., 44., ..., 45., 42., 31.],
          [38., 41., 34., ..., 41., 39., 32.],
          ...,
          [66., 66., 67., ..., 33., 34., 41.],
          [67., 69., 67., ..., 41., 48., 41.],
          [71., 71., 70., ..., 39., 46., 41.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:11

analyse the exceptions in iter:11
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[142., 172., 176., ..., 216., 198., 205.],
          [191., 196., 174., ..., 229., 222., 217.],
          [220., 217., 192., ..., 224., 225., 218.],
          ...,
          [197., 196., 201., ..., 200., 199., 205.],
          [196., 191., 193., ..., 198., 199., 201.],
          [186., 182., 174., ..., 158., 158., 163.]],

         [[149., 172., 168., ..., 212., 194., 202.],
          [190., 192., 166., ..., 222., 215., 210.],
          [212., 209., 183., ..., 214., 214., 208.],
          ...,
          [152., 152., 156., ..., 165., 165., 164.],
          [157., 152., 154., ..., 164., 165., 161.],
          [150., 147., 139., ..., 124., 125., 125.]],

         [[152., 167., 154., ..., 211., 193., 200.],
          [192., 190., 159., ..., 220., 213., 207.],
          [212., 208., 182., ..., 209., 210., 203.],
          ...,
          [136., 135., 140., ..., 146., 146., 150.],
          [139., 135., 136., ..., 144., 145., 146.],
          [133., 130., 121., ..., 105., 106., 111.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:12

analyse the exceptions in iter:12
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[164., 162., 162., ..., 157., 153., 153.],
          [168., 166., 166., ..., 164., 160., 158.],
          [172., 170., 171., ..., 168., 165., 163.],
          ...,
          [123., 117., 112., ..., 117.,  95., 120.],
          [120., 116., 112., ..., 126., 120., 120.],
          [121., 120., 116., ..., 124., 124., 120.]],

         [[215., 212., 212., ..., 210., 208., 203.],
          [218., 215., 215., ..., 212., 209., 205.],
          [220., 217., 218., ..., 212., 208., 207.],
          ...,
          [160., 154., 149., ..., 136., 115., 149.],
          [156., 151., 147., ..., 149., 144., 152.],
          [154., 152., 148., ..., 152., 154., 154.]],

         [[244., 240., 240., ..., 237., 235., 234.],
          [245., 242., 242., ..., 238., 236., 235.],
          [246., 243., 244., ..., 238., 235., 236.],
          ...,
          [105., 102.,  99., ..., 100.,  79., 100.],
          [100.,  99.,  96., ..., 110., 103., 101.],
          [ 96.,  99.,  97., ..., 108., 107., 100.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:13

analyse the exceptions in iter:13
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 17.,  17.,  17., ...,  23.,  22.,  19.],
          [ 18.,  18.,  18., ...,  24.,  23.,  22.],
          [ 18.,  18.,  19., ...,  24.,  23.,  23.],
          ...,
          [217., 226., 210., ...,  33.,  32.,  33.],
          [219., 222., 214., ...,  35.,  34.,  33.],
          [210., 221., 215., ...,  36.,  34.,  32.]],

         [[  3.,   3.,   2., ...,  13.,  12.,   9.],
          [  4.,   4.,   4., ...,  14.,  13.,  12.],
          [  4.,   4.,   5., ...,  14.,  13.,  13.],
          ...,
          [214., 219., 201., ...,  24.,  23.,  24.],
          [215., 215., 208., ...,  26.,  25.,  24.],
          [208., 216., 212., ...,  27.,  25.,  23.]],

         [[  2.,   2.,   1., ...,  11.,  10.,   7.],
          [  3.,   3.,   3., ...,  12.,  11.,  10.],
          [  3.,   3.,   4., ...,  12.,  11.,  11.],
          ...,
          [223., 227., 213., ...,  17.,  16.,  17.],
          [230., 229., 225., ...,  19.,  18.,  17.],
          [223., 229., 227., ...,  20.,  18.,  16.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:14

analyse the exceptions in iter:14
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[100.,  98.,  99., ..., 165., 163., 165.],
          [101., 100., 100., ..., 164., 163., 159.],
          [105., 104., 104., ..., 156., 136., 114.],
          ...,
          [166., 166., 168., ..., 137., 137., 147.],
          [161., 162., 167., ..., 131., 138., 137.],
          [164., 162., 164., ..., 153., 157., 156.]],

         [[146., 144., 144., ..., 165., 163., 165.],
          [145., 143., 143., ..., 161., 162., 161.],
          [147., 145., 145., ..., 150., 133., 117.],
          ...,
          [156., 156., 157., ..., 127., 126., 136.],
          [152., 153., 158., ..., 125., 133., 132.],
          [158., 156., 158., ..., 146., 151., 150.]],

         [[192., 189., 189., ..., 165., 163., 165.],
          [188., 186., 186., ..., 159., 159., 157.],
          [189., 186., 187., ..., 147., 129., 111.],
          ...,
          [150., 151., 152., ..., 112., 114., 127.],
          [149., 150., 155., ..., 117., 124., 120.],
          [155., 153., 155., ..., 139., 141., 137.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:15

analyse the exceptions in iter:16
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[235., 235., 237., ..., 233., 227., 223.],
          [231., 232., 234., ..., 231., 225., 221.],
          [231., 233., 237., ..., 232., 225., 221.],
          ...,
          [125., 126., 143., ...,  66.,  65.,  68.],
          [127., 141., 149., ...,  63.,  67.,  62.],
          [137., 142., 149., ...,  62.,  61.,  51.]],

         [[236., 236., 238., ..., 234., 230., 228.],
          [232., 233., 235., ..., 232., 228., 225.],
          [232., 234., 238., ..., 233., 228., 226.],
          ...,
          [124., 125., 142., ...,  89.,  86.,  83.],
          [125., 140., 148., ...,  89.,  88.,  79.],
          [135., 140., 147., ...,  90.,  84.,  68.]],

         [[238., 238., 240., ..., 236., 233., 232.],
          [234., 235., 237., ..., 234., 232., 233.],
          [234., 236., 240., ..., 235., 232., 233.],
          ...,
          [122., 123., 140., ...,  23.,  23.,  37.],
          [125., 139., 148., ...,  24.,  26.,  29.],
          [136., 141., 148., ...,  27.,  23.,  14.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:16

analyse the exceptions in iter:17
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[110., 142., 151., ...,  39.,  40.,  38.],
          [109., 141., 152., ...,  36.,  40.,  36.],
          [105., 142., 151., ...,  39.,  44.,  39.],
          ...,
          [ 62.,  39.,  60., ...,  42.,  46.,  47.],
          [ 62.,  52.,  58., ...,  43.,  47.,  49.],
          [ 55.,  60.,  56., ...,  45.,  47.,  51.]],

         [[104., 135., 146., ...,  39.,  40.,  38.],
          [103., 133., 147., ...,  36.,  40.,  36.],
          [ 98., 133., 145., ...,  39.,  44.,  39.],
          ...,
          [ 59.,  38.,  64., ...,  44.,  44.,  44.],
          [ 57.,  51.,  61., ...,  46.,  45.,  46.],
          [ 51.,  60.,  60., ...,  48.,  46.,  48.]],

         [[ 97., 118., 120., ...,  39.,  40.,  38.],
          [ 95., 115., 119., ...,  37.,  40.,  36.],
          [ 90., 114., 117., ...,  41.,  45.,  40.],
          ...,
          [ 60.,  49.,  81., ...,  56.,  55.,  55.],
          [ 56.,  61.,  78., ...,  58.,  58.,  60.],
          [ 50.,  71.,  78., ...,  60.,  60.,  62.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:17

analyse the exceptions in iter:19
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 23.,  47.,  52., ..., 131., 182., 215.],
          [ 32.,  51.,  56., ..., 149., 204., 209.],
          [ 41.,  59.,  60., ..., 138., 196., 203.],
          ...,
          [167., 177., 182., ..., 199., 176., 145.],
          [166., 165., 165., ..., 183., 183., 189.],
          [175., 173., 173., ..., 190., 188., 192.]],

         [[ 27.,  49.,  46., ..., 130., 180., 212.],
          [ 31.,  49.,  49., ..., 148., 206., 217.],
          [ 37.,  57.,  59., ..., 138., 200., 217.],
          ...,
          [167., 177., 182., ..., 192., 171., 140.],
          [166., 165., 165., ..., 181., 182., 187.],
          [175., 173., 173., ..., 187., 186., 189.]],

         [[ 22.,  41.,  30., ..., 117., 174., 230.],
          [ 24.,  38.,  34., ..., 133., 197., 232.],
          [ 25.,  47.,  51., ..., 125., 194., 233.],
          ...,
          [168., 177., 182., ..., 192., 171., 140.],
          [166., 165., 165., ..., 181., 182., 188.],
          [175., 173., 173., ..., 184., 183., 186.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:18

analyse the exceptions in iter:20
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[153., 174., 155., ..., 122., 138.,  97.],
          [160., 164., 150., ..., 137., 160., 103.],
          [140., 147., 136., ..., 104., 125.,  93.],
          ...,
          [175., 170., 170., ..., 193., 197., 199.],
          [174., 173., 171., ..., 200., 202., 208.],
          [168., 164., 166., ..., 204., 204., 206.]],

         [[157., 180., 165., ..., 125., 143., 101.],
          [163., 170., 159., ..., 135., 161., 109.],
          [143., 152., 145., ..., 103., 128., 102.],
          ...,
          [177., 172., 172., ..., 203., 206., 204.],
          [177., 176., 174., ..., 208., 209., 212.],
          [173., 169., 171., ..., 209., 208., 210.]],

         [[155., 188., 172., ..., 123., 141.,  97.],
          [165., 180., 169., ..., 129., 157., 107.],
          [147., 166., 158., ...,  99., 125., 101.],
          ...,
          [179., 174., 174., ..., 212., 214., 213.],
          [181., 180., 178., ..., 216., 218., 221.],
          [180., 175., 177., ..., 217., 217., 219.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:19

analyse the exceptions in iter:21
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[252., 249., 250., ..., 251., 251., 251.],
          [255., 252., 253., ..., 255., 255., 254.],
          [253., 250., 250., ..., 254., 254., 252.],
          ...,
          [254., 252., 253., ..., 252., 253., 252.],
          [250., 252., 255., ..., 254., 255., 254.],
          [236., 249., 250., ..., 250., 250., 251.]],

         [[  8.,  15.,   8., ...,   1.,   0.,   1.],
          [  7.,  15.,  13., ...,   1.,   0.,   4.],
          [  6.,  16.,  24., ...,   1.,   0.,   9.],
          ...,
          [ 66.,  62.,  64., ...,  70.,  69.,  70.],
          [ 49.,  53.,  59., ...,  70.,  68.,  59.],
          [ 37.,  48.,  42., ...,  78.,  74.,  58.]],

         [[ 42.,  42.,  39., ...,  11.,  15.,  30.],
          [ 43.,  44.,  42., ...,  11.,  18.,  33.],
          [ 42.,  42.,  43., ...,  10.,  20.,  37.],
          ...,
          [ 94.,  92.,  93., ..., 101., 103., 104.],
          [ 81.,  82.,  86., ..., 103., 100.,  89.],
          [ 68.,  76.,  73., ..., 113., 109.,  88.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:20

analyse the exceptions in iter:22
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 86.,  96., 115., ...,  84.,  95.,  79.],
          [125.,  99.,  71., ...,  78.,  88.,  93.],
          [112.,  87.,  58., ...,  89.,  88.,  85.],
          ...,
          [ 66.,  56.,  46., ...,  70.,  61.,  47.],
          [108.,  96.,  86., ...,  57.,  57.,  46.],
          [130., 120.,  98., ...,  44.,  44.,  45.]],

         [[ 74.,  83., 109., ...,  72.,  84.,  68.],
          [110.,  83.,  61., ...,  74.,  82.,  82.],
          [ 95.,  69.,  45., ...,  88.,  84.,  77.],
          ...,
          [ 61.,  53.,  46., ...,  79.,  74.,  57.],
          [100.,  91.,  82., ...,  60.,  65.,  51.],
          [117., 110.,  90., ...,  43.,  46.,  45.]],

         [[ 62.,  65.,  83., ...,  50.,  61.,  45.],
          [104.,  74.,  46., ...,  44.,  51.,  53.],
          [ 89.,  62.,  35., ...,  54.,  50.,  45.],
          ...,
          [ 39.,  33.,  28., ...,  46.,  42.,  31.],
          [ 73.,  66.,  59., ...,  38.,  41.,  31.],
          [ 91.,  86.,  67., ...,  30.,  32.,  32.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:21

analyse the exceptions in iter:23
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[126., 102., 117., ...,  96., 113., 107.],
          [135., 113., 121., ..., 115., 114., 115.],
          [126., 124., 128., ..., 134., 115., 114.],
          ...,
          [141., 155., 134., ..., 149., 147., 122.],
          [153., 164., 146., ..., 163., 189., 184.],
          [125., 129., 124., ..., 133., 180., 168.]],

         [[100.,  76.,  93., ...,  74.,  90.,  84.],
          [109.,  86.,  94., ...,  89.,  89.,  90.],
          [102.,  97., 101., ..., 109.,  90.,  90.],
          ...,
          [111., 123., 102., ..., 140., 133., 106.],
          [122., 132., 119., ..., 156., 178., 174.],
          [100., 106., 102., ..., 127., 173., 162.]],

         [[ 71.,  49.,  60., ...,  42.,  58.,  52.],
          [ 73.,  52.,  56., ...,  58.,  55.,  53.],
          [ 61.,  59.,  60., ...,  77.,  55.,  50.],
          ...,
          [ 85.,  87.,  65., ..., 118., 116.,  94.],
          [ 83.,  89.,  81., ..., 147., 174., 173.],
          [ 56.,  64.,  68., ..., 124., 174., 164.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:22

analyse the exceptions in iter:24
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 73.,  71.,  77., ..., 183., 180., 185.],
          [ 73.,  75.,  78., ..., 181., 172., 174.],
          [ 77.,  94.,  99., ..., 175., 191., 185.],
          ...,
          [ 84.,  86., 118., ...,  79., 159., 117.],
          [ 76.,  81., 103., ...,  56.,  69., 104.],
          [102.,  91.,  95., ..., 100.,  72.,  48.]],

         [[ 77.,  68.,  69., ..., 210., 214., 225.],
          [ 74.,  68.,  64., ..., 229., 220., 218.],
          [ 72.,  82.,  81., ..., 213., 230., 226.],
          ...,
          [106., 105., 133., ...,  95., 177., 133.],
          [ 96.,  98., 116., ...,  80.,  90., 120.],
          [120., 109., 110., ..., 134.,  97.,  59.]],

         [[ 58.,  50.,  44., ..., 149., 143., 144.],
          [ 52.,  55.,  50., ..., 139., 129., 127.],
          [ 64.,  79.,  73., ..., 139., 152., 142.],
          ...,
          [ 56.,  58.,  84., ...,  78., 137.,  94.],
          [ 60.,  56.,  73., ...,  36.,  40.,  69.],
          [ 92.,  62.,  62., ...,  55.,  38.,  29.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:23

analyse the exceptions in iter:28
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[128., 121., 138., ..., 130., 101., 122.],
          [133., 125., 136., ..., 131., 106., 127.],
          [141., 126., 141., ..., 132., 114., 126.],
          ...,
          [191., 186., 175., ..., 190., 182., 195.],
          [210., 207., 198., ..., 194., 184., 192.],
          [209., 206., 207., ..., 201., 193., 196.]],

         [[141., 134., 151., ..., 150., 121., 141.],
          [146., 138., 149., ..., 151., 126., 147.],
          [155., 139., 154., ..., 152., 134., 146.],
          ...,
          [178., 174., 160., ..., 179., 175., 188.],
          [195., 197., 179., ..., 179., 178., 186.],
          [194., 195., 189., ..., 187., 187., 190.]],

         [[123., 116., 133., ..., 138., 109., 129.],
          [128., 120., 131., ..., 139., 114., 135.],
          [136., 121., 136., ..., 140., 122., 134.],
          ...,
          [126., 124., 112., ..., 138., 137., 145.],
          [143., 144., 129., ..., 138., 133., 142.],
          [142., 143., 138., ..., 145., 142., 146.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:24

analyse the exceptions in iter:29
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[202., 202., 204., ..., 207., 205., 203.],
          [206., 206., 207., ..., 210., 208., 206.],
          [210., 211., 212., ..., 214., 212., 210.],
          ...,
          [218., 210., 194., ..., 243., 244., 243.],
          [219., 217., 216., ..., 241., 241., 241.],
          [217., 216., 217., ..., 239., 239., 240.]],

         [[204., 204., 206., ..., 208., 206., 204.],
          [208., 208., 209., ..., 211., 209., 207.],
          [212., 213., 214., ..., 214., 213., 211.],
          ...,
          [217., 209., 194., ..., 242., 242., 243.],
          [218., 216., 216., ..., 240., 240., 240.],
          [216., 215., 216., ..., 238., 238., 238.]],

         [[199., 199., 201., ..., 200., 199., 198.],
          [203., 203., 204., ..., 205., 203., 201.],
          [207., 208., 210., ..., 210., 208., 206.],
          ...,
          [222., 214., 198., ..., 247., 247., 247.],
          [223., 221., 220., ..., 245., 245., 245.],
          [221., 220., 221., ..., 243., 243., 243.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:25

analyse the exceptions in iter:30
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[126., 122., 126., ..., 124., 120., 117.],
          [122., 119., 121., ..., 124., 122., 117.],
          [122., 121., 121., ..., 126., 123., 121.],
          ...,
          [126., 126., 128., ..., 133., 122., 114.],
          [125., 126., 127., ..., 128., 121., 114.],
          [123., 123., 126., ..., 128., 126., 121.]],

         [[118., 115., 119., ..., 118., 114., 111.],
          [115., 112., 114., ..., 118., 116., 111.],
          [115., 114., 114., ..., 120., 117., 115.],
          ...,
          [118., 118., 120., ..., 125., 114., 106.],
          [117., 118., 119., ..., 120., 113., 106.],
          [115., 115., 118., ..., 119., 118., 113.]],

         [[110., 108., 111., ..., 106., 102.,  99.],
          [107., 104., 106., ..., 106., 104.,  99.],
          [107., 106., 106., ..., 108., 105., 103.],
          ...,
          [107., 107., 109., ..., 114., 103.,  95.],
          [106., 107., 108., ..., 109., 102.,  95.],
          [104., 104., 107., ..., 109., 107., 102.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:26

analyse the exceptions in iter:32
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 50.,  51.,  42., ...,  48.,  18.,  14.],
          [ 86.,  92.,  82., ...,  46.,  17.,  11.],
          [ 43.,  43.,  51., ...,  42.,  10.,   6.],
          ...,
          [220., 209., 199., ..., 177., 176., 175.],
          [188., 182., 182., ..., 176., 175., 174.],
          [188., 184., 186., ..., 176., 176., 173.]],

         [[ 64.,  63.,  55., ...,  45.,  18.,  15.],
          [107., 110.,  99., ...,  43.,  17.,  12.],
          [ 60.,  56.,  65., ...,  39.,  10.,   6.],
          ...,
          [165., 174., 172., ..., 171., 170., 168.],
          [178., 170., 161., ..., 168., 167., 166.],
          [167., 163., 167., ..., 169., 168., 165.]],

         [[ 37.,  41.,  41., ...,  42.,  14.,  12.],
          [ 67.,  76.,  67., ...,  41.,  14.,  10.],
          [ 42.,  41.,  46., ...,  37.,   9.,   5.],
          ...,
          [151., 165., 164., ..., 168., 167., 166.],
          [162., 162., 157., ..., 166., 165., 164.],
          [162., 157., 160., ..., 166., 166., 162.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:27

analyse the exceptions in iter:33
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[  7.,   7.,   5., ...,  82.,  80.,  69.],
          [  6.,   6.,   5., ...,  85.,  86.,  81.],
          [  1.,   7.,   8., ...,  98.,  96.,  86.],
          ...,
          [150., 135., 129., ...,  72.,  45.,  26.],
          [156., 153., 138., ...,  57.,  23.,  38.],
          [183., 191., 182., ...,  83.,  67., 114.]],

         [[  5.,   5.,   4., ...,  84.,  85.,  73.],
          [  4.,   4.,   3., ...,  86.,  88.,  80.],
          [  1.,   7.,   8., ...,  96.,  96.,  84.],
          ...,
          [153., 136., 129., ...,  72.,  51.,  32.],
          [156., 151., 136., ...,  58.,  32.,  45.],
          [193., 199., 189., ...,  83.,  74., 120.]],

         [[  8.,   8.,   6., ...,  78.,  81.,  68.],
          [  8.,   9.,   8., ...,  77.,  81.,  72.],
          [  6.,  12.,  13., ...,  83.,  85.,  73.],
          ...,
          [139., 121., 113., ...,  69.,  63.,  51.],
          [139., 130., 110., ...,  56.,  48.,  64.],
          [183., 185., 171., ...,  76.,  81., 119.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:28

analyse the exceptions in iter:35
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[251., 247., 247., ..., 229., 244., 251.],
          [249., 246., 246., ..., 233., 249., 252.],
          [167., 167., 167., ..., 217., 217., 220.],
          ...,
          [133., 123., 124., ..., 118., 114., 115.],
          [123., 124., 126., ..., 112., 108., 104.],
          [125., 129., 126., ..., 118., 112., 105.]],

         [[249., 245., 245., ..., 190., 231., 241.],
          [248., 244., 245., ..., 188., 237., 242.],
          [165., 164., 164., ..., 182., 211., 213.],
          ...,
          [130., 127., 130., ..., 125., 122., 125.],
          [125., 127., 129., ..., 122., 119., 119.],
          [128., 132., 130., ..., 128., 122., 121.]],

         [[250., 247., 247., ..., 146., 224., 241.],
          [248., 244., 244., ..., 141., 233., 241.],
          [148., 148., 149., ..., 139., 203., 208.],
          ...,
          [ 39.,  36.,  35., ...,  30.,  26.,  27.],
          [ 36.,  36.,  32., ...,  26.,  27.,  22.],
          [ 42.,  43.,  36., ...,  35.,  33.,  26.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:29

analyse the exceptions in iter:38
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[110., 223., 243., ...,   7.,   0.,   0.],
          [102., 213., 244., ...,  98.,  80.,  31.],
          [ 99., 204., 248., ..., 221., 198.,  89.],
          ...,
          [ 58.,  58.,  51., ...,   8.,   9.,   6.],
          [ 69.,  54.,  49., ...,  48.,  52.,  35.],
          [ 81.,  52.,  50., ...,  15.,  16.,  13.]],

         [[ 90., 197., 215., ...,   2.,   0.,   0.],
          [ 83., 187., 217., ...,  90.,  74.,  27.],
          [ 78., 179., 221., ..., 209., 188.,  81.],
          ...,
          [ 63.,  70.,  69., ...,   8.,  10.,   8.],
          [ 72.,  64.,  65., ...,  44.,  47.,  32.],
          [ 80.,  58.,  63., ...,   5.,   5.,   3.]],

         [[ 84., 185., 201., ...,   3.,   0.,   0.],
          [ 77., 176., 203., ...,  92.,  75.,  28.],
          [ 72., 167., 207., ..., 213., 191.,  83.],
          ...,
          [ 87., 100., 103., ...,  10.,   7.,   5.],
          [ 94.,  92.,  98., ...,  43.,  44.,  30.],
          [100.,  84.,  93., ...,   5.,   5.,   4.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:30

analyse the exceptions in iter:39
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 98., 119., 109., ...,  75.,  60.,  61.],
          [ 44.,  75.,  69., ...,  81.,  55.,  65.],
          [ 73.,  94., 111., ...,  77.,  60.,  58.],
          ...,
          [ 96., 100., 129., ...,  72.,  68.,  85.],
          [124., 114., 110., ...,  84.,  81.,  73.],
          [ 93.,  98.,  95., ...,  73.,  55.,  72.]],

         [[110., 132., 122., ...,  97.,  82.,  84.],
          [ 56.,  86.,  80., ..., 103.,  77.,  87.],
          [ 84., 105., 122., ...,  99.,  82.,  82.],
          ...,
          [ 98., 100., 126., ...,  73.,  71.,  93.],
          [137., 124., 117., ...,  92.,  89.,  81.],
          [110., 112., 106., ...,  82.,  63.,  79.]],

         [[ 96., 117., 107., ...,  76.,  62.,  67.],
          [ 46.,  76.,  70., ...,  82.,  57.,  74.],
          [ 77.,  98., 115., ...,  78.,  61.,  61.],
          ...,
          [ 99., 100., 124., ...,  69.,  67.,  85.],
          [135., 121., 111., ...,  85.,  84.,  74.],
          [107., 107.,  99., ...,  75.,  58.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:31

analyse the exceptions in iter:40
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[101.,  94.,  98., ..., 121., 127., 143.],
          [120., 131., 124., ..., 115., 121., 144.],
          [120., 139., 140., ..., 105., 107., 121.],
          ...,
          [ 48.,  31.,  37., ..., 188., 159., 125.],
          [ 52.,  42.,  44., ..., 173., 165., 150.],
          [ 41.,  38.,  42., ..., 164., 145., 155.]],

         [[114., 116., 112., ..., 119., 130., 136.],
          [122., 132., 119., ..., 116., 126., 141.],
          [126., 140., 139., ...,  97., 103., 121.],
          ...,
          [ 45.,  31.,  37., ..., 157., 130., 106.],
          [ 46.,  40.,  45., ..., 135., 136., 132.],
          [ 42.,  38.,  41., ..., 130., 120., 134.]],

         [[ 35.,  48.,  42., ...,  58.,  66.,  90.],
          [ 64.,  98.,  74., ...,  53.,  63.,  77.],
          [ 50.,  82.,  82., ...,  56.,  61.,  65.],
          ...,
          [ 40.,  24.,  27., ..., 103.,  93.,  60.],
          [ 41.,  32.,  32., ..., 102.,  99.,  92.],
          [ 32.,  33.,  33., ...,  98.,  79.,  91.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:32

analyse the exceptions in iter:44
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[139., 144., 146., ..., 132., 131., 129.],
          [139., 124., 128., ..., 110., 108., 114.],
          [172., 126., 116., ...,  67.,  68., 113.],
          ...,
          [ 95.,  93.,  91., ...,  81., 104., 107.],
          [132., 124., 119., ..., 114., 131., 132.],
          [110., 124., 129., ..., 129., 128., 112.]],

         [[154., 160., 162., ..., 140., 142., 141.],
          [148., 137., 149., ..., 114., 112., 127.],
          [162., 114., 109., ...,  71.,  68., 119.],
          ...,
          [ 88.,  82.,  84., ...,  94., 103., 102.],
          [109., 105., 104., ..., 104., 112., 110.],
          [108., 116., 116., ..., 117., 114., 105.]],

         [[188., 192., 192., ...,  77.,  76.,  70.],
          [180., 167., 178., ...,  81.,  76.,  68.],
          [172., 121., 129., ...,  50.,  58.,  78.],
          ...,
          [ 44.,  45.,  44., ...,  30.,  51.,  53.],
          [ 74.,  69.,  61., ...,  59.,  74.,  70.],
          [ 52.,  67.,  67., ...,  80.,  75.,  59.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:33

analyse the exceptions in iter:46
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 94.,  72.,  60., ...,  72.,  71.,  77.],
          [ 85.,  67.,  52., ...,  67.,  72.,  77.],
          [ 82.,  54.,  41., ...,  70.,  71.,  78.],
          ...,
          [ 78.,  54.,  37., ...,  51.,  44.,  52.],
          [133., 117.,  98., ...,  62.,  53.,  60.],
          [140., 137., 138., ...,  85.,  79.,  69.]],

         [[ 91.,  71.,  68., ...,  78.,  75.,  82.],
          [ 83.,  66.,  57., ...,  73.,  78.,  85.],
          [ 82.,  53.,  44., ...,  76.,  77.,  85.],
          ...,
          [ 79.,  54.,  37., ...,  49.,  47.,  50.],
          [127., 111.,  92., ...,  58.,  56.,  59.],
          [129., 126., 126., ...,  68.,  71.,  63.]],

         [[ 62.,  42.,  35., ...,  43.,  39.,  41.],
          [ 55.,  38.,  29., ...,  41.,  37.,  39.],
          [ 53.,  24.,  19., ...,  53.,  37.,  39.],
          ...,
          [ 86.,  63.,  46., ...,  28.,  20.,  28.],
          [129., 115.,  98., ...,  35.,  28.,  36.],
          [126., 125., 129., ...,  46.,  46.,  42.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:34

analyse the exceptions in iter:47
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 77.,  76.,  78., ...,  68.,  58.,  48.],
          [ 71.,  67.,  69., ...,  57.,  44.,  36.],
          [ 55.,  52.,  58., ...,  62.,  53.,  48.],
          ...,
          [ 63.,  62.,  67., ...,  63.,  58.,  55.],
          [ 89.,  91.,  89., ...,  65.,  68.,  66.],
          [103., 107.,  92., ...,  69.,  77.,  77.]],

         [[113., 112., 114., ..., 104.,  94.,  84.],
          [107., 102., 105., ...,  93.,  80.,  72.],
          [ 91.,  88.,  94., ...,  98.,  89.,  84.],
          ...,
          [ 97.,  92.,  97., ...,  97.,  92.,  89.],
          [118., 116., 114., ...,  99., 102., 101.],
          [129., 131., 119., ..., 104., 111., 112.]],

         [[137., 136., 139., ..., 128., 118., 108.],
          [131., 126., 130., ..., 116., 104.,  96.],
          [115., 112., 119., ..., 122., 113., 108.],
          ...,
          [119., 115., 121., ..., 123., 118., 115.],
          [136., 135., 136., ..., 122., 125., 124.],
          [144., 147., 138., ..., 127., 134., 135.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:35

final statics:
total operators:28
tensorflow --> nums:35,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:35
mindspore --> 
torch --> 

generate models:35

analyse the exceptions in iter:50
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 16.,  17.,  17., ...,  62.,  55.,  51.],
          [ 16.,  16.,  15., ...,  62.,  58.,  52.],
          [ 16.,  15.,  15., ...,  57.,  59.,  56.],
          ...,
          [ 96., 114., 119., ..., 128., 120., 117.],
          [118., 100., 114., ..., 139., 131., 121.],
          [144., 136., 105., ..., 145., 137., 131.]],

         [[ 76.,  77.,  77., ..., 106.,  99.,  94.],
          [ 76.,  76.,  75., ..., 109., 105., 100.],
          [ 76.,  75.,  75., ..., 110., 111., 109.],
          ...,
          [110., 127., 132., ..., 135., 130., 131.],
          [132., 113., 126., ..., 146., 140., 134.],
          [148., 140., 114., ..., 151., 144., 141.]],

         [[ 74.,  75.,  75., ...,  87.,  80.,  75.],
          [ 74.,  74.,  74., ...,  84.,  80.,  75.],
          [ 74.,  73.,  73., ...,  79.,  80.,  78.],
          ...,
          [138., 159., 167., ..., 153., 145., 142.],
          [159., 145., 163., ..., 159., 153., 147.],
          [173., 168., 143., ..., 170., 163., 158.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:36

analyse the exceptions in iter:51
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[213., 119.,  58., ..., 143., 140., 117.],
          [214., 128.,  62., ..., 138., 136., 111.],
          [215., 139.,  75., ..., 136., 134., 107.],
          ...,
          [118., 122., 129., ..., 158., 151., 145.],
          [111., 117., 128., ..., 153., 147., 141.],
          [110., 116., 127., ..., 141., 136., 139.]],

         [[221., 127.,  71., ..., 158., 142., 101.],
          [223., 137.,  75., ..., 152., 138.,  95.],
          [224., 148.,  88., ..., 151., 136.,  91.],
          ...,
          [ 45.,  45.,  46., ...,  65.,  68.,  67.],
          [ 38.,  42.,  47., ...,  62.,  59.,  63.],
          [ 38.,  40.,  48., ...,  55.,  52.,  58.]],

         [[221., 122.,  81., ..., 150., 136.,  87.],
          [220., 130.,  83., ..., 145., 133.,  82.],
          [219., 139.,  94., ..., 143., 131.,  77.],
          ...,
          [ 37.,  40.,  42., ...,  54.,  55.,  55.],
          [ 32.,  36.,  41., ...,  53.,  49.,  51.],
          [ 32.,  34.,  41., ...,  46.,  43.,  47.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:37

analyse the exceptions in iter:52
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 63.,  77.,  66., ...,  76.,  86., 114.],
          [ 72.,  70.,  64., ...,  84.,  81.,  88.],
          [ 56.,  70.,  54., ..., 139., 104.,  77.],
          ...,
          [118., 152., 175., ..., 102., 128., 179.],
          [137., 148., 148., ..., 121., 170., 203.],
          [171., 173., 153., ..., 167., 187., 174.]],

         [[ 70.,  88.,  88., ...,  91.,  94., 116.],
          [ 71.,  83.,  85., ...,  94.,  91.,  97.],
          [ 65.,  82.,  76., ..., 142., 114.,  93.],
          ...,
          [107., 135., 155., ...,  79., 105., 150.],
          [123., 129., 129., ...,  94., 142., 168.],
          [145., 146., 130., ..., 136., 157., 143.]],

         [[ 37.,  63.,  63., ...,  65.,  71.,  95.],
          [ 39.,  58.,  58., ...,  71.,  67.,  73.],
          [ 34.,  53.,  48., ..., 120.,  90.,  71.],
          ...,
          [ 85., 111., 133., ...,  63.,  85., 114.],
          [101., 109., 105., ...,  74., 116., 130.],
          [108., 107.,  96., ..., 107., 129., 115.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:38

analyse the exceptions in iter:53
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[157., 156., 157., ..., 177., 177., 175.],
          [162., 162., 162., ..., 187., 182., 179.],
          [165., 164., 165., ..., 211., 204., 191.],
          ...,
          [172., 168., 166., ..., 203., 203., 200.],
          [177., 175., 172., ..., 203., 203., 200.],
          [182., 182., 179., ..., 203., 203., 200.]],

         [[159., 158., 159., ..., 183., 180., 179.],
          [164., 164., 164., ..., 194., 187., 183.],
          [167., 166., 167., ..., 220., 210., 196.],
          ...,
          [174., 170., 167., ..., 205., 205., 202.],
          [179., 177., 173., ..., 205., 205., 202.],
          [184., 183., 180., ..., 205., 205., 202.]],

         [[146., 145., 146., ..., 185., 183., 179.],
          [151., 151., 151., ..., 200., 193., 186.],
          [154., 153., 154., ..., 226., 219., 201.],
          ...,
          [161., 158., 158., ..., 201., 201., 199.],
          [166., 166., 164., ..., 202., 202., 199.],
          [171., 174., 173., ..., 202., 202., 199.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:39

analyse the exceptions in iter:56
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[141., 139., 136., ..., 228., 228., 229.],
          [148., 150., 148., ..., 228., 228., 228.],
          [149., 149., 148., ..., 230., 229., 229.],
          ...,
          [125., 124., 139., ..., 220., 199., 208.],
          [126., 116., 135., ..., 246., 226., 196.],
          [143., 145., 169., ..., 254., 255., 227.]],

         [[ 70.,  61.,  55., ..., 198., 199., 200.],
          [ 71.,  67.,  64., ..., 197., 196., 197.],
          [ 72.,  66.,  64., ..., 197., 197., 197.],
          ...,
          [100., 102., 110., ..., 169., 143., 149.],
          [101.,  93., 107., ..., 205., 181., 145.],
          [105., 107., 127., ..., 208., 206., 174.]],

         [[  8.,   2.,   0., ..., 155., 156., 157.],
          [ 10.,   5.,   2., ..., 153., 152., 153.],
          [ 17.,   7.,   4., ..., 151., 151., 151.],
          ...,
          [ 73.,  80.,  75., ..., 109.,  86.,  93.],
          [ 75.,  71.,  73., ..., 144., 121.,  87.],
          [ 67.,  71.,  83., ..., 141., 138., 105.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:40

analyse the exceptions in iter:0
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:2

analyse the exceptions in iter:2
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [113., 111., 105., ...,  72.,  72.,  72.],
          [111., 104.,  99., ...,  68.,  70.,  78.],
          [106.,  99.,  95., ...,  78.,  79.,  80.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [120., 118., 112., ...,  81.,  80.,  80.],
          [118., 111., 106., ...,  75.,  76.,  84.],
          [113., 106., 102., ...,  85.,  85.,  86.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [112., 111., 106., ...,  80.,  79.,  79.],
          [110., 104.,  98., ...,  73.,  75.,  82.],
          [105.,  98.,  94., ...,  83.,  83.,  84.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:3

analyse the exceptions in iter:3
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  37.,  38., ...,  76.,  81.,  85.],
          [ 33.,  34.,  32., ...,  95.,  96.,  85.],
          [ 39.,  40.,  57., ...,  93., 107.,  95.],
          ...,
          [ 83.,  87.,  84., ...,  99.,  90.,  81.],
          [ 88.,  90.,  93., ...,  80.,  76.,  82.],
          [ 97.,  94.,  93., ...,  54.,  63.,  72.]],

         [[ 25.,  34.,  35., ...,  67.,  72.,  76.],
          [ 28.,  30.,  27., ...,  82.,  82.,  72.],
          [ 32.,  33.,  50., ...,  76.,  89.,  77.],
          ...,
          [ 73.,  77.,  74., ...,  93.,  84.,  75.],
          [ 72.,  74.,  77., ...,  74.,  70.,  76.],
          [ 78.,  75.,  75., ...,  47.,  56.,  65.]],

         [[ 10.,  19.,  20., ...,  39.,  43.,  47.],
          [ 13.,  14.,  12., ...,  55.,  56.,  45.],
          [ 15.,  17.,  33., ...,  52.,  66.,  54.],
          ...,
          [ 52.,  56.,  52., ...,  70.,  61.,  52.],
          [ 51.,  52.,  56., ...,  53.,  49.,  55.],
          [ 56.,  53.,  53., ...,  28.,  37.,  46.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:4

analyse the exceptions in iter:4
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[170., 168., 177., ..., 162., 158., 157.],
          [168., 172., 171., ..., 159., 156., 154.],
          [154., 149., 129., ..., 161., 157., 154.],
          ...,
          [ 74.,  76.,  78., ...,  71.,  68.,  61.],
          [ 68.,  69.,  72., ...,  76.,  71.,  71.],
          [ 67.,  68.,  69., ...,  75.,  71.,  73.]],

         [[180., 178., 185., ..., 179., 178., 177.],
          [181., 185., 183., ..., 177., 176., 174.],
          [170., 165., 144., ..., 178., 177., 174.],
          ...,
          [ 84.,  85.,  85., ...,  75.,  72.,  65.],
          [ 76.,  77.,  79., ...,  80.,  75.,  75.],
          [ 75.,  76.,  75., ...,  79.,  75.,  77.]],

         [[198., 196., 203., ..., 215., 214., 212.],
          [198., 201., 200., ..., 212., 211., 209.],
          [186., 181., 162., ..., 214., 212., 209.],
          ...,
          [ 80.,  81.,  82., ...,  78.,  75.,  68.],
          [ 77.,  78.,  78., ...,  83.,  78.,  78.],
          [ 78.,  79.,  76., ...,  82.,  78.,  80.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:5

analyse the exceptions in iter:5
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[159., 150., 153., ...,  91.,  74.,  76.],
          [142., 146., 155., ..., 127., 122.,  86.],
          [109.,  99., 105., ..., 137., 163.,  93.],
          ...,
          [244., 240., 241., ..., 156., 179., 200.],
          [246., 243., 243., ..., 162., 178., 192.],
          [246., 243., 244., ..., 166., 173., 182.]],

         [[102.,  91.,  95., ...,  71.,  63.,  58.],
          [ 75.,  72.,  76., ..., 105., 111.,  69.],
          [ 67.,  58.,  59., ..., 112., 132.,  72.],
          ...,
          [129., 123., 122., ...,  42.,  59.,  73.],
          [133., 128., 127., ...,  44.,  56.,  65.],
          [139., 133., 132., ...,  47.,  51.,  57.]],

         [[101.,  95.,  97., ...,  56.,  55.,  55.],
          [ 68.,  66.,  65., ...,  71.,  93.,  61.],
          [ 75.,  60.,  52., ...,  80., 105.,  71.],
          ...,
          [ 70.,  65.,  65., ...,  15.,  26.,  36.],
          [ 74.,  72.,  70., ...,  14.,  22.,  27.],
          [ 82.,  78.,  77., ...,  14.,  17.,  19.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:6

analyse the exceptions in iter:6
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[164., 105., 118., ..., 109., 108.,  91.],
          [167., 116.,  72., ..., 105., 105.,  89.],
          [140., 142., 119., ..., 104.,  84.,  78.],
          ...,
          [139., 142., 135., ...,  89.,  97., 126.],
          [163., 153., 146., ...,  85.,  98., 127.],
          [183., 176., 154., ...,  94.,  91., 122.]],

         [[206., 140., 148., ..., 147., 147., 129.],
          [213., 160., 109., ..., 142., 142., 127.],
          [191., 193., 163., ..., 139., 120., 115.],
          ...,
          [148., 155., 156., ..., 134., 148., 176.],
          [157., 164., 164., ..., 130., 148., 178.],
          [153., 182., 154., ..., 134., 133., 170.]],

         [[ 84.,  61., 101., ...,  73.,  69.,  57.],
          [ 84.,  49.,  43., ...,  79.,  72.,  57.],
          [ 65.,  66.,  79., ...,  84.,  58.,  49.],
          ...,
          [ 81.,  74.,  72., ...,  28.,  24.,  49.],
          [ 85.,  82.,  90., ...,  19.,  27.,  48.],
          [102., 116., 100., ...,  29.,  26.,  44.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:7

analyse the exceptions in iter:7
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  30.,  33., ...,  43.,  52.,  46.],
          [ 27.,  27.,  21., ..., 112., 117., 115.],
          [ 34.,  33.,  24., ..., 175., 177., 176.],
          ...,
          [142., 142., 150., ..., 134., 128., 134.],
          [140., 145., 150., ..., 131., 130., 122.],
          [134., 136., 136., ..., 106., 104., 101.]],

         [[ 35.,  34.,  44., ...,  56.,  64.,  58.],
          [ 30.,  28.,  31., ..., 136., 140., 138.],
          [ 36.,  33.,  30., ..., 208., 209., 208.],
          ...,
          [176., 176., 184., ..., 175., 168., 175.],
          [176., 180., 186., ..., 170., 170., 162.],
          [171., 171., 171., ..., 144., 142., 140.]],

         [[ 39.,  44.,  47., ...,  45.,  53.,  47.],
          [ 38.,  41.,  39., ...,  97., 101., 100.],
          [ 42.,  43.,  40., ..., 143., 144., 143.],
          ...,
          [118., 118., 127., ..., 119., 112., 119.],
          [124., 129., 134., ..., 119., 119., 111.],
          [123., 124., 124., ..., 100.,  99.,  96.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:8

analyse the exceptions in iter:8
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[134., 131., 128., ..., 127., 127., 128.],
          [133., 129., 128., ..., 127., 127., 128.],
          [128., 127., 128., ..., 126., 126., 126.],
          ...,
          [174., 171., 155., ...,  27.,  29.,  28.],
          [194., 189., 159., ...,  30.,  30.,  30.],
          [193., 181., 168., ...,  31.,  32.,  32.]],

         [[186., 184., 182., ..., 181., 181., 182.],
          [189., 186., 186., ..., 183., 183., 184.],
          [185., 182., 182., ..., 181., 181., 180.],
          ...,
          [208., 206., 189., ...,  94.,  96.,  94.],
          [221., 215., 196., ...,  95.,  96.,  95.],
          [217., 208., 201., ...,  94.,  94.,  94.]],

         [[223., 220., 218., ..., 222., 222., 223.],
          [228., 224., 224., ..., 224., 224., 225.],
          [226., 223., 223., ..., 222., 222., 221.],
          ...,
          [235., 229., 216., ..., 136., 137., 136.],
          [244., 239., 225., ..., 138., 139., 140.],
          [237., 230., 227., ..., 136., 137., 138.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:9

final statics:
total operators:28
tensorflow --> nums:9,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:9
mindspore --> 
torch --> 

generate models:9

analyse the exceptions in iter:15
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[100., 100., 101., ...,  95.,  94.,  95.],
          [103., 103., 104., ...,  97.,  97.,  97.],
          [107., 106., 106., ..., 100., 100., 101.],
          ...,
          [165., 159., 167., ...,  75.,  75.,  72.],
          [158., 173., 182., ...,  76.,  75.,  77.],
          [161., 162., 160., ...,  98., 129., 162.]],

         [[168., 168., 167., ..., 165., 165., 167.],
          [170., 168., 168., ..., 167., 166., 168.],
          [174., 172., 173., ..., 170., 170., 172.],
          ...,
          [178., 170., 177., ..., 117., 120., 120.],
          [174., 186., 193., ..., 119., 119., 121.],
          [176., 176., 171., ..., 137., 160., 185.]],

         [[231., 229., 230., ..., 231., 228., 229.],
          [230., 228., 226., ..., 229., 227., 229.],
          [233., 230., 229., ..., 230., 230., 232.],
          ...,
          [177., 167., 170., ..., 154., 157., 158.],
          [172., 182., 188., ..., 154., 153., 154.],
          [174., 172., 169., ..., 167., 183., 202.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:10

analyse the exceptions in iter:16
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[235., 235., 237., ..., 233., 227., 223.],
          [231., 232., 234., ..., 231., 225., 221.],
          [231., 233., 237., ..., 232., 225., 221.],
          ...,
          [125., 126., 143., ...,  66.,  65.,  68.],
          [127., 141., 149., ...,  63.,  67.,  62.],
          [137., 142., 149., ...,  62.,  61.,  51.]],

         [[236., 236., 238., ..., 234., 230., 228.],
          [232., 233., 235., ..., 232., 228., 225.],
          [232., 234., 238., ..., 233., 228., 226.],
          ...,
          [124., 125., 142., ...,  89.,  86.,  83.],
          [125., 140., 148., ...,  89.,  88.,  79.],
          [135., 140., 147., ...,  90.,  84.,  68.]],

         [[238., 238., 240., ..., 236., 233., 232.],
          [234., 235., 237., ..., 234., 232., 233.],
          [234., 236., 240., ..., 235., 232., 233.],
          ...,
          [122., 123., 140., ...,  23.,  23.,  37.],
          [125., 139., 148., ...,  24.,  26.,  29.],
          [136., 141., 148., ...,  27.,  23.,  14.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:11

analyse the exceptions in iter:17
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[110., 142., 151., ...,  39.,  40.,  38.],
          [109., 141., 152., ...,  36.,  40.,  36.],
          [105., 142., 151., ...,  39.,  44.,  39.],
          ...,
          [ 62.,  39.,  60., ...,  42.,  46.,  47.],
          [ 62.,  52.,  58., ...,  43.,  47.,  49.],
          [ 55.,  60.,  56., ...,  45.,  47.,  51.]],

         [[104., 135., 146., ...,  39.,  40.,  38.],
          [103., 133., 147., ...,  36.,  40.,  36.],
          [ 98., 133., 145., ...,  39.,  44.,  39.],
          ...,
          [ 59.,  38.,  64., ...,  44.,  44.,  44.],
          [ 57.,  51.,  61., ...,  46.,  45.,  46.],
          [ 51.,  60.,  60., ...,  48.,  46.,  48.]],

         [[ 97., 118., 120., ...,  39.,  40.,  38.],
          [ 95., 115., 119., ...,  37.,  40.,  36.],
          [ 90., 114., 117., ...,  41.,  45.,  40.],
          ...,
          [ 60.,  49.,  81., ...,  56.,  55.,  55.],
          [ 56.,  61.,  78., ...,  58.,  58.,  60.],
          [ 50.,  71.,  78., ...,  60.,  60.,  62.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:12

analyse the exceptions in iter:18
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[197., 198., 201., ..., 217., 217., 217.],
          [193., 195., 198., ..., 216., 215., 214.],
          [192., 194., 197., ..., 217., 216., 215.],
          ...,
          [156., 156., 156., ...,  98., 117., 128.],
          [158., 159., 154., ..., 131., 117.,  91.],
          [152., 151., 145., ...,  91.,  90.,  79.]],

         [[187., 188., 191., ..., 201., 201., 201.],
          [183., 185., 188., ..., 200., 200., 198.],
          [182., 184., 187., ..., 201., 200., 199.],
          ...,
          [146., 146., 146., ...,  79.,  96., 105.],
          [148., 149., 144., ..., 110.,  99.,  75.],
          [142., 141., 135., ...,  72.,  73.,  65.]],

         [[188., 189., 192., ..., 204., 204., 204.],
          [184., 186., 189., ..., 203., 202., 201.],
          [183., 185., 188., ..., 204., 203., 202.],
          ...,
          [147., 147., 147., ...,  65.,  82.,  89.],
          [149., 150., 145., ...,  96.,  86.,  64.],
          [143., 142., 136., ...,  61.,  63.,  57.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:13

analyse the exceptions in iter:19
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 23.,  47.,  52., ..., 131., 182., 215.],
          [ 32.,  51.,  56., ..., 149., 204., 209.],
          [ 41.,  59.,  60., ..., 138., 196., 203.],
          ...,
          [167., 177., 182., ..., 199., 176., 145.],
          [166., 165., 165., ..., 183., 183., 189.],
          [175., 173., 173., ..., 190., 188., 192.]],

         [[ 27.,  49.,  46., ..., 130., 180., 212.],
          [ 31.,  49.,  49., ..., 148., 206., 217.],
          [ 37.,  57.,  59., ..., 138., 200., 217.],
          ...,
          [167., 177., 182., ..., 192., 171., 140.],
          [166., 165., 165., ..., 181., 182., 187.],
          [175., 173., 173., ..., 187., 186., 189.]],

         [[ 22.,  41.,  30., ..., 117., 174., 230.],
          [ 24.,  38.,  34., ..., 133., 197., 232.],
          [ 25.,  47.,  51., ..., 125., 194., 233.],
          ...,
          [168., 177., 182., ..., 192., 171., 140.],
          [166., 165., 165., ..., 181., 182., 188.],
          [175., 173., 173., ..., 184., 183., 186.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:14

analyse the exceptions in iter:20
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[153., 174., 155., ..., 122., 138.,  97.],
          [160., 164., 150., ..., 137., 160., 103.],
          [140., 147., 136., ..., 104., 125.,  93.],
          ...,
          [175., 170., 170., ..., 193., 197., 199.],
          [174., 173., 171., ..., 200., 202., 208.],
          [168., 164., 166., ..., 204., 204., 206.]],

         [[157., 180., 165., ..., 125., 143., 101.],
          [163., 170., 159., ..., 135., 161., 109.],
          [143., 152., 145., ..., 103., 128., 102.],
          ...,
          [177., 172., 172., ..., 203., 206., 204.],
          [177., 176., 174., ..., 208., 209., 212.],
          [173., 169., 171., ..., 209., 208., 210.]],

         [[155., 188., 172., ..., 123., 141.,  97.],
          [165., 180., 169., ..., 129., 157., 107.],
          [147., 166., 158., ...,  99., 125., 101.],
          ...,
          [179., 174., 174., ..., 212., 214., 213.],
          [181., 180., 178., ..., 216., 218., 221.],
          [180., 175., 177., ..., 217., 217., 219.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:15

analyse the exceptions in iter:22
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 86.,  96., 115., ...,  84.,  95.,  79.],
          [125.,  99.,  71., ...,  78.,  88.,  93.],
          [112.,  87.,  58., ...,  89.,  88.,  85.],
          ...,
          [ 66.,  56.,  46., ...,  70.,  61.,  47.],
          [108.,  96.,  86., ...,  57.,  57.,  46.],
          [130., 120.,  98., ...,  44.,  44.,  45.]],

         [[ 74.,  83., 109., ...,  72.,  84.,  68.],
          [110.,  83.,  61., ...,  74.,  82.,  82.],
          [ 95.,  69.,  45., ...,  88.,  84.,  77.],
          ...,
          [ 61.,  53.,  46., ...,  79.,  74.,  57.],
          [100.,  91.,  82., ...,  60.,  65.,  51.],
          [117., 110.,  90., ...,  43.,  46.,  45.]],

         [[ 62.,  65.,  83., ...,  50.,  61.,  45.],
          [104.,  74.,  46., ...,  44.,  51.,  53.],
          [ 89.,  62.,  35., ...,  54.,  50.,  45.],
          ...,
          [ 39.,  33.,  28., ...,  46.,  42.,  31.],
          [ 73.,  66.,  59., ...,  38.,  41.,  31.],
          [ 91.,  86.,  67., ...,  30.,  32.,  32.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:16

analyse the exceptions in iter:23
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[126., 102., 117., ...,  96., 113., 107.],
          [135., 113., 121., ..., 115., 114., 115.],
          [126., 124., 128., ..., 134., 115., 114.],
          ...,
          [141., 155., 134., ..., 149., 147., 122.],
          [153., 164., 146., ..., 163., 189., 184.],
          [125., 129., 124., ..., 133., 180., 168.]],

         [[100.,  76.,  93., ...,  74.,  90.,  84.],
          [109.,  86.,  94., ...,  89.,  89.,  90.],
          [102.,  97., 101., ..., 109.,  90.,  90.],
          ...,
          [111., 123., 102., ..., 140., 133., 106.],
          [122., 132., 119., ..., 156., 178., 174.],
          [100., 106., 102., ..., 127., 173., 162.]],

         [[ 71.,  49.,  60., ...,  42.,  58.,  52.],
          [ 73.,  52.,  56., ...,  58.,  55.,  53.],
          [ 61.,  59.,  60., ...,  77.,  55.,  50.],
          ...,
          [ 85.,  87.,  65., ..., 118., 116.,  94.],
          [ 83.,  89.,  81., ..., 147., 174., 173.],
          [ 56.,  64.,  68., ..., 124., 174., 164.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:17

analyse the exceptions in iter:25
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[162., 164., 169., ..., 184., 190., 202.],
          [153., 158., 164., ..., 178., 189., 201.],
          [157., 161., 164., ..., 178., 190., 202.],
          ...,
          [214., 213., 213., ..., 240., 241., 242.],
          [218., 209., 208., ..., 232., 236., 239.],
          [216., 207., 201., ..., 231., 233., 235.]],

         [[164., 167., 171., ..., 176., 186., 198.],
          [151., 156., 163., ..., 171., 184., 198.],
          [151., 156., 160., ..., 170., 186., 199.],
          ...,
          [205., 193., 185., ..., 207., 206., 209.],
          [209., 188., 180., ..., 195., 196., 200.],
          [204., 189., 174., ..., 192., 194., 198.]],

         [[130., 128., 131., ..., 137., 146., 161.],
          [119., 120., 124., ..., 131., 143., 158.],
          [120., 121., 122., ..., 131., 142., 156.],
          ...,
          [193., 181., 174., ..., 193., 194., 196.],
          [198., 176., 169., ..., 182., 185., 187.],
          [197., 178., 156., ..., 178., 181., 183.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:18

analyse the exceptions in iter:26
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[131., 124., 116., ..., 184., 185., 184.],
          [127., 124., 116., ..., 177., 180., 186.],
          [123., 121., 113., ..., 179., 187., 194.],
          ...,
          [ 99.,  83.,  54., ..., 138., 155., 165.],
          [ 97.,  77.,  43., ..., 140., 154., 163.],
          [ 96.,  71.,  35., ..., 140., 156., 164.]],

         [[ 81.,  76.,  70., ..., 152., 153., 152.],
          [ 76.,  75.,  69., ..., 142., 146., 152.],
          [ 73.,  73.,  67., ..., 142., 150., 158.],
          ...,
          [ 50.,  42.,  27., ..., 103., 113., 118.],
          [ 50.,  39.,  21., ..., 105., 112., 116.],
          [ 49.,  36.,  16., ..., 104., 114., 118.]],

         [[ 32.,  27.,  20., ..., 114., 117., 120.],
          [ 27.,  26.,  19., ..., 106., 110., 116.],
          [ 23.,  24.,  17., ..., 106., 114., 118.],
          ...,
          [ 10.,   5.,   5., ...,  68.,  72.,  74.],
          [ 10.,   5.,   4., ...,  69.,  71.,  71.],
          [ 10.,   4.,   3., ...,  69.,  73.,  73.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:19

analyse the exceptions in iter:28
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[128., 121., 138., ..., 130., 101., 122.],
          [133., 125., 136., ..., 131., 106., 127.],
          [141., 126., 141., ..., 132., 114., 126.],
          ...,
          [191., 186., 175., ..., 190., 182., 195.],
          [210., 207., 198., ..., 194., 184., 192.],
          [209., 206., 207., ..., 201., 193., 196.]],

         [[141., 134., 151., ..., 150., 121., 141.],
          [146., 138., 149., ..., 151., 126., 147.],
          [155., 139., 154., ..., 152., 134., 146.],
          ...,
          [178., 174., 160., ..., 179., 175., 188.],
          [195., 197., 179., ..., 179., 178., 186.],
          [194., 195., 189., ..., 187., 187., 190.]],

         [[123., 116., 133., ..., 138., 109., 129.],
          [128., 120., 131., ..., 139., 114., 135.],
          [136., 121., 136., ..., 140., 122., 134.],
          ...,
          [126., 124., 112., ..., 138., 137., 145.],
          [143., 144., 129., ..., 138., 133., 142.],
          [142., 143., 138., ..., 145., 142., 146.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:20

analyse the exceptions in iter:29
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[202., 202., 204., ..., 207., 205., 203.],
          [206., 206., 207., ..., 210., 208., 206.],
          [210., 211., 212., ..., 214., 212., 210.],
          ...,
          [218., 210., 194., ..., 243., 244., 243.],
          [219., 217., 216., ..., 241., 241., 241.],
          [217., 216., 217., ..., 239., 239., 240.]],

         [[204., 204., 206., ..., 208., 206., 204.],
          [208., 208., 209., ..., 211., 209., 207.],
          [212., 213., 214., ..., 214., 213., 211.],
          ...,
          [217., 209., 194., ..., 242., 242., 243.],
          [218., 216., 216., ..., 240., 240., 240.],
          [216., 215., 216., ..., 238., 238., 238.]],

         [[199., 199., 201., ..., 200., 199., 198.],
          [203., 203., 204., ..., 205., 203., 201.],
          [207., 208., 210., ..., 210., 208., 206.],
          ...,
          [222., 214., 198., ..., 247., 247., 247.],
          [223., 221., 220., ..., 245., 245., 245.],
          [221., 220., 221., ..., 243., 243., 243.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:21

analyse the exceptions in iter:30
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[126., 122., 126., ..., 124., 120., 117.],
          [122., 119., 121., ..., 124., 122., 117.],
          [122., 121., 121., ..., 126., 123., 121.],
          ...,
          [126., 126., 128., ..., 133., 122., 114.],
          [125., 126., 127., ..., 128., 121., 114.],
          [123., 123., 126., ..., 128., 126., 121.]],

         [[118., 115., 119., ..., 118., 114., 111.],
          [115., 112., 114., ..., 118., 116., 111.],
          [115., 114., 114., ..., 120., 117., 115.],
          ...,
          [118., 118., 120., ..., 125., 114., 106.],
          [117., 118., 119., ..., 120., 113., 106.],
          [115., 115., 118., ..., 119., 118., 113.]],

         [[110., 108., 111., ..., 106., 102.,  99.],
          [107., 104., 106., ..., 106., 104.,  99.],
          [107., 106., 106., ..., 108., 105., 103.],
          ...,
          [107., 107., 109., ..., 114., 103.,  95.],
          [106., 107., 108., ..., 109., 102.,  95.],
          [104., 104., 107., ..., 109., 107., 102.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:22

analyse the exceptions in iter:34
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[172., 171., 168., ..., 158., 156., 147.],
          [169., 168., 168., ..., 158., 152., 145.],
          [174., 169., 170., ..., 157., 149., 146.],
          ...,
          [150., 157., 162., ..., 158., 147., 139.],
          [143., 149., 155., ..., 148., 143., 140.],
          [148., 146., 149., ..., 137., 134., 136.]],

         [[187., 186., 182., ..., 170., 169., 163.],
          [185., 183., 184., ..., 175., 170., 165.],
          [190., 185., 186., ..., 177., 170., 168.],
          ...,
          [163., 168., 170., ..., 168., 160., 154.],
          [154., 158., 161., ..., 157., 153., 153.],
          [158., 155., 157., ..., 143., 139., 143.]],

         [[130., 130., 126., ..., 113., 113., 107.],
          [123., 122., 123., ..., 114., 110., 107.],
          [126., 122., 123., ..., 115., 108., 109.],
          ...,
          [100., 103., 104., ..., 108.,  99.,  90.],
          [ 89.,  90.,  96., ...,  99.,  92.,  88.],
          [ 93.,  89.,  92., ...,  86.,  80.,  82.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:23

analyse the exceptions in iter:35
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[251., 247., 247., ..., 229., 244., 251.],
          [249., 246., 246., ..., 233., 249., 252.],
          [167., 167., 167., ..., 217., 217., 220.],
          ...,
          [133., 123., 124., ..., 118., 114., 115.],
          [123., 124., 126., ..., 112., 108., 104.],
          [125., 129., 126., ..., 118., 112., 105.]],

         [[249., 245., 245., ..., 190., 231., 241.],
          [248., 244., 245., ..., 188., 237., 242.],
          [165., 164., 164., ..., 182., 211., 213.],
          ...,
          [130., 127., 130., ..., 125., 122., 125.],
          [125., 127., 129., ..., 122., 119., 119.],
          [128., 132., 130., ..., 128., 122., 121.]],

         [[250., 247., 247., ..., 146., 224., 241.],
          [248., 244., 244., ..., 141., 233., 241.],
          [148., 148., 149., ..., 139., 203., 208.],
          ...,
          [ 39.,  36.,  35., ...,  30.,  26.,  27.],
          [ 36.,  36.,  32., ...,  26.,  27.,  22.],
          [ 42.,  43.,  36., ...,  35.,  33.,  26.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:24

analyse the exceptions in iter:36
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[169., 131., 193., ..., 172., 169., 166.],
          [165., 127., 189., ..., 172., 169., 166.],
          [163., 126., 186., ..., 173., 170., 168.],
          ...,
          [147., 139., 145., ..., 220., 218., 219.],
          [146., 143., 152., ..., 221., 220., 219.],
          [148., 143., 146., ..., 223., 221., 220.]],

         [[122., 108., 196., ..., 187., 183., 181.],
          [119., 104., 192., ..., 186., 183., 180.],
          [117., 103., 189., ..., 187., 184., 182.],
          ...,
          [ 93.,  85.,  91., ..., 220., 218., 219.],
          [ 87.,  83.,  94., ..., 221., 220., 219.],
          [ 87.,  82.,  85., ..., 223., 221., 220.]],

         [[ 65.,  75., 192., ..., 187., 183., 181.],
          [ 62.,  72., 187., ..., 186., 183., 180.],
          [ 60.,  71., 185., ..., 187., 184., 182.],
          ...,
          [ 35.,  39.,  42., ..., 220., 218., 219.],
          [ 31.,  39.,  43., ..., 222., 220., 219.],
          [ 28.,  31.,  30., ..., 223., 221., 220.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:25

analyse the exceptions in iter:37
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 95.,  88.,  86., ..., 101.,  91., 105.],
          [ 82.,  75.,  76., ...,  94.,  51.,  84.],
          [ 77.,  74.,  71., ...,  71.,  47.,  88.],
          ...,
          [ 97.,  92.,  97., ...,  86.,  94.,  90.],
          [ 95.,  84.,  89., ...,  96., 102.,  97.],
          [ 91.,  83.,  82., ..., 100., 105., 108.]],

         [[105.,  97.,  96., ..., 116., 108., 124.],
          [ 90.,  83.,  84., ..., 102.,  61.,  97.],
          [ 85.,  81.,  78., ...,  74.,  52.,  95.],
          ...,
          [ 95.,  92.,  93., ...,  91.,  97.,  97.],
          [ 90.,  86.,  89., ...,  97.,  96.,  94.],
          [ 84.,  81.,  81., ...,  96.,  97., 102.]],

         [[127., 120., 118., ..., 144., 136., 157.],
          [110., 104., 104., ..., 123.,  80., 122.],
          [103.,  98.,  95., ...,  86.,  63., 111.],
          ...,
          [ 72.,  69.,  70., ...,  65.,  72.,  71.],
          [ 65.,  59.,  62., ...,  76.,  77.,  73.],
          [ 63.,  57.,  55., ...,  78.,  80.,  83.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:26

analyse the exceptions in iter:38
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[110., 223., 243., ...,   7.,   0.,   0.],
          [102., 213., 244., ...,  98.,  80.,  31.],
          [ 99., 204., 248., ..., 221., 198.,  89.],
          ...,
          [ 58.,  58.,  51., ...,   8.,   9.,   6.],
          [ 69.,  54.,  49., ...,  48.,  52.,  35.],
          [ 81.,  52.,  50., ...,  15.,  16.,  13.]],

         [[ 90., 197., 215., ...,   2.,   0.,   0.],
          [ 83., 187., 217., ...,  90.,  74.,  27.],
          [ 78., 179., 221., ..., 209., 188.,  81.],
          ...,
          [ 63.,  70.,  69., ...,   8.,  10.,   8.],
          [ 72.,  64.,  65., ...,  44.,  47.,  32.],
          [ 80.,  58.,  63., ...,   5.,   5.,   3.]],

         [[ 84., 185., 201., ...,   3.,   0.,   0.],
          [ 77., 176., 203., ...,  92.,  75.,  28.],
          [ 72., 167., 207., ..., 213., 191.,  83.],
          ...,
          [ 87., 100., 103., ...,  10.,   7.,   5.],
          [ 94.,  92.,  98., ...,  43.,  44.,  30.],
          [100.,  84.,  93., ...,   5.,   5.,   4.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:27

analyse the exceptions in iter:40
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[101.,  94.,  98., ..., 121., 127., 143.],
          [120., 131., 124., ..., 115., 121., 144.],
          [120., 139., 140., ..., 105., 107., 121.],
          ...,
          [ 48.,  31.,  37., ..., 188., 159., 125.],
          [ 52.,  42.,  44., ..., 173., 165., 150.],
          [ 41.,  38.,  42., ..., 164., 145., 155.]],

         [[114., 116., 112., ..., 119., 130., 136.],
          [122., 132., 119., ..., 116., 126., 141.],
          [126., 140., 139., ...,  97., 103., 121.],
          ...,
          [ 45.,  31.,  37., ..., 157., 130., 106.],
          [ 46.,  40.,  45., ..., 135., 136., 132.],
          [ 42.,  38.,  41., ..., 130., 120., 134.]],

         [[ 35.,  48.,  42., ...,  58.,  66.,  90.],
          [ 64.,  98.,  74., ...,  53.,  63.,  77.],
          [ 50.,  82.,  82., ...,  56.,  61.,  65.],
          ...,
          [ 40.,  24.,  27., ..., 103.,  93.,  60.],
          [ 41.,  32.,  32., ..., 102.,  99.,  92.],
          [ 32.,  33.,  33., ...,  98.,  79.,  91.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:28

analyse the exceptions in iter:41
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[145., 145., 148., ..., 237., 230., 224.],
          [147., 150., 168., ..., 231., 221., 214.],
          [145., 150., 178., ..., 229., 230., 232.],
          ...,
          [231., 230., 227., ..., 235., 234., 231.],
          [224., 231., 231., ..., 240., 228., 223.],
          [125., 225., 232., ..., 224., 216., 228.]],

         [[125., 126., 130., ..., 210., 202., 199.],
          [126., 132., 147., ..., 203., 192., 190.],
          [124., 130., 155., ..., 201., 201., 205.],
          ...,
          [202., 202., 198., ..., 209., 207., 203.],
          [199., 200., 202., ..., 213., 201., 199.],
          [120., 200., 204., ..., 197., 189., 203.]],

         [[ 83.,  82.,  82., ..., 170., 161., 158.],
          [ 83.,  84., 107., ..., 163., 151., 149.],
          [ 79.,  84., 110., ..., 161., 160., 166.],
          ...,
          [169., 170., 166., ..., 172., 170., 167.],
          [163., 167., 170., ..., 177., 162., 162.],
          [ 98., 166., 170., ..., 160., 150., 167.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:29

analyse the exceptions in iter:44
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[139., 144., 146., ..., 132., 131., 129.],
          [139., 124., 128., ..., 110., 108., 114.],
          [172., 126., 116., ...,  67.,  68., 113.],
          ...,
          [ 95.,  93.,  91., ...,  81., 104., 107.],
          [132., 124., 119., ..., 114., 131., 132.],
          [110., 124., 129., ..., 129., 128., 112.]],

         [[154., 160., 162., ..., 140., 142., 141.],
          [148., 137., 149., ..., 114., 112., 127.],
          [162., 114., 109., ...,  71.,  68., 119.],
          ...,
          [ 88.,  82.,  84., ...,  94., 103., 102.],
          [109., 105., 104., ..., 104., 112., 110.],
          [108., 116., 116., ..., 117., 114., 105.]],

         [[188., 192., 192., ...,  77.,  76.,  70.],
          [180., 167., 178., ...,  81.,  76.,  68.],
          [172., 121., 129., ...,  50.,  58.,  78.],
          ...,
          [ 44.,  45.,  44., ...,  30.,  51.,  53.],
          [ 74.,  69.,  61., ...,  59.,  74.,  70.],
          [ 52.,  67.,  67., ...,  80.,  75.,  59.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:30

analyse the exceptions in iter:46
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 94.,  72.,  60., ...,  72.,  71.,  77.],
          [ 85.,  67.,  52., ...,  67.,  72.,  77.],
          [ 82.,  54.,  41., ...,  70.,  71.,  78.],
          ...,
          [ 78.,  54.,  37., ...,  51.,  44.,  52.],
          [133., 117.,  98., ...,  62.,  53.,  60.],
          [140., 137., 138., ...,  85.,  79.,  69.]],

         [[ 91.,  71.,  68., ...,  78.,  75.,  82.],
          [ 83.,  66.,  57., ...,  73.,  78.,  85.],
          [ 82.,  53.,  44., ...,  76.,  77.,  85.],
          ...,
          [ 79.,  54.,  37., ...,  49.,  47.,  50.],
          [127., 111.,  92., ...,  58.,  56.,  59.],
          [129., 126., 126., ...,  68.,  71.,  63.]],

         [[ 62.,  42.,  35., ...,  43.,  39.,  41.],
          [ 55.,  38.,  29., ...,  41.,  37.,  39.],
          [ 53.,  24.,  19., ...,  53.,  37.,  39.],
          ...,
          [ 86.,  63.,  46., ...,  28.,  20.,  28.],
          [129., 115.,  98., ...,  35.,  28.,  36.],
          [126., 125., 129., ...,  46.,  46.,  42.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:31

analyse the exceptions in iter:47
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 77.,  76.,  78., ...,  68.,  58.,  48.],
          [ 71.,  67.,  69., ...,  57.,  44.,  36.],
          [ 55.,  52.,  58., ...,  62.,  53.,  48.],
          ...,
          [ 63.,  62.,  67., ...,  63.,  58.,  55.],
          [ 89.,  91.,  89., ...,  65.,  68.,  66.],
          [103., 107.,  92., ...,  69.,  77.,  77.]],

         [[113., 112., 114., ..., 104.,  94.,  84.],
          [107., 102., 105., ...,  93.,  80.,  72.],
          [ 91.,  88.,  94., ...,  98.,  89.,  84.],
          ...,
          [ 97.,  92.,  97., ...,  97.,  92.,  89.],
          [118., 116., 114., ...,  99., 102., 101.],
          [129., 131., 119., ..., 104., 111., 112.]],

         [[137., 136., 139., ..., 128., 118., 108.],
          [131., 126., 130., ..., 116., 104.,  96.],
          [115., 112., 119., ..., 122., 113., 108.],
          ...,
          [119., 115., 121., ..., 123., 118., 115.],
          [136., 135., 136., ..., 122., 125., 124.],
          [144., 147., 138., ..., 127., 134., 135.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:32

final statics:
total operators:28
tensorflow --> nums:32,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:32
mindspore --> 
torch --> 

generate models:32

analyse the exceptions in iter:50
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 16.,  17.,  17., ...,  62.,  55.,  51.],
          [ 16.,  16.,  15., ...,  62.,  58.,  52.],
          [ 16.,  15.,  15., ...,  57.,  59.,  56.],
          ...,
          [ 96., 114., 119., ..., 128., 120., 117.],
          [118., 100., 114., ..., 139., 131., 121.],
          [144., 136., 105., ..., 145., 137., 131.]],

         [[ 76.,  77.,  77., ..., 106.,  99.,  94.],
          [ 76.,  76.,  75., ..., 109., 105., 100.],
          [ 76.,  75.,  75., ..., 110., 111., 109.],
          ...,
          [110., 127., 132., ..., 135., 130., 131.],
          [132., 113., 126., ..., 146., 140., 134.],
          [148., 140., 114., ..., 151., 144., 141.]],

         [[ 74.,  75.,  75., ...,  87.,  80.,  75.],
          [ 74.,  74.,  74., ...,  84.,  80.,  75.],
          [ 74.,  73.,  73., ...,  79.,  80.,  78.],
          ...,
          [138., 159., 167., ..., 153., 145., 142.],
          [159., 145., 163., ..., 159., 153., 147.],
          [173., 168., 143., ..., 170., 163., 158.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:33

analyse the exceptions in iter:52
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 63.,  77.,  66., ...,  76.,  86., 114.],
          [ 72.,  70.,  64., ...,  84.,  81.,  88.],
          [ 56.,  70.,  54., ..., 139., 104.,  77.],
          ...,
          [118., 152., 175., ..., 102., 128., 179.],
          [137., 148., 148., ..., 121., 170., 203.],
          [171., 173., 153., ..., 167., 187., 174.]],

         [[ 70.,  88.,  88., ...,  91.,  94., 116.],
          [ 71.,  83.,  85., ...,  94.,  91.,  97.],
          [ 65.,  82.,  76., ..., 142., 114.,  93.],
          ...,
          [107., 135., 155., ...,  79., 105., 150.],
          [123., 129., 129., ...,  94., 142., 168.],
          [145., 146., 130., ..., 136., 157., 143.]],

         [[ 37.,  63.,  63., ...,  65.,  71.,  95.],
          [ 39.,  58.,  58., ...,  71.,  67.,  73.],
          [ 34.,  53.,  48., ..., 120.,  90.,  71.],
          ...,
          [ 85., 111., 133., ...,  63.,  85., 114.],
          [101., 109., 105., ...,  74., 116., 130.],
          [108., 107.,  96., ..., 107., 129., 115.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:34

analyse the exceptions in iter:54
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 45.,  47.,  48., ...,  50.,  47.,  46.],
          [ 45.,  47.,  48., ...,  55.,  51.,  51.],
          [ 45.,  46.,  47., ...,  60.,  56.,  55.],
          ...,
          [ 50.,  50.,  51., ...,  97.,  79.,  76.],
          [ 50.,  49.,  51., ...,  81., 103.,  72.],
          [ 50.,  50.,  51., ...,  83.,  90.,  88.]],

         [[ 73.,  75.,  76., ...,  73.,  69.,  70.],
          [ 72.,  74.,  75., ...,  77.,  74.,  75.],
          [ 71.,  72.,  73., ...,  83.,  80.,  80.],
          ...,
          [ 76.,  78.,  78., ..., 118., 112., 104.],
          [ 76.,  77.,  78., ...,  92., 121., 101.],
          [ 75.,  78.,  77., ...,  91., 100., 110.]],

         [[ 28.,  30.,  33., ...,  28.,  29.,  31.],
          [ 27.,  29.,  32., ...,  32.,  31.,  32.],
          [ 29.,  30.,  31., ...,  36.,  34.,  34.],
          ...,
          [ 34.,  34.,  35., ...,  99.,  50.,  49.],
          [ 34.,  34.,  35., ..., 105., 100.,  44.],
          [ 35.,  33.,  35., ..., 100., 106.,  80.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:35

analyse the exceptions in iter:55
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[156., 167., 169., ..., 243., 230., 208.],
          [174., 192., 172., ..., 237., 213., 186.],
          [192., 194., 174., ..., 226., 198., 195.],
          ...,
          [187., 211., 231., ..., 210., 217., 203.],
          [231., 220., 200., ..., 183., 189., 186.],
          [238., 238., 229., ..., 141., 151., 157.]],

         [[194., 212., 215., ..., 247., 235., 215.],
          [210., 229., 204., ..., 243., 221., 193.],
          [234., 230., 201., ..., 231., 208., 200.],
          ...,
          [211., 234., 244., ..., 204., 208., 192.],
          [238., 236., 219., ..., 170., 175., 169.],
          [242., 247., 239., ..., 126., 137., 141.]],

         [[129., 127., 129., ..., 226., 206., 180.],
          [147., 159., 163., ..., 223., 200., 169.],
          [145., 178., 194., ..., 218., 186., 165.],
          ...,
          [151., 180., 221., ..., 199., 210., 192.],
          [218., 209., 177., ..., 153., 160., 153.],
          [224., 232., 217., ..., 106., 117., 118.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:36

analyse the exceptions in iter:56
tensorflow exception:
{'id': 38, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[141., 139., 136., ..., 228., 228., 229.],
          [148., 150., 148., ..., 228., 228., 228.],
          [149., 149., 148., ..., 230., 229., 229.],
          ...,
          [125., 124., 139., ..., 220., 199., 208.],
          [126., 116., 135., ..., 246., 226., 196.],
          [143., 145., 169., ..., 254., 255., 227.]],

         [[ 70.,  61.,  55., ..., 198., 199., 200.],
          [ 71.,  67.,  64., ..., 197., 196., 197.],
          [ 72.,  66.,  64., ..., 197., 197., 197.],
          ...,
          [100., 102., 110., ..., 169., 143., 149.],
          [101.,  93., 107., ..., 205., 181., 145.],
          [105., 107., 127., ..., 208., 206., 174.]],

         [[  8.,   2.,   0., ..., 155., 156., 157.],
          [ 10.,   5.,   2., ..., 153., 152., 153.],
          [ 17.,   7.,   4., ..., 151., 151., 151.],
          ...,
          [ 73.,  80.,  75., ..., 109.,  86.,  93.],
          [ 75.,  71.,  73., ..., 144., 121.,  87.],
          [ 67.,  71.,  83., ..., 141., 138., 105.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:37

analyse the exceptions in iter:0
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:2

analyse the exceptions in iter:2
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [113., 111., 105., ...,  72.,  72.,  72.],
          [111., 104.,  99., ...,  68.,  70.,  78.],
          [106.,  99.,  95., ...,  78.,  79.,  80.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [120., 118., 112., ...,  81.,  80.,  80.],
          [118., 111., 106., ...,  75.,  76.,  84.],
          [113., 106., 102., ...,  85.,  85.,  86.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [112., 111., 106., ...,  80.,  79.,  79.],
          [110., 104.,  98., ...,  73.,  75.,  82.],
          [105.,  98.,  94., ...,  83.,  83.,  84.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:3

analyse the exceptions in iter:3
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  37.,  38., ...,  76.,  81.,  85.],
          [ 33.,  34.,  32., ...,  95.,  96.,  85.],
          [ 39.,  40.,  57., ...,  93., 107.,  95.],
          ...,
          [ 83.,  87.,  84., ...,  99.,  90.,  81.],
          [ 88.,  90.,  93., ...,  80.,  76.,  82.],
          [ 97.,  94.,  93., ...,  54.,  63.,  72.]],

         [[ 25.,  34.,  35., ...,  67.,  72.,  76.],
          [ 28.,  30.,  27., ...,  82.,  82.,  72.],
          [ 32.,  33.,  50., ...,  76.,  89.,  77.],
          ...,
          [ 73.,  77.,  74., ...,  93.,  84.,  75.],
          [ 72.,  74.,  77., ...,  74.,  70.,  76.],
          [ 78.,  75.,  75., ...,  47.,  56.,  65.]],

         [[ 10.,  19.,  20., ...,  39.,  43.,  47.],
          [ 13.,  14.,  12., ...,  55.,  56.,  45.],
          [ 15.,  17.,  33., ...,  52.,  66.,  54.],
          ...,
          [ 52.,  56.,  52., ...,  70.,  61.,  52.],
          [ 51.,  52.,  56., ...,  53.,  49.,  55.],
          [ 56.,  53.,  53., ...,  28.,  37.,  46.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:4

analyse the exceptions in iter:4
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[170., 168., 177., ..., 162., 158., 157.],
          [168., 172., 171., ..., 159., 156., 154.],
          [154., 149., 129., ..., 161., 157., 154.],
          ...,
          [ 74.,  76.,  78., ...,  71.,  68.,  61.],
          [ 68.,  69.,  72., ...,  76.,  71.,  71.],
          [ 67.,  68.,  69., ...,  75.,  71.,  73.]],

         [[180., 178., 185., ..., 179., 178., 177.],
          [181., 185., 183., ..., 177., 176., 174.],
          [170., 165., 144., ..., 178., 177., 174.],
          ...,
          [ 84.,  85.,  85., ...,  75.,  72.,  65.],
          [ 76.,  77.,  79., ...,  80.,  75.,  75.],
          [ 75.,  76.,  75., ...,  79.,  75.,  77.]],

         [[198., 196., 203., ..., 215., 214., 212.],
          [198., 201., 200., ..., 212., 211., 209.],
          [186., 181., 162., ..., 214., 212., 209.],
          ...,
          [ 80.,  81.,  82., ...,  78.,  75.,  68.],
          [ 77.,  78.,  78., ...,  83.,  78.,  78.],
          [ 78.,  79.,  76., ...,  82.,  78.,  80.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:5

analyse the exceptions in iter:5
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[159., 150., 153., ...,  91.,  74.,  76.],
          [142., 146., 155., ..., 127., 122.,  86.],
          [109.,  99., 105., ..., 137., 163.,  93.],
          ...,
          [244., 240., 241., ..., 156., 179., 200.],
          [246., 243., 243., ..., 162., 178., 192.],
          [246., 243., 244., ..., 166., 173., 182.]],

         [[102.,  91.,  95., ...,  71.,  63.,  58.],
          [ 75.,  72.,  76., ..., 105., 111.,  69.],
          [ 67.,  58.,  59., ..., 112., 132.,  72.],
          ...,
          [129., 123., 122., ...,  42.,  59.,  73.],
          [133., 128., 127., ...,  44.,  56.,  65.],
          [139., 133., 132., ...,  47.,  51.,  57.]],

         [[101.,  95.,  97., ...,  56.,  55.,  55.],
          [ 68.,  66.,  65., ...,  71.,  93.,  61.],
          [ 75.,  60.,  52., ...,  80., 105.,  71.],
          ...,
          [ 70.,  65.,  65., ...,  15.,  26.,  36.],
          [ 74.,  72.,  70., ...,  14.,  22.,  27.],
          [ 82.,  78.,  77., ...,  14.,  17.,  19.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:6

analyse the exceptions in iter:8
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[134., 131., 128., ..., 127., 127., 128.],
          [133., 129., 128., ..., 127., 127., 128.],
          [128., 127., 128., ..., 126., 126., 126.],
          ...,
          [174., 171., 155., ...,  27.,  29.,  28.],
          [194., 189., 159., ...,  30.,  30.,  30.],
          [193., 181., 168., ...,  31.,  32.,  32.]],

         [[186., 184., 182., ..., 181., 181., 182.],
          [189., 186., 186., ..., 183., 183., 184.],
          [185., 182., 182., ..., 181., 181., 180.],
          ...,
          [208., 206., 189., ...,  94.,  96.,  94.],
          [221., 215., 196., ...,  95.,  96.,  95.],
          [217., 208., 201., ...,  94.,  94.,  94.]],

         [[223., 220., 218., ..., 222., 222., 223.],
          [228., 224., 224., ..., 224., 224., 225.],
          [226., 223., 223., ..., 222., 222., 221.],
          ...,
          [235., 229., 216., ..., 136., 137., 136.],
          [244., 239., 225., ..., 138., 139., 140.],
          [237., 230., 227., ..., 136., 137., 138.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:7

analyse the exceptions in iter:9
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[125., 110., 102., ..., 202., 200., 202.],
          [142., 146., 176., ..., 195., 198., 204.],
          [180., 143., 156., ..., 122., 139., 158.],
          ...,
          [104., 101., 101., ..., 126., 126., 125.],
          [104., 105., 109., ..., 138., 137., 137.],
          [105., 108., 115., ..., 143., 143., 144.]],

         [[125., 101.,  90., ..., 207., 205., 208.],
          [146., 144., 172., ..., 201., 205., 211.],
          [185., 146., 157., ..., 111., 128., 147.],
          ...,
          [ 82.,  80.,  81., ..., 103., 103., 101.],
          [ 81.,  84.,  88., ..., 113., 113., 112.],
          [ 83.,  87.,  94., ..., 117., 116., 116.]],

         [[116.,  91.,  83., ..., 214., 212., 214.],
          [142., 139., 170., ..., 205., 209., 215.],
          [183., 146., 157., ..., 113., 131., 150.],
          ...,
          [ 41.,  39.,  38., ...,  67.,  69.,  68.],
          [ 40.,  41.,  43., ...,  78.,  80.,  81.],
          [ 42.,  45.,  50., ...,  82.,  84.,  86.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:8

final statics:
total operators:28
tensorflow --> nums:8,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:8
mindspore --> 
torch --> 

generate models:8

analyse the exceptions in iter:10
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[53., 54., 56., ..., 47., 41., 24.],
          [46., 53., 54., ..., 42., 39., 28.],
          [45., 50., 46., ..., 38., 36., 29.],
          ...,
          [71., 74., 80., ..., 51., 46., 49.],
          [75., 79., 81., ..., 61., 64., 48.],
          [85., 85., 86., ..., 61., 64., 49.]],

         [[65., 63., 60., ..., 51., 45., 28.],
          [59., 62., 59., ..., 46., 43., 32.],
          [59., 60., 52., ..., 42., 40., 33.],
          ...,
          [83., 83., 85., ..., 54., 49., 50.],
          [82., 85., 85., ..., 65., 67., 50.],
          [83., 84., 86., ..., 65., 67., 50.]],

         [[53., 52., 50., ..., 50., 44., 27.],
          [41., 45., 44., ..., 45., 42., 31.],
          [38., 41., 34., ..., 41., 39., 32.],
          ...,
          [66., 66., 67., ..., 33., 34., 41.],
          [67., 69., 67., ..., 41., 48., 41.],
          [71., 71., 70., ..., 39., 46., 41.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:9

analyse the exceptions in iter:12
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[164., 162., 162., ..., 157., 153., 153.],
          [168., 166., 166., ..., 164., 160., 158.],
          [172., 170., 171., ..., 168., 165., 163.],
          ...,
          [123., 117., 112., ..., 117.,  95., 120.],
          [120., 116., 112., ..., 126., 120., 120.],
          [121., 120., 116., ..., 124., 124., 120.]],

         [[215., 212., 212., ..., 210., 208., 203.],
          [218., 215., 215., ..., 212., 209., 205.],
          [220., 217., 218., ..., 212., 208., 207.],
          ...,
          [160., 154., 149., ..., 136., 115., 149.],
          [156., 151., 147., ..., 149., 144., 152.],
          [154., 152., 148., ..., 152., 154., 154.]],

         [[244., 240., 240., ..., 237., 235., 234.],
          [245., 242., 242., ..., 238., 236., 235.],
          [246., 243., 244., ..., 238., 235., 236.],
          ...,
          [105., 102.,  99., ..., 100.,  79., 100.],
          [100.,  99.,  96., ..., 110., 103., 101.],
          [ 96.,  99.,  97., ..., 108., 107., 100.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:10

analyse the exceptions in iter:14
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[100.,  98.,  99., ..., 165., 163., 165.],
          [101., 100., 100., ..., 164., 163., 159.],
          [105., 104., 104., ..., 156., 136., 114.],
          ...,
          [166., 166., 168., ..., 137., 137., 147.],
          [161., 162., 167., ..., 131., 138., 137.],
          [164., 162., 164., ..., 153., 157., 156.]],

         [[146., 144., 144., ..., 165., 163., 165.],
          [145., 143., 143., ..., 161., 162., 161.],
          [147., 145., 145., ..., 150., 133., 117.],
          ...,
          [156., 156., 157., ..., 127., 126., 136.],
          [152., 153., 158., ..., 125., 133., 132.],
          [158., 156., 158., ..., 146., 151., 150.]],

         [[192., 189., 189., ..., 165., 163., 165.],
          [188., 186., 186., ..., 159., 159., 157.],
          [189., 186., 187., ..., 147., 129., 111.],
          ...,
          [150., 151., 152., ..., 112., 114., 127.],
          [149., 150., 155., ..., 117., 124., 120.],
          [155., 153., 155., ..., 139., 141., 137.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:11

analyse the exceptions in iter:15
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[100., 100., 101., ...,  95.,  94.,  95.],
          [103., 103., 104., ...,  97.,  97.,  97.],
          [107., 106., 106., ..., 100., 100., 101.],
          ...,
          [165., 159., 167., ...,  75.,  75.,  72.],
          [158., 173., 182., ...,  76.,  75.,  77.],
          [161., 162., 160., ...,  98., 129., 162.]],

         [[168., 168., 167., ..., 165., 165., 167.],
          [170., 168., 168., ..., 167., 166., 168.],
          [174., 172., 173., ..., 170., 170., 172.],
          ...,
          [178., 170., 177., ..., 117., 120., 120.],
          [174., 186., 193., ..., 119., 119., 121.],
          [176., 176., 171., ..., 137., 160., 185.]],

         [[231., 229., 230., ..., 231., 228., 229.],
          [230., 228., 226., ..., 229., 227., 229.],
          [233., 230., 229., ..., 230., 230., 232.],
          ...,
          [177., 167., 170., ..., 154., 157., 158.],
          [172., 182., 188., ..., 154., 153., 154.],
          [174., 172., 169., ..., 167., 183., 202.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:12

analyse the exceptions in iter:16
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[235., 235., 237., ..., 233., 227., 223.],
          [231., 232., 234., ..., 231., 225., 221.],
          [231., 233., 237., ..., 232., 225., 221.],
          ...,
          [125., 126., 143., ...,  66.,  65.,  68.],
          [127., 141., 149., ...,  63.,  67.,  62.],
          [137., 142., 149., ...,  62.,  61.,  51.]],

         [[236., 236., 238., ..., 234., 230., 228.],
          [232., 233., 235., ..., 232., 228., 225.],
          [232., 234., 238., ..., 233., 228., 226.],
          ...,
          [124., 125., 142., ...,  89.,  86.,  83.],
          [125., 140., 148., ...,  89.,  88.,  79.],
          [135., 140., 147., ...,  90.,  84.,  68.]],

         [[238., 238., 240., ..., 236., 233., 232.],
          [234., 235., 237., ..., 234., 232., 233.],
          [234., 236., 240., ..., 235., 232., 233.],
          ...,
          [122., 123., 140., ...,  23.,  23.,  37.],
          [125., 139., 148., ...,  24.,  26.,  29.],
          [136., 141., 148., ...,  27.,  23.,  14.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:13

analyse the exceptions in iter:17
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[110., 142., 151., ...,  39.,  40.,  38.],
          [109., 141., 152., ...,  36.,  40.,  36.],
          [105., 142., 151., ...,  39.,  44.,  39.],
          ...,
          [ 62.,  39.,  60., ...,  42.,  46.,  47.],
          [ 62.,  52.,  58., ...,  43.,  47.,  49.],
          [ 55.,  60.,  56., ...,  45.,  47.,  51.]],

         [[104., 135., 146., ...,  39.,  40.,  38.],
          [103., 133., 147., ...,  36.,  40.,  36.],
          [ 98., 133., 145., ...,  39.,  44.,  39.],
          ...,
          [ 59.,  38.,  64., ...,  44.,  44.,  44.],
          [ 57.,  51.,  61., ...,  46.,  45.,  46.],
          [ 51.,  60.,  60., ...,  48.,  46.,  48.]],

         [[ 97., 118., 120., ...,  39.,  40.,  38.],
          [ 95., 115., 119., ...,  37.,  40.,  36.],
          [ 90., 114., 117., ...,  41.,  45.,  40.],
          ...,
          [ 60.,  49.,  81., ...,  56.,  55.,  55.],
          [ 56.,  61.,  78., ...,  58.,  58.,  60.],
          [ 50.,  71.,  78., ...,  60.,  60.,  62.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:14

analyse the exceptions in iter:18
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[197., 198., 201., ..., 217., 217., 217.],
          [193., 195., 198., ..., 216., 215., 214.],
          [192., 194., 197., ..., 217., 216., 215.],
          ...,
          [156., 156., 156., ...,  98., 117., 128.],
          [158., 159., 154., ..., 131., 117.,  91.],
          [152., 151., 145., ...,  91.,  90.,  79.]],

         [[187., 188., 191., ..., 201., 201., 201.],
          [183., 185., 188., ..., 200., 200., 198.],
          [182., 184., 187., ..., 201., 200., 199.],
          ...,
          [146., 146., 146., ...,  79.,  96., 105.],
          [148., 149., 144., ..., 110.,  99.,  75.],
          [142., 141., 135., ...,  72.,  73.,  65.]],

         [[188., 189., 192., ..., 204., 204., 204.],
          [184., 186., 189., ..., 203., 202., 201.],
          [183., 185., 188., ..., 204., 203., 202.],
          ...,
          [147., 147., 147., ...,  65.,  82.,  89.],
          [149., 150., 145., ...,  96.,  86.,  64.],
          [143., 142., 136., ...,  61.,  63.,  57.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:15

analyse the exceptions in iter:21
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[252., 249., 250., ..., 251., 251., 251.],
          [255., 252., 253., ..., 255., 255., 254.],
          [253., 250., 250., ..., 254., 254., 252.],
          ...,
          [254., 252., 253., ..., 252., 253., 252.],
          [250., 252., 255., ..., 254., 255., 254.],
          [236., 249., 250., ..., 250., 250., 251.]],

         [[  8.,  15.,   8., ...,   1.,   0.,   1.],
          [  7.,  15.,  13., ...,   1.,   0.,   4.],
          [  6.,  16.,  24., ...,   1.,   0.,   9.],
          ...,
          [ 66.,  62.,  64., ...,  70.,  69.,  70.],
          [ 49.,  53.,  59., ...,  70.,  68.,  59.],
          [ 37.,  48.,  42., ...,  78.,  74.,  58.]],

         [[ 42.,  42.,  39., ...,  11.,  15.,  30.],
          [ 43.,  44.,  42., ...,  11.,  18.,  33.],
          [ 42.,  42.,  43., ...,  10.,  20.,  37.],
          ...,
          [ 94.,  92.,  93., ..., 101., 103., 104.],
          [ 81.,  82.,  86., ..., 103., 100.,  89.],
          [ 68.,  76.,  73., ..., 113., 109.,  88.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:16

analyse the exceptions in iter:22
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 86.,  96., 115., ...,  84.,  95.,  79.],
          [125.,  99.,  71., ...,  78.,  88.,  93.],
          [112.,  87.,  58., ...,  89.,  88.,  85.],
          ...,
          [ 66.,  56.,  46., ...,  70.,  61.,  47.],
          [108.,  96.,  86., ...,  57.,  57.,  46.],
          [130., 120.,  98., ...,  44.,  44.,  45.]],

         [[ 74.,  83., 109., ...,  72.,  84.,  68.],
          [110.,  83.,  61., ...,  74.,  82.,  82.],
          [ 95.,  69.,  45., ...,  88.,  84.,  77.],
          ...,
          [ 61.,  53.,  46., ...,  79.,  74.,  57.],
          [100.,  91.,  82., ...,  60.,  65.,  51.],
          [117., 110.,  90., ...,  43.,  46.,  45.]],

         [[ 62.,  65.,  83., ...,  50.,  61.,  45.],
          [104.,  74.,  46., ...,  44.,  51.,  53.],
          [ 89.,  62.,  35., ...,  54.,  50.,  45.],
          ...,
          [ 39.,  33.,  28., ...,  46.,  42.,  31.],
          [ 73.,  66.,  59., ...,  38.,  41.,  31.],
          [ 91.,  86.,  67., ...,  30.,  32.,  32.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:17

analyse the exceptions in iter:23
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[126., 102., 117., ...,  96., 113., 107.],
          [135., 113., 121., ..., 115., 114., 115.],
          [126., 124., 128., ..., 134., 115., 114.],
          ...,
          [141., 155., 134., ..., 149., 147., 122.],
          [153., 164., 146., ..., 163., 189., 184.],
          [125., 129., 124., ..., 133., 180., 168.]],

         [[100.,  76.,  93., ...,  74.,  90.,  84.],
          [109.,  86.,  94., ...,  89.,  89.,  90.],
          [102.,  97., 101., ..., 109.,  90.,  90.],
          ...,
          [111., 123., 102., ..., 140., 133., 106.],
          [122., 132., 119., ..., 156., 178., 174.],
          [100., 106., 102., ..., 127., 173., 162.]],

         [[ 71.,  49.,  60., ...,  42.,  58.,  52.],
          [ 73.,  52.,  56., ...,  58.,  55.,  53.],
          [ 61.,  59.,  60., ...,  77.,  55.,  50.],
          ...,
          [ 85.,  87.,  65., ..., 118., 116.,  94.],
          [ 83.,  89.,  81., ..., 147., 174., 173.],
          [ 56.,  64.,  68., ..., 124., 174., 164.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:18

analyse the exceptions in iter:24
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 73.,  71.,  77., ..., 183., 180., 185.],
          [ 73.,  75.,  78., ..., 181., 172., 174.],
          [ 77.,  94.,  99., ..., 175., 191., 185.],
          ...,
          [ 84.,  86., 118., ...,  79., 159., 117.],
          [ 76.,  81., 103., ...,  56.,  69., 104.],
          [102.,  91.,  95., ..., 100.,  72.,  48.]],

         [[ 77.,  68.,  69., ..., 210., 214., 225.],
          [ 74.,  68.,  64., ..., 229., 220., 218.],
          [ 72.,  82.,  81., ..., 213., 230., 226.],
          ...,
          [106., 105., 133., ...,  95., 177., 133.],
          [ 96.,  98., 116., ...,  80.,  90., 120.],
          [120., 109., 110., ..., 134.,  97.,  59.]],

         [[ 58.,  50.,  44., ..., 149., 143., 144.],
          [ 52.,  55.,  50., ..., 139., 129., 127.],
          [ 64.,  79.,  73., ..., 139., 152., 142.],
          ...,
          [ 56.,  58.,  84., ...,  78., 137.,  94.],
          [ 60.,  56.,  73., ...,  36.,  40.,  69.],
          [ 92.,  62.,  62., ...,  55.,  38.,  29.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:19

analyse the exceptions in iter:25
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[162., 164., 169., ..., 184., 190., 202.],
          [153., 158., 164., ..., 178., 189., 201.],
          [157., 161., 164., ..., 178., 190., 202.],
          ...,
          [214., 213., 213., ..., 240., 241., 242.],
          [218., 209., 208., ..., 232., 236., 239.],
          [216., 207., 201., ..., 231., 233., 235.]],

         [[164., 167., 171., ..., 176., 186., 198.],
          [151., 156., 163., ..., 171., 184., 198.],
          [151., 156., 160., ..., 170., 186., 199.],
          ...,
          [205., 193., 185., ..., 207., 206., 209.],
          [209., 188., 180., ..., 195., 196., 200.],
          [204., 189., 174., ..., 192., 194., 198.]],

         [[130., 128., 131., ..., 137., 146., 161.],
          [119., 120., 124., ..., 131., 143., 158.],
          [120., 121., 122., ..., 131., 142., 156.],
          ...,
          [193., 181., 174., ..., 193., 194., 196.],
          [198., 176., 169., ..., 182., 185., 187.],
          [197., 178., 156., ..., 178., 181., 183.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:20

analyse the exceptions in iter:26
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[131., 124., 116., ..., 184., 185., 184.],
          [127., 124., 116., ..., 177., 180., 186.],
          [123., 121., 113., ..., 179., 187., 194.],
          ...,
          [ 99.,  83.,  54., ..., 138., 155., 165.],
          [ 97.,  77.,  43., ..., 140., 154., 163.],
          [ 96.,  71.,  35., ..., 140., 156., 164.]],

         [[ 81.,  76.,  70., ..., 152., 153., 152.],
          [ 76.,  75.,  69., ..., 142., 146., 152.],
          [ 73.,  73.,  67., ..., 142., 150., 158.],
          ...,
          [ 50.,  42.,  27., ..., 103., 113., 118.],
          [ 50.,  39.,  21., ..., 105., 112., 116.],
          [ 49.,  36.,  16., ..., 104., 114., 118.]],

         [[ 32.,  27.,  20., ..., 114., 117., 120.],
          [ 27.,  26.,  19., ..., 106., 110., 116.],
          [ 23.,  24.,  17., ..., 106., 114., 118.],
          ...,
          [ 10.,   5.,   5., ...,  68.,  72.,  74.],
          [ 10.,   5.,   4., ...,  69.,  71.,  71.],
          [ 10.,   4.,   3., ...,  69.,  73.,  73.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:21

analyse the exceptions in iter:27
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 45.,  42.,  35., ...,  93.,  51.,  39.],
          [ 46.,  42.,  40., ..., 105.,  66.,  48.],
          [ 43.,  40.,  48., ...,  88.,  77.,  58.],
          ...,
          [ 55.,  67.,  73., ...,  93., 101., 103.],
          [ 55.,  62.,  68., ...,  69.,  81.,  99.],
          [ 58.,  59.,  58., ...,  77.,  66.,  83.]],

         [[ 20.,  21.,  17., ...,  86.,  47.,  36.],
          [ 22.,  22.,  22., ...,  93.,  53.,  39.],
          [ 22.,  21.,  32., ...,  74.,  59.,  44.],
          ...,
          [ 54.,  57.,  64., ...,  87., 116., 123.],
          [ 54.,  53.,  59., ...,  62.,  93., 117.],
          [ 53.,  46.,  45., ...,  68.,  75.,  99.]],

         [[ 19.,  18.,  13., ...,  81.,  42.,  32.],
          [ 20.,  18.,  18., ...,  92.,  52.,  36.],
          [ 19.,  17.,  27., ...,  77.,  60.,  43.],
          ...,
          [ 51.,  54.,  57., ...,  49.,  34.,  30.],
          [ 51.,  50.,  52., ...,  38.,  29.,  35.],
          [ 51.,  44.,  40., ...,  53.,  29.,  31.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:22

analyse the exceptions in iter:28
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[128., 121., 138., ..., 130., 101., 122.],
          [133., 125., 136., ..., 131., 106., 127.],
          [141., 126., 141., ..., 132., 114., 126.],
          ...,
          [191., 186., 175., ..., 190., 182., 195.],
          [210., 207., 198., ..., 194., 184., 192.],
          [209., 206., 207., ..., 201., 193., 196.]],

         [[141., 134., 151., ..., 150., 121., 141.],
          [146., 138., 149., ..., 151., 126., 147.],
          [155., 139., 154., ..., 152., 134., 146.],
          ...,
          [178., 174., 160., ..., 179., 175., 188.],
          [195., 197., 179., ..., 179., 178., 186.],
          [194., 195., 189., ..., 187., 187., 190.]],

         [[123., 116., 133., ..., 138., 109., 129.],
          [128., 120., 131., ..., 139., 114., 135.],
          [136., 121., 136., ..., 140., 122., 134.],
          ...,
          [126., 124., 112., ..., 138., 137., 145.],
          [143., 144., 129., ..., 138., 133., 142.],
          [142., 143., 138., ..., 145., 142., 146.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:23

analyse the exceptions in iter:29
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[202., 202., 204., ..., 207., 205., 203.],
          [206., 206., 207., ..., 210., 208., 206.],
          [210., 211., 212., ..., 214., 212., 210.],
          ...,
          [218., 210., 194., ..., 243., 244., 243.],
          [219., 217., 216., ..., 241., 241., 241.],
          [217., 216., 217., ..., 239., 239., 240.]],

         [[204., 204., 206., ..., 208., 206., 204.],
          [208., 208., 209., ..., 211., 209., 207.],
          [212., 213., 214., ..., 214., 213., 211.],
          ...,
          [217., 209., 194., ..., 242., 242., 243.],
          [218., 216., 216., ..., 240., 240., 240.],
          [216., 215., 216., ..., 238., 238., 238.]],

         [[199., 199., 201., ..., 200., 199., 198.],
          [203., 203., 204., ..., 205., 203., 201.],
          [207., 208., 210., ..., 210., 208., 206.],
          ...,
          [222., 214., 198., ..., 247., 247., 247.],
          [223., 221., 220., ..., 245., 245., 245.],
          [221., 220., 221., ..., 243., 243., 243.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]
torch exception:
{'id': 22, 'name': 'flatten', 'frame_work': 'torch', 'input_datas': [tensor([0., 0., 0.,  ..., 0., 0., 0.], grad_fn=<ConstantPadNdBackward0>)]}
Dimension out of range (expected to be in range of [-1, 0], but got 1)

generate models:24

analyse the exceptions in iter:30
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[126., 122., 126., ..., 124., 120., 117.],
          [122., 119., 121., ..., 124., 122., 117.],
          [122., 121., 121., ..., 126., 123., 121.],
          ...,
          [126., 126., 128., ..., 133., 122., 114.],
          [125., 126., 127., ..., 128., 121., 114.],
          [123., 123., 126., ..., 128., 126., 121.]],

         [[118., 115., 119., ..., 118., 114., 111.],
          [115., 112., 114., ..., 118., 116., 111.],
          [115., 114., 114., ..., 120., 117., 115.],
          ...,
          [118., 118., 120., ..., 125., 114., 106.],
          [117., 118., 119., ..., 120., 113., 106.],
          [115., 115., 118., ..., 119., 118., 113.]],

         [[110., 108., 111., ..., 106., 102.,  99.],
          [107., 104., 106., ..., 106., 104.,  99.],
          [107., 106., 106., ..., 108., 105., 103.],
          ...,
          [107., 107., 109., ..., 114., 103.,  95.],
          [106., 107., 108., ..., 109., 102.,  95.],
          [104., 104., 107., ..., 109., 107., 102.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:25

analyse the exceptions in iter:31
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[236., 233., 234., ..., 148., 147., 140.],
          [243., 242., 243., ..., 163., 161., 159.],
          [245., 242., 245., ..., 163., 161., 157.],
          ...,
          [ 79.,  70.,  72., ...,  38.,  36.,  33.],
          [ 81.,  78.,  74., ...,  47.,  31.,  24.],
          [ 80.,  80.,  74., ...,  40.,  28.,  22.]],

         [[242., 239., 240., ..., 145., 145., 137.],
          [249., 247., 250., ..., 162., 160., 158.],
          [251., 248., 251., ..., 162., 160., 157.],
          ...,
          [ 74.,  65.,  68., ...,  31.,  29.,  25.],
          [ 79.,  73.,  68., ...,  38.,  24.,  17.],
          [ 80.,  77.,  67., ...,  30.,  21.,  15.]],

         [[238., 235., 236., ..., 140., 139., 131.],
          [245., 244., 246., ..., 162., 160., 158.],
          [247., 244., 247., ..., 166., 164., 161.],
          ...,
          [ 60.,  47.,  45., ...,  25.,  23.,  19.],
          [ 62.,  56.,  49., ...,  29.,  17.,  10.],
          [ 63.,  61.,  52., ...,  20.,  12.,   8.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:26

analyse the exceptions in iter:32
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 50.,  51.,  42., ...,  48.,  18.,  14.],
          [ 86.,  92.,  82., ...,  46.,  17.,  11.],
          [ 43.,  43.,  51., ...,  42.,  10.,   6.],
          ...,
          [220., 209., 199., ..., 177., 176., 175.],
          [188., 182., 182., ..., 176., 175., 174.],
          [188., 184., 186., ..., 176., 176., 173.]],

         [[ 64.,  63.,  55., ...,  45.,  18.,  15.],
          [107., 110.,  99., ...,  43.,  17.,  12.],
          [ 60.,  56.,  65., ...,  39.,  10.,   6.],
          ...,
          [165., 174., 172., ..., 171., 170., 168.],
          [178., 170., 161., ..., 168., 167., 166.],
          [167., 163., 167., ..., 169., 168., 165.]],

         [[ 37.,  41.,  41., ...,  42.,  14.,  12.],
          [ 67.,  76.,  67., ...,  41.,  14.,  10.],
          [ 42.,  41.,  46., ...,  37.,   9.,   5.],
          ...,
          [151., 165., 164., ..., 168., 167., 166.],
          [162., 162., 157., ..., 166., 165., 164.],
          [162., 157., 160., ..., 166., 166., 162.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:27

analyse the exceptions in iter:33
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[  7.,   7.,   5., ...,  82.,  80.,  69.],
          [  6.,   6.,   5., ...,  85.,  86.,  81.],
          [  1.,   7.,   8., ...,  98.,  96.,  86.],
          ...,
          [150., 135., 129., ...,  72.,  45.,  26.],
          [156., 153., 138., ...,  57.,  23.,  38.],
          [183., 191., 182., ...,  83.,  67., 114.]],

         [[  5.,   5.,   4., ...,  84.,  85.,  73.],
          [  4.,   4.,   3., ...,  86.,  88.,  80.],
          [  1.,   7.,   8., ...,  96.,  96.,  84.],
          ...,
          [153., 136., 129., ...,  72.,  51.,  32.],
          [156., 151., 136., ...,  58.,  32.,  45.],
          [193., 199., 189., ...,  83.,  74., 120.]],

         [[  8.,   8.,   6., ...,  78.,  81.,  68.],
          [  8.,   9.,   8., ...,  77.,  81.,  72.],
          [  6.,  12.,  13., ...,  83.,  85.,  73.],
          ...,
          [139., 121., 113., ...,  69.,  63.,  51.],
          [139., 130., 110., ...,  56.,  48.,  64.],
          [183., 185., 171., ...,  76.,  81., 119.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:28

analyse the exceptions in iter:34
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[172., 171., 168., ..., 158., 156., 147.],
          [169., 168., 168., ..., 158., 152., 145.],
          [174., 169., 170., ..., 157., 149., 146.],
          ...,
          [150., 157., 162., ..., 158., 147., 139.],
          [143., 149., 155., ..., 148., 143., 140.],
          [148., 146., 149., ..., 137., 134., 136.]],

         [[187., 186., 182., ..., 170., 169., 163.],
          [185., 183., 184., ..., 175., 170., 165.],
          [190., 185., 186., ..., 177., 170., 168.],
          ...,
          [163., 168., 170., ..., 168., 160., 154.],
          [154., 158., 161., ..., 157., 153., 153.],
          [158., 155., 157., ..., 143., 139., 143.]],

         [[130., 130., 126., ..., 113., 113., 107.],
          [123., 122., 123., ..., 114., 110., 107.],
          [126., 122., 123., ..., 115., 108., 109.],
          ...,
          [100., 103., 104., ..., 108.,  99.,  90.],
          [ 89.,  90.,  96., ...,  99.,  92.,  88.],
          [ 93.,  89.,  92., ...,  86.,  80.,  82.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:29

analyse the exceptions in iter:37
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 95.,  88.,  86., ..., 101.,  91., 105.],
          [ 82.,  75.,  76., ...,  94.,  51.,  84.],
          [ 77.,  74.,  71., ...,  71.,  47.,  88.],
          ...,
          [ 97.,  92.,  97., ...,  86.,  94.,  90.],
          [ 95.,  84.,  89., ...,  96., 102.,  97.],
          [ 91.,  83.,  82., ..., 100., 105., 108.]],

         [[105.,  97.,  96., ..., 116., 108., 124.],
          [ 90.,  83.,  84., ..., 102.,  61.,  97.],
          [ 85.,  81.,  78., ...,  74.,  52.,  95.],
          ...,
          [ 95.,  92.,  93., ...,  91.,  97.,  97.],
          [ 90.,  86.,  89., ...,  97.,  96.,  94.],
          [ 84.,  81.,  81., ...,  96.,  97., 102.]],

         [[127., 120., 118., ..., 144., 136., 157.],
          [110., 104., 104., ..., 123.,  80., 122.],
          [103.,  98.,  95., ...,  86.,  63., 111.],
          ...,
          [ 72.,  69.,  70., ...,  65.,  72.,  71.],
          [ 65.,  59.,  62., ...,  76.,  77.,  73.],
          [ 63.,  57.,  55., ...,  78.,  80.,  83.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:30

analyse the exceptions in iter:39
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 98., 119., 109., ...,  75.,  60.,  61.],
          [ 44.,  75.,  69., ...,  81.,  55.,  65.],
          [ 73.,  94., 111., ...,  77.,  60.,  58.],
          ...,
          [ 96., 100., 129., ...,  72.,  68.,  85.],
          [124., 114., 110., ...,  84.,  81.,  73.],
          [ 93.,  98.,  95., ...,  73.,  55.,  72.]],

         [[110., 132., 122., ...,  97.,  82.,  84.],
          [ 56.,  86.,  80., ..., 103.,  77.,  87.],
          [ 84., 105., 122., ...,  99.,  82.,  82.],
          ...,
          [ 98., 100., 126., ...,  73.,  71.,  93.],
          [137., 124., 117., ...,  92.,  89.,  81.],
          [110., 112., 106., ...,  82.,  63.,  79.]],

         [[ 96., 117., 107., ...,  76.,  62.,  67.],
          [ 46.,  76.,  70., ...,  82.,  57.,  74.],
          [ 77.,  98., 115., ...,  78.,  61.,  61.],
          ...,
          [ 99., 100., 124., ...,  69.,  67.,  85.],
          [135., 121., 111., ...,  85.,  84.,  74.],
          [107., 107.,  99., ...,  75.,  58.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:31

analyse the exceptions in iter:40
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[101.,  94.,  98., ..., 121., 127., 143.],
          [120., 131., 124., ..., 115., 121., 144.],
          [120., 139., 140., ..., 105., 107., 121.],
          ...,
          [ 48.,  31.,  37., ..., 188., 159., 125.],
          [ 52.,  42.,  44., ..., 173., 165., 150.],
          [ 41.,  38.,  42., ..., 164., 145., 155.]],

         [[114., 116., 112., ..., 119., 130., 136.],
          [122., 132., 119., ..., 116., 126., 141.],
          [126., 140., 139., ...,  97., 103., 121.],
          ...,
          [ 45.,  31.,  37., ..., 157., 130., 106.],
          [ 46.,  40.,  45., ..., 135., 136., 132.],
          [ 42.,  38.,  41., ..., 130., 120., 134.]],

         [[ 35.,  48.,  42., ...,  58.,  66.,  90.],
          [ 64.,  98.,  74., ...,  53.,  63.,  77.],
          [ 50.,  82.,  82., ...,  56.,  61.,  65.],
          ...,
          [ 40.,  24.,  27., ..., 103.,  93.,  60.],
          [ 41.,  32.,  32., ..., 102.,  99.,  92.],
          [ 32.,  33.,  33., ...,  98.,  79.,  91.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:32

analyse the exceptions in iter:41
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[145., 145., 148., ..., 237., 230., 224.],
          [147., 150., 168., ..., 231., 221., 214.],
          [145., 150., 178., ..., 229., 230., 232.],
          ...,
          [231., 230., 227., ..., 235., 234., 231.],
          [224., 231., 231., ..., 240., 228., 223.],
          [125., 225., 232., ..., 224., 216., 228.]],

         [[125., 126., 130., ..., 210., 202., 199.],
          [126., 132., 147., ..., 203., 192., 190.],
          [124., 130., 155., ..., 201., 201., 205.],
          ...,
          [202., 202., 198., ..., 209., 207., 203.],
          [199., 200., 202., ..., 213., 201., 199.],
          [120., 200., 204., ..., 197., 189., 203.]],

         [[ 83.,  82.,  82., ..., 170., 161., 158.],
          [ 83.,  84., 107., ..., 163., 151., 149.],
          [ 79.,  84., 110., ..., 161., 160., 166.],
          ...,
          [169., 170., 166., ..., 172., 170., 167.],
          [163., 167., 170., ..., 177., 162., 162.],
          [ 98., 166., 170., ..., 160., 150., 167.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:33

analyse the exceptions in iter:42
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[127., 148., 192., ..., 112., 144., 153.],
          [ 89., 111., 151., ..., 161., 166., 163.],
          [ 98.,  94., 110., ..., 173., 169., 173.],
          ...,
          [156., 151., 149., ..., 150., 149., 142.],
          [163., 162., 161., ..., 135., 141., 138.],
          [160., 160., 163., ..., 138., 143., 151.]],

         [[126., 144., 181., ..., 102., 135., 142.],
          [ 90., 110., 141., ..., 152., 158., 154.],
          [ 94.,  94., 109., ..., 159., 154., 157.],
          ...,
          [152., 145., 144., ..., 144., 148., 143.],
          [158., 155., 151., ..., 131., 137., 134.],
          [152., 151., 153., ..., 121., 131., 135.]],

         [[129., 144., 175., ...,  98., 123., 130.],
          [ 94., 116., 137., ..., 129., 132., 128.],
          [ 94.,  99., 118., ..., 132., 129., 132.],
          ...,
          [115., 107., 104., ..., 110., 114., 104.],
          [122., 120., 118., ...,  99., 109., 103.],
          [122., 120., 120., ..., 103., 107., 117.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:34

analyse the exceptions in iter:43
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 99.,  98., 100., ..., 129., 132., 130.],
          [100., 100., 102., ..., 122., 135., 132.],
          [104., 104., 106., ..., 165., 149., 140.],
          ...,
          [195., 199., 221., ..., 209., 209., 208.],
          [197., 201., 211., ..., 208., 210., 209.],
          [199., 197., 204., ..., 208., 210., 209.]],

         [[166., 165., 167., ..., 186., 190., 188.],
          [166., 164., 167., ..., 152., 189., 188.],
          [169., 167., 170., ..., 165., 189., 189.],
          ...,
          [173., 177., 194., ..., 191., 190., 188.],
          [173., 178., 184., ..., 190., 191., 191.],
          [173., 172., 174., ..., 189., 191., 190.]],

         [[198., 196., 199., ..., 212., 215., 213.],
          [195., 194., 197., ..., 169., 213., 214.],
          [197., 195., 198., ..., 160., 205., 212.],
          ...,
          [149., 153., 166., ..., 169., 171., 173.],
          [149., 149., 147., ..., 171., 173., 175.],
          [149., 144., 137., ..., 174., 177., 175.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:35

analyse the exceptions in iter:44
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[139., 144., 146., ..., 132., 131., 129.],
          [139., 124., 128., ..., 110., 108., 114.],
          [172., 126., 116., ...,  67.,  68., 113.],
          ...,
          [ 95.,  93.,  91., ...,  81., 104., 107.],
          [132., 124., 119., ..., 114., 131., 132.],
          [110., 124., 129., ..., 129., 128., 112.]],

         [[154., 160., 162., ..., 140., 142., 141.],
          [148., 137., 149., ..., 114., 112., 127.],
          [162., 114., 109., ...,  71.,  68., 119.],
          ...,
          [ 88.,  82.,  84., ...,  94., 103., 102.],
          [109., 105., 104., ..., 104., 112., 110.],
          [108., 116., 116., ..., 117., 114., 105.]],

         [[188., 192., 192., ...,  77.,  76.,  70.],
          [180., 167., 178., ...,  81.,  76.,  68.],
          [172., 121., 129., ...,  50.,  58.,  78.],
          ...,
          [ 44.,  45.,  44., ...,  30.,  51.,  53.],
          [ 74.,  69.,  61., ...,  59.,  74.,  70.],
          [ 52.,  67.,  67., ...,  80.,  75.,  59.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:36

analyse the exceptions in iter:45
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 54.,  59.,  56., ..., 133., 131., 132.],
          [ 59.,  62.,  55., ..., 193., 200., 197.],
          [ 41.,  41.,  36., ..., 202., 196., 190.],
          ...,
          [105.,  97.,  96., ...,  98., 100., 100.],
          [ 86.,  96.,  97., ...,  94.,  98., 100.],
          [ 70.,  92., 113., ...,  98.,  96.,  92.]],

         [[ 31.,  34.,  37., ...,  92.,  89.,  94.],
          [ 38.,  39.,  36., ..., 135., 144., 142.],
          [ 26.,  25.,  21., ..., 144., 141., 136.],
          ...,
          [161., 163., 170., ..., 145., 138., 130.],
          [149., 157., 164., ..., 127., 126., 124.],
          [136., 146., 169., ..., 121., 117., 112.]],

         [[ 18.,  19.,  22., ...,  53.,  49.,  53.],
          [ 26.,  26.,  25., ...,  77.,  86.,  86.],
          [ 18.,  16.,  13., ...,  84.,  81.,  79.],
          ...,
          [157., 162., 164., ..., 144., 135., 123.],
          [143., 156., 160., ..., 122., 120., 114.],
          [128., 145., 168., ..., 111., 106., 101.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:37

analyse the exceptions in iter:46
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 94.,  72.,  60., ...,  72.,  71.,  77.],
          [ 85.,  67.,  52., ...,  67.,  72.,  77.],
          [ 82.,  54.,  41., ...,  70.,  71.,  78.],
          ...,
          [ 78.,  54.,  37., ...,  51.,  44.,  52.],
          [133., 117.,  98., ...,  62.,  53.,  60.],
          [140., 137., 138., ...,  85.,  79.,  69.]],

         [[ 91.,  71.,  68., ...,  78.,  75.,  82.],
          [ 83.,  66.,  57., ...,  73.,  78.,  85.],
          [ 82.,  53.,  44., ...,  76.,  77.,  85.],
          ...,
          [ 79.,  54.,  37., ...,  49.,  47.,  50.],
          [127., 111.,  92., ...,  58.,  56.,  59.],
          [129., 126., 126., ...,  68.,  71.,  63.]],

         [[ 62.,  42.,  35., ...,  43.,  39.,  41.],
          [ 55.,  38.,  29., ...,  41.,  37.,  39.],
          [ 53.,  24.,  19., ...,  53.,  37.,  39.],
          ...,
          [ 86.,  63.,  46., ...,  28.,  20.,  28.],
          [129., 115.,  98., ...,  35.,  28.,  36.],
          [126., 125., 129., ...,  46.,  46.,  42.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:38

analyse the exceptions in iter:48
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[191., 190., 190., ..., 135., 142., 146.],
          [187., 184., 179., ..., 147., 152., 153.],
          [181., 176., 165., ..., 154., 162., 158.],
          ...,
          [220., 221., 222., ..., 211., 214., 224.],
          [212., 220., 225., ..., 216., 216., 221.],
          [201., 212., 217., ..., 220., 217., 217.]],

         [[191., 192., 193., ..., 143., 149., 150.],
          [188., 187., 183., ..., 154., 158., 158.],
          [183., 178., 169., ..., 161., 167., 163.],
          ...,
          [245., 245., 244., ..., 238., 240., 248.],
          [238., 245., 247., ..., 242., 241., 244.],
          [226., 239., 243., ..., 242., 240., 238.]],

         [[168., 172., 174., ..., 123., 126., 127.],
          [165., 166., 163., ..., 134., 135., 134.],
          [160., 157., 148., ..., 140., 143., 139.],
          ...,
          [198., 199., 202., ..., 189., 193., 203.],
          [190., 198., 204., ..., 194., 195., 201.],
          [178., 190., 196., ..., 197., 196., 195.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:39

analyse the exceptions in iter:49
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[255., 255., 255., ..., 255., 255., 255.],
          [255., 252., 255., ..., 254., 254., 254.],
          [255., 252., 255., ..., 254., 254., 254.],
          ...,
          [255., 254., 254., ..., 254., 254., 254.],
          [255., 253., 254., ..., 254., 254., 254.],
          [255., 255., 255., ..., 255., 255., 255.]],

         [[255., 255., 255., ..., 255., 255., 255.],
          [255., 252., 255., ..., 254., 254., 254.],
          [255., 252., 255., ..., 254., 254., 254.],
          ...,
          [255., 254., 254., ..., 254., 254., 254.],
          [255., 253., 254., ..., 254., 254., 254.],
          [255., 255., 255., ..., 255., 255., 255.]],

         [[255., 255., 255., ..., 255., 255., 255.],
          [255., 252., 255., ..., 254., 254., 254.],
          [255., 252., 255., ..., 254., 254., 254.],
          ...,
          [255., 254., 254., ..., 254., 254., 254.],
          [255., 253., 254., ..., 254., 254., 254.],
          [255., 255., 255., ..., 255., 255., 255.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:40

final statics:
total operators:28
tensorflow --> nums:40,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:1,distinct_bugs:1
tensorflow --> 
conv2d:40
mindspore --> 
torch --> 
flatten:1

generate models:40

analyse the exceptions in iter:51
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[213., 119.,  58., ..., 143., 140., 117.],
          [214., 128.,  62., ..., 138., 136., 111.],
          [215., 139.,  75., ..., 136., 134., 107.],
          ...,
          [118., 122., 129., ..., 158., 151., 145.],
          [111., 117., 128., ..., 153., 147., 141.],
          [110., 116., 127., ..., 141., 136., 139.]],

         [[221., 127.,  71., ..., 158., 142., 101.],
          [223., 137.,  75., ..., 152., 138.,  95.],
          [224., 148.,  88., ..., 151., 136.,  91.],
          ...,
          [ 45.,  45.,  46., ...,  65.,  68.,  67.],
          [ 38.,  42.,  47., ...,  62.,  59.,  63.],
          [ 38.,  40.,  48., ...,  55.,  52.,  58.]],

         [[221., 122.,  81., ..., 150., 136.,  87.],
          [220., 130.,  83., ..., 145., 133.,  82.],
          [219., 139.,  94., ..., 143., 131.,  77.],
          ...,
          [ 37.,  40.,  42., ...,  54.,  55.,  55.],
          [ 32.,  36.,  41., ...,  53.,  49.,  51.],
          [ 32.,  34.,  41., ...,  46.,  43.,  47.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:41

analyse the exceptions in iter:0
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:2

analyse the exceptions in iter:2
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [113., 111., 105., ...,  72.,  72.,  72.],
          [111., 104.,  99., ...,  68.,  70.,  78.],
          [106.,  99.,  95., ...,  78.,  79.,  80.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [120., 118., 112., ...,  81.,  80.,  80.],
          [118., 111., 106., ...,  75.,  76.,  84.],
          [113., 106., 102., ...,  85.,  85.,  86.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [112., 111., 106., ...,  80.,  79.,  79.],
          [110., 104.,  98., ...,  73.,  75.,  82.],
          [105.,  98.,  94., ...,  83.,  83.,  84.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:3

analyse the exceptions in iter:3
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  37.,  38., ...,  76.,  81.,  85.],
          [ 33.,  34.,  32., ...,  95.,  96.,  85.],
          [ 39.,  40.,  57., ...,  93., 107.,  95.],
          ...,
          [ 83.,  87.,  84., ...,  99.,  90.,  81.],
          [ 88.,  90.,  93., ...,  80.,  76.,  82.],
          [ 97.,  94.,  93., ...,  54.,  63.,  72.]],

         [[ 25.,  34.,  35., ...,  67.,  72.,  76.],
          [ 28.,  30.,  27., ...,  82.,  82.,  72.],
          [ 32.,  33.,  50., ...,  76.,  89.,  77.],
          ...,
          [ 73.,  77.,  74., ...,  93.,  84.,  75.],
          [ 72.,  74.,  77., ...,  74.,  70.,  76.],
          [ 78.,  75.,  75., ...,  47.,  56.,  65.]],

         [[ 10.,  19.,  20., ...,  39.,  43.,  47.],
          [ 13.,  14.,  12., ...,  55.,  56.,  45.],
          [ 15.,  17.,  33., ...,  52.,  66.,  54.],
          ...,
          [ 52.,  56.,  52., ...,  70.,  61.,  52.],
          [ 51.,  52.,  56., ...,  53.,  49.,  55.],
          [ 56.,  53.,  53., ...,  28.,  37.,  46.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:4

analyse the exceptions in iter:4
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[170., 168., 177., ..., 162., 158., 157.],
          [168., 172., 171., ..., 159., 156., 154.],
          [154., 149., 129., ..., 161., 157., 154.],
          ...,
          [ 74.,  76.,  78., ...,  71.,  68.,  61.],
          [ 68.,  69.,  72., ...,  76.,  71.,  71.],
          [ 67.,  68.,  69., ...,  75.,  71.,  73.]],

         [[180., 178., 185., ..., 179., 178., 177.],
          [181., 185., 183., ..., 177., 176., 174.],
          [170., 165., 144., ..., 178., 177., 174.],
          ...,
          [ 84.,  85.,  85., ...,  75.,  72.,  65.],
          [ 76.,  77.,  79., ...,  80.,  75.,  75.],
          [ 75.,  76.,  75., ...,  79.,  75.,  77.]],

         [[198., 196., 203., ..., 215., 214., 212.],
          [198., 201., 200., ..., 212., 211., 209.],
          [186., 181., 162., ..., 214., 212., 209.],
          ...,
          [ 80.,  81.,  82., ...,  78.,  75.,  68.],
          [ 77.,  78.,  78., ...,  83.,  78.,  78.],
          [ 78.,  79.,  76., ...,  82.,  78.,  80.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:5

analyse the exceptions in iter:5
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[159., 150., 153., ...,  91.,  74.,  76.],
          [142., 146., 155., ..., 127., 122.,  86.],
          [109.,  99., 105., ..., 137., 163.,  93.],
          ...,
          [244., 240., 241., ..., 156., 179., 200.],
          [246., 243., 243., ..., 162., 178., 192.],
          [246., 243., 244., ..., 166., 173., 182.]],

         [[102.,  91.,  95., ...,  71.,  63.,  58.],
          [ 75.,  72.,  76., ..., 105., 111.,  69.],
          [ 67.,  58.,  59., ..., 112., 132.,  72.],
          ...,
          [129., 123., 122., ...,  42.,  59.,  73.],
          [133., 128., 127., ...,  44.,  56.,  65.],
          [139., 133., 132., ...,  47.,  51.,  57.]],

         [[101.,  95.,  97., ...,  56.,  55.,  55.],
          [ 68.,  66.,  65., ...,  71.,  93.,  61.],
          [ 75.,  60.,  52., ...,  80., 105.,  71.],
          ...,
          [ 70.,  65.,  65., ...,  15.,  26.,  36.],
          [ 74.,  72.,  70., ...,  14.,  22.,  27.],
          [ 82.,  78.,  77., ...,  14.,  17.,  19.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:6

analyse the exceptions in iter:6
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[164., 105., 118., ..., 109., 108.,  91.],
          [167., 116.,  72., ..., 105., 105.,  89.],
          [140., 142., 119., ..., 104.,  84.,  78.],
          ...,
          [139., 142., 135., ...,  89.,  97., 126.],
          [163., 153., 146., ...,  85.,  98., 127.],
          [183., 176., 154., ...,  94.,  91., 122.]],

         [[206., 140., 148., ..., 147., 147., 129.],
          [213., 160., 109., ..., 142., 142., 127.],
          [191., 193., 163., ..., 139., 120., 115.],
          ...,
          [148., 155., 156., ..., 134., 148., 176.],
          [157., 164., 164., ..., 130., 148., 178.],
          [153., 182., 154., ..., 134., 133., 170.]],

         [[ 84.,  61., 101., ...,  73.,  69.,  57.],
          [ 84.,  49.,  43., ...,  79.,  72.,  57.],
          [ 65.,  66.,  79., ...,  84.,  58.,  49.],
          ...,
          [ 81.,  74.,  72., ...,  28.,  24.,  49.],
          [ 85.,  82.,  90., ...,  19.,  27.,  48.],
          [102., 116., 100., ...,  29.,  26.,  44.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:7

analyse the exceptions in iter:7
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  30.,  33., ...,  43.,  52.,  46.],
          [ 27.,  27.,  21., ..., 112., 117., 115.],
          [ 34.,  33.,  24., ..., 175., 177., 176.],
          ...,
          [142., 142., 150., ..., 134., 128., 134.],
          [140., 145., 150., ..., 131., 130., 122.],
          [134., 136., 136., ..., 106., 104., 101.]],

         [[ 35.,  34.,  44., ...,  56.,  64.,  58.],
          [ 30.,  28.,  31., ..., 136., 140., 138.],
          [ 36.,  33.,  30., ..., 208., 209., 208.],
          ...,
          [176., 176., 184., ..., 175., 168., 175.],
          [176., 180., 186., ..., 170., 170., 162.],
          [171., 171., 171., ..., 144., 142., 140.]],

         [[ 39.,  44.,  47., ...,  45.,  53.,  47.],
          [ 38.,  41.,  39., ...,  97., 101., 100.],
          [ 42.,  43.,  40., ..., 143., 144., 143.],
          ...,
          [118., 118., 127., ..., 119., 112., 119.],
          [124., 129., 134., ..., 119., 119., 111.],
          [123., 124., 124., ..., 100.,  99.,  96.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:8

analyse the exceptions in iter:9
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[125., 110., 102., ..., 202., 200., 202.],
          [142., 146., 176., ..., 195., 198., 204.],
          [180., 143., 156., ..., 122., 139., 158.],
          ...,
          [104., 101., 101., ..., 126., 126., 125.],
          [104., 105., 109., ..., 138., 137., 137.],
          [105., 108., 115., ..., 143., 143., 144.]],

         [[125., 101.,  90., ..., 207., 205., 208.],
          [146., 144., 172., ..., 201., 205., 211.],
          [185., 146., 157., ..., 111., 128., 147.],
          ...,
          [ 82.,  80.,  81., ..., 103., 103., 101.],
          [ 81.,  84.,  88., ..., 113., 113., 112.],
          [ 83.,  87.,  94., ..., 117., 116., 116.]],

         [[116.,  91.,  83., ..., 214., 212., 214.],
          [142., 139., 170., ..., 205., 209., 215.],
          [183., 146., 157., ..., 113., 131., 150.],
          ...,
          [ 41.,  39.,  38., ...,  67.,  69.,  68.],
          [ 40.,  41.,  43., ...,  78.,  80.,  81.],
          [ 42.,  45.,  50., ...,  82.,  84.,  86.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:9

final statics:
total operators:28
tensorflow --> nums:9,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:9
mindspore --> 
torch --> 

generate models:9

analyse the exceptions in iter:10
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[53., 54., 56., ..., 47., 41., 24.],
          [46., 53., 54., ..., 42., 39., 28.],
          [45., 50., 46., ..., 38., 36., 29.],
          ...,
          [71., 74., 80., ..., 51., 46., 49.],
          [75., 79., 81., ..., 61., 64., 48.],
          [85., 85., 86., ..., 61., 64., 49.]],

         [[65., 63., 60., ..., 51., 45., 28.],
          [59., 62., 59., ..., 46., 43., 32.],
          [59., 60., 52., ..., 42., 40., 33.],
          ...,
          [83., 83., 85., ..., 54., 49., 50.],
          [82., 85., 85., ..., 65., 67., 50.],
          [83., 84., 86., ..., 65., 67., 50.]],

         [[53., 52., 50., ..., 50., 44., 27.],
          [41., 45., 44., ..., 45., 42., 31.],
          [38., 41., 34., ..., 41., 39., 32.],
          ...,
          [66., 66., 67., ..., 33., 34., 41.],
          [67., 69., 67., ..., 41., 48., 41.],
          [71., 71., 70., ..., 39., 46., 41.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:10

analyse the exceptions in iter:11
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[142., 172., 176., ..., 216., 198., 205.],
          [191., 196., 174., ..., 229., 222., 217.],
          [220., 217., 192., ..., 224., 225., 218.],
          ...,
          [197., 196., 201., ..., 200., 199., 205.],
          [196., 191., 193., ..., 198., 199., 201.],
          [186., 182., 174., ..., 158., 158., 163.]],

         [[149., 172., 168., ..., 212., 194., 202.],
          [190., 192., 166., ..., 222., 215., 210.],
          [212., 209., 183., ..., 214., 214., 208.],
          ...,
          [152., 152., 156., ..., 165., 165., 164.],
          [157., 152., 154., ..., 164., 165., 161.],
          [150., 147., 139., ..., 124., 125., 125.]],

         [[152., 167., 154., ..., 211., 193., 200.],
          [192., 190., 159., ..., 220., 213., 207.],
          [212., 208., 182., ..., 209., 210., 203.],
          ...,
          [136., 135., 140., ..., 146., 146., 150.],
          [139., 135., 136., ..., 144., 145., 146.],
          [133., 130., 121., ..., 105., 106., 111.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:11

analyse the exceptions in iter:12
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[164., 162., 162., ..., 157., 153., 153.],
          [168., 166., 166., ..., 164., 160., 158.],
          [172., 170., 171., ..., 168., 165., 163.],
          ...,
          [123., 117., 112., ..., 117.,  95., 120.],
          [120., 116., 112., ..., 126., 120., 120.],
          [121., 120., 116., ..., 124., 124., 120.]],

         [[215., 212., 212., ..., 210., 208., 203.],
          [218., 215., 215., ..., 212., 209., 205.],
          [220., 217., 218., ..., 212., 208., 207.],
          ...,
          [160., 154., 149., ..., 136., 115., 149.],
          [156., 151., 147., ..., 149., 144., 152.],
          [154., 152., 148., ..., 152., 154., 154.]],

         [[244., 240., 240., ..., 237., 235., 234.],
          [245., 242., 242., ..., 238., 236., 235.],
          [246., 243., 244., ..., 238., 235., 236.],
          ...,
          [105., 102.,  99., ..., 100.,  79., 100.],
          [100.,  99.,  96., ..., 110., 103., 101.],
          [ 96.,  99.,  97., ..., 108., 107., 100.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:12

analyse the exceptions in iter:13
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 17.,  17.,  17., ...,  23.,  22.,  19.],
          [ 18.,  18.,  18., ...,  24.,  23.,  22.],
          [ 18.,  18.,  19., ...,  24.,  23.,  23.],
          ...,
          [217., 226., 210., ...,  33.,  32.,  33.],
          [219., 222., 214., ...,  35.,  34.,  33.],
          [210., 221., 215., ...,  36.,  34.,  32.]],

         [[  3.,   3.,   2., ...,  13.,  12.,   9.],
          [  4.,   4.,   4., ...,  14.,  13.,  12.],
          [  4.,   4.,   5., ...,  14.,  13.,  13.],
          ...,
          [214., 219., 201., ...,  24.,  23.,  24.],
          [215., 215., 208., ...,  26.,  25.,  24.],
          [208., 216., 212., ...,  27.,  25.,  23.]],

         [[  2.,   2.,   1., ...,  11.,  10.,   7.],
          [  3.,   3.,   3., ...,  12.,  11.,  10.],
          [  3.,   3.,   4., ...,  12.,  11.,  11.],
          ...,
          [223., 227., 213., ...,  17.,  16.,  17.],
          [230., 229., 225., ...,  19.,  18.,  17.],
          [223., 229., 227., ...,  20.,  18.,  16.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:13

analyse the exceptions in iter:14
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[100.,  98.,  99., ..., 165., 163., 165.],
          [101., 100., 100., ..., 164., 163., 159.],
          [105., 104., 104., ..., 156., 136., 114.],
          ...,
          [166., 166., 168., ..., 137., 137., 147.],
          [161., 162., 167., ..., 131., 138., 137.],
          [164., 162., 164., ..., 153., 157., 156.]],

         [[146., 144., 144., ..., 165., 163., 165.],
          [145., 143., 143., ..., 161., 162., 161.],
          [147., 145., 145., ..., 150., 133., 117.],
          ...,
          [156., 156., 157., ..., 127., 126., 136.],
          [152., 153., 158., ..., 125., 133., 132.],
          [158., 156., 158., ..., 146., 151., 150.]],

         [[192., 189., 189., ..., 165., 163., 165.],
          [188., 186., 186., ..., 159., 159., 157.],
          [189., 186., 187., ..., 147., 129., 111.],
          ...,
          [150., 151., 152., ..., 112., 114., 127.],
          [149., 150., 155., ..., 117., 124., 120.],
          [155., 153., 155., ..., 139., 141., 137.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:14

analyse the exceptions in iter:15
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[100., 100., 101., ...,  95.,  94.,  95.],
          [103., 103., 104., ...,  97.,  97.,  97.],
          [107., 106., 106., ..., 100., 100., 101.],
          ...,
          [165., 159., 167., ...,  75.,  75.,  72.],
          [158., 173., 182., ...,  76.,  75.,  77.],
          [161., 162., 160., ...,  98., 129., 162.]],

         [[168., 168., 167., ..., 165., 165., 167.],
          [170., 168., 168., ..., 167., 166., 168.],
          [174., 172., 173., ..., 170., 170., 172.],
          ...,
          [178., 170., 177., ..., 117., 120., 120.],
          [174., 186., 193., ..., 119., 119., 121.],
          [176., 176., 171., ..., 137., 160., 185.]],

         [[231., 229., 230., ..., 231., 228., 229.],
          [230., 228., 226., ..., 229., 227., 229.],
          [233., 230., 229., ..., 230., 230., 232.],
          ...,
          [177., 167., 170., ..., 154., 157., 158.],
          [172., 182., 188., ..., 154., 153., 154.],
          [174., 172., 169., ..., 167., 183., 202.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:15

analyse the exceptions in iter:16
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[235., 235., 237., ..., 233., 227., 223.],
          [231., 232., 234., ..., 231., 225., 221.],
          [231., 233., 237., ..., 232., 225., 221.],
          ...,
          [125., 126., 143., ...,  66.,  65.,  68.],
          [127., 141., 149., ...,  63.,  67.,  62.],
          [137., 142., 149., ...,  62.,  61.,  51.]],

         [[236., 236., 238., ..., 234., 230., 228.],
          [232., 233., 235., ..., 232., 228., 225.],
          [232., 234., 238., ..., 233., 228., 226.],
          ...,
          [124., 125., 142., ...,  89.,  86.,  83.],
          [125., 140., 148., ...,  89.,  88.,  79.],
          [135., 140., 147., ...,  90.,  84.,  68.]],

         [[238., 238., 240., ..., 236., 233., 232.],
          [234., 235., 237., ..., 234., 232., 233.],
          [234., 236., 240., ..., 235., 232., 233.],
          ...,
          [122., 123., 140., ...,  23.,  23.,  37.],
          [125., 139., 148., ...,  24.,  26.,  29.],
          [136., 141., 148., ...,  27.,  23.,  14.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:16

analyse the exceptions in iter:18
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[197., 198., 201., ..., 217., 217., 217.],
          [193., 195., 198., ..., 216., 215., 214.],
          [192., 194., 197., ..., 217., 216., 215.],
          ...,
          [156., 156., 156., ...,  98., 117., 128.],
          [158., 159., 154., ..., 131., 117.,  91.],
          [152., 151., 145., ...,  91.,  90.,  79.]],

         [[187., 188., 191., ..., 201., 201., 201.],
          [183., 185., 188., ..., 200., 200., 198.],
          [182., 184., 187., ..., 201., 200., 199.],
          ...,
          [146., 146., 146., ...,  79.,  96., 105.],
          [148., 149., 144., ..., 110.,  99.,  75.],
          [142., 141., 135., ...,  72.,  73.,  65.]],

         [[188., 189., 192., ..., 204., 204., 204.],
          [184., 186., 189., ..., 203., 202., 201.],
          [183., 185., 188., ..., 204., 203., 202.],
          ...,
          [147., 147., 147., ...,  65.,  82.,  89.],
          [149., 150., 145., ...,  96.,  86.,  64.],
          [143., 142., 136., ...,  61.,  63.,  57.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:17

analyse the exceptions in iter:20
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[153., 174., 155., ..., 122., 138.,  97.],
          [160., 164., 150., ..., 137., 160., 103.],
          [140., 147., 136., ..., 104., 125.,  93.],
          ...,
          [175., 170., 170., ..., 193., 197., 199.],
          [174., 173., 171., ..., 200., 202., 208.],
          [168., 164., 166., ..., 204., 204., 206.]],

         [[157., 180., 165., ..., 125., 143., 101.],
          [163., 170., 159., ..., 135., 161., 109.],
          [143., 152., 145., ..., 103., 128., 102.],
          ...,
          [177., 172., 172., ..., 203., 206., 204.],
          [177., 176., 174., ..., 208., 209., 212.],
          [173., 169., 171., ..., 209., 208., 210.]],

         [[155., 188., 172., ..., 123., 141.,  97.],
          [165., 180., 169., ..., 129., 157., 107.],
          [147., 166., 158., ...,  99., 125., 101.],
          ...,
          [179., 174., 174., ..., 212., 214., 213.],
          [181., 180., 178., ..., 216., 218., 221.],
          [180., 175., 177., ..., 217., 217., 219.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:18

analyse the exceptions in iter:23
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[126., 102., 117., ...,  96., 113., 107.],
          [135., 113., 121., ..., 115., 114., 115.],
          [126., 124., 128., ..., 134., 115., 114.],
          ...,
          [141., 155., 134., ..., 149., 147., 122.],
          [153., 164., 146., ..., 163., 189., 184.],
          [125., 129., 124., ..., 133., 180., 168.]],

         [[100.,  76.,  93., ...,  74.,  90.,  84.],
          [109.,  86.,  94., ...,  89.,  89.,  90.],
          [102.,  97., 101., ..., 109.,  90.,  90.],
          ...,
          [111., 123., 102., ..., 140., 133., 106.],
          [122., 132., 119., ..., 156., 178., 174.],
          [100., 106., 102., ..., 127., 173., 162.]],

         [[ 71.,  49.,  60., ...,  42.,  58.,  52.],
          [ 73.,  52.,  56., ...,  58.,  55.,  53.],
          [ 61.,  59.,  60., ...,  77.,  55.,  50.],
          ...,
          [ 85.,  87.,  65., ..., 118., 116.,  94.],
          [ 83.,  89.,  81., ..., 147., 174., 173.],
          [ 56.,  64.,  68., ..., 124., 174., 164.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:19

analyse the exceptions in iter:24
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 73.,  71.,  77., ..., 183., 180., 185.],
          [ 73.,  75.,  78., ..., 181., 172., 174.],
          [ 77.,  94.,  99., ..., 175., 191., 185.],
          ...,
          [ 84.,  86., 118., ...,  79., 159., 117.],
          [ 76.,  81., 103., ...,  56.,  69., 104.],
          [102.,  91.,  95., ..., 100.,  72.,  48.]],

         [[ 77.,  68.,  69., ..., 210., 214., 225.],
          [ 74.,  68.,  64., ..., 229., 220., 218.],
          [ 72.,  82.,  81., ..., 213., 230., 226.],
          ...,
          [106., 105., 133., ...,  95., 177., 133.],
          [ 96.,  98., 116., ...,  80.,  90., 120.],
          [120., 109., 110., ..., 134.,  97.,  59.]],

         [[ 58.,  50.,  44., ..., 149., 143., 144.],
          [ 52.,  55.,  50., ..., 139., 129., 127.],
          [ 64.,  79.,  73., ..., 139., 152., 142.],
          ...,
          [ 56.,  58.,  84., ...,  78., 137.,  94.],
          [ 60.,  56.,  73., ...,  36.,  40.,  69.],
          [ 92.,  62.,  62., ...,  55.,  38.,  29.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:20

analyse the exceptions in iter:25
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[162., 164., 169., ..., 184., 190., 202.],
          [153., 158., 164., ..., 178., 189., 201.],
          [157., 161., 164., ..., 178., 190., 202.],
          ...,
          [214., 213., 213., ..., 240., 241., 242.],
          [218., 209., 208., ..., 232., 236., 239.],
          [216., 207., 201., ..., 231., 233., 235.]],

         [[164., 167., 171., ..., 176., 186., 198.],
          [151., 156., 163., ..., 171., 184., 198.],
          [151., 156., 160., ..., 170., 186., 199.],
          ...,
          [205., 193., 185., ..., 207., 206., 209.],
          [209., 188., 180., ..., 195., 196., 200.],
          [204., 189., 174., ..., 192., 194., 198.]],

         [[130., 128., 131., ..., 137., 146., 161.],
          [119., 120., 124., ..., 131., 143., 158.],
          [120., 121., 122., ..., 131., 142., 156.],
          ...,
          [193., 181., 174., ..., 193., 194., 196.],
          [198., 176., 169., ..., 182., 185., 187.],
          [197., 178., 156., ..., 178., 181., 183.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:21

analyse the exceptions in iter:26
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[131., 124., 116., ..., 184., 185., 184.],
          [127., 124., 116., ..., 177., 180., 186.],
          [123., 121., 113., ..., 179., 187., 194.],
          ...,
          [ 99.,  83.,  54., ..., 138., 155., 165.],
          [ 97.,  77.,  43., ..., 140., 154., 163.],
          [ 96.,  71.,  35., ..., 140., 156., 164.]],

         [[ 81.,  76.,  70., ..., 152., 153., 152.],
          [ 76.,  75.,  69., ..., 142., 146., 152.],
          [ 73.,  73.,  67., ..., 142., 150., 158.],
          ...,
          [ 50.,  42.,  27., ..., 103., 113., 118.],
          [ 50.,  39.,  21., ..., 105., 112., 116.],
          [ 49.,  36.,  16., ..., 104., 114., 118.]],

         [[ 32.,  27.,  20., ..., 114., 117., 120.],
          [ 27.,  26.,  19., ..., 106., 110., 116.],
          [ 23.,  24.,  17., ..., 106., 114., 118.],
          ...,
          [ 10.,   5.,   5., ...,  68.,  72.,  74.],
          [ 10.,   5.,   4., ...,  69.,  71.,  71.],
          [ 10.,   4.,   3., ...,  69.,  73.,  73.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:22

analyse the exceptions in iter:27
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 45.,  42.,  35., ...,  93.,  51.,  39.],
          [ 46.,  42.,  40., ..., 105.,  66.,  48.],
          [ 43.,  40.,  48., ...,  88.,  77.,  58.],
          ...,
          [ 55.,  67.,  73., ...,  93., 101., 103.],
          [ 55.,  62.,  68., ...,  69.,  81.,  99.],
          [ 58.,  59.,  58., ...,  77.,  66.,  83.]],

         [[ 20.,  21.,  17., ...,  86.,  47.,  36.],
          [ 22.,  22.,  22., ...,  93.,  53.,  39.],
          [ 22.,  21.,  32., ...,  74.,  59.,  44.],
          ...,
          [ 54.,  57.,  64., ...,  87., 116., 123.],
          [ 54.,  53.,  59., ...,  62.,  93., 117.],
          [ 53.,  46.,  45., ...,  68.,  75.,  99.]],

         [[ 19.,  18.,  13., ...,  81.,  42.,  32.],
          [ 20.,  18.,  18., ...,  92.,  52.,  36.],
          [ 19.,  17.,  27., ...,  77.,  60.,  43.],
          ...,
          [ 51.,  54.,  57., ...,  49.,  34.,  30.],
          [ 51.,  50.,  52., ...,  38.,  29.,  35.],
          [ 51.,  44.,  40., ...,  53.,  29.,  31.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:23

analyse the exceptions in iter:28
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[128., 121., 138., ..., 130., 101., 122.],
          [133., 125., 136., ..., 131., 106., 127.],
          [141., 126., 141., ..., 132., 114., 126.],
          ...,
          [191., 186., 175., ..., 190., 182., 195.],
          [210., 207., 198., ..., 194., 184., 192.],
          [209., 206., 207., ..., 201., 193., 196.]],

         [[141., 134., 151., ..., 150., 121., 141.],
          [146., 138., 149., ..., 151., 126., 147.],
          [155., 139., 154., ..., 152., 134., 146.],
          ...,
          [178., 174., 160., ..., 179., 175., 188.],
          [195., 197., 179., ..., 179., 178., 186.],
          [194., 195., 189., ..., 187., 187., 190.]],

         [[123., 116., 133., ..., 138., 109., 129.],
          [128., 120., 131., ..., 139., 114., 135.],
          [136., 121., 136., ..., 140., 122., 134.],
          ...,
          [126., 124., 112., ..., 138., 137., 145.],
          [143., 144., 129., ..., 138., 133., 142.],
          [142., 143., 138., ..., 145., 142., 146.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:24

analyse the exceptions in iter:29
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[202., 202., 204., ..., 207., 205., 203.],
          [206., 206., 207., ..., 210., 208., 206.],
          [210., 211., 212., ..., 214., 212., 210.],
          ...,
          [218., 210., 194., ..., 243., 244., 243.],
          [219., 217., 216., ..., 241., 241., 241.],
          [217., 216., 217., ..., 239., 239., 240.]],

         [[204., 204., 206., ..., 208., 206., 204.],
          [208., 208., 209., ..., 211., 209., 207.],
          [212., 213., 214., ..., 214., 213., 211.],
          ...,
          [217., 209., 194., ..., 242., 242., 243.],
          [218., 216., 216., ..., 240., 240., 240.],
          [216., 215., 216., ..., 238., 238., 238.]],

         [[199., 199., 201., ..., 200., 199., 198.],
          [203., 203., 204., ..., 205., 203., 201.],
          [207., 208., 210., ..., 210., 208., 206.],
          ...,
          [222., 214., 198., ..., 247., 247., 247.],
          [223., 221., 220., ..., 245., 245., 245.],
          [221., 220., 221., ..., 243., 243., 243.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:25

analyse the exceptions in iter:31
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[236., 233., 234., ..., 148., 147., 140.],
          [243., 242., 243., ..., 163., 161., 159.],
          [245., 242., 245., ..., 163., 161., 157.],
          ...,
          [ 79.,  70.,  72., ...,  38.,  36.,  33.],
          [ 81.,  78.,  74., ...,  47.,  31.,  24.],
          [ 80.,  80.,  74., ...,  40.,  28.,  22.]],

         [[242., 239., 240., ..., 145., 145., 137.],
          [249., 247., 250., ..., 162., 160., 158.],
          [251., 248., 251., ..., 162., 160., 157.],
          ...,
          [ 74.,  65.,  68., ...,  31.,  29.,  25.],
          [ 79.,  73.,  68., ...,  38.,  24.,  17.],
          [ 80.,  77.,  67., ...,  30.,  21.,  15.]],

         [[238., 235., 236., ..., 140., 139., 131.],
          [245., 244., 246., ..., 162., 160., 158.],
          [247., 244., 247., ..., 166., 164., 161.],
          ...,
          [ 60.,  47.,  45., ...,  25.,  23.,  19.],
          [ 62.,  56.,  49., ...,  29.,  17.,  10.],
          [ 63.,  61.,  52., ...,  20.,  12.,   8.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:26

analyse the exceptions in iter:32
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 50.,  51.,  42., ...,  48.,  18.,  14.],
          [ 86.,  92.,  82., ...,  46.,  17.,  11.],
          [ 43.,  43.,  51., ...,  42.,  10.,   6.],
          ...,
          [220., 209., 199., ..., 177., 176., 175.],
          [188., 182., 182., ..., 176., 175., 174.],
          [188., 184., 186., ..., 176., 176., 173.]],

         [[ 64.,  63.,  55., ...,  45.,  18.,  15.],
          [107., 110.,  99., ...,  43.,  17.,  12.],
          [ 60.,  56.,  65., ...,  39.,  10.,   6.],
          ...,
          [165., 174., 172., ..., 171., 170., 168.],
          [178., 170., 161., ..., 168., 167., 166.],
          [167., 163., 167., ..., 169., 168., 165.]],

         [[ 37.,  41.,  41., ...,  42.,  14.,  12.],
          [ 67.,  76.,  67., ...,  41.,  14.,  10.],
          [ 42.,  41.,  46., ...,  37.,   9.,   5.],
          ...,
          [151., 165., 164., ..., 168., 167., 166.],
          [162., 162., 157., ..., 166., 165., 164.],
          [162., 157., 160., ..., 166., 166., 162.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:27

analyse the exceptions in iter:33
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[  7.,   7.,   5., ...,  82.,  80.,  69.],
          [  6.,   6.,   5., ...,  85.,  86.,  81.],
          [  1.,   7.,   8., ...,  98.,  96.,  86.],
          ...,
          [150., 135., 129., ...,  72.,  45.,  26.],
          [156., 153., 138., ...,  57.,  23.,  38.],
          [183., 191., 182., ...,  83.,  67., 114.]],

         [[  5.,   5.,   4., ...,  84.,  85.,  73.],
          [  4.,   4.,   3., ...,  86.,  88.,  80.],
          [  1.,   7.,   8., ...,  96.,  96.,  84.],
          ...,
          [153., 136., 129., ...,  72.,  51.,  32.],
          [156., 151., 136., ...,  58.,  32.,  45.],
          [193., 199., 189., ...,  83.,  74., 120.]],

         [[  8.,   8.,   6., ...,  78.,  81.,  68.],
          [  8.,   9.,   8., ...,  77.,  81.,  72.],
          [  6.,  12.,  13., ...,  83.,  85.,  73.],
          ...,
          [139., 121., 113., ...,  69.,  63.,  51.],
          [139., 130., 110., ...,  56.,  48.,  64.],
          [183., 185., 171., ...,  76.,  81., 119.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:28

analyse the exceptions in iter:36
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[169., 131., 193., ..., 172., 169., 166.],
          [165., 127., 189., ..., 172., 169., 166.],
          [163., 126., 186., ..., 173., 170., 168.],
          ...,
          [147., 139., 145., ..., 220., 218., 219.],
          [146., 143., 152., ..., 221., 220., 219.],
          [148., 143., 146., ..., 223., 221., 220.]],

         [[122., 108., 196., ..., 187., 183., 181.],
          [119., 104., 192., ..., 186., 183., 180.],
          [117., 103., 189., ..., 187., 184., 182.],
          ...,
          [ 93.,  85.,  91., ..., 220., 218., 219.],
          [ 87.,  83.,  94., ..., 221., 220., 219.],
          [ 87.,  82.,  85., ..., 223., 221., 220.]],

         [[ 65.,  75., 192., ..., 187., 183., 181.],
          [ 62.,  72., 187., ..., 186., 183., 180.],
          [ 60.,  71., 185., ..., 187., 184., 182.],
          ...,
          [ 35.,  39.,  42., ..., 220., 218., 219.],
          [ 31.,  39.,  43., ..., 222., 220., 219.],
          [ 28.,  31.,  30., ..., 223., 221., 220.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:29

analyse the exceptions in iter:37
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 95.,  88.,  86., ..., 101.,  91., 105.],
          [ 82.,  75.,  76., ...,  94.,  51.,  84.],
          [ 77.,  74.,  71., ...,  71.,  47.,  88.],
          ...,
          [ 97.,  92.,  97., ...,  86.,  94.,  90.],
          [ 95.,  84.,  89., ...,  96., 102.,  97.],
          [ 91.,  83.,  82., ..., 100., 105., 108.]],

         [[105.,  97.,  96., ..., 116., 108., 124.],
          [ 90.,  83.,  84., ..., 102.,  61.,  97.],
          [ 85.,  81.,  78., ...,  74.,  52.,  95.],
          ...,
          [ 95.,  92.,  93., ...,  91.,  97.,  97.],
          [ 90.,  86.,  89., ...,  97.,  96.,  94.],
          [ 84.,  81.,  81., ...,  96.,  97., 102.]],

         [[127., 120., 118., ..., 144., 136., 157.],
          [110., 104., 104., ..., 123.,  80., 122.],
          [103.,  98.,  95., ...,  86.,  63., 111.],
          ...,
          [ 72.,  69.,  70., ...,  65.,  72.,  71.],
          [ 65.,  59.,  62., ...,  76.,  77.,  73.],
          [ 63.,  57.,  55., ...,  78.,  80.,  83.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:30

analyse the exceptions in iter:38
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[110., 223., 243., ...,   7.,   0.,   0.],
          [102., 213., 244., ...,  98.,  80.,  31.],
          [ 99., 204., 248., ..., 221., 198.,  89.],
          ...,
          [ 58.,  58.,  51., ...,   8.,   9.,   6.],
          [ 69.,  54.,  49., ...,  48.,  52.,  35.],
          [ 81.,  52.,  50., ...,  15.,  16.,  13.]],

         [[ 90., 197., 215., ...,   2.,   0.,   0.],
          [ 83., 187., 217., ...,  90.,  74.,  27.],
          [ 78., 179., 221., ..., 209., 188.,  81.],
          ...,
          [ 63.,  70.,  69., ...,   8.,  10.,   8.],
          [ 72.,  64.,  65., ...,  44.,  47.,  32.],
          [ 80.,  58.,  63., ...,   5.,   5.,   3.]],

         [[ 84., 185., 201., ...,   3.,   0.,   0.],
          [ 77., 176., 203., ...,  92.,  75.,  28.],
          [ 72., 167., 207., ..., 213., 191.,  83.],
          ...,
          [ 87., 100., 103., ...,  10.,   7.,   5.],
          [ 94.,  92.,  98., ...,  43.,  44.,  30.],
          [100.,  84.,  93., ...,   5.,   5.,   4.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:31

analyse the exceptions in iter:39
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 98., 119., 109., ...,  75.,  60.,  61.],
          [ 44.,  75.,  69., ...,  81.,  55.,  65.],
          [ 73.,  94., 111., ...,  77.,  60.,  58.],
          ...,
          [ 96., 100., 129., ...,  72.,  68.,  85.],
          [124., 114., 110., ...,  84.,  81.,  73.],
          [ 93.,  98.,  95., ...,  73.,  55.,  72.]],

         [[110., 132., 122., ...,  97.,  82.,  84.],
          [ 56.,  86.,  80., ..., 103.,  77.,  87.],
          [ 84., 105., 122., ...,  99.,  82.,  82.],
          ...,
          [ 98., 100., 126., ...,  73.,  71.,  93.],
          [137., 124., 117., ...,  92.,  89.,  81.],
          [110., 112., 106., ...,  82.,  63.,  79.]],

         [[ 96., 117., 107., ...,  76.,  62.,  67.],
          [ 46.,  76.,  70., ...,  82.,  57.,  74.],
          [ 77.,  98., 115., ...,  78.,  61.,  61.],
          ...,
          [ 99., 100., 124., ...,  69.,  67.,  85.],
          [135., 121., 111., ...,  85.,  84.,  74.],
          [107., 107.,  99., ...,  75.,  58.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:32

analyse the exceptions in iter:41
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[145., 145., 148., ..., 237., 230., 224.],
          [147., 150., 168., ..., 231., 221., 214.],
          [145., 150., 178., ..., 229., 230., 232.],
          ...,
          [231., 230., 227., ..., 235., 234., 231.],
          [224., 231., 231., ..., 240., 228., 223.],
          [125., 225., 232., ..., 224., 216., 228.]],

         [[125., 126., 130., ..., 210., 202., 199.],
          [126., 132., 147., ..., 203., 192., 190.],
          [124., 130., 155., ..., 201., 201., 205.],
          ...,
          [202., 202., 198., ..., 209., 207., 203.],
          [199., 200., 202., ..., 213., 201., 199.],
          [120., 200., 204., ..., 197., 189., 203.]],

         [[ 83.,  82.,  82., ..., 170., 161., 158.],
          [ 83.,  84., 107., ..., 163., 151., 149.],
          [ 79.,  84., 110., ..., 161., 160., 166.],
          ...,
          [169., 170., 166., ..., 172., 170., 167.],
          [163., 167., 170., ..., 177., 162., 162.],
          [ 98., 166., 170., ..., 160., 150., 167.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:33

analyse the exceptions in iter:43
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 99.,  98., 100., ..., 129., 132., 130.],
          [100., 100., 102., ..., 122., 135., 132.],
          [104., 104., 106., ..., 165., 149., 140.],
          ...,
          [195., 199., 221., ..., 209., 209., 208.],
          [197., 201., 211., ..., 208., 210., 209.],
          [199., 197., 204., ..., 208., 210., 209.]],

         [[166., 165., 167., ..., 186., 190., 188.],
          [166., 164., 167., ..., 152., 189., 188.],
          [169., 167., 170., ..., 165., 189., 189.],
          ...,
          [173., 177., 194., ..., 191., 190., 188.],
          [173., 178., 184., ..., 190., 191., 191.],
          [173., 172., 174., ..., 189., 191., 190.]],

         [[198., 196., 199., ..., 212., 215., 213.],
          [195., 194., 197., ..., 169., 213., 214.],
          [197., 195., 198., ..., 160., 205., 212.],
          ...,
          [149., 153., 166., ..., 169., 171., 173.],
          [149., 149., 147., ..., 171., 173., 175.],
          [149., 144., 137., ..., 174., 177., 175.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:34

analyse the exceptions in iter:44
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[139., 144., 146., ..., 132., 131., 129.],
          [139., 124., 128., ..., 110., 108., 114.],
          [172., 126., 116., ...,  67.,  68., 113.],
          ...,
          [ 95.,  93.,  91., ...,  81., 104., 107.],
          [132., 124., 119., ..., 114., 131., 132.],
          [110., 124., 129., ..., 129., 128., 112.]],

         [[154., 160., 162., ..., 140., 142., 141.],
          [148., 137., 149., ..., 114., 112., 127.],
          [162., 114., 109., ...,  71.,  68., 119.],
          ...,
          [ 88.,  82.,  84., ...,  94., 103., 102.],
          [109., 105., 104., ..., 104., 112., 110.],
          [108., 116., 116., ..., 117., 114., 105.]],

         [[188., 192., 192., ...,  77.,  76.,  70.],
          [180., 167., 178., ...,  81.,  76.,  68.],
          [172., 121., 129., ...,  50.,  58.,  78.],
          ...,
          [ 44.,  45.,  44., ...,  30.,  51.,  53.],
          [ 74.,  69.,  61., ...,  59.,  74.,  70.],
          [ 52.,  67.,  67., ...,  80.,  75.,  59.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:35

analyse the exceptions in iter:46
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 94.,  72.,  60., ...,  72.,  71.,  77.],
          [ 85.,  67.,  52., ...,  67.,  72.,  77.],
          [ 82.,  54.,  41., ...,  70.,  71.,  78.],
          ...,
          [ 78.,  54.,  37., ...,  51.,  44.,  52.],
          [133., 117.,  98., ...,  62.,  53.,  60.],
          [140., 137., 138., ...,  85.,  79.,  69.]],

         [[ 91.,  71.,  68., ...,  78.,  75.,  82.],
          [ 83.,  66.,  57., ...,  73.,  78.,  85.],
          [ 82.,  53.,  44., ...,  76.,  77.,  85.],
          ...,
          [ 79.,  54.,  37., ...,  49.,  47.,  50.],
          [127., 111.,  92., ...,  58.,  56.,  59.],
          [129., 126., 126., ...,  68.,  71.,  63.]],

         [[ 62.,  42.,  35., ...,  43.,  39.,  41.],
          [ 55.,  38.,  29., ...,  41.,  37.,  39.],
          [ 53.,  24.,  19., ...,  53.,  37.,  39.],
          ...,
          [ 86.,  63.,  46., ...,  28.,  20.,  28.],
          [129., 115.,  98., ...,  35.,  28.,  36.],
          [126., 125., 129., ...,  46.,  46.,  42.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:36

analyse the exceptions in iter:47
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 77.,  76.,  78., ...,  68.,  58.,  48.],
          [ 71.,  67.,  69., ...,  57.,  44.,  36.],
          [ 55.,  52.,  58., ...,  62.,  53.,  48.],
          ...,
          [ 63.,  62.,  67., ...,  63.,  58.,  55.],
          [ 89.,  91.,  89., ...,  65.,  68.,  66.],
          [103., 107.,  92., ...,  69.,  77.,  77.]],

         [[113., 112., 114., ..., 104.,  94.,  84.],
          [107., 102., 105., ...,  93.,  80.,  72.],
          [ 91.,  88.,  94., ...,  98.,  89.,  84.],
          ...,
          [ 97.,  92.,  97., ...,  97.,  92.,  89.],
          [118., 116., 114., ...,  99., 102., 101.],
          [129., 131., 119., ..., 104., 111., 112.]],

         [[137., 136., 139., ..., 128., 118., 108.],
          [131., 126., 130., ..., 116., 104.,  96.],
          [115., 112., 119., ..., 122., 113., 108.],
          ...,
          [119., 115., 121., ..., 123., 118., 115.],
          [136., 135., 136., ..., 122., 125., 124.],
          [144., 147., 138., ..., 127., 134., 135.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:37

analyse the exceptions in iter:48
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[191., 190., 190., ..., 135., 142., 146.],
          [187., 184., 179., ..., 147., 152., 153.],
          [181., 176., 165., ..., 154., 162., 158.],
          ...,
          [220., 221., 222., ..., 211., 214., 224.],
          [212., 220., 225., ..., 216., 216., 221.],
          [201., 212., 217., ..., 220., 217., 217.]],

         [[191., 192., 193., ..., 143., 149., 150.],
          [188., 187., 183., ..., 154., 158., 158.],
          [183., 178., 169., ..., 161., 167., 163.],
          ...,
          [245., 245., 244., ..., 238., 240., 248.],
          [238., 245., 247., ..., 242., 241., 244.],
          [226., 239., 243., ..., 242., 240., 238.]],

         [[168., 172., 174., ..., 123., 126., 127.],
          [165., 166., 163., ..., 134., 135., 134.],
          [160., 157., 148., ..., 140., 143., 139.],
          ...,
          [198., 199., 202., ..., 189., 193., 203.],
          [190., 198., 204., ..., 194., 195., 201.],
          [178., 190., 196., ..., 197., 196., 195.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:38

analyse the exceptions in iter:49
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[255., 255., 255., ..., 255., 255., 255.],
          [255., 252., 255., ..., 254., 254., 254.],
          [255., 252., 255., ..., 254., 254., 254.],
          ...,
          [255., 254., 254., ..., 254., 254., 254.],
          [255., 253., 254., ..., 254., 254., 254.],
          [255., 255., 255., ..., 255., 255., 255.]],

         [[255., 255., 255., ..., 255., 255., 255.],
          [255., 252., 255., ..., 254., 254., 254.],
          [255., 252., 255., ..., 254., 254., 254.],
          ...,
          [255., 254., 254., ..., 254., 254., 254.],
          [255., 253., 254., ..., 254., 254., 254.],
          [255., 255., 255., ..., 255., 255., 255.]],

         [[255., 255., 255., ..., 255., 255., 255.],
          [255., 252., 255., ..., 254., 254., 254.],
          [255., 252., 255., ..., 254., 254., 254.],
          ...,
          [255., 254., 254., ..., 254., 254., 254.],
          [255., 253., 254., ..., 254., 254., 254.],
          [255., 255., 255., ..., 255., 255., 255.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:39

final statics:
total operators:28
tensorflow --> nums:39,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:39
mindspore --> 
torch --> 

generate models:39

analyse the exceptions in iter:51
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[213., 119.,  58., ..., 143., 140., 117.],
          [214., 128.,  62., ..., 138., 136., 111.],
          [215., 139.,  75., ..., 136., 134., 107.],
          ...,
          [118., 122., 129., ..., 158., 151., 145.],
          [111., 117., 128., ..., 153., 147., 141.],
          [110., 116., 127., ..., 141., 136., 139.]],

         [[221., 127.,  71., ..., 158., 142., 101.],
          [223., 137.,  75., ..., 152., 138.,  95.],
          [224., 148.,  88., ..., 151., 136.,  91.],
          ...,
          [ 45.,  45.,  46., ...,  65.,  68.,  67.],
          [ 38.,  42.,  47., ...,  62.,  59.,  63.],
          [ 38.,  40.,  48., ...,  55.,  52.,  58.]],

         [[221., 122.,  81., ..., 150., 136.,  87.],
          [220., 130.,  83., ..., 145., 133.,  82.],
          [219., 139.,  94., ..., 143., 131.,  77.],
          ...,
          [ 37.,  40.,  42., ...,  54.,  55.,  55.],
          [ 32.,  36.,  41., ...,  53.,  49.,  51.],
          [ 32.,  34.,  41., ...,  46.,  43.,  47.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:40

analyse the exceptions in iter:57
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 66.,  71.,  88., ...,  85.,  86.,  79.],
          [ 75.,  79.,  95., ...,  85.,  87.,  78.],
          [ 80.,  84.,  97., ...,  81.,  82.,  74.],
          ...,
          [ 79.,  87.,  60., ...,  35.,  26.,  20.],
          [ 77.,  70.,  37., ...,  79.,  77.,  66.],
          [ 78.,  63.,  31., ..., 140., 135., 128.]],

         [[ 73.,  77.,  86., ...,  80.,  81.,  73.],
          [ 81.,  84.,  92., ...,  79.,  80.,  72.],
          [ 85.,  88.,  93., ...,  75.,  74.,  68.],
          ...,
          [ 74.,  84.,  58., ...,  35.,  26.,  21.],
          [ 74.,  68.,  37., ...,  68.,  66.,  55.],
          [ 74.,  61.,  32., ..., 122., 117., 113.]],

         [[ 33.,  40.,  62., ...,  55.,  62.,  54.],
          [ 40.,  45.,  66., ...,  56.,  62.,  54.],
          [ 44.,  50.,  68., ...,  48.,  53.,  51.],
          ...,
          [ 59.,  69.,  43., ...,  22.,  14.,  10.],
          [ 59.,  53.,  22., ...,  60.,  58.,  50.],
          [ 58.,  44.,  15., ..., 116., 113., 111.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:41

analyse the exceptions in iter:58
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 97.,  96., 108., ..., 130., 117., 115.],
          [111., 104., 111., ..., 138., 128., 124.],
          [135., 132., 128., ..., 136., 130., 121.],
          ...,
          [124., 120., 126., ..., 114., 118., 119.],
          [126., 123., 125., ...,  96., 102., 102.],
          [124., 124., 126., ...,  97.,  96.,  81.]],

         [[ 83.,  84.,  98., ..., 113., 100., 100.],
          [ 97.,  91.,  99., ..., 121., 112., 111.],
          [120., 116., 113., ..., 119., 113., 109.],
          ...,
          [109., 104., 109., ...,  99., 105., 104.],
          [108., 106., 108., ...,  82.,  89.,  88.],
          [106., 107., 109., ...,  83.,  84.,  69.]],

         [[ 41.,  46.,  56., ...,  60.,  48.,  48.],
          [ 49.,  45.,  49., ...,  66.,  57.,  57.],
          [ 68.,  65.,  57., ...,  63.,  58.,  54.],
          ...,
          [ 55.,  51.,  57., ...,  57.,  61.,  55.],
          [ 54.,  52.,  53., ...,  44.,  49.,  46.],
          [ 52.,  53.,  55., ...,  42.,  45.,  36.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:42

analyse the exceptions in iter:59
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[252., 255., 194., ..., 255., 255., 253.],
          [251., 255., 211., ..., 246., 249., 251.],
          [251., 255., 218., ..., 249., 250., 252.],
          ...,
          [ 57.,  30.,  73., ...,  23.,  26., 112.],
          [ 89.,  16.,  26., ...,  21.,  32., 149.],
          [185.,  94.,  54., ...,  60., 129., 221.]],

         [[251., 255., 212., ..., 254., 253., 252.],
          [249., 255., 234., ..., 255., 255., 252.],
          [250., 255., 235., ..., 255., 254., 253.],
          ...,
          [111.,  86.,  88., ...,  60.,  81., 149.],
          [134.,  77.,  74., ...,  75.,  83., 174.],
          [208., 134.,  99., ..., 104., 159., 232.]],

         [[249., 255., 224., ..., 253., 252., 252.],
          [246., 254., 240., ..., 251., 252., 251.],
          [249., 255., 240., ..., 254., 252., 252.],
          ...,
          [159., 138., 110., ..., 100., 139., 186.],
          [177., 144., 136., ..., 140., 145., 198.],
          [229., 182., 159., ..., 159., 197., 240.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:43

analyse the exceptions in iter:60
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[201., 191., 194., ...,  83.,  39.,  36.],
          [ 57.,  62., 134., ...,  79.,  48.,  35.],
          [ 74., 123., 138., ..., 162., 132.,  56.],
          ...,
          [ 67.,  62.,  55., ...,  69.,  72.,  72.],
          [ 73.,  67.,  59., ...,  72.,  72.,  71.],
          [ 74.,  71.,  67., ...,  61.,  58.,  63.]],

         [[209., 204., 207., ...,  88.,  48.,  47.],
          [ 73.,  78., 148., ...,  91.,  59.,  45.],
          [ 99., 142., 153., ..., 175., 139.,  61.],
          ...,
          [ 80.,  72.,  62., ...,  78.,  80.,  82.],
          [ 87.,  77.,  67., ...,  81.,  81.,  81.],
          [ 89.,  84.,  79., ...,  73.,  69.,  75.]],

         [[211., 210., 216., ...,  82.,  33.,  24.],
          [ 79.,  92., 161., ...,  96.,  57.,  32.],
          [110., 165., 169., ..., 186., 145.,  56.],
          ...,
          [ 89.,  82.,  73., ...,  93.,  95.,  98.],
          [ 95.,  87.,  77., ...,  96.,  96.,  96.],
          [100.,  95.,  89., ...,  88.,  85.,  91.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:44

analyse the exceptions in iter:64
tensorflow exception:
{'id': 36, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 65.,  67.,  69., ...,  93., 108., 102.],
          [ 65.,  65.,  69., ..., 104., 122., 132.],
          [ 62.,  63.,  68., ..., 122., 146., 140.],
          ...,
          [ 88.,  90.,  95., ...,  83.,  89.,  92.],
          [ 90.,  94.,  98., ...,  75.,  78.,  85.],
          [ 95., 102., 104., ...,  74.,  79.,  84.]],

         [[ 29.,  32.,  35., ...,  73.,  87.,  81.],
          [ 29.,  30.,  34., ...,  83.,  97., 106.],
          [ 27.,  28.,  32., ...,  99., 118., 114.],
          ...,
          [ 76.,  79.,  85., ...,  85.,  93.,  97.],
          [ 79.,  83.,  87., ...,  66.,  74.,  86.],
          [ 84.,  90.,  94., ...,  62.,  70.,  78.]],

         [[ 29.,  30.,  33., ...,  70.,  82.,  74.],
          [ 29.,  28.,  32., ...,  78.,  90.,  98.],
          [ 25.,  24.,  30., ...,  93., 110., 104.],
          ...,
          [ 84.,  86.,  92., ...,  99., 108., 111.],
          [ 85.,  90.,  95., ...,  71.,  83.,  97.],
          [ 92.,  98., 102., ...,  62.,  73.,  83.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:45

analyse the exceptions in iter:0
tensorflow exception:
{'id': 37, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 37, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:2

analyse the exceptions in iter:2
tensorflow exception:
{'id': 37, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [113., 111., 105., ...,  72.,  72.,  72.],
          [111., 104.,  99., ...,  68.,  70.,  78.],
          [106.,  99.,  95., ...,  78.,  79.,  80.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [120., 118., 112., ...,  81.,  80.,  80.],
          [118., 111., 106., ...,  75.,  76.,  84.],
          [113., 106., 102., ...,  85.,  85.,  86.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [112., 111., 106., ...,  80.,  79.,  79.],
          [110., 104.,  98., ...,  73.,  75.,  82.],
          [105.,  98.,  94., ...,  83.,  83.,  84.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:3

analyse the exceptions in iter:3
tensorflow exception:
{'id': 37, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  37.,  38., ...,  76.,  81.,  85.],
          [ 33.,  34.,  32., ...,  95.,  96.,  85.],
          [ 39.,  40.,  57., ...,  93., 107.,  95.],
          ...,
          [ 83.,  87.,  84., ...,  99.,  90.,  81.],
          [ 88.,  90.,  93., ...,  80.,  76.,  82.],
          [ 97.,  94.,  93., ...,  54.,  63.,  72.]],

         [[ 25.,  34.,  35., ...,  67.,  72.,  76.],
          [ 28.,  30.,  27., ...,  82.,  82.,  72.],
          [ 32.,  33.,  50., ...,  76.,  89.,  77.],
          ...,
          [ 73.,  77.,  74., ...,  93.,  84.,  75.],
          [ 72.,  74.,  77., ...,  74.,  70.,  76.],
          [ 78.,  75.,  75., ...,  47.,  56.,  65.]],

         [[ 10.,  19.,  20., ...,  39.,  43.,  47.],
          [ 13.,  14.,  12., ...,  55.,  56.,  45.],
          [ 15.,  17.,  33., ...,  52.,  66.,  54.],
          ...,
          [ 52.,  56.,  52., ...,  70.,  61.,  52.],
          [ 51.,  52.,  56., ...,  53.,  49.,  55.],
          [ 56.,  53.,  53., ...,  28.,  37.,  46.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:4

analyse the exceptions in iter:5
tensorflow exception:
{'id': 37, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[159., 150., 153., ...,  91.,  74.,  76.],
          [142., 146., 155., ..., 127., 122.,  86.],
          [109.,  99., 105., ..., 137., 163.,  93.],
          ...,
          [244., 240., 241., ..., 156., 179., 200.],
          [246., 243., 243., ..., 162., 178., 192.],
          [246., 243., 244., ..., 166., 173., 182.]],

         [[102.,  91.,  95., ...,  71.,  63.,  58.],
          [ 75.,  72.,  76., ..., 105., 111.,  69.],
          [ 67.,  58.,  59., ..., 112., 132.,  72.],
          ...,
          [129., 123., 122., ...,  42.,  59.,  73.],
          [133., 128., 127., ...,  44.,  56.,  65.],
          [139., 133., 132., ...,  47.,  51.,  57.]],

         [[101.,  95.,  97., ...,  56.,  55.,  55.],
          [ 68.,  66.,  65., ...,  71.,  93.,  61.],
          [ 75.,  60.,  52., ...,  80., 105.,  71.],
          ...,
          [ 70.,  65.,  65., ...,  15.,  26.,  36.],
          [ 74.,  72.,  70., ...,  14.,  22.,  27.],
          [ 82.,  78.,  77., ...,  14.,  17.,  19.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:5

analyse the exceptions in iter:6
tensorflow exception:
{'id': 37, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[164., 105., 118., ..., 109., 108.,  91.],
          [167., 116.,  72., ..., 105., 105.,  89.],
          [140., 142., 119., ..., 104.,  84.,  78.],
          ...,
          [139., 142., 135., ...,  89.,  97., 126.],
          [163., 153., 146., ...,  85.,  98., 127.],
          [183., 176., 154., ...,  94.,  91., 122.]],

         [[206., 140., 148., ..., 147., 147., 129.],
          [213., 160., 109., ..., 142., 142., 127.],
          [191., 193., 163., ..., 139., 120., 115.],
          ...,
          [148., 155., 156., ..., 134., 148., 176.],
          [157., 164., 164., ..., 130., 148., 178.],
          [153., 182., 154., ..., 134., 133., 170.]],

         [[ 84.,  61., 101., ...,  73.,  69.,  57.],
          [ 84.,  49.,  43., ...,  79.,  72.,  57.],
          [ 65.,  66.,  79., ...,  84.,  58.,  49.],
          ...,
          [ 81.,  74.,  72., ...,  28.,  24.,  49.],
          [ 85.,  82.,  90., ...,  19.,  27.,  48.],
          [102., 116., 100., ...,  29.,  26.,  44.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:6

analyse the exceptions in iter:7
tensorflow exception:
{'id': 37, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  30.,  33., ...,  43.,  52.,  46.],
          [ 27.,  27.,  21., ..., 112., 117., 115.],
          [ 34.,  33.,  24., ..., 175., 177., 176.],
          ...,
          [142., 142., 150., ..., 134., 128., 134.],
          [140., 145., 150., ..., 131., 130., 122.],
          [134., 136., 136., ..., 106., 104., 101.]],

         [[ 35.,  34.,  44., ...,  56.,  64.,  58.],
          [ 30.,  28.,  31., ..., 136., 140., 138.],
          [ 36.,  33.,  30., ..., 208., 209., 208.],
          ...,
          [176., 176., 184., ..., 175., 168., 175.],
          [176., 180., 186., ..., 170., 170., 162.],
          [171., 171., 171., ..., 144., 142., 140.]],

         [[ 39.,  44.,  47., ...,  45.,  53.,  47.],
          [ 38.,  41.,  39., ...,  97., 101., 100.],
          [ 42.,  43.,  40., ..., 143., 144., 143.],
          ...,
          [118., 118., 127., ..., 119., 112., 119.],
          [124., 129., 134., ..., 119., 119., 111.],
          [123., 124., 124., ..., 100.,  99.,  96.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:7

analyse the exceptions in iter:8
tensorflow exception:
{'id': 37, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[134., 131., 128., ..., 127., 127., 128.],
          [133., 129., 128., ..., 127., 127., 128.],
          [128., 127., 128., ..., 126., 126., 126.],
          ...,
          [174., 171., 155., ...,  27.,  29.,  28.],
          [194., 189., 159., ...,  30.,  30.,  30.],
          [193., 181., 168., ...,  31.,  32.,  32.]],

         [[186., 184., 182., ..., 181., 181., 182.],
          [189., 186., 186., ..., 183., 183., 184.],
          [185., 182., 182., ..., 181., 181., 180.],
          ...,
          [208., 206., 189., ...,  94.,  96.,  94.],
          [221., 215., 196., ...,  95.,  96.,  95.],
          [217., 208., 201., ...,  94.,  94.,  94.]],

         [[223., 220., 218., ..., 222., 222., 223.],
          [228., 224., 224., ..., 224., 224., 225.],
          [226., 223., 223., ..., 222., 222., 221.],
          ...,
          [235., 229., 216., ..., 136., 137., 136.],
          [244., 239., 225., ..., 138., 139., 140.],
          [237., 230., 227., ..., 136., 137., 138.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:8

analyse the exceptions in iter:9
tensorflow exception:
{'id': 37, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[125., 110., 102., ..., 202., 200., 202.],
          [142., 146., 176., ..., 195., 198., 204.],
          [180., 143., 156., ..., 122., 139., 158.],
          ...,
          [104., 101., 101., ..., 126., 126., 125.],
          [104., 105., 109., ..., 138., 137., 137.],
          [105., 108., 115., ..., 143., 143., 144.]],

         [[125., 101.,  90., ..., 207., 205., 208.],
          [146., 144., 172., ..., 201., 205., 211.],
          [185., 146., 157., ..., 111., 128., 147.],
          ...,
          [ 82.,  80.,  81., ..., 103., 103., 101.],
          [ 81.,  84.,  88., ..., 113., 113., 112.],
          [ 83.,  87.,  94., ..., 117., 116., 116.]],

         [[116.,  91.,  83., ..., 214., 212., 214.],
          [142., 139., 170., ..., 205., 209., 215.],
          [183., 146., 157., ..., 113., 131., 150.],
          ...,
          [ 41.,  39.,  38., ...,  67.,  69.,  68.],
          [ 40.,  41.,  43., ...,  78.,  80.,  81.],
          [ 42.,  45.,  50., ...,  82.,  84.,  86.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:9

final statics:
total operators:28
tensorflow --> nums:9,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:9
mindspore --> 
torch --> 

generate models:9

analyse the exceptions in iter:11
tensorflow exception:
{'id': 37, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[142., 172., 176., ..., 216., 198., 205.],
          [191., 196., 174., ..., 229., 222., 217.],
          [220., 217., 192., ..., 224., 225., 218.],
          ...,
          [197., 196., 201., ..., 200., 199., 205.],
          [196., 191., 193., ..., 198., 199., 201.],
          [186., 182., 174., ..., 158., 158., 163.]],

         [[149., 172., 168., ..., 212., 194., 202.],
          [190., 192., 166., ..., 222., 215., 210.],
          [212., 209., 183., ..., 214., 214., 208.],
          ...,
          [152., 152., 156., ..., 165., 165., 164.],
          [157., 152., 154., ..., 164., 165., 161.],
          [150., 147., 139., ..., 124., 125., 125.]],

         [[152., 167., 154., ..., 211., 193., 200.],
          [192., 190., 159., ..., 220., 213., 207.],
          [212., 208., 182., ..., 209., 210., 203.],
          ...,
          [136., 135., 140., ..., 146., 146., 150.],
          [139., 135., 136., ..., 144., 145., 146.],
          [133., 130., 121., ..., 105., 106., 111.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:10

analyse the exceptions in iter:12
tensorflow exception:
{'id': 37, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[164., 162., 162., ..., 157., 153., 153.],
          [168., 166., 166., ..., 164., 160., 158.],
          [172., 170., 171., ..., 168., 165., 163.],
          ...,
          [123., 117., 112., ..., 117.,  95., 120.],
          [120., 116., 112., ..., 126., 120., 120.],
          [121., 120., 116., ..., 124., 124., 120.]],

         [[215., 212., 212., ..., 210., 208., 203.],
          [218., 215., 215., ..., 212., 209., 205.],
          [220., 217., 218., ..., 212., 208., 207.],
          ...,
          [160., 154., 149., ..., 136., 115., 149.],
          [156., 151., 147., ..., 149., 144., 152.],
          [154., 152., 148., ..., 152., 154., 154.]],

         [[244., 240., 240., ..., 237., 235., 234.],
          [245., 242., 242., ..., 238., 236., 235.],
          [246., 243., 244., ..., 238., 235., 236.],
          ...,
          [105., 102.,  99., ..., 100.,  79., 100.],
          [100.,  99.,  96., ..., 110., 103., 101.],
          [ 96.,  99.,  97., ..., 108., 107., 100.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:11

analyse the exceptions in iter:13
tensorflow exception:
{'id': 37, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 17.,  17.,  17., ...,  23.,  22.,  19.],
          [ 18.,  18.,  18., ...,  24.,  23.,  22.],
          [ 18.,  18.,  19., ...,  24.,  23.,  23.],
          ...,
          [217., 226., 210., ...,  33.,  32.,  33.],
          [219., 222., 214., ...,  35.,  34.,  33.],
          [210., 221., 215., ...,  36.,  34.,  32.]],

         [[  3.,   3.,   2., ...,  13.,  12.,   9.],
          [  4.,   4.,   4., ...,  14.,  13.,  12.],
          [  4.,   4.,   5., ...,  14.,  13.,  13.],
          ...,
          [214., 219., 201., ...,  24.,  23.,  24.],
          [215., 215., 208., ...,  26.,  25.,  24.],
          [208., 216., 212., ...,  27.,  25.,  23.]],

         [[  2.,   2.,   1., ...,  11.,  10.,   7.],
          [  3.,   3.,   3., ...,  12.,  11.,  10.],
          [  3.,   3.,   4., ...,  12.,  11.,  11.],
          ...,
          [223., 227., 213., ...,  17.,  16.,  17.],
          [230., 229., 225., ...,  19.,  18.,  17.],
          [223., 229., 227., ...,  20.,  18.,  16.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:12

analyse the exceptions in iter:14
tensorflow exception:
{'id': 37, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[100.,  98.,  99., ..., 165., 163., 165.],
          [101., 100., 100., ..., 164., 163., 159.],
          [105., 104., 104., ..., 156., 136., 114.],
          ...,
          [166., 166., 168., ..., 137., 137., 147.],
          [161., 162., 167., ..., 131., 138., 137.],
          [164., 162., 164., ..., 153., 157., 156.]],

         [[146., 144., 144., ..., 165., 163., 165.],
          [145., 143., 143., ..., 161., 162., 161.],
          [147., 145., 145., ..., 150., 133., 117.],
          ...,
          [156., 156., 157., ..., 127., 126., 136.],
          [152., 153., 158., ..., 125., 133., 132.],
          [158., 156., 158., ..., 146., 151., 150.]],

         [[192., 189., 189., ..., 165., 163., 165.],
          [188., 186., 186., ..., 159., 159., 157.],
          [189., 186., 187., ..., 147., 129., 111.],
          ...,
          [150., 151., 152., ..., 112., 114., 127.],
          [149., 150., 155., ..., 117., 124., 120.],
          [155., 153., 155., ..., 139., 141., 137.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:13

analyse the exceptions in iter:17
tensorflow exception:
{'id': 37, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[110., 142., 151., ...,  39.,  40.,  38.],
          [109., 141., 152., ...,  36.,  40.,  36.],
          [105., 142., 151., ...,  39.,  44.,  39.],
          ...,
          [ 62.,  39.,  60., ...,  42.,  46.,  47.],
          [ 62.,  52.,  58., ...,  43.,  47.,  49.],
          [ 55.,  60.,  56., ...,  45.,  47.,  51.]],

         [[104., 135., 146., ...,  39.,  40.,  38.],
          [103., 133., 147., ...,  36.,  40.,  36.],
          [ 98., 133., 145., ...,  39.,  44.,  39.],
          ...,
          [ 59.,  38.,  64., ...,  44.,  44.,  44.],
          [ 57.,  51.,  61., ...,  46.,  45.,  46.],
          [ 51.,  60.,  60., ...,  48.,  46.,  48.]],

         [[ 97., 118., 120., ...,  39.,  40.,  38.],
          [ 95., 115., 119., ...,  37.,  40.,  36.],
          [ 90., 114., 117., ...,  41.,  45.,  40.],
          ...,
          [ 60.,  49.,  81., ...,  56.,  55.,  55.],
          [ 56.,  61.,  78., ...,  58.,  58.,  60.],
          [ 50.,  71.,  78., ...,  60.,  60.,  62.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:14

analyse the exceptions in iter:18
tensorflow exception:
{'id': 37, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[197., 198., 201., ..., 217., 217., 217.],
          [193., 195., 198., ..., 216., 215., 214.],
          [192., 194., 197., ..., 217., 216., 215.],
          ...,
          [156., 156., 156., ...,  98., 117., 128.],
          [158., 159., 154., ..., 131., 117.,  91.],
          [152., 151., 145., ...,  91.,  90.,  79.]],

         [[187., 188., 191., ..., 201., 201., 201.],
          [183., 185., 188., ..., 200., 200., 198.],
          [182., 184., 187., ..., 201., 200., 199.],
          ...,
          [146., 146., 146., ...,  79.,  96., 105.],
          [148., 149., 144., ..., 110.,  99.,  75.],
          [142., 141., 135., ...,  72.,  73.,  65.]],

         [[188., 189., 192., ..., 204., 204., 204.],
          [184., 186., 189., ..., 203., 202., 201.],
          [183., 185., 188., ..., 204., 203., 202.],
          ...,
          [147., 147., 147., ...,  65.,  82.,  89.],
          [149., 150., 145., ...,  96.,  86.,  64.],
          [143., 142., 136., ...,  61.,  63.,  57.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:15

analyse the exceptions in iter:19
tensorflow exception:
{'id': 37, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 23.,  47.,  52., ..., 131., 182., 215.],
          [ 32.,  51.,  56., ..., 149., 204., 209.],
          [ 41.,  59.,  60., ..., 138., 196., 203.],
          ...,
          [167., 177., 182., ..., 199., 176., 145.],
          [166., 165., 165., ..., 183., 183., 189.],
          [175., 173., 173., ..., 190., 188., 192.]],

         [[ 27.,  49.,  46., ..., 130., 180., 212.],
          [ 31.,  49.,  49., ..., 148., 206., 217.],
          [ 37.,  57.,  59., ..., 138., 200., 217.],
          ...,
          [167., 177., 182., ..., 192., 171., 140.],
          [166., 165., 165., ..., 181., 182., 187.],
          [175., 173., 173., ..., 187., 186., 189.]],

         [[ 22.,  41.,  30., ..., 117., 174., 230.],
          [ 24.,  38.,  34., ..., 133., 197., 232.],
          [ 25.,  47.,  51., ..., 125., 194., 233.],
          ...,
          [168., 177., 182., ..., 192., 171., 140.],
          [166., 165., 165., ..., 181., 182., 188.],
          [175., 173., 173., ..., 184., 183., 186.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:16

analyse the exceptions in iter:21
tensorflow exception:
{'id': 37, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[252., 249., 250., ..., 251., 251., 251.],
          [255., 252., 253., ..., 255., 255., 254.],
          [253., 250., 250., ..., 254., 254., 252.],
          ...,
          [254., 252., 253., ..., 252., 253., 252.],
          [250., 252., 255., ..., 254., 255., 254.],
          [236., 249., 250., ..., 250., 250., 251.]],

         [[  8.,  15.,   8., ...,   1.,   0.,   1.],
          [  7.,  15.,  13., ...,   1.,   0.,   4.],
          [  6.,  16.,  24., ...,   1.,   0.,   9.],
          ...,
          [ 66.,  62.,  64., ...,  70.,  69.,  70.],
          [ 49.,  53.,  59., ...,  70.,  68.,  59.],
          [ 37.,  48.,  42., ...,  78.,  74.,  58.]],

         [[ 42.,  42.,  39., ...,  11.,  15.,  30.],
          [ 43.,  44.,  42., ...,  11.,  18.,  33.],
          [ 42.,  42.,  43., ...,  10.,  20.,  37.],
          ...,
          [ 94.,  92.,  93., ..., 101., 103., 104.],
          [ 81.,  82.,  86., ..., 103., 100.,  89.],
          [ 68.,  76.,  73., ..., 113., 109.,  88.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:17

analyse the exceptions in iter:22
tensorflow exception:
{'id': 37, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 86.,  96., 115., ...,  84.,  95.,  79.],
          [125.,  99.,  71., ...,  78.,  88.,  93.],
          [112.,  87.,  58., ...,  89.,  88.,  85.],
          ...,
          [ 66.,  56.,  46., ...,  70.,  61.,  47.],
          [108.,  96.,  86., ...,  57.,  57.,  46.],
          [130., 120.,  98., ...,  44.,  44.,  45.]],

         [[ 74.,  83., 109., ...,  72.,  84.,  68.],
          [110.,  83.,  61., ...,  74.,  82.,  82.],
          [ 95.,  69.,  45., ...,  88.,  84.,  77.],
          ...,
          [ 61.,  53.,  46., ...,  79.,  74.,  57.],
          [100.,  91.,  82., ...,  60.,  65.,  51.],
          [117., 110.,  90., ...,  43.,  46.,  45.]],

         [[ 62.,  65.,  83., ...,  50.,  61.,  45.],
          [104.,  74.,  46., ...,  44.,  51.,  53.],
          [ 89.,  62.,  35., ...,  54.,  50.,  45.],
          ...,
          [ 39.,  33.,  28., ...,  46.,  42.,  31.],
          [ 73.,  66.,  59., ...,  38.,  41.,  31.],
          [ 91.,  86.,  67., ...,  30.,  32.,  32.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:18

analyse the exceptions in iter:23
tensorflow exception:
{'id': 37, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[126., 102., 117., ...,  96., 113., 107.],
          [135., 113., 121., ..., 115., 114., 115.],
          [126., 124., 128., ..., 134., 115., 114.],
          ...,
          [141., 155., 134., ..., 149., 147., 122.],
          [153., 164., 146., ..., 163., 189., 184.],
          [125., 129., 124., ..., 133., 180., 168.]],

         [[100.,  76.,  93., ...,  74.,  90.,  84.],
          [109.,  86.,  94., ...,  89.,  89.,  90.],
          [102.,  97., 101., ..., 109.,  90.,  90.],
          ...,
          [111., 123., 102., ..., 140., 133., 106.],
          [122., 132., 119., ..., 156., 178., 174.],
          [100., 106., 102., ..., 127., 173., 162.]],

         [[ 71.,  49.,  60., ...,  42.,  58.,  52.],
          [ 73.,  52.,  56., ...,  58.,  55.,  53.],
          [ 61.,  59.,  60., ...,  77.,  55.,  50.],
          ...,
          [ 85.,  87.,  65., ..., 118., 116.,  94.],
          [ 83.,  89.,  81., ..., 147., 174., 173.],
          [ 56.,  64.,  68., ..., 124., 174., 164.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:19

analyse the exceptions in iter:24
tensorflow exception:
{'id': 37, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 73.,  71.,  77., ..., 183., 180., 185.],
          [ 73.,  75.,  78., ..., 181., 172., 174.],
          [ 77.,  94.,  99., ..., 175., 191., 185.],
          ...,
          [ 84.,  86., 118., ...,  79., 159., 117.],
          [ 76.,  81., 103., ...,  56.,  69., 104.],
          [102.,  91.,  95., ..., 100.,  72.,  48.]],

         [[ 77.,  68.,  69., ..., 210., 214., 225.],
          [ 74.,  68.,  64., ..., 229., 220., 218.],
          [ 72.,  82.,  81., ..., 213., 230., 226.],
          ...,
          [106., 105., 133., ...,  95., 177., 133.],
          [ 96.,  98., 116., ...,  80.,  90., 120.],
          [120., 109., 110., ..., 134.,  97.,  59.]],

         [[ 58.,  50.,  44., ..., 149., 143., 144.],
          [ 52.,  55.,  50., ..., 139., 129., 127.],
          [ 64.,  79.,  73., ..., 139., 152., 142.],
          ...,
          [ 56.,  58.,  84., ...,  78., 137.,  94.],
          [ 60.,  56.,  73., ...,  36.,  40.,  69.],
          [ 92.,  62.,  62., ...,  55.,  38.,  29.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:20

analyse the exceptions in iter:26
tensorflow exception:
{'id': 37, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[131., 124., 116., ..., 184., 185., 184.],
          [127., 124., 116., ..., 177., 180., 186.],
          [123., 121., 113., ..., 179., 187., 194.],
          ...,
          [ 99.,  83.,  54., ..., 138., 155., 165.],
          [ 97.,  77.,  43., ..., 140., 154., 163.],
          [ 96.,  71.,  35., ..., 140., 156., 164.]],

         [[ 81.,  76.,  70., ..., 152., 153., 152.],
          [ 76.,  75.,  69., ..., 142., 146., 152.],
          [ 73.,  73.,  67., ..., 142., 150., 158.],
          ...,
          [ 50.,  42.,  27., ..., 103., 113., 118.],
          [ 50.,  39.,  21., ..., 105., 112., 116.],
          [ 49.,  36.,  16., ..., 104., 114., 118.]],

         [[ 32.,  27.,  20., ..., 114., 117., 120.],
          [ 27.,  26.,  19., ..., 106., 110., 116.],
          [ 23.,  24.,  17., ..., 106., 114., 118.],
          ...,
          [ 10.,   5.,   5., ...,  68.,  72.,  74.],
          [ 10.,   5.,   4., ...,  69.,  71.,  71.],
          [ 10.,   4.,   3., ...,  69.,  73.,  73.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:21

analyse the exceptions in iter:0
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:2

analyse the exceptions in iter:2
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [113., 111., 105., ...,  72.,  72.,  72.],
          [111., 104.,  99., ...,  68.,  70.,  78.],
          [106.,  99.,  95., ...,  78.,  79.,  80.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [120., 118., 112., ...,  81.,  80.,  80.],
          [118., 111., 106., ...,  75.,  76.,  84.],
          [113., 106., 102., ...,  85.,  85.,  86.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [112., 111., 106., ...,  80.,  79.,  79.],
          [110., 104.,  98., ...,  73.,  75.,  82.],
          [105.,  98.,  94., ...,  83.,  83.,  84.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:3

analyse the exceptions in iter:3
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  37.,  38., ...,  76.,  81.,  85.],
          [ 33.,  34.,  32., ...,  95.,  96.,  85.],
          [ 39.,  40.,  57., ...,  93., 107.,  95.],
          ...,
          [ 83.,  87.,  84., ...,  99.,  90.,  81.],
          [ 88.,  90.,  93., ...,  80.,  76.,  82.],
          [ 97.,  94.,  93., ...,  54.,  63.,  72.]],

         [[ 25.,  34.,  35., ...,  67.,  72.,  76.],
          [ 28.,  30.,  27., ...,  82.,  82.,  72.],
          [ 32.,  33.,  50., ...,  76.,  89.,  77.],
          ...,
          [ 73.,  77.,  74., ...,  93.,  84.,  75.],
          [ 72.,  74.,  77., ...,  74.,  70.,  76.],
          [ 78.,  75.,  75., ...,  47.,  56.,  65.]],

         [[ 10.,  19.,  20., ...,  39.,  43.,  47.],
          [ 13.,  14.,  12., ...,  55.,  56.,  45.],
          [ 15.,  17.,  33., ...,  52.,  66.,  54.],
          ...,
          [ 52.,  56.,  52., ...,  70.,  61.,  52.],
          [ 51.,  52.,  56., ...,  53.,  49.,  55.],
          [ 56.,  53.,  53., ...,  28.,  37.,  46.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:4

analyse the exceptions in iter:4
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[170., 168., 177., ..., 162., 158., 157.],
          [168., 172., 171., ..., 159., 156., 154.],
          [154., 149., 129., ..., 161., 157., 154.],
          ...,
          [ 74.,  76.,  78., ...,  71.,  68.,  61.],
          [ 68.,  69.,  72., ...,  76.,  71.,  71.],
          [ 67.,  68.,  69., ...,  75.,  71.,  73.]],

         [[180., 178., 185., ..., 179., 178., 177.],
          [181., 185., 183., ..., 177., 176., 174.],
          [170., 165., 144., ..., 178., 177., 174.],
          ...,
          [ 84.,  85.,  85., ...,  75.,  72.,  65.],
          [ 76.,  77.,  79., ...,  80.,  75.,  75.],
          [ 75.,  76.,  75., ...,  79.,  75.,  77.]],

         [[198., 196., 203., ..., 215., 214., 212.],
          [198., 201., 200., ..., 212., 211., 209.],
          [186., 181., 162., ..., 214., 212., 209.],
          ...,
          [ 80.,  81.,  82., ...,  78.,  75.,  68.],
          [ 77.,  78.,  78., ...,  83.,  78.,  78.],
          [ 78.,  79.,  76., ...,  82.,  78.,  80.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:5

analyse the exceptions in iter:5
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[159., 150., 153., ...,  91.,  74.,  76.],
          [142., 146., 155., ..., 127., 122.,  86.],
          [109.,  99., 105., ..., 137., 163.,  93.],
          ...,
          [244., 240., 241., ..., 156., 179., 200.],
          [246., 243., 243., ..., 162., 178., 192.],
          [246., 243., 244., ..., 166., 173., 182.]],

         [[102.,  91.,  95., ...,  71.,  63.,  58.],
          [ 75.,  72.,  76., ..., 105., 111.,  69.],
          [ 67.,  58.,  59., ..., 112., 132.,  72.],
          ...,
          [129., 123., 122., ...,  42.,  59.,  73.],
          [133., 128., 127., ...,  44.,  56.,  65.],
          [139., 133., 132., ...,  47.,  51.,  57.]],

         [[101.,  95.,  97., ...,  56.,  55.,  55.],
          [ 68.,  66.,  65., ...,  71.,  93.,  61.],
          [ 75.,  60.,  52., ...,  80., 105.,  71.],
          ...,
          [ 70.,  65.,  65., ...,  15.,  26.,  36.],
          [ 74.,  72.,  70., ...,  14.,  22.,  27.],
          [ 82.,  78.,  77., ...,  14.,  17.,  19.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:6

analyse the exceptions in iter:6
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[164., 105., 118., ..., 109., 108.,  91.],
          [167., 116.,  72., ..., 105., 105.,  89.],
          [140., 142., 119., ..., 104.,  84.,  78.],
          ...,
          [139., 142., 135., ...,  89.,  97., 126.],
          [163., 153., 146., ...,  85.,  98., 127.],
          [183., 176., 154., ...,  94.,  91., 122.]],

         [[206., 140., 148., ..., 147., 147., 129.],
          [213., 160., 109., ..., 142., 142., 127.],
          [191., 193., 163., ..., 139., 120., 115.],
          ...,
          [148., 155., 156., ..., 134., 148., 176.],
          [157., 164., 164., ..., 130., 148., 178.],
          [153., 182., 154., ..., 134., 133., 170.]],

         [[ 84.,  61., 101., ...,  73.,  69.,  57.],
          [ 84.,  49.,  43., ...,  79.,  72.,  57.],
          [ 65.,  66.,  79., ...,  84.,  58.,  49.],
          ...,
          [ 81.,  74.,  72., ...,  28.,  24.,  49.],
          [ 85.,  82.,  90., ...,  19.,  27.,  48.],
          [102., 116., 100., ...,  29.,  26.,  44.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:7

analyse the exceptions in iter:7
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  30.,  33., ...,  43.,  52.,  46.],
          [ 27.,  27.,  21., ..., 112., 117., 115.],
          [ 34.,  33.,  24., ..., 175., 177., 176.],
          ...,
          [142., 142., 150., ..., 134., 128., 134.],
          [140., 145., 150., ..., 131., 130., 122.],
          [134., 136., 136., ..., 106., 104., 101.]],

         [[ 35.,  34.,  44., ...,  56.,  64.,  58.],
          [ 30.,  28.,  31., ..., 136., 140., 138.],
          [ 36.,  33.,  30., ..., 208., 209., 208.],
          ...,
          [176., 176., 184., ..., 175., 168., 175.],
          [176., 180., 186., ..., 170., 170., 162.],
          [171., 171., 171., ..., 144., 142., 140.]],

         [[ 39.,  44.,  47., ...,  45.,  53.,  47.],
          [ 38.,  41.,  39., ...,  97., 101., 100.],
          [ 42.,  43.,  40., ..., 143., 144., 143.],
          ...,
          [118., 118., 127., ..., 119., 112., 119.],
          [124., 129., 134., ..., 119., 119., 111.],
          [123., 124., 124., ..., 100.,  99.,  96.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:8

analyse the exceptions in iter:8
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[134., 131., 128., ..., 127., 127., 128.],
          [133., 129., 128., ..., 127., 127., 128.],
          [128., 127., 128., ..., 126., 126., 126.],
          ...,
          [174., 171., 155., ...,  27.,  29.,  28.],
          [194., 189., 159., ...,  30.,  30.,  30.],
          [193., 181., 168., ...,  31.,  32.,  32.]],

         [[186., 184., 182., ..., 181., 181., 182.],
          [189., 186., 186., ..., 183., 183., 184.],
          [185., 182., 182., ..., 181., 181., 180.],
          ...,
          [208., 206., 189., ...,  94.,  96.,  94.],
          [221., 215., 196., ...,  95.,  96.,  95.],
          [217., 208., 201., ...,  94.,  94.,  94.]],

         [[223., 220., 218., ..., 222., 222., 223.],
          [228., 224., 224., ..., 224., 224., 225.],
          [226., 223., 223., ..., 222., 222., 221.],
          ...,
          [235., 229., 216., ..., 136., 137., 136.],
          [244., 239., 225., ..., 138., 139., 140.],
          [237., 230., 227., ..., 136., 137., 138.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:9

analyse the exceptions in iter:9
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[125., 110., 102., ..., 202., 200., 202.],
          [142., 146., 176., ..., 195., 198., 204.],
          [180., 143., 156., ..., 122., 139., 158.],
          ...,
          [104., 101., 101., ..., 126., 126., 125.],
          [104., 105., 109., ..., 138., 137., 137.],
          [105., 108., 115., ..., 143., 143., 144.]],

         [[125., 101.,  90., ..., 207., 205., 208.],
          [146., 144., 172., ..., 201., 205., 211.],
          [185., 146., 157., ..., 111., 128., 147.],
          ...,
          [ 82.,  80.,  81., ..., 103., 103., 101.],
          [ 81.,  84.,  88., ..., 113., 113., 112.],
          [ 83.,  87.,  94., ..., 117., 116., 116.]],

         [[116.,  91.,  83., ..., 214., 212., 214.],
          [142., 139., 170., ..., 205., 209., 215.],
          [183., 146., 157., ..., 113., 131., 150.],
          ...,
          [ 41.,  39.,  38., ...,  67.,  69.,  68.],
          [ 40.,  41.,  43., ...,  78.,  80.,  81.],
          [ 42.,  45.,  50., ...,  82.,  84.,  86.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:10

final statics:
total operators:28
tensorflow --> nums:10,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:10
mindspore --> 
torch --> 

generate models:10

analyse the exceptions in iter:11
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[142., 172., 176., ..., 216., 198., 205.],
          [191., 196., 174., ..., 229., 222., 217.],
          [220., 217., 192., ..., 224., 225., 218.],
          ...,
          [197., 196., 201., ..., 200., 199., 205.],
          [196., 191., 193., ..., 198., 199., 201.],
          [186., 182., 174., ..., 158., 158., 163.]],

         [[149., 172., 168., ..., 212., 194., 202.],
          [190., 192., 166., ..., 222., 215., 210.],
          [212., 209., 183., ..., 214., 214., 208.],
          ...,
          [152., 152., 156., ..., 165., 165., 164.],
          [157., 152., 154., ..., 164., 165., 161.],
          [150., 147., 139., ..., 124., 125., 125.]],

         [[152., 167., 154., ..., 211., 193., 200.],
          [192., 190., 159., ..., 220., 213., 207.],
          [212., 208., 182., ..., 209., 210., 203.],
          ...,
          [136., 135., 140., ..., 146., 146., 150.],
          [139., 135., 136., ..., 144., 145., 146.],
          [133., 130., 121., ..., 105., 106., 111.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:11

analyse the exceptions in iter:12
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[164., 162., 162., ..., 157., 153., 153.],
          [168., 166., 166., ..., 164., 160., 158.],
          [172., 170., 171., ..., 168., 165., 163.],
          ...,
          [123., 117., 112., ..., 117.,  95., 120.],
          [120., 116., 112., ..., 126., 120., 120.],
          [121., 120., 116., ..., 124., 124., 120.]],

         [[215., 212., 212., ..., 210., 208., 203.],
          [218., 215., 215., ..., 212., 209., 205.],
          [220., 217., 218., ..., 212., 208., 207.],
          ...,
          [160., 154., 149., ..., 136., 115., 149.],
          [156., 151., 147., ..., 149., 144., 152.],
          [154., 152., 148., ..., 152., 154., 154.]],

         [[244., 240., 240., ..., 237., 235., 234.],
          [245., 242., 242., ..., 238., 236., 235.],
          [246., 243., 244., ..., 238., 235., 236.],
          ...,
          [105., 102.,  99., ..., 100.,  79., 100.],
          [100.,  99.,  96., ..., 110., 103., 101.],
          [ 96.,  99.,  97., ..., 108., 107., 100.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:12

analyse the exceptions in iter:14
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[100.,  98.,  99., ..., 165., 163., 165.],
          [101., 100., 100., ..., 164., 163., 159.],
          [105., 104., 104., ..., 156., 136., 114.],
          ...,
          [166., 166., 168., ..., 137., 137., 147.],
          [161., 162., 167., ..., 131., 138., 137.],
          [164., 162., 164., ..., 153., 157., 156.]],

         [[146., 144., 144., ..., 165., 163., 165.],
          [145., 143., 143., ..., 161., 162., 161.],
          [147., 145., 145., ..., 150., 133., 117.],
          ...,
          [156., 156., 157., ..., 127., 126., 136.],
          [152., 153., 158., ..., 125., 133., 132.],
          [158., 156., 158., ..., 146., 151., 150.]],

         [[192., 189., 189., ..., 165., 163., 165.],
          [188., 186., 186., ..., 159., 159., 157.],
          [189., 186., 187., ..., 147., 129., 111.],
          ...,
          [150., 151., 152., ..., 112., 114., 127.],
          [149., 150., 155., ..., 117., 124., 120.],
          [155., 153., 155., ..., 139., 141., 137.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:13

analyse the exceptions in iter:15
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[100., 100., 101., ...,  95.,  94.,  95.],
          [103., 103., 104., ...,  97.,  97.,  97.],
          [107., 106., 106., ..., 100., 100., 101.],
          ...,
          [165., 159., 167., ...,  75.,  75.,  72.],
          [158., 173., 182., ...,  76.,  75.,  77.],
          [161., 162., 160., ...,  98., 129., 162.]],

         [[168., 168., 167., ..., 165., 165., 167.],
          [170., 168., 168., ..., 167., 166., 168.],
          [174., 172., 173., ..., 170., 170., 172.],
          ...,
          [178., 170., 177., ..., 117., 120., 120.],
          [174., 186., 193., ..., 119., 119., 121.],
          [176., 176., 171., ..., 137., 160., 185.]],

         [[231., 229., 230., ..., 231., 228., 229.],
          [230., 228., 226., ..., 229., 227., 229.],
          [233., 230., 229., ..., 230., 230., 232.],
          ...,
          [177., 167., 170., ..., 154., 157., 158.],
          [172., 182., 188., ..., 154., 153., 154.],
          [174., 172., 169., ..., 167., 183., 202.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:14

analyse the exceptions in iter:16
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[235., 235., 237., ..., 233., 227., 223.],
          [231., 232., 234., ..., 231., 225., 221.],
          [231., 233., 237., ..., 232., 225., 221.],
          ...,
          [125., 126., 143., ...,  66.,  65.,  68.],
          [127., 141., 149., ...,  63.,  67.,  62.],
          [137., 142., 149., ...,  62.,  61.,  51.]],

         [[236., 236., 238., ..., 234., 230., 228.],
          [232., 233., 235., ..., 232., 228., 225.],
          [232., 234., 238., ..., 233., 228., 226.],
          ...,
          [124., 125., 142., ...,  89.,  86.,  83.],
          [125., 140., 148., ...,  89.,  88.,  79.],
          [135., 140., 147., ...,  90.,  84.,  68.]],

         [[238., 238., 240., ..., 236., 233., 232.],
          [234., 235., 237., ..., 234., 232., 233.],
          [234., 236., 240., ..., 235., 232., 233.],
          ...,
          [122., 123., 140., ...,  23.,  23.,  37.],
          [125., 139., 148., ...,  24.,  26.,  29.],
          [136., 141., 148., ...,  27.,  23.,  14.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:15

analyse the exceptions in iter:17
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[110., 142., 151., ...,  39.,  40.,  38.],
          [109., 141., 152., ...,  36.,  40.,  36.],
          [105., 142., 151., ...,  39.,  44.,  39.],
          ...,
          [ 62.,  39.,  60., ...,  42.,  46.,  47.],
          [ 62.,  52.,  58., ...,  43.,  47.,  49.],
          [ 55.,  60.,  56., ...,  45.,  47.,  51.]],

         [[104., 135., 146., ...,  39.,  40.,  38.],
          [103., 133., 147., ...,  36.,  40.,  36.],
          [ 98., 133., 145., ...,  39.,  44.,  39.],
          ...,
          [ 59.,  38.,  64., ...,  44.,  44.,  44.],
          [ 57.,  51.,  61., ...,  46.,  45.,  46.],
          [ 51.,  60.,  60., ...,  48.,  46.,  48.]],

         [[ 97., 118., 120., ...,  39.,  40.,  38.],
          [ 95., 115., 119., ...,  37.,  40.,  36.],
          [ 90., 114., 117., ...,  41.,  45.,  40.],
          ...,
          [ 60.,  49.,  81., ...,  56.,  55.,  55.],
          [ 56.,  61.,  78., ...,  58.,  58.,  60.],
          [ 50.,  71.,  78., ...,  60.,  60.,  62.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:16

analyse the exceptions in iter:19
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 23.,  47.,  52., ..., 131., 182., 215.],
          [ 32.,  51.,  56., ..., 149., 204., 209.],
          [ 41.,  59.,  60., ..., 138., 196., 203.],
          ...,
          [167., 177., 182., ..., 199., 176., 145.],
          [166., 165., 165., ..., 183., 183., 189.],
          [175., 173., 173., ..., 190., 188., 192.]],

         [[ 27.,  49.,  46., ..., 130., 180., 212.],
          [ 31.,  49.,  49., ..., 148., 206., 217.],
          [ 37.,  57.,  59., ..., 138., 200., 217.],
          ...,
          [167., 177., 182., ..., 192., 171., 140.],
          [166., 165., 165., ..., 181., 182., 187.],
          [175., 173., 173., ..., 187., 186., 189.]],

         [[ 22.,  41.,  30., ..., 117., 174., 230.],
          [ 24.,  38.,  34., ..., 133., 197., 232.],
          [ 25.,  47.,  51., ..., 125., 194., 233.],
          ...,
          [168., 177., 182., ..., 192., 171., 140.],
          [166., 165., 165., ..., 181., 182., 188.],
          [175., 173., 173., ..., 184., 183., 186.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:17

analyse the exceptions in iter:20
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[153., 174., 155., ..., 122., 138.,  97.],
          [160., 164., 150., ..., 137., 160., 103.],
          [140., 147., 136., ..., 104., 125.,  93.],
          ...,
          [175., 170., 170., ..., 193., 197., 199.],
          [174., 173., 171., ..., 200., 202., 208.],
          [168., 164., 166., ..., 204., 204., 206.]],

         [[157., 180., 165., ..., 125., 143., 101.],
          [163., 170., 159., ..., 135., 161., 109.],
          [143., 152., 145., ..., 103., 128., 102.],
          ...,
          [177., 172., 172., ..., 203., 206., 204.],
          [177., 176., 174., ..., 208., 209., 212.],
          [173., 169., 171., ..., 209., 208., 210.]],

         [[155., 188., 172., ..., 123., 141.,  97.],
          [165., 180., 169., ..., 129., 157., 107.],
          [147., 166., 158., ...,  99., 125., 101.],
          ...,
          [179., 174., 174., ..., 212., 214., 213.],
          [181., 180., 178., ..., 216., 218., 221.],
          [180., 175., 177., ..., 217., 217., 219.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:18

analyse the exceptions in iter:21
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[252., 249., 250., ..., 251., 251., 251.],
          [255., 252., 253., ..., 255., 255., 254.],
          [253., 250., 250., ..., 254., 254., 252.],
          ...,
          [254., 252., 253., ..., 252., 253., 252.],
          [250., 252., 255., ..., 254., 255., 254.],
          [236., 249., 250., ..., 250., 250., 251.]],

         [[  8.,  15.,   8., ...,   1.,   0.,   1.],
          [  7.,  15.,  13., ...,   1.,   0.,   4.],
          [  6.,  16.,  24., ...,   1.,   0.,   9.],
          ...,
          [ 66.,  62.,  64., ...,  70.,  69.,  70.],
          [ 49.,  53.,  59., ...,  70.,  68.,  59.],
          [ 37.,  48.,  42., ...,  78.,  74.,  58.]],

         [[ 42.,  42.,  39., ...,  11.,  15.,  30.],
          [ 43.,  44.,  42., ...,  11.,  18.,  33.],
          [ 42.,  42.,  43., ...,  10.,  20.,  37.],
          ...,
          [ 94.,  92.,  93., ..., 101., 103., 104.],
          [ 81.,  82.,  86., ..., 103., 100.,  89.],
          [ 68.,  76.,  73., ..., 113., 109.,  88.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:19

analyse the exceptions in iter:22
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 86.,  96., 115., ...,  84.,  95.,  79.],
          [125.,  99.,  71., ...,  78.,  88.,  93.],
          [112.,  87.,  58., ...,  89.,  88.,  85.],
          ...,
          [ 66.,  56.,  46., ...,  70.,  61.,  47.],
          [108.,  96.,  86., ...,  57.,  57.,  46.],
          [130., 120.,  98., ...,  44.,  44.,  45.]],

         [[ 74.,  83., 109., ...,  72.,  84.,  68.],
          [110.,  83.,  61., ...,  74.,  82.,  82.],
          [ 95.,  69.,  45., ...,  88.,  84.,  77.],
          ...,
          [ 61.,  53.,  46., ...,  79.,  74.,  57.],
          [100.,  91.,  82., ...,  60.,  65.,  51.],
          [117., 110.,  90., ...,  43.,  46.,  45.]],

         [[ 62.,  65.,  83., ...,  50.,  61.,  45.],
          [104.,  74.,  46., ...,  44.,  51.,  53.],
          [ 89.,  62.,  35., ...,  54.,  50.,  45.],
          ...,
          [ 39.,  33.,  28., ...,  46.,  42.,  31.],
          [ 73.,  66.,  59., ...,  38.,  41.,  31.],
          [ 91.,  86.,  67., ...,  30.,  32.,  32.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:20

analyse the exceptions in iter:23
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[126., 102., 117., ...,  96., 113., 107.],
          [135., 113., 121., ..., 115., 114., 115.],
          [126., 124., 128., ..., 134., 115., 114.],
          ...,
          [141., 155., 134., ..., 149., 147., 122.],
          [153., 164., 146., ..., 163., 189., 184.],
          [125., 129., 124., ..., 133., 180., 168.]],

         [[100.,  76.,  93., ...,  74.,  90.,  84.],
          [109.,  86.,  94., ...,  89.,  89.,  90.],
          [102.,  97., 101., ..., 109.,  90.,  90.],
          ...,
          [111., 123., 102., ..., 140., 133., 106.],
          [122., 132., 119., ..., 156., 178., 174.],
          [100., 106., 102., ..., 127., 173., 162.]],

         [[ 71.,  49.,  60., ...,  42.,  58.,  52.],
          [ 73.,  52.,  56., ...,  58.,  55.,  53.],
          [ 61.,  59.,  60., ...,  77.,  55.,  50.],
          ...,
          [ 85.,  87.,  65., ..., 118., 116.,  94.],
          [ 83.,  89.,  81., ..., 147., 174., 173.],
          [ 56.,  64.,  68., ..., 124., 174., 164.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:21

analyse the exceptions in iter:24
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 73.,  71.,  77., ..., 183., 180., 185.],
          [ 73.,  75.,  78., ..., 181., 172., 174.],
          [ 77.,  94.,  99., ..., 175., 191., 185.],
          ...,
          [ 84.,  86., 118., ...,  79., 159., 117.],
          [ 76.,  81., 103., ...,  56.,  69., 104.],
          [102.,  91.,  95., ..., 100.,  72.,  48.]],

         [[ 77.,  68.,  69., ..., 210., 214., 225.],
          [ 74.,  68.,  64., ..., 229., 220., 218.],
          [ 72.,  82.,  81., ..., 213., 230., 226.],
          ...,
          [106., 105., 133., ...,  95., 177., 133.],
          [ 96.,  98., 116., ...,  80.,  90., 120.],
          [120., 109., 110., ..., 134.,  97.,  59.]],

         [[ 58.,  50.,  44., ..., 149., 143., 144.],
          [ 52.,  55.,  50., ..., 139., 129., 127.],
          [ 64.,  79.,  73., ..., 139., 152., 142.],
          ...,
          [ 56.,  58.,  84., ...,  78., 137.,  94.],
          [ 60.,  56.,  73., ...,  36.,  40.,  69.],
          [ 92.,  62.,  62., ...,  55.,  38.,  29.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:22

analyse the exceptions in iter:25
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[162., 164., 169., ..., 184., 190., 202.],
          [153., 158., 164., ..., 178., 189., 201.],
          [157., 161., 164., ..., 178., 190., 202.],
          ...,
          [214., 213., 213., ..., 240., 241., 242.],
          [218., 209., 208., ..., 232., 236., 239.],
          [216., 207., 201., ..., 231., 233., 235.]],

         [[164., 167., 171., ..., 176., 186., 198.],
          [151., 156., 163., ..., 171., 184., 198.],
          [151., 156., 160., ..., 170., 186., 199.],
          ...,
          [205., 193., 185., ..., 207., 206., 209.],
          [209., 188., 180., ..., 195., 196., 200.],
          [204., 189., 174., ..., 192., 194., 198.]],

         [[130., 128., 131., ..., 137., 146., 161.],
          [119., 120., 124., ..., 131., 143., 158.],
          [120., 121., 122., ..., 131., 142., 156.],
          ...,
          [193., 181., 174., ..., 193., 194., 196.],
          [198., 176., 169., ..., 182., 185., 187.],
          [197., 178., 156., ..., 178., 181., 183.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:23

analyse the exceptions in iter:27
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 45.,  42.,  35., ...,  93.,  51.,  39.],
          [ 46.,  42.,  40., ..., 105.,  66.,  48.],
          [ 43.,  40.,  48., ...,  88.,  77.,  58.],
          ...,
          [ 55.,  67.,  73., ...,  93., 101., 103.],
          [ 55.,  62.,  68., ...,  69.,  81.,  99.],
          [ 58.,  59.,  58., ...,  77.,  66.,  83.]],

         [[ 20.,  21.,  17., ...,  86.,  47.,  36.],
          [ 22.,  22.,  22., ...,  93.,  53.,  39.],
          [ 22.,  21.,  32., ...,  74.,  59.,  44.],
          ...,
          [ 54.,  57.,  64., ...,  87., 116., 123.],
          [ 54.,  53.,  59., ...,  62.,  93., 117.],
          [ 53.,  46.,  45., ...,  68.,  75.,  99.]],

         [[ 19.,  18.,  13., ...,  81.,  42.,  32.],
          [ 20.,  18.,  18., ...,  92.,  52.,  36.],
          [ 19.,  17.,  27., ...,  77.,  60.,  43.],
          ...,
          [ 51.,  54.,  57., ...,  49.,  34.,  30.],
          [ 51.,  50.,  52., ...,  38.,  29.,  35.],
          [ 51.,  44.,  40., ...,  53.,  29.,  31.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:24

analyse the exceptions in iter:29
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[202., 202., 204., ..., 207., 205., 203.],
          [206., 206., 207., ..., 210., 208., 206.],
          [210., 211., 212., ..., 214., 212., 210.],
          ...,
          [218., 210., 194., ..., 243., 244., 243.],
          [219., 217., 216., ..., 241., 241., 241.],
          [217., 216., 217., ..., 239., 239., 240.]],

         [[204., 204., 206., ..., 208., 206., 204.],
          [208., 208., 209., ..., 211., 209., 207.],
          [212., 213., 214., ..., 214., 213., 211.],
          ...,
          [217., 209., 194., ..., 242., 242., 243.],
          [218., 216., 216., ..., 240., 240., 240.],
          [216., 215., 216., ..., 238., 238., 238.]],

         [[199., 199., 201., ..., 200., 199., 198.],
          [203., 203., 204., ..., 205., 203., 201.],
          [207., 208., 210., ..., 210., 208., 206.],
          ...,
          [222., 214., 198., ..., 247., 247., 247.],
          [223., 221., 220., ..., 245., 245., 245.],
          [221., 220., 221., ..., 243., 243., 243.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:25

analyse the exceptions in iter:31
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[236., 233., 234., ..., 148., 147., 140.],
          [243., 242., 243., ..., 163., 161., 159.],
          [245., 242., 245., ..., 163., 161., 157.],
          ...,
          [ 79.,  70.,  72., ...,  38.,  36.,  33.],
          [ 81.,  78.,  74., ...,  47.,  31.,  24.],
          [ 80.,  80.,  74., ...,  40.,  28.,  22.]],

         [[242., 239., 240., ..., 145., 145., 137.],
          [249., 247., 250., ..., 162., 160., 158.],
          [251., 248., 251., ..., 162., 160., 157.],
          ...,
          [ 74.,  65.,  68., ...,  31.,  29.,  25.],
          [ 79.,  73.,  68., ...,  38.,  24.,  17.],
          [ 80.,  77.,  67., ...,  30.,  21.,  15.]],

         [[238., 235., 236., ..., 140., 139., 131.],
          [245., 244., 246., ..., 162., 160., 158.],
          [247., 244., 247., ..., 166., 164., 161.],
          ...,
          [ 60.,  47.,  45., ...,  25.,  23.,  19.],
          [ 62.,  56.,  49., ...,  29.,  17.,  10.],
          [ 63.,  61.,  52., ...,  20.,  12.,   8.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:26

analyse the exceptions in iter:32
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 50.,  51.,  42., ...,  48.,  18.,  14.],
          [ 86.,  92.,  82., ...,  46.,  17.,  11.],
          [ 43.,  43.,  51., ...,  42.,  10.,   6.],
          ...,
          [220., 209., 199., ..., 177., 176., 175.],
          [188., 182., 182., ..., 176., 175., 174.],
          [188., 184., 186., ..., 176., 176., 173.]],

         [[ 64.,  63.,  55., ...,  45.,  18.,  15.],
          [107., 110.,  99., ...,  43.,  17.,  12.],
          [ 60.,  56.,  65., ...,  39.,  10.,   6.],
          ...,
          [165., 174., 172., ..., 171., 170., 168.],
          [178., 170., 161., ..., 168., 167., 166.],
          [167., 163., 167., ..., 169., 168., 165.]],

         [[ 37.,  41.,  41., ...,  42.,  14.,  12.],
          [ 67.,  76.,  67., ...,  41.,  14.,  10.],
          [ 42.,  41.,  46., ...,  37.,   9.,   5.],
          ...,
          [151., 165., 164., ..., 168., 167., 166.],
          [162., 162., 157., ..., 166., 165., 164.],
          [162., 157., 160., ..., 166., 166., 162.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:27

analyse the exceptions in iter:33
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[  7.,   7.,   5., ...,  82.,  80.,  69.],
          [  6.,   6.,   5., ...,  85.,  86.,  81.],
          [  1.,   7.,   8., ...,  98.,  96.,  86.],
          ...,
          [150., 135., 129., ...,  72.,  45.,  26.],
          [156., 153., 138., ...,  57.,  23.,  38.],
          [183., 191., 182., ...,  83.,  67., 114.]],

         [[  5.,   5.,   4., ...,  84.,  85.,  73.],
          [  4.,   4.,   3., ...,  86.,  88.,  80.],
          [  1.,   7.,   8., ...,  96.,  96.,  84.],
          ...,
          [153., 136., 129., ...,  72.,  51.,  32.],
          [156., 151., 136., ...,  58.,  32.,  45.],
          [193., 199., 189., ...,  83.,  74., 120.]],

         [[  8.,   8.,   6., ...,  78.,  81.,  68.],
          [  8.,   9.,   8., ...,  77.,  81.,  72.],
          [  6.,  12.,  13., ...,  83.,  85.,  73.],
          ...,
          [139., 121., 113., ...,  69.,  63.,  51.],
          [139., 130., 110., ...,  56.,  48.,  64.],
          [183., 185., 171., ...,  76.,  81., 119.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:28

analyse the exceptions in iter:34
tensorflow exception:
{'id': 39, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[172., 171., 168., ..., 158., 156., 147.],
          [169., 168., 168., ..., 158., 152., 145.],
          [174., 169., 170., ..., 157., 149., 146.],
          ...,
          [150., 157., 162., ..., 158., 147., 139.],
          [143., 149., 155., ..., 148., 143., 140.],
          [148., 146., 149., ..., 137., 134., 136.]],

         [[187., 186., 182., ..., 170., 169., 163.],
          [185., 183., 184., ..., 175., 170., 165.],
          [190., 185., 186., ..., 177., 170., 168.],
          ...,
          [163., 168., 170., ..., 168., 160., 154.],
          [154., 158., 161., ..., 157., 153., 153.],
          [158., 155., 157., ..., 143., 139., 143.]],

         [[130., 130., 126., ..., 113., 113., 107.],
          [123., 122., 123., ..., 114., 110., 107.],
          [126., 122., 123., ..., 115., 108., 109.],
          ...,
          [100., 103., 104., ..., 108.,  99.,  90.],
          [ 89.,  90.,  96., ...,  99.,  92.,  88.],
          [ 93.,  89.,  92., ...,  86.,  80.,  82.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:29

analyse the exceptions in iter:0
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 59.,  43.,  50., ..., 158., 152., 148.],
          [ 16.,   0.,  18., ..., 123., 119., 122.],
          [ 25.,  16.,  49., ..., 118., 120., 109.],
          ...,
          [208., 201., 198., ..., 160.,  56.,  53.],
          [180., 173., 186., ..., 184.,  97.,  83.],
          [177., 168., 179., ..., 216., 151., 123.]],

         [[ 62.,  46.,  48., ..., 132., 125., 124.],
          [ 20.,   0.,   8., ...,  88.,  83.,  87.],
          [ 24.,   7.,  27., ...,  84.,  84.,  73.],
          ...,
          [170., 153., 161., ..., 133.,  31.,  34.],
          [139., 123., 144., ..., 148.,  62.,  53.],
          [144., 129., 142., ..., 184., 118.,  92.]],

         [[ 63.,  45.,  43., ..., 108., 102., 103.],
          [ 20.,   0.,   0., ...,  55.,  50.,  57.],
          [ 21.,   0.,   8., ...,  50.,  50.,  42.],
          ...,
          [ 96.,  34.,  26., ...,  70.,   7.,  20.],
          [ 96.,  42.,  30., ...,  94.,  34.,  34.],
          [116.,  94.,  87., ..., 140.,  84.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:1

analyse the exceptions in iter:1
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[154., 126., 105., ...,  91.,  87.,  79.],
          [140., 145., 125., ...,  96.,  77.,  71.],
          [140., 139., 115., ...,  79.,  68.,  67.],
          ...,
          [175., 156., 154., ...,  42.,  61.,  93.],
          [165., 156., 159., ..., 103., 123., 131.],
          [163., 158., 163., ..., 143., 143., 143.]],

         [[177., 137., 104., ...,  95.,  90.,  81.],
          [160., 153., 125., ...,  99.,  80.,  73.],
          [155., 146., 115., ...,  82.,  70.,  69.],
          ...,
          [167., 154., 160., ...,  34.,  53.,  83.],
          [154., 152., 161., ...,  93., 114., 121.],
          [148., 148., 156., ..., 133., 134., 133.]],

         [[187., 136.,  95., ...,  71.,  71.,  70.],
          [169., 154., 118., ...,  78.,  62.,  61.],
          [164., 149., 112., ...,  64.,  55.,  55.],
          ...,
          [166., 160., 170., ...,  36.,  57.,  91.],
          [128., 130., 142., ...,  96., 120., 131.],
          [120., 122., 133., ..., 139., 142., 144.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:2

analyse the exceptions in iter:2
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [113., 111., 105., ...,  72.,  72.,  72.],
          [111., 104.,  99., ...,  68.,  70.,  78.],
          [106.,  99.,  95., ...,  78.,  79.,  80.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [120., 118., 112., ...,  81.,  80.,  80.],
          [118., 111., 106., ...,  75.,  76.,  84.],
          [113., 106., 102., ...,  85.,  85.,  86.]],

         [[255., 253., 253., ..., 253., 253., 253.],
          [255., 255., 255., ..., 255., 255., 255.],
          [255., 254., 254., ..., 254., 254., 254.],
          ...,
          [112., 111., 106., ...,  80.,  79.,  79.],
          [110., 104.,  98., ...,  73.,  75.,  82.],
          [105.,  98.,  94., ...,  83.,  83.,  84.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:3

analyse the exceptions in iter:3
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  37.,  38., ...,  76.,  81.,  85.],
          [ 33.,  34.,  32., ...,  95.,  96.,  85.],
          [ 39.,  40.,  57., ...,  93., 107.,  95.],
          ...,
          [ 83.,  87.,  84., ...,  99.,  90.,  81.],
          [ 88.,  90.,  93., ...,  80.,  76.,  82.],
          [ 97.,  94.,  93., ...,  54.,  63.,  72.]],

         [[ 25.,  34.,  35., ...,  67.,  72.,  76.],
          [ 28.,  30.,  27., ...,  82.,  82.,  72.],
          [ 32.,  33.,  50., ...,  76.,  89.,  77.],
          ...,
          [ 73.,  77.,  74., ...,  93.,  84.,  75.],
          [ 72.,  74.,  77., ...,  74.,  70.,  76.],
          [ 78.,  75.,  75., ...,  47.,  56.,  65.]],

         [[ 10.,  19.,  20., ...,  39.,  43.,  47.],
          [ 13.,  14.,  12., ...,  55.,  56.,  45.],
          [ 15.,  17.,  33., ...,  52.,  66.,  54.],
          ...,
          [ 52.,  56.,  52., ...,  70.,  61.,  52.],
          [ 51.,  52.,  56., ...,  53.,  49.,  55.],
          [ 56.,  53.,  53., ...,  28.,  37.,  46.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:4

analyse the exceptions in iter:5
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[159., 150., 153., ...,  91.,  74.,  76.],
          [142., 146., 155., ..., 127., 122.,  86.],
          [109.,  99., 105., ..., 137., 163.,  93.],
          ...,
          [244., 240., 241., ..., 156., 179., 200.],
          [246., 243., 243., ..., 162., 178., 192.],
          [246., 243., 244., ..., 166., 173., 182.]],

         [[102.,  91.,  95., ...,  71.,  63.,  58.],
          [ 75.,  72.,  76., ..., 105., 111.,  69.],
          [ 67.,  58.,  59., ..., 112., 132.,  72.],
          ...,
          [129., 123., 122., ...,  42.,  59.,  73.],
          [133., 128., 127., ...,  44.,  56.,  65.],
          [139., 133., 132., ...,  47.,  51.,  57.]],

         [[101.,  95.,  97., ...,  56.,  55.,  55.],
          [ 68.,  66.,  65., ...,  71.,  93.,  61.],
          [ 75.,  60.,  52., ...,  80., 105.,  71.],
          ...,
          [ 70.,  65.,  65., ...,  15.,  26.,  36.],
          [ 74.,  72.,  70., ...,  14.,  22.,  27.],
          [ 82.,  78.,  77., ...,  14.,  17.,  19.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:5

analyse the exceptions in iter:6
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[164., 105., 118., ..., 109., 108.,  91.],
          [167., 116.,  72., ..., 105., 105.,  89.],
          [140., 142., 119., ..., 104.,  84.,  78.],
          ...,
          [139., 142., 135., ...,  89.,  97., 126.],
          [163., 153., 146., ...,  85.,  98., 127.],
          [183., 176., 154., ...,  94.,  91., 122.]],

         [[206., 140., 148., ..., 147., 147., 129.],
          [213., 160., 109., ..., 142., 142., 127.],
          [191., 193., 163., ..., 139., 120., 115.],
          ...,
          [148., 155., 156., ..., 134., 148., 176.],
          [157., 164., 164., ..., 130., 148., 178.],
          [153., 182., 154., ..., 134., 133., 170.]],

         [[ 84.,  61., 101., ...,  73.,  69.,  57.],
          [ 84.,  49.,  43., ...,  79.,  72.,  57.],
          [ 65.,  66.,  79., ...,  84.,  58.,  49.],
          ...,
          [ 81.,  74.,  72., ...,  28.,  24.,  49.],
          [ 85.,  82.,  90., ...,  19.,  27.,  48.],
          [102., 116., 100., ...,  29.,  26.,  44.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:6

analyse the exceptions in iter:7
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 28.,  30.,  33., ...,  43.,  52.,  46.],
          [ 27.,  27.,  21., ..., 112., 117., 115.],
          [ 34.,  33.,  24., ..., 175., 177., 176.],
          ...,
          [142., 142., 150., ..., 134., 128., 134.],
          [140., 145., 150., ..., 131., 130., 122.],
          [134., 136., 136., ..., 106., 104., 101.]],

         [[ 35.,  34.,  44., ...,  56.,  64.,  58.],
          [ 30.,  28.,  31., ..., 136., 140., 138.],
          [ 36.,  33.,  30., ..., 208., 209., 208.],
          ...,
          [176., 176., 184., ..., 175., 168., 175.],
          [176., 180., 186., ..., 170., 170., 162.],
          [171., 171., 171., ..., 144., 142., 140.]],

         [[ 39.,  44.,  47., ...,  45.,  53.,  47.],
          [ 38.,  41.,  39., ...,  97., 101., 100.],
          [ 42.,  43.,  40., ..., 143., 144., 143.],
          ...,
          [118., 118., 127., ..., 119., 112., 119.],
          [124., 129., 134., ..., 119., 119., 111.],
          [123., 124., 124., ..., 100.,  99.,  96.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:7

analyse the exceptions in iter:8
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[134., 131., 128., ..., 127., 127., 128.],
          [133., 129., 128., ..., 127., 127., 128.],
          [128., 127., 128., ..., 126., 126., 126.],
          ...,
          [174., 171., 155., ...,  27.,  29.,  28.],
          [194., 189., 159., ...,  30.,  30.,  30.],
          [193., 181., 168., ...,  31.,  32.,  32.]],

         [[186., 184., 182., ..., 181., 181., 182.],
          [189., 186., 186., ..., 183., 183., 184.],
          [185., 182., 182., ..., 181., 181., 180.],
          ...,
          [208., 206., 189., ...,  94.,  96.,  94.],
          [221., 215., 196., ...,  95.,  96.,  95.],
          [217., 208., 201., ...,  94.,  94.,  94.]],

         [[223., 220., 218., ..., 222., 222., 223.],
          [228., 224., 224., ..., 224., 224., 225.],
          [226., 223., 223., ..., 222., 222., 221.],
          ...,
          [235., 229., 216., ..., 136., 137., 136.],
          [244., 239., 225., ..., 138., 139., 140.],
          [237., 230., 227., ..., 136., 137., 138.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:8

analyse the exceptions in iter:9
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[125., 110., 102., ..., 202., 200., 202.],
          [142., 146., 176., ..., 195., 198., 204.],
          [180., 143., 156., ..., 122., 139., 158.],
          ...,
          [104., 101., 101., ..., 126., 126., 125.],
          [104., 105., 109., ..., 138., 137., 137.],
          [105., 108., 115., ..., 143., 143., 144.]],

         [[125., 101.,  90., ..., 207., 205., 208.],
          [146., 144., 172., ..., 201., 205., 211.],
          [185., 146., 157., ..., 111., 128., 147.],
          ...,
          [ 82.,  80.,  81., ..., 103., 103., 101.],
          [ 81.,  84.,  88., ..., 113., 113., 112.],
          [ 83.,  87.,  94., ..., 117., 116., 116.]],

         [[116.,  91.,  83., ..., 214., 212., 214.],
          [142., 139., 170., ..., 205., 209., 215.],
          [183., 146., 157., ..., 113., 131., 150.],
          ...,
          [ 41.,  39.,  38., ...,  67.,  69.,  68.],
          [ 40.,  41.,  43., ...,  78.,  80.,  81.],
          [ 42.,  45.,  50., ...,  82.,  84.,  86.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:9

final statics:
total operators:28
tensorflow --> nums:9,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:9
mindspore --> 
torch --> 

generate models:9

analyse the exceptions in iter:10
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[53., 54., 56., ..., 47., 41., 24.],
          [46., 53., 54., ..., 42., 39., 28.],
          [45., 50., 46., ..., 38., 36., 29.],
          ...,
          [71., 74., 80., ..., 51., 46., 49.],
          [75., 79., 81., ..., 61., 64., 48.],
          [85., 85., 86., ..., 61., 64., 49.]],

         [[65., 63., 60., ..., 51., 45., 28.],
          [59., 62., 59., ..., 46., 43., 32.],
          [59., 60., 52., ..., 42., 40., 33.],
          ...,
          [83., 83., 85., ..., 54., 49., 50.],
          [82., 85., 85., ..., 65., 67., 50.],
          [83., 84., 86., ..., 65., 67., 50.]],

         [[53., 52., 50., ..., 50., 44., 27.],
          [41., 45., 44., ..., 45., 42., 31.],
          [38., 41., 34., ..., 41., 39., 32.],
          ...,
          [66., 66., 67., ..., 33., 34., 41.],
          [67., 69., 67., ..., 41., 48., 41.],
          [71., 71., 70., ..., 39., 46., 41.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:10

analyse the exceptions in iter:11
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[142., 172., 176., ..., 216., 198., 205.],
          [191., 196., 174., ..., 229., 222., 217.],
          [220., 217., 192., ..., 224., 225., 218.],
          ...,
          [197., 196., 201., ..., 200., 199., 205.],
          [196., 191., 193., ..., 198., 199., 201.],
          [186., 182., 174., ..., 158., 158., 163.]],

         [[149., 172., 168., ..., 212., 194., 202.],
          [190., 192., 166., ..., 222., 215., 210.],
          [212., 209., 183., ..., 214., 214., 208.],
          ...,
          [152., 152., 156., ..., 165., 165., 164.],
          [157., 152., 154., ..., 164., 165., 161.],
          [150., 147., 139., ..., 124., 125., 125.]],

         [[152., 167., 154., ..., 211., 193., 200.],
          [192., 190., 159., ..., 220., 213., 207.],
          [212., 208., 182., ..., 209., 210., 203.],
          ...,
          [136., 135., 140., ..., 146., 146., 150.],
          [139., 135., 136., ..., 144., 145., 146.],
          [133., 130., 121., ..., 105., 106., 111.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:11

analyse the exceptions in iter:12
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[164., 162., 162., ..., 157., 153., 153.],
          [168., 166., 166., ..., 164., 160., 158.],
          [172., 170., 171., ..., 168., 165., 163.],
          ...,
          [123., 117., 112., ..., 117.,  95., 120.],
          [120., 116., 112., ..., 126., 120., 120.],
          [121., 120., 116., ..., 124., 124., 120.]],

         [[215., 212., 212., ..., 210., 208., 203.],
          [218., 215., 215., ..., 212., 209., 205.],
          [220., 217., 218., ..., 212., 208., 207.],
          ...,
          [160., 154., 149., ..., 136., 115., 149.],
          [156., 151., 147., ..., 149., 144., 152.],
          [154., 152., 148., ..., 152., 154., 154.]],

         [[244., 240., 240., ..., 237., 235., 234.],
          [245., 242., 242., ..., 238., 236., 235.],
          [246., 243., 244., ..., 238., 235., 236.],
          ...,
          [105., 102.,  99., ..., 100.,  79., 100.],
          [100.,  99.,  96., ..., 110., 103., 101.],
          [ 96.,  99.,  97., ..., 108., 107., 100.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:12

analyse the exceptions in iter:14
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[100.,  98.,  99., ..., 165., 163., 165.],
          [101., 100., 100., ..., 164., 163., 159.],
          [105., 104., 104., ..., 156., 136., 114.],
          ...,
          [166., 166., 168., ..., 137., 137., 147.],
          [161., 162., 167., ..., 131., 138., 137.],
          [164., 162., 164., ..., 153., 157., 156.]],

         [[146., 144., 144., ..., 165., 163., 165.],
          [145., 143., 143., ..., 161., 162., 161.],
          [147., 145., 145., ..., 150., 133., 117.],
          ...,
          [156., 156., 157., ..., 127., 126., 136.],
          [152., 153., 158., ..., 125., 133., 132.],
          [158., 156., 158., ..., 146., 151., 150.]],

         [[192., 189., 189., ..., 165., 163., 165.],
          [188., 186., 186., ..., 159., 159., 157.],
          [189., 186., 187., ..., 147., 129., 111.],
          ...,
          [150., 151., 152., ..., 112., 114., 127.],
          [149., 150., 155., ..., 117., 124., 120.],
          [155., 153., 155., ..., 139., 141., 137.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:13

analyse the exceptions in iter:15
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[100., 100., 101., ...,  95.,  94.,  95.],
          [103., 103., 104., ...,  97.,  97.,  97.],
          [107., 106., 106., ..., 100., 100., 101.],
          ...,
          [165., 159., 167., ...,  75.,  75.,  72.],
          [158., 173., 182., ...,  76.,  75.,  77.],
          [161., 162., 160., ...,  98., 129., 162.]],

         [[168., 168., 167., ..., 165., 165., 167.],
          [170., 168., 168., ..., 167., 166., 168.],
          [174., 172., 173., ..., 170., 170., 172.],
          ...,
          [178., 170., 177., ..., 117., 120., 120.],
          [174., 186., 193., ..., 119., 119., 121.],
          [176., 176., 171., ..., 137., 160., 185.]],

         [[231., 229., 230., ..., 231., 228., 229.],
          [230., 228., 226., ..., 229., 227., 229.],
          [233., 230., 229., ..., 230., 230., 232.],
          ...,
          [177., 167., 170., ..., 154., 157., 158.],
          [172., 182., 188., ..., 154., 153., 154.],
          [174., 172., 169., ..., 167., 183., 202.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:14

analyse the exceptions in iter:16
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[235., 235., 237., ..., 233., 227., 223.],
          [231., 232., 234., ..., 231., 225., 221.],
          [231., 233., 237., ..., 232., 225., 221.],
          ...,
          [125., 126., 143., ...,  66.,  65.,  68.],
          [127., 141., 149., ...,  63.,  67.,  62.],
          [137., 142., 149., ...,  62.,  61.,  51.]],

         [[236., 236., 238., ..., 234., 230., 228.],
          [232., 233., 235., ..., 232., 228., 225.],
          [232., 234., 238., ..., 233., 228., 226.],
          ...,
          [124., 125., 142., ...,  89.,  86.,  83.],
          [125., 140., 148., ...,  89.,  88.,  79.],
          [135., 140., 147., ...,  90.,  84.,  68.]],

         [[238., 238., 240., ..., 236., 233., 232.],
          [234., 235., 237., ..., 234., 232., 233.],
          [234., 236., 240., ..., 235., 232., 233.],
          ...,
          [122., 123., 140., ...,  23.,  23.,  37.],
          [125., 139., 148., ...,  24.,  26.,  29.],
          [136., 141., 148., ...,  27.,  23.,  14.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:15

analyse the exceptions in iter:17
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[110., 142., 151., ...,  39.,  40.,  38.],
          [109., 141., 152., ...,  36.,  40.,  36.],
          [105., 142., 151., ...,  39.,  44.,  39.],
          ...,
          [ 62.,  39.,  60., ...,  42.,  46.,  47.],
          [ 62.,  52.,  58., ...,  43.,  47.,  49.],
          [ 55.,  60.,  56., ...,  45.,  47.,  51.]],

         [[104., 135., 146., ...,  39.,  40.,  38.],
          [103., 133., 147., ...,  36.,  40.,  36.],
          [ 98., 133., 145., ...,  39.,  44.,  39.],
          ...,
          [ 59.,  38.,  64., ...,  44.,  44.,  44.],
          [ 57.,  51.,  61., ...,  46.,  45.,  46.],
          [ 51.,  60.,  60., ...,  48.,  46.,  48.]],

         [[ 97., 118., 120., ...,  39.,  40.,  38.],
          [ 95., 115., 119., ...,  37.,  40.,  36.],
          [ 90., 114., 117., ...,  41.,  45.,  40.],
          ...,
          [ 60.,  49.,  81., ...,  56.,  55.,  55.],
          [ 56.,  61.,  78., ...,  58.,  58.,  60.],
          [ 50.,  71.,  78., ...,  60.,  60.,  62.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:16

analyse the exceptions in iter:18
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[197., 198., 201., ..., 217., 217., 217.],
          [193., 195., 198., ..., 216., 215., 214.],
          [192., 194., 197., ..., 217., 216., 215.],
          ...,
          [156., 156., 156., ...,  98., 117., 128.],
          [158., 159., 154., ..., 131., 117.,  91.],
          [152., 151., 145., ...,  91.,  90.,  79.]],

         [[187., 188., 191., ..., 201., 201., 201.],
          [183., 185., 188., ..., 200., 200., 198.],
          [182., 184., 187., ..., 201., 200., 199.],
          ...,
          [146., 146., 146., ...,  79.,  96., 105.],
          [148., 149., 144., ..., 110.,  99.,  75.],
          [142., 141., 135., ...,  72.,  73.,  65.]],

         [[188., 189., 192., ..., 204., 204., 204.],
          [184., 186., 189., ..., 203., 202., 201.],
          [183., 185., 188., ..., 204., 203., 202.],
          ...,
          [147., 147., 147., ...,  65.,  82.,  89.],
          [149., 150., 145., ...,  96.,  86.,  64.],
          [143., 142., 136., ...,  61.,  63.,  57.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:17

analyse the exceptions in iter:19
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 23.,  47.,  52., ..., 131., 182., 215.],
          [ 32.,  51.,  56., ..., 149., 204., 209.],
          [ 41.,  59.,  60., ..., 138., 196., 203.],
          ...,
          [167., 177., 182., ..., 199., 176., 145.],
          [166., 165., 165., ..., 183., 183., 189.],
          [175., 173., 173., ..., 190., 188., 192.]],

         [[ 27.,  49.,  46., ..., 130., 180., 212.],
          [ 31.,  49.,  49., ..., 148., 206., 217.],
          [ 37.,  57.,  59., ..., 138., 200., 217.],
          ...,
          [167., 177., 182., ..., 192., 171., 140.],
          [166., 165., 165., ..., 181., 182., 187.],
          [175., 173., 173., ..., 187., 186., 189.]],

         [[ 22.,  41.,  30., ..., 117., 174., 230.],
          [ 24.,  38.,  34., ..., 133., 197., 232.],
          [ 25.,  47.,  51., ..., 125., 194., 233.],
          ...,
          [168., 177., 182., ..., 192., 171., 140.],
          [166., 165., 165., ..., 181., 182., 188.],
          [175., 173., 173., ..., 184., 183., 186.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:18

analyse the exceptions in iter:20
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[153., 174., 155., ..., 122., 138.,  97.],
          [160., 164., 150., ..., 137., 160., 103.],
          [140., 147., 136., ..., 104., 125.,  93.],
          ...,
          [175., 170., 170., ..., 193., 197., 199.],
          [174., 173., 171., ..., 200., 202., 208.],
          [168., 164., 166., ..., 204., 204., 206.]],

         [[157., 180., 165., ..., 125., 143., 101.],
          [163., 170., 159., ..., 135., 161., 109.],
          [143., 152., 145., ..., 103., 128., 102.],
          ...,
          [177., 172., 172., ..., 203., 206., 204.],
          [177., 176., 174., ..., 208., 209., 212.],
          [173., 169., 171., ..., 209., 208., 210.]],

         [[155., 188., 172., ..., 123., 141.,  97.],
          [165., 180., 169., ..., 129., 157., 107.],
          [147., 166., 158., ...,  99., 125., 101.],
          ...,
          [179., 174., 174., ..., 212., 214., 213.],
          [181., 180., 178., ..., 216., 218., 221.],
          [180., 175., 177., ..., 217., 217., 219.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:19

analyse the exceptions in iter:21
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[252., 249., 250., ..., 251., 251., 251.],
          [255., 252., 253., ..., 255., 255., 254.],
          [253., 250., 250., ..., 254., 254., 252.],
          ...,
          [254., 252., 253., ..., 252., 253., 252.],
          [250., 252., 255., ..., 254., 255., 254.],
          [236., 249., 250., ..., 250., 250., 251.]],

         [[  8.,  15.,   8., ...,   1.,   0.,   1.],
          [  7.,  15.,  13., ...,   1.,   0.,   4.],
          [  6.,  16.,  24., ...,   1.,   0.,   9.],
          ...,
          [ 66.,  62.,  64., ...,  70.,  69.,  70.],
          [ 49.,  53.,  59., ...,  70.,  68.,  59.],
          [ 37.,  48.,  42., ...,  78.,  74.,  58.]],

         [[ 42.,  42.,  39., ...,  11.,  15.,  30.],
          [ 43.,  44.,  42., ...,  11.,  18.,  33.],
          [ 42.,  42.,  43., ...,  10.,  20.,  37.],
          ...,
          [ 94.,  92.,  93., ..., 101., 103., 104.],
          [ 81.,  82.,  86., ..., 103., 100.,  89.],
          [ 68.,  76.,  73., ..., 113., 109.,  88.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:20

analyse the exceptions in iter:22
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 86.,  96., 115., ...,  84.,  95.,  79.],
          [125.,  99.,  71., ...,  78.,  88.,  93.],
          [112.,  87.,  58., ...,  89.,  88.,  85.],
          ...,
          [ 66.,  56.,  46., ...,  70.,  61.,  47.],
          [108.,  96.,  86., ...,  57.,  57.,  46.],
          [130., 120.,  98., ...,  44.,  44.,  45.]],

         [[ 74.,  83., 109., ...,  72.,  84.,  68.],
          [110.,  83.,  61., ...,  74.,  82.,  82.],
          [ 95.,  69.,  45., ...,  88.,  84.,  77.],
          ...,
          [ 61.,  53.,  46., ...,  79.,  74.,  57.],
          [100.,  91.,  82., ...,  60.,  65.,  51.],
          [117., 110.,  90., ...,  43.,  46.,  45.]],

         [[ 62.,  65.,  83., ...,  50.,  61.,  45.],
          [104.,  74.,  46., ...,  44.,  51.,  53.],
          [ 89.,  62.,  35., ...,  54.,  50.,  45.],
          ...,
          [ 39.,  33.,  28., ...,  46.,  42.,  31.],
          [ 73.,  66.,  59., ...,  38.,  41.,  31.],
          [ 91.,  86.,  67., ...,  30.,  32.,  32.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:21

analyse the exceptions in iter:23
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[126., 102., 117., ...,  96., 113., 107.],
          [135., 113., 121., ..., 115., 114., 115.],
          [126., 124., 128., ..., 134., 115., 114.],
          ...,
          [141., 155., 134., ..., 149., 147., 122.],
          [153., 164., 146., ..., 163., 189., 184.],
          [125., 129., 124., ..., 133., 180., 168.]],

         [[100.,  76.,  93., ...,  74.,  90.,  84.],
          [109.,  86.,  94., ...,  89.,  89.,  90.],
          [102.,  97., 101., ..., 109.,  90.,  90.],
          ...,
          [111., 123., 102., ..., 140., 133., 106.],
          [122., 132., 119., ..., 156., 178., 174.],
          [100., 106., 102., ..., 127., 173., 162.]],

         [[ 71.,  49.,  60., ...,  42.,  58.,  52.],
          [ 73.,  52.,  56., ...,  58.,  55.,  53.],
          [ 61.,  59.,  60., ...,  77.,  55.,  50.],
          ...,
          [ 85.,  87.,  65., ..., 118., 116.,  94.],
          [ 83.,  89.,  81., ..., 147., 174., 173.],
          [ 56.,  64.,  68., ..., 124., 174., 164.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:22

analyse the exceptions in iter:24
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 73.,  71.,  77., ..., 183., 180., 185.],
          [ 73.,  75.,  78., ..., 181., 172., 174.],
          [ 77.,  94.,  99., ..., 175., 191., 185.],
          ...,
          [ 84.,  86., 118., ...,  79., 159., 117.],
          [ 76.,  81., 103., ...,  56.,  69., 104.],
          [102.,  91.,  95., ..., 100.,  72.,  48.]],

         [[ 77.,  68.,  69., ..., 210., 214., 225.],
          [ 74.,  68.,  64., ..., 229., 220., 218.],
          [ 72.,  82.,  81., ..., 213., 230., 226.],
          ...,
          [106., 105., 133., ...,  95., 177., 133.],
          [ 96.,  98., 116., ...,  80.,  90., 120.],
          [120., 109., 110., ..., 134.,  97.,  59.]],

         [[ 58.,  50.,  44., ..., 149., 143., 144.],
          [ 52.,  55.,  50., ..., 139., 129., 127.],
          [ 64.,  79.,  73., ..., 139., 152., 142.],
          ...,
          [ 56.,  58.,  84., ...,  78., 137.,  94.],
          [ 60.,  56.,  73., ...,  36.,  40.,  69.],
          [ 92.,  62.,  62., ...,  55.,  38.,  29.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:23

analyse the exceptions in iter:26
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[131., 124., 116., ..., 184., 185., 184.],
          [127., 124., 116., ..., 177., 180., 186.],
          [123., 121., 113., ..., 179., 187., 194.],
          ...,
          [ 99.,  83.,  54., ..., 138., 155., 165.],
          [ 97.,  77.,  43., ..., 140., 154., 163.],
          [ 96.,  71.,  35., ..., 140., 156., 164.]],

         [[ 81.,  76.,  70., ..., 152., 153., 152.],
          [ 76.,  75.,  69., ..., 142., 146., 152.],
          [ 73.,  73.,  67., ..., 142., 150., 158.],
          ...,
          [ 50.,  42.,  27., ..., 103., 113., 118.],
          [ 50.,  39.,  21., ..., 105., 112., 116.],
          [ 49.,  36.,  16., ..., 104., 114., 118.]],

         [[ 32.,  27.,  20., ..., 114., 117., 120.],
          [ 27.,  26.,  19., ..., 106., 110., 116.],
          [ 23.,  24.,  17., ..., 106., 114., 118.],
          ...,
          [ 10.,   5.,   5., ...,  68.,  72.,  74.],
          [ 10.,   5.,   4., ...,  69.,  71.,  71.],
          [ 10.,   4.,   3., ...,  69.,  73.,  73.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:24

analyse the exceptions in iter:27
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 45.,  42.,  35., ...,  93.,  51.,  39.],
          [ 46.,  42.,  40., ..., 105.,  66.,  48.],
          [ 43.,  40.,  48., ...,  88.,  77.,  58.],
          ...,
          [ 55.,  67.,  73., ...,  93., 101., 103.],
          [ 55.,  62.,  68., ...,  69.,  81.,  99.],
          [ 58.,  59.,  58., ...,  77.,  66.,  83.]],

         [[ 20.,  21.,  17., ...,  86.,  47.,  36.],
          [ 22.,  22.,  22., ...,  93.,  53.,  39.],
          [ 22.,  21.,  32., ...,  74.,  59.,  44.],
          ...,
          [ 54.,  57.,  64., ...,  87., 116., 123.],
          [ 54.,  53.,  59., ...,  62.,  93., 117.],
          [ 53.,  46.,  45., ...,  68.,  75.,  99.]],

         [[ 19.,  18.,  13., ...,  81.,  42.,  32.],
          [ 20.,  18.,  18., ...,  92.,  52.,  36.],
          [ 19.,  17.,  27., ...,  77.,  60.,  43.],
          ...,
          [ 51.,  54.,  57., ...,  49.,  34.,  30.],
          [ 51.,  50.,  52., ...,  38.,  29.,  35.],
          [ 51.,  44.,  40., ...,  53.,  29.,  31.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:25

analyse the exceptions in iter:28
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[128., 121., 138., ..., 130., 101., 122.],
          [133., 125., 136., ..., 131., 106., 127.],
          [141., 126., 141., ..., 132., 114., 126.],
          ...,
          [191., 186., 175., ..., 190., 182., 195.],
          [210., 207., 198., ..., 194., 184., 192.],
          [209., 206., 207., ..., 201., 193., 196.]],

         [[141., 134., 151., ..., 150., 121., 141.],
          [146., 138., 149., ..., 151., 126., 147.],
          [155., 139., 154., ..., 152., 134., 146.],
          ...,
          [178., 174., 160., ..., 179., 175., 188.],
          [195., 197., 179., ..., 179., 178., 186.],
          [194., 195., 189., ..., 187., 187., 190.]],

         [[123., 116., 133., ..., 138., 109., 129.],
          [128., 120., 131., ..., 139., 114., 135.],
          [136., 121., 136., ..., 140., 122., 134.],
          ...,
          [126., 124., 112., ..., 138., 137., 145.],
          [143., 144., 129., ..., 138., 133., 142.],
          [142., 143., 138., ..., 145., 142., 146.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:26

analyse the exceptions in iter:29
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[202., 202., 204., ..., 207., 205., 203.],
          [206., 206., 207., ..., 210., 208., 206.],
          [210., 211., 212., ..., 214., 212., 210.],
          ...,
          [218., 210., 194., ..., 243., 244., 243.],
          [219., 217., 216., ..., 241., 241., 241.],
          [217., 216., 217., ..., 239., 239., 240.]],

         [[204., 204., 206., ..., 208., 206., 204.],
          [208., 208., 209., ..., 211., 209., 207.],
          [212., 213., 214., ..., 214., 213., 211.],
          ...,
          [217., 209., 194., ..., 242., 242., 243.],
          [218., 216., 216., ..., 240., 240., 240.],
          [216., 215., 216., ..., 238., 238., 238.]],

         [[199., 199., 201., ..., 200., 199., 198.],
          [203., 203., 204., ..., 205., 203., 201.],
          [207., 208., 210., ..., 210., 208., 206.],
          ...,
          [222., 214., 198., ..., 247., 247., 247.],
          [223., 221., 220., ..., 245., 245., 245.],
          [221., 220., 221., ..., 243., 243., 243.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:27

analyse the exceptions in iter:31
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[236., 233., 234., ..., 148., 147., 140.],
          [243., 242., 243., ..., 163., 161., 159.],
          [245., 242., 245., ..., 163., 161., 157.],
          ...,
          [ 79.,  70.,  72., ...,  38.,  36.,  33.],
          [ 81.,  78.,  74., ...,  47.,  31.,  24.],
          [ 80.,  80.,  74., ...,  40.,  28.,  22.]],

         [[242., 239., 240., ..., 145., 145., 137.],
          [249., 247., 250., ..., 162., 160., 158.],
          [251., 248., 251., ..., 162., 160., 157.],
          ...,
          [ 74.,  65.,  68., ...,  31.,  29.,  25.],
          [ 79.,  73.,  68., ...,  38.,  24.,  17.],
          [ 80.,  77.,  67., ...,  30.,  21.,  15.]],

         [[238., 235., 236., ..., 140., 139., 131.],
          [245., 244., 246., ..., 162., 160., 158.],
          [247., 244., 247., ..., 166., 164., 161.],
          ...,
          [ 60.,  47.,  45., ...,  25.,  23.,  19.],
          [ 62.,  56.,  49., ...,  29.,  17.,  10.],
          [ 63.,  61.,  52., ...,  20.,  12.,   8.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:28

analyse the exceptions in iter:34
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[172., 171., 168., ..., 158., 156., 147.],
          [169., 168., 168., ..., 158., 152., 145.],
          [174., 169., 170., ..., 157., 149., 146.],
          ...,
          [150., 157., 162., ..., 158., 147., 139.],
          [143., 149., 155., ..., 148., 143., 140.],
          [148., 146., 149., ..., 137., 134., 136.]],

         [[187., 186., 182., ..., 170., 169., 163.],
          [185., 183., 184., ..., 175., 170., 165.],
          [190., 185., 186., ..., 177., 170., 168.],
          ...,
          [163., 168., 170., ..., 168., 160., 154.],
          [154., 158., 161., ..., 157., 153., 153.],
          [158., 155., 157., ..., 143., 139., 143.]],

         [[130., 130., 126., ..., 113., 113., 107.],
          [123., 122., 123., ..., 114., 110., 107.],
          [126., 122., 123., ..., 115., 108., 109.],
          ...,
          [100., 103., 104., ..., 108.,  99.,  90.],
          [ 89.,  90.,  96., ...,  99.,  92.,  88.],
          [ 93.,  89.,  92., ...,  86.,  80.,  82.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:29

analyse the exceptions in iter:35
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[251., 247., 247., ..., 229., 244., 251.],
          [249., 246., 246., ..., 233., 249., 252.],
          [167., 167., 167., ..., 217., 217., 220.],
          ...,
          [133., 123., 124., ..., 118., 114., 115.],
          [123., 124., 126., ..., 112., 108., 104.],
          [125., 129., 126., ..., 118., 112., 105.]],

         [[249., 245., 245., ..., 190., 231., 241.],
          [248., 244., 245., ..., 188., 237., 242.],
          [165., 164., 164., ..., 182., 211., 213.],
          ...,
          [130., 127., 130., ..., 125., 122., 125.],
          [125., 127., 129., ..., 122., 119., 119.],
          [128., 132., 130., ..., 128., 122., 121.]],

         [[250., 247., 247., ..., 146., 224., 241.],
          [248., 244., 244., ..., 141., 233., 241.],
          [148., 148., 149., ..., 139., 203., 208.],
          ...,
          [ 39.,  36.,  35., ...,  30.,  26.,  27.],
          [ 36.,  36.,  32., ...,  26.,  27.,  22.],
          [ 42.,  43.,  36., ...,  35.,  33.,  26.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:30

analyse the exceptions in iter:36
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[169., 131., 193., ..., 172., 169., 166.],
          [165., 127., 189., ..., 172., 169., 166.],
          [163., 126., 186., ..., 173., 170., 168.],
          ...,
          [147., 139., 145., ..., 220., 218., 219.],
          [146., 143., 152., ..., 221., 220., 219.],
          [148., 143., 146., ..., 223., 221., 220.]],

         [[122., 108., 196., ..., 187., 183., 181.],
          [119., 104., 192., ..., 186., 183., 180.],
          [117., 103., 189., ..., 187., 184., 182.],
          ...,
          [ 93.,  85.,  91., ..., 220., 218., 219.],
          [ 87.,  83.,  94., ..., 221., 220., 219.],
          [ 87.,  82.,  85., ..., 223., 221., 220.]],

         [[ 65.,  75., 192., ..., 187., 183., 181.],
          [ 62.,  72., 187., ..., 186., 183., 180.],
          [ 60.,  71., 185., ..., 187., 184., 182.],
          ...,
          [ 35.,  39.,  42., ..., 220., 218., 219.],
          [ 31.,  39.,  43., ..., 222., 220., 219.],
          [ 28.,  31.,  30., ..., 223., 221., 220.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:31

analyse the exceptions in iter:37
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 95.,  88.,  86., ..., 101.,  91., 105.],
          [ 82.,  75.,  76., ...,  94.,  51.,  84.],
          [ 77.,  74.,  71., ...,  71.,  47.,  88.],
          ...,
          [ 97.,  92.,  97., ...,  86.,  94.,  90.],
          [ 95.,  84.,  89., ...,  96., 102.,  97.],
          [ 91.,  83.,  82., ..., 100., 105., 108.]],

         [[105.,  97.,  96., ..., 116., 108., 124.],
          [ 90.,  83.,  84., ..., 102.,  61.,  97.],
          [ 85.,  81.,  78., ...,  74.,  52.,  95.],
          ...,
          [ 95.,  92.,  93., ...,  91.,  97.,  97.],
          [ 90.,  86.,  89., ...,  97.,  96.,  94.],
          [ 84.,  81.,  81., ...,  96.,  97., 102.]],

         [[127., 120., 118., ..., 144., 136., 157.],
          [110., 104., 104., ..., 123.,  80., 122.],
          [103.,  98.,  95., ...,  86.,  63., 111.],
          ...,
          [ 72.,  69.,  70., ...,  65.,  72.,  71.],
          [ 65.,  59.,  62., ...,  76.,  77.,  73.],
          [ 63.,  57.,  55., ...,  78.,  80.,  83.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:32

analyse the exceptions in iter:38
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[110., 223., 243., ...,   7.,   0.,   0.],
          [102., 213., 244., ...,  98.,  80.,  31.],
          [ 99., 204., 248., ..., 221., 198.,  89.],
          ...,
          [ 58.,  58.,  51., ...,   8.,   9.,   6.],
          [ 69.,  54.,  49., ...,  48.,  52.,  35.],
          [ 81.,  52.,  50., ...,  15.,  16.,  13.]],

         [[ 90., 197., 215., ...,   2.,   0.,   0.],
          [ 83., 187., 217., ...,  90.,  74.,  27.],
          [ 78., 179., 221., ..., 209., 188.,  81.],
          ...,
          [ 63.,  70.,  69., ...,   8.,  10.,   8.],
          [ 72.,  64.,  65., ...,  44.,  47.,  32.],
          [ 80.,  58.,  63., ...,   5.,   5.,   3.]],

         [[ 84., 185., 201., ...,   3.,   0.,   0.],
          [ 77., 176., 203., ...,  92.,  75.,  28.],
          [ 72., 167., 207., ..., 213., 191.,  83.],
          ...,
          [ 87., 100., 103., ...,  10.,   7.,   5.],
          [ 94.,  92.,  98., ...,  43.,  44.,  30.],
          [100.,  84.,  93., ...,   5.,   5.,   4.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:33

analyse the exceptions in iter:39
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 98., 119., 109., ...,  75.,  60.,  61.],
          [ 44.,  75.,  69., ...,  81.,  55.,  65.],
          [ 73.,  94., 111., ...,  77.,  60.,  58.],
          ...,
          [ 96., 100., 129., ...,  72.,  68.,  85.],
          [124., 114., 110., ...,  84.,  81.,  73.],
          [ 93.,  98.,  95., ...,  73.,  55.,  72.]],

         [[110., 132., 122., ...,  97.,  82.,  84.],
          [ 56.,  86.,  80., ..., 103.,  77.,  87.],
          [ 84., 105., 122., ...,  99.,  82.,  82.],
          ...,
          [ 98., 100., 126., ...,  73.,  71.,  93.],
          [137., 124., 117., ...,  92.,  89.,  81.],
          [110., 112., 106., ...,  82.,  63.,  79.]],

         [[ 96., 117., 107., ...,  76.,  62.,  67.],
          [ 46.,  76.,  70., ...,  82.,  57.,  74.],
          [ 77.,  98., 115., ...,  78.,  61.,  61.],
          ...,
          [ 99., 100., 124., ...,  69.,  67.,  85.],
          [135., 121., 111., ...,  85.,  84.,  74.],
          [107., 107.,  99., ...,  75.,  58.,  72.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:34

analyse the exceptions in iter:40
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[101.,  94.,  98., ..., 121., 127., 143.],
          [120., 131., 124., ..., 115., 121., 144.],
          [120., 139., 140., ..., 105., 107., 121.],
          ...,
          [ 48.,  31.,  37., ..., 188., 159., 125.],
          [ 52.,  42.,  44., ..., 173., 165., 150.],
          [ 41.,  38.,  42., ..., 164., 145., 155.]],

         [[114., 116., 112., ..., 119., 130., 136.],
          [122., 132., 119., ..., 116., 126., 141.],
          [126., 140., 139., ...,  97., 103., 121.],
          ...,
          [ 45.,  31.,  37., ..., 157., 130., 106.],
          [ 46.,  40.,  45., ..., 135., 136., 132.],
          [ 42.,  38.,  41., ..., 130., 120., 134.]],

         [[ 35.,  48.,  42., ...,  58.,  66.,  90.],
          [ 64.,  98.,  74., ...,  53.,  63.,  77.],
          [ 50.,  82.,  82., ...,  56.,  61.,  65.],
          ...,
          [ 40.,  24.,  27., ..., 103.,  93.,  60.],
          [ 41.,  32.,  32., ..., 102.,  99.,  92.],
          [ 32.,  33.,  33., ...,  98.,  79.,  91.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:35

analyse the exceptions in iter:41
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[145., 145., 148., ..., 237., 230., 224.],
          [147., 150., 168., ..., 231., 221., 214.],
          [145., 150., 178., ..., 229., 230., 232.],
          ...,
          [231., 230., 227., ..., 235., 234., 231.],
          [224., 231., 231., ..., 240., 228., 223.],
          [125., 225., 232., ..., 224., 216., 228.]],

         [[125., 126., 130., ..., 210., 202., 199.],
          [126., 132., 147., ..., 203., 192., 190.],
          [124., 130., 155., ..., 201., 201., 205.],
          ...,
          [202., 202., 198., ..., 209., 207., 203.],
          [199., 200., 202., ..., 213., 201., 199.],
          [120., 200., 204., ..., 197., 189., 203.]],

         [[ 83.,  82.,  82., ..., 170., 161., 158.],
          [ 83.,  84., 107., ..., 163., 151., 149.],
          [ 79.,  84., 110., ..., 161., 160., 166.],
          ...,
          [169., 170., 166., ..., 172., 170., 167.],
          [163., 167., 170., ..., 177., 162., 162.],
          [ 98., 166., 170., ..., 160., 150., 167.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:36

analyse the exceptions in iter:43
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 99.,  98., 100., ..., 129., 132., 130.],
          [100., 100., 102., ..., 122., 135., 132.],
          [104., 104., 106., ..., 165., 149., 140.],
          ...,
          [195., 199., 221., ..., 209., 209., 208.],
          [197., 201., 211., ..., 208., 210., 209.],
          [199., 197., 204., ..., 208., 210., 209.]],

         [[166., 165., 167., ..., 186., 190., 188.],
          [166., 164., 167., ..., 152., 189., 188.],
          [169., 167., 170., ..., 165., 189., 189.],
          ...,
          [173., 177., 194., ..., 191., 190., 188.],
          [173., 178., 184., ..., 190., 191., 191.],
          [173., 172., 174., ..., 189., 191., 190.]],

         [[198., 196., 199., ..., 212., 215., 213.],
          [195., 194., 197., ..., 169., 213., 214.],
          [197., 195., 198., ..., 160., 205., 212.],
          ...,
          [149., 153., 166., ..., 169., 171., 173.],
          [149., 149., 147., ..., 171., 173., 175.],
          [149., 144., 137., ..., 174., 177., 175.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:37

analyse the exceptions in iter:45
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 54.,  59.,  56., ..., 133., 131., 132.],
          [ 59.,  62.,  55., ..., 193., 200., 197.],
          [ 41.,  41.,  36., ..., 202., 196., 190.],
          ...,
          [105.,  97.,  96., ...,  98., 100., 100.],
          [ 86.,  96.,  97., ...,  94.,  98., 100.],
          [ 70.,  92., 113., ...,  98.,  96.,  92.]],

         [[ 31.,  34.,  37., ...,  92.,  89.,  94.],
          [ 38.,  39.,  36., ..., 135., 144., 142.],
          [ 26.,  25.,  21., ..., 144., 141., 136.],
          ...,
          [161., 163., 170., ..., 145., 138., 130.],
          [149., 157., 164., ..., 127., 126., 124.],
          [136., 146., 169., ..., 121., 117., 112.]],

         [[ 18.,  19.,  22., ...,  53.,  49.,  53.],
          [ 26.,  26.,  25., ...,  77.,  86.,  86.],
          [ 18.,  16.,  13., ...,  84.,  81.,  79.],
          ...,
          [157., 162., 164., ..., 144., 135., 123.],
          [143., 156., 160., ..., 122., 120., 114.],
          [128., 145., 168., ..., 111., 106., 101.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:38

analyse the exceptions in iter:46
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 94.,  72.,  60., ...,  72.,  71.,  77.],
          [ 85.,  67.,  52., ...,  67.,  72.,  77.],
          [ 82.,  54.,  41., ...,  70.,  71.,  78.],
          ...,
          [ 78.,  54.,  37., ...,  51.,  44.,  52.],
          [133., 117.,  98., ...,  62.,  53.,  60.],
          [140., 137., 138., ...,  85.,  79.,  69.]],

         [[ 91.,  71.,  68., ...,  78.,  75.,  82.],
          [ 83.,  66.,  57., ...,  73.,  78.,  85.],
          [ 82.,  53.,  44., ...,  76.,  77.,  85.],
          ...,
          [ 79.,  54.,  37., ...,  49.,  47.,  50.],
          [127., 111.,  92., ...,  58.,  56.,  59.],
          [129., 126., 126., ...,  68.,  71.,  63.]],

         [[ 62.,  42.,  35., ...,  43.,  39.,  41.],
          [ 55.,  38.,  29., ...,  41.,  37.,  39.],
          [ 53.,  24.,  19., ...,  53.,  37.,  39.],
          ...,
          [ 86.,  63.,  46., ...,  28.,  20.,  28.],
          [129., 115.,  98., ...,  35.,  28.,  36.],
          [126., 125., 129., ...,  46.,  46.,  42.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:39

analyse the exceptions in iter:47
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 77.,  76.,  78., ...,  68.,  58.,  48.],
          [ 71.,  67.,  69., ...,  57.,  44.,  36.],
          [ 55.,  52.,  58., ...,  62.,  53.,  48.],
          ...,
          [ 63.,  62.,  67., ...,  63.,  58.,  55.],
          [ 89.,  91.,  89., ...,  65.,  68.,  66.],
          [103., 107.,  92., ...,  69.,  77.,  77.]],

         [[113., 112., 114., ..., 104.,  94.,  84.],
          [107., 102., 105., ...,  93.,  80.,  72.],
          [ 91.,  88.,  94., ...,  98.,  89.,  84.],
          ...,
          [ 97.,  92.,  97., ...,  97.,  92.,  89.],
          [118., 116., 114., ...,  99., 102., 101.],
          [129., 131., 119., ..., 104., 111., 112.]],

         [[137., 136., 139., ..., 128., 118., 108.],
          [131., 126., 130., ..., 116., 104.,  96.],
          [115., 112., 119., ..., 122., 113., 108.],
          ...,
          [119., 115., 121., ..., 123., 118., 115.],
          [136., 135., 136., ..., 122., 125., 124.],
          [144., 147., 138., ..., 127., 134., 135.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:40

analyse the exceptions in iter:48
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[191., 190., 190., ..., 135., 142., 146.],
          [187., 184., 179., ..., 147., 152., 153.],
          [181., 176., 165., ..., 154., 162., 158.],
          ...,
          [220., 221., 222., ..., 211., 214., 224.],
          [212., 220., 225., ..., 216., 216., 221.],
          [201., 212., 217., ..., 220., 217., 217.]],

         [[191., 192., 193., ..., 143., 149., 150.],
          [188., 187., 183., ..., 154., 158., 158.],
          [183., 178., 169., ..., 161., 167., 163.],
          ...,
          [245., 245., 244., ..., 238., 240., 248.],
          [238., 245., 247., ..., 242., 241., 244.],
          [226., 239., 243., ..., 242., 240., 238.]],

         [[168., 172., 174., ..., 123., 126., 127.],
          [165., 166., 163., ..., 134., 135., 134.],
          [160., 157., 148., ..., 140., 143., 139.],
          ...,
          [198., 199., 202., ..., 189., 193., 203.],
          [190., 198., 204., ..., 194., 195., 201.],
          [178., 190., 196., ..., 197., 196., 195.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:41

analyse the exceptions in iter:49
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[255., 255., 255., ..., 255., 255., 255.],
          [255., 252., 255., ..., 254., 254., 254.],
          [255., 252., 255., ..., 254., 254., 254.],
          ...,
          [255., 254., 254., ..., 254., 254., 254.],
          [255., 253., 254., ..., 254., 254., 254.],
          [255., 255., 255., ..., 255., 255., 255.]],

         [[255., 255., 255., ..., 255., 255., 255.],
          [255., 252., 255., ..., 254., 254., 254.],
          [255., 252., 255., ..., 254., 254., 254.],
          ...,
          [255., 254., 254., ..., 254., 254., 254.],
          [255., 253., 254., ..., 254., 254., 254.],
          [255., 255., 255., ..., 255., 255., 255.]],

         [[255., 255., 255., ..., 255., 255., 255.],
          [255., 252., 255., ..., 254., 254., 254.],
          [255., 252., 255., ..., 254., 254., 254.],
          ...,
          [255., 254., 254., ..., 254., 254., 254.],
          [255., 253., 254., ..., 254., 254., 254.],
          [255., 255., 255., ..., 255., 255., 255.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:42

final statics:
total operators:28
tensorflow --> nums:42,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:42
mindspore --> 
torch --> 

generate models:42

analyse the exceptions in iter:50
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 16.,  17.,  17., ...,  62.,  55.,  51.],
          [ 16.,  16.,  15., ...,  62.,  58.,  52.],
          [ 16.,  15.,  15., ...,  57.,  59.,  56.],
          ...,
          [ 96., 114., 119., ..., 128., 120., 117.],
          [118., 100., 114., ..., 139., 131., 121.],
          [144., 136., 105., ..., 145., 137., 131.]],

         [[ 76.,  77.,  77., ..., 106.,  99.,  94.],
          [ 76.,  76.,  75., ..., 109., 105., 100.],
          [ 76.,  75.,  75., ..., 110., 111., 109.],
          ...,
          [110., 127., 132., ..., 135., 130., 131.],
          [132., 113., 126., ..., 146., 140., 134.],
          [148., 140., 114., ..., 151., 144., 141.]],

         [[ 74.,  75.,  75., ...,  87.,  80.,  75.],
          [ 74.,  74.,  74., ...,  84.,  80.,  75.],
          [ 74.,  73.,  73., ...,  79.,  80.,  78.],
          ...,
          [138., 159., 167., ..., 153., 145., 142.],
          [159., 145., 163., ..., 159., 153., 147.],
          [173., 168., 143., ..., 170., 163., 158.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:43

analyse the exceptions in iter:51
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[213., 119.,  58., ..., 143., 140., 117.],
          [214., 128.,  62., ..., 138., 136., 111.],
          [215., 139.,  75., ..., 136., 134., 107.],
          ...,
          [118., 122., 129., ..., 158., 151., 145.],
          [111., 117., 128., ..., 153., 147., 141.],
          [110., 116., 127., ..., 141., 136., 139.]],

         [[221., 127.,  71., ..., 158., 142., 101.],
          [223., 137.,  75., ..., 152., 138.,  95.],
          [224., 148.,  88., ..., 151., 136.,  91.],
          ...,
          [ 45.,  45.,  46., ...,  65.,  68.,  67.],
          [ 38.,  42.,  47., ...,  62.,  59.,  63.],
          [ 38.,  40.,  48., ...,  55.,  52.,  58.]],

         [[221., 122.,  81., ..., 150., 136.,  87.],
          [220., 130.,  83., ..., 145., 133.,  82.],
          [219., 139.,  94., ..., 143., 131.,  77.],
          ...,
          [ 37.,  40.,  42., ...,  54.,  55.,  55.],
          [ 32.,  36.,  41., ...,  53.,  49.,  51.],
          [ 32.,  34.,  41., ...,  46.,  43.,  47.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:44

analyse the exceptions in iter:52
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 63.,  77.,  66., ...,  76.,  86., 114.],
          [ 72.,  70.,  64., ...,  84.,  81.,  88.],
          [ 56.,  70.,  54., ..., 139., 104.,  77.],
          ...,
          [118., 152., 175., ..., 102., 128., 179.],
          [137., 148., 148., ..., 121., 170., 203.],
          [171., 173., 153., ..., 167., 187., 174.]],

         [[ 70.,  88.,  88., ...,  91.,  94., 116.],
          [ 71.,  83.,  85., ...,  94.,  91.,  97.],
          [ 65.,  82.,  76., ..., 142., 114.,  93.],
          ...,
          [107., 135., 155., ...,  79., 105., 150.],
          [123., 129., 129., ...,  94., 142., 168.],
          [145., 146., 130., ..., 136., 157., 143.]],

         [[ 37.,  63.,  63., ...,  65.,  71.,  95.],
          [ 39.,  58.,  58., ...,  71.,  67.,  73.],
          [ 34.,  53.,  48., ..., 120.,  90.,  71.],
          ...,
          [ 85., 111., 133., ...,  63.,  85., 114.],
          [101., 109., 105., ...,  74., 116., 130.],
          [108., 107.,  96., ..., 107., 129., 115.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:45

analyse the exceptions in iter:55
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[156., 167., 169., ..., 243., 230., 208.],
          [174., 192., 172., ..., 237., 213., 186.],
          [192., 194., 174., ..., 226., 198., 195.],
          ...,
          [187., 211., 231., ..., 210., 217., 203.],
          [231., 220., 200., ..., 183., 189., 186.],
          [238., 238., 229., ..., 141., 151., 157.]],

         [[194., 212., 215., ..., 247., 235., 215.],
          [210., 229., 204., ..., 243., 221., 193.],
          [234., 230., 201., ..., 231., 208., 200.],
          ...,
          [211., 234., 244., ..., 204., 208., 192.],
          [238., 236., 219., ..., 170., 175., 169.],
          [242., 247., 239., ..., 126., 137., 141.]],

         [[129., 127., 129., ..., 226., 206., 180.],
          [147., 159., 163., ..., 223., 200., 169.],
          [145., 178., 194., ..., 218., 186., 165.],
          ...,
          [151., 180., 221., ..., 199., 210., 192.],
          [218., 209., 177., ..., 153., 160., 153.],
          [224., 232., 217., ..., 106., 117., 118.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:46

analyse the exceptions in iter:57
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 66.,  71.,  88., ...,  85.,  86.,  79.],
          [ 75.,  79.,  95., ...,  85.,  87.,  78.],
          [ 80.,  84.,  97., ...,  81.,  82.,  74.],
          ...,
          [ 79.,  87.,  60., ...,  35.,  26.,  20.],
          [ 77.,  70.,  37., ...,  79.,  77.,  66.],
          [ 78.,  63.,  31., ..., 140., 135., 128.]],

         [[ 73.,  77.,  86., ...,  80.,  81.,  73.],
          [ 81.,  84.,  92., ...,  79.,  80.,  72.],
          [ 85.,  88.,  93., ...,  75.,  74.,  68.],
          ...,
          [ 74.,  84.,  58., ...,  35.,  26.,  21.],
          [ 74.,  68.,  37., ...,  68.,  66.,  55.],
          [ 74.,  61.,  32., ..., 122., 117., 113.]],

         [[ 33.,  40.,  62., ...,  55.,  62.,  54.],
          [ 40.,  45.,  66., ...,  56.,  62.,  54.],
          [ 44.,  50.,  68., ...,  48.,  53.,  51.],
          ...,
          [ 59.,  69.,  43., ...,  22.,  14.,  10.],
          [ 59.,  53.,  22., ...,  60.,  58.,  50.],
          [ 58.,  44.,  15., ..., 116., 113., 111.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:47

analyse the exceptions in iter:58
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 97.,  96., 108., ..., 130., 117., 115.],
          [111., 104., 111., ..., 138., 128., 124.],
          [135., 132., 128., ..., 136., 130., 121.],
          ...,
          [124., 120., 126., ..., 114., 118., 119.],
          [126., 123., 125., ...,  96., 102., 102.],
          [124., 124., 126., ...,  97.,  96.,  81.]],

         [[ 83.,  84.,  98., ..., 113., 100., 100.],
          [ 97.,  91.,  99., ..., 121., 112., 111.],
          [120., 116., 113., ..., 119., 113., 109.],
          ...,
          [109., 104., 109., ...,  99., 105., 104.],
          [108., 106., 108., ...,  82.,  89.,  88.],
          [106., 107., 109., ...,  83.,  84.,  69.]],

         [[ 41.,  46.,  56., ...,  60.,  48.,  48.],
          [ 49.,  45.,  49., ...,  66.,  57.,  57.],
          [ 68.,  65.,  57., ...,  63.,  58.,  54.],
          ...,
          [ 55.,  51.,  57., ...,  57.,  61.,  55.],
          [ 54.,  52.,  53., ...,  44.,  49.,  46.],
          [ 52.,  53.,  55., ...,  42.,  45.,  36.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:48

analyse the exceptions in iter:59
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[252., 255., 194., ..., 255., 255., 253.],
          [251., 255., 211., ..., 246., 249., 251.],
          [251., 255., 218., ..., 249., 250., 252.],
          ...,
          [ 57.,  30.,  73., ...,  23.,  26., 112.],
          [ 89.,  16.,  26., ...,  21.,  32., 149.],
          [185.,  94.,  54., ...,  60., 129., 221.]],

         [[251., 255., 212., ..., 254., 253., 252.],
          [249., 255., 234., ..., 255., 255., 252.],
          [250., 255., 235., ..., 255., 254., 253.],
          ...,
          [111.,  86.,  88., ...,  60.,  81., 149.],
          [134.,  77.,  74., ...,  75.,  83., 174.],
          [208., 134.,  99., ..., 104., 159., 232.]],

         [[249., 255., 224., ..., 253., 252., 252.],
          [246., 254., 240., ..., 251., 252., 251.],
          [249., 255., 240., ..., 254., 252., 252.],
          ...,
          [159., 138., 110., ..., 100., 139., 186.],
          [177., 144., 136., ..., 140., 145., 198.],
          [229., 182., 159., ..., 159., 197., 240.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:49

analyse the exceptions in iter:60
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[201., 191., 194., ...,  83.,  39.,  36.],
          [ 57.,  62., 134., ...,  79.,  48.,  35.],
          [ 74., 123., 138., ..., 162., 132.,  56.],
          ...,
          [ 67.,  62.,  55., ...,  69.,  72.,  72.],
          [ 73.,  67.,  59., ...,  72.,  72.,  71.],
          [ 74.,  71.,  67., ...,  61.,  58.,  63.]],

         [[209., 204., 207., ...,  88.,  48.,  47.],
          [ 73.,  78., 148., ...,  91.,  59.,  45.],
          [ 99., 142., 153., ..., 175., 139.,  61.],
          ...,
          [ 80.,  72.,  62., ...,  78.,  80.,  82.],
          [ 87.,  77.,  67., ...,  81.,  81.,  81.],
          [ 89.,  84.,  79., ...,  73.,  69.,  75.]],

         [[211., 210., 216., ...,  82.,  33.,  24.],
          [ 79.,  92., 161., ...,  96.,  57.,  32.],
          [110., 165., 169., ..., 186., 145.,  56.],
          ...,
          [ 89.,  82.,  73., ...,  93.,  95.,  98.],
          [ 95.,  87.,  77., ...,  96.,  96.,  96.],
          [100.,  95.,  89., ...,  88.,  85.,  91.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:50

analyse the exceptions in iter:61
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[114., 117., 120., ..., 165., 125., 103.],
          [111., 116., 121., ..., 162., 127., 103.],
          [114., 121., 128., ..., 167., 132., 106.],
          ...,
          [165., 170., 175., ..., 185., 207., 201.],
          [175., 175., 180., ..., 187., 200., 193.],
          [173., 171., 177., ..., 205., 210., 202.]],

         [[119., 122., 126., ..., 166., 126., 103.],
          [116., 121., 126., ..., 163., 128., 103.],
          [119., 125., 132., ..., 168., 133., 108.],
          ...,
          [166., 171., 176., ..., 179., 199., 193.],
          [176., 176., 181., ..., 182., 194., 186.],
          [174., 172., 178., ..., 200., 204., 195.]],

         [[125., 126., 129., ..., 160., 121., 110.],
          [122., 127., 133., ..., 157., 123., 109.],
          [125., 136., 142., ..., 162., 126., 102.],
          ...,
          [161., 167., 171., ..., 168., 194., 185.],
          [171., 171., 176., ..., 162., 181., 178.],
          [169., 167., 173., ..., 182., 192., 187.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:51

analyse the exceptions in iter:62
tensorflow exception:
{'id': 41, 'name': 'conv2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 3, 32, 32), dtype=float32, numpy=
array([[[[[ 76.,  73.,  69., ...,  75.,  72.,  70.],
          [ 76.,  71.,  66., ...,  79.,  76.,  75.],
          [ 71.,  65.,  62., ...,  80.,  77.,  76.],
          ...,
          [ 11.,   9.,   6., ...,  31.,  32.,  29.],
          [  0.,   0.,   0., ...,  12.,  12.,  13.],
          [ 87.,  83.,  81., ...,  99.,  99., 102.]],

         [[118., 118., 116., ..., 135., 134., 135.],
          [122., 119., 117., ..., 136., 135., 137.],
          [120., 117., 116., ..., 133., 132., 135.],
          ...,
          [ 36.,  32.,  32., ...,  61.,  62.,  59.],
          [ 19.,  13.,   7., ...,  38.,  37.,  38.],
          [100.,  92.,  86., ..., 116., 115., 119.]],

         [[167., 164., 162., ..., 180., 178., 179.],
          [170., 166., 163., ..., 178., 177., 179.],
          [170., 165., 164., ..., 173., 172., 174.],
          ...,
          [ 66.,  61.,  61., ...,  79.,  80.,  77.],
          [ 46.,  40.,  36., ...,  55.,  55.,  56.],
          [115., 108., 103., ..., 127., 127., 130.]]]]], dtype=float32)>}
The Conv2D op currently only supports the NHWC tensor format on the CPU. The op was given the format: NCHW [Op:Conv2D]

generate models:52

final statics:
total operators:28
tensorflow --> nums:0,distinct_bugs:0
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
mindspore --> 
torch --> 

generate models:6

analyse output arrays in iter:19

pre layer res:
12:pad
{'name': 'pad', 'output': array([[9.1326581e+14, 2.3826146e+15, 4.3299348e+15, ..., 0.0000000e+00,
        0.0000000e+00, 0.0000000e+00]], dtype=float32), 'output_shape': TensorShape([1, 1048576]), 'from': [11], 'to': [22]}
tf node:
{'name': 'sin', 'output': array([[ 0.4114308 , -0.00672608,  0.62558836, ...,  0.        ,
         0.        ,  0.        ]], dtype=float32), 'output_shape': TensorShape([1, 1048576]), 'from': [12], 'to': [13]}
ms node:
{'name': 'sin', 'output': array([[-0.4300447 , -0.32020295,  0.90654594, ...,  0.        ,
         0.        ,  0.        ]], dtype=float32), 'output_shape': (1, 1048576), 'from': [12], 'to': [13]}
torch node:
{'name': 'sin', 'output': array([[-0.4300447 , -0.32020295,  0.90654594, ...,  0.        ,
         0.        ,  0.        ]], dtype=float32), 'output_shape': torch.Size([1, 1048576]), 'from': [12], 'to': [13]}

generate models:12

analyse output arrays in iter:22

pre layer res:
6:empty_merge_operator
{'name': 'empty_merge_operator', 'output': array([[[[ 5701.381 ,  8493.99  ,  8189.3574, ...,  8120.4053,
           8235.945 ,  5520.805 ],
         [ 8536.547 , 12590.528 , 12083.012 , ..., 12237.28  ,
          12377.466 ,  8269.068 ],
         [ 8484.252 , 12366.5625, 11774.727 , ..., 12269.611 ,
          12370.369 ,  8243.978 ],
         ...,
         [ 7949.0405, 11870.55  , 11635.824 , ..., 11821.805 ,
          11714.305 ,  7719.5054],
         [ 8401.498 , 12434.448 , 12153.3955, ..., 11658.248 ,
          11446.74  ,  7586.6226],
         [ 5824.137 ,  8631.488 ,  8435.651 , ...,  7720.0415,
           7516.008 ,  5005.7773]],

        [[ 5701.381 ,  8493.99  ,  8189.3574, ...,  8120.4053,
           8235.945 ,  5520.805 ],
         [ 8536.547 , 12590.528 , 12083.012 , ..., 12237.28  ,
          12377.466 ,  8269.068 ],
         [ 8484.252 , 12366.5625, 11774.727 , ..., 12269.611 ,
          12370.369 ,  8243.978 ],
         ...,
         [ 7949.0405, 11870.55  , 11635.824 , ..., 11821.805 ,
          11714.305 ,  7719.5054],
         [ 8401.498 , 12434.448 , 12153.3955, ..., 11658.248 ,
          11446.74  ,  7586.6226],
         [ 5824.137 ,  8631.488 ,  8435.651 , ...,  7720.0415,
           7516.008 ,  5005.7773]],

        [[ 5701.381 ,  8493.99  ,  8189.3574, ...,  8120.4053,
           8235.945 ,  5520.805 ],
         [ 8536.547 , 12590.528 , 12083.012 , ..., 12237.28  ,
          12377.466 ,  8269.068 ],
         [ 8484.252 , 12366.5625, 11774.727 , ..., 12269.611 ,
          12370.369 ,  8243.978 ],
         ...,
         [ 7949.0405, 11870.55  , 11635.824 , ..., 11821.805 ,
          11714.305 ,  7719.5054],
         [ 8401.498 , 12434.448 , 12153.3955, ..., 11658.248 ,
          11446.74  ,  7586.6226],
         [ 5824.137 ,  8631.488 ,  8435.651 , ...,  7720.0415,
           7516.008 ,  5005.7773]],

        ...,

        [[ 5701.381 ,  8493.99  ,  8189.3574, ...,  8120.4053,
           8235.945 ,  5520.805 ],
         [ 8536.547 , 12590.528 , 12083.012 , ..., 12237.28  ,
          12377.466 ,  8269.068 ],
         [ 8484.252 , 12366.5625, 11774.727 , ..., 12269.611 ,
          12370.369 ,  8243.978 ],
         ...,
         [ 7949.0405, 11870.55  , 11635.824 , ..., 11821.805 ,
          11714.305 ,  7719.5054],
         [ 8401.498 , 12434.448 , 12153.3955, ..., 11658.248 ,
          11446.74  ,  7586.6226],
         [ 5824.137 ,  8631.488 ,  8435.651 , ...,  7720.0415,
           7516.008 ,  5005.7773]],

        [[ 5701.381 ,  8493.99  ,  8189.3574, ...,  8120.4053,
           8235.945 ,  5520.805 ],
         [ 8536.547 , 12590.528 , 12083.012 , ..., 12237.28  ,
          12377.466 ,  8269.068 ],
         [ 8484.252 , 12366.5625, 11774.727 , ..., 12269.611 ,
          12370.369 ,  8243.978 ],
         ...,
         [ 7949.0405, 11870.55  , 11635.824 , ..., 11821.805 ,
          11714.305 ,  7719.5054],
         [ 8401.498 , 12434.448 , 12153.3955, ..., 11658.248 ,
          11446.74  ,  7586.6226],
         [ 5824.137 ,  8631.488 ,  8435.651 , ...,  7720.0415,
           7516.008 ,  5005.7773]],

        [[ 5701.381 ,  8493.99  ,  8189.3574, ...,  8120.4053,
           8235.945 ,  5520.805 ],
         [ 8536.547 , 12590.528 , 12083.012 , ..., 12237.28  ,
          12377.466 ,  8269.068 ],
         [ 8484.252 , 12366.5625, 11774.727 , ..., 12269.611 ,
          12370.369 ,  8243.978 ],
         ...,
         [ 7949.0405, 11870.55  , 11635.824 , ..., 11821.805 ,
          11714.305 ,  7719.5054],
         [ 8401.498 , 12434.448 , 12153.3955, ..., 11658.248 ,
          11446.74  ,  7586.6226],
         [ 5824.137 ,  8631.488 ,  8435.651 , ...,  7720.0415,
           7516.008 ,  5005.7773]]]], dtype=float32), 'output_shape': TensorShape([1, 1024, 32, 32]), 'from': [3, 2], 'to': [8, 4, 11]}
tf node:
{'name': 'cos', 'output': array([[[[-0.81975865,  0.6399978 , -0.7146827 , ..., -0.8186523 ,
           0.2572459 , -0.51748824],
         [-0.6677344 ,  0.5611388 ,  0.9020188 , ..., -0.7130989 ,
           0.9174256 ,  0.9224202 ],
         [-0.37184164,  0.31169924,  0.99930453, ...,  0.12092288,
           0.3410815 ,  0.9054252 ],
         ...,
         [ 0.68869126, -0.04195078,  0.8050894 , ..., -0.9999641 ,
          -0.76849043, -0.81837356],
         [ 0.6376973 ,  0.9996994 , -0.14382686, ..., -0.97960895,
           0.34045523, -0.9480651 ],
         [ 0.9302977 , -0.03752567, -0.8892505 , ..., -0.40998927,
           0.24993315, -0.3434142 ]],

        [[-0.81975865,  0.6399978 , -0.7146827 , ..., -0.8186523 ,
           0.2572459 , -0.51748824],
         [-0.6677344 ,  0.5611388 ,  0.9020188 , ..., -0.7130989 ,
           0.9174256 ,  0.9224202 ],
         [-0.37184164,  0.31169924,  0.99930453, ...,  0.12092288,
           0.3410815 ,  0.9054252 ],
         ...,
         [ 0.68869126, -0.04195078,  0.8050894 , ..., -0.9999641 ,
          -0.76849043, -0.81837356],
         [ 0.6376973 ,  0.9996994 , -0.14382686, ..., -0.97960895,
           0.34045523, -0.9480651 ],
         [ 0.9302977 , -0.03752567, -0.8892505 , ..., -0.40998927,
           0.24993315, -0.3434142 ]],

        [[-0.81975865,  0.6399978 , -0.7146827 , ..., -0.8186523 ,
           0.2572459 , -0.51748824],
         [-0.6677344 ,  0.5611388 ,  0.9020188 , ..., -0.7130989 ,
           0.9174256 ,  0.9224202 ],
         [-0.37184164,  0.31169924,  0.99930453, ...,  0.12092288,
           0.3410815 ,  0.9054252 ],
         ...,
         [ 0.68869126, -0.04195078,  0.8050894 , ..., -0.9999641 ,
          -0.76849043, -0.81837356],
         [ 0.6376973 ,  0.9996994 , -0.14382686, ..., -0.97960895,
           0.34045523, -0.9480651 ],
         [ 0.9302977 , -0.03752567, -0.8892505 , ..., -0.40998927,
           0.24993315, -0.3434142 ]],

        ...,

        [[-0.81975865,  0.6399978 , -0.7146827 , ..., -0.8186523 ,
           0.2572459 , -0.51748824],
         [-0.6677344 ,  0.5611388 ,  0.9020188 , ..., -0.7130989 ,
           0.9174256 ,  0.9224202 ],
         [-0.37184164,  0.31169924,  0.99930453, ...,  0.12092288,
           0.3410815 ,  0.9054252 ],
         ...,
         [ 0.68869126, -0.04195078,  0.8050894 , ..., -0.9999641 ,
          -0.76849043, -0.81837356],
         [ 0.6376973 ,  0.9996994 , -0.14382686, ..., -0.97960895,
           0.34045523, -0.9480651 ],
         [ 0.9302977 , -0.03752567, -0.8892505 , ..., -0.40998927,
           0.24993315, -0.3434142 ]],

        [[-0.81975865,  0.6399978 , -0.7146827 , ..., -0.8186523 ,
           0.2572459 , -0.51748824],
         [-0.6677344 ,  0.5611388 ,  0.9020188 , ..., -0.7130989 ,
           0.9174256 ,  0.9224202 ],
         [-0.37184164,  0.31169924,  0.99930453, ...,  0.12092288,
           0.3410815 ,  0.9054252 ],
         ...,
         [ 0.68869126, -0.04195078,  0.8050894 , ..., -0.9999641 ,
          -0.76849043, -0.81837356],
         [ 0.6376973 ,  0.9996994 , -0.14382686, ..., -0.97960895,
           0.34045523, -0.9480651 ],
         [ 0.9302977 , -0.03752567, -0.8892505 , ..., -0.40998927,
           0.24993315, -0.3434142 ]],

        [[-0.81975865,  0.6399978 , -0.7146827 , ..., -0.8186523 ,
           0.2572459 , -0.51748824],
         [-0.6677344 ,  0.5611388 ,  0.9020188 , ..., -0.7130989 ,
           0.9174256 ,  0.9224202 ],
         [-0.37184164,  0.31169924,  0.99930453, ...,  0.12092288,
           0.3410815 ,  0.9054252 ],
         ...,
         [ 0.68869126, -0.04195078,  0.8050894 , ..., -0.9999641 ,
          -0.76849043, -0.81837356],
         [ 0.6376973 ,  0.9996994 , -0.14382686, ..., -0.97960895,
           0.34045523, -0.9480651 ],
         [ 0.9302977 , -0.03752567, -0.8892505 , ..., -0.40998927,
           0.24993315, -0.3434142 ]]]], dtype=float32), 'output_shape': TensorShape([1, 1024, 32, 32]), 'from': [6], 'to': [7]}
ms node:
{'name': 'cos', 'output': array([[[[-0.81807727,  0.63774395, -0.7160474 , ..., -0.8161206 ,
           0.25157934, -0.51623416],
         [-0.67063713,  0.5619469 ,  0.9015968 , ..., -0.719233  ,
           0.91189986,  0.9254091 ],
         [-0.37002784,  0.31169924,  0.99926764, ...,  0.10734045,
           0.32265756,  0.909933  ],
         ...,
         [ 0.6862091 , -0.0390235 ,  0.8050894 , ..., -0.9998829 ,
          -0.76472807, -0.820333  ],
         [ 0.6376973 ,  0.9999301 , -0.13996013, ..., -0.9790161 ,
           0.34412554, -0.94790965],
         [ 0.93047667, -0.04240458, -0.8896968 , ..., -0.4113249 ,
           0.2508786 , -0.34433118]],

        [[-0.81807727,  0.63774395, -0.7160474 , ..., -0.8161206 ,
           0.25157934, -0.51623416],
         [-0.67063713,  0.5619469 ,  0.9015968 , ..., -0.719233  ,
           0.91189986,  0.9254091 ],
         [-0.37002784,  0.31169924,  0.99926764, ...,  0.10734045,
           0.32265756,  0.909933  ],
         ...,
         [ 0.6862091 , -0.0390235 ,  0.8050894 , ..., -0.9998829 ,
          -0.76472807, -0.820333  ],
         [ 0.6376973 ,  0.9999301 , -0.13996013, ..., -0.9790161 ,
           0.34412554, -0.94790965],
         [ 0.93047667, -0.04240458, -0.8896968 , ..., -0.4113249 ,
           0.2508786 , -0.34433118]],

        [[-0.81807727,  0.63774395, -0.7160474 , ..., -0.8161206 ,
           0.25157934, -0.51623416],
         [-0.67063713,  0.5619469 ,  0.9015968 , ..., -0.719233  ,
           0.91189986,  0.9254091 ],
         [-0.37002784,  0.31169924,  0.99926764, ...,  0.10734045,
           0.32265756,  0.909933  ],
         ...,
         [ 0.6862091 , -0.0390235 ,  0.8050894 , ..., -0.9998829 ,
          -0.76472807, -0.820333  ],
         [ 0.6376973 ,  0.9999301 , -0.13996013, ..., -0.9790161 ,
           0.34412554, -0.94790965],
         [ 0.93047667, -0.04240458, -0.8896968 , ..., -0.4113249 ,
           0.2508786 , -0.34433118]],

        ...,

        [[-0.81807727,  0.63774395, -0.7160474 , ..., -0.8161206 ,
           0.25157934, -0.51623416],
         [-0.67063713,  0.5619469 ,  0.9015968 , ..., -0.719233  ,
           0.91189986,  0.9254091 ],
         [-0.37002784,  0.31169924,  0.99926764, ...,  0.10734045,
           0.32265756,  0.909933  ],
         ...,
         [ 0.6862091 , -0.0390235 ,  0.8050894 , ..., -0.9998829 ,
          -0.76472807, -0.820333  ],
         [ 0.6376973 ,  0.9999301 , -0.13996013, ..., -0.9790161 ,
           0.34412554, -0.94790965],
         [ 0.93047667, -0.04240458, -0.8896968 , ..., -0.4113249 ,
           0.2508786 , -0.34433118]],

        [[-0.81807727,  0.63774395, -0.7160474 , ..., -0.8161206 ,
           0.25157934, -0.51623416],
         [-0.67063713,  0.5619469 ,  0.9015968 , ..., -0.719233  ,
           0.91189986,  0.9254091 ],
         [-0.37002784,  0.31169924,  0.99926764, ...,  0.10734045,
           0.32265756,  0.909933  ],
         ...,
         [ 0.6862091 , -0.0390235 ,  0.8050894 , ..., -0.9998829 ,
          -0.76472807, -0.820333  ],
         [ 0.6376973 ,  0.9999301 , -0.13996013, ..., -0.9790161 ,
           0.34412554, -0.94790965],
         [ 0.93047667, -0.04240458, -0.8896968 , ..., -0.4113249 ,
           0.2508786 , -0.34433118]],

        [[-0.81807727,  0.63774395, -0.7160474 , ..., -0.8161206 ,
           0.25157934, -0.51623416],
         [-0.67063713,  0.5619469 ,  0.9015968 , ..., -0.719233  ,
           0.91189986,  0.9254091 ],
         [-0.37002784,  0.31169924,  0.99926764, ...,  0.10734045,
           0.32265756,  0.909933  ],
         ...,
         [ 0.6862091 , -0.0390235 ,  0.8050894 , ..., -0.9998829 ,
          -0.76472807, -0.820333  ],
         [ 0.6376973 ,  0.9999301 , -0.13996013, ..., -0.9790161 ,
           0.34412554, -0.94790965],
         [ 0.93047667, -0.04240458, -0.8896968 , ..., -0.4113249 ,
           0.2508786 , -0.34433118]]]], dtype=float32), 'output_shape': (1, 1024, 32, 32), 'from': [6], 'to': [7]}
torch node:
{'name': 'cos', 'output': array([[[[-0.8135593 ,  0.626393  , -0.7187687 , ..., -0.8239448 ,
           0.27325258, -0.50784594],
         [-0.6785667 ,  0.5779944 ,  0.8960326 , ..., -0.75549453,
           0.89033705,  0.9131164 ],
         [-0.36275864,  0.3320398 ,  0.9999597 , ...,  0.10442723,
           0.29572612,  0.90292233],
         ...,
         [ 0.68050534, -0.05073038,  0.8259916 , ..., -0.9999847 ,
          -0.7716056 , -0.80468076],
         [ 0.6140894 ,  0.99701744, -0.23583469, ..., -0.983699  ,
           0.38684312, -0.9505211 ],
         [ 0.9340099 , -0.00335479, -0.8773509 , ..., -0.39703324,
           0.24141349, -0.33330566]],

        [[-0.8135593 ,  0.626393  , -0.7187687 , ..., -0.8239448 ,
           0.27325258, -0.50784594],
         [-0.6785667 ,  0.5779944 ,  0.8960326 , ..., -0.75549453,
           0.89033705,  0.9131164 ],
         [-0.36275864,  0.3320398 ,  0.9999597 , ...,  0.10442723,
           0.29572612,  0.90292233],
         ...,
         [ 0.68050534, -0.05073038,  0.8259916 , ..., -0.9999847 ,
          -0.7716056 , -0.80468076],
         [ 0.6140894 ,  0.99701744, -0.23583469, ..., -0.983699  ,
           0.38684312, -0.9505211 ],
         [ 0.9340099 , -0.00335479, -0.8773509 , ..., -0.39703324,
           0.24141349, -0.33330566]],

        [[-0.8135593 ,  0.626393  , -0.7187687 , ..., -0.8239448 ,
           0.27325258, -0.50784594],
         [-0.6785667 ,  0.5779944 ,  0.8960326 , ..., -0.75549453,
           0.89033705,  0.9131164 ],
         [-0.36275864,  0.3320398 ,  0.9999597 , ...,  0.10442723,
           0.29572612,  0.90292233],
         ...,
         [ 0.68050534, -0.05073038,  0.8259916 , ..., -0.9999847 ,
          -0.7716056 , -0.80468076],
         [ 0.6140894 ,  0.99701744, -0.23583469, ..., -0.983699  ,
           0.38684312, -0.9505211 ],
         [ 0.9340099 , -0.00335479, -0.8773509 , ..., -0.39703324,
           0.24141349, -0.33330566]],

        ...,

        [[-0.8135593 ,  0.626393  , -0.7187687 , ..., -0.8239448 ,
           0.27325258, -0.50784594],
         [-0.6785667 ,  0.5779944 ,  0.8960326 , ..., -0.75549453,
           0.89033705,  0.9131164 ],
         [-0.36275864,  0.3320398 ,  0.9999597 , ...,  0.10442723,
           0.29572612,  0.90292233],
         ...,
         [ 0.68050534, -0.05073038,  0.8259916 , ..., -0.9999847 ,
          -0.7716056 , -0.80468076],
         [ 0.6140894 ,  0.99701744, -0.23583469, ..., -0.983699  ,
           0.38684312, -0.9505211 ],
         [ 0.9340099 , -0.00335479, -0.8773509 , ..., -0.39703324,
           0.24141349, -0.33330566]],

        [[-0.8135593 ,  0.626393  , -0.7187687 , ..., -0.8239448 ,
           0.27325258, -0.50784594],
         [-0.6785667 ,  0.5779944 ,  0.8960326 , ..., -0.75549453,
           0.89033705,  0.9131164 ],
         [-0.36275864,  0.3320398 ,  0.9999597 , ...,  0.10442723,
           0.29572612,  0.90292233],
         ...,
         [ 0.68050534, -0.05073038,  0.8259916 , ..., -0.9999847 ,
          -0.7716056 , -0.80468076],
         [ 0.6140894 ,  0.99701744, -0.23583469, ..., -0.983699  ,
           0.38684312, -0.9505211 ],
         [ 0.9340099 , -0.00335479, -0.8773509 , ..., -0.39703324,
           0.24141349, -0.33330566]],

        [[-0.8135593 ,  0.626393  , -0.7187687 , ..., -0.8239448 ,
           0.27325258, -0.50784594],
         [-0.6785667 ,  0.5779944 ,  0.8960326 , ..., -0.75549453,
           0.89033705,  0.9131164 ],
         [-0.36275864,  0.3320398 ,  0.9999597 , ...,  0.10442723,
           0.29572612,  0.90292233],
         ...,
         [ 0.68050534, -0.05073038,  0.8259916 , ..., -0.9999847 ,
          -0.7716056 , -0.80468076],
         [ 0.6140894 ,  0.99701744, -0.23583469, ..., -0.983699  ,
           0.38684312, -0.9505211 ],
         [ 0.9340099 , -0.00335479, -0.8773509 , ..., -0.39703324,
           0.24141349, -0.33330566]]]], dtype=float32), 'output_shape': torch.Size([1, 1024, 32, 32]), 'from': [6], 'to': [7]}

generate models:15

analyse output arrays in iter:34

pre layer res:
1:conv2d
{'name': 'conv2d', 'output': array([[[[-113.39651  ,   -6.7985406, -127.84839  , ...,  118.20411  ,
          -123.95142  ,   94.61239  ],
         [ -63.832    ,  125.68926  ,  -74.32131  , ...,   99.77416  ,
          -127.93847  ,   94.61239  ],
         [ -11.307363 , -127.84839  ,  127.44825  , ...,   31.38848  ,
           -32.485615 ,  114.932884 ],
         ...,
         [-127.08807  ,   86.62979  ,   80.62268  , ...,   56.84996  ,
           -85.792076 ,  -34.67219  ],
         [  51.71335  ,  117.31639  ,  -55.832527 , ...,  122.07912  ,
          -127.98851  ,  -97.610054 ],
         [  -2.2697036,   54.81092  ,  106.46491  , ...,  127.99883  ,
           116.39162  ,   35.7615   ]],

        [[-113.39651  ,   -6.7985406, -127.84839  , ...,  118.20411  ,
          -123.95142  ,   94.61239  ],
         [ -63.832    ,  125.68926  ,  -74.32131  , ...,   99.77416  ,
          -127.93847  ,   94.61239  ],
         [ -11.307363 , -127.84839  ,  127.44825  , ...,   31.38848  ,
           -32.485615 ,  114.932884 ],
         ...,
         [-127.08807  ,   86.62979  ,   80.62268  , ...,   56.84996  ,
           -85.792076 ,  -34.67219  ],
         [  51.71335  ,  117.31639  ,  -55.832527 , ...,  122.07912  ,
          -127.98851  ,  -97.610054 ],
         [  -2.2697036,   54.81092  ,  106.46491  , ...,  127.99883  ,
           116.39162  ,   35.7615   ]],

        [[-113.39651  ,   -6.7985406, -127.84839  , ...,  118.20411  ,
          -123.95142  ,   94.61239  ],
         [ -63.832    ,  125.68926  ,  -74.32131  , ...,   99.77416  ,
          -127.93847  ,   94.61239  ],
         [ -11.307363 , -127.84839  ,  127.44825  , ...,   31.38848  ,
           -32.485615 ,  114.932884 ],
         ...,
         [-127.08807  ,   86.62979  ,   80.62268  , ...,   56.84996  ,
           -85.792076 ,  -34.67219  ],
         [  51.71335  ,  117.31639  ,  -55.832527 , ...,  122.07912  ,
          -127.98851  ,  -97.610054 ],
         [  -2.2697036,   54.81092  ,  106.46491  , ...,  127.99883  ,
           116.39162  ,   35.7615   ]],

        ...,

        [[-113.39651  ,   -6.7985406, -127.84839  , ...,  118.20411  ,
          -123.95142  ,   94.61239  ],
         [ -63.832    ,  125.68926  ,  -74.32131  , ...,   99.77416  ,
          -127.93847  ,   94.61239  ],
         [ -11.307363 , -127.84839  ,  127.44825  , ...,   31.38848  ,
           -32.485615 ,  114.932884 ],
         ...,
         [-127.08807  ,   86.62979  ,   80.62268  , ...,   56.84996  ,
           -85.792076 ,  -34.67219  ],
         [  51.71335  ,  117.31639  ,  -55.832527 , ...,  122.07912  ,
          -127.98851  ,  -97.610054 ],
         [  -2.2697036,   54.81092  ,  106.46491  , ...,  127.99883  ,
           116.39162  ,   35.7615   ]],

        [[-113.39651  ,   -6.7985406, -127.84839  , ...,  118.20411  ,
          -123.95142  ,   94.61239  ],
         [ -63.832    ,  125.68926  ,  -74.32131  , ...,   99.77416  ,
          -127.93847  ,   94.61239  ],
         [ -11.307363 , -127.84839  ,  127.44825  , ...,   31.38848  ,
           -32.485615 ,  114.932884 ],
         ...,
         [-127.08807  ,   86.62979  ,   80.62268  , ...,   56.84996  ,
           -85.792076 ,  -34.67219  ],
         [  51.71335  ,  117.31639  ,  -55.832527 , ...,  122.07912  ,
          -127.98851  ,  -97.610054 ],
         [  -2.2697036,   54.81092  ,  106.46491  , ...,  127.99883  ,
           116.39162  ,   35.7615   ]],

        [[-113.39651  ,   -6.7985406, -127.84839  , ...,  118.20411  ,
          -123.95142  ,   94.61239  ],
         [ -63.832    ,  125.68926  ,  -74.32131  , ...,   99.77416  ,
          -127.93847  ,   94.61239  ],
         [ -11.307363 , -127.84839  ,  127.44825  , ...,   31.38848  ,
           -32.485615 ,  114.932884 ],
         ...,
         [-127.08807  ,   86.62979  ,   80.62268  , ...,   56.84996  ,
           -85.792076 ,  -34.67219  ],
         [  51.71335  ,  117.31639  ,  -55.832527 , ...,  122.07912  ,
          -127.98851  ,  -97.610054 ],
         [  -2.2697036,   54.81092  ,  106.46491  , ...,  127.99883  ,
           116.39162  ,   35.7615   ]]]], dtype=float32), 'output_shape': TensorShape([1, 1024, 32, 32]), 'from': [13], 'to': [3, 3]}
1:conv2d
{'name': 'conv2d', 'output': array([[[[-113.39651  ,   -6.7985406, -127.84839  , ...,  118.20411  ,
          -123.95142  ,   94.61239  ],
         [ -63.832    ,  125.68926  ,  -74.32131  , ...,   99.77416  ,
          -127.93847  ,   94.61239  ],
         [ -11.307363 , -127.84839  ,  127.44825  , ...,   31.38848  ,
           -32.485615 ,  114.932884 ],
         ...,
         [-127.08807  ,   86.62979  ,   80.62268  , ...,   56.84996  ,
           -85.792076 ,  -34.67219  ],
         [  51.71335  ,  117.31639  ,  -55.832527 , ...,  122.07912  ,
          -127.98851  ,  -97.610054 ],
         [  -2.2697036,   54.81092  ,  106.46491  , ...,  127.99883  ,
           116.39162  ,   35.7615   ]],

        [[-113.39651  ,   -6.7985406, -127.84839  , ...,  118.20411  ,
          -123.95142  ,   94.61239  ],
         [ -63.832    ,  125.68926  ,  -74.32131  , ...,   99.77416  ,
          -127.93847  ,   94.61239  ],
         [ -11.307363 , -127.84839  ,  127.44825  , ...,   31.38848  ,
           -32.485615 ,  114.932884 ],
         ...,
         [-127.08807  ,   86.62979  ,   80.62268  , ...,   56.84996  ,
           -85.792076 ,  -34.67219  ],
         [  51.71335  ,  117.31639  ,  -55.832527 , ...,  122.07912  ,
          -127.98851  ,  -97.610054 ],
         [  -2.2697036,   54.81092  ,  106.46491  , ...,  127.99883  ,
           116.39162  ,   35.7615   ]],

        [[-113.39651  ,   -6.7985406, -127.84839  , ...,  118.20411  ,
          -123.95142  ,   94.61239  ],
         [ -63.832    ,  125.68926  ,  -74.32131  , ...,   99.77416  ,
          -127.93847  ,   94.61239  ],
         [ -11.307363 , -127.84839  ,  127.44825  , ...,   31.38848  ,
           -32.485615 ,  114.932884 ],
         ...,
         [-127.08807  ,   86.62979  ,   80.62268  , ...,   56.84996  ,
           -85.792076 ,  -34.67219  ],
         [  51.71335  ,  117.31639  ,  -55.832527 , ...,  122.07912  ,
          -127.98851  ,  -97.610054 ],
         [  -2.2697036,   54.81092  ,  106.46491  , ...,  127.99883  ,
           116.39162  ,   35.7615   ]],

        ...,

        [[-113.39651  ,   -6.7985406, -127.84839  , ...,  118.20411  ,
          -123.95142  ,   94.61239  ],
         [ -63.832    ,  125.68926  ,  -74.32131  , ...,   99.77416  ,
          -127.93847  ,   94.61239  ],
         [ -11.307363 , -127.84839  ,  127.44825  , ...,   31.38848  ,
           -32.485615 ,  114.932884 ],
         ...,
         [-127.08807  ,   86.62979  ,   80.62268  , ...,   56.84996  ,
           -85.792076 ,  -34.67219  ],
         [  51.71335  ,  117.31639  ,  -55.832527 , ...,  122.07912  ,
          -127.98851  ,  -97.610054 ],
         [  -2.2697036,   54.81092  ,  106.46491  , ...,  127.99883  ,
           116.39162  ,   35.7615   ]],

        [[-113.39651  ,   -6.7985406, -127.84839  , ...,  118.20411  ,
          -123.95142  ,   94.61239  ],
         [ -63.832    ,  125.68926  ,  -74.32131  , ...,   99.77416  ,
          -127.93847  ,   94.61239  ],
         [ -11.307363 , -127.84839  ,  127.44825  , ...,   31.38848  ,
           -32.485615 ,  114.932884 ],
         ...,
         [-127.08807  ,   86.62979  ,   80.62268  , ...,   56.84996  ,
           -85.792076 ,  -34.67219  ],
         [  51.71335  ,  117.31639  ,  -55.832527 , ...,  122.07912  ,
          -127.98851  ,  -97.610054 ],
         [  -2.2697036,   54.81092  ,  106.46491  , ...,  127.99883  ,
           116.39162  ,   35.7615   ]],

        [[-113.39651  ,   -6.7985406, -127.84839  , ...,  118.20411  ,
          -123.95142  ,   94.61239  ],
         [ -63.832    ,  125.68926  ,  -74.32131  , ...,   99.77416  ,
          -127.93847  ,   94.61239  ],
         [ -11.307363 , -127.84839  ,  127.44825  , ...,   31.38848  ,
           -32.485615 ,  114.932884 ],
         ...,
         [-127.08807  ,   86.62979  ,   80.62268  , ...,   56.84996  ,
           -85.792076 ,  -34.67219  ],
         [  51.71335  ,  117.31639  ,  -55.832527 , ...,  122.07912  ,
          -127.98851  ,  -97.610054 ],
         [  -2.2697036,   54.81092  ,  106.46491  , ...,  127.99883  ,
           116.39162  ,   35.7615   ]]]], dtype=float32), 'output_shape': TensorShape([1, 1024, 32, 32]), 'from': [13], 'to': [3, 3]}
tf node:
{'name': 'empty_merge_operator', 'output': array([[[[-113.39651  ,   -6.7985406, -127.84839  , ...,  118.20411  ,
          -123.95142  ,   94.61239  ],
         [ -63.832    ,  125.68926  ,  -74.32131  , ...,   99.77416  ,
          -127.93847  ,   94.61239  ],
         [ -11.307363 , -127.84839  ,  127.44825  , ...,   31.38848  ,
           -32.485615 ,  114.932884 ],
         ...,
         [-127.08807  ,   86.62979  ,   80.62268  , ...,   56.84996  ,
           -85.792076 ,  -34.67219  ],
         [  51.71335  ,  117.31639  ,  -55.832527 , ...,  122.07912  ,
          -127.98851  ,  -97.610054 ],
         [  -2.2697036,   54.81092  ,  106.46491  , ...,  127.99883  ,
           116.39162  ,   35.7615   ]],

        [[-113.39651  ,   -6.7985406, -127.84839  , ...,  118.20411  ,
          -123.95142  ,   94.61239  ],
         [ -63.832    ,  125.68926  ,  -74.32131  , ...,   99.77416  ,
          -127.93847  ,   94.61239  ],
         [ -11.307363 , -127.84839  ,  127.44825  , ...,   31.38848  ,
           -32.485615 ,  114.932884 ],
         ...,
         [-127.08807  ,   86.62979  ,   80.62268  , ...,   56.84996  ,
           -85.792076 ,  -34.67219  ],
         [  51.71335  ,  117.31639  ,  -55.832527 , ...,  122.07912  ,
          -127.98851  ,  -97.610054 ],
         [  -2.2697036,   54.81092  ,  106.46491  , ...,  127.99883  ,
           116.39162  ,   35.7615   ]],

        [[-113.39651  ,   -6.7985406, -127.84839  , ...,  118.20411  ,
          -123.95142  ,   94.61239  ],
         [ -63.832    ,  125.68926  ,  -74.32131  , ...,   99.77416  ,
          -127.93847  ,   94.61239  ],
         [ -11.307363 , -127.84839  ,  127.44825  , ...,   31.38848  ,
           -32.485615 ,  114.932884 ],
         ...,
         [-127.08807  ,   86.62979  ,   80.62268  , ...,   56.84996  ,
           -85.792076 ,  -34.67219  ],
         [  51.71335  ,  117.31639  ,  -55.832527 , ...,  122.07912  ,
          -127.98851  ,  -97.610054 ],
         [  -2.2697036,   54.81092  ,  106.46491  , ...,  127.99883  ,
           116.39162  ,   35.7615   ]],

        ...,

        [[-113.39651  ,   -6.7985406, -127.84839  , ...,  118.20411  ,
          -123.95142  ,   94.61239  ],
         [ -63.832    ,  125.68926  ,  -74.32131  , ...,   99.77416  ,
          -127.93847  ,   94.61239  ],
         [ -11.307363 , -127.84839  ,  127.44825  , ...,   31.38848  ,
           -32.485615 ,  114.932884 ],
         ...,
         [-127.08807  ,   86.62979  ,   80.62268  , ...,   56.84996  ,
           -85.792076 ,  -34.67219  ],
         [  51.71335  ,  117.31639  ,  -55.832527 , ...,  122.07912  ,
          -127.98851  ,  -97.610054 ],
         [  -2.2697036,   54.81092  ,  106.46491  , ...,  127.99883  ,
           116.39162  ,   35.7615   ]],

        [[-113.39651  ,   -6.7985406, -127.84839  , ...,  118.20411  ,
          -123.95142  ,   94.61239  ],
         [ -63.832    ,  125.68926  ,  -74.32131  , ...,   99.77416  ,
          -127.93847  ,   94.61239  ],
         [ -11.307363 , -127.84839  ,  127.44825  , ...,   31.38848  ,
           -32.485615 ,  114.932884 ],
         ...,
         [-127.08807  ,   86.62979  ,   80.62268  , ...,   56.84996  ,
           -85.792076 ,  -34.67219  ],
         [  51.71335  ,  117.31639  ,  -55.832527 , ...,  122.07912  ,
          -127.98851  ,  -97.610054 ],
         [  -2.2697036,   54.81092  ,  106.46491  , ...,  127.99883  ,
           116.39162  ,   35.7615   ]],

        [[-113.39651  ,   -6.7985406, -127.84839  , ...,  118.20411  ,
          -123.95142  ,   94.61239  ],
         [ -63.832    ,  125.68926  ,  -74.32131  , ...,   99.77416  ,
          -127.93847  ,   94.61239  ],
         [ -11.307363 , -127.84839  ,  127.44825  , ...,   31.38848  ,
           -32.485615 ,  114.932884 ],
         ...,
         [-127.08807  ,   86.62979  ,   80.62268  , ...,   56.84996  ,
           -85.792076 ,  -34.67219  ],
         [  51.71335  ,  117.31639  ,  -55.832527 , ...,  122.07912  ,
          -127.98851  ,  -97.610054 ],
         [  -2.2697036,   54.81092  ,  106.46491  , ...,  127.99883  ,
           116.39162  ,   35.7615   ]]]], dtype=float32), 'output_shape': TensorShape([1, 1024, 32, 32]), 'from': [1, 1], 'to': [4, 20, 20]}
ms node:
{'name': 'empty_merge_operator', 'output': array([[[[58672.914, 58439.574, 57112.008, ..., 52927.387, 52552.254,
          50045.914],
         [57236.01 , 56767.855, 56995.355, ..., 53646.234, 51832.004,
          50045.914],
         [58799.293, 57112.008, 57487.965, ..., 53881.96 , 51237.97 ,
          50767.184],
         ...,
         [49552.055, 51365.414, 52325.04 , ..., 52083.555, 48714.637,
          45957.832],
         [46323.234, 47647.332, 49436.51 , ..., 48487.63 , 46552.   ,
          45713.9  ],
         [47879.86 , 46803.426, 47766.656, ..., 43928.   , 42367.273,
          43322.234]],

        [[58672.914, 58439.574, 57112.008, ..., 52927.387, 52552.254,
          50045.914],
         [57236.01 , 56767.855, 56995.355, ..., 53646.234, 51832.004,
          50045.914],
         [58799.293, 57112.008, 57487.965, ..., 53881.96 , 51237.97 ,
          50767.184],
         ...,
         [49552.055, 51365.414, 52325.04 , ..., 52083.555, 48714.637,
          45957.832],
         [46323.234, 47647.332, 49436.51 , ..., 48487.63 , 46552.   ,
          45713.9  ],
         [47879.86 , 46803.426, 47766.656, ..., 43928.   , 42367.273,
          43322.234]],

        [[58672.914, 58439.574, 57112.008, ..., 52927.387, 52552.254,
          50045.914],
         [57236.01 , 56767.855, 56995.355, ..., 53646.234, 51832.004,
          50045.914],
         [58799.293, 57112.008, 57487.965, ..., 53881.96 , 51237.97 ,
          50767.184],
         ...,
         [49552.055, 51365.414, 52325.04 , ..., 52083.555, 48714.637,
          45957.832],
         [46323.234, 47647.332, 49436.51 , ..., 48487.63 , 46552.   ,
          45713.9  ],
         [47879.86 , 46803.426, 47766.656, ..., 43928.   , 42367.273,
          43322.234]],

        ...,

        [[58672.914, 58439.574, 57112.008, ..., 52927.387, 52552.254,
          50045.914],
         [57236.01 , 56767.855, 56995.355, ..., 53646.234, 51832.004,
          50045.914],
         [58799.293, 57112.008, 57487.965, ..., 53881.96 , 51237.97 ,
          50767.184],
         ...,
         [49552.055, 51365.414, 52325.04 , ..., 52083.555, 48714.637,
          45957.832],
         [46323.234, 47647.332, 49436.51 , ..., 48487.63 , 46552.   ,
          45713.9  ],
         [47879.86 , 46803.426, 47766.656, ..., 43928.   , 42367.273,
          43322.234]],

        [[58672.914, 58439.574, 57112.008, ..., 52927.387, 52552.254,
          50045.914],
         [57236.01 , 56767.855, 56995.355, ..., 53646.234, 51832.004,
          50045.914],
         [58799.293, 57112.008, 57487.965, ..., 53881.96 , 51237.97 ,
          50767.184],
         ...,
         [49552.055, 51365.414, 52325.04 , ..., 52083.555, 48714.637,
          45957.832],
         [46323.234, 47647.332, 49436.51 , ..., 48487.63 , 46552.   ,
          45713.9  ],
         [47879.86 , 46803.426, 47766.656, ..., 43928.   , 42367.273,
          43322.234]],

        [[58672.914, 58439.574, 57112.008, ..., 52927.387, 52552.254,
          50045.914],
         [57236.01 , 56767.855, 56995.355, ..., 53646.234, 51832.004,
          50045.914],
         [58799.293, 57112.008, 57487.965, ..., 53881.96 , 51237.97 ,
          50767.184],
         ...,
         [49552.055, 51365.414, 52325.04 , ..., 52083.555, 48714.637,
          45957.832],
         [46323.234, 47647.332, 49436.51 , ..., 48487.63 , 46552.   ,
          45713.9  ],
         [47879.86 , 46803.426, 47766.656, ..., 43928.   , 42367.273,
          43322.234]]]], dtype=float32), 'output_shape': (1, 1024, 32, 32), 'from': [1, 1], 'to': [4, 20, 20]}
torch node:
{'name': 'empty_merge_operator', 'output': array([[[[-113.39651  ,   -6.7985406, -127.84839  , ...,  118.20411  ,
          -123.95142  ,   94.61239  ],
         [ -63.832    ,  125.68926  ,  -74.32131  , ...,   99.77416  ,
          -127.93847  ,   94.61239  ],
         [ -11.307363 , -127.84839  ,  127.44825  , ...,   31.38848  ,
           -32.485615 ,  114.932884 ],
         ...,
         [-127.08807  ,   86.62979  ,   80.62268  , ...,   56.84996  ,
           -85.792076 ,  -34.67219  ],
         [  51.71335  ,  117.31639  ,  -55.832527 , ...,  122.07912  ,
          -127.98851  ,  -97.610054 ],
         [  -2.2697036,   54.81092  ,  106.46491  , ...,  127.99883  ,
           116.39162  ,   35.7615   ]],

        [[-113.39651  ,   -6.7985406, -127.84839  , ...,  118.20411  ,
          -123.95142  ,   94.61239  ],
         [ -63.832    ,  125.68926  ,  -74.32131  , ...,   99.77416  ,
          -127.93847  ,   94.61239  ],
         [ -11.307363 , -127.84839  ,  127.44825  , ...,   31.38848  ,
           -32.485615 ,  114.932884 ],
         ...,
         [-127.08807  ,   86.62979  ,   80.62268  , ...,   56.84996  ,
           -85.792076 ,  -34.67219  ],
         [  51.71335  ,  117.31639  ,  -55.832527 , ...,  122.07912  ,
          -127.98851  ,  -97.610054 ],
         [  -2.2697036,   54.81092  ,  106.46491  , ...,  127.99883  ,
           116.39162  ,   35.7615   ]],

        [[-113.39651  ,   -6.7985406, -127.84839  , ...,  118.20411  ,
          -123.95142  ,   94.61239  ],
         [ -63.832    ,  125.68926  ,  -74.32131  , ...,   99.77416  ,
          -127.93847  ,   94.61239  ],
         [ -11.307363 , -127.84839  ,  127.44825  , ...,   31.38848  ,
           -32.485615 ,  114.932884 ],
         ...,
         [-127.08807  ,   86.62979  ,   80.62268  , ...,   56.84996  ,
           -85.792076 ,  -34.67219  ],
         [  51.71335  ,  117.31639  ,  -55.832527 , ...,  122.07912  ,
          -127.98851  ,  -97.610054 ],
         [  -2.2697036,   54.81092  ,  106.46491  , ...,  127.99883  ,
           116.39162  ,   35.7615   ]],

        ...,

        [[-113.39651  ,   -6.7985406, -127.84839  , ...,  118.20411  ,
          -123.95142  ,   94.61239  ],
         [ -63.832    ,  125.68926  ,  -74.32131  , ...,   99.77416  ,
          -127.93847  ,   94.61239  ],
         [ -11.307363 , -127.84839  ,  127.44825  , ...,   31.38848  ,
           -32.485615 ,  114.932884 ],
         ...,
         [-127.08807  ,   86.62979  ,   80.62268  , ...,   56.84996  ,
           -85.792076 ,  -34.67219  ],
         [  51.71335  ,  117.31639  ,  -55.832527 , ...,  122.07912  ,
          -127.98851  ,  -97.610054 ],
         [  -2.2697036,   54.81092  ,  106.46491  , ...,  127.99883  ,
           116.39162  ,   35.7615   ]],

        [[-113.39651  ,   -6.7985406, -127.84839  , ...,  118.20411  ,
          -123.95142  ,   94.61239  ],
         [ -63.832    ,  125.68926  ,  -74.32131  , ...,   99.77416  ,
          -127.93847  ,   94.61239  ],
         [ -11.307363 , -127.84839  ,  127.44825  , ...,   31.38848  ,
           -32.485615 ,  114.932884 ],
         ...,
         [-127.08807  ,   86.62979  ,   80.62268  , ...,   56.84996  ,
           -85.792076 ,  -34.67219  ],
         [  51.71335  ,  117.31639  ,  -55.832527 , ...,  122.07912  ,
          -127.98851  ,  -97.610054 ],
         [  -2.2697036,   54.81092  ,  106.46491  , ...,  127.99883  ,
           116.39162  ,   35.7615   ]],

        [[-113.39651  ,   -6.7985406, -127.84839  , ...,  118.20411  ,
          -123.95142  ,   94.61239  ],
         [ -63.832    ,  125.68926  ,  -74.32131  , ...,   99.77416  ,
          -127.93847  ,   94.61239  ],
         [ -11.307363 , -127.84839  ,  127.44825  , ...,   31.38848  ,
           -32.485615 ,  114.932884 ],
         ...,
         [-127.08807  ,   86.62979  ,   80.62268  , ...,   56.84996  ,
           -85.792076 ,  -34.67219  ],
         [  51.71335  ,  117.31639  ,  -55.832527 , ...,  122.07912  ,
          -127.98851  ,  -97.610054 ],
         [  -2.2697036,   54.81092  ,  106.46491  , ...,  127.99883  ,
           116.39162  ,   35.7615   ]]]], dtype=float32), 'output_shape': torch.Size([1, 1024, 32, 32]), 'from': [1, 1], 'to': [4, 20, 20]}

generate models:20

analyse the exceptions in iter:35
tensorflow exception:
{'id': 16, 'name': 'avgpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 1024, 32, 32), dtype=float32, numpy=
array([[[[[0., 0., 0., ..., 0., 0., 0.],
          [0., 0., 0., ..., 0., 0., 0.],
          [0., 0., 0., ..., 0., 0., 0.],
          ...,
          [0., 0., 0., ..., 0., 0., 0.],
          [0., 0., 0., ..., 0., 0., 0.],
          [0., 0., 0., ..., 0., 0., 0.]],

         [[0., 0., 0., ..., 0., 0., 0.],
          [0., 0., 0., ..., 0., 0., 0.],
          [0., 0., 0., ..., 0., 0., 0.],
          ...,
          [0., 0., 0., ..., 0., 0., 0.],
          [0., 0., 0., ..., 0., 0., 0.],
          [0., 0., 0., ..., 0., 0., 0.]],

         [[0., 0., 0., ..., 0., 0., 0.],
          [0., 0., 0., ..., 0., 0., 0.],
          [0., 0., 0., ..., 0., 0., 0.],
          ...,
          [0., 0., 0., ..., 0., 0., 0.],
          [0., 0., 0., ..., 0., 0., 0.],
          [0., 0., 0., ..., 0., 0., 0.]],

         ...,

         [[0., 0., 0., ..., 0., 0., 0.],
          [0., 0., 0., ..., 0., 0., 0.],
          [0., 0., 0., ..., 0., 0., 0.],
          ...,
          [0., 0., 0., ..., 0., 0., 0.],
          [0., 0., 0., ..., 0., 0., 0.],
          [0., 0., 0., ..., 0., 0., 0.]],

         [[0., 0., 0., ..., 0., 0., 0.],
          [0., 0., 0., ..., 0., 0., 0.],
          [0., 0., 0., ..., 0., 0., 0.],
          ...,
          [0., 0., 0., ..., 0., 0., 0.],
          [0., 0., 0., ..., 0., 0., 0.],
          [0., 0., 0., ..., 0., 0., 0.]],

         [[0., 0., 0., ..., 0., 0., 0.],
          [0., 0., 0., ..., 0., 0., 0.],
          [0., 0., 0., ..., 0., 0., 0.],
          ...,
          [0., 0., 0., ..., 0., 0., 0.],
          [0., 0., 0., ..., 0., 0., 0.],
          [0., 0., 0., ..., 0., 0., 0.]]]]], dtype=float32)>}
Default AvgPoolingOp only supports NHWC on device type CPU [Op:AvgPool]

generate models:21

analyse output arrays in iter:40

pre layer res:
15:softmax
{'name': 'softmax', 'output': array([[[[0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          3.93318235e-32, 2.83208426e-21, 2.68938094e-01],
         [0.00000000e+00, 1.18506485e-27, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 3.22134028e-27],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         ...,
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          4.35961013e-28, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00]],

        [[0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          3.93318235e-32, 2.83208426e-21, 2.68938094e-01],
         [0.00000000e+00, 1.18506485e-27, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 3.22134028e-27],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         ...,
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          4.35961013e-28, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00]],

        [[0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          3.93318235e-32, 2.83208426e-21, 2.68938094e-01],
         [0.00000000e+00, 1.18506485e-27, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 3.22134028e-27],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         ...,
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          4.35961013e-28, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00]],

        ...,

        [[0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          3.93318235e-32, 2.83208426e-21, 2.68938094e-01],
         [0.00000000e+00, 1.18506485e-27, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 3.22134028e-27],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         ...,
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          4.35961013e-28, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00]],

        [[0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          3.93318235e-32, 2.83208426e-21, 2.68938094e-01],
         [0.00000000e+00, 1.18506485e-27, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 3.22134028e-27],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         ...,
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          4.35961013e-28, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00]],

        [[0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          3.93318235e-32, 2.83208426e-21, 2.68938094e-01],
         [0.00000000e+00, 1.18506485e-27, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 3.22134028e-27],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         ...,
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          4.35961013e-28, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 32, 32]), 'from': [0], 'to': [22]}
tf node:
{'name': 'log', 'output': array([[[[      -inf,       -inf,       -inf, ..., -72.31328 ,
          -47.313274,  -1.313274],
         [      -inf, -62.      ,       -inf, ...,       -inf,
                -inf, -61.      ],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf,       -inf, ..., -63.      ,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[      -inf,       -inf,       -inf, ..., -72.31328 ,
          -47.313274,  -1.313274],
         [      -inf, -62.      ,       -inf, ...,       -inf,
                -inf, -61.      ],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf,       -inf, ..., -63.      ,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[      -inf,       -inf,       -inf, ..., -72.31328 ,
          -47.313274,  -1.313274],
         [      -inf, -62.      ,       -inf, ...,       -inf,
                -inf, -61.      ],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf,       -inf, ..., -63.      ,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        ...,

        [[      -inf,       -inf,       -inf, ..., -72.31328 ,
          -47.313274,  -1.313274],
         [      -inf, -62.      ,       -inf, ...,       -inf,
                -inf, -61.      ],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf,       -inf, ..., -63.      ,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[      -inf,       -inf,       -inf, ..., -72.31328 ,
          -47.313274,  -1.313274],
         [      -inf, -62.      ,       -inf, ...,       -inf,
                -inf, -61.      ],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf,       -inf, ..., -63.      ,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[      -inf,       -inf,       -inf, ..., -72.31328 ,
          -47.313274,  -1.313274],
         [      -inf, -62.      ,       -inf, ...,       -inf,
                -inf, -61.      ],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf,       -inf, ..., -63.      ,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 32, 32]), 'from': [15], 'to': [1]}
ms node:
{'name': 'log', 'output': array([[[[       -inf,        -inf,        -inf, ..., -72.31328  ,
          -47.31328  ,  -1.3132769],
         [       -inf, -62.       ,        -inf, ...,        -inf,
                 -inf, -61.       ],
         [       -inf,        -inf,        -inf, ...,        -inf,
                 -inf,        -inf],
         ...,
         [       -inf,        -inf,        -inf, ..., -63.       ,
                 -inf,        -inf],
         [       -inf,        -inf,        -inf, ...,        -inf,
                 -inf,        -inf],
         [       -inf,        -inf,        -inf, ...,        -inf,
                 -inf,        -inf]],

        [[       -inf,        -inf,        -inf, ..., -72.31328  ,
          -47.31328  ,  -1.3132769],
         [       -inf, -62.       ,        -inf, ...,        -inf,
                 -inf, -61.       ],
         [       -inf,        -inf,        -inf, ...,        -inf,
                 -inf,        -inf],
         ...,
         [       -inf,        -inf,        -inf, ..., -63.       ,
                 -inf,        -inf],
         [       -inf,        -inf,        -inf, ...,        -inf,
                 -inf,        -inf],
         [       -inf,        -inf,        -inf, ...,        -inf,
                 -inf,        -inf]],

        [[       -inf,        -inf,        -inf, ..., -72.31328  ,
          -47.31328  ,  -1.3132769],
         [       -inf, -62.       ,        -inf, ...,        -inf,
                 -inf, -61.       ],
         [       -inf,        -inf,        -inf, ...,        -inf,
                 -inf,        -inf],
         ...,
         [       -inf,        -inf,        -inf, ..., -63.       ,
                 -inf,        -inf],
         [       -inf,        -inf,        -inf, ...,        -inf,
                 -inf,        -inf],
         [       -inf,        -inf,        -inf, ...,        -inf,
                 -inf,        -inf]],

        ...,

        [[       -inf,        -inf,        -inf, ..., -72.31328  ,
          -47.31328  ,  -1.3132769],
         [       -inf, -62.       ,        -inf, ...,        -inf,
                 -inf, -61.       ],
         [       -inf,        -inf,        -inf, ...,        -inf,
                 -inf,        -inf],
         ...,
         [       -inf,        -inf,        -inf, ..., -63.       ,
                 -inf,        -inf],
         [       -inf,        -inf,        -inf, ...,        -inf,
                 -inf,        -inf],
         [       -inf,        -inf,        -inf, ...,        -inf,
                 -inf,        -inf]],

        [[       -inf,        -inf,        -inf, ..., -72.31328  ,
          -47.31328  ,  -1.3132769],
         [       -inf, -62.       ,        -inf, ...,        -inf,
                 -inf, -61.       ],
         [       -inf,        -inf,        -inf, ...,        -inf,
                 -inf,        -inf],
         ...,
         [       -inf,        -inf,        -inf, ..., -63.       ,
                 -inf,        -inf],
         [       -inf,        -inf,        -inf, ...,        -inf,
                 -inf,        -inf],
         [       -inf,        -inf,        -inf, ...,        -inf,
                 -inf,        -inf]],

        [[       -inf,        -inf,        -inf, ..., -72.31328  ,
          -47.31328  ,  -1.3132769],
         [       -inf, -62.       ,        -inf, ...,        -inf,
                 -inf, -61.       ],
         [       -inf,        -inf,        -inf, ...,        -inf,
                 -inf,        -inf],
         ...,
         [       -inf,        -inf,        -inf, ..., -63.       ,
                 -inf,        -inf],
         [       -inf,        -inf,        -inf, ...,        -inf,
                 -inf,        -inf],
         [       -inf,        -inf,        -inf, ...,        -inf,
                 -inf,        -inf]]]], dtype=float32), 'output_shape': (1, 128, 32, 32), 'from': [15], 'to': [1]}
torch node:
{'name': 'log', 'output': array([[[[      -inf,       -inf,       -inf, ..., -72.31327 ,
          -47.313274,  -1.313274],
         [      -inf, -62.      ,       -inf, ...,       -inf,
                -inf, -61.      ],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf,       -inf, ..., -63.      ,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[      -inf,       -inf,       -inf, ..., -72.31327 ,
          -47.313274,  -1.313274],
         [      -inf, -62.      ,       -inf, ...,       -inf,
                -inf, -61.      ],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf,       -inf, ..., -63.      ,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[      -inf,       -inf,       -inf, ..., -72.31327 ,
          -47.313274,  -1.313274],
         [      -inf, -62.      ,       -inf, ...,       -inf,
                -inf, -61.      ],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf,       -inf, ..., -63.      ,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        ...,

        [[      -inf,       -inf,       -inf, ..., -72.31327 ,
          -47.313274,  -1.313274],
         [      -inf, -62.      ,       -inf, ...,       -inf,
                -inf, -61.      ],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf,       -inf, ..., -63.      ,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[      -inf,       -inf,       -inf, ..., -72.31327 ,
          -47.313274,  -1.313274],
         [      -inf, -62.      ,       -inf, ...,       -inf,
                -inf, -61.      ],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf,       -inf, ..., -63.      ,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[      -inf,       -inf,       -inf, ..., -72.31327 ,
          -47.313274,  -1.313274],
         [      -inf, -62.      ,       -inf, ...,       -inf,
                -inf, -61.      ],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf,       -inf, ..., -63.      ,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 32, 32]), 'from': [15], 'to': [1]}

generate models:25

analyse the exceptions in iter:45
tensorflow exception:
{'id': 16, 'name': 'avgpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 1024, 32, 32), dtype=float32, numpy=
array([[[[[0.9155966 , 0.91585135, 0.91526353, ..., 0.91677606,
           0.9167311 , 0.9166755 ],
          [0.91572267, 0.9158927 , 0.9151936 , ..., 0.9167751 ,
           0.91676307, 0.9167366 ],
          [0.91576016, 0.91577226, 0.9148535 , ..., 0.9167822 ,
           0.9167742 , 0.9167988 ],
          ...,
          [0.91657907, 0.91675913, 0.9167822 , ..., 0.9167409 ,
           0.916688  , 0.91666967],
          [0.91655976, 0.9167822 , 0.9167715 , ..., 0.9167254 ,
           0.9166894 , 0.916653  ],
          [0.91658115, 0.9167778 , 0.91675913, ..., 0.9167012 ,
           0.91668105, 0.91663   ]],

         [[0.9155966 , 0.91585135, 0.91526353, ..., 0.91677606,
           0.9167311 , 0.9166755 ],
          [0.91572267, 0.9158927 , 0.9151936 , ..., 0.9167751 ,
           0.91676307, 0.9167366 ],
          [0.91576016, 0.91577226, 0.9148535 , ..., 0.9167822 ,
           0.9167742 , 0.9167988 ],
          ...,
          [0.91657907, 0.91675913, 0.9167822 , ..., 0.9167409 ,
           0.916688  , 0.91666967],
          [0.91655976, 0.9167822 , 0.9167715 , ..., 0.9167254 ,
           0.9166894 , 0.916653  ],
          [0.91658115, 0.9167778 , 0.91675913, ..., 0.9167012 ,
           0.91668105, 0.91663   ]],

         [[0.9155966 , 0.91585135, 0.91526353, ..., 0.91677606,
           0.9167311 , 0.9166755 ],
          [0.91572267, 0.9158927 , 0.9151936 , ..., 0.9167751 ,
           0.91676307, 0.9167366 ],
          [0.91576016, 0.91577226, 0.9148535 , ..., 0.9167822 ,
           0.9167742 , 0.9167988 ],
          ...,
          [0.91657907, 0.91675913, 0.9167822 , ..., 0.9167409 ,
           0.916688  , 0.91666967],
          [0.91655976, 0.9167822 , 0.9167715 , ..., 0.9167254 ,
           0.9166894 , 0.916653  ],
          [0.91658115, 0.9167778 , 0.91675913, ..., 0.9167012 ,
           0.91668105, 0.91663   ]],

         ...,

         [[0.        , 0.        , 0.        , ..., 0.        ,
           0.        , 0.        ],
          [0.        , 0.        , 0.        , ..., 0.        ,
           0.        , 0.        ],
          [0.        , 0.        , 0.        , ..., 0.        ,
           0.        , 0.        ],
          ...,
          [0.        , 0.        , 0.        , ..., 0.        ,
           0.        , 0.        ],
          [0.        , 0.        , 0.        , ..., 0.        ,
           0.        , 0.        ],
          [0.        , 0.        , 0.        , ..., 0.        ,
           0.        , 0.        ]],

         [[0.        , 0.        , 0.        , ..., 0.        ,
           0.        , 0.        ],
          [0.        , 0.        , 0.        , ..., 0.        ,
           0.        , 0.        ],
          [0.        , 0.        , 0.        , ..., 0.        ,
           0.        , 0.        ],
          ...,
          [0.        , 0.        , 0.        , ..., 0.        ,
           0.        , 0.        ],
          [0.        , 0.        , 0.        , ..., 0.        ,
           0.        , 0.        ],
          [0.        , 0.        , 0.        , ..., 0.        ,
           0.        , 0.        ]],

         [[0.        , 0.        , 0.        , ..., 0.        ,
           0.        , 0.        ],
          [0.        , 0.        , 0.        , ..., 0.        ,
           0.        , 0.        ],
          [0.        , 0.        , 0.        , ..., 0.        ,
           0.        , 0.        ],
          ...,
          [0.        , 0.        , 0.        , ..., 0.        ,
           0.        , 0.        ],
          [0.        , 0.        , 0.        , ..., 0.        ,
           0.        , 0.        ],
          [0.        , 0.        , 0.        , ..., 0.        ,
           0.        , 0.        ]]]]], dtype=float32)>}
Default AvgPoolingOp only supports NHWC on device type CPU [Op:AvgPool]

generate models:28

final statics:
total operators:28
tensorflow --> nums:5,distinct_bugs:4
mindspore --> nums:3,distinct_bugs:3
torch --> nums:2,distinct_bugs:2
tensorflow --> 
sin:1
cos:1
avgpool2d:2
log:1
mindspore --> 
cos:1
empty_merge_operator:1
log:1
torch --> 
cos:1
log:1

generate models:30

analyse the exceptions in iter:50
tensorflow exception:
{'id': 16, 'name': 'avgpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 1024, 32, 32), dtype=float32, numpy=
array([[[[[1.04611656e+12, 1.08427018e+12, 1.08427018e+12, ...,
           2.46852616e+12, 2.07869313e+12, 1.83740636e+12],
          [1.04611656e+12, 1.04611656e+12, 1.02106110e+12, ...,
           2.46852616e+12, 2.24166543e+12, 1.95619088e+12],
          [1.04611656e+12, 1.00864754e+12, 1.00864754e+12, ...,
           2.29735766e+12, 2.37267478e+12, 2.24166543e+12],
          ...,
          [4.49232765e+12, 6.07397872e+12, 6.63294050e+12, ...,
           6.56960913e+12, 5.92307867e+12, 5.77408388e+12],
          [6.35038178e+12, 4.86542252e+12, 6.16543184e+12, ...,
           7.48373410e+12, 6.82471719e+12, 6.13487529e+12],
          [8.20840235e+12, 7.48373410e+12, 4.97475335e+12, ...,
           8.24373569e+12, 7.48373410e+12, 7.01923905e+12]],

         [[1.04611656e+12, 1.08427018e+12, 1.08427018e+12, ...,
           2.46852616e+12, 2.07869313e+12, 1.83740636e+12],
          [1.04611656e+12, 1.04611656e+12, 1.02106110e+12, ...,
           2.46852616e+12, 2.24166543e+12, 1.95619088e+12],
          [1.04611656e+12, 1.00864754e+12, 1.00864754e+12, ...,
           2.29735766e+12, 2.37267478e+12, 2.24166543e+12],
          ...,
          [4.49232765e+12, 6.07397872e+12, 6.63294050e+12, ...,
           6.56960913e+12, 5.92307867e+12, 5.77408388e+12],
          [6.35038178e+12, 4.86542252e+12, 6.16543184e+12, ...,
           7.48373410e+12, 6.82471719e+12, 6.13487529e+12],
          [8.20840235e+12, 7.48373410e+12, 4.97475335e+12, ...,
           8.24373569e+12, 7.48373410e+12, 7.01923905e+12]],

         [[1.04611656e+12, 1.08427018e+12, 1.08427018e+12, ...,
           2.46852616e+12, 2.07869313e+12, 1.83740636e+12],
          [1.04611656e+12, 1.04611656e+12, 1.02106110e+12, ...,
           2.46852616e+12, 2.24166543e+12, 1.95619088e+12],
          [1.04611656e+12, 1.00864754e+12, 1.00864754e+12, ...,
           2.29735766e+12, 2.37267478e+12, 2.24166543e+12],
          ...,
          [4.49232765e+12, 6.07397872e+12, 6.63294050e+12, ...,
           6.56960913e+12, 5.92307867e+12, 5.77408388e+12],
          [6.35038178e+12, 4.86542252e+12, 6.16543184e+12, ...,
           7.48373410e+12, 6.82471719e+12, 6.13487529e+12],
          [8.20840235e+12, 7.48373410e+12, 4.97475335e+12, ...,
           8.24373569e+12, 7.48373410e+12, 7.01923905e+12]],

         ...,

         [[4.06346752e+09, 4.21166387e+09, 4.21166387e+09, ...,
           9.58858752e+09, 8.07434035e+09, 7.13709568e+09],
          [4.06346752e+09, 4.06346752e+09, 3.96614451e+09, ...,
           9.58858752e+09, 8.70737818e+09, 7.59849267e+09],
          [4.06346752e+09, 3.91792538e+09, 3.91792538e+09, ...,
           8.92369920e+09, 9.21625600e+09, 8.70737818e+09],
          ...,
          [1.74497055e+10, 2.35933696e+10, 2.57645302e+10, ...,
           2.55185715e+10, 2.30072279e+10, 2.24284570e+10],
          [2.46670049e+10, 1.88989174e+10, 2.39485952e+10, ...,
           2.90693407e+10, 2.65094840e+10, 2.38298911e+10],
          [3.18841487e+10, 2.90693407e+10, 1.93235948e+10, ...,
           3.20214323e+10, 2.90693407e+10, 2.72650547e+10]],

         [[4.06346752e+09, 4.21166387e+09, 4.21166387e+09, ...,
           9.58858752e+09, 8.07434035e+09, 7.13709568e+09],
          [4.06346752e+09, 4.06346752e+09, 3.96614451e+09, ...,
           9.58858752e+09, 8.70737818e+09, 7.59849267e+09],
          [4.06346752e+09, 3.91792538e+09, 3.91792538e+09, ...,
           8.92369920e+09, 9.21625600e+09, 8.70737818e+09],
          ...,
          [1.74497055e+10, 2.35933696e+10, 2.57645302e+10, ...,
           2.55185715e+10, 2.30072279e+10, 2.24284570e+10],
          [2.46670049e+10, 1.88989174e+10, 2.39485952e+10, ...,
           2.90693407e+10, 2.65094840e+10, 2.38298911e+10],
          [3.18841487e+10, 2.90693407e+10, 1.93235948e+10, ...,
           3.20214323e+10, 2.90693407e+10, 2.72650547e+10]],

         [[4.06346752e+09, 4.21166387e+09, 4.21166387e+09, ...,
           9.58858752e+09, 8.07434035e+09, 7.13709568e+09],
          [4.06346752e+09, 4.06346752e+09, 3.96614451e+09, ...,
           9.58858752e+09, 8.70737818e+09, 7.59849267e+09],
          [4.06346752e+09, 3.91792538e+09, 3.91792538e+09, ...,
           8.92369920e+09, 9.21625600e+09, 8.70737818e+09],
          ...,
          [1.74497055e+10, 2.35933696e+10, 2.57645302e+10, ...,
           2.55185715e+10, 2.30072279e+10, 2.24284570e+10],
          [2.46670049e+10, 1.88989174e+10, 2.39485952e+10, ...,
           2.90693407e+10, 2.65094840e+10, 2.38298911e+10],
          [3.18841487e+10, 2.90693407e+10, 1.93235948e+10, ...,
           3.20214323e+10, 2.90693407e+10, 2.72650547e+10]]]]],
      dtype=float32)>}
Default AvgPoolingOp only supports NHWC on device type CPU [Op:AvgPool]

generate models:31

analyse output arrays in iter:53

pre layer res:
9:add
{'name': 'add', 'output': array([[[[4444928., 4550656., 4688000., ..., 4856576., 4993024.,
          5070208.],
         [4521728., 4642816., 4764800., ..., 5040896., 5105664.,
          5147008.],
         [4567808., 4673536., 4810880., ..., 5430016., 5469184.,
          5351808.],
         ...,
         [4675328., 4740096., 4836480., ..., 5184256., 5346304.,
          5418368.],
         [4752128., 4852736., 4928640., ..., 5189376., 5351424.,
          5418368.],
         [4828928., 4960256., 5046400., ..., 5189376., 5351424.,
          5418368.]],

        [[4444928., 4550656., 4688000., ..., 4856576., 4993024.,
          5070208.],
         [4521728., 4642816., 4764800., ..., 5040896., 5105664.,
          5147008.],
         [4567808., 4673536., 4810880., ..., 5430016., 5469184.,
          5351808.],
         ...,
         [4675328., 4740096., 4836480., ..., 5184256., 5346304.,
          5418368.],
         [4752128., 4852736., 4928640., ..., 5189376., 5351424.,
          5418368.],
         [4828928., 4960256., 5046400., ..., 5189376., 5351424.,
          5418368.]],

        [[4444928., 4550656., 4688000., ..., 4856576., 4993024.,
          5070208.],
         [4521728., 4642816., 4764800., ..., 5040896., 5105664.,
          5147008.],
         [4567808., 4673536., 4810880., ..., 5430016., 5469184.,
          5351808.],
         ...,
         [4675328., 4740096., 4836480., ..., 5184256., 5346304.,
          5418368.],
         [4752128., 4852736., 4928640., ..., 5189376., 5351424.,
          5418368.],
         [4828928., 4960256., 5046400., ..., 5189376., 5351424.,
          5418368.]],

        ...,

        [[2365440., 2350080., 2365440., ..., 2790400., 2764800.,
          2728960.],
         [2442240., 2442240., 2442240., ..., 2974720., 2877440.,
          2805760.],
         [2488320., 2472960., 2488320., ..., 3363840., 3240960.,
          3010560.],
         ...,
         [2595840., 2539520., 2513920., ..., 3118080., 3118080.,
          3077120.],
         [2672640., 2652160., 2606080., ..., 3123200., 3123200.,
          3077120.],
         [2749440., 2759680., 2723840., ..., 3123200., 3123200.,
          3077120.]],

        [[2365440., 2350080., 2365440., ..., 2790400., 2764800.,
          2728960.],
         [2442240., 2442240., 2442240., ..., 2974720., 2877440.,
          2805760.],
         [2488320., 2472960., 2488320., ..., 3363840., 3240960.,
          3010560.],
         ...,
         [2595840., 2539520., 2513920., ..., 3118080., 3118080.,
          3077120.],
         [2672640., 2652160., 2606080., ..., 3123200., 3123200.,
          3077120.],
         [2749440., 2759680., 2723840., ..., 3123200., 3123200.,
          3077120.]],

        [[2365440., 2350080., 2365440., ..., 2790400., 2764800.,
          2728960.],
         [2442240., 2442240., 2442240., ..., 2974720., 2877440.,
          2805760.],
         [2488320., 2472960., 2488320., ..., 3363840., 3240960.,
          3010560.],
         ...,
         [2595840., 2539520., 2513920., ..., 3118080., 3118080.,
          3077120.],
         [2672640., 2652160., 2606080., ..., 3123200., 3123200.,
          3077120.],
         [2749440., 2759680., 2723840., ..., 3123200., 3123200.,
          3077120.]]]], dtype=float32), 'output_shape': TensorShape([1, 1024, 32, 32]), 'from': [8, 8], 'to': [14]}
tf node:
{'name': 'sin', 'output': array([[[[ 0.9967233 ,  0.6043782 ,  0.7149936 , ...,  0.46460292,
           0.30557021, -0.8629855 ],
         [ 0.7603365 ,  0.6672583 ,  0.16979784, ..., -0.10043775,
          -0.8554717 , -0.9953626 ],
         [ 0.9848867 ,  0.7858304 ,  0.8682517 , ..., -0.64960057,
          -0.8710465 , -0.94644856],
         ...,
         [-0.3784764 , -0.96720946, -0.94942236, ..., -0.19568302,
          -0.9667962 ,  0.31314293],
         [-0.8490265 , -0.47114742,  0.4887833 , ..., -0.837657  ,
          -0.49371445,  0.31314293],
         [-0.99759734,  0.9974352 , -0.03027367, ..., -0.837657  ,
          -0.49371445,  0.31314293]],

        [[ 0.9967233 ,  0.6043782 ,  0.7149936 , ...,  0.46460292,
           0.30557021, -0.8629855 ],
         [ 0.7603365 ,  0.6672583 ,  0.16979784, ..., -0.10043775,
          -0.8554717 , -0.9953626 ],
         [ 0.9848867 ,  0.7858304 ,  0.8682517 , ..., -0.64960057,
          -0.8710465 , -0.94644856],
         ...,
         [-0.3784764 , -0.96720946, -0.94942236, ..., -0.19568302,
          -0.9667962 ,  0.31314293],
         [-0.8490265 , -0.47114742,  0.4887833 , ..., -0.837657  ,
          -0.49371445,  0.31314293],
         [-0.99759734,  0.9974352 , -0.03027367, ..., -0.837657  ,
          -0.49371445,  0.31314293]],

        [[ 0.9967233 ,  0.6043782 ,  0.7149936 , ...,  0.46460292,
           0.30557021, -0.8629855 ],
         [ 0.7603365 ,  0.6672583 ,  0.16979784, ..., -0.10043775,
          -0.8554717 , -0.9953626 ],
         [ 0.9848867 ,  0.7858304 ,  0.8682517 , ..., -0.64960057,
          -0.8710465 , -0.94644856],
         ...,
         [-0.3784764 , -0.96720946, -0.94942236, ..., -0.19568302,
          -0.9667962 ,  0.31314293],
         [-0.8490265 , -0.47114742,  0.4887833 , ..., -0.837657  ,
          -0.49371445,  0.31314293],
         [-0.99759734,  0.9974352 , -0.03027367, ..., -0.837657  ,
          -0.49371445,  0.31314293]],

        ...,

        [[ 0.19609289, -0.813932  ,  0.19609289, ..., -0.2898119 ,
          -0.5179937 ,  0.16573575],
         [-0.41561466, -0.41561466, -0.41561466, ...,  0.6261527 ,
          -0.95211804, -0.44348776],
         [ 0.4371473 , -0.9341754 ,  0.4371473 , ..., -0.9962594 ,
          -0.9422288 , -0.034392  ],
         ...,
         [-0.9939777 ,  0.84794694, -0.9611002 , ..., -0.82723606,
          -0.82723606, -0.77653825],
         [-0.7412986 ,  0.7121067 , -0.0884328 , ..., -0.98018575,
          -0.98018575, -0.77653825],
         [-0.20749427, -0.97360545, -0.5887579 , ..., -0.98018575,
          -0.98018575, -0.77653825]],

        [[ 0.19609289, -0.813932  ,  0.19609289, ..., -0.2898119 ,
          -0.5179937 ,  0.16573575],
         [-0.41561466, -0.41561466, -0.41561466, ...,  0.6261527 ,
          -0.95211804, -0.44348776],
         [ 0.4371473 , -0.9341754 ,  0.4371473 , ..., -0.9962594 ,
          -0.9422288 , -0.034392  ],
         ...,
         [-0.9939777 ,  0.84794694, -0.9611002 , ..., -0.82723606,
          -0.82723606, -0.77653825],
         [-0.7412986 ,  0.7121067 , -0.0884328 , ..., -0.98018575,
          -0.98018575, -0.77653825],
         [-0.20749427, -0.97360545, -0.5887579 , ..., -0.98018575,
          -0.98018575, -0.77653825]],

        [[ 0.19609289, -0.813932  ,  0.19609289, ..., -0.2898119 ,
          -0.5179937 ,  0.16573575],
         [-0.41561466, -0.41561466, -0.41561466, ...,  0.6261527 ,
          -0.95211804, -0.44348776],
         [ 0.4371473 , -0.9341754 ,  0.4371473 , ..., -0.9962594 ,
          -0.9422288 , -0.034392  ],
         ...,
         [-0.9939777 ,  0.84794694, -0.9611002 , ..., -0.82723606,
          -0.82723606, -0.77653825],
         [-0.7412986 ,  0.7121067 , -0.0884328 , ..., -0.98018575,
          -0.98018575, -0.77653825],
         [-0.20749427, -0.97360545, -0.5887579 , ..., -0.98018575,
          -0.98018575, -0.77653825]]]], dtype=float32), 'output_shape': TensorShape([1, 1024, 32, 32]), 'from': [9], 'to': [16]}
ms node:
{'name': 'sin', 'output': array([[[[ 9.9672329e-01,  6.0437828e-01,  7.1499354e-01, ...,
           4.6460292e-01,  3.0557019e-01, -8.6298549e-01],
         [ 7.6033646e-01,  6.6725832e-01,  1.6979784e-01, ...,
          -1.0043775e-01, -8.5547167e-01, -9.9536258e-01],
         [ 9.8488671e-01,  7.8583044e-01,  8.6825168e-01, ...,
          -6.4960057e-01, -8.7104648e-01, -9.4644856e-01],
         ...,
         [-3.7847641e-01, -9.6720946e-01, -9.4942236e-01, ...,
          -1.9568302e-01, -9.6679622e-01,  3.1314293e-01],
         [-8.4902650e-01, -4.7114742e-01,  4.8878330e-01, ...,
          -8.3765692e-01, -4.9371448e-01,  3.1314293e-01],
         [-9.9759734e-01,  9.9743521e-01, -3.0273670e-02, ...,
          -8.3765692e-01, -4.9371448e-01,  3.1314293e-01]],

        [[ 9.9672329e-01,  6.0437828e-01,  7.1499354e-01, ...,
           4.6460292e-01,  3.0557019e-01, -8.6298549e-01],
         [ 7.6033646e-01,  6.6725832e-01,  1.6979784e-01, ...,
          -1.0043775e-01, -8.5547167e-01, -9.9536258e-01],
         [ 9.8488671e-01,  7.8583044e-01,  8.6825168e-01, ...,
          -6.4960057e-01, -8.7104648e-01, -9.4644856e-01],
         ...,
         [-3.7847641e-01, -9.6720946e-01, -9.4942236e-01, ...,
          -1.9568302e-01, -9.6679622e-01,  3.1314293e-01],
         [-8.4902650e-01, -4.7114742e-01,  4.8878330e-01, ...,
          -8.3765692e-01, -4.9371448e-01,  3.1314293e-01],
         [-9.9759734e-01,  9.9743521e-01, -3.0273670e-02, ...,
          -8.3765692e-01, -4.9371448e-01,  3.1314293e-01]],

        [[ 9.9672329e-01,  6.0437828e-01,  7.1499354e-01, ...,
           4.6460292e-01,  3.0557019e-01, -8.6298549e-01],
         [ 7.6033646e-01,  6.6725832e-01,  1.6979784e-01, ...,
          -1.0043775e-01, -8.5547167e-01, -9.9536258e-01],
         [ 9.8488671e-01,  7.8583044e-01,  8.6825168e-01, ...,
          -6.4960057e-01, -8.7104648e-01, -9.4644856e-01],
         ...,
         [-3.7847641e-01, -9.6720946e-01, -9.4942236e-01, ...,
          -1.9568302e-01, -9.6679622e-01,  3.1314293e-01],
         [-8.4902650e-01, -4.7114742e-01,  4.8878330e-01, ...,
          -8.3765692e-01, -4.9371448e-01,  3.1314293e-01],
         [-9.9759734e-01,  9.9743521e-01, -3.0273670e-02, ...,
          -8.3765692e-01, -4.9371448e-01,  3.1314293e-01]],

        ...,

        [[ 1.1827200e+06,  1.1750400e+06,  1.1827200e+06, ...,
           1.3952000e+06,  1.3824000e+06,  1.3644800e+06],
         [ 1.2211200e+06,  1.2211200e+06,  1.2211200e+06, ...,
           1.4873600e+06,  1.4387200e+06,  1.4028800e+06],
         [ 1.2441600e+06,  1.2364800e+06,  1.2441600e+06, ...,
           1.6819200e+06,  1.6204800e+06,  1.5052800e+06],
         ...,
         [ 1.2979200e+06,  1.2697600e+06,  1.2569600e+06, ...,
           1.5590400e+06,  1.5590400e+06,  1.5385600e+06],
         [ 1.3363200e+06,  1.3260800e+06,  1.3030400e+06, ...,
           1.5616000e+06,  1.5616000e+06,  1.5385600e+06],
         [ 1.3747200e+06,  1.3798400e+06,  1.3619200e+06, ...,
           1.5616000e+06,  1.5616000e+06,  1.5385600e+06]],

        [[ 1.1827200e+06,  1.1750400e+06,  1.1827200e+06, ...,
           1.3952000e+06,  1.3824000e+06,  1.3644800e+06],
         [ 1.2211200e+06,  1.2211200e+06,  1.2211200e+06, ...,
           1.4873600e+06,  1.4387200e+06,  1.4028800e+06],
         [ 1.2441600e+06,  1.2364800e+06,  1.2441600e+06, ...,
           1.6819200e+06,  1.6204800e+06,  1.5052800e+06],
         ...,
         [ 1.2979200e+06,  1.2697600e+06,  1.2569600e+06, ...,
           1.5590400e+06,  1.5590400e+06,  1.5385600e+06],
         [ 1.3363200e+06,  1.3260800e+06,  1.3030400e+06, ...,
           1.5616000e+06,  1.5616000e+06,  1.5385600e+06],
         [ 1.3747200e+06,  1.3798400e+06,  1.3619200e+06, ...,
           1.5616000e+06,  1.5616000e+06,  1.5385600e+06]],

        [[ 1.1827200e+06,  1.1750400e+06,  1.1827200e+06, ...,
           1.3952000e+06,  1.3824000e+06,  1.3644800e+06],
         [ 1.2211200e+06,  1.2211200e+06,  1.2211200e+06, ...,
           1.4873600e+06,  1.4387200e+06,  1.4028800e+06],
         [ 1.2441600e+06,  1.2364800e+06,  1.2441600e+06, ...,
           1.6819200e+06,  1.6204800e+06,  1.5052800e+06],
         ...,
         [ 1.2979200e+06,  1.2697600e+06,  1.2569600e+06, ...,
           1.5590400e+06,  1.5590400e+06,  1.5385600e+06],
         [ 1.3363200e+06,  1.3260800e+06,  1.3030400e+06, ...,
           1.5616000e+06,  1.5616000e+06,  1.5385600e+06],
         [ 1.3747200e+06,  1.3798400e+06,  1.3619200e+06, ...,
           1.5616000e+06,  1.5616000e+06,  1.5385600e+06]]]],
      dtype=float32), 'output_shape': (1, 1024, 32, 32), 'from': [9], 'to': [16]}
torch node:
{'name': 'sin', 'output': array([[[[ 0.9967233 ,  0.6043783 ,  0.71499354, ...,  0.46460292,
           0.3055702 , -0.8629855 ],
         [ 0.76033646,  0.6672583 ,  0.16979784, ..., -0.10043775,
          -0.8554717 , -0.9953626 ],
         [ 0.9848867 ,  0.78583044,  0.8682517 , ..., -0.64960057,
          -0.8710465 , -0.94644856],
         ...,
         [-0.3784764 , -0.96720946, -0.94942236, ..., -0.19568302,
          -0.9667962 ,  0.31314293],
         [-0.8490265 , -0.47114742,  0.4887833 , ..., -0.8376569 ,
          -0.49371448,  0.31314293],
         [-0.99759734,  0.9974352 , -0.03027367, ..., -0.8376569 ,
          -0.49371448,  0.31314293]],

        [[ 0.9967233 ,  0.6043783 ,  0.71499354, ...,  0.46460292,
           0.3055702 , -0.8629855 ],
         [ 0.76033646,  0.6672583 ,  0.16979784, ..., -0.10043775,
          -0.8554717 , -0.9953626 ],
         [ 0.9848867 ,  0.78583044,  0.8682517 , ..., -0.64960057,
          -0.8710465 , -0.94644856],
         ...,
         [-0.3784764 , -0.96720946, -0.94942236, ..., -0.19568302,
          -0.9667962 ,  0.31314293],
         [-0.8490265 , -0.47114742,  0.4887833 , ..., -0.8376569 ,
          -0.49371448,  0.31314293],
         [-0.99759734,  0.9974352 , -0.03027367, ..., -0.8376569 ,
          -0.49371448,  0.31314293]],

        [[ 0.9967233 ,  0.6043783 ,  0.71499354, ...,  0.46460292,
           0.3055702 , -0.8629855 ],
         [ 0.76033646,  0.6672583 ,  0.16979784, ..., -0.10043775,
          -0.8554717 , -0.9953626 ],
         [ 0.9848867 ,  0.78583044,  0.8682517 , ..., -0.64960057,
          -0.8710465 , -0.94644856],
         ...,
         [-0.3784764 , -0.96720946, -0.94942236, ..., -0.19568302,
          -0.9667962 ,  0.31314293],
         [-0.8490265 , -0.47114742,  0.4887833 , ..., -0.8376569 ,
          -0.49371448,  0.31314293],
         [-0.99759734,  0.9974352 , -0.03027367, ..., -0.8376569 ,
          -0.49371448,  0.31314293]],

        ...,

        [[ 0.19609289, -0.813932  ,  0.19609289, ..., -0.2898119 ,
          -0.5179937 ,  0.16573577],
         [-0.41561466, -0.41561466, -0.41561466, ...,  0.6261527 ,
          -0.95211804, -0.44348773],
         [ 0.43714726, -0.9341754 ,  0.43714726, ..., -0.9962594 ,
          -0.94222873, -0.034392  ],
         ...,
         [-0.9939777 ,  0.84794694, -0.9611002 , ..., -0.827236  ,
          -0.827236  , -0.77653825],
         [-0.7412986 ,  0.7121067 , -0.0884328 , ..., -0.98018575,
          -0.98018575, -0.77653825],
         [-0.20749427, -0.97360545, -0.5887579 , ..., -0.98018575,
          -0.98018575, -0.77653825]],

        [[ 0.19609289, -0.813932  ,  0.19609289, ..., -0.2898119 ,
          -0.5179937 ,  0.16573577],
         [-0.41561466, -0.41561466, -0.41561466, ...,  0.6261527 ,
          -0.95211804, -0.44348773],
         [ 0.43714726, -0.9341754 ,  0.43714726, ..., -0.9962594 ,
          -0.94222873, -0.034392  ],
         ...,
         [-0.9939777 ,  0.84794694, -0.9611002 , ..., -0.827236  ,
          -0.827236  , -0.77653825],
         [-0.7412986 ,  0.7121067 , -0.0884328 , ..., -0.98018575,
          -0.98018575, -0.77653825],
         [-0.20749427, -0.97360545, -0.5887579 , ..., -0.98018575,
          -0.98018575, -0.77653825]],

        [[ 0.19609289, -0.813932  ,  0.19609289, ..., -0.2898119 ,
          -0.5179937 ,  0.16573577],
         [-0.41561466, -0.41561466, -0.41561466, ...,  0.6261527 ,
          -0.95211804, -0.44348773],
         [ 0.43714726, -0.9341754 ,  0.43714726, ..., -0.9962594 ,
          -0.94222873, -0.034392  ],
         ...,
         [-0.9939777 ,  0.84794694, -0.9611002 , ..., -0.827236  ,
          -0.827236  , -0.77653825],
         [-0.7412986 ,  0.7121067 , -0.0884328 , ..., -0.98018575,
          -0.98018575, -0.77653825],
         [-0.20749427, -0.97360545, -0.5887579 , ..., -0.98018575,
          -0.98018575, -0.77653825]]]], dtype=float32), 'output_shape': torch.Size([1, 1024, 32, 32]), 'from': [9], 'to': [16]}

generate models:33

analyse output arrays in iter:57

pre layer res:
9:add
{'name': 'add', 'output': array([[[[ 88064.,  96256., 120832., ..., 112640., 117248., 105472.],
         [100352., 106496., 129536., ..., 112640., 117248., 104448.],
         [107008., 113664., 132096., ..., 104448., 107008.,  98816.],
         ...,
         [108544., 122880.,  82432., ...,  47104.,  33792.,  26112.],
         [107520.,  97792.,  49152., ..., 105984., 102912.,  87552.],
         [107520.,  86016.,  39936., ..., 193536., 186880., 180224.]],

        [[ 88064.,  96256., 120832., ..., 112640., 117248., 105472.],
         [100352., 106496., 129536., ..., 112640., 117248., 104448.],
         [107008., 113664., 132096., ..., 104448., 107008.,  98816.],
         ...,
         [108544., 122880.,  82432., ...,  47104.,  33792.,  26112.],
         [107520.,  97792.,  49152., ..., 105984., 102912.,  87552.],
         [107520.,  86016.,  39936., ..., 193536., 186880., 180224.]],

        [[ 88064.,  96256., 120832., ..., 112640., 117248., 105472.],
         [100352., 106496., 129536., ..., 112640., 117248., 104448.],
         [107008., 113664., 132096., ..., 104448., 107008.,  98816.],
         ...,
         [108544., 122880.,  82432., ...,  47104.,  33792.,  26112.],
         [107520.,  97792.,  49152., ..., 105984., 102912.,  87552.],
         [107520.,  86016.,  39936., ..., 193536., 186880., 180224.]],

        ...,

        [[ 88064.,  96256., 120832., ..., 112640., 117248., 105472.],
         [100352., 106496., 129536., ..., 112640., 117248., 104448.],
         [107008., 113664., 132096., ..., 104448., 107008.,  98816.],
         ...,
         [108544., 122880.,  82432., ...,  47104.,  33792.,  26112.],
         [107520.,  97792.,  49152., ..., 105984., 102912.,  87552.],
         [107520.,  86016.,  39936., ..., 193536., 186880., 180224.]],

        [[ 88064.,  96256., 120832., ..., 112640., 117248., 105472.],
         [100352., 106496., 129536., ..., 112640., 117248., 104448.],
         [107008., 113664., 132096., ..., 104448., 107008.,  98816.],
         ...,
         [108544., 122880.,  82432., ...,  47104.,  33792.,  26112.],
         [107520.,  97792.,  49152., ..., 105984., 102912.,  87552.],
         [107520.,  86016.,  39936., ..., 193536., 186880., 180224.]],

        [[ 88064.,  96256., 120832., ..., 112640., 117248., 105472.],
         [100352., 106496., 129536., ..., 112640., 117248., 104448.],
         [107008., 113664., 132096., ..., 104448., 107008.,  98816.],
         ...,
         [108544., 122880.,  82432., ...,  47104.,  33792.,  26112.],
         [107520.,  97792.,  49152., ..., 105984., 102912.,  87552.],
         [107520.,  86016.,  39936., ..., 193536., 186880., 180224.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 1024, 32, 32]), 'from': [7, 7], 'to': [16]}
tf node:
{'name': 'sin', 'output': array([[[[-0.902382  , -0.67626953,  0.06331525, ...,  0.97279346,
          -0.58150333,  0.63665974],
         [-0.10566874,  0.7508606 ,  0.96080333, ...,  0.97279346,
          -0.58150333,  0.5063561 ],
         [-0.8010017 ,  0.9237631 , -0.9931514 , ...,  0.5063561 ,
          -0.8010017 ,  0.33788985],
         ...,
         [ 0.9198799 , -0.2522962 ,  0.24705276, ..., -0.8625297 ,
           0.8569992 , -0.7944714 ],
         [ 0.84606993,  0.4828261 , -0.97758293, ..., -0.695964  ,
          -0.28800824,  0.865257  ],
         [ 0.84606993, -0.7221153 ,  0.07411954, ...,  0.9702275 ,
          -0.7036997 , -0.2515114 ]],

        [[-0.902382  , -0.67626953,  0.06331525, ...,  0.97279346,
          -0.58150333,  0.63665974],
         [-0.10566874,  0.7508606 ,  0.96080333, ...,  0.97279346,
          -0.58150333,  0.5063561 ],
         [-0.8010017 ,  0.9237631 , -0.9931514 , ...,  0.5063561 ,
          -0.8010017 ,  0.33788985],
         ...,
         [ 0.9198799 , -0.2522962 ,  0.24705276, ..., -0.8625297 ,
           0.8569992 , -0.7944714 ],
         [ 0.84606993,  0.4828261 , -0.97758293, ..., -0.695964  ,
          -0.28800824,  0.865257  ],
         [ 0.84606993, -0.7221153 ,  0.07411954, ...,  0.9702275 ,
          -0.7036997 , -0.2515114 ]],

        [[-0.902382  , -0.67626953,  0.06331525, ...,  0.97279346,
          -0.58150333,  0.63665974],
         [-0.10566874,  0.7508606 ,  0.96080333, ...,  0.97279346,
          -0.58150333,  0.5063561 ],
         [-0.8010017 ,  0.9237631 , -0.9931514 , ...,  0.5063561 ,
          -0.8010017 ,  0.33788985],
         ...,
         [ 0.9198799 , -0.2522962 ,  0.24705276, ..., -0.8625297 ,
           0.8569992 , -0.7944714 ],
         [ 0.84606993,  0.4828261 , -0.97758293, ..., -0.695964  ,
          -0.28800824,  0.865257  ],
         [ 0.84606993, -0.7221153 ,  0.07411954, ...,  0.9702275 ,
          -0.7036997 , -0.2515114 ]],

        ...,

        [[-0.902382  , -0.67626953,  0.06331525, ...,  0.97279346,
          -0.58150333,  0.63665974],
         [-0.10566874,  0.7508606 ,  0.96080333, ...,  0.97279346,
          -0.58150333,  0.5063561 ],
         [-0.8010017 ,  0.9237631 , -0.9931514 , ...,  0.5063561 ,
          -0.8010017 ,  0.33788985],
         ...,
         [ 0.9198799 , -0.2522962 ,  0.24705276, ..., -0.8625297 ,
           0.8569992 , -0.7944714 ],
         [ 0.84606993,  0.4828261 , -0.97758293, ..., -0.695964  ,
          -0.28800824,  0.865257  ],
         [ 0.84606993, -0.7221153 ,  0.07411954, ...,  0.9702275 ,
          -0.7036997 , -0.2515114 ]],

        [[-0.902382  , -0.67626953,  0.06331525, ...,  0.97279346,
          -0.58150333,  0.63665974],
         [-0.10566874,  0.7508606 ,  0.96080333, ...,  0.97279346,
          -0.58150333,  0.5063561 ],
         [-0.8010017 ,  0.9237631 , -0.9931514 , ...,  0.5063561 ,
          -0.8010017 ,  0.33788985],
         ...,
         [ 0.9198799 , -0.2522962 ,  0.24705276, ..., -0.8625297 ,
           0.8569992 , -0.7944714 ],
         [ 0.84606993,  0.4828261 , -0.97758293, ..., -0.695964  ,
          -0.28800824,  0.865257  ],
         [ 0.84606993, -0.7221153 ,  0.07411954, ...,  0.9702275 ,
          -0.7036997 , -0.2515114 ]],

        [[-0.902382  , -0.67626953,  0.06331525, ...,  0.97279346,
          -0.58150333,  0.63665974],
         [-0.10566874,  0.7508606 ,  0.96080333, ...,  0.97279346,
          -0.58150333,  0.5063561 ],
         [-0.8010017 ,  0.9237631 , -0.9931514 , ...,  0.5063561 ,
          -0.8010017 ,  0.33788985],
         ...,
         [ 0.9198799 , -0.2522962 ,  0.24705276, ..., -0.8625297 ,
           0.8569992 , -0.7944714 ],
         [ 0.84606993,  0.4828261 , -0.97758293, ..., -0.695964  ,
          -0.28800824,  0.865257  ],
         [ 0.84606993, -0.7221153 ,  0.07411954, ...,  0.9702275 ,
          -0.7036997 , -0.2515114 ]]]], dtype=float32), 'output_shape': TensorShape([1, 1024, 32, 32]), 'from': [9], 'to': []}
ms node:
{'name': 'sin', 'output': array([[[[-9.0238202e-01, -6.7626947e-01,  6.3315250e-02, ...,
           9.7279346e-01, -5.8150333e-01,  6.3665980e-01],
         [-1.0566874e-01,  7.5086051e-01,  9.6080333e-01, ...,
           9.7279346e-01, -5.8150333e-01,  5.0635612e-01],
         [-8.0100167e-01,  9.2376310e-01, -9.9315143e-01, ...,
           5.0635612e-01, -8.0100167e-01,  3.3788985e-01],
         ...,
         [ 9.1987991e-01, -2.5229621e-01,  2.4705276e-01, ...,
          -8.6252970e-01,  8.5699922e-01, -7.9447138e-01],
         [ 8.4606993e-01,  4.8282611e-01, -9.7758293e-01, ...,
          -6.9596398e-01, -2.8800824e-01,  8.6525708e-01],
         [ 8.4606993e-01, -7.2211534e-01,  7.4119531e-02, ...,
           9.7022748e-01, -7.0369977e-01, -2.5151137e-01]],

        [[-9.0238202e-01, -6.7626947e-01,  6.3315250e-02, ...,
           9.7279346e-01, -5.8150333e-01,  6.3665980e-01],
         [-1.0566874e-01,  7.5086051e-01,  9.6080333e-01, ...,
           9.7279346e-01, -5.8150333e-01,  5.0635612e-01],
         [-8.0100167e-01,  9.2376310e-01, -9.9315143e-01, ...,
           5.0635612e-01, -8.0100167e-01,  3.3788985e-01],
         ...,
         [ 9.1987991e-01, -2.5229621e-01,  2.4705276e-01, ...,
          -8.6252970e-01,  8.5699922e-01, -7.9447138e-01],
         [ 8.4606993e-01,  4.8282611e-01, -9.7758293e-01, ...,
          -6.9596398e-01, -2.8800824e-01,  8.6525708e-01],
         [ 8.4606993e-01, -7.2211534e-01,  7.4119531e-02, ...,
           9.7022748e-01, -7.0369977e-01, -2.5151137e-01]],

        [[-9.0238202e-01, -6.7626947e-01,  6.3315250e-02, ...,
           9.7279346e-01, -5.8150333e-01,  6.3665980e-01],
         [-1.0566874e-01,  7.5086051e-01,  9.6080333e-01, ...,
           9.7279346e-01, -5.8150333e-01,  5.0635612e-01],
         [-8.0100167e-01,  9.2376310e-01, -9.9315143e-01, ...,
           5.0635612e-01, -8.0100167e-01,  3.3788985e-01],
         ...,
         [ 9.1987991e-01, -2.5229621e-01,  2.4705276e-01, ...,
          -8.6252970e-01,  8.5699922e-01, -7.9447138e-01],
         [ 8.4606993e-01,  4.8282611e-01, -9.7758293e-01, ...,
          -6.9596398e-01, -2.8800824e-01,  8.6525708e-01],
         [ 8.4606993e-01, -7.2211534e-01,  7.4119531e-02, ...,
           9.7022748e-01, -7.0369977e-01, -2.5151137e-01]],

        ...,

        [[ 4.4032000e+04,  4.8128000e+04,  6.0416000e+04, ...,
           5.6320000e+04,  5.8624000e+04,  5.2736000e+04],
         [ 5.0176000e+04,  5.3248000e+04,  6.4768000e+04, ...,
           5.6320000e+04,  5.8624000e+04,  5.2224000e+04],
         [ 5.3504000e+04,  5.6832000e+04,  6.6048000e+04, ...,
           5.2224000e+04,  5.3504000e+04,  4.9408000e+04],
         ...,
         [ 5.4272000e+04,  6.1440000e+04,  4.1216000e+04, ...,
           2.3552000e+04,  1.6896000e+04,  1.3056000e+04],
         [ 5.3760000e+04,  4.8896000e+04,  2.4576000e+04, ...,
           5.2992000e+04,  5.1456000e+04,  4.3776000e+04],
         [ 5.3760000e+04,  4.3008000e+04,  1.9968000e+04, ...,
           9.6768000e+04,  9.3440000e+04,  9.0112000e+04]],

        [[ 4.4032000e+04,  4.8128000e+04,  6.0416000e+04, ...,
           5.6320000e+04,  5.8624000e+04,  5.2736000e+04],
         [ 5.0176000e+04,  5.3248000e+04,  6.4768000e+04, ...,
           5.6320000e+04,  5.8624000e+04,  5.2224000e+04],
         [ 5.3504000e+04,  5.6832000e+04,  6.6048000e+04, ...,
           5.2224000e+04,  5.3504000e+04,  4.9408000e+04],
         ...,
         [ 5.4272000e+04,  6.1440000e+04,  4.1216000e+04, ...,
           2.3552000e+04,  1.6896000e+04,  1.3056000e+04],
         [ 5.3760000e+04,  4.8896000e+04,  2.4576000e+04, ...,
           5.2992000e+04,  5.1456000e+04,  4.3776000e+04],
         [ 5.3760000e+04,  4.3008000e+04,  1.9968000e+04, ...,
           9.6768000e+04,  9.3440000e+04,  9.0112000e+04]],

        [[ 4.4032000e+04,  4.8128000e+04,  6.0416000e+04, ...,
           5.6320000e+04,  5.8624000e+04,  5.2736000e+04],
         [ 5.0176000e+04,  5.3248000e+04,  6.4768000e+04, ...,
           5.6320000e+04,  5.8624000e+04,  5.2224000e+04],
         [ 5.3504000e+04,  5.6832000e+04,  6.6048000e+04, ...,
           5.2224000e+04,  5.3504000e+04,  4.9408000e+04],
         ...,
         [ 5.4272000e+04,  6.1440000e+04,  4.1216000e+04, ...,
           2.3552000e+04,  1.6896000e+04,  1.3056000e+04],
         [ 5.3760000e+04,  4.8896000e+04,  2.4576000e+04, ...,
           5.2992000e+04,  5.1456000e+04,  4.3776000e+04],
         [ 5.3760000e+04,  4.3008000e+04,  1.9968000e+04, ...,
           9.6768000e+04,  9.3440000e+04,  9.0112000e+04]]]],
      dtype=float32), 'output_shape': (1, 1024, 32, 32), 'from': [9], 'to': []}
torch node:
{'name': 'sin', 'output': array([[[[-0.902382  , -0.6762695 ,  0.06331525, ...,  0.97279346,
          -0.58150333,  0.6366598 ],
         [-0.10566874,  0.7508605 ,  0.96080333, ...,  0.97279346,
          -0.58150333,  0.5063561 ],
         [-0.80100167,  0.9237631 , -0.9931514 , ...,  0.5063561 ,
          -0.80100167,  0.33788985],
         ...,
         [ 0.9198799 , -0.2522962 ,  0.24705276, ..., -0.8625297 ,
           0.8569992 , -0.7944714 ],
         [ 0.84606993,  0.4828261 , -0.97758293, ..., -0.695964  ,
          -0.28800824,  0.8652571 ],
         [ 0.84606993, -0.72211534,  0.07411953, ...,  0.9702275 ,
          -0.70369977, -0.25151137]],

        [[-0.902382  , -0.6762695 ,  0.06331525, ...,  0.97279346,
          -0.58150333,  0.6366598 ],
         [-0.10566874,  0.7508605 ,  0.96080333, ...,  0.97279346,
          -0.58150333,  0.5063561 ],
         [-0.80100167,  0.9237631 , -0.9931514 , ...,  0.5063561 ,
          -0.80100167,  0.33788985],
         ...,
         [ 0.9198799 , -0.2522962 ,  0.24705276, ..., -0.8625297 ,
           0.8569992 , -0.7944714 ],
         [ 0.84606993,  0.4828261 , -0.97758293, ..., -0.695964  ,
          -0.28800824,  0.8652571 ],
         [ 0.84606993, -0.72211534,  0.07411953, ...,  0.9702275 ,
          -0.70369977, -0.25151137]],

        [[-0.902382  , -0.6762695 ,  0.06331525, ...,  0.97279346,
          -0.58150333,  0.6366598 ],
         [-0.10566874,  0.7508605 ,  0.96080333, ...,  0.97279346,
          -0.58150333,  0.5063561 ],
         [-0.80100167,  0.9237631 , -0.9931514 , ...,  0.5063561 ,
          -0.80100167,  0.33788985],
         ...,
         [ 0.9198799 , -0.2522962 ,  0.24705276, ..., -0.8625297 ,
           0.8569992 , -0.7944714 ],
         [ 0.84606993,  0.4828261 , -0.97758293, ..., -0.695964  ,
          -0.28800824,  0.8652571 ],
         [ 0.84606993, -0.72211534,  0.07411953, ...,  0.9702275 ,
          -0.70369977, -0.25151137]],

        ...,

        [[-0.902382  , -0.6762695 ,  0.06331525, ...,  0.97279346,
          -0.58150333,  0.6366598 ],
         [-0.10566874,  0.7508605 ,  0.96080333, ...,  0.97279346,
          -0.58150333,  0.5063561 ],
         [-0.80100167,  0.9237631 , -0.9931514 , ...,  0.5063561 ,
          -0.80100167,  0.33788985],
         ...,
         [ 0.9198799 , -0.2522962 ,  0.24705276, ..., -0.8625297 ,
           0.8569992 , -0.7944714 ],
         [ 0.84606993,  0.4828261 , -0.97758293, ..., -0.695964  ,
          -0.28800824,  0.8652571 ],
         [ 0.84606993, -0.72211534,  0.07411953, ...,  0.9702275 ,
          -0.70369977, -0.25151137]],

        [[-0.902382  , -0.6762695 ,  0.06331525, ...,  0.97279346,
          -0.58150333,  0.6366598 ],
         [-0.10566874,  0.7508605 ,  0.96080333, ...,  0.97279346,
          -0.58150333,  0.5063561 ],
         [-0.80100167,  0.9237631 , -0.9931514 , ...,  0.5063561 ,
          -0.80100167,  0.33788985],
         ...,
         [ 0.9198799 , -0.2522962 ,  0.24705276, ..., -0.8625297 ,
           0.8569992 , -0.7944714 ],
         [ 0.84606993,  0.4828261 , -0.97758293, ..., -0.695964  ,
          -0.28800824,  0.8652571 ],
         [ 0.84606993, -0.72211534,  0.07411953, ...,  0.9702275 ,
          -0.70369977, -0.25151137]],

        [[-0.902382  , -0.6762695 ,  0.06331525, ...,  0.97279346,
          -0.58150333,  0.6366598 ],
         [-0.10566874,  0.7508605 ,  0.96080333, ...,  0.97279346,
          -0.58150333,  0.5063561 ],
         [-0.80100167,  0.9237631 , -0.9931514 , ...,  0.5063561 ,
          -0.80100167,  0.33788985],
         ...,
         [ 0.9198799 , -0.2522962 ,  0.24705276, ..., -0.8625297 ,
           0.8569992 , -0.7944714 ],
         [ 0.84606993,  0.4828261 , -0.97758293, ..., -0.695964  ,
          -0.28800824,  0.8652571 ],
         [ 0.84606993, -0.72211534,  0.07411953, ...,  0.9702275 ,
          -0.70369977, -0.25151137]]]], dtype=float32), 'output_shape': torch.Size([1, 1024, 32, 32]), 'from': [9], 'to': []}

generate models:37

analyse the exceptions in iter:60
tensorflow exception:
{'id': 16, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 1024, 32, 32), dtype=float32, numpy=
array([[[[[nan, nan, nan, ..., nan, nan, nan],
          [nan, nan, nan, ..., nan, nan, nan],
          [nan, nan, nan, ..., nan, nan, nan],
          ...,
          [nan, nan, nan, ..., nan, nan, nan],
          [nan, nan, nan, ..., nan, nan, nan],
          [nan, nan, nan, ..., nan, nan, nan]],

         [[nan, nan, nan, ..., nan, nan, nan],
          [nan, nan, nan, ..., nan, nan, nan],
          [nan, nan, nan, ..., nan, nan, nan],
          ...,
          [nan, nan, nan, ..., nan, nan, nan],
          [nan, nan, nan, ..., nan, nan, nan],
          [nan, nan, nan, ..., nan, nan, nan]],

         [[nan, nan, nan, ..., nan, nan, nan],
          [nan, nan, nan, ..., nan, nan, nan],
          [nan, nan, nan, ..., nan, nan, nan],
          ...,
          [nan, nan, nan, ..., nan, nan, nan],
          [nan, nan, nan, ..., nan, nan, nan],
          [nan, nan, nan, ..., nan, nan, nan]],

         ...,

         [[nan, nan, nan, ..., nan, nan, nan],
          [nan, nan, nan, ..., nan, nan, nan],
          [nan, nan, nan, ..., nan, nan, nan],
          ...,
          [nan, nan, nan, ..., nan, nan, nan],
          [nan, nan, nan, ..., nan, nan, nan],
          [nan, nan, nan, ..., nan, nan, nan]],

         [[nan, nan, nan, ..., nan, nan, nan],
          [nan, nan, nan, ..., nan, nan, nan],
          [nan, nan, nan, ..., nan, nan, nan],
          ...,
          [nan, nan, nan, ..., nan, nan, nan],
          [nan, nan, nan, ..., nan, nan, nan],
          [nan, nan, nan, ..., nan, nan, nan]],

         [[nan, nan, nan, ..., nan, nan, nan],
          [nan, nan, nan, ..., nan, nan, nan],
          [nan, nan, nan, ..., nan, nan, nan],
          ...,
          [nan, nan, nan, ..., nan, nan, nan],
          [nan, nan, nan, ..., nan, nan, nan],
          [nan, nan, nan, ..., nan, nan, nan]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:38

analyse the exceptions in iter:62
tensorflow exception:
{'id': 16, 'name': 'avgpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 1024, 32, 32), dtype=float32, numpy=
array([[[[[-44.651855, -45.047142, -48.541996, ..., -63.19002 ,
           -71.765205, -65.75065 ],
          [-58.3101  , -59.694817, -60.88096 , ..., -67.287445,
           -78.10707 , -77.08362 ],
          [-77.72079 , -78.66527 , -72.83147 , ..., -79.94904 ,
           -83.48051 , -75.612526],
          ...,
          [-37.21852 , -38.999744, -40.426003, ..., -33.882774,
           -34.076115, -36.68751 ],
          [-34.16605 , -27.877546, -23.349411, ..., -45.83876 ,
           -47.668076, -49.54464 ],
          [-28.358383, -26.971302, -29.08576 , ..., -32.84062 ,
           -36.890297, -35.38134 ]],

         [[-44.651855, -45.047142, -48.541996, ..., -63.19002 ,
           -71.765205, -65.75065 ],
          [-58.3101  , -59.694817, -60.88096 , ..., -67.287445,
           -78.10707 , -77.08362 ],
          [-77.72079 , -78.66527 , -72.83147 , ..., -79.94904 ,
           -83.48051 , -75.612526],
          ...,
          [-37.21852 , -38.999744, -40.426003, ..., -33.882774,
           -34.076115, -36.68751 ],
          [-34.16605 , -27.877546, -23.349411, ..., -45.83876 ,
           -47.668076, -49.54464 ],
          [-28.358383, -26.971302, -29.08576 , ..., -32.84062 ,
           -36.890297, -35.38134 ]],

         [[-44.651855, -45.047142, -48.541996, ..., -63.19002 ,
           -71.765205, -65.75065 ],
          [-58.3101  , -59.694817, -60.88096 , ..., -67.287445,
           -78.10707 , -77.08362 ],
          [-77.72079 , -78.66527 , -72.83147 , ..., -79.94904 ,
           -83.48051 , -75.612526],
          ...,
          [-37.21852 , -38.999744, -40.426003, ..., -33.882774,
           -34.076115, -36.68751 ],
          [-34.16605 , -27.877546, -23.349411, ..., -45.83876 ,
           -47.668076, -49.54464 ],
          [-28.358383, -26.971302, -29.08576 , ..., -32.84062 ,
           -36.890297, -35.38134 ]],

         ...,

         [[-56.42961 , -56.791378, -60.240646, ..., -75.122314,
           -83.66649 , -77.65193 ],
          [-70.12627 , -71.44468 , -72.57384 , ..., -79.23506 ,
           -90.02908 , -89.021034],
          [-89.49854 , -90.36392 , -84.50108 , ..., -91.86072 ,
           -95.366104, -87.51901 ],
          ...,
          [-46.673298, -48.24969 , -49.61624 , ..., -44.1661  ,
           -44.394226, -46.899403],
          [-42.514824, -35.81813 , -30.87181 , ..., -55.146683,
           -56.95686 , -58.890297],
          [-39.779236, -38.262196, -40.282604, ..., -44.51024 ,
           -48.55406 , -47.102913]],

         [[-56.42961 , -56.791378, -60.240646, ..., -75.122314,
           -83.66649 , -77.65193 ],
          [-70.12627 , -71.44468 , -72.57384 , ..., -79.23506 ,
           -90.02908 , -89.021034],
          [-89.49854 , -90.36392 , -84.50108 , ..., -91.86072 ,
           -95.366104, -87.51901 ],
          ...,
          [-46.673298, -48.24969 , -49.61624 , ..., -44.1661  ,
           -44.394226, -46.899403],
          [-42.514824, -35.81813 , -30.87181 , ..., -55.146683,
           -56.95686 , -58.890297],
          [-39.779236, -38.262196, -40.282604, ..., -44.51024 ,
           -48.55406 , -47.102913]],

         [[-56.42961 , -56.791378, -60.240646, ..., -75.122314,
           -83.66649 , -77.65193 ],
          [-70.12627 , -71.44468 , -72.57384 , ..., -79.23506 ,
           -90.02908 , -89.021034],
          [-89.49854 , -90.36392 , -84.50108 , ..., -91.86072 ,
           -95.366104, -87.51901 ],
          ...,
          [-46.673298, -48.24969 , -49.61624 , ..., -44.1661  ,
           -44.394226, -46.899403],
          [-42.514824, -35.81813 , -30.87181 , ..., -55.146683,
           -56.95686 , -58.890297],
          [-39.779236, -38.262196, -40.282604, ..., -44.51024 ,
           -48.55406 , -47.102913]]]]], dtype=float32)>}
Default AvgPoolingOp only supports NHWC on device type CPU [Op:AvgPool]

generate models:40

analyse the exceptions in iter:67
tensorflow exception:
{'id': 16, 'name': 'avgpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 1024, 32, 32), dtype=float32, numpy=
array([[[[[4.0600007e+03, 3.9617246e+03, 4.0336487e+03, ...,
           4.0012324e+03, 3.9643613e+03, 3.9643613e+03],
          [3.7696077e+03, 3.7075701e+03, 4.1147197e+03, ...,
           4.0753469e+03, 4.0383433e+03, 4.0420657e+03],
          [3.6105642e+03, 3.7372983e+03, 4.1479102e+03, ...,
           4.0862385e+03, 4.0600007e+03, 4.0687839e+03],
          ...,
          [2.7919922e+03, 2.5098879e+03, 2.4669121e+03, ...,
           2.1940000e+03, 2.2203086e+03, 2.3080952e+03],
          [2.4493730e+03, 2.3260007e+03, 2.3080952e+03, ...,
           2.3227837e+03, 2.3440654e+03, 2.3440654e+03],
          [2.1537090e+03, 2.0800845e+03, 2.0956875e+03, ...,
           2.2819299e+03, 2.2552002e+03, 2.2276685e+03]],

         [[4.0600007e+03, 3.9617246e+03, 4.0336487e+03, ...,
           4.0012324e+03, 3.9643613e+03, 3.9643613e+03],
          [3.7696077e+03, 3.7075701e+03, 4.1147197e+03, ...,
           4.0753469e+03, 4.0383433e+03, 4.0420657e+03],
          [3.6105642e+03, 3.7372983e+03, 4.1479102e+03, ...,
           4.0862385e+03, 4.0600007e+03, 4.0687839e+03],
          ...,
          [2.7919922e+03, 2.5098879e+03, 2.4669121e+03, ...,
           2.1940000e+03, 2.2203086e+03, 2.3080952e+03],
          [2.4493730e+03, 2.3260007e+03, 2.3080952e+03, ...,
           2.3227837e+03, 2.3440654e+03, 2.3440654e+03],
          [2.1537090e+03, 2.0800845e+03, 2.0956875e+03, ...,
           2.2819299e+03, 2.2552002e+03, 2.2276685e+03]],

         [[4.0600007e+03, 3.9617246e+03, 4.0336487e+03, ...,
           4.0012324e+03, 3.9643613e+03, 3.9643613e+03],
          [3.7696077e+03, 3.7075701e+03, 4.1147197e+03, ...,
           4.0753469e+03, 4.0383433e+03, 4.0420657e+03],
          [3.6105642e+03, 3.7372983e+03, 4.1479102e+03, ...,
           4.0862385e+03, 4.0600007e+03, 4.0687839e+03],
          ...,
          [2.7919922e+03, 2.5098879e+03, 2.4669121e+03, ...,
           2.1940000e+03, 2.2203086e+03, 2.3080952e+03],
          [2.4493730e+03, 2.3260007e+03, 2.3080952e+03, ...,
           2.3227837e+03, 2.3440654e+03, 2.3440654e+03],
          [2.1537090e+03, 2.0800845e+03, 2.0956875e+03, ...,
           2.2819299e+03, 2.2552002e+03, 2.2276685e+03]],

         ...,

         [[2.0000000e+00, 2.0000000e+00, 2.0000000e+00, ...,
           2.0000000e+00, 2.0000000e+00, 2.0000000e+00],
          [2.0000000e+00, 2.0000000e+00, 2.0000000e+00, ...,
           2.0000000e+00, 2.0000000e+00, 2.0000000e+00],
          [2.0000000e+00, 2.0000000e+00, 2.0000000e+00, ...,
           2.0000000e+00, 2.0000000e+00, 2.0000000e+00],
          ...,
          [2.0000000e+00, 2.0000000e+00, 2.0000000e+00, ...,
           2.0000000e+00, 2.0000000e+00, 2.0000000e+00],
          [2.0000000e+00, 2.0000000e+00, 2.0000000e+00, ...,
           2.0000000e+00, 2.0000000e+00, 2.0000000e+00],
          [2.0000000e+00, 2.0000000e+00, 2.0000000e+00, ...,
           2.0000000e+00, 2.0000000e+00, 2.0000000e+00]],

         [[2.0000000e+00, 2.0000000e+00, 2.0000000e+00, ...,
           2.0000000e+00, 2.0000000e+00, 2.0000000e+00],
          [2.0000000e+00, 2.0000000e+00, 2.0000000e+00, ...,
           2.0000000e+00, 2.0000000e+00, 2.0000000e+00],
          [2.0000000e+00, 2.0000000e+00, 2.0000000e+00, ...,
           2.0000000e+00, 2.0000000e+00, 2.0000000e+00],
          ...,
          [2.0000000e+00, 2.0000000e+00, 2.0000000e+00, ...,
           2.0000000e+00, 2.0000000e+00, 2.0000000e+00],
          [2.0000000e+00, 2.0000000e+00, 2.0000000e+00, ...,
           2.0000000e+00, 2.0000000e+00, 2.0000000e+00],
          [2.0000000e+00, 2.0000000e+00, 2.0000000e+00, ...,
           2.0000000e+00, 2.0000000e+00, 2.0000000e+00]],

         [[2.0000000e+00, 2.0000000e+00, 2.0000000e+00, ...,
           2.0000000e+00, 2.0000000e+00, 2.0000000e+00],
          [2.0000000e+00, 2.0000000e+00, 2.0000000e+00, ...,
           2.0000000e+00, 2.0000000e+00, 2.0000000e+00],
          [2.0000000e+00, 2.0000000e+00, 2.0000000e+00, ...,
           2.0000000e+00, 2.0000000e+00, 2.0000000e+00],
          ...,
          [2.0000000e+00, 2.0000000e+00, 2.0000000e+00, ...,
           2.0000000e+00, 2.0000000e+00, 2.0000000e+00],
          [2.0000000e+00, 2.0000000e+00, 2.0000000e+00, ...,
           2.0000000e+00, 2.0000000e+00, 2.0000000e+00],
          [2.0000000e+00, 2.0000000e+00, 2.0000000e+00, ...,
           2.0000000e+00, 2.0000000e+00, 2.0000000e+00]]]]], dtype=float32)>}
Default AvgPoolingOp only supports NHWC on device type CPU [Op:AvgPool]

generate models:44

analyse the exceptions in iter:73
tensorflow exception:
{'id': 16, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 1024, 32, 32), dtype=float32, numpy=
array([[[[[ 46849.57,  56449.57,  66817.57, ...,  66433.57,  48001.57,
            48769.57],
          [ 61441.57,  66049.57,  58369.57, ...,  50689.57,  39937.57,
            41473.57],
          [ 75265.57,  79489.57,  65281.57, ...,  60289.57,  48769.57,
            45697.57],
          ...,
          [153601.58, 160129.58, 159361.58, ..., 128257.57, 132481.58,
           125953.57],
          [159745.58, 159361.58, 153985.58, ..., 175873.58, 175489.58,
           168193.58],
          [100993.57, 100993.57,  98305.57, ..., 120194.57, 119425.57,
           112513.57]],

         [[ 46849.57,  56449.57,  66817.57, ...,  66433.57,  48001.57,
            48769.57],
          [ 61441.57,  66049.57,  58369.57, ...,  50689.57,  39937.57,
            41473.57],
          [ 75265.57,  79489.57,  65281.57, ...,  60289.57,  48769.57,
            45697.57],
          ...,
          [153601.58, 160129.58, 159361.58, ..., 128257.57, 132481.58,
           125953.57],
          [159745.58, 159361.58, 153985.58, ..., 175873.58, 175489.58,
           168193.58],
          [100993.57, 100993.57,  98305.57, ..., 120194.57, 119425.57,
           112513.57]],

         [[ 46849.57,  56449.57,  66817.57, ...,  66433.57,  48001.57,
            48769.57],
          [ 61441.57,  66049.57,  58369.57, ...,  50689.57,  39937.57,
            41473.57],
          [ 75265.57,  79489.57,  65281.57, ...,  60289.57,  48769.57,
            45697.57],
          ...,
          [153601.58, 160129.58, 159361.58, ..., 128257.57, 132481.58,
           125953.57],
          [159745.58, 159361.58, 153985.58, ..., 175873.58, 175489.58,
           168193.58],
          [100993.57, 100993.57,  98305.57, ..., 120194.57, 119425.57,
           112513.57]],

         ...,

         [[ 46849.57,  56449.57,  66817.57, ...,  66433.57,  48001.57,
            48769.57],
          [ 61441.57,  66049.57,  58369.57, ...,  50689.57,  39937.57,
            41473.57],
          [ 75265.57,  79489.57,  65281.57, ...,  60289.57,  48769.57,
            45697.57],
          ...,
          [153601.58, 160129.58, 159361.58, ..., 128257.57, 132481.58,
           125953.57],
          [159745.58, 159361.58, 153985.58, ..., 175873.58, 175489.58,
           168193.58],
          [100993.57, 100993.57,  98305.57, ..., 120194.57, 119425.57,
           112513.57]],

         [[ 46849.57,  56449.57,  66817.57, ...,  66433.57,  48001.57,
            48769.57],
          [ 61441.57,  66049.57,  58369.57, ...,  50689.57,  39937.57,
            41473.57],
          [ 75265.57,  79489.57,  65281.57, ...,  60289.57,  48769.57,
            45697.57],
          ...,
          [153601.58, 160129.58, 159361.58, ..., 128257.57, 132481.58,
           125953.57],
          [159745.58, 159361.58, 153985.58, ..., 175873.58, 175489.58,
           168193.58],
          [100993.57, 100993.57,  98305.57, ..., 120194.57, 119425.57,
           112513.57]],

         [[ 46849.57,  56449.57,  66817.57, ...,  66433.57,  48001.57,
            48769.57],
          [ 61441.57,  66049.57,  58369.57, ...,  50689.57,  39937.57,
            41473.57],
          [ 75265.57,  79489.57,  65281.57, ...,  60289.57,  48769.57,
            45697.57],
          ...,
          [153601.58, 160129.58, 159361.58, ..., 128257.57, 132481.58,
           125953.57],
          [159745.58, 159361.58, 153985.58, ..., 175873.58, 175489.58,
           168193.58],
          [100993.57, 100993.57,  98305.57, ..., 120194.57, 119425.57,
           112513.57]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:47

analyse output arrays in iter:74

pre layer res:
7:add
{'name': 'add', 'output': array([[[[24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014],
         [24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014],
         [24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014],
         ...,
         [24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014],
         [24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014],
         [24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014]],

        [[24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014],
         [24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014],
         [24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014],
         ...,
         [24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014],
         [24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014],
         [24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014]],

        [[24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014],
         [24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014],
         [24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014],
         ...,
         [24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014],
         [24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014],
         [24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014]],

        ...,

        [[24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014],
         [24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014],
         [24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014],
         ...,
         [24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014],
         [24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014],
         [24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014]],

        [[24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014],
         [24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014],
         [24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014],
         ...,
         [24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014],
         [24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014],
         [24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014]],

        [[24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014],
         [24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014],
         [24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014],
         ...,
         [24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014],
         [24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014],
         [24.371014, 24.371014, 24.371014, ..., 24.371014, 24.371014,
          24.371014]]]], dtype=float32), 'output_shape': TensorShape([1, 1024, 32, 32]), 'from': [6, 6], 'to': [4, 15]}
tf node:
{'name': 'sin', 'output': array([[[[-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         ...,
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726]],

        [[-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         ...,
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726]],

        [[-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         ...,
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726]],

        ...,

        [[-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         ...,
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726]],

        [[-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         ...,
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726]],

        [[-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         ...,
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726]]]], dtype=float32), 'output_shape': TensorShape([1, 1024, 32, 32]), 'from': [7], 'to': [9]}
ms node:
{'name': 'sin', 'output': array([[[[-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         ...,
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726]],

        [[-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         ...,
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726]],

        [[-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         ...,
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726],
         [-0.6901726, -0.6901726, -0.6901726, ..., -0.6901726,
          -0.6901726, -0.6901726]],

        ...,

        [[12.185507 , 12.185507 , 12.185507 , ..., 12.185507 ,
          12.185507 , 12.185507 ],
         [12.185507 , 12.185507 , 12.185507 , ..., 12.185507 ,
          12.185507 , 12.185507 ],
         [12.185507 , 12.185507 , 12.185507 , ..., 12.185507 ,
          12.185507 , 12.185507 ],
         ...,
         [12.185507 , 12.185507 , 12.185507 , ..., 12.185507 ,
          12.185507 , 12.185507 ],
         [12.185507 , 12.185507 , 12.185507 , ..., 12.185507 ,
          12.185507 , 12.185507 ],
         [12.185507 , 12.185507 , 12.185507 , ..., 12.185507 ,
          12.185507 , 12.185507 ]],

        [[12.185507 , 12.185507 , 12.185507 , ..., 12.185507 ,
          12.185507 , 12.185507 ],
         [12.185507 , 12.185507 , 12.185507 , ..., 12.185507 ,
          12.185507 , 12.185507 ],
         [12.185507 , 12.185507 , 12.185507 , ..., 12.185507 ,
          12.185507 , 12.185507 ],
         ...,
         [12.185507 , 12.185507 , 12.185507 , ..., 12.185507 ,
          12.185507 , 12.185507 ],
         [12.185507 , 12.185507 , 12.185507 , ..., 12.185507 ,
          12.185507 , 12.185507 ],
         [12.185507 , 12.185507 , 12.185507 , ..., 12.185507 ,
          12.185507 , 12.185507 ]],

        [[12.185507 , 12.185507 , 12.185507 , ..., 12.185507 ,
          12.185507 , 12.185507 ],
         [12.185507 , 12.185507 , 12.185507 , ..., 12.185507 ,
          12.185507 , 12.185507 ],
         [12.185507 , 12.185507 , 12.185507 , ..., 12.185507 ,
          12.185507 , 12.185507 ],
         ...,
         [12.185507 , 12.185507 , 12.185507 , ..., 12.185507 ,
          12.185507 , 12.185507 ],
         [12.185507 , 12.185507 , 12.185507 , ..., 12.185507 ,
          12.185507 , 12.185507 ],
         [12.185507 , 12.185507 , 12.185507 , ..., 12.185507 ,
          12.185507 , 12.185507 ]]]], dtype=float32), 'output_shape': (1, 1024, 32, 32), 'from': [7], 'to': [9]}
torch node:
{'name': 'sin', 'output': array([[[[-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124],
         [-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124],
         [-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124],
         ...,
         [-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124],
         [-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124],
         [-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124]],

        [[-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124],
         [-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124],
         [-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124],
         ...,
         [-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124],
         [-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124],
         [-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124]],

        [[-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124],
         [-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124],
         [-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124],
         ...,
         [-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124],
         [-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124],
         [-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124]],

        ...,

        [[-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124],
         [-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124],
         [-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124],
         ...,
         [-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124],
         [-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124],
         [-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124]],

        [[-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124],
         [-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124],
         [-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124],
         ...,
         [-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124],
         [-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124],
         [-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124]],

        [[-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124],
         [-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124],
         [-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124],
         ...,
         [-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124],
         [-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124],
         [-0.69017124, -0.69017124, -0.69017124, ..., -0.69017124,
          -0.69017124, -0.69017124]]]], dtype=float32), 'output_shape': torch.Size([1, 1024, 32, 32]), 'from': [7], 'to': [9]}

generate models:48

analyse the exceptions in iter:78
tensorflow exception:
{'id': 16, 'name': 'avgpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 1024, 32, 32), dtype=float32, numpy=
array([[[[[169472., 139776., 154624., ..., 294912., 271872., 208896.],
          [115200.,  67584.,  79872., ..., 261120., 241152., 164352.],
          [ 91648.,  70656.,  73728., ..., 268800., 251904., 167424.],
          ...,
          [ 70144.,  59904.,  86528., ..., 204288., 183296., 144896.],
          [ 41472.,  47104.,  65536., ..., 188928., 173056., 129536.],
          [ 72704.,  59392.,  66048., ..., 125952., 115712., 127488.]],

         [[169472., 139776., 154624., ..., 294912., 271872., 208896.],
          [115200.,  67584.,  79872., ..., 261120., 241152., 164352.],
          [ 91648.,  70656.,  73728., ..., 268800., 251904., 167424.],
          ...,
          [ 70144.,  59904.,  86528., ..., 204288., 183296., 144896.],
          [ 41472.,  47104.,  65536., ..., 188928., 173056., 129536.],
          [ 72704.,  59392.,  66048., ..., 125952., 115712., 127488.]],

         [[169472., 139776., 154624., ..., 294912., 271872., 208896.],
          [115200.,  67584.,  79872., ..., 261120., 241152., 164352.],
          [ 91648.,  70656.,  73728., ..., 268800., 251904., 167424.],
          ...,
          [ 70144.,  59904.,  86528., ..., 204288., 183296., 144896.],
          [ 41472.,  47104.,  65536., ..., 188928., 173056., 129536.],
          [ 72704.,  59392.,  66048., ..., 125952., 115712., 127488.]],

         ...,

         [[169472., 139776., 154624., ..., 294912., 271872., 208896.],
          [115200.,  67584.,  79872., ..., 261120., 241152., 164352.],
          [ 91648.,  70656.,  73728., ..., 268800., 251904., 167424.],
          ...,
          [ 70144.,  59904.,  86528., ..., 204288., 183296., 144896.],
          [ 41472.,  47104.,  65536., ..., 188928., 173056., 129536.],
          [ 72704.,  59392.,  66048., ..., 125952., 115712., 127488.]],

         [[169472., 139776., 154624., ..., 294912., 271872., 208896.],
          [115200.,  67584.,  79872., ..., 261120., 241152., 164352.],
          [ 91648.,  70656.,  73728., ..., 268800., 251904., 167424.],
          ...,
          [ 70144.,  59904.,  86528., ..., 204288., 183296., 144896.],
          [ 41472.,  47104.,  65536., ..., 188928., 173056., 129536.],
          [ 72704.,  59392.,  66048., ..., 125952., 115712., 127488.]],

         [[169472., 139776., 154624., ..., 294912., 271872., 208896.],
          [115200.,  67584.,  79872., ..., 261120., 241152., 164352.],
          [ 91648.,  70656.,  73728., ..., 268800., 251904., 167424.],
          ...,
          [ 70144.,  59904.,  86528., ..., 204288., 183296., 144896.],
          [ 41472.,  47104.,  65536., ..., 188928., 173056., 129536.],
          [ 72704.,  59392.,  66048., ..., 125952., 115712., 127488.]]]]],
      dtype=float32)>}
Default AvgPoolingOp only supports NHWC on device type CPU [Op:AvgPool]

generate models:51

analyse the exceptions in iter:79
tensorflow exception:
{'id': 16, 'name': 'avgpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 1024, 32, 32), dtype=float32, numpy=
array([[[[[380416.,    -inf,    -inf, ...,    -inf,    -inf,    -inf],
          [   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf],
          [   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf],
          ...,
          [   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf],
          [   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf],
          [   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf]],

         [[   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf],
          [   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf],
          [   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf],
          ...,
          [   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf],
          [   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf],
          [   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf]],

         [[   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf],
          [   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf],
          [   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf],
          ...,
          [   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf],
          [   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf],
          [   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf]],

         ...,

         [[   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf],
          [   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf],
          [   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf],
          ...,
          [   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf],
          [   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf],
          [   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf]],

         [[   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf],
          [   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf],
          [   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf],
          ...,
          [   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf],
          [   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf],
          [   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf]],

         [[   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf],
          [   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf],
          [   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf],
          ...,
          [   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf],
          [   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf],
          [   -inf,    -inf,    -inf, ...,    -inf,    -inf,    -inf]]]]],
      dtype=float32)>}
Default AvgPoolingOp only supports NHWC on device type CPU [Op:AvgPool]

generate models:52

analyse output arrays in iter:86

pre layer res:
2:sigmoid
{'name': 'sigmoid', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 32, 32]), 'from': [0], 'to': [17]}
tf node:
{'name': 'sin', 'output': array([[[[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        ...,

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 32, 32]), 'from': [2], 'to': [1]}
ms node:
{'name': 'sin', 'output': array([[[[  0.84147096,   0.84147096,   0.84147096, ...,   0.84147096,
            0.84147096,   0.84147096],
         [  0.84147096,   0.84147096,   0.84147096, ...,   0.84147096,
            0.84147096,   0.84147096],
         [  0.84147096,   0.84147096,   0.84147096, ...,   0.84147096,
            0.84147096,   0.84147096],
         ...,
         [  0.84147096,   0.84147096,   0.84147096, ...,   0.84147096,
            0.84147096,   0.84147096],
         [  0.84147096,   0.84147096,   0.84147096, ...,   0.84147096,
            0.84147096,   0.84147096],
         [  0.84147096,   0.84147096,   0.84147096, ...,   0.84147096,
            0.84147096,   0.84147096]],

        [[  0.84147096,   0.84147096,   0.84147096, ...,   0.84147096,
            0.84147096,   0.84147096],
         [  0.84147096,   0.84147096,   0.84147096, ...,   0.84147096,
            0.84147096,   0.84147096],
         [  0.84147096,   0.84147096,   0.84147096, ...,   0.84147096,
            0.84147096,   0.84147096],
         ...,
         [  0.84147096,   0.84147096,   0.84147096, ...,   0.84147096,
            0.84147096,   0.84147096],
         [  0.84147096,   0.84147096,   0.84147096, ...,   0.84147096,
            0.84147096,   0.84147096],
         [  0.84147096,   0.84147096,   0.84147096, ...,   0.84147096,
            0.84147096,   0.84147096]],

        [[  0.84147096,   0.84147096,   0.84147096, ...,   0.84147096,
            0.84147096,   0.84147096],
         [  0.84147096,   0.84147096,   0.84147096, ...,   0.84147096,
            0.84147096,   0.84147096],
         [  0.84147096,   0.84147096,   0.84147096, ...,   0.84147096,
            0.84147096,   0.84147096],
         ...,
         [  0.84147096,   0.84147096,   0.84147096, ...,   0.84147096,
            0.84147096,   0.84147096],
         [  0.84147096,   0.84147096,   0.84147096, ...,   0.84147096,
            0.84147096,   0.84147096],
         [  0.84147096,   0.84147096,   0.84147096, ...,   0.84147096,
            0.84147096,   0.84147096]],

        ...,

        [[296.        , 185.        ,  82.        , ..., 265.        ,
          197.        , 199.        ],
         [299.        , 175.        ,  88.        , ..., 272.        ,
          229.        , 257.        ],
         [294.        , 187.        , 129.        , ..., 250.        ,
          241.        , 263.        ],
         ...,
         [439.        , 459.        , 468.        , ..., 420.        ,
          423.        , 421.        ],
         [433.        , 440.        , 444.        , ..., 446.        ,
          432.        , 428.        ],
         [418.        , 414.        , 403.        , ..., 438.        ,
          438.        , 437.        ]],

        [[296.        , 185.        ,  82.        , ..., 265.        ,
          197.        , 199.        ],
         [299.        , 175.        ,  88.        , ..., 272.        ,
          229.        , 257.        ],
         [294.        , 187.        , 129.        , ..., 250.        ,
          241.        , 263.        ],
         ...,
         [439.        , 459.        , 468.        , ..., 420.        ,
          423.        , 421.        ],
         [433.        , 440.        , 444.        , ..., 446.        ,
          432.        , 428.        ],
         [418.        , 414.        , 403.        , ..., 438.        ,
          438.        , 437.        ]],

        [[296.        , 185.        ,  82.        , ..., 265.        ,
          197.        , 199.        ],
         [299.        , 175.        ,  88.        , ..., 272.        ,
          229.        , 257.        ],
         [294.        , 187.        , 129.        , ..., 250.        ,
          241.        , 263.        ],
         ...,
         [439.        , 459.        , 468.        , ..., 420.        ,
          423.        , 421.        ],
         [433.        , 440.        , 444.        , ..., 446.        ,
          432.        , 428.        ],
         [418.        , 414.        , 403.        , ..., 438.        ,
          438.        , 437.        ]]]], dtype=float32), 'output_shape': (1, 128, 32, 32), 'from': [2], 'to': [1]}
torch node:
{'name': 'sin', 'output': array([[[[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        ...,

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 32, 32]), 'from': [2], 'to': [1]}

generate models:54

analyse the exceptions in iter:87
tensorflow exception:
{'id': 16, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 1024, 32, 32), dtype=float32, numpy=
array([[[[[2.7723733e+11, 3.4140332e+07, 3.4734380e+07, ...,
           3.6411688e+07, 4.1653284e+07, 4.2736548e+07],
          [3.8019112e+07, 3.4629548e+07, 3.7005736e+07, ...,
           3.6865960e+07, 4.5112736e+07, 4.5042848e+07],
          [3.8473384e+07, 3.6236968e+07, 3.8089000e+07, ...,
           3.4699436e+07, 4.7104544e+07, 4.6265888e+07],
          ...,
          [3.8543268e+07, 4.0220580e+07, 4.7244320e+07, ...,
           4.0185636e+07, 4.3505312e+07, 4.8642076e+07],
          [3.9871140e+07, 4.1513508e+07, 4.6440608e+07, ...,
           4.3505312e+07, 4.8013088e+07, 5.1472540e+07],
          [4.2142496e+07, 4.4274080e+07, 4.4448800e+07, ...,
           4.7244320e+07, 5.3289628e+07, 5.4337948e+07]],

         [[3.5083816e+07, 3.4140332e+07, 3.4734380e+07, ...,
           3.6411688e+07, 4.1653284e+07, 4.2736548e+07],
          [3.8019112e+07, 3.4629548e+07, 3.7005736e+07, ...,
           3.6865960e+07, 4.5112736e+07, 4.5042848e+07],
          [3.8473384e+07, 3.6236968e+07, 3.8089000e+07, ...,
           3.4699436e+07, 4.7104544e+07, 4.6265888e+07],
          ...,
          [3.8543268e+07, 4.0220580e+07, 4.7244320e+07, ...,
           4.0185636e+07, 4.3505312e+07, 4.8642076e+07],
          [3.9871140e+07, 4.1513508e+07, 4.6440608e+07, ...,
           4.3505312e+07, 4.8013088e+07, 5.1472540e+07],
          [4.2142496e+07, 4.4274080e+07, 4.4448800e+07, ...,
           4.7244320e+07, 5.3289628e+07, 5.4337948e+07]],

         [[3.5083816e+07, 3.4140332e+07, 3.4734380e+07, ...,
           3.6411688e+07, 4.1653284e+07, 4.2736548e+07],
          [3.8019112e+07, 3.4629548e+07, 3.7005736e+07, ...,
           3.6865960e+07, 4.5112736e+07, 4.5042848e+07],
          [3.8473384e+07, 3.6236968e+07, 3.8089000e+07, ...,
           3.4699436e+07, 4.7104544e+07, 4.6265888e+07],
          ...,
          [3.8543268e+07, 4.0220580e+07, 4.7244320e+07, ...,
           4.0185636e+07, 4.3505312e+07, 4.8642076e+07],
          [3.9871140e+07, 4.1513508e+07, 4.6440608e+07, ...,
           4.3505312e+07, 4.8013088e+07, 5.1472540e+07],
          [4.2142496e+07, 4.4274080e+07, 4.4448800e+07, ...,
           4.7244320e+07, 5.3289628e+07, 5.4337948e+07]],

         ...,

         [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
           0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
          [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
           0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
          [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
           0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
          ...,
          [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
           0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
          [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
           0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
          [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
           0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],

         [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
           0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
          [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
           0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
          [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
           0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
          ...,
          [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
           0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
          [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
           0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
          [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
           0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],

         [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
           0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
          [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
           0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
          [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
           0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
          ...,
          [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
           0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
          [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
           0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
          [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
           0.0000000e+00, 0.0000000e+00, 0.0000000e+00]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:55

analyse output arrays in iter:89

pre layer res:
6:add
{'name': 'add', 'output': array([[[[117175.914, 110467.67 , 111757.72 , ..., 106339.52 ,
           91890.94 ,  86214.69 ],
         [137558.55 , 135494.5  , 132914.42 , ..., 131108.36 ,
          120014.01 , 124400.15 ],
         [140912.66 , 137300.55 , 140396.64 , ..., 144266.75 ,
          144782.77 , 147620.83 ],
         ...,
         [ 77184.24 ,  74862.12 ,  72281.98 , ...,  74088.08 ,
           71507.94 ,  71507.94 ],
         [ 79506.36 ,  73572.05 ,  73572.05 , ...,  74862.12 ,
           72798.01 ,  73314.03 ],
         [ 79248.34 ,  73830.06 ,  73572.05 , ...,  75636.16 ,
           73056.02 ,  74604.1  ]],

        [[117175.914, 110467.67 , 111757.72 , ..., 106339.52 ,
           91890.94 ,  86214.69 ],
         [137558.55 , 135494.5  , 132914.42 , ..., 131108.36 ,
          120014.01 , 124400.15 ],
         [140912.66 , 137300.55 , 140396.64 , ..., 144266.75 ,
          144782.77 , 147620.83 ],
         ...,
         [ 77184.24 ,  74862.12 ,  72281.98 , ...,  74088.08 ,
           71507.94 ,  71507.94 ],
         [ 79506.36 ,  73572.05 ,  73572.05 , ...,  74862.12 ,
           72798.01 ,  73314.03 ],
         [ 79248.34 ,  73830.06 ,  73572.05 , ...,  75636.16 ,
           73056.02 ,  74604.1  ]],

        [[117175.914, 110467.67 , 111757.72 , ..., 106339.52 ,
           91890.94 ,  86214.69 ],
         [137558.55 , 135494.5  , 132914.42 , ..., 131108.36 ,
          120014.01 , 124400.15 ],
         [140912.66 , 137300.55 , 140396.64 , ..., 144266.75 ,
          144782.77 , 147620.83 ],
         ...,
         [ 77184.24 ,  74862.12 ,  72281.98 , ...,  74088.08 ,
           71507.94 ,  71507.94 ],
         [ 79506.36 ,  73572.05 ,  73572.05 , ...,  74862.12 ,
           72798.01 ,  73314.03 ],
         [ 79248.34 ,  73830.06 ,  73572.05 , ...,  75636.16 ,
           73056.02 ,  74604.1  ]],

        ...,

        [[      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 1024, 32, 32]), 'from': [3, 3], 'to': [8, 15]}
15:square
{'name': 'square', 'output': array([[[[1.3730194e+10, 1.2203106e+10, 1.2489787e+10, ...,
          1.1308094e+10, 8.4439444e+09, 7.4329723e+09],
         [1.8922355e+10, 1.8358759e+10, 1.7666243e+10, ...,
          1.7189403e+10, 1.4403362e+10, 1.5475397e+10],
         [1.9856376e+10, 1.8851441e+10, 1.9711218e+10, ...,
          2.0812894e+10, 2.0962050e+10, 2.1791910e+10],
         ...,
         [5.9574072e+09, 5.6043366e+09, 5.2246840e+09, ...,
          5.4890435e+09, 5.1133850e+09, 5.1133850e+09],
         [6.3212611e+09, 5.4128461e+09, 5.4128461e+09, ...,
          5.6043366e+09, 5.2995497e+09, 5.3749473e+09],
         [6.2803000e+09, 5.4508780e+09, 5.4128461e+09, ...,
          5.7208279e+09, 5.3371827e+09, 5.5657718e+09]],

        [[1.3730194e+10, 1.2203106e+10, 1.2489787e+10, ...,
          1.1308094e+10, 8.4439444e+09, 7.4329723e+09],
         [1.8922355e+10, 1.8358759e+10, 1.7666243e+10, ...,
          1.7189403e+10, 1.4403362e+10, 1.5475397e+10],
         [1.9856376e+10, 1.8851441e+10, 1.9711218e+10, ...,
          2.0812894e+10, 2.0962050e+10, 2.1791910e+10],
         ...,
         [5.9574072e+09, 5.6043366e+09, 5.2246840e+09, ...,
          5.4890435e+09, 5.1133850e+09, 5.1133850e+09],
         [6.3212611e+09, 5.4128461e+09, 5.4128461e+09, ...,
          5.6043366e+09, 5.2995497e+09, 5.3749473e+09],
         [6.2803000e+09, 5.4508780e+09, 5.4128461e+09, ...,
          5.7208279e+09, 5.3371827e+09, 5.5657718e+09]],

        [[1.3730194e+10, 1.2203106e+10, 1.2489787e+10, ...,
          1.1308094e+10, 8.4439444e+09, 7.4329723e+09],
         [1.8922355e+10, 1.8358759e+10, 1.7666243e+10, ...,
          1.7189403e+10, 1.4403362e+10, 1.5475397e+10],
         [1.9856376e+10, 1.8851441e+10, 1.9711218e+10, ...,
          2.0812894e+10, 2.0962050e+10, 2.1791910e+10],
         ...,
         [5.9574072e+09, 5.6043366e+09, 5.2246840e+09, ...,
          5.4890435e+09, 5.1133850e+09, 5.1133850e+09],
         [6.3212611e+09, 5.4128461e+09, 5.4128461e+09, ...,
          5.6043366e+09, 5.2995497e+09, 5.3749473e+09],
         [6.2803000e+09, 5.4508780e+09, 5.4128461e+09, ...,
          5.7208279e+09, 5.3371827e+09, 5.5657718e+09]],

        ...,

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]]]], dtype=float32), 'output_shape': TensorShape([1, 1024, 32, 32]), 'from': [6], 'to': [8]}
tf node:
{'name': 'add', 'output': array([[[[1.3730311e+10, 1.2203217e+10, 1.2489899e+10, ...,
          1.1308201e+10, 8.4440361e+09, 7.4330583e+09],
         [1.8922492e+10, 1.8358895e+10, 1.7666376e+10, ...,
          1.7189534e+10, 1.4403482e+10, 1.5475521e+10],
         [1.9856517e+10, 1.8851578e+10, 1.9711359e+10, ...,
          2.0813038e+10, 2.0962195e+10, 2.1792057e+10],
         ...,
         [5.9574845e+09, 5.6044114e+09, 5.2247562e+09, ...,
          5.4891177e+09, 5.1134566e+09, 5.1134566e+09],
         [6.3213404e+09, 5.4129198e+09, 5.4129198e+09, ...,
          5.6044114e+09, 5.2996224e+09, 5.3750205e+09],
         [6.2803794e+09, 5.4509517e+09, 5.4129198e+09, ...,
          5.7209037e+09, 5.3372559e+09, 5.5658465e+09]],

        [[1.3730311e+10, 1.2203217e+10, 1.2489899e+10, ...,
          1.1308201e+10, 8.4440361e+09, 7.4330583e+09],
         [1.8922492e+10, 1.8358895e+10, 1.7666376e+10, ...,
          1.7189534e+10, 1.4403482e+10, 1.5475521e+10],
         [1.9856517e+10, 1.8851578e+10, 1.9711359e+10, ...,
          2.0813038e+10, 2.0962195e+10, 2.1792057e+10],
         ...,
         [5.9574845e+09, 5.6044114e+09, 5.2247562e+09, ...,
          5.4891177e+09, 5.1134566e+09, 5.1134566e+09],
         [6.3213404e+09, 5.4129198e+09, 5.4129198e+09, ...,
          5.6044114e+09, 5.2996224e+09, 5.3750205e+09],
         [6.2803794e+09, 5.4509517e+09, 5.4129198e+09, ...,
          5.7209037e+09, 5.3372559e+09, 5.5658465e+09]],

        [[1.3730311e+10, 1.2203217e+10, 1.2489899e+10, ...,
          1.1308201e+10, 8.4440361e+09, 7.4330583e+09],
         [1.8922492e+10, 1.8358895e+10, 1.7666376e+10, ...,
          1.7189534e+10, 1.4403482e+10, 1.5475521e+10],
         [1.9856517e+10, 1.8851578e+10, 1.9711359e+10, ...,
          2.0813038e+10, 2.0962195e+10, 2.1792057e+10],
         ...,
         [5.9574845e+09, 5.6044114e+09, 5.2247562e+09, ...,
          5.4891177e+09, 5.1134566e+09, 5.1134566e+09],
         [6.3213404e+09, 5.4129198e+09, 5.4129198e+09, ...,
          5.6044114e+09, 5.2996224e+09, 5.3750205e+09],
         [6.2803794e+09, 5.4509517e+09, 5.4129198e+09, ...,
          5.7209037e+09, 5.3372559e+09, 5.5658465e+09]],

        ...,

        [[          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan]],

        [[          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan]],

        [[          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan]]]], dtype=float32), 'output_shape': TensorShape([1, 1024, 32, 32]), 'from': [6, 15], 'to': [9, 9]}
ms node:
{'name': 'add', 'output': array([[[[1.3730311e+10, 1.2203217e+10, 1.2489899e+10, ...,
          1.1308201e+10, 8.4440361e+09, 7.4330583e+09],
         [1.8922492e+10, 1.8358895e+10, 1.7666376e+10, ...,
          1.7189534e+10, 1.4403482e+10, 1.5475521e+10],
         [1.9856517e+10, 1.8851578e+10, 1.9711359e+10, ...,
          2.0813038e+10, 2.0962195e+10, 2.1792057e+10],
         ...,
         [5.9574845e+09, 5.6044114e+09, 5.2247562e+09, ...,
          5.4891177e+09, 5.1134566e+09, 5.1134566e+09],
         [6.3213404e+09, 5.4129198e+09, 5.4129198e+09, ...,
          5.6044114e+09, 5.2996224e+09, 5.3750205e+09],
         [6.2803794e+09, 5.4509517e+09, 5.4129198e+09, ...,
          5.7209037e+09, 5.3372559e+09, 5.5658465e+09]],

        [[1.3730311e+10, 1.2203217e+10, 1.2489899e+10, ...,
          1.1308201e+10, 8.4440361e+09, 7.4330583e+09],
         [1.8922492e+10, 1.8358895e+10, 1.7666376e+10, ...,
          1.7189534e+10, 1.4403482e+10, 1.5475521e+10],
         [1.9856517e+10, 1.8851578e+10, 1.9711359e+10, ...,
          2.0813038e+10, 2.0962195e+10, 2.1792057e+10],
         ...,
         [5.9574845e+09, 5.6044114e+09, 5.2247562e+09, ...,
          5.4891177e+09, 5.1134566e+09, 5.1134566e+09],
         [6.3213404e+09, 5.4129198e+09, 5.4129198e+09, ...,
          5.6044114e+09, 5.2996224e+09, 5.3750205e+09],
         [6.2803794e+09, 5.4509517e+09, 5.4129198e+09, ...,
          5.7209037e+09, 5.3372559e+09, 5.5658465e+09]],

        [[1.3730311e+10, 1.2203217e+10, 1.2489899e+10, ...,
          1.1308201e+10, 8.4440361e+09, 7.4330583e+09],
         [1.8922492e+10, 1.8358895e+10, 1.7666376e+10, ...,
          1.7189534e+10, 1.4403482e+10, 1.5475521e+10],
         [1.9856517e+10, 1.8851578e+10, 1.9711359e+10, ...,
          2.0813038e+10, 2.0962195e+10, 2.1792057e+10],
         ...,
         [5.9574845e+09, 5.6044114e+09, 5.2247562e+09, ...,
          5.4891177e+09, 5.1134566e+09, 5.1134566e+09],
         [6.3213404e+09, 5.4129198e+09, 5.4129198e+09, ...,
          5.6044114e+09, 5.2996224e+09, 5.3750205e+09],
         [6.2803794e+09, 5.4509517e+09, 5.4129198e+09, ...,
          5.7209037e+09, 5.3372559e+09, 5.5658465e+09]],

        ...,

        [[          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan]],

        [[          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan]],

        [[          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan]]]], dtype=float32), 'output_shape': (1, 1024, 32, 32), 'from': [6, 15], 'to': [9, 9]}
torch node:
{'name': 'add', 'output': array([[[[1.3730311e+10, 1.2203217e+10, 1.2489899e+10, ...,
          1.1308201e+10, 8.4440361e+09, 7.4330583e+09],
         [1.8922492e+10, 1.8358895e+10, 1.7666376e+10, ...,
          1.7189534e+10, 1.4403482e+10, 1.5475521e+10],
         [1.9856517e+10, 1.8851578e+10, 1.9711359e+10, ...,
          2.0813038e+10, 2.0962195e+10, 2.1792057e+10],
         ...,
         [5.9574845e+09, 5.6044114e+09, 5.2247562e+09, ...,
          5.4891177e+09, 5.1134566e+09, 5.1134566e+09],
         [6.3213404e+09, 5.4129198e+09, 5.4129198e+09, ...,
          5.6044114e+09, 5.2996224e+09, 5.3750205e+09],
         [6.2803794e+09, 5.4509517e+09, 5.4129198e+09, ...,
          5.7209037e+09, 5.3372559e+09, 5.5658465e+09]],

        [[1.3730311e+10, 1.2203217e+10, 1.2489899e+10, ...,
          1.1308201e+10, 8.4440361e+09, 7.4330583e+09],
         [1.8922492e+10, 1.8358895e+10, 1.7666376e+10, ...,
          1.7189534e+10, 1.4403482e+10, 1.5475521e+10],
         [1.9856517e+10, 1.8851578e+10, 1.9711359e+10, ...,
          2.0813038e+10, 2.0962195e+10, 2.1792057e+10],
         ...,
         [5.9574845e+09, 5.6044114e+09, 5.2247562e+09, ...,
          5.4891177e+09, 5.1134566e+09, 5.1134566e+09],
         [6.3213404e+09, 5.4129198e+09, 5.4129198e+09, ...,
          5.6044114e+09, 5.2996224e+09, 5.3750205e+09],
         [6.2803794e+09, 5.4509517e+09, 5.4129198e+09, ...,
          5.7209037e+09, 5.3372559e+09, 5.5658465e+09]],

        [[1.3730311e+10, 1.2203217e+10, 1.2489899e+10, ...,
          1.1308201e+10, 8.4440361e+09, 7.4330583e+09],
         [1.8922492e+10, 1.8358895e+10, 1.7666376e+10, ...,
          1.7189534e+10, 1.4403482e+10, 1.5475521e+10],
         [1.9856517e+10, 1.8851578e+10, 1.9711359e+10, ...,
          2.0813038e+10, 2.0962195e+10, 2.1792057e+10],
         ...,
         [5.9574845e+09, 5.6044114e+09, 5.2247562e+09, ...,
          5.4891177e+09, 5.1134566e+09, 5.1134566e+09],
         [6.3213404e+09, 5.4129198e+09, 5.4129198e+09, ...,
          5.6044114e+09, 5.2996224e+09, 5.3750205e+09],
         [6.2803794e+09, 5.4509517e+09, 5.4129198e+09, ...,
          5.7209037e+09, 5.3372559e+09, 5.5658465e+09]],

        ...,

        [[          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan]],

        [[          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan]],

        [[          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan]]]], dtype=float32), 'output_shape': torch.Size([1, 1024, 32, 32]), 'from': [6, 15], 'to': [9, 9]}

generate models:56

final statics:
total operators:28
tensorflow --> nums:14,distinct_bugs:6
mindspore --> nums:8,distinct_bugs:5
torch --> nums:3,distinct_bugs:3
tensorflow --> 
sin:1
cos:1
avgpool2d:7
log:1
maxpool2d:3
add:1
mindspore --> 
cos:1
empty_merge_operator:1
log:1
sin:4
add:1
torch --> 
cos:1
log:1
add:1

generate models:64

analyse output arrays in iter:110

pre layer res:
9:add
{'name': 'add', 'output': array([[[[341104., 343448., 320896., ..., 293888., 293272., 294184.],
         [346992., 347544., 324992., ..., 295168., 298136., 296744.],
         [326256., 324760., 300928., ..., 282880., 286616., 284456.],
         ...,
         [284016., 285592., 261760., ..., 231168., 232088., 229416.],
         [285552., 287896., 266368., ..., 232704., 233624., 230952.],
         [283248., 287896., 265600., ..., 228864., 231576., 228904.]],

        [[341104., 343448., 320896., ..., 293888., 293272., 294184.],
         [346992., 347544., 324992., ..., 295168., 298136., 296744.],
         [326256., 324760., 300928., ..., 282880., 286616., 284456.],
         ...,
         [284016., 285592., 261760., ..., 231168., 232088., 229416.],
         [285552., 287896., 266368., ..., 232704., 233624., 230952.],
         [283248., 287896., 265600., ..., 228864., 231576., 228904.]],

        [[341104., 343448., 320896., ..., 293888., 293272., 294184.],
         [346992., 347544., 324992., ..., 295168., 298136., 296744.],
         [326256., 324760., 300928., ..., 282880., 286616., 284456.],
         ...,
         [284016., 285592., 261760., ..., 231168., 232088., 229416.],
         [285552., 287896., 266368., ..., 232704., 233624., 230952.],
         [283248., 287896., 265600., ..., 228864., 231576., 228904.]],

        ...,

        [[167680., 166912., 168960., ..., 178432., 176128., 179200.],
         [173568., 171008., 173056., ..., 179712., 180992., 181760.],
         [152832., 148224., 148992., ..., 167424., 169472., 169472.],
         ...,
         [110592., 109056., 109824., ..., 115712., 114944., 114432.],
         [112128., 111360., 114432., ..., 117248., 116480., 115968.],
         [109824., 111360., 113664., ..., 113408., 114432., 113920.]],

        [[167680., 166912., 168960., ..., 178432., 176128., 179200.],
         [173568., 171008., 173056., ..., 179712., 180992., 181760.],
         [152832., 148224., 148992., ..., 167424., 169472., 169472.],
         ...,
         [110592., 109056., 109824., ..., 115712., 114944., 114432.],
         [112128., 111360., 114432., ..., 117248., 116480., 115968.],
         [109824., 111360., 113664., ..., 113408., 114432., 113920.]],

        [[167680., 166912., 168960., ..., 178432., 176128., 179200.],
         [173568., 171008., 173056., ..., 179712., 180992., 181760.],
         [152832., 148224., 148992., ..., 167424., 169472., 169472.],
         ...,
         [110592., 109056., 109824., ..., 115712., 114944., 114432.],
         [112128., 111360., 114432., ..., 117248., 116480., 115968.],
         [109824., 111360., 113664., ..., 113408., 114432., 113920.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 1024, 32, 32]), 'from': [8, 15], 'to': [16]}
tf node:
{'name': 'sin', 'output': array([[[[ 0.64845175,  0.3275113 ,  0.9167998 , ..., -0.99038804,
          -0.92619574, -0.8517244 ],
         [ 0.05016059,  0.8251619 ,  0.49962986, ...,  0.33138207,
          -0.9098098 ,  0.9882395 ],
         [ 0.99948394,  0.8420259 ,  0.90135926, ..., -0.9999982 ,
           0.7971529 , -0.47342995],
         ...,
         [-0.31091177,  0.6913529 ,  0.5983897 , ..., -0.18666944,
          -0.2944468 , -0.9307548 ],
         [ 0.07726752,  0.43426758, -0.9774257 , ..., -0.05101455,
           0.5121483 ,  0.81784964],
         [ 0.9066356 ,  0.43426758, -0.3262063 , ..., -0.8546176 ,
           0.21752112,  0.9568829 ]],

        [[ 0.64845175,  0.3275113 ,  0.9167998 , ..., -0.99038804,
          -0.92619574, -0.8517244 ],
         [ 0.05016059,  0.8251619 ,  0.49962986, ...,  0.33138207,
          -0.9098098 ,  0.9882395 ],
         [ 0.99948394,  0.8420259 ,  0.90135926, ..., -0.9999982 ,
           0.7971529 , -0.47342995],
         ...,
         [-0.31091177,  0.6913529 ,  0.5983897 , ..., -0.18666944,
          -0.2944468 , -0.9307548 ],
         [ 0.07726752,  0.43426758, -0.9774257 , ..., -0.05101455,
           0.5121483 ,  0.81784964],
         [ 0.9066356 ,  0.43426758, -0.3262063 , ..., -0.8546176 ,
           0.21752112,  0.9568829 ]],

        [[ 0.64845175,  0.3275113 ,  0.9167998 , ..., -0.99038804,
          -0.92619574, -0.8517244 ],
         [ 0.05016059,  0.8251619 ,  0.49962986, ...,  0.33138207,
          -0.9098098 ,  0.9882395 ],
         [ 0.99948394,  0.8420259 ,  0.90135926, ..., -0.9999982 ,
           0.7971529 , -0.47342995],
         ...,
         [-0.31091177,  0.6913529 ,  0.5983897 , ..., -0.18666944,
          -0.2944468 , -0.9307548 ],
         [ 0.07726752,  0.43426758, -0.9774257 , ..., -0.05101455,
           0.5121483 ,  0.81784964],
         [ 0.9066356 ,  0.43426758, -0.3262063 , ..., -0.8546176 ,
           0.21752112,  0.9568829 ]],

        ...,

        [[ 0.59213626, -0.72956467, -0.906996  , ...,  0.8613626 ,
          -0.77773964, -0.40176788],
         [ 0.96057814, -0.99324584, -0.97964334, ...,  0.32767725,
          -0.99092317,  0.0154333 ],
         [-0.19809286, -0.494284  , -0.92199016, ...,  0.781638  ,
           0.9376123 ,  0.9376123 ],
         ...,
         [ 0.9964225 , -0.9481542 ,  0.20260347, ...,  0.75743985,
          -0.5580297 ,  0.49027652],
         [-0.9881354 ,  0.03478478,  0.49027652, ..., -0.58150333,
           0.7384826 , -0.68252695],
         [ 0.20260347,  0.03478478,  0.9237631 , ...,  0.34590384,
           0.49027652, -0.41941833]],

        [[ 0.59213626, -0.72956467, -0.906996  , ...,  0.8613626 ,
          -0.77773964, -0.40176788],
         [ 0.96057814, -0.99324584, -0.97964334, ...,  0.32767725,
          -0.99092317,  0.0154333 ],
         [-0.19809286, -0.494284  , -0.92199016, ...,  0.781638  ,
           0.9376123 ,  0.9376123 ],
         ...,
         [ 0.9964225 , -0.9481542 ,  0.20260347, ...,  0.75743985,
          -0.5580297 ,  0.49027652],
         [-0.9881354 ,  0.03478478,  0.49027652, ..., -0.58150333,
           0.7384826 , -0.68252695],
         [ 0.20260347,  0.03478478,  0.9237631 , ...,  0.34590384,
           0.49027652, -0.41941833]],

        [[ 0.59213626, -0.72956467, -0.906996  , ...,  0.8613626 ,
          -0.77773964, -0.40176788],
         [ 0.96057814, -0.99324584, -0.97964334, ...,  0.32767725,
          -0.99092317,  0.0154333 ],
         [-0.19809286, -0.494284  , -0.92199016, ...,  0.781638  ,
           0.9376123 ,  0.9376123 ],
         ...,
         [ 0.9964225 , -0.9481542 ,  0.20260347, ...,  0.75743985,
          -0.5580297 ,  0.49027652],
         [-0.9881354 ,  0.03478478,  0.49027652, ..., -0.58150333,
           0.7384826 , -0.68252695],
         [ 0.20260347,  0.03478478,  0.9237631 , ...,  0.34590384,
           0.49027652, -0.41941833]]]], dtype=float32), 'output_shape': TensorShape([1, 1024, 32, 32]), 'from': [9], 'to': []}
ms node:
{'name': 'sin', 'output': array([[[[ 6.4845175e-01,  3.2751131e-01,  9.1679978e-01, ...,
          -9.9038804e-01, -9.2619574e-01, -8.5172439e-01],
         [ 5.0160587e-02,  8.2516187e-01,  4.9962988e-01, ...,
           3.3138207e-01, -9.0980983e-01,  9.8823953e-01],
         [ 9.9948394e-01,  8.4202588e-01,  9.0135926e-01, ...,
          -9.9999821e-01,  7.9715288e-01, -4.7342995e-01],
         ...,
         [-3.1091177e-01,  6.9135290e-01,  5.9838969e-01, ...,
          -1.8666944e-01, -2.9444680e-01, -9.3075472e-01],
         [ 7.7267520e-02,  4.3426758e-01, -9.7742569e-01, ...,
          -5.1014550e-02,  5.1214832e-01,  8.1784958e-01],
         [ 9.0663558e-01,  4.3426758e-01, -3.2620630e-01, ...,
          -8.5461766e-01,  2.1752113e-01,  9.5688289e-01]],

        [[ 6.4845175e-01,  3.2751131e-01,  9.1679978e-01, ...,
          -9.9038804e-01, -9.2619574e-01, -8.5172439e-01],
         [ 5.0160587e-02,  8.2516187e-01,  4.9962988e-01, ...,
           3.3138207e-01, -9.0980983e-01,  9.8823953e-01],
         [ 9.9948394e-01,  8.4202588e-01,  9.0135926e-01, ...,
          -9.9999821e-01,  7.9715288e-01, -4.7342995e-01],
         ...,
         [-3.1091177e-01,  6.9135290e-01,  5.9838969e-01, ...,
          -1.8666944e-01, -2.9444680e-01, -9.3075472e-01],
         [ 7.7267520e-02,  4.3426758e-01, -9.7742569e-01, ...,
          -5.1014550e-02,  5.1214832e-01,  8.1784958e-01],
         [ 9.0663558e-01,  4.3426758e-01, -3.2620630e-01, ...,
          -8.5461766e-01,  2.1752113e-01,  9.5688289e-01]],

        [[ 6.4845175e-01,  3.2751131e-01,  9.1679978e-01, ...,
          -9.9038804e-01, -9.2619574e-01, -8.5172439e-01],
         [ 5.0160587e-02,  8.2516187e-01,  4.9962988e-01, ...,
           3.3138207e-01, -9.0980983e-01,  9.8823953e-01],
         [ 9.9948394e-01,  8.4202588e-01,  9.0135926e-01, ...,
          -9.9999821e-01,  7.9715288e-01, -4.7342995e-01],
         ...,
         [-3.1091177e-01,  6.9135290e-01,  5.9838969e-01, ...,
          -1.8666944e-01, -2.9444680e-01, -9.3075472e-01],
         [ 7.7267520e-02,  4.3426758e-01, -9.7742569e-01, ...,
          -5.1014550e-02,  5.1214832e-01,  8.1784958e-01],
         [ 9.0663558e-01,  4.3426758e-01, -3.2620630e-01, ...,
          -8.5461766e-01,  2.1752113e-01,  9.5688289e-01]],

        ...,

        [[ 1.6768000e+05,  1.6691200e+05,  1.6896000e+05, ...,
           1.7843200e+05,  1.7612800e+05,  1.7920000e+05],
         [ 1.7356800e+05,  1.7100800e+05,  1.7305600e+05, ...,
           1.7971200e+05,  1.8099200e+05,  1.8176000e+05],
         [ 1.5283200e+05,  1.4822400e+05,  1.4899200e+05, ...,
           1.6742400e+05,  1.6947200e+05,  1.6947200e+05],
         ...,
         [ 1.1059200e+05,  1.0905600e+05,  1.0982400e+05, ...,
           1.1571200e+05,  1.1494400e+05,  1.1443200e+05],
         [ 1.1212800e+05,  1.1136000e+05,  1.1443200e+05, ...,
           1.1724800e+05,  1.1648000e+05,  1.1596800e+05],
         [ 1.0982400e+05,  1.1136000e+05,  1.1366400e+05, ...,
           1.1340800e+05,  1.1443200e+05,  1.1392000e+05]],

        [[ 1.6768000e+05,  1.6691200e+05,  1.6896000e+05, ...,
           1.7843200e+05,  1.7612800e+05,  1.7920000e+05],
         [ 1.7356800e+05,  1.7100800e+05,  1.7305600e+05, ...,
           1.7971200e+05,  1.8099200e+05,  1.8176000e+05],
         [ 1.5283200e+05,  1.4822400e+05,  1.4899200e+05, ...,
           1.6742400e+05,  1.6947200e+05,  1.6947200e+05],
         ...,
         [ 1.1059200e+05,  1.0905600e+05,  1.0982400e+05, ...,
           1.1571200e+05,  1.1494400e+05,  1.1443200e+05],
         [ 1.1212800e+05,  1.1136000e+05,  1.1443200e+05, ...,
           1.1724800e+05,  1.1648000e+05,  1.1596800e+05],
         [ 1.0982400e+05,  1.1136000e+05,  1.1366400e+05, ...,
           1.1340800e+05,  1.1443200e+05,  1.1392000e+05]],

        [[ 1.6768000e+05,  1.6691200e+05,  1.6896000e+05, ...,
           1.7843200e+05,  1.7612800e+05,  1.7920000e+05],
         [ 1.7356800e+05,  1.7100800e+05,  1.7305600e+05, ...,
           1.7971200e+05,  1.8099200e+05,  1.8176000e+05],
         [ 1.5283200e+05,  1.4822400e+05,  1.4899200e+05, ...,
           1.6742400e+05,  1.6947200e+05,  1.6947200e+05],
         ...,
         [ 1.1059200e+05,  1.0905600e+05,  1.0982400e+05, ...,
           1.1571200e+05,  1.1494400e+05,  1.1443200e+05],
         [ 1.1212800e+05,  1.1136000e+05,  1.1443200e+05, ...,
           1.1724800e+05,  1.1648000e+05,  1.1596800e+05],
         [ 1.0982400e+05,  1.1136000e+05,  1.1366400e+05, ...,
           1.1340800e+05,  1.1443200e+05,  1.1392000e+05]]]],
      dtype=float32), 'output_shape': (1, 1024, 32, 32), 'from': [9], 'to': []}
torch node:
{'name': 'sin', 'output': array([[[[ 0.64845175,  0.3275113 ,  0.9167998 , ..., -0.99038804,
          -0.92619574, -0.8517244 ],
         [ 0.05016059,  0.8251619 ,  0.49962988, ...,  0.33138207,
          -0.9098098 ,  0.9882395 ],
         [ 0.99948394,  0.8420259 ,  0.90135926, ..., -0.9999982 ,
           0.7971529 , -0.47342995],
         ...,
         [-0.31091177,  0.6913529 ,  0.5983897 , ..., -0.18666944,
          -0.2944468 , -0.9307547 ],
         [ 0.07726752,  0.43426758, -0.9774257 , ..., -0.05101455,
           0.5121483 ,  0.8178496 ],
         [ 0.9066356 ,  0.43426758, -0.3262063 , ..., -0.85461766,
           0.21752113,  0.9568829 ]],

        [[ 0.64845175,  0.3275113 ,  0.9167998 , ..., -0.99038804,
          -0.92619574, -0.8517244 ],
         [ 0.05016059,  0.8251619 ,  0.49962988, ...,  0.33138207,
          -0.9098098 ,  0.9882395 ],
         [ 0.99948394,  0.8420259 ,  0.90135926, ..., -0.9999982 ,
           0.7971529 , -0.47342995],
         ...,
         [-0.31091177,  0.6913529 ,  0.5983897 , ..., -0.18666944,
          -0.2944468 , -0.9307547 ],
         [ 0.07726752,  0.43426758, -0.9774257 , ..., -0.05101455,
           0.5121483 ,  0.8178496 ],
         [ 0.9066356 ,  0.43426758, -0.3262063 , ..., -0.85461766,
           0.21752113,  0.9568829 ]],

        [[ 0.64845175,  0.3275113 ,  0.9167998 , ..., -0.99038804,
          -0.92619574, -0.8517244 ],
         [ 0.05016059,  0.8251619 ,  0.49962988, ...,  0.33138207,
          -0.9098098 ,  0.9882395 ],
         [ 0.99948394,  0.8420259 ,  0.90135926, ..., -0.9999982 ,
           0.7971529 , -0.47342995],
         ...,
         [-0.31091177,  0.6913529 ,  0.5983897 , ..., -0.18666944,
          -0.2944468 , -0.9307547 ],
         [ 0.07726752,  0.43426758, -0.9774257 , ..., -0.05101455,
           0.5121483 ,  0.8178496 ],
         [ 0.9066356 ,  0.43426758, -0.3262063 , ..., -0.85461766,
           0.21752113,  0.9568829 ]],

        ...,

        [[ 0.5921363 , -0.72956467, -0.906996  , ...,  0.8613626 ,
          -0.77773964, -0.40176788],
         [ 0.96057814, -0.99324584, -0.97964334, ...,  0.32767725,
          -0.99092317,  0.0154333 ],
         [-0.19809286, -0.494284  , -0.92199016, ...,  0.7816381 ,
           0.9376123 ,  0.9376123 ],
         ...,
         [ 0.9964225 , -0.94815415,  0.20260347, ...,  0.75743985,
          -0.5580297 ,  0.49027655],
         [-0.9881354 ,  0.03478478,  0.49027655, ..., -0.58150333,
           0.7384826 , -0.682527  ],
         [ 0.20260347,  0.03478478,  0.9237631 , ...,  0.34590384,
           0.49027655, -0.41941833]],

        [[ 0.5921363 , -0.72956467, -0.906996  , ...,  0.8613626 ,
          -0.77773964, -0.40176788],
         [ 0.96057814, -0.99324584, -0.97964334, ...,  0.32767725,
          -0.99092317,  0.0154333 ],
         [-0.19809286, -0.494284  , -0.92199016, ...,  0.7816381 ,
           0.9376123 ,  0.9376123 ],
         ...,
         [ 0.9964225 , -0.94815415,  0.20260347, ...,  0.75743985,
          -0.5580297 ,  0.49027655],
         [-0.9881354 ,  0.03478478,  0.49027655, ..., -0.58150333,
           0.7384826 , -0.682527  ],
         [ 0.20260347,  0.03478478,  0.9237631 , ...,  0.34590384,
           0.49027655, -0.41941833]],

        [[ 0.5921363 , -0.72956467, -0.906996  , ...,  0.8613626 ,
          -0.77773964, -0.40176788],
         [ 0.96057814, -0.99324584, -0.97964334, ...,  0.32767725,
          -0.99092317,  0.0154333 ],
         [-0.19809286, -0.494284  , -0.92199016, ...,  0.7816381 ,
           0.9376123 ,  0.9376123 ],
         ...,
         [ 0.9964225 , -0.94815415,  0.20260347, ...,  0.75743985,
          -0.5580297 ,  0.49027655],
         [-0.9881354 ,  0.03478478,  0.49027655, ..., -0.58150333,
           0.7384826 , -0.682527  ],
         [ 0.20260347,  0.03478478,  0.9237631 , ...,  0.34590384,
           0.49027655, -0.41941833]]]], dtype=float32), 'output_shape': torch.Size([1, 1024, 32, 32]), 'from': [9], 'to': []}

generate models:69

analyse the exceptions in iter:111
tensorflow exception:
{'id': 16, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 1024, 32, 32), dtype=float32, numpy=
array([[[[[546053.5, 541445.5, 539141.5, ..., 514949.5, 505733.5,
           562181.5],
          [516101.5, 510341.5, 510341.5, ..., 482693.5, 488453.5,
           437765.5],
          [523013.5, 520709.5, 519557.5, ..., 490757.5, 493061.5,
           422789.5],
          ...,
          [328325.5, 306437.5, 313349.5, ..., 322565.5, 291461.5,
           326021.5],
          [344453.5, 285701.5, 296069.5, ..., 294917.5, 285701.5,
           290309.5],
          [548357.5, 476933.5, 484997.5, ..., 490757.5, 483845.5,
           481541.5]],

         [[546053.5, 541445.5, 539141.5, ..., 514949.5, 505733.5,
           562181.5],
          [516101.5, 510341.5, 510341.5, ..., 482693.5, 488453.5,
           437765.5],
          [523013.5, 520709.5, 519557.5, ..., 490757.5, 493061.5,
           422789.5],
          ...,
          [328325.5, 306437.5, 313349.5, ..., 322565.5, 291461.5,
           326021.5],
          [344453.5, 285701.5, 296069.5, ..., 294917.5, 285701.5,
           290309.5],
          [548357.5, 476933.5, 484997.5, ..., 490757.5, 483845.5,
           481541.5]],

         [[546053.5, 541445.5, 539141.5, ..., 514949.5, 505733.5,
           562181.5],
          [516101.5, 510341.5, 510341.5, ..., 482693.5, 488453.5,
           437765.5],
          [523013.5, 520709.5, 519557.5, ..., 490757.5, 493061.5,
           422789.5],
          ...,
          [328325.5, 306437.5, 313349.5, ..., 322565.5, 291461.5,
           326021.5],
          [344453.5, 285701.5, 296069.5, ..., 294917.5, 285701.5,
           290309.5],
          [548357.5, 476933.5, 484997.5, ..., 490757.5, 483845.5,
           481541.5]],

         ...,

         [[546048. , 541440. , 539136. , ..., 514944. , 505728. ,
           562176. ],
          [516096. , 510336. , 510336. , ..., 482688. , 488448. ,
           437760. ],
          [523008. , 520704. , 519552. , ..., 490752. , 493056. ,
           422784. ],
          ...,
          [328320. , 306432. , 313344. , ..., 322560. , 291456. ,
           326016. ],
          [344448. , 285696. , 296064. , ..., 294912. , 285696. ,
           290304. ],
          [548352. , 476928. , 484992. , ..., 490752. , 483840. ,
           481536. ]],

         [[546048. , 541440. , 539136. , ..., 514944. , 505728. ,
           562176. ],
          [516096. , 510336. , 510336. , ..., 482688. , 488448. ,
           437760. ],
          [523008. , 520704. , 519552. , ..., 490752. , 493056. ,
           422784. ],
          ...,
          [328320. , 306432. , 313344. , ..., 322560. , 291456. ,
           326016. ],
          [344448. , 285696. , 296064. , ..., 294912. , 285696. ,
           290304. ],
          [548352. , 476928. , 484992. , ..., 490752. , 483840. ,
           481536. ]],

         [[546048. , 541440. , 539136. , ..., 514944. , 505728. ,
           562176. ],
          [516096. , 510336. , 510336. , ..., 482688. , 488448. ,
           437760. ],
          [523008. , 520704. , 519552. , ..., 490752. , 493056. ,
           422784. ],
          ...,
          [328320. , 306432. , 313344. , ..., 322560. , 291456. ,
           326016. ],
          [344448. , 285696. , 296064. , ..., 294912. , 285696. ,
           290304. ],
          [548352. , 476928. , 484992. , ..., 490752. , 483840. ,
           481536. ]]]]], dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:70

analyse output arrays in iter:113

pre layer res:
4:empty_seq_operator
{'name': 'empty_seq_operator', 'output': array([[[[91648., 92416., 92288., ..., 93056., 92288., 92672.],
         [90880., 92928., 92672., ..., 72320., 89856., 91264.],
         [89344., 81024., 81408., ..., 31360., 75136., 96128.],
         ...,
         [55424., 55040., 53504., ..., 56832., 58240., 55424.],
         [51200., 51968., 49792., ..., 58240., 57984., 58112.],
         [28672., 29568., 29184., ..., 59264., 52608., 45184.]],

        [[91648., 92416., 92288., ..., 93056., 92288., 92672.],
         [90880., 92928., 92672., ..., 72320., 89856., 91264.],
         [89344., 81024., 81408., ..., 31360., 75136., 96128.],
         ...,
         [55424., 55040., 53504., ..., 56832., 58240., 55424.],
         [51200., 51968., 49792., ..., 58240., 57984., 58112.],
         [28672., 29568., 29184., ..., 59264., 52608., 45184.]],

        [[91648., 92416., 92288., ..., 93056., 92288., 92672.],
         [90880., 92928., 92672., ..., 72320., 89856., 91264.],
         [89344., 81024., 81408., ..., 31360., 75136., 96128.],
         ...,
         [55424., 55040., 53504., ..., 56832., 58240., 55424.],
         [51200., 51968., 49792., ..., 58240., 57984., 58112.],
         [28672., 29568., 29184., ..., 59264., 52608., 45184.]],

        ...,

        [[91648., 92416., 92288., ..., 93056., 92288., 92672.],
         [90880., 92928., 92672., ..., 72320., 89856., 91264.],
         [89344., 81024., 81408., ..., 31360., 75136., 96128.],
         ...,
         [55424., 55040., 53504., ..., 56832., 58240., 55424.],
         [51200., 51968., 49792., ..., 58240., 57984., 58112.],
         [28672., 29568., 29184., ..., 59264., 52608., 45184.]],

        [[91648., 92416., 92288., ..., 93056., 92288., 92672.],
         [90880., 92928., 92672., ..., 72320., 89856., 91264.],
         [89344., 81024., 81408., ..., 31360., 75136., 96128.],
         ...,
         [55424., 55040., 53504., ..., 56832., 58240., 55424.],
         [51200., 51968., 49792., ..., 58240., 57984., 58112.],
         [28672., 29568., 29184., ..., 59264., 52608., 45184.]],

        [[91648., 92416., 92288., ..., 93056., 92288., 92672.],
         [90880., 92928., 92672., ..., 72320., 89856., 91264.],
         [89344., 81024., 81408., ..., 31360., 75136., 96128.],
         ...,
         [55424., 55040., 53504., ..., 56832., 58240., 55424.],
         [51200., 51968., 49792., ..., 58240., 57984., 58112.],
         [28672., 29568., 29184., ..., 59264., 52608., 45184.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 1024, 32, 32]), 'from': [1], 'to': [5, 11]}
tf node:
{'name': 'sin', 'output': array([[[[ 0.9937695 ,  0.22903931,  0.5431701 , ...,  0.898347  ,
           0.5431701 ,  0.9635326 ],
         [ 0.00771688, -0.3057187 ,  0.9635326 , ...,  0.51165885,
           0.16614795,  0.66940916],
         [-0.24403507,  0.7284993 ,  0.09030926, ...,  0.5827689 ,
           0.99507374,  0.9997398 ],
         ...,
         [ 0.0224035 , -0.6467312 ,  0.44796088, ...,  0.5554438 ,
           0.9149515 ,  0.0224035 ],
         [-0.9943585 , -0.22376497, -0.7821028 , ...,  0.9149515 ,
           0.36683756, -0.9249508 ],
         [ 0.9677523 , -0.62102956, -0.9847188 , ...,  0.8394024 ,
          -0.8959551 ,  0.99904704]],

        [[ 0.9937695 ,  0.22903931,  0.5431701 , ...,  0.898347  ,
           0.5431701 ,  0.9635326 ],
         [ 0.00771688, -0.3057187 ,  0.9635326 , ...,  0.51165885,
           0.16614795,  0.66940916],
         [-0.24403507,  0.7284993 ,  0.09030926, ...,  0.5827689 ,
           0.99507374,  0.9997398 ],
         ...,
         [ 0.0224035 , -0.6467312 ,  0.44796088, ...,  0.5554438 ,
           0.9149515 ,  0.0224035 ],
         [-0.9943585 , -0.22376497, -0.7821028 , ...,  0.9149515 ,
           0.36683756, -0.9249508 ],
         [ 0.9677523 , -0.62102956, -0.9847188 , ...,  0.8394024 ,
          -0.8959551 ,  0.99904704]],

        [[ 0.9937695 ,  0.22903931,  0.5431701 , ...,  0.898347  ,
           0.5431701 ,  0.9635326 ],
         [ 0.00771688, -0.3057187 ,  0.9635326 , ...,  0.51165885,
           0.16614795,  0.66940916],
         [-0.24403507,  0.7284993 ,  0.09030926, ...,  0.5827689 ,
           0.99507374,  0.9997398 ],
         ...,
         [ 0.0224035 , -0.6467312 ,  0.44796088, ...,  0.5554438 ,
           0.9149515 ,  0.0224035 ],
         [-0.9943585 , -0.22376497, -0.7821028 , ...,  0.9149515 ,
           0.36683756, -0.9249508 ],
         [ 0.9677523 , -0.62102956, -0.9847188 , ...,  0.8394024 ,
          -0.8959551 ,  0.99904704]],

        ...,

        [[ 0.9937695 ,  0.22903931,  0.5431701 , ...,  0.898347  ,
           0.5431701 ,  0.9635326 ],
         [ 0.00771688, -0.3057187 ,  0.9635326 , ...,  0.51165885,
           0.16614795,  0.66940916],
         [-0.24403507,  0.7284993 ,  0.09030926, ...,  0.5827689 ,
           0.99507374,  0.9997398 ],
         ...,
         [ 0.0224035 , -0.6467312 ,  0.44796088, ...,  0.5554438 ,
           0.9149515 ,  0.0224035 ],
         [-0.9943585 , -0.22376497, -0.7821028 , ...,  0.9149515 ,
           0.36683756, -0.9249508 ],
         [ 0.9677523 , -0.62102956, -0.9847188 , ...,  0.8394024 ,
          -0.8959551 ,  0.99904704]],

        [[ 0.9937695 ,  0.22903931,  0.5431701 , ...,  0.898347  ,
           0.5431701 ,  0.9635326 ],
         [ 0.00771688, -0.3057187 ,  0.9635326 , ...,  0.51165885,
           0.16614795,  0.66940916],
         [-0.24403507,  0.7284993 ,  0.09030926, ...,  0.5827689 ,
           0.99507374,  0.9997398 ],
         ...,
         [ 0.0224035 , -0.6467312 ,  0.44796088, ...,  0.5554438 ,
           0.9149515 ,  0.0224035 ],
         [-0.9943585 , -0.22376497, -0.7821028 , ...,  0.9149515 ,
           0.36683756, -0.9249508 ],
         [ 0.9677523 , -0.62102956, -0.9847188 , ...,  0.8394024 ,
          -0.8959551 ,  0.99904704]],

        [[ 0.9937695 ,  0.22903931,  0.5431701 , ...,  0.898347  ,
           0.5431701 ,  0.9635326 ],
         [ 0.00771688, -0.3057187 ,  0.9635326 , ...,  0.51165885,
           0.16614795,  0.66940916],
         [-0.24403507,  0.7284993 ,  0.09030926, ...,  0.5827689 ,
           0.99507374,  0.9997398 ],
         ...,
         [ 0.0224035 , -0.6467312 ,  0.44796088, ...,  0.5554438 ,
           0.9149515 ,  0.0224035 ],
         [-0.9943585 , -0.22376497, -0.7821028 , ...,  0.9149515 ,
           0.36683756, -0.9249508 ],
         [ 0.9677523 , -0.62102956, -0.9847188 , ...,  0.8394024 ,
          -0.8959551 ,  0.99904704]]]], dtype=float32), 'output_shape': TensorShape([1, 1024, 32, 32]), 'from': [4], 'to': [3]}
ms node:
{'name': 'sin', 'output': array([[[[ 9.9376953e-01,  2.2903931e-01,  5.4317009e-01, ...,
           8.9834702e-01,  5.4317009e-01,  9.6353263e-01],
         [ 7.7168779e-03, -3.0571872e-01,  9.6353263e-01, ...,
           5.1165885e-01,  1.6614795e-01,  6.6940922e-01],
         [-2.4403508e-01,  7.2849929e-01,  9.0309262e-02, ...,
           5.8276892e-01,  9.9507374e-01,  9.9973983e-01],
         ...,
         [ 2.2403494e-02, -6.4673120e-01,  4.4796088e-01, ...,
           5.5544376e-01,  9.1495150e-01,  2.2403494e-02],
         [-9.9435848e-01, -2.2376496e-01, -7.8210282e-01, ...,
           9.1495150e-01,  3.6683756e-01, -9.2495078e-01],
         [ 9.6775228e-01, -6.2102956e-01, -9.8471880e-01, ...,
           8.3940238e-01, -8.9595509e-01,  9.9904704e-01]],

        [[ 9.9376953e-01,  2.2903931e-01,  5.4317009e-01, ...,
           8.9834702e-01,  5.4317009e-01,  9.6353263e-01],
         [ 7.7168779e-03, -3.0571872e-01,  9.6353263e-01, ...,
           5.1165885e-01,  1.6614795e-01,  6.6940922e-01],
         [-2.4403508e-01,  7.2849929e-01,  9.0309262e-02, ...,
           5.8276892e-01,  9.9507374e-01,  9.9973983e-01],
         ...,
         [ 2.2403494e-02, -6.4673120e-01,  4.4796088e-01, ...,
           5.5544376e-01,  9.1495150e-01,  2.2403494e-02],
         [-9.9435848e-01, -2.2376496e-01, -7.8210282e-01, ...,
           9.1495150e-01,  3.6683756e-01, -9.2495078e-01],
         [ 9.6775228e-01, -6.2102956e-01, -9.8471880e-01, ...,
           8.3940238e-01, -8.9595509e-01,  9.9904704e-01]],

        [[ 9.9376953e-01,  2.2903931e-01,  5.4317009e-01, ...,
           8.9834702e-01,  5.4317009e-01,  9.6353263e-01],
         [ 7.7168779e-03, -3.0571872e-01,  9.6353263e-01, ...,
           5.1165885e-01,  1.6614795e-01,  6.6940922e-01],
         [-2.4403508e-01,  7.2849929e-01,  9.0309262e-02, ...,
           5.8276892e-01,  9.9507374e-01,  9.9973983e-01],
         ...,
         [ 2.2403494e-02, -6.4673120e-01,  4.4796088e-01, ...,
           5.5544376e-01,  9.1495150e-01,  2.2403494e-02],
         [-9.9435848e-01, -2.2376496e-01, -7.8210282e-01, ...,
           9.1495150e-01,  3.6683756e-01, -9.2495078e-01],
         [ 9.6775228e-01, -6.2102956e-01, -9.8471880e-01, ...,
           8.3940238e-01, -8.9595509e-01,  9.9904704e-01]],

        ...,

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           1.7920000e+03,  1.2800000e+03,  7.6800000e+02],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           1.0240000e+03,  1.0240000e+03,  1.0240000e+03],
         [ 7.6800000e+02,  7.6800000e+02,  0.0000000e+00, ...,
           5.1200000e+02,  1.2800000e+03,  1.2800000e+03],
         ...,
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           5.6320000e+04,  6.3744000e+04,  2.6624000e+04],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           5.2992000e+04,  3.7376000e+04,  5.1200000e+03],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           4.5312000e+04,  2.8160000e+04,  1.7920000e+03]],

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           1.7920000e+03,  1.2800000e+03,  7.6800000e+02],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           1.0240000e+03,  1.0240000e+03,  1.0240000e+03],
         [ 7.6800000e+02,  7.6800000e+02,  0.0000000e+00, ...,
           5.1200000e+02,  1.2800000e+03,  1.2800000e+03],
         ...,
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           5.6320000e+04,  6.3744000e+04,  2.6624000e+04],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           5.2992000e+04,  3.7376000e+04,  5.1200000e+03],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           4.5312000e+04,  2.8160000e+04,  1.7920000e+03]],

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           1.7920000e+03,  1.2800000e+03,  7.6800000e+02],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           1.0240000e+03,  1.0240000e+03,  1.0240000e+03],
         [ 7.6800000e+02,  7.6800000e+02,  0.0000000e+00, ...,
           5.1200000e+02,  1.2800000e+03,  1.2800000e+03],
         ...,
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           5.6320000e+04,  6.3744000e+04,  2.6624000e+04],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           5.2992000e+04,  3.7376000e+04,  5.1200000e+03],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           4.5312000e+04,  2.8160000e+04,  1.7920000e+03]]]],
      dtype=float32), 'output_shape': (1, 1024, 32, 32), 'from': [4], 'to': [3]}
torch node:
{'name': 'sin', 'output': array([[[[ 0.9937695 ,  0.22903931,  0.5431701 , ...,  0.898347  ,
           0.5431701 ,  0.9635326 ],
         [ 0.00771688, -0.30571872,  0.9635326 , ...,  0.51165885,
           0.16614795,  0.6694092 ],
         [-0.24403508,  0.7284993 ,  0.09030926, ...,  0.5827689 ,
           0.99507374,  0.9997398 ],
         ...,
         [ 0.02240349, -0.6467312 ,  0.44796088, ...,  0.55544376,
           0.9149515 ,  0.02240349],
         [-0.9943585 , -0.22376496, -0.7821028 , ...,  0.9149515 ,
           0.36683756, -0.9249508 ],
         [ 0.9677523 , -0.62102956, -0.9847188 , ...,  0.8394024 ,
          -0.8959551 ,  0.99904704]],

        [[ 0.9937695 ,  0.22903931,  0.5431701 , ...,  0.898347  ,
           0.5431701 ,  0.9635326 ],
         [ 0.00771688, -0.30571872,  0.9635326 , ...,  0.51165885,
           0.16614795,  0.6694092 ],
         [-0.24403508,  0.7284993 ,  0.09030926, ...,  0.5827689 ,
           0.99507374,  0.9997398 ],
         ...,
         [ 0.02240349, -0.6467312 ,  0.44796088, ...,  0.55544376,
           0.9149515 ,  0.02240349],
         [-0.9943585 , -0.22376496, -0.7821028 , ...,  0.9149515 ,
           0.36683756, -0.9249508 ],
         [ 0.9677523 , -0.62102956, -0.9847188 , ...,  0.8394024 ,
          -0.8959551 ,  0.99904704]],

        [[ 0.9937695 ,  0.22903931,  0.5431701 , ...,  0.898347  ,
           0.5431701 ,  0.9635326 ],
         [ 0.00771688, -0.30571872,  0.9635326 , ...,  0.51165885,
           0.16614795,  0.6694092 ],
         [-0.24403508,  0.7284993 ,  0.09030926, ...,  0.5827689 ,
           0.99507374,  0.9997398 ],
         ...,
         [ 0.02240349, -0.6467312 ,  0.44796088, ...,  0.55544376,
           0.9149515 ,  0.02240349],
         [-0.9943585 , -0.22376496, -0.7821028 , ...,  0.9149515 ,
           0.36683756, -0.9249508 ],
         [ 0.9677523 , -0.62102956, -0.9847188 , ...,  0.8394024 ,
          -0.8959551 ,  0.99904704]],

        ...,

        [[ 0.9937695 ,  0.22903931,  0.5431701 , ...,  0.898347  ,
           0.5431701 ,  0.9635326 ],
         [ 0.00771688, -0.30571872,  0.9635326 , ...,  0.51165885,
           0.16614795,  0.6694092 ],
         [-0.24403508,  0.7284993 ,  0.09030926, ...,  0.5827689 ,
           0.99507374,  0.9997398 ],
         ...,
         [ 0.02240349, -0.6467312 ,  0.44796088, ...,  0.55544376,
           0.9149515 ,  0.02240349],
         [-0.9943585 , -0.22376496, -0.7821028 , ...,  0.9149515 ,
           0.36683756, -0.9249508 ],
         [ 0.9677523 , -0.62102956, -0.9847188 , ...,  0.8394024 ,
          -0.8959551 ,  0.99904704]],

        [[ 0.9937695 ,  0.22903931,  0.5431701 , ...,  0.898347  ,
           0.5431701 ,  0.9635326 ],
         [ 0.00771688, -0.30571872,  0.9635326 , ...,  0.51165885,
           0.16614795,  0.6694092 ],
         [-0.24403508,  0.7284993 ,  0.09030926, ...,  0.5827689 ,
           0.99507374,  0.9997398 ],
         ...,
         [ 0.02240349, -0.6467312 ,  0.44796088, ...,  0.55544376,
           0.9149515 ,  0.02240349],
         [-0.9943585 , -0.22376496, -0.7821028 , ...,  0.9149515 ,
           0.36683756, -0.9249508 ],
         [ 0.9677523 , -0.62102956, -0.9847188 , ...,  0.8394024 ,
          -0.8959551 ,  0.99904704]],

        [[ 0.9937695 ,  0.22903931,  0.5431701 , ...,  0.898347  ,
           0.5431701 ,  0.9635326 ],
         [ 0.00771688, -0.30571872,  0.9635326 , ...,  0.51165885,
           0.16614795,  0.6694092 ],
         [-0.24403508,  0.7284993 ,  0.09030926, ...,  0.5827689 ,
           0.99507374,  0.9997398 ],
         ...,
         [ 0.02240349, -0.6467312 ,  0.44796088, ...,  0.55544376,
           0.9149515 ,  0.02240349],
         [-0.9943585 , -0.22376496, -0.7821028 , ...,  0.9149515 ,
           0.36683756, -0.9249508 ],
         [ 0.9677523 , -0.62102956, -0.9847188 , ...,  0.8394024 ,
          -0.8959551 ,  0.99904704]]]], dtype=float32), 'output_shape': torch.Size([1, 1024, 32, 32]), 'from': [4], 'to': [3]}

generate models:72

analyse the exceptions in iter:117
tensorflow exception:
{'id': 16, 'name': 'maxpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 1024, 32, 32), dtype=float32, numpy=
array([[[[[4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625],
          [4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625],
          [4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625],
          ...,
          [4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625],
          [4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625],
          [4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625]],

         [[4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625],
          [4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625],
          [4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625],
          ...,
          [4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625],
          [4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625],
          [4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625]],

         [[4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625],
          [4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625],
          [4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625],
          ...,
          [4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625],
          [4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625],
          [4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625]],

         ...,

         [[4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625],
          [4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625],
          [4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625],
          ...,
          [4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625],
          [4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625],
          [4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625]],

         [[4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625],
          [4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625],
          [4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625],
          ...,
          [4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625],
          [4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625],
          [4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625]],

         [[4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625],
          [4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625],
          [4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625],
          ...,
          [4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625],
          [4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625],
          [4.0625, 4.0625, 4.0625, ..., 4.0625, 4.0625, 4.0625]]]]],
      dtype=float32)>}
Default MaxPoolingOp only supports NHWC on device type CPU [Op:MaxPool]

generate models:73

analyse output arrays in iter:125

pre layer res:
10:cos
{'name': 'cos', 'output': array([[[[9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         ...,
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.1483816e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.0291723e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07]],

        [[9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         ...,
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.1483816e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.0291723e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07]],

        [[9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         ...,
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.1483816e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.0291723e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07]],

        ...,

        [[9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         ...,
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.1483816e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.0291723e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07]],

        [[9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         ...,
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.1483816e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.0291723e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07]],

        [[9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         ...,
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.1483816e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.0291723e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07]]]], dtype=float32), 'output_shape': TensorShape([1, 1024, 32, 32]), 'from': [5], 'to': [16]}
tf node:
{'name': 'sin', 'output': array([[[[9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         ...,
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.1483816e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.0291723e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07]],

        [[9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         ...,
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.1483816e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.0291723e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07]],

        [[9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         ...,
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.1483816e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.0291723e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07]],

        ...,

        [[9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         ...,
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.1483816e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.0291723e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07]],

        [[9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         ...,
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.1483816e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.0291723e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07]],

        [[9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         ...,
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.1483816e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.0291723e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07]]]], dtype=float32), 'output_shape': TensorShape([1, 1024, 32, 32]), 'from': [10], 'to': []}
ms node:
{'name': 'sin', 'output': array([[[[9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         ...,
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.1483816e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.0291723e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07]],

        [[9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         ...,
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.1483816e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.0291723e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07]],

        [[9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         ...,
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.1483816e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.0291723e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07]],

        ...,

        [[1.5707954e+00, 1.5707954e+00, 1.5707954e+00, ...,
          1.5707954e+00, 1.5707954e+00, 1.5707954e+00],
         [1.5707954e+00, 1.5707954e+00, 1.5707954e+00, ...,
          1.5707954e+00, 1.5707954e+00, 1.5707954e+00],
         [1.5707954e+00, 1.5707954e+00, 1.5707954e+00, ...,
          1.5707954e+00, 1.5707954e+00, 1.5707954e+00],
         ...,
         [1.5707954e+00, 1.5707954e+00, 1.5707954e+00, ...,
          1.5707952e+00, 1.5707954e+00, 1.5707954e+00],
         [1.5707954e+00, 1.5707954e+00, 1.5707954e+00, ...,
          1.5707953e+00, 1.5707954e+00, 1.5707954e+00],
         [1.5707954e+00, 1.5707954e+00, 1.5707954e+00, ...,
          1.5707954e+00, 1.5707954e+00, 1.5707954e+00]],

        [[1.5707954e+00, 1.5707954e+00, 1.5707954e+00, ...,
          1.5707954e+00, 1.5707954e+00, 1.5707954e+00],
         [1.5707954e+00, 1.5707954e+00, 1.5707954e+00, ...,
          1.5707954e+00, 1.5707954e+00, 1.5707954e+00],
         [1.5707954e+00, 1.5707954e+00, 1.5707954e+00, ...,
          1.5707954e+00, 1.5707954e+00, 1.5707954e+00],
         ...,
         [1.5707954e+00, 1.5707954e+00, 1.5707954e+00, ...,
          1.5707952e+00, 1.5707954e+00, 1.5707954e+00],
         [1.5707954e+00, 1.5707954e+00, 1.5707954e+00, ...,
          1.5707953e+00, 1.5707954e+00, 1.5707954e+00],
         [1.5707954e+00, 1.5707954e+00, 1.5707954e+00, ...,
          1.5707954e+00, 1.5707954e+00, 1.5707954e+00]],

        [[1.5707954e+00, 1.5707954e+00, 1.5707954e+00, ...,
          1.5707954e+00, 1.5707954e+00, 1.5707954e+00],
         [1.5707954e+00, 1.5707954e+00, 1.5707954e+00, ...,
          1.5707954e+00, 1.5707954e+00, 1.5707954e+00],
         [1.5707954e+00, 1.5707954e+00, 1.5707954e+00, ...,
          1.5707954e+00, 1.5707954e+00, 1.5707954e+00],
         ...,
         [1.5707954e+00, 1.5707954e+00, 1.5707954e+00, ...,
          1.5707952e+00, 1.5707954e+00, 1.5707954e+00],
         [1.5707954e+00, 1.5707954e+00, 1.5707954e+00, ...,
          1.5707953e+00, 1.5707954e+00, 1.5707954e+00],
         [1.5707954e+00, 1.5707954e+00, 1.5707954e+00, ...,
          1.5707954e+00, 1.5707954e+00, 1.5707954e+00]]]], dtype=float32), 'output_shape': (1, 1024, 32, 32), 'from': [10], 'to': []}
torch node:
{'name': 'sin', 'output': array([[[[9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         ...,
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.1483816e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.0291723e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07]],

        [[9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         ...,
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.1483816e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.0291723e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07]],

        [[9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         ...,
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.1483816e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.0291723e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07]],

        ...,

        [[9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         ...,
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.1483816e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.0291723e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07]],

        [[9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         ...,
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.1483816e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.0291723e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07]],

        [[9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07],
         ...,
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.1483816e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          1.0291723e-06, 9.0996292e-07, 9.0996292e-07],
         [9.0996292e-07, 9.0996292e-07, 9.0996292e-07, ...,
          9.0996292e-07, 9.0996292e-07, 9.0996292e-07]]]], dtype=float32), 'output_shape': torch.Size([1, 1024, 32, 32]), 'from': [10], 'to': []}

pre layer res:
3:add
{'name': 'add', 'output': array([[[[195840., 192512., 192768., ..., 193536., 192768., 195840.],
         [195840., 194048., 195840., ..., 195840., 195072., 195840.],
         [195840., 192256., 177152., ..., 195072., 195072., 195840.],
         ...,
         [195840., 195072., 195072., ..., 139776., 179200., 192000.],
         [195840., 195072., 195840., ..., 163584., 183296., 193024.],
         [195840., 192768., 193536., ..., 183040., 190208., 195072.]],

        [[195840., 192512., 192768., ..., 193536., 192768., 195840.],
         [195840., 194048., 195840., ..., 195840., 195072., 195840.],
         [195840., 192256., 177152., ..., 195072., 195072., 195840.],
         ...,
         [195840., 195072., 195072., ..., 139776., 179200., 192000.],
         [195840., 195072., 195840., ..., 163584., 183296., 193024.],
         [195840., 192768., 193536., ..., 183040., 190208., 195072.]],

        [[195840., 192512., 192768., ..., 193536., 192768., 195840.],
         [195840., 194048., 195840., ..., 195840., 195072., 195840.],
         [195840., 192256., 177152., ..., 195072., 195072., 195840.],
         ...,
         [195840., 195072., 195072., ..., 139776., 179200., 192000.],
         [195840., 195072., 195840., ..., 163584., 183296., 193024.],
         [195840., 192768., 193536., ..., 183040., 190208., 195072.]],

        ...,

        [[195840., 192512., 192768., ..., 193536., 192768., 195840.],
         [195840., 194048., 195840., ..., 195840., 195072., 195840.],
         [195840., 192256., 177152., ..., 195072., 195072., 195840.],
         ...,
         [195840., 195072., 195072., ..., 139776., 179200., 192000.],
         [195840., 195072., 195840., ..., 163584., 183296., 193024.],
         [195840., 192768., 193536., ..., 183040., 190208., 195072.]],

        [[195840., 192512., 192768., ..., 193536., 192768., 195840.],
         [195840., 194048., 195840., ..., 195840., 195072., 195840.],
         [195840., 192256., 177152., ..., 195072., 195072., 195840.],
         ...,
         [195840., 195072., 195072., ..., 139776., 179200., 192000.],
         [195840., 195072., 195840., ..., 163584., 183296., 193024.],
         [195840., 192768., 193536., ..., 183040., 190208., 195072.]],

        [[195840., 192512., 192768., ..., 193536., 192768., 195840.],
         [195840., 194048., 195840., ..., 195840., 195072., 195840.],
         [195840., 192256., 177152., ..., 195072., 195072., 195840.],
         ...,
         [195840., 195072., 195072., ..., 139776., 179200., 192000.],
         [195840., 195072., 195840., ..., 163584., 183296., 193024.],
         [195840., 192768., 193536., ..., 183040., 190208., 195072.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 1024, 32, 32]), 'from': [1, 1], 'to': [6, 2]}
tf node:
{'name': 'sin', 'output': array([[[[-0.5669837 ,  0.9963537 , -0.12489724, ...,  0.9702275 ,
          -0.12489724, -0.5669837 ],
         [-0.5669837 , -0.9478961 , -0.5669837 , ..., -0.5669837 ,
          -0.88540316, -0.5669837 ],
         [-0.5669837 ,  0.04560591, -0.66825205, ..., -0.88540316,
          -0.88540316, -0.5669837 ],
         ...,
         [-0.5669837 , -0.88540316, -0.88540316, ...,  0.25674856,
          -0.40176788, -0.9999831 ],
         [-0.5669837 , -0.88540316, -0.5669837 , ...,  0.95525706,
           0.22152075, -0.98641413],
         [-0.5669837 , -0.12489724,  0.9702275 , ..., -0.98319787,
          -0.2694178 , -0.88540316]],

        [[-0.5669837 ,  0.9963537 , -0.12489724, ...,  0.9702275 ,
          -0.12489724, -0.5669837 ],
         [-0.5669837 , -0.9478961 , -0.5669837 , ..., -0.5669837 ,
          -0.88540316, -0.5669837 ],
         [-0.5669837 ,  0.04560591, -0.66825205, ..., -0.88540316,
          -0.88540316, -0.5669837 ],
         ...,
         [-0.5669837 , -0.88540316, -0.88540316, ...,  0.25674856,
          -0.40176788, -0.9999831 ],
         [-0.5669837 , -0.88540316, -0.5669837 , ...,  0.95525706,
           0.22152075, -0.98641413],
         [-0.5669837 , -0.12489724,  0.9702275 , ..., -0.98319787,
          -0.2694178 , -0.88540316]],

        [[-0.5669837 ,  0.9963537 , -0.12489724, ...,  0.9702275 ,
          -0.12489724, -0.5669837 ],
         [-0.5669837 , -0.9478961 , -0.5669837 , ..., -0.5669837 ,
          -0.88540316, -0.5669837 ],
         [-0.5669837 ,  0.04560591, -0.66825205, ..., -0.88540316,
          -0.88540316, -0.5669837 ],
         ...,
         [-0.5669837 , -0.88540316, -0.88540316, ...,  0.25674856,
          -0.40176788, -0.9999831 ],
         [-0.5669837 , -0.88540316, -0.5669837 , ...,  0.95525706,
           0.22152075, -0.98641413],
         [-0.5669837 , -0.12489724,  0.9702275 , ..., -0.98319787,
          -0.2694178 , -0.88540316]],

        ...,

        [[-0.5669837 ,  0.9963537 , -0.12489724, ...,  0.9702275 ,
          -0.12489724, -0.5669837 ],
         [-0.5669837 , -0.9478961 , -0.5669837 , ..., -0.5669837 ,
          -0.88540316, -0.5669837 ],
         [-0.5669837 ,  0.04560591, -0.66825205, ..., -0.88540316,
          -0.88540316, -0.5669837 ],
         ...,
         [-0.5669837 , -0.88540316, -0.88540316, ...,  0.25674856,
          -0.40176788, -0.9999831 ],
         [-0.5669837 , -0.88540316, -0.5669837 , ...,  0.95525706,
           0.22152075, -0.98641413],
         [-0.5669837 , -0.12489724,  0.9702275 , ..., -0.98319787,
          -0.2694178 , -0.88540316]],

        [[-0.5669837 ,  0.9963537 , -0.12489724, ...,  0.9702275 ,
          -0.12489724, -0.5669837 ],
         [-0.5669837 , -0.9478961 , -0.5669837 , ..., -0.5669837 ,
          -0.88540316, -0.5669837 ],
         [-0.5669837 ,  0.04560591, -0.66825205, ..., -0.88540316,
          -0.88540316, -0.5669837 ],
         ...,
         [-0.5669837 , -0.88540316, -0.88540316, ...,  0.25674856,
          -0.40176788, -0.9999831 ],
         [-0.5669837 , -0.88540316, -0.5669837 , ...,  0.95525706,
           0.22152075, -0.98641413],
         [-0.5669837 , -0.12489724,  0.9702275 , ..., -0.98319787,
          -0.2694178 , -0.88540316]],

        [[-0.5669837 ,  0.9963537 , -0.12489724, ...,  0.9702275 ,
          -0.12489724, -0.5669837 ],
         [-0.5669837 , -0.9478961 , -0.5669837 , ..., -0.5669837 ,
          -0.88540316, -0.5669837 ],
         [-0.5669837 ,  0.04560591, -0.66825205, ..., -0.88540316,
          -0.88540316, -0.5669837 ],
         ...,
         [-0.5669837 , -0.88540316, -0.88540316, ...,  0.25674856,
          -0.40176788, -0.9999831 ],
         [-0.5669837 , -0.88540316, -0.5669837 , ...,  0.95525706,
           0.22152075, -0.98641413],
         [-0.5669837 , -0.12489724,  0.9702275 , ..., -0.98319787,
          -0.2694178 , -0.88540316]]]], dtype=float32), 'output_shape': TensorShape([1, 1024, 32, 32]), 'from': [3], 'to': [11, 12]}
ms node:
{'name': 'sin', 'output': array([[[[-5.6698370e-01,  9.9635369e-01, -1.2489725e-01, ...,
           9.7022748e-01, -1.2489725e-01, -5.6698370e-01],
         [-5.6698370e-01, -9.4789612e-01, -5.6698370e-01, ...,
          -5.6698370e-01, -8.8540316e-01, -5.6698370e-01],
         [-5.6698370e-01,  4.5605909e-02, -6.6825205e-01, ...,
          -8.8540316e-01, -8.8540316e-01, -5.6698370e-01],
         ...,
         [-5.6698370e-01, -8.8540316e-01, -8.8540316e-01, ...,
           2.5674856e-01, -4.0176788e-01, -9.9998307e-01],
         [-5.6698370e-01, -8.8540316e-01, -5.6698370e-01, ...,
           9.5525706e-01,  2.2152075e-01, -9.8641413e-01],
         [-5.6698370e-01, -1.2489725e-01,  9.7022748e-01, ...,
          -9.8319787e-01, -2.6941779e-01, -8.8540316e-01]],

        [[-5.6698370e-01,  9.9635369e-01, -1.2489725e-01, ...,
           9.7022748e-01, -1.2489725e-01, -5.6698370e-01],
         [-5.6698370e-01, -9.4789612e-01, -5.6698370e-01, ...,
          -5.6698370e-01, -8.8540316e-01, -5.6698370e-01],
         [-5.6698370e-01,  4.5605909e-02, -6.6825205e-01, ...,
          -8.8540316e-01, -8.8540316e-01, -5.6698370e-01],
         ...,
         [-5.6698370e-01, -8.8540316e-01, -8.8540316e-01, ...,
           2.5674856e-01, -4.0176788e-01, -9.9998307e-01],
         [-5.6698370e-01, -8.8540316e-01, -5.6698370e-01, ...,
           9.5525706e-01,  2.2152075e-01, -9.8641413e-01],
         [-5.6698370e-01, -1.2489725e-01,  9.7022748e-01, ...,
          -9.8319787e-01, -2.6941779e-01, -8.8540316e-01]],

        [[-5.6698370e-01,  9.9635369e-01, -1.2489725e-01, ...,
           9.7022748e-01, -1.2489725e-01, -5.6698370e-01],
         [-5.6698370e-01, -9.4789612e-01, -5.6698370e-01, ...,
          -5.6698370e-01, -8.8540316e-01, -5.6698370e-01],
         [-5.6698370e-01,  4.5605909e-02, -6.6825205e-01, ...,
          -8.8540316e-01, -8.8540316e-01, -5.6698370e-01],
         ...,
         [-5.6698370e-01, -8.8540316e-01, -8.8540316e-01, ...,
           2.5674856e-01, -4.0176788e-01, -9.9998307e-01],
         [-5.6698370e-01, -8.8540316e-01, -5.6698370e-01, ...,
           9.5525706e-01,  2.2152075e-01, -9.8641413e-01],
         [-5.6698370e-01, -1.2489725e-01,  9.7022748e-01, ...,
          -9.8319787e-01, -2.6941779e-01, -8.8540316e-01]],

        ...,

        [[ 9.7920000e+04,  9.6256000e+04,  9.6384000e+04, ...,
           9.6768000e+04,  9.6384000e+04,  9.7920000e+04],
         [ 9.7920000e+04,  9.7024000e+04,  9.7920000e+04, ...,
           9.7920000e+04,  9.7536000e+04,  9.7920000e+04],
         [ 9.7920000e+04,  9.6128000e+04,  8.8576000e+04, ...,
           9.7536000e+04,  9.7536000e+04,  9.7920000e+04],
         ...,
         [ 9.7920000e+04,  9.7536000e+04,  9.7536000e+04, ...,
           6.9888000e+04,  8.9600000e+04,  9.6000000e+04],
         [ 9.7920000e+04,  9.7536000e+04,  9.7920000e+04, ...,
           8.1792000e+04,  9.1648000e+04,  9.6512000e+04],
         [ 9.7920000e+04,  9.6384000e+04,  9.6768000e+04, ...,
           9.1520000e+04,  9.5104000e+04,  9.7536000e+04]],

        [[ 9.7920000e+04,  9.6256000e+04,  9.6384000e+04, ...,
           9.6768000e+04,  9.6384000e+04,  9.7920000e+04],
         [ 9.7920000e+04,  9.7024000e+04,  9.7920000e+04, ...,
           9.7920000e+04,  9.7536000e+04,  9.7920000e+04],
         [ 9.7920000e+04,  9.6128000e+04,  8.8576000e+04, ...,
           9.7536000e+04,  9.7536000e+04,  9.7920000e+04],
         ...,
         [ 9.7920000e+04,  9.7536000e+04,  9.7536000e+04, ...,
           6.9888000e+04,  8.9600000e+04,  9.6000000e+04],
         [ 9.7920000e+04,  9.7536000e+04,  9.7920000e+04, ...,
           8.1792000e+04,  9.1648000e+04,  9.6512000e+04],
         [ 9.7920000e+04,  9.6384000e+04,  9.6768000e+04, ...,
           9.1520000e+04,  9.5104000e+04,  9.7536000e+04]],

        [[ 9.7920000e+04,  9.6256000e+04,  9.6384000e+04, ...,
           9.6768000e+04,  9.6384000e+04,  9.7920000e+04],
         [ 9.7920000e+04,  9.7024000e+04,  9.7920000e+04, ...,
           9.7920000e+04,  9.7536000e+04,  9.7920000e+04],
         [ 9.7920000e+04,  9.6128000e+04,  8.8576000e+04, ...,
           9.7536000e+04,  9.7536000e+04,  9.7920000e+04],
         ...,
         [ 9.7920000e+04,  9.7536000e+04,  9.7536000e+04, ...,
           6.9888000e+04,  8.9600000e+04,  9.6000000e+04],
         [ 9.7920000e+04,  9.7536000e+04,  9.7920000e+04, ...,
           8.1792000e+04,  9.1648000e+04,  9.6512000e+04],
         [ 9.7920000e+04,  9.6384000e+04,  9.6768000e+04, ...,
           9.1520000e+04,  9.5104000e+04,  9.7536000e+04]]]],
      dtype=float32), 'output_shape': (1, 1024, 32, 32), 'from': [3], 'to': [11, 12]}
torch node:
{'name': 'sin', 'output': array([[[[-0.5669837 ,  0.9963537 , -0.12489725, ...,  0.9702275 ,
          -0.12489725, -0.5669837 ],
         [-0.5669837 , -0.9478961 , -0.5669837 , ..., -0.5669837 ,
          -0.88540316, -0.5669837 ],
         [-0.5669837 ,  0.04560591, -0.66825205, ..., -0.88540316,
          -0.88540316, -0.5669837 ],
         ...,
         [-0.5669837 , -0.88540316, -0.88540316, ...,  0.25674856,
          -0.40176788, -0.9999831 ],
         [-0.5669837 , -0.88540316, -0.5669837 , ...,  0.95525706,
           0.22152075, -0.98641413],
         [-0.5669837 , -0.12489725,  0.9702275 , ..., -0.98319787,
          -0.2694178 , -0.88540316]],

        [[-0.5669837 ,  0.9963537 , -0.12489725, ...,  0.9702275 ,
          -0.12489725, -0.5669837 ],
         [-0.5669837 , -0.9478961 , -0.5669837 , ..., -0.5669837 ,
          -0.88540316, -0.5669837 ],
         [-0.5669837 ,  0.04560591, -0.66825205, ..., -0.88540316,
          -0.88540316, -0.5669837 ],
         ...,
         [-0.5669837 , -0.88540316, -0.88540316, ...,  0.25674856,
          -0.40176788, -0.9999831 ],
         [-0.5669837 , -0.88540316, -0.5669837 , ...,  0.95525706,
           0.22152075, -0.98641413],
         [-0.5669837 , -0.12489725,  0.9702275 , ..., -0.98319787,
          -0.2694178 , -0.88540316]],

        [[-0.5669837 ,  0.9963537 , -0.12489725, ...,  0.9702275 ,
          -0.12489725, -0.5669837 ],
         [-0.5669837 , -0.9478961 , -0.5669837 , ..., -0.5669837 ,
          -0.88540316, -0.5669837 ],
         [-0.5669837 ,  0.04560591, -0.66825205, ..., -0.88540316,
          -0.88540316, -0.5669837 ],
         ...,
         [-0.5669837 , -0.88540316, -0.88540316, ...,  0.25674856,
          -0.40176788, -0.9999831 ],
         [-0.5669837 , -0.88540316, -0.5669837 , ...,  0.95525706,
           0.22152075, -0.98641413],
         [-0.5669837 , -0.12489725,  0.9702275 , ..., -0.98319787,
          -0.2694178 , -0.88540316]],

        ...,

        [[-0.5669837 ,  0.9963537 , -0.12489725, ...,  0.9702275 ,
          -0.12489725, -0.5669837 ],
         [-0.5669837 , -0.9478961 , -0.5669837 , ..., -0.5669837 ,
          -0.88540316, -0.5669837 ],
         [-0.5669837 ,  0.04560591, -0.66825205, ..., -0.88540316,
          -0.88540316, -0.5669837 ],
         ...,
         [-0.5669837 , -0.88540316, -0.88540316, ...,  0.25674856,
          -0.40176788, -0.9999831 ],
         [-0.5669837 , -0.88540316, -0.5669837 , ...,  0.95525706,
           0.22152075, -0.98641413],
         [-0.5669837 , -0.12489725,  0.9702275 , ..., -0.98319787,
          -0.2694178 , -0.88540316]],

        [[-0.5669837 ,  0.9963537 , -0.12489725, ...,  0.9702275 ,
          -0.12489725, -0.5669837 ],
         [-0.5669837 , -0.9478961 , -0.5669837 , ..., -0.5669837 ,
          -0.88540316, -0.5669837 ],
         [-0.5669837 ,  0.04560591, -0.66825205, ..., -0.88540316,
          -0.88540316, -0.5669837 ],
         ...,
         [-0.5669837 , -0.88540316, -0.88540316, ...,  0.25674856,
          -0.40176788, -0.9999831 ],
         [-0.5669837 , -0.88540316, -0.5669837 , ...,  0.95525706,
           0.22152075, -0.98641413],
         [-0.5669837 , -0.12489725,  0.9702275 , ..., -0.98319787,
          -0.2694178 , -0.88540316]],

        [[-0.5669837 ,  0.9963537 , -0.12489725, ...,  0.9702275 ,
          -0.12489725, -0.5669837 ],
         [-0.5669837 , -0.9478961 , -0.5669837 , ..., -0.5669837 ,
          -0.88540316, -0.5669837 ],
         [-0.5669837 ,  0.04560591, -0.66825205, ..., -0.88540316,
          -0.88540316, -0.5669837 ],
         ...,
         [-0.5669837 , -0.88540316, -0.88540316, ...,  0.25674856,
          -0.40176788, -0.9999831 ],
         [-0.5669837 , -0.88540316, -0.5669837 , ...,  0.95525706,
           0.22152075, -0.98641413],
         [-0.5669837 , -0.12489725,  0.9702275 , ..., -0.98319787,
          -0.2694178 , -0.88540316]]]], dtype=float32), 'output_shape': torch.Size([1, 1024, 32, 32]), 'from': [3], 'to': [11, 12]}

generate models:78

analyse the exceptions in iter:126
tensorflow exception:
{'id': 16, 'name': 'avgpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 1024, 32, 32), dtype=float32, numpy=
array([[[[[1090562., 1069442., 1067522., ...,  662402.,  658562.,
            639362.],
          [1092482., 1069442., 1069442., ...,  635522.,  637442.,
            627842.],
          [1107842., 1086722., 1082882., ...,  625922.,  625922.,
            614402.],
          ...,
          [1296002., 1315202., 1338242., ...,  677762.,  687362.,
            673922.],
          [1288322., 1307522., 1336322., ...,  760322.,  771842.,
            712322.],
          [1278722., 1299842., 1330562., ...,  760322.,  729602.,
            685442.]],

         [[1090562., 1069442., 1067522., ...,  662402.,  658562.,
            639362.],
          [1092482., 1069442., 1069442., ...,  635522.,  637442.,
            627842.],
          [1107842., 1086722., 1082882., ...,  625922.,  625922.,
            614402.],
          ...,
          [1296002., 1315202., 1338242., ...,  677762.,  687362.,
            673922.],
          [1288322., 1307522., 1336322., ...,  760322.,  771842.,
            712322.],
          [1278722., 1299842., 1330562., ...,  760322.,  729602.,
            685442.]],

         [[1090562., 1069442., 1067522., ...,  662402.,  658562.,
            639362.],
          [1092482., 1069442., 1069442., ...,  635522.,  637442.,
            627842.],
          [1107842., 1086722., 1082882., ...,  625922.,  625922.,
            614402.],
          ...,
          [1296002., 1315202., 1338242., ...,  677762.,  687362.,
            673922.],
          [1288322., 1307522., 1336322., ...,  760322.,  771842.,
            712322.],
          [1278722., 1299842., 1330562., ...,  760322.,  729602.,
            685442.]],

         ...,

         [[1090562., 1069442., 1067522., ...,  662402.,  658562.,
            639362.],
          [1092482., 1069442., 1069442., ...,  635522.,  637442.,
            627842.],
          [1107842., 1086722., 1082882., ...,  625922.,  625922.,
            614402.],
          ...,
          [1296002., 1315202., 1338242., ...,  677762.,  687362.,
            673922.],
          [1288322., 1307522., 1336322., ...,  760322.,  771842.,
            712322.],
          [1278722., 1299842., 1330562., ...,  760322.,  729602.,
            685442.]],

         [[1090562., 1069442., 1067522., ...,  662402.,  658562.,
            639362.],
          [1092482., 1069442., 1069442., ...,  635522.,  637442.,
            627842.],
          [1107842., 1086722., 1082882., ...,  625922.,  625922.,
            614402.],
          ...,
          [1296002., 1315202., 1338242., ...,  677762.,  687362.,
            673922.],
          [1288322., 1307522., 1336322., ...,  760322.,  771842.,
            712322.],
          [1278722., 1299842., 1330562., ...,  760322.,  729602.,
            685442.]],

         [[1090562., 1069442., 1067522., ...,  662402.,  658562.,
            639362.],
          [1092482., 1069442., 1069442., ...,  635522.,  637442.,
            627842.],
          [1107842., 1086722., 1082882., ...,  625922.,  625922.,
            614402.],
          ...,
          [1296002., 1315202., 1338242., ...,  677762.,  687362.,
            673922.],
          [1288322., 1307522., 1336322., ...,  760322.,  771842.,
            712322.],
          [1278722., 1299842., 1330562., ...,  760322.,  729602.,
            685442.]]]]], dtype=float32)>}
Default AvgPoolingOp only supports NHWC on device type CPU [Op:AvgPool]

generate models:79

analyse the exceptions in iter:127
tensorflow exception:
{'id': 16, 'name': 'avgpool2d', 'framework': 'tensorflow', 'input_datas': <tf.Tensor: shape=(1, 1, 1024, 32, 32), dtype=float32, numpy=
array([[[[[      nan,       nan,       nan, ...,       nan,       nan,
                 nan],
          [      nan,       nan,       nan, ...,       nan,       nan,
                 nan],
          [      nan,       nan,       nan, ...,       nan,       nan,
                 nan],
          ...,
          [      nan,       nan,       nan, ...,       nan,       nan,
                 nan],
          [      nan,       nan,       nan, ...,       nan,       nan,
                 nan],
          [      nan,       nan,       nan, ...,       nan,       nan,
                 nan]],

         [[      nan,       nan,       nan, ...,       nan,       nan,
                 nan],
          [      nan,       nan,       nan, ...,       nan,       nan,
                 nan],
          [      nan,       nan,       nan, ...,       nan,       nan,
                 nan],
          ...,
          [      nan,       nan,       nan, ...,       nan,       nan,
                 nan],
          [      nan,       nan,       nan, ...,       nan,       nan,
                 nan],
          [      nan,       nan,       nan, ...,       nan,       nan,
                 nan]],

         [[      nan,       nan,       nan, ...,       nan,       nan,
                 nan],
          [      nan,       nan,       nan, ...,       nan,       nan,
                 nan],
          [      nan,       nan,       nan, ...,       nan,       nan,
                 nan],
          ...,
          [      nan,       nan,       nan, ...,       nan,       nan,
                 nan],
          [      nan,       nan,       nan, ...,       nan,       nan,
                 nan],
          [      nan,       nan,       nan, ...,       nan,       nan,
                 nan]],

         ...,

         [[469.56747, 469.54715, 469.54715, ..., 469.5654 , 469.5654 ,
           469.5654 ],
          [469.56747, 469.49197, 469.5341 , ..., 469.56747, 469.56747,
           469.56747],
          [469.5438 , 469.4454 , 469.5226 , ..., 469.56747, 469.56747,
           469.56747],
          ...,
          [468.93073, 468.10574, 468.22293, ..., 467.63174, 468.12997,
           468.38754],
          [469.02713, 468.86722, 468.79715, ..., 468.2665 , 468.4794 ,
           468.70786],
          [468.9216 , 468.78522, 468.6376 , ..., 468.4794 , 468.6376 ,
           468.79715]],

         [[469.56747, 469.54715, 469.54715, ..., 469.5654 , 469.5654 ,
           469.5654 ],
          [469.56747, 469.49197, 469.5341 , ..., 469.56747, 469.56747,
           469.56747],
          [469.5438 , 469.4454 , 469.5226 , ..., 469.56747, 469.56747,
           469.56747],
          ...,
          [468.93073, 468.10574, 468.22293, ..., 467.63174, 468.12997,
           468.38754],
          [469.02713, 468.86722, 468.79715, ..., 468.2665 , 468.4794 ,
           468.70786],
          [468.9216 , 468.78522, 468.6376 , ..., 468.4794 , 468.6376 ,
           468.79715]],

         [[469.56747, 469.54715, 469.54715, ..., 469.5654 , 469.5654 ,
           469.5654 ],
          [469.56747, 469.49197, 469.5341 , ..., 469.56747, 469.56747,
           469.56747],
          [469.5438 , 469.4454 , 469.5226 , ..., 469.56747, 469.56747,
           469.56747],
          ...,
          [468.93073, 468.10574, 468.22293, ..., 467.63174, 468.12997,
           468.38754],
          [469.02713, 468.86722, 468.79715, ..., 468.2665 , 468.4794 ,
           468.70786],
          [468.9216 , 468.78522, 468.6376 , ..., 468.4794 , 468.6376 ,
           468.79715]]]]], dtype=float32)>}
Default AvgPoolingOp only supports NHWC on device type CPU [Op:AvgPool]

generate models:80

analyse output arrays in iter:146

pre layer res:
12:transpose
{'name': 'transpose', 'output': array([[[[   0.     ,    0.     ,    0.     , ..., 1523.9668 ,
             0.     ,    0.     ],
         [1335.4225 , 2182.3003 ,    0.     , ...,    0.     ,
          1683.385  , 2474.293  ],
         [   0.     ,    0.     , 2569.5947 , ...,    0.     ,
           714.3448 , 1034.0331 ],
         ...,
         [   0.     ,    0.     ,    0.     , ..., 2411.3232 ,
             0.     ,  692.45667],
         [2563.5889 , 2553.082  ,    0.     , ...,    0.     ,
             0.     ,    0.     ],
         [   0.     ,    0.     , 1136.7671 , ..., 1767.2919 ,
             0.     ,    0.     ]],

        [[   0.     ,    0.     ,    0.     , ..., 1523.9668 ,
             0.     ,    0.     ],
         [1335.4225 , 2182.3003 ,    0.     , ...,    0.     ,
          1683.385  , 2474.293  ],
         [   0.     ,    0.     , 2569.5947 , ...,    0.     ,
           714.3448 , 1034.0331 ],
         ...,
         [   0.     ,    0.     ,    0.     , ..., 2411.3232 ,
             0.     ,  692.45667],
         [2563.5889 , 2553.082  ,    0.     , ...,    0.     ,
             0.     ,    0.     ],
         [   0.     ,    0.     , 1136.7671 , ..., 1767.2919 ,
             0.     ,    0.     ]],

        [[   0.     ,    0.     ,    0.     , ..., 1523.9668 ,
             0.     ,    0.     ],
         [1335.4225 , 2182.3003 ,    0.     , ...,    0.     ,
          1683.385  , 2474.293  ],
         [   0.     ,    0.     , 2569.5947 , ...,    0.     ,
           714.3448 , 1034.0331 ],
         ...,
         [   0.     ,    0.     ,    0.     , ..., 2411.3232 ,
             0.     ,  692.45667],
         [2563.5889 , 2553.082  ,    0.     , ...,    0.     ,
             0.     ,    0.     ],
         [   0.     ,    0.     , 1136.7671 , ..., 1767.2919 ,
             0.     ,    0.     ]],

        ...,

        [[   0.     ,    0.     ,    0.     , ..., 1523.9668 ,
             0.     ,    0.     ],
         [1335.4225 , 2182.3003 ,    0.     , ...,    0.     ,
          1683.385  , 2474.293  ],
         [   0.     ,    0.     , 2569.5947 , ...,    0.     ,
           714.3448 , 1034.0331 ],
         ...,
         [   0.     ,    0.     ,    0.     , ..., 2411.3232 ,
             0.     ,  692.45667],
         [2563.5889 , 2553.082  ,    0.     , ...,    0.     ,
             0.     ,    0.     ],
         [   0.     ,    0.     , 1136.7671 , ..., 1767.2919 ,
             0.     ,    0.     ]],

        [[   0.     ,    0.     ,    0.     , ..., 1523.9668 ,
             0.     ,    0.     ],
         [1335.4225 , 2182.3003 ,    0.     , ...,    0.     ,
          1683.385  , 2474.293  ],
         [   0.     ,    0.     , 2569.5947 , ...,    0.     ,
           714.3448 , 1034.0331 ],
         ...,
         [   0.     ,    0.     ,    0.     , ..., 2411.3232 ,
             0.     ,  692.45667],
         [2563.5889 , 2553.082  ,    0.     , ...,    0.     ,
             0.     ,    0.     ],
         [   0.     ,    0.     , 1136.7671 , ..., 1767.2919 ,
             0.     ,    0.     ]],

        [[   0.     ,    0.     ,    0.     , ..., 1523.9668 ,
             0.     ,    0.     ],
         [1335.4225 , 2182.3003 ,    0.     , ...,    0.     ,
          1683.385  , 2474.293  ],
         [   0.     ,    0.     , 2569.5947 , ...,    0.     ,
           714.3448 , 1034.0331 ],
         ...,
         [   0.     ,    0.     ,    0.     , ..., 2411.3232 ,
             0.     ,  692.45667],
         [2563.5889 , 2553.082  ,    0.     , ...,    0.     ,
             0.     ,    0.     ],
         [   0.     ,    0.     , 1136.7671 , ..., 1767.2919 ,
             0.     ,    0.     ]]]], dtype=float32), 'output_shape': TensorShape([1, 1024, 32, 32]), 'from': [10], 'to': [16]}
tf node:
{'name': 'cos', 'output': array([[[[ 1.        ,  1.        ,  1.        , ..., -0.95698804,
           1.        ,  1.        ],
         [-0.9699898 , -0.44770318,  1.        , ...,  1.        ,
           0.8734015 ,  0.28475806],
         [ 1.        ,  1.        ,  0.9741059 , ...,  1.        ,
          -0.3593218 , -0.9008391 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.15030874,
           1.        ,  0.26144123],
         [ 0.99878687, -0.51241976,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.88259125, ..., -0.14548431,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  1.        , ..., -0.95698804,
           1.        ,  1.        ],
         [-0.9699898 , -0.44770318,  1.        , ...,  1.        ,
           0.8734015 ,  0.28475806],
         [ 1.        ,  1.        ,  0.9741059 , ...,  1.        ,
          -0.3593218 , -0.9008391 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.15030874,
           1.        ,  0.26144123],
         [ 0.99878687, -0.51241976,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.88259125, ..., -0.14548431,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  1.        , ..., -0.95698804,
           1.        ,  1.        ],
         [-0.9699898 , -0.44770318,  1.        , ...,  1.        ,
           0.8734015 ,  0.28475806],
         [ 1.        ,  1.        ,  0.9741059 , ...,  1.        ,
          -0.3593218 , -0.9008391 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.15030874,
           1.        ,  0.26144123],
         [ 0.99878687, -0.51241976,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.88259125, ..., -0.14548431,
           1.        ,  1.        ]],

        ...,

        [[ 1.        ,  1.        ,  1.        , ..., -0.95698804,
           1.        ,  1.        ],
         [-0.9699898 , -0.44770318,  1.        , ...,  1.        ,
           0.8734015 ,  0.28475806],
         [ 1.        ,  1.        ,  0.9741059 , ...,  1.        ,
          -0.3593218 , -0.9008391 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.15030874,
           1.        ,  0.26144123],
         [ 0.99878687, -0.51241976,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.88259125, ..., -0.14548431,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  1.        , ..., -0.95698804,
           1.        ,  1.        ],
         [-0.9699898 , -0.44770318,  1.        , ...,  1.        ,
           0.8734015 ,  0.28475806],
         [ 1.        ,  1.        ,  0.9741059 , ...,  1.        ,
          -0.3593218 , -0.9008391 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.15030874,
           1.        ,  0.26144123],
         [ 0.99878687, -0.51241976,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.88259125, ..., -0.14548431,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  1.        , ..., -0.95698804,
           1.        ,  1.        ],
         [-0.9699898 , -0.44770318,  1.        , ...,  1.        ,
           0.8734015 ,  0.28475806],
         [ 1.        ,  1.        ,  0.9741059 , ...,  1.        ,
          -0.3593218 , -0.9008391 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.15030874,
           1.        ,  0.26144123],
         [ 0.99878687, -0.51241976,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.88259125, ..., -0.14548431,
           1.        ,  1.        ]]]], dtype=float32), 'output_shape': TensorShape([1, 1024, 32, 32]), 'from': [12], 'to': []}
ms node:
{'name': 'cos', 'output': array([[[[ 1.        ,  1.        ,  1.        , ..., -0.95698804,
           1.        ,  1.        ],
         [-0.9699898 , -0.44770318,  1.        , ...,  1.        ,
           0.8734015 ,  0.28709754],
         [ 1.        ,  1.        ,  0.9741059 , ...,  1.        ,
          -0.35932183, -0.9008391 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.15030874,
           1.        ,  0.26144123],
         [ 0.99878687, -0.5124197 ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.8825912 , ..., -0.14548431,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  1.        , ..., -0.95698804,
           1.        ,  1.        ],
         [-0.9699898 , -0.44770318,  1.        , ...,  1.        ,
           0.8734015 ,  0.28709754],
         [ 1.        ,  1.        ,  0.9741059 , ...,  1.        ,
          -0.35932183, -0.9008391 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.15030874,
           1.        ,  0.26144123],
         [ 0.99878687, -0.5124197 ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.8825912 , ..., -0.14548431,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  1.        , ..., -0.95698804,
           1.        ,  1.        ],
         [-0.9699898 , -0.44770318,  1.        , ...,  1.        ,
           0.8734015 ,  0.28709754],
         [ 1.        ,  1.        ,  0.9741059 , ...,  1.        ,
          -0.35932183, -0.9008391 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.15030874,
           1.        ,  0.26144123],
         [ 0.99878687, -0.5124197 ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.8825912 , ..., -0.14548431,
           1.        ,  1.        ]],

        ...,

        [[ 1.        ,  1.        ,  1.        , ..., -0.95698804,
           1.        ,  1.        ],
         [-0.9699898 , -0.44770318,  1.        , ...,  1.        ,
           0.8734015 ,  0.28709754],
         [ 1.        ,  1.        ,  0.9741059 , ...,  1.        ,
          -0.35932183, -0.9008391 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.15030874,
           1.        ,  0.26144123],
         [ 0.99878687, -0.5124197 ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.8825912 , ..., -0.14548431,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  1.        , ..., -0.95698804,
           1.        ,  1.        ],
         [-0.9699898 , -0.44770318,  1.        , ...,  1.        ,
           0.8734015 ,  0.28709754],
         [ 1.        ,  1.        ,  0.9741059 , ...,  1.        ,
          -0.35932183, -0.9008391 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.15030874,
           1.        ,  0.26144123],
         [ 0.99878687, -0.5124197 ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.8825912 , ..., -0.14548431,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  1.        , ..., -0.95698804,
           1.        ,  1.        ],
         [-0.9699898 , -0.44770318,  1.        , ...,  1.        ,
           0.8734015 ,  0.28709754],
         [ 1.        ,  1.        ,  0.9741059 , ...,  1.        ,
          -0.35932183, -0.9008391 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.15030874,
           1.        ,  0.26144123],
         [ 0.99878687, -0.5124197 ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.8825912 , ..., -0.14548431,
           1.        ,  1.        ]]]], dtype=float32), 'output_shape': (1, 1024, 32, 32), 'from': [12], 'to': []}
torch node:
{'name': 'cos', 'output': array([[[[ 1.        ,  1.        ,  1.        , ..., -0.95698804,
           1.        ,  1.        ],
         [-0.9699898 , -0.44770318,  1.        , ...,  1.        ,
           0.8734015 ,  0.28709757],
         [ 1.        ,  1.        ,  0.9741059 , ...,  1.        ,
          -0.35932183, -0.9008391 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.15030874,
           1.        ,  0.26144123],
         [ 0.99878687, -0.5124197 ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.8825912 , ..., -0.14548431,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  1.        , ..., -0.95698804,
           1.        ,  1.        ],
         [-0.9699898 , -0.44770318,  1.        , ...,  1.        ,
           0.8734015 ,  0.28709757],
         [ 1.        ,  1.        ,  0.9741059 , ...,  1.        ,
          -0.35932183, -0.9008391 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.15030874,
           1.        ,  0.26144123],
         [ 0.99878687, -0.5124197 ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.8825912 , ..., -0.14548431,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  1.        , ..., -0.95698804,
           1.        ,  1.        ],
         [-0.9699898 , -0.44770318,  1.        , ...,  1.        ,
           0.8734015 ,  0.28709757],
         [ 1.        ,  1.        ,  0.9741059 , ...,  1.        ,
          -0.35932183, -0.9008391 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.15030874,
           1.        ,  0.26144123],
         [ 0.99878687, -0.5124197 ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.8825912 , ..., -0.14548431,
           1.        ,  1.        ]],

        ...,

        [[ 1.        ,  1.        ,  1.        , ..., -0.95698804,
           1.        ,  1.        ],
         [-0.9699898 , -0.44770318,  1.        , ...,  1.        ,
           0.8734015 ,  0.28709757],
         [ 1.        ,  1.        ,  0.9741059 , ...,  1.        ,
          -0.35932183, -0.9008391 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.15030874,
           1.        ,  0.26144123],
         [ 0.99878687, -0.5124197 ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.8825912 , ..., -0.14548431,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  1.        , ..., -0.95698804,
           1.        ,  1.        ],
         [-0.9699898 , -0.44770318,  1.        , ...,  1.        ,
           0.8734015 ,  0.28709757],
         [ 1.        ,  1.        ,  0.9741059 , ...,  1.        ,
          -0.35932183, -0.9008391 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.15030874,
           1.        ,  0.26144123],
         [ 0.99878687, -0.5124197 ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.8825912 , ..., -0.14548431,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  1.        , ..., -0.95698804,
           1.        ,  1.        ],
         [-0.9699898 , -0.44770318,  1.        , ...,  1.        ,
           0.8734015 ,  0.28709757],
         [ 1.        ,  1.        ,  0.9741059 , ...,  1.        ,
          -0.35932183, -0.9008391 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.15030874,
           1.        ,  0.26144123],
         [ 0.99878687, -0.5124197 ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.8825912 , ..., -0.14548431,
           1.        ,  1.        ]]]], dtype=float32), 'output_shape': torch.Size([1, 1024, 32, 32]), 'from': [12], 'to': []}

generate models:89
