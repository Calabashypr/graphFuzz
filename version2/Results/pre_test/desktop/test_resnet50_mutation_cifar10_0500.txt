
analyse output arrays in iter:1

pre layer res:
2:sigmoid
{'name': 'sigmoid', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [0], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[ 75.     , 105.     , 105.     , ..., 105.     ,  90.     ,
           60.     ],
         [105.     , 147.     , 147.     , ..., 147.     , 126.     ,
           84.     ],
         [105.     , 147.     , 147.     , ..., 147.     , 126.     ,
           84.     ],
         ...,
         [105.     , 147.     , 147.     , ..., 147.     , 126.     ,
           84.     ],
         [ 90.     , 125.99987, 125.99987, ..., 126.     , 108.     ,
           72.     ],
         [ 60.     ,  83.99987,  83.99987, ...,  84.     ,  72.     ,
           48.     ]],

        [[ 75.     , 105.     , 105.     , ..., 105.     ,  90.     ,
           60.     ],
         [105.     , 147.     , 147.     , ..., 147.     , 126.     ,
           84.     ],
         [105.     , 147.     , 147.     , ..., 147.     , 126.     ,
           84.     ],
         ...,
         [105.     , 147.     , 147.     , ..., 147.     , 126.     ,
           84.     ],
         [ 90.     , 125.99987, 125.99987, ..., 126.     , 108.     ,
           72.     ],
         [ 60.     ,  83.99987,  83.99987, ...,  84.     ,  72.     ,
           48.     ]],

        [[ 75.     , 105.     , 105.     , ..., 105.     ,  90.     ,
           60.     ],
         [105.     , 147.     , 147.     , ..., 147.     , 126.     ,
           84.     ],
         [105.     , 147.     , 147.     , ..., 147.     , 126.     ,
           84.     ],
         ...,
         [105.     , 147.     , 147.     , ..., 147.     , 126.     ,
           84.     ],
         [ 90.     , 125.99987, 125.99987, ..., 126.     , 108.     ,
           72.     ],
         [ 60.     ,  83.99987,  83.99987, ...,  84.     ,  72.     ,
           48.     ]],

        ...,

        [[ 75.     , 105.     , 105.     , ..., 105.     ,  90.     ,
           60.     ],
         [105.     , 147.     , 147.     , ..., 147.     , 126.     ,
           84.     ],
         [105.     , 147.     , 147.     , ..., 147.     , 126.     ,
           84.     ],
         ...,
         [105.     , 147.     , 147.     , ..., 147.     , 126.     ,
           84.     ],
         [ 90.     , 125.99987, 125.99987, ..., 126.     , 108.     ,
           72.     ],
         [ 60.     ,  83.99987,  83.99987, ...,  84.     ,  72.     ,
           48.     ]],

        [[ 75.     , 105.     , 105.     , ..., 105.     ,  90.     ,
           60.     ],
         [105.     , 147.     , 147.     , ..., 147.     , 126.     ,
           84.     ],
         [105.     , 147.     , 147.     , ..., 147.     , 126.     ,
           84.     ],
         ...,
         [105.     , 147.     , 147.     , ..., 147.     , 126.     ,
           84.     ],
         [ 90.     , 125.99987, 125.99987, ..., 126.     , 108.     ,
           72.     ],
         [ 60.     ,  83.99987,  83.99987, ...,  84.     ,  72.     ,
           48.     ]],

        [[ 75.     , 105.     , 105.     , ..., 105.     ,  90.     ,
           60.     ],
         [105.     , 147.     , 147.     , ..., 147.     , 126.     ,
           84.     ],
         [105.     , 147.     , 147.     , ..., 147.     , 126.     ,
           84.     ],
         ...,
         [105.     , 147.     , 147.     , ..., 147.     , 126.     ,
           84.     ],
         [ 90.     , 125.99987, 125.99987, ..., 126.     , 108.     ,
           72.     ],
         [ 60.     ,  83.99987,  83.99987, ...,  84.     ,  72.     ,
           48.     ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [2], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[ 48.     ,  72.     ,  84.     , ...,  84.     ,  84.     ,
           60.     ],
         [ 72.     , 108.     , 126.     , ..., 126.     , 126.     ,
           90.     ],
         [ 84.     , 126.     , 147.     , ..., 147.     , 147.     ,
          105.     ],
         ...,
         [ 84.     , 126.     , 147.     , ..., 147.     , 147.     ,
          105.     ],
         [ 84.     , 125.99987, 146.99988, ..., 146.99739, 147.     ,
          105.     ],
         [ 60.     ,  89.99987, 104.99987, ..., 104.99739, 105.     ,
           75.     ]],

        [[ 48.     ,  72.     ,  84.     , ...,  84.     ,  84.     ,
           60.     ],
         [ 72.     , 108.     , 126.     , ..., 126.     , 126.     ,
           90.     ],
         [ 84.     , 126.     , 147.     , ..., 147.     , 147.     ,
          105.     ],
         ...,
         [ 84.     , 126.     , 147.     , ..., 147.     , 147.     ,
          105.     ],
         [ 84.     , 125.99987, 146.99988, ..., 146.99739, 147.     ,
          105.     ],
         [ 60.     ,  89.99987, 104.99987, ..., 104.99739, 105.     ,
           75.     ]],

        [[ 48.     ,  72.     ,  84.     , ...,  84.     ,  84.     ,
           60.     ],
         [ 72.     , 108.     , 126.     , ..., 126.     , 126.     ,
           90.     ],
         [ 84.     , 126.     , 147.     , ..., 147.     , 147.     ,
          105.     ],
         ...,
         [ 84.     , 126.     , 147.     , ..., 147.     , 147.     ,
          105.     ],
         [ 84.     , 125.99987, 146.99988, ..., 146.99739, 147.     ,
          105.     ],
         [ 60.     ,  89.99987, 104.99987, ..., 104.99739, 105.     ,
           75.     ]],

        ...,

        [[ 48.     ,  72.     ,  84.     , ...,  84.     ,  84.     ,
           60.     ],
         [ 72.     , 108.     , 126.     , ..., 126.     , 126.     ,
           90.     ],
         [ 84.     , 126.     , 147.     , ..., 147.     , 147.     ,
          105.     ],
         ...,
         [ 84.     , 126.     , 147.     , ..., 147.     , 147.     ,
          105.     ],
         [ 84.     , 125.99987, 146.99988, ..., 146.99739, 147.     ,
          105.     ],
         [ 60.     ,  89.99987, 104.99987, ..., 104.99739, 105.     ,
           75.     ]],

        [[ 48.     ,  72.     ,  84.     , ...,  84.     ,  84.     ,
           60.     ],
         [ 72.     , 108.     , 126.     , ..., 126.     , 126.     ,
           90.     ],
         [ 84.     , 126.     , 147.     , ..., 147.     , 147.     ,
          105.     ],
         ...,
         [ 84.     , 126.     , 147.     , ..., 147.     , 147.     ,
          105.     ],
         [ 84.     , 125.99987, 146.99988, ..., 146.99739, 147.     ,
          105.     ],
         [ 60.     ,  89.99987, 104.99987, ..., 104.99739, 105.     ,
           75.     ]],

        [[ 48.     ,  72.     ,  84.     , ...,  84.     ,  84.     ,
           60.     ],
         [ 72.     , 108.     , 126.     , ..., 126.     , 126.     ,
           90.     ],
         [ 84.     , 126.     , 147.     , ..., 147.     , 147.     ,
          105.     ],
         ...,
         [ 84.     , 126.     , 147.     , ..., 147.     , 147.     ,
          105.     ],
         [ 84.     , 125.99987, 146.99988, ..., 146.99739, 147.     ,
          105.     ],
         [ 60.     ,  89.99987, 104.99987, ..., 104.99739, 105.     ,
           75.     ]]]], dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [2], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[ 48.     ,  72.     ,  84.     , ...,  84.     ,  84.     ,
           60.     ],
         [ 72.     , 108.     , 126.     , ..., 126.     , 126.     ,
           90.     ],
         [ 84.     , 126.     , 147.     , ..., 147.     , 147.     ,
          105.     ],
         ...,
         [ 84.     , 126.     , 147.     , ..., 147.     , 147.     ,
          105.     ],
         [ 84.     , 125.99987, 146.99988, ..., 146.99739, 147.     ,
          105.     ],
         [ 60.     ,  89.99987, 104.99987, ..., 104.99739, 105.     ,
           75.     ]],

        [[ 48.     ,  72.     ,  84.     , ...,  84.     ,  84.     ,
           60.     ],
         [ 72.     , 108.     , 126.     , ..., 126.     , 126.     ,
           90.     ],
         [ 84.     , 126.     , 147.     , ..., 147.     , 147.     ,
          105.     ],
         ...,
         [ 84.     , 126.     , 147.     , ..., 147.     , 147.     ,
          105.     ],
         [ 84.     , 125.99987, 146.99988, ..., 146.99739, 147.     ,
          105.     ],
         [ 60.     ,  89.99987, 104.99987, ..., 104.99739, 105.     ,
           75.     ]],

        [[ 48.     ,  72.     ,  84.     , ...,  84.     ,  84.     ,
           60.     ],
         [ 72.     , 108.     , 126.     , ..., 126.     , 126.     ,
           90.     ],
         [ 84.     , 126.     , 147.     , ..., 147.     , 147.     ,
          105.     ],
         ...,
         [ 84.     , 126.     , 147.     , ..., 147.     , 147.     ,
          105.     ],
         [ 84.     , 125.99987, 146.99988, ..., 146.99739, 147.     ,
          105.     ],
         [ 60.     ,  89.99987, 104.99987, ..., 104.99739, 105.     ,
           75.     ]],

        ...,

        [[ 48.     ,  72.     ,  84.     , ...,  84.     ,  84.     ,
           60.     ],
         [ 72.     , 108.     , 126.     , ..., 126.     , 126.     ,
           90.     ],
         [ 84.     , 126.     , 147.     , ..., 147.     , 147.     ,
          105.     ],
         ...,
         [ 84.     , 126.     , 147.     , ..., 147.     , 147.     ,
          105.     ],
         [ 84.     , 125.99987, 146.99988, ..., 146.99739, 147.     ,
          105.     ],
         [ 60.     ,  89.99987, 104.99987, ..., 104.99739, 105.     ,
           75.     ]],

        [[ 48.     ,  72.     ,  84.     , ...,  84.     ,  84.     ,
           60.     ],
         [ 72.     , 108.     , 126.     , ..., 126.     , 126.     ,
           90.     ],
         [ 84.     , 126.     , 147.     , ..., 147.     , 147.     ,
          105.     ],
         ...,
         [ 84.     , 126.     , 147.     , ..., 147.     , 147.     ,
          105.     ],
         [ 84.     , 125.99987, 146.99988, ..., 146.99739, 147.     ,
          105.     ],
         [ 60.     ,  89.99987, 104.99987, ..., 104.99739, 105.     ,
           75.     ]],

        [[ 48.     ,  72.     ,  84.     , ...,  84.     ,  84.     ,
           60.     ],
         [ 72.     , 108.     , 126.     , ..., 126.     , 126.     ,
           90.     ],
         [ 84.     , 126.     , 147.     , ..., 147.     , 147.     ,
          105.     ],
         ...,
         [ 84.     , 126.     , 147.     , ..., 147.     , 147.     ,
          105.     ],
         [ 84.     , 125.99987, 146.99988, ..., 146.99739, 147.     ,
          105.     ],
         [ 60.     ,  89.99987, 104.99987, ..., 104.99739, 105.     ,
           75.     ]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [2], 'to': []}

generate models:2

analyse output arrays in iter:3

pre layer res:
5:sigmoid
{'name': 'sigmoid', 'output': array([[[[1.        , 1.        , 1.        , ..., 1.        ,
          1.        , 1.        ],
         [1.        , 1.        , 1.        , ..., 1.        ,
          1.        , 1.        ],
         [1.        , 1.        , 1.        , ..., 1.        ,
          1.        , 1.        ],
         ...,
         [1.        , 1.        , 1.        , ..., 1.        ,
          1.        , 1.        ],
         [1.        , 1.        , 1.        , ..., 1.        ,
          1.        , 1.        ],
         [1.        , 1.        , 1.        , ..., 1.        ,
          1.        , 1.        ]],

        [[1.        , 1.        , 1.        , ..., 1.        ,
          1.        , 1.        ],
         [1.        , 1.        , 1.        , ..., 1.        ,
          1.        , 1.        ],
         [1.        , 1.        , 1.        , ..., 1.        ,
          1.        , 1.        ],
         ...,
         [1.        , 1.        , 1.        , ..., 1.        ,
          1.        , 1.        ],
         [1.        , 1.        , 1.        , ..., 1.        ,
          1.        , 1.        ],
         [1.        , 1.        , 1.        , ..., 1.        ,
          1.        , 1.        ]],

        [[0.9999546 , 1.        , 1.        , ..., 1.        ,
          1.        , 1.        ],
         [0.99999774, 0.99999917, 0.9999938 , ..., 1.        ,
          1.        , 1.        ],
         [0.99999964, 1.        , 1.        , ..., 1.        ,
          1.        , 1.        ],
         ...,
         [1.        , 1.        , 1.        , ..., 1.        ,
          1.        , 1.        ],
         [1.        , 1.        , 1.        , ..., 1.        ,
          1.        , 1.        ],
         [1.        , 1.        , 1.        , ..., 1.        ,
          1.        , 1.        ]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [0], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[ 74.99994, 104.99995, 104.99987, ..., 105.     ,  90.     ,
           60.     ],
         [104.99995, 146.99994, 146.99988, ..., 147.     , 126.     ,
           84.     ],
         [105.     , 147.     , 147.     , ..., 147.     , 126.     ,
           84.     ],
         ...,
         [105.     , 147.     , 147.     , ..., 147.     , 126.     ,
           84.     ],
         [ 90.     , 126.     , 126.     , ..., 126.     , 108.     ,
           72.     ],
         [ 60.     ,  84.     ,  84.     , ...,  84.     ,  72.     ,
           48.     ]],

        [[ 74.99994, 104.99995, 104.99987, ..., 105.     ,  90.     ,
           60.     ],
         [104.99995, 146.99994, 146.99988, ..., 147.     , 126.     ,
           84.     ],
         [105.     , 147.     , 147.     , ..., 147.     , 126.     ,
           84.     ],
         ...,
         [105.     , 147.     , 147.     , ..., 147.     , 126.     ,
           84.     ],
         [ 90.     , 126.     , 126.     , ..., 126.     , 108.     ,
           72.     ],
         [ 60.     ,  84.     ,  84.     , ...,  84.     ,  72.     ,
           48.     ]],

        [[ 74.99994, 104.99995, 104.99987, ..., 105.     ,  90.     ,
           60.     ],
         [104.99995, 146.99994, 146.99988, ..., 147.     , 126.     ,
           84.     ],
         [105.     , 147.     , 147.     , ..., 147.     , 126.     ,
           84.     ],
         ...,
         [105.     , 147.     , 147.     , ..., 147.     , 126.     ,
           84.     ],
         [ 90.     , 126.     , 126.     , ..., 126.     , 108.     ,
           72.     ],
         [ 60.     ,  84.     ,  84.     , ...,  84.     ,  72.     ,
           48.     ]],

        ...,

        [[ 74.99994, 104.99995, 104.99987, ..., 105.     ,  90.     ,
           60.     ],
         [104.99995, 146.99994, 146.99988, ..., 147.     , 126.     ,
           84.     ],
         [105.     , 147.     , 147.     , ..., 147.     , 126.     ,
           84.     ],
         ...,
         [105.     , 147.     , 147.     , ..., 147.     , 126.     ,
           84.     ],
         [ 90.     , 126.     , 126.     , ..., 126.     , 108.     ,
           72.     ],
         [ 60.     ,  84.     ,  84.     , ...,  84.     ,  72.     ,
           48.     ]],

        [[ 74.99994, 104.99995, 104.99987, ..., 105.     ,  90.     ,
           60.     ],
         [104.99995, 146.99994, 146.99988, ..., 147.     , 126.     ,
           84.     ],
         [105.     , 147.     , 147.     , ..., 147.     , 126.     ,
           84.     ],
         ...,
         [105.     , 147.     , 147.     , ..., 147.     , 126.     ,
           84.     ],
         [ 90.     , 126.     , 126.     , ..., 126.     , 108.     ,
           72.     ],
         [ 60.     ,  84.     ,  84.     , ...,  84.     ,  72.     ,
           48.     ]],

        [[ 74.99994, 104.99995, 104.99987, ..., 105.     ,  90.     ,
           60.     ],
         [104.99995, 146.99994, 146.99988, ..., 147.     , 126.     ,
           84.     ],
         [105.     , 147.     , 147.     , ..., 147.     , 126.     ,
           84.     ],
         ...,
         [105.     , 147.     , 147.     , ..., 147.     , 126.     ,
           84.     ],
         [ 90.     , 126.     , 126.     , ..., 126.     , 108.     ,
           72.     ],
         [ 60.     ,  84.     ,  84.     , ...,  84.     ,  72.     ,
           48.     ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [5], 'to': [2]}
ms node:
{'name': 'conv2d', 'output': array([[[[ 47.999943,  71.99994 ,  83.99987 , ...,  84.      ,
           84.      ,  60.      ],
         [ 71.99994 , 107.99995 , 125.99987 , ..., 126.      ,
          126.      ,  90.      ],
         [ 83.999985, 125.99999 , 147.      , ..., 147.      ,
          147.      , 105.      ],
         ...,
         [ 84.      , 126.      , 147.      , ..., 147.      ,
          147.      , 105.      ],
         [ 84.      , 126.      , 147.      , ..., 147.      ,
          147.      , 105.      ],
         [ 60.      ,  90.      , 105.      , ..., 105.      ,
          105.      ,  75.      ]],

        [[ 47.999943,  71.99994 ,  83.99987 , ...,  84.      ,
           84.      ,  60.      ],
         [ 71.99994 , 107.99995 , 125.99987 , ..., 126.      ,
          126.      ,  90.      ],
         [ 83.999985, 125.99999 , 147.      , ..., 147.      ,
          147.      , 105.      ],
         ...,
         [ 84.      , 126.      , 147.      , ..., 147.      ,
          147.      , 105.      ],
         [ 84.      , 126.      , 147.      , ..., 147.      ,
          147.      , 105.      ],
         [ 60.      ,  90.      , 105.      , ..., 105.      ,
          105.      ,  75.      ]],

        [[ 47.999943,  71.99994 ,  83.99987 , ...,  84.      ,
           84.      ,  60.      ],
         [ 71.99994 , 107.99995 , 125.99987 , ..., 126.      ,
          126.      ,  90.      ],
         [ 83.999985, 125.99999 , 147.      , ..., 147.      ,
          147.      , 105.      ],
         ...,
         [ 84.      , 126.      , 147.      , ..., 147.      ,
          147.      , 105.      ],
         [ 84.      , 126.      , 147.      , ..., 147.      ,
          147.      , 105.      ],
         [ 60.      ,  90.      , 105.      , ..., 105.      ,
          105.      ,  75.      ]],

        ...,

        [[ 47.999943,  71.99994 ,  83.99987 , ...,  84.      ,
           84.      ,  60.      ],
         [ 71.99994 , 107.99995 , 125.99987 , ..., 126.      ,
          126.      ,  90.      ],
         [ 83.999985, 125.99999 , 147.      , ..., 147.      ,
          147.      , 105.      ],
         ...,
         [ 84.      , 126.      , 147.      , ..., 147.      ,
          147.      , 105.      ],
         [ 84.      , 126.      , 147.      , ..., 147.      ,
          147.      , 105.      ],
         [ 60.      ,  90.      , 105.      , ..., 105.      ,
          105.      ,  75.      ]],

        [[ 47.999943,  71.99994 ,  83.99987 , ...,  84.      ,
           84.      ,  60.      ],
         [ 71.99994 , 107.99995 , 125.99987 , ..., 126.      ,
          126.      ,  90.      ],
         [ 83.999985, 125.99999 , 147.      , ..., 147.      ,
          147.      , 105.      ],
         ...,
         [ 84.      , 126.      , 147.      , ..., 147.      ,
          147.      , 105.      ],
         [ 84.      , 126.      , 147.      , ..., 147.      ,
          147.      , 105.      ],
         [ 60.      ,  90.      , 105.      , ..., 105.      ,
          105.      ,  75.      ]],

        [[ 47.999943,  71.99994 ,  83.99987 , ...,  84.      ,
           84.      ,  60.      ],
         [ 71.99994 , 107.99995 , 125.99987 , ..., 126.      ,
          126.      ,  90.      ],
         [ 83.999985, 125.99999 , 147.      , ..., 147.      ,
          147.      , 105.      ],
         ...,
         [ 84.      , 126.      , 147.      , ..., 147.      ,
          147.      , 105.      ],
         [ 84.      , 126.      , 147.      , ..., 147.      ,
          147.      , 105.      ],
         [ 60.      ,  90.      , 105.      , ..., 105.      ,
          105.      ,  75.      ]]]], dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [5], 'to': [2]}
torch node:
{'name': 'conv2d', 'output': array([[[[ 47.999947,  71.99995 ,  83.99987 , ...,  84.      ,
           84.      ,  60.      ],
         [ 71.99995 , 107.99995 , 125.99987 , ..., 126.      ,
          126.      ,  90.      ],
         [ 83.99999 , 125.999985, 147.      , ..., 147.      ,
          147.      , 105.      ],
         ...,
         [ 84.      , 126.      , 147.      , ..., 147.      ,
          147.      , 105.      ],
         [ 84.      , 126.      , 147.      , ..., 147.      ,
          147.      , 105.      ],
         [ 60.      ,  90.      , 105.      , ..., 105.      ,
          105.      ,  75.      ]],

        [[ 47.999947,  71.99995 ,  83.99987 , ...,  84.      ,
           84.      ,  60.      ],
         [ 71.99995 , 107.99995 , 125.99987 , ..., 126.      ,
          126.      ,  90.      ],
         [ 83.99999 , 125.999985, 147.      , ..., 147.      ,
          147.      , 105.      ],
         ...,
         [ 84.      , 126.      , 147.      , ..., 147.      ,
          147.      , 105.      ],
         [ 84.      , 126.      , 147.      , ..., 147.      ,
          147.      , 105.      ],
         [ 60.      ,  90.      , 105.      , ..., 105.      ,
          105.      ,  75.      ]],

        [[ 47.999947,  71.99995 ,  83.99987 , ...,  84.      ,
           84.      ,  60.      ],
         [ 71.99995 , 107.99995 , 125.99987 , ..., 126.      ,
          126.      ,  90.      ],
         [ 83.99999 , 125.999985, 147.      , ..., 147.      ,
          147.      , 105.      ],
         ...,
         [ 84.      , 126.      , 147.      , ..., 147.      ,
          147.      , 105.      ],
         [ 84.      , 126.      , 147.      , ..., 147.      ,
          147.      , 105.      ],
         [ 60.      ,  90.      , 105.      , ..., 105.      ,
          105.      ,  75.      ]],

        ...,

        [[ 47.999947,  71.99995 ,  83.99987 , ...,  84.      ,
           84.      ,  60.      ],
         [ 71.99995 , 107.99995 , 125.99987 , ..., 126.      ,
          126.      ,  90.      ],
         [ 83.99999 , 125.999985, 147.      , ..., 147.      ,
          147.      , 105.      ],
         ...,
         [ 84.      , 126.      , 147.      , ..., 147.      ,
          147.      , 105.      ],
         [ 84.      , 126.      , 147.      , ..., 147.      ,
          147.      , 105.      ],
         [ 60.      ,  90.      , 105.      , ..., 105.      ,
          105.      ,  75.      ]],

        [[ 47.999947,  71.99995 ,  83.99987 , ...,  84.      ,
           84.      ,  60.      ],
         [ 71.99995 , 107.99995 , 125.99987 , ..., 126.      ,
          126.      ,  90.      ],
         [ 83.99999 , 125.999985, 147.      , ..., 147.      ,
          147.      , 105.      ],
         ...,
         [ 84.      , 126.      , 147.      , ..., 147.      ,
          147.      , 105.      ],
         [ 84.      , 126.      , 147.      , ..., 147.      ,
          147.      , 105.      ],
         [ 60.      ,  90.      , 105.      , ..., 105.      ,
          105.      ,  75.      ]],

        [[ 47.999947,  71.99995 ,  83.99987 , ...,  84.      ,
           84.      ,  60.      ],
         [ 71.99995 , 107.99995 , 125.99987 , ..., 126.      ,
          126.      ,  90.      ],
         [ 83.99999 , 125.999985, 147.      , ..., 147.      ,
          147.      , 105.      ],
         ...,
         [ 84.      , 126.      , 147.      , ..., 147.      ,
          147.      , 105.      ],
         [ 84.      , 126.      , 147.      , ..., 147.      ,
          147.      , 105.      ],
         [ 60.      ,  90.      , 105.      , ..., 105.      ,
          105.      ,  75.      ]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [5], 'to': [2]}

generate models:4

analyse output arrays in iter:4

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[170., 168., 177., ..., 162., 158., 157.],
         [168., 172., 171., ..., 159., 156., 154.],
         [154., 149., 129., ..., 161., 157., 154.],
         ...,
         [ 74.,  76.,  78., ...,  71.,  68.,  61.],
         [ 68.,  69.,  72., ...,  76.,  71.,  71.],
         [ 67.,  68.,  69., ...,  75.,  71.,  73.]],

        [[180., 178., 185., ..., 179., 178., 177.],
         [181., 185., 183., ..., 177., 176., 174.],
         [170., 165., 144., ..., 178., 177., 174.],
         ...,
         [ 84.,  85.,  85., ...,  75.,  72.,  65.],
         [ 76.,  77.,  79., ...,  80.,  75.,  75.],
         [ 75.,  76.,  75., ...,  79.,  75.,  77.]],

        [[198., 196., 203., ..., 215., 214., 212.],
         [198., 201., 200., ..., 212., 211., 209.],
         [186., 181., 162., ..., 214., 212., 209.],
         ...,
         [ 80.,  81.,  82., ...,  78.,  75.,  68.],
         [ 77.,  78.,  78., ...,  83.,  78.,  78.],
         [ 78.,  79.,  76., ...,  82.,  78.,  80.]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[10842., 15347., 15391., ..., 19383., 16438., 10901.],
         [13700., 19474., 19551., ..., 26927., 22904., 15172.],
         [10581., 15133., 15130., ..., 24359., 21212., 14216.],
         ...,
         [ 7458., 10737., 10211., ...,  4741.,  4344.,  3168.],
         [ 6946.,  9769.,  9813., ...,  5549.,  4813.,  3276.],
         [ 4725.,  6801.,  7083., ...,  5297.,  4497.,  3005.]],

        [[10842., 15347., 15391., ..., 19383., 16438., 10901.],
         [13700., 19474., 19551., ..., 26927., 22904., 15172.],
         [10581., 15133., 15130., ..., 24359., 21212., 14216.],
         ...,
         [ 7458., 10737., 10211., ...,  4741.,  4344.,  3168.],
         [ 6946.,  9769.,  9813., ...,  5549.,  4813.,  3276.],
         [ 4725.,  6801.,  7083., ...,  5297.,  4497.,  3005.]],

        [[10842., 15347., 15391., ..., 19383., 16438., 10901.],
         [13700., 19474., 19551., ..., 26927., 22904., 15172.],
         [10581., 15133., 15130., ..., 24359., 21212., 14216.],
         ...,
         [ 7458., 10737., 10211., ...,  4741.,  4344.,  3168.],
         [ 6946.,  9769.,  9813., ...,  5549.,  4813.,  3276.],
         [ 4725.,  6801.,  7083., ...,  5297.,  4497.,  3005.]],

        ...,

        [[10842., 15347., 15391., ..., 19383., 16438., 10901.],
         [13700., 19474., 19551., ..., 26927., 22904., 15172.],
         [10581., 15133., 15130., ..., 24359., 21212., 14216.],
         ...,
         [ 7458., 10737., 10211., ...,  4741.,  4344.,  3168.],
         [ 6946.,  9769.,  9813., ...,  5549.,  4813.,  3276.],
         [ 4725.,  6801.,  7083., ...,  5297.,  4497.,  3005.]],

        [[10842., 15347., 15391., ..., 19383., 16438., 10901.],
         [13700., 19474., 19551., ..., 26927., 22904., 15172.],
         [10581., 15133., 15130., ..., 24359., 21212., 14216.],
         ...,
         [ 7458., 10737., 10211., ...,  4741.,  4344.,  3168.],
         [ 6946.,  9769.,  9813., ...,  5549.,  4813.,  3276.],
         [ 4725.,  6801.,  7083., ...,  5297.,  4497.,  3005.]],

        [[10842., 15347., 15391., ..., 19383., 16438., 10901.],
         [13700., 19474., 19551., ..., 26927., 22904., 15172.],
         [10581., 15133., 15130., ..., 24359., 21212., 14216.],
         ...,
         [ 7458., 10737., 10211., ...,  4741.,  4344.,  3168.],
         [ 6946.,  9769.,  9813., ...,  5549.,  4813.,  3276.],
         [ 4725.,  6801.,  7083., ...,  5297.,  4497.,  3005.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [0], 'to': [5]}
ms node:
{'name': 'conv2d', 'output': array([[[[ 7489., 11227., 13161., ..., 15640., 15435., 10952.],
         [ 9879., 14855., 17485., ..., 23326., 23018., 16332.],
         [ 9752., 14709., 17400., ..., 25843., 26176., 18739.],
         ...,
         [ 5959.,  9734., 10743., ...,  4473.,  4971.,  3592.],
         [ 6146.,  9264., 10599., ...,  5781.,  6074.,  4474.],
         [ 4648.,  7169.,  8592., ...,  5438.,  5355.,  3819.]],

        [[ 7489., 11227., 13161., ..., 15640., 15435., 10952.],
         [ 9879., 14855., 17485., ..., 23326., 23018., 16332.],
         [ 9752., 14709., 17400., ..., 25843., 26176., 18739.],
         ...,
         [ 5959.,  9734., 10743., ...,  4473.,  4971.,  3592.],
         [ 6146.,  9264., 10599., ...,  5781.,  6074.,  4474.],
         [ 4648.,  7169.,  8592., ...,  5438.,  5355.,  3819.]],

        [[ 7489., 11227., 13161., ..., 15640., 15435., 10952.],
         [ 9879., 14855., 17485., ..., 23326., 23018., 16332.],
         [ 9752., 14709., 17400., ..., 25843., 26176., 18739.],
         ...,
         [ 5959.,  9734., 10743., ...,  4473.,  4971.,  3592.],
         [ 6146.,  9264., 10599., ...,  5781.,  6074.,  4474.],
         [ 4648.,  7169.,  8592., ...,  5438.,  5355.,  3819.]],

        ...,

        [[ 7489., 11227., 13161., ..., 15640., 15435., 10952.],
         [ 9879., 14855., 17485., ..., 23326., 23018., 16332.],
         [ 9752., 14709., 17400., ..., 25843., 26176., 18739.],
         ...,
         [ 5959.,  9734., 10743., ...,  4473.,  4971.,  3592.],
         [ 6146.,  9264., 10599., ...,  5781.,  6074.,  4474.],
         [ 4648.,  7169.,  8592., ...,  5438.,  5355.,  3819.]],

        [[ 7489., 11227., 13161., ..., 15640., 15435., 10952.],
         [ 9879., 14855., 17485., ..., 23326., 23018., 16332.],
         [ 9752., 14709., 17400., ..., 25843., 26176., 18739.],
         ...,
         [ 5959.,  9734., 10743., ...,  4473.,  4971.,  3592.],
         [ 6146.,  9264., 10599., ...,  5781.,  6074.,  4474.],
         [ 4648.,  7169.,  8592., ...,  5438.,  5355.,  3819.]],

        [[ 7489., 11227., 13161., ..., 15640., 15435., 10952.],
         [ 9879., 14855., 17485., ..., 23326., 23018., 16332.],
         [ 9752., 14709., 17400., ..., 25843., 26176., 18739.],
         ...,
         [ 5959.,  9734., 10743., ...,  4473.,  4971.,  3592.],
         [ 6146.,  9264., 10599., ...,  5781.,  6074.,  4474.],
         [ 4648.,  7169.,  8592., ...,  5438.,  5355.,  3819.]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [0], 'to': [5]}
torch node:
{'name': 'conv2d', 'output': array([[[[ 7489., 11227., 13161., ..., 15640., 15435., 10952.],
         [ 9879., 14855., 17485., ..., 23326., 23018., 16332.],
         [ 9752., 14709., 17400., ..., 25843., 26176., 18739.],
         ...,
         [ 5959.,  9734., 10743., ...,  4473.,  4971.,  3592.],
         [ 6146.,  9264., 10599., ...,  5781.,  6074.,  4474.],
         [ 4648.,  7169.,  8592., ...,  5438.,  5355.,  3819.]],

        [[ 7489., 11227., 13161., ..., 15640., 15435., 10952.],
         [ 9879., 14855., 17485., ..., 23326., 23018., 16332.],
         [ 9752., 14709., 17400., ..., 25843., 26176., 18739.],
         ...,
         [ 5959.,  9734., 10743., ...,  4473.,  4971.,  3592.],
         [ 6146.,  9264., 10599., ...,  5781.,  6074.,  4474.],
         [ 4648.,  7169.,  8592., ...,  5438.,  5355.,  3819.]],

        [[ 7489., 11227., 13161., ..., 15640., 15435., 10952.],
         [ 9879., 14855., 17485., ..., 23326., 23018., 16332.],
         [ 9752., 14709., 17400., ..., 25843., 26176., 18739.],
         ...,
         [ 5959.,  9734., 10743., ...,  4473.,  4971.,  3592.],
         [ 6146.,  9264., 10599., ...,  5781.,  6074.,  4474.],
         [ 4648.,  7169.,  8592., ...,  5438.,  5355.,  3819.]],

        ...,

        [[ 7489., 11227., 13161., ..., 15640., 15435., 10952.],
         [ 9879., 14855., 17485., ..., 23326., 23018., 16332.],
         [ 9752., 14709., 17400., ..., 25843., 26176., 18739.],
         ...,
         [ 5959.,  9734., 10743., ...,  4473.,  4971.,  3592.],
         [ 6146.,  9264., 10599., ...,  5781.,  6074.,  4474.],
         [ 4648.,  7169.,  8592., ...,  5438.,  5355.,  3819.]],

        [[ 7489., 11227., 13161., ..., 15640., 15435., 10952.],
         [ 9879., 14855., 17485., ..., 23326., 23018., 16332.],
         [ 9752., 14709., 17400., ..., 25843., 26176., 18739.],
         ...,
         [ 5959.,  9734., 10743., ...,  4473.,  4971.,  3592.],
         [ 6146.,  9264., 10599., ...,  5781.,  6074.,  4474.],
         [ 4648.,  7169.,  8592., ...,  5438.,  5355.,  3819.]],

        [[ 7489., 11227., 13161., ..., 15640., 15435., 10952.],
         [ 9879., 14855., 17485., ..., 23326., 23018., 16332.],
         [ 9752., 14709., 17400., ..., 25843., 26176., 18739.],
         ...,
         [ 5959.,  9734., 10743., ...,  4473.,  4971.,  3592.],
         [ 6146.,  9264., 10599., ...,  5781.,  6074.,  4474.],
         [ 4648.,  7169.,  8592., ...,  5438.,  5355.,  3819.]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [0], 'to': [5]}

generate models:5

analyse output arrays in iter:8

pre layer res:
4:transpose
{'name': 'transpose', 'output': array([[[[268., 266., 256., ..., 348., 388., 386.],
         [262., 258., 254., ..., 342., 378., 362.],
         [256., 256., 256., ..., 310., 318., 336.],
         ...,
         [254., 254., 252., ...,  54.,  60.,  62.],
         [254., 254., 252., ...,  58.,  60.,  64.],
         [256., 256., 252., ...,  56.,  60.,  64.]],

        [[372., 378., 370., ..., 416., 442., 434.],
         [368., 372., 364., ..., 412., 430., 416.],
         [364., 372., 364., ..., 378., 392., 402.],
         ...,
         [362., 366., 362., ..., 188., 190., 188.],
         [362., 366., 362., ..., 192., 192., 188.],
         [364., 368., 360., ..., 188., 190., 188.]],

        [[446., 456., 452., ..., 470., 488., 474.],
         [440., 448., 446., ..., 458., 478., 460.],
         [436., 448., 446., ..., 432., 450., 454.],
         ...,
         [444., 448., 444., ..., 272., 276., 272.],
         [444., 448., 444., ..., 274., 278., 274.],
         [446., 450., 442., ..., 272., 280., 276.]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [21], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[26562., 36408., 32698., ..., 33886., 29878., 21802.],
         [37156., 51050., 45856., ..., 46270., 41634., 31268.],
         [36894., 51066., 46146., ..., 46370., 43654., 32434.],
         ...,
         [37534., 52434., 49632., ..., 24824., 22932., 16494.],
         [31958., 44706., 42470., ..., 21198., 17594., 11784.],
         [21264., 29760., 28464., ..., 14794., 12330.,  8162.]],

        [[26562., 36408., 32698., ..., 33886., 29878., 21802.],
         [37156., 51050., 45856., ..., 46270., 41634., 31268.],
         [36894., 51066., 46146., ..., 46370., 43654., 32434.],
         ...,
         [37534., 52434., 49632., ..., 24824., 22932., 16494.],
         [31958., 44706., 42470., ..., 21198., 17594., 11784.],
         [21264., 29760., 28464., ..., 14794., 12330.,  8162.]],

        [[26562., 36408., 32698., ..., 33886., 29878., 21802.],
         [37156., 51050., 45856., ..., 46270., 41634., 31268.],
         [36894., 51066., 46146., ..., 46370., 43654., 32434.],
         ...,
         [37534., 52434., 49632., ..., 24824., 22932., 16494.],
         [31958., 44706., 42470., ..., 21198., 17594., 11784.],
         [21264., 29760., 28464., ..., 14794., 12330.,  8162.]],

        ...,

        [[26562., 36408., 32698., ..., 33886., 29878., 21802.],
         [37156., 51050., 45856., ..., 46270., 41634., 31268.],
         [36894., 51066., 46146., ..., 46370., 43654., 32434.],
         ...,
         [37534., 52434., 49632., ..., 24824., 22932., 16494.],
         [31958., 44706., 42470., ..., 21198., 17594., 11784.],
         [21264., 29760., 28464., ..., 14794., 12330.,  8162.]],

        [[26562., 36408., 32698., ..., 33886., 29878., 21802.],
         [37156., 51050., 45856., ..., 46270., 41634., 31268.],
         [36894., 51066., 46146., ..., 46370., 43654., 32434.],
         ...,
         [37534., 52434., 49632., ..., 24824., 22932., 16494.],
         [31958., 44706., 42470., ..., 21198., 17594., 11784.],
         [21264., 29760., 28464., ..., 14794., 12330.,  8162.]],

        [[26562., 36408., 32698., ..., 33886., 29878., 21802.],
         [37156., 51050., 45856., ..., 46270., 41634., 31268.],
         [36894., 51066., 46146., ..., 46370., 43654., 32434.],
         ...,
         [37534., 52434., 49632., ..., 24824., 22932., 16494.],
         [31958., 44706., 42470., ..., 21198., 17594., 11784.],
         [21264., 29760., 28464., ..., 14794., 12330.,  8162.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [4], 'to': [7]}
ms node:
{'name': 'conv2d', 'output': array([[[[17094., 25536., 27558., ..., 28322., 29104., 21404.],
         [25562., 38176., 41356., ..., 38976., 40582., 30658.],
         [29688., 44416., 48462., ..., 45076., 47902., 37330.],
         ...,
         [30148., 45084., 51846., ..., 24260., 29172., 22932.],
         [29936., 44814., 51648., ..., 24284., 24934., 17760.],
         [21272., 31880., 36864., ..., 18558., 17620., 12288.]],

        [[17094., 25536., 27558., ..., 28322., 29104., 21404.],
         [25562., 38176., 41356., ..., 38976., 40582., 30658.],
         [29688., 44416., 48462., ..., 45076., 47902., 37330.],
         ...,
         [30148., 45084., 51846., ..., 24260., 29172., 22932.],
         [29936., 44814., 51648., ..., 24284., 24934., 17760.],
         [21272., 31880., 36864., ..., 18558., 17620., 12288.]],

        [[17094., 25536., 27558., ..., 28322., 29104., 21404.],
         [25562., 38176., 41356., ..., 38976., 40582., 30658.],
         [29688., 44416., 48462., ..., 45076., 47902., 37330.],
         ...,
         [30148., 45084., 51846., ..., 24260., 29172., 22932.],
         [29936., 44814., 51648., ..., 24284., 24934., 17760.],
         [21272., 31880., 36864., ..., 18558., 17620., 12288.]],

        ...,

        [[17094., 25536., 27558., ..., 28322., 29104., 21404.],
         [25562., 38176., 41356., ..., 38976., 40582., 30658.],
         [29688., 44416., 48462., ..., 45076., 47902., 37330.],
         ...,
         [30148., 45084., 51846., ..., 24260., 29172., 22932.],
         [29936., 44814., 51648., ..., 24284., 24934., 17760.],
         [21272., 31880., 36864., ..., 18558., 17620., 12288.]],

        [[17094., 25536., 27558., ..., 28322., 29104., 21404.],
         [25562., 38176., 41356., ..., 38976., 40582., 30658.],
         [29688., 44416., 48462., ..., 45076., 47902., 37330.],
         ...,
         [30148., 45084., 51846., ..., 24260., 29172., 22932.],
         [29936., 44814., 51648., ..., 24284., 24934., 17760.],
         [21272., 31880., 36864., ..., 18558., 17620., 12288.]],

        [[17094., 25536., 27558., ..., 28322., 29104., 21404.],
         [25562., 38176., 41356., ..., 38976., 40582., 30658.],
         [29688., 44416., 48462., ..., 45076., 47902., 37330.],
         ...,
         [30148., 45084., 51846., ..., 24260., 29172., 22932.],
         [29936., 44814., 51648., ..., 24284., 24934., 17760.],
         [21272., 31880., 36864., ..., 18558., 17620., 12288.]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [4], 'to': [7]}
torch node:
{'name': 'conv2d', 'output': array([[[[17094., 25536., 27558., ..., 28322., 29104., 21404.],
         [25562., 38176., 41356., ..., 38976., 40582., 30658.],
         [29688., 44416., 48462., ..., 45076., 47902., 37330.],
         ...,
         [30148., 45084., 51846., ..., 24260., 29172., 22932.],
         [29936., 44814., 51648., ..., 24284., 24934., 17760.],
         [21272., 31880., 36864., ..., 18558., 17620., 12288.]],

        [[17094., 25536., 27558., ..., 28322., 29104., 21404.],
         [25562., 38176., 41356., ..., 38976., 40582., 30658.],
         [29688., 44416., 48462., ..., 45076., 47902., 37330.],
         ...,
         [30148., 45084., 51846., ..., 24260., 29172., 22932.],
         [29936., 44814., 51648., ..., 24284., 24934., 17760.],
         [21272., 31880., 36864., ..., 18558., 17620., 12288.]],

        [[17094., 25536., 27558., ..., 28322., 29104., 21404.],
         [25562., 38176., 41356., ..., 38976., 40582., 30658.],
         [29688., 44416., 48462., ..., 45076., 47902., 37330.],
         ...,
         [30148., 45084., 51846., ..., 24260., 29172., 22932.],
         [29936., 44814., 51648., ..., 24284., 24934., 17760.],
         [21272., 31880., 36864., ..., 18558., 17620., 12288.]],

        ...,

        [[17094., 25536., 27558., ..., 28322., 29104., 21404.],
         [25562., 38176., 41356., ..., 38976., 40582., 30658.],
         [29688., 44416., 48462., ..., 45076., 47902., 37330.],
         ...,
         [30148., 45084., 51846., ..., 24260., 29172., 22932.],
         [29936., 44814., 51648., ..., 24284., 24934., 17760.],
         [21272., 31880., 36864., ..., 18558., 17620., 12288.]],

        [[17094., 25536., 27558., ..., 28322., 29104., 21404.],
         [25562., 38176., 41356., ..., 38976., 40582., 30658.],
         [29688., 44416., 48462., ..., 45076., 47902., 37330.],
         ...,
         [30148., 45084., 51846., ..., 24260., 29172., 22932.],
         [29936., 44814., 51648., ..., 24284., 24934., 17760.],
         [21272., 31880., 36864., ..., 18558., 17620., 12288.]],

        [[17094., 25536., 27558., ..., 28322., 29104., 21404.],
         [25562., 38176., 41356., ..., 38976., 40582., 30658.],
         [29688., 44416., 48462., ..., 45076., 47902., 37330.],
         ...,
         [30148., 45084., 51846., ..., 24260., 29172., 22932.],
         [29936., 44814., 51648., ..., 24284., 24934., 17760.],
         [21272., 31880., 36864., ..., 18558., 17620., 12288.]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [4], 'to': [7]}

generate models:9

final statics:
total operators:28
tensorflow --> nums:4,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:4
mindspore --> 
torch --> 

generate models:10

analyse output arrays in iter:10

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[53., 54., 56., ..., 47., 41., 24.],
         [46., 53., 54., ..., 42., 39., 28.],
         [45., 50., 46., ..., 38., 36., 29.],
         ...,
         [71., 74., 80., ..., 51., 46., 49.],
         [75., 79., 81., ..., 61., 64., 48.],
         [85., 85., 86., ..., 61., 64., 49.]],

        [[65., 63., 60., ..., 51., 45., 28.],
         [59., 62., 59., ..., 46., 43., 32.],
         [59., 60., 52., ..., 42., 40., 33.],
         ...,
         [83., 83., 85., ..., 54., 49., 50.],
         [82., 85., 85., ..., 65., 67., 50.],
         [83., 84., 86., ..., 65., 67., 50.]],

        [[53., 52., 50., ..., 50., 44., 27.],
         [41., 45., 44., ..., 45., 42., 31.],
         [38., 41., 34., ..., 41., 39., 32.],
         ...,
         [66., 66., 67., ..., 33., 34., 41.],
         [67., 69., 67., ..., 41., 48., 41.],
         [71., 71., 70., ..., 39., 46., 41.]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [], 'to': [1, 9]}
tf node:
{'name': 'conv2d', 'output': array([[[[ 4098.,  6441.,  7005., ...,  5429.,  3987.,  2591.],
         [ 6041.,  9204.,  9900., ...,  7792.,  5664.,  3711.],
         [ 6422.,  9653., 10174., ...,  8269.,  6005.,  3951.],
         ...,
         [ 7888., 11328., 11524., ...,  9442.,  7496.,  4615.],
         [ 6933.,  9992., 10235., ...,  8028.,  6422.,  3951.],
         [ 4656.,  6767.,  6998., ...,  5263.,  4236.,  2595.]],

        [[ 4098.,  6441.,  7005., ...,  5429.,  3987.,  2591.],
         [ 6041.,  9204.,  9900., ...,  7792.,  5664.,  3711.],
         [ 6422.,  9653., 10174., ...,  8269.,  6005.,  3951.],
         ...,
         [ 7888., 11328., 11524., ...,  9442.,  7496.,  4615.],
         [ 6933.,  9992., 10235., ...,  8028.,  6422.,  3951.],
         [ 4656.,  6767.,  6998., ...,  5263.,  4236.,  2595.]],

        [[ 4098.,  6441.,  7005., ...,  5429.,  3987.,  2591.],
         [ 6041.,  9204.,  9900., ...,  7792.,  5664.,  3711.],
         [ 6422.,  9653., 10174., ...,  8269.,  6005.,  3951.],
         ...,
         [ 7888., 11328., 11524., ...,  9442.,  7496.,  4615.],
         [ 6933.,  9992., 10235., ...,  8028.,  6422.,  3951.],
         [ 4656.,  6767.,  6998., ...,  5263.,  4236.,  2595.]],

        ...,

        [[ 4098.,  6441.,  7005., ...,  5429.,  3987.,  2591.],
         [ 6041.,  9204.,  9900., ...,  7792.,  5664.,  3711.],
         [ 6422.,  9653., 10174., ...,  8269.,  6005.,  3951.],
         ...,
         [ 7888., 11328., 11524., ...,  9442.,  7496.,  4615.],
         [ 6933.,  9992., 10235., ...,  8028.,  6422.,  3951.],
         [ 4656.,  6767.,  6998., ...,  5263.,  4236.,  2595.]],

        [[ 4098.,  6441.,  7005., ...,  5429.,  3987.,  2591.],
         [ 6041.,  9204.,  9900., ...,  7792.,  5664.,  3711.],
         [ 6422.,  9653., 10174., ...,  8269.,  6005.,  3951.],
         ...,
         [ 7888., 11328., 11524., ...,  9442.,  7496.,  4615.],
         [ 6933.,  9992., 10235., ...,  8028.,  6422.,  3951.],
         [ 4656.,  6767.,  6998., ...,  5263.,  4236.,  2595.]],

        [[ 4098.,  6441.,  7005., ...,  5429.,  3987.,  2591.],
         [ 6041.,  9204.,  9900., ...,  7792.,  5664.,  3711.],
         [ 6422.,  9653., 10174., ...,  8269.,  6005.,  3951.],
         ...,
         [ 7888., 11328., 11524., ...,  9442.,  7496.,  4615.],
         [ 6933.,  9992., 10235., ...,  8028.,  6422.,  3951.],
         [ 4656.,  6767.,  6998., ...,  5263.,  4236.,  2595.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [0], 'to': [19]}
ms node:
{'name': 'conv2d', 'output': array([[[[ 2502.,  4161.,  5416., ...,  4765.,  3782.,  2597.],
         [ 4012.,  6421.,  8212., ...,  7386.,  5906.,  3992.],
         [ 4893.,  7646.,  9654., ...,  8928.,  7207.,  4742.],
         ...,
         [ 6240.,  9579., 11415., ...,  9747.,  8958.,  6184.],
         [ 6332.,  9837., 11748., ...,  9847.,  9045.,  6154.],
         [ 4581.,  7126.,  8580., ...,  6869.,  6359.,  4283.]],

        [[ 2502.,  4161.,  5416., ...,  4765.,  3782.,  2597.],
         [ 4012.,  6421.,  8212., ...,  7386.,  5906.,  3992.],
         [ 4893.,  7646.,  9654., ...,  8928.,  7207.,  4742.],
         ...,
         [ 6240.,  9579., 11415., ...,  9747.,  8958.,  6184.],
         [ 6332.,  9837., 11748., ...,  9847.,  9045.,  6154.],
         [ 4581.,  7126.,  8580., ...,  6869.,  6359.,  4283.]],

        [[ 2502.,  4161.,  5416., ...,  4765.,  3782.,  2597.],
         [ 4012.,  6421.,  8212., ...,  7386.,  5906.,  3992.],
         [ 4893.,  7646.,  9654., ...,  8928.,  7207.,  4742.],
         ...,
         [ 6240.,  9579., 11415., ...,  9747.,  8958.,  6184.],
         [ 6332.,  9837., 11748., ...,  9847.,  9045.,  6154.],
         [ 4581.,  7126.,  8580., ...,  6869.,  6359.,  4283.]],

        ...,

        [[ 2502.,  4161.,  5416., ...,  4765.,  3782.,  2597.],
         [ 4012.,  6421.,  8212., ...,  7386.,  5906.,  3992.],
         [ 4893.,  7646.,  9654., ...,  8928.,  7207.,  4742.],
         ...,
         [ 6240.,  9579., 11415., ...,  9747.,  8958.,  6184.],
         [ 6332.,  9837., 11748., ...,  9847.,  9045.,  6154.],
         [ 4581.,  7126.,  8580., ...,  6869.,  6359.,  4283.]],

        [[ 2502.,  4161.,  5416., ...,  4765.,  3782.,  2597.],
         [ 4012.,  6421.,  8212., ...,  7386.,  5906.,  3992.],
         [ 4893.,  7646.,  9654., ...,  8928.,  7207.,  4742.],
         ...,
         [ 6240.,  9579., 11415., ...,  9747.,  8958.,  6184.],
         [ 6332.,  9837., 11748., ...,  9847.,  9045.,  6154.],
         [ 4581.,  7126.,  8580., ...,  6869.,  6359.,  4283.]],

        [[ 2502.,  4161.,  5416., ...,  4765.,  3782.,  2597.],
         [ 4012.,  6421.,  8212., ...,  7386.,  5906.,  3992.],
         [ 4893.,  7646.,  9654., ...,  8928.,  7207.,  4742.],
         ...,
         [ 6240.,  9579., 11415., ...,  9747.,  8958.,  6184.],
         [ 6332.,  9837., 11748., ...,  9847.,  9045.,  6154.],
         [ 4581.,  7126.,  8580., ...,  6869.,  6359.,  4283.]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [0], 'to': [19]}
torch node:
{'name': 'conv2d', 'output': array([[[[ 2502.,  4161.,  5416., ...,  4765.,  3782.,  2597.],
         [ 4012.,  6421.,  8212., ...,  7386.,  5906.,  3992.],
         [ 4893.,  7646.,  9654., ...,  8928.,  7207.,  4742.],
         ...,
         [ 6240.,  9579., 11415., ...,  9747.,  8958.,  6184.],
         [ 6332.,  9837., 11748., ...,  9847.,  9045.,  6154.],
         [ 4581.,  7126.,  8580., ...,  6869.,  6359.,  4283.]],

        [[ 2502.,  4161.,  5416., ...,  4765.,  3782.,  2597.],
         [ 4012.,  6421.,  8212., ...,  7386.,  5906.,  3992.],
         [ 4893.,  7646.,  9654., ...,  8928.,  7207.,  4742.],
         ...,
         [ 6240.,  9579., 11415., ...,  9747.,  8958.,  6184.],
         [ 6332.,  9837., 11748., ...,  9847.,  9045.,  6154.],
         [ 4581.,  7126.,  8580., ...,  6869.,  6359.,  4283.]],

        [[ 2502.,  4161.,  5416., ...,  4765.,  3782.,  2597.],
         [ 4012.,  6421.,  8212., ...,  7386.,  5906.,  3992.],
         [ 4893.,  7646.,  9654., ...,  8928.,  7207.,  4742.],
         ...,
         [ 6240.,  9579., 11415., ...,  9747.,  8958.,  6184.],
         [ 6332.,  9837., 11748., ...,  9847.,  9045.,  6154.],
         [ 4581.,  7126.,  8580., ...,  6869.,  6359.,  4283.]],

        ...,

        [[ 2502.,  4161.,  5416., ...,  4765.,  3782.,  2597.],
         [ 4012.,  6421.,  8212., ...,  7386.,  5906.,  3992.],
         [ 4893.,  7646.,  9654., ...,  8928.,  7207.,  4742.],
         ...,
         [ 6240.,  9579., 11415., ...,  9747.,  8958.,  6184.],
         [ 6332.,  9837., 11748., ...,  9847.,  9045.,  6154.],
         [ 4581.,  7126.,  8580., ...,  6869.,  6359.,  4283.]],

        [[ 2502.,  4161.,  5416., ...,  4765.,  3782.,  2597.],
         [ 4012.,  6421.,  8212., ...,  7386.,  5906.,  3992.],
         [ 4893.,  7646.,  9654., ...,  8928.,  7207.,  4742.],
         ...,
         [ 6240.,  9579., 11415., ...,  9747.,  8958.,  6184.],
         [ 6332.,  9837., 11748., ...,  9847.,  9045.,  6154.],
         [ 4581.,  7126.,  8580., ...,  6869.,  6359.,  4283.]],

        [[ 2502.,  4161.,  5416., ...,  4765.,  3782.,  2597.],
         [ 4012.,  6421.,  8212., ...,  7386.,  5906.,  3992.],
         [ 4893.,  7646.,  9654., ...,  8928.,  7207.,  4742.],
         ...,
         [ 6240.,  9579., 11415., ...,  9747.,  8958.,  6184.],
         [ 6332.,  9837., 11748., ...,  9847.,  9045.,  6154.],
         [ 4581.,  7126.,  8580., ...,  6869.,  6359.,  4283.]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [0], 'to': [19]}

generate models:11

analyse output arrays in iter:13

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[ 17.,  17.,  17., ...,  23.,  22.,  19.],
         [ 18.,  18.,  18., ...,  24.,  23.,  22.],
         [ 18.,  18.,  19., ...,  24.,  23.,  23.],
         ...,
         [217., 226., 210., ...,  33.,  32.,  33.],
         [219., 222., 214., ...,  35.,  34.,  33.],
         [210., 221., 215., ...,  36.,  34.,  32.]],

        [[  3.,   3.,   2., ...,  13.,  12.,   9.],
         [  4.,   4.,   4., ...,  14.,  13.,  12.],
         [  4.,   4.,   5., ...,  14.,  13.,  13.],
         ...,
         [214., 219., 201., ...,  24.,  23.,  24.],
         [215., 215., 208., ...,  26.,  25.,  24.],
         [208., 216., 212., ...,  27.,  25.,  23.]],

        [[  2.,   2.,   1., ...,  11.,  10.,   7.],
         [  3.,   3.,   3., ...,  12.,  11.,  10.],
         [  3.,   3.,   4., ...,  12.,  11.,  11.],
         ...,
         [223., 227., 213., ...,  17.,  16.,  17.],
         [230., 229., 225., ...,  19.,  18.,  17.],
         [223., 229., 227., ...,  20.,  18.,  16.]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[  661.,   989.,  1175., ...,  1890.,  1552.,   994.],
         [  958.,  1489.,  2002., ...,  2741.,  2266.,  1459.],
         [ 1005.,  1584.,  2180., ...,  2890.,  2406.,  1561.],
         ...,
         [19130., 25276., 23307., ...,  6188.,  5198.,  3362.],
         [18896., 26008., 25779., ...,  4187.,  3501.,  2282.],
         [12988., 18141., 18223., ...,  2323.,  1885.,  1220.]],

        [[  661.,   989.,  1175., ...,  1890.,  1552.,   994.],
         [  958.,  1489.,  2002., ...,  2741.,  2266.,  1459.],
         [ 1005.,  1584.,  2180., ...,  2890.,  2406.,  1561.],
         ...,
         [19130., 25276., 23307., ...,  6188.,  5198.,  3362.],
         [18896., 26008., 25779., ...,  4187.,  3501.,  2282.],
         [12988., 18141., 18223., ...,  2323.,  1885.,  1220.]],

        [[  661.,   989.,  1175., ...,  1890.,  1552.,   994.],
         [  958.,  1489.,  2002., ...,  2741.,  2266.,  1459.],
         [ 1005.,  1584.,  2180., ...,  2890.,  2406.,  1561.],
         ...,
         [19130., 25276., 23307., ...,  6188.,  5198.,  3362.],
         [18896., 26008., 25779., ...,  4187.,  3501.,  2282.],
         [12988., 18141., 18223., ...,  2323.,  1885.,  1220.]],

        ...,

        [[  661.,   989.,  1175., ...,  1890.,  1552.,   994.],
         [  958.,  1489.,  2002., ...,  2741.,  2266.,  1459.],
         [ 1005.,  1584.,  2180., ...,  2890.,  2406.,  1561.],
         ...,
         [19130., 25276., 23307., ...,  6188.,  5198.,  3362.],
         [18896., 26008., 25779., ...,  4187.,  3501.,  2282.],
         [12988., 18141., 18223., ...,  2323.,  1885.,  1220.]],

        [[  661.,   989.,  1175., ...,  1890.,  1552.,   994.],
         [  958.,  1489.,  2002., ...,  2741.,  2266.,  1459.],
         [ 1005.,  1584.,  2180., ...,  2890.,  2406.,  1561.],
         ...,
         [19130., 25276., 23307., ...,  6188.,  5198.,  3362.],
         [18896., 26008., 25779., ...,  4187.,  3501.,  2282.],
         [12988., 18141., 18223., ...,  2323.,  1885.,  1220.]],

        [[  661.,   989.,  1175., ...,  1890.,  1552.,   994.],
         [  958.,  1489.,  2002., ...,  2741.,  2266.,  1459.],
         [ 1005.,  1584.,  2180., ...,  2890.,  2406.,  1561.],
         ...,
         [19130., 25276., 23307., ...,  6188.,  5198.,  3362.],
         [18896., 26008., 25779., ...,  4187.,  3501.,  2282.],
         [12988., 18141., 18223., ...,  2323.,  1885.,  1220.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [0], 'to': [20, 20]}
ms node:
{'name': 'conv2d', 'output': array([[[[  392.,   621.,   789., ...,  1503.,  1431.,   995.],
         [  632.,  1022.,  1383., ...,  2350.,  2247.,  1563.],
         [  759.,  1247.,  1749., ...,  2869.,  2760.,  1933.],
         ...,
         [14099., 19223., 20084., ...,  6280.,  5991.,  4208.],
         [17112., 24754., 27681., ...,  6258.,  5927.,  4174.],
         [12879., 19394., 22430., ...,  3070.,  2779.,  1925.]],

        [[  392.,   621.,   789., ...,  1503.,  1431.,   995.],
         [  632.,  1022.,  1383., ...,  2350.,  2247.,  1563.],
         [  759.,  1247.,  1749., ...,  2869.,  2760.,  1933.],
         ...,
         [14099., 19223., 20084., ...,  6280.,  5991.,  4208.],
         [17112., 24754., 27681., ...,  6258.,  5927.,  4174.],
         [12879., 19394., 22430., ...,  3070.,  2779.,  1925.]],

        [[  392.,   621.,   789., ...,  1503.,  1431.,   995.],
         [  632.,  1022.,  1383., ...,  2350.,  2247.,  1563.],
         [  759.,  1247.,  1749., ...,  2869.,  2760.,  1933.],
         ...,
         [14099., 19223., 20084., ...,  6280.,  5991.,  4208.],
         [17112., 24754., 27681., ...,  6258.,  5927.,  4174.],
         [12879., 19394., 22430., ...,  3070.,  2779.,  1925.]],

        ...,

        [[  392.,   621.,   789., ...,  1503.,  1431.,   995.],
         [  632.,  1022.,  1383., ...,  2350.,  2247.,  1563.],
         [  759.,  1247.,  1749., ...,  2869.,  2760.,  1933.],
         ...,
         [14099., 19223., 20084., ...,  6280.,  5991.,  4208.],
         [17112., 24754., 27681., ...,  6258.,  5927.,  4174.],
         [12879., 19394., 22430., ...,  3070.,  2779.,  1925.]],

        [[  392.,   621.,   789., ...,  1503.,  1431.,   995.],
         [  632.,  1022.,  1383., ...,  2350.,  2247.,  1563.],
         [  759.,  1247.,  1749., ...,  2869.,  2760.,  1933.],
         ...,
         [14099., 19223., 20084., ...,  6280.,  5991.,  4208.],
         [17112., 24754., 27681., ...,  6258.,  5927.,  4174.],
         [12879., 19394., 22430., ...,  3070.,  2779.,  1925.]],

        [[  392.,   621.,   789., ...,  1503.,  1431.,   995.],
         [  632.,  1022.,  1383., ...,  2350.,  2247.,  1563.],
         [  759.,  1247.,  1749., ...,  2869.,  2760.,  1933.],
         ...,
         [14099., 19223., 20084., ...,  6280.,  5991.,  4208.],
         [17112., 24754., 27681., ...,  6258.,  5927.,  4174.],
         [12879., 19394., 22430., ...,  3070.,  2779.,  1925.]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [0], 'to': [20, 20]}
torch node:
{'name': 'conv2d', 'output': array([[[[  392.,   621.,   789., ...,  1503.,  1431.,   995.],
         [  632.,  1022.,  1383., ...,  2350.,  2247.,  1563.],
         [  759.,  1247.,  1749., ...,  2869.,  2760.,  1933.],
         ...,
         [14099., 19223., 20084., ...,  6280.,  5991.,  4208.],
         [17112., 24754., 27681., ...,  6258.,  5927.,  4174.],
         [12879., 19394., 22430., ...,  3070.,  2779.,  1925.]],

        [[  392.,   621.,   789., ...,  1503.,  1431.,   995.],
         [  632.,  1022.,  1383., ...,  2350.,  2247.,  1563.],
         [  759.,  1247.,  1749., ...,  2869.,  2760.,  1933.],
         ...,
         [14099., 19223., 20084., ...,  6280.,  5991.,  4208.],
         [17112., 24754., 27681., ...,  6258.,  5927.,  4174.],
         [12879., 19394., 22430., ...,  3070.,  2779.,  1925.]],

        [[  392.,   621.,   789., ...,  1503.,  1431.,   995.],
         [  632.,  1022.,  1383., ...,  2350.,  2247.,  1563.],
         [  759.,  1247.,  1749., ...,  2869.,  2760.,  1933.],
         ...,
         [14099., 19223., 20084., ...,  6280.,  5991.,  4208.],
         [17112., 24754., 27681., ...,  6258.,  5927.,  4174.],
         [12879., 19394., 22430., ...,  3070.,  2779.,  1925.]],

        ...,

        [[  392.,   621.,   789., ...,  1503.,  1431.,   995.],
         [  632.,  1022.,  1383., ...,  2350.,  2247.,  1563.],
         [  759.,  1247.,  1749., ...,  2869.,  2760.,  1933.],
         ...,
         [14099., 19223., 20084., ...,  6280.,  5991.,  4208.],
         [17112., 24754., 27681., ...,  6258.,  5927.,  4174.],
         [12879., 19394., 22430., ...,  3070.,  2779.,  1925.]],

        [[  392.,   621.,   789., ...,  1503.,  1431.,   995.],
         [  632.,  1022.,  1383., ...,  2350.,  2247.,  1563.],
         [  759.,  1247.,  1749., ...,  2869.,  2760.,  1933.],
         ...,
         [14099., 19223., 20084., ...,  6280.,  5991.,  4208.],
         [17112., 24754., 27681., ...,  6258.,  5927.,  4174.],
         [12879., 19394., 22430., ...,  3070.,  2779.,  1925.]],

        [[  392.,   621.,   789., ...,  1503.,  1431.,   995.],
         [  632.,  1022.,  1383., ...,  2350.,  2247.,  1563.],
         [  759.,  1247.,  1749., ...,  2869.,  2760.,  1933.],
         ...,
         [14099., 19223., 20084., ...,  6280.,  5991.,  4208.],
         [17112., 24754., 27681., ...,  6258.,  5927.,  4174.],
         [12879., 19394., 22430., ...,  3070.,  2779.,  1925.]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [0], 'to': [20, 20]}

generate models:14

analyse output arrays in iter:14

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[100.,  98.,  99., ..., 165., 163., 165.],
         [101., 100., 100., ..., 164., 163., 159.],
         [105., 104., 104., ..., 156., 136., 114.],
         ...,
         [166., 166., 168., ..., 137., 137., 147.],
         [161., 162., 167., ..., 131., 138., 137.],
         [164., 162., 164., ..., 153., 157., 156.]],

        [[146., 144., 144., ..., 165., 163., 165.],
         [145., 143., 143., ..., 161., 162., 161.],
         [147., 145., 145., ..., 150., 133., 117.],
         ...,
         [156., 156., 157., ..., 127., 126., 136.],
         [152., 153., 158., ..., 125., 133., 132.],
         [158., 156., 158., ..., 146., 151., 150.]],

        [[192., 189., 189., ..., 165., 163., 165.],
         [188., 186., 186., ..., 159., 159., 157.],
         [189., 186., 187., ..., 147., 129., 111.],
         ...,
         [150., 151., 152., ..., 112., 114., 127.],
         [149., 150., 155., ..., 117., 124., 120.],
         [155., 153., 155., ..., 139., 141., 137.]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[10800., 14034., 12084., ..., 15094., 12108.,  7636.],
         [13924., 17622., 14464., ..., 20101., 16486., 10862.],
         [11986., 14991., 11885., ..., 20668., 16883., 11173.],
         ...,
         [12900., 16389., 13559., ..., 14906., 13357.,  9574.],
         [12539., 16796., 14645., ..., 14328., 12928.,  9284.],
         [ 9427., 13103., 12437., ...,  8587.,  7799.,  5889.]],

        [[10800., 14034., 12084., ..., 15094., 12108.,  7636.],
         [13924., 17622., 14464., ..., 20101., 16486., 10862.],
         [11986., 14991., 11885., ..., 20668., 16883., 11173.],
         ...,
         [12900., 16389., 13559., ..., 14906., 13357.,  9574.],
         [12539., 16796., 14645., ..., 14328., 12928.,  9284.],
         [ 9427., 13103., 12437., ...,  8587.,  7799.,  5889.]],

        [[10800., 14034., 12084., ..., 15094., 12108.,  7636.],
         [13924., 17622., 14464., ..., 20101., 16486., 10862.],
         [11986., 14991., 11885., ..., 20668., 16883., 11173.],
         ...,
         [12900., 16389., 13559., ..., 14906., 13357.,  9574.],
         [12539., 16796., 14645., ..., 14328., 12928.,  9284.],
         [ 9427., 13103., 12437., ...,  8587.,  7799.,  5889.]],

        ...,

        [[10800., 14034., 12084., ..., 15094., 12108.,  7636.],
         [13924., 17622., 14464., ..., 20101., 16486., 10862.],
         [11986., 14991., 11885., ..., 20668., 16883., 11173.],
         ...,
         [12900., 16389., 13559., ..., 14906., 13357.,  9574.],
         [12539., 16796., 14645., ..., 14328., 12928.,  9284.],
         [ 9427., 13103., 12437., ...,  8587.,  7799.,  5889.]],

        [[10800., 14034., 12084., ..., 15094., 12108.,  7636.],
         [13924., 17622., 14464., ..., 20101., 16486., 10862.],
         [11986., 14991., 11885., ..., 20668., 16883., 11173.],
         ...,
         [12900., 16389., 13559., ..., 14906., 13357.,  9574.],
         [12539., 16796., 14645., ..., 14328., 12928.,  9284.],
         [ 9427., 13103., 12437., ...,  8587.,  7799.,  5889.]],

        [[10800., 14034., 12084., ..., 15094., 12108.,  7636.],
         [13924., 17622., 14464., ..., 20101., 16486., 10862.],
         [11986., 14991., 11885., ..., 20668., 16883., 11173.],
         ...,
         [12900., 16389., 13559., ..., 14906., 13357.,  9574.],
         [12539., 16796., 14645., ..., 14328., 12928.,  9284.],
         [ 9427., 13103., 12437., ...,  8587.,  7799.,  5889.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [0], 'to': [9]}
ms node:
{'name': 'conv2d', 'output': array([[[[ 6971., 10318., 11178., ..., 13441., 12577.,  8611.],
         [10386., 14352., 14618., ..., 17424., 16622., 11311.],
         [10832., 14701., 14639., ..., 19885., 19990., 13726.],
         ...,
         [ 9517., 13115., 12523., ..., 14983., 15216., 10592.],
         [11309., 16305., 17027., ..., 14887., 16377., 12021.],
         [ 9046., 13289., 14623., ..., 11354., 12338.,  9185.]],

        [[ 6971., 10318., 11178., ..., 13441., 12577.,  8611.],
         [10386., 14352., 14618., ..., 17424., 16622., 11311.],
         [10832., 14701., 14639., ..., 19885., 19990., 13726.],
         ...,
         [ 9517., 13115., 12523., ..., 14983., 15216., 10592.],
         [11309., 16305., 17027., ..., 14887., 16377., 12021.],
         [ 9046., 13289., 14623., ..., 11354., 12338.,  9185.]],

        [[ 6971., 10318., 11178., ..., 13441., 12577.,  8611.],
         [10386., 14352., 14618., ..., 17424., 16622., 11311.],
         [10832., 14701., 14639., ..., 19885., 19990., 13726.],
         ...,
         [ 9517., 13115., 12523., ..., 14983., 15216., 10592.],
         [11309., 16305., 17027., ..., 14887., 16377., 12021.],
         [ 9046., 13289., 14623., ..., 11354., 12338.,  9185.]],

        ...,

        [[ 6971., 10318., 11178., ..., 13441., 12577.,  8611.],
         [10386., 14352., 14618., ..., 17424., 16622., 11311.],
         [10832., 14701., 14639., ..., 19885., 19990., 13726.],
         ...,
         [ 9517., 13115., 12523., ..., 14983., 15216., 10592.],
         [11309., 16305., 17027., ..., 14887., 16377., 12021.],
         [ 9046., 13289., 14623., ..., 11354., 12338.,  9185.]],

        [[ 6971., 10318., 11178., ..., 13441., 12577.,  8611.],
         [10386., 14352., 14618., ..., 17424., 16622., 11311.],
         [10832., 14701., 14639., ..., 19885., 19990., 13726.],
         ...,
         [ 9517., 13115., 12523., ..., 14983., 15216., 10592.],
         [11309., 16305., 17027., ..., 14887., 16377., 12021.],
         [ 9046., 13289., 14623., ..., 11354., 12338.,  9185.]],

        [[ 6971., 10318., 11178., ..., 13441., 12577.,  8611.],
         [10386., 14352., 14618., ..., 17424., 16622., 11311.],
         [10832., 14701., 14639., ..., 19885., 19990., 13726.],
         ...,
         [ 9517., 13115., 12523., ..., 14983., 15216., 10592.],
         [11309., 16305., 17027., ..., 14887., 16377., 12021.],
         [ 9046., 13289., 14623., ..., 11354., 12338.,  9185.]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [0], 'to': [9]}
torch node:
{'name': 'conv2d', 'output': array([[[[ 6971., 10318., 11178., ..., 13441., 12577.,  8611.],
         [10386., 14352., 14618., ..., 17424., 16622., 11311.],
         [10832., 14701., 14639., ..., 19885., 19990., 13726.],
         ...,
         [ 9517., 13115., 12523., ..., 14983., 15216., 10592.],
         [11309., 16305., 17027., ..., 14887., 16377., 12021.],
         [ 9046., 13289., 14623., ..., 11354., 12338.,  9185.]],

        [[ 6971., 10318., 11178., ..., 13441., 12577.,  8611.],
         [10386., 14352., 14618., ..., 17424., 16622., 11311.],
         [10832., 14701., 14639., ..., 19885., 19990., 13726.],
         ...,
         [ 9517., 13115., 12523., ..., 14983., 15216., 10592.],
         [11309., 16305., 17027., ..., 14887., 16377., 12021.],
         [ 9046., 13289., 14623., ..., 11354., 12338.,  9185.]],

        [[ 6971., 10318., 11178., ..., 13441., 12577.,  8611.],
         [10386., 14352., 14618., ..., 17424., 16622., 11311.],
         [10832., 14701., 14639., ..., 19885., 19990., 13726.],
         ...,
         [ 9517., 13115., 12523., ..., 14983., 15216., 10592.],
         [11309., 16305., 17027., ..., 14887., 16377., 12021.],
         [ 9046., 13289., 14623., ..., 11354., 12338.,  9185.]],

        ...,

        [[ 6971., 10318., 11178., ..., 13441., 12577.,  8611.],
         [10386., 14352., 14618., ..., 17424., 16622., 11311.],
         [10832., 14701., 14639., ..., 19885., 19990., 13726.],
         ...,
         [ 9517., 13115., 12523., ..., 14983., 15216., 10592.],
         [11309., 16305., 17027., ..., 14887., 16377., 12021.],
         [ 9046., 13289., 14623., ..., 11354., 12338.,  9185.]],

        [[ 6971., 10318., 11178., ..., 13441., 12577.,  8611.],
         [10386., 14352., 14618., ..., 17424., 16622., 11311.],
         [10832., 14701., 14639., ..., 19885., 19990., 13726.],
         ...,
         [ 9517., 13115., 12523., ..., 14983., 15216., 10592.],
         [11309., 16305., 17027., ..., 14887., 16377., 12021.],
         [ 9046., 13289., 14623., ..., 11354., 12338.,  9185.]],

        [[ 6971., 10318., 11178., ..., 13441., 12577.,  8611.],
         [10386., 14352., 14618., ..., 17424., 16622., 11311.],
         [10832., 14701., 14639., ..., 19885., 19990., 13726.],
         ...,
         [ 9517., 13115., 12523., ..., 14983., 15216., 10592.],
         [11309., 16305., 17027., ..., 14887., 16377., 12021.],
         [ 9046., 13289., 14623., ..., 11354., 12338.,  9185.]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [0], 'to': [9]}

generate models:15

analyse output arrays in iter:15

pre layer res:
27:cos
{'name': 'cos', 'output': array([[[[-0.10701342, -0.10701342, -0.09711526, ..., -0.15784913,
          -0.16828941, -0.15784913],
         [-0.07758203, -0.07758203, -0.06794553, ..., -0.13724358,
          -0.13724358, -0.13724358],
         [-0.03954999, -0.04893016, -0.04893016, ..., -0.10701342,
          -0.10701342, -0.09711526],
         ...,
         [ 0.38347554,  0.34901088,  0.39457458, ..., -0.38471663,
          -0.38471663, -0.4220658 ],
         [ 0.34309122,  0.42675602,  0.4720526 , ..., -0.37245753,
          -0.38471663, -0.36029458],
         [ 0.36069712,  0.36646554,  0.3548792 , ..., -0.12707683,
           0.14688985,  0.36646554]],

        [[ 0.40005314,  0.40005314,  0.39457458, ...,  0.38347554,
           0.38347554,  0.39457458],
         [ 0.4108712 ,  0.40005314,  0.40005314, ...,  0.39457458,
           0.3890486 ,  0.40005314],
         [ 0.43196124,  0.42150593,  0.42675602, ...,  0.4108712 ,
           0.4108712 ,  0.42150593],
         ...,
         [ 0.45234653,  0.4108712 ,  0.4473149 , ...,  0.04976458,
           0.07503224,  0.07503224],
         [ 0.43196124,  0.49110484,  0.52294385, ...,  0.0666848 ,
           0.0666848 ,  0.08330504],
         [ 0.4422404 ,  0.4422404 ,  0.41621128, ...,  0.20610422,
           0.3548792 ,  0.48640195]],

        [[ 0.666891  ,  0.66038626,  0.66365206, ...,  0.666891  ,
           0.6570936 ,  0.66038626],
         [ 0.66365206,  0.6570936 ,  0.65042675, ...,  0.66038626,
           0.6537739 ,  0.66038626],
         [ 0.6732899 ,  0.66365206,  0.66038626, ...,  0.66365206,
           0.66365206,  0.67010355],
         ...,
         [ 0.4473149 ,  0.39457458,  0.4108712 , ...,  0.3188951 ,
           0.33712062,  0.34309122],
         [ 0.42150593,  0.4720526 ,  0.5003934 , ...,  0.3188951 ,
           0.31271395,  0.3188951 ],
         [ 0.43196124,  0.42150593,  0.40548518, ...,  0.39457458,
           0.4768759 ,  0.56123614]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [12], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[ 25.483238  ,  36.021645  ,  38.368603  , ...,  34.57848   ,
           29.653923  ,  19.73849   ],
         [ 38.23999   ,  54.096256  ,  57.981415  , ...,  51.375137  ,
           44.04775   ,  29.332552  ],
         [ 42.77403   ,  60.069633  ,  64.789444  , ...,  57.46374   ,
           49.265766  ,  32.811146  ],
         ...,
         [ 37.462814  ,  38.683155  ,  24.858192  , ..., -11.717421  ,
          -13.595415  ,  -9.852469  ],
         [ 32.96819   ,  30.185133  ,  12.81284   , ...,  -4.064406  ,
           -1.3881015 ,   0.838527  ],
         [ 24.840015  ,  20.18704   ,   4.592895  , ...,   0.26059324,
            2.4742088 ,   2.6655838 ]],

        [[ 25.483238  ,  36.021645  ,  38.368603  , ...,  34.57848   ,
           29.653923  ,  19.73849   ],
         [ 38.23999   ,  54.096256  ,  57.981415  , ...,  51.375137  ,
           44.04775   ,  29.332552  ],
         [ 42.77403   ,  60.069633  ,  64.789444  , ...,  57.46374   ,
           49.265766  ,  32.811146  ],
         ...,
         [ 37.462814  ,  38.683155  ,  24.858192  , ..., -11.717421  ,
          -13.595415  ,  -9.852469  ],
         [ 32.96819   ,  30.185133  ,  12.81284   , ...,  -4.064406  ,
           -1.3881015 ,   0.838527  ],
         [ 24.840015  ,  20.18704   ,   4.592895  , ...,   0.26059324,
            2.4742088 ,   2.6655838 ]],

        [[ 25.483238  ,  36.021645  ,  38.368603  , ...,  34.57848   ,
           29.653923  ,  19.73849   ],
         [ 38.23999   ,  54.096256  ,  57.981415  , ...,  51.375137  ,
           44.04775   ,  29.332552  ],
         [ 42.77403   ,  60.069633  ,  64.789444  , ...,  57.46374   ,
           49.265766  ,  32.811146  ],
         ...,
         [ 37.462814  ,  38.683155  ,  24.858192  , ..., -11.717421  ,
          -13.595415  ,  -9.852469  ],
         [ 32.96819   ,  30.185133  ,  12.81284   , ...,  -4.064406  ,
           -1.3881015 ,   0.838527  ],
         [ 24.840015  ,  20.18704   ,   4.592895  , ...,   0.26059324,
            2.4742088 ,   2.6655838 ]],

        ...,

        [[ 25.483238  ,  36.021645  ,  38.368603  , ...,  34.57848   ,
           29.653923  ,  19.73849   ],
         [ 38.23999   ,  54.096256  ,  57.981415  , ...,  51.375137  ,
           44.04775   ,  29.332552  ],
         [ 42.77403   ,  60.069633  ,  64.789444  , ...,  57.46374   ,
           49.265766  ,  32.811146  ],
         ...,
         [ 37.462814  ,  38.683155  ,  24.858192  , ..., -11.717421  ,
          -13.595415  ,  -9.852469  ],
         [ 32.96819   ,  30.185133  ,  12.81284   , ...,  -4.064406  ,
           -1.3881015 ,   0.838527  ],
         [ 24.840015  ,  20.18704   ,   4.592895  , ...,   0.26059324,
            2.4742088 ,   2.6655838 ]],

        [[ 25.483238  ,  36.021645  ,  38.368603  , ...,  34.57848   ,
           29.653923  ,  19.73849   ],
         [ 38.23999   ,  54.096256  ,  57.981415  , ...,  51.375137  ,
           44.04775   ,  29.332552  ],
         [ 42.77403   ,  60.069633  ,  64.789444  , ...,  57.46374   ,
           49.265766  ,  32.811146  ],
         ...,
         [ 37.462814  ,  38.683155  ,  24.858192  , ..., -11.717421  ,
          -13.595415  ,  -9.852469  ],
         [ 32.96819   ,  30.185133  ,  12.81284   , ...,  -4.064406  ,
           -1.3881015 ,   0.838527  ],
         [ 24.840015  ,  20.18704   ,   4.592895  , ...,   0.26059324,
            2.4742088 ,   2.6655838 ]],

        [[ 25.483238  ,  36.021645  ,  38.368603  , ...,  34.57848   ,
           29.653923  ,  19.73849   ],
         [ 38.23999   ,  54.096256  ,  57.981415  , ...,  51.375137  ,
           44.04775   ,  29.332552  ],
         [ 42.77403   ,  60.069633  ,  64.789444  , ...,  57.46374   ,
           49.265766  ,  32.811146  ],
         ...,
         [ 37.462814  ,  38.683155  ,  24.858192  , ..., -11.717421  ,
          -13.595415  ,  -9.852469  ],
         [ 32.96819   ,  30.185133  ,  12.81284   , ...,  -4.064406  ,
           -1.3881015 ,   0.838527  ],
         [ 24.840015  ,  20.18704   ,   4.592895  , ...,   0.26059324,
            2.4742088 ,   2.6655838 ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [27], 'to': [14]}
ms node:
{'name': 'conv2d', 'output': array([[[[ 16.319979 ,  24.335049 ,  29.02812  , ...,  26.909294 ,
           26.832676 ,  19.129423 ],
         [ 25.659407 ,  38.26911  ,  46.2301   , ...,  42.91221  ,
           42.792984 ,  30.52727  ],
         [ 33.153885 ,  48.895164 ,  58.988316 , ...,  54.416477 ,
           54.31906  ,  38.740814 ],
         ...,
         [ 30.522808 ,  40.32923  ,  34.47842  , ..., -19.64565  ,
          -28.704697 , -24.10084  ],
         [ 29.546917 ,  36.572792 ,  24.235239 , ...,  -5.505066 ,
           -3.8641202,  -3.134861 ],
         [ 24.28426  ,  29.120634 ,  16.1062   , ...,  -4.9664345,
            0.278614 ,   1.5962574]],

        [[ 16.319979 ,  24.335049 ,  29.02812  , ...,  26.909294 ,
           26.832676 ,  19.129423 ],
         [ 25.659407 ,  38.26911  ,  46.2301   , ...,  42.91221  ,
           42.792984 ,  30.52727  ],
         [ 33.153885 ,  48.895164 ,  58.988316 , ...,  54.416477 ,
           54.31906  ,  38.740814 ],
         ...,
         [ 30.522808 ,  40.32923  ,  34.47842  , ..., -19.64565  ,
          -28.704697 , -24.10084  ],
         [ 29.546917 ,  36.572792 ,  24.235239 , ...,  -5.505066 ,
           -3.8641202,  -3.134861 ],
         [ 24.28426  ,  29.120634 ,  16.1062   , ...,  -4.9664345,
            0.278614 ,   1.5962574]],

        [[ 16.319979 ,  24.335049 ,  29.02812  , ...,  26.909294 ,
           26.832676 ,  19.129423 ],
         [ 25.659407 ,  38.26911  ,  46.2301   , ...,  42.91221  ,
           42.792984 ,  30.52727  ],
         [ 33.153885 ,  48.895164 ,  58.988316 , ...,  54.416477 ,
           54.31906  ,  38.740814 ],
         ...,
         [ 30.522808 ,  40.32923  ,  34.47842  , ..., -19.64565  ,
          -28.704697 , -24.10084  ],
         [ 29.546917 ,  36.572792 ,  24.235239 , ...,  -5.505066 ,
           -3.8641202,  -3.134861 ],
         [ 24.28426  ,  29.120634 ,  16.1062   , ...,  -4.9664345,
            0.278614 ,   1.5962574]],

        ...,

        [[ 16.319979 ,  24.335049 ,  29.02812  , ...,  26.909294 ,
           26.832676 ,  19.129423 ],
         [ 25.659407 ,  38.26911  ,  46.2301   , ...,  42.91221  ,
           42.792984 ,  30.52727  ],
         [ 33.153885 ,  48.895164 ,  58.988316 , ...,  54.416477 ,
           54.31906  ,  38.740814 ],
         ...,
         [ 30.522808 ,  40.32923  ,  34.47842  , ..., -19.64565  ,
          -28.704697 , -24.10084  ],
         [ 29.546917 ,  36.572792 ,  24.235239 , ...,  -5.505066 ,
           -3.8641202,  -3.134861 ],
         [ 24.28426  ,  29.120634 ,  16.1062   , ...,  -4.9664345,
            0.278614 ,   1.5962574]],

        [[ 16.319979 ,  24.335049 ,  29.02812  , ...,  26.909294 ,
           26.832676 ,  19.129423 ],
         [ 25.659407 ,  38.26911  ,  46.2301   , ...,  42.91221  ,
           42.792984 ,  30.52727  ],
         [ 33.153885 ,  48.895164 ,  58.988316 , ...,  54.416477 ,
           54.31906  ,  38.740814 ],
         ...,
         [ 30.522808 ,  40.32923  ,  34.47842  , ..., -19.64565  ,
          -28.704697 , -24.10084  ],
         [ 29.546917 ,  36.572792 ,  24.235239 , ...,  -5.505066 ,
           -3.8641202,  -3.134861 ],
         [ 24.28426  ,  29.120634 ,  16.1062   , ...,  -4.9664345,
            0.278614 ,   1.5962574]],

        [[ 16.319979 ,  24.335049 ,  29.02812  , ...,  26.909294 ,
           26.832676 ,  19.129423 ],
         [ 25.659407 ,  38.26911  ,  46.2301   , ...,  42.91221  ,
           42.792984 ,  30.52727  ],
         [ 33.153885 ,  48.895164 ,  58.988316 , ...,  54.416477 ,
           54.31906  ,  38.740814 ],
         ...,
         [ 30.522808 ,  40.32923  ,  34.47842  , ..., -19.64565  ,
          -28.704697 , -24.10084  ],
         [ 29.546917 ,  36.572792 ,  24.235239 , ...,  -5.505066 ,
           -3.8641202,  -3.134861 ],
         [ 24.28426  ,  29.120634 ,  16.1062   , ...,  -4.9664345,
            0.278614 ,   1.5962574]]]], dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [27], 'to': [14]}
torch node:
{'name': 'conv2d', 'output': array([[[[ 16.320042  ,  24.335136  ,  29.028204  , ...,  26.909355  ,
           26.832739  ,  19.12947   ],
         [ 25.65947   ,  38.2692    ,  46.230198  , ...,  42.912285  ,
           42.79307   ,  30.527315  ],
         [ 33.15393   ,  48.895203  ,  58.988373  , ...,  54.416576  ,
           54.319168  ,  38.740883  ],
         ...,
         [ 30.52281   ,  40.329235  ,  34.478436  , ..., -19.645569  ,
          -28.70458   , -24.10076   ],
         [ 29.546919  ,  36.57282   ,  24.235289  , ...,  -5.504977  ,
           -3.8640363 ,  -3.134786  ],
         [ 24.284231  ,  29.120619  ,  16.10622   , ...,  -4.966361  ,
            0.27867058,   1.5963018 ]],

        [[ 16.320042  ,  24.335136  ,  29.028204  , ...,  26.909355  ,
           26.832739  ,  19.12947   ],
         [ 25.65947   ,  38.2692    ,  46.230198  , ...,  42.912285  ,
           42.79307   ,  30.527315  ],
         [ 33.15393   ,  48.895203  ,  58.988373  , ...,  54.416576  ,
           54.319168  ,  38.740883  ],
         ...,
         [ 30.52281   ,  40.329235  ,  34.478436  , ..., -19.645569  ,
          -28.70458   , -24.10076   ],
         [ 29.546919  ,  36.57282   ,  24.235289  , ...,  -5.504977  ,
           -3.8640363 ,  -3.134786  ],
         [ 24.284231  ,  29.120619  ,  16.10622   , ...,  -4.966361  ,
            0.27867058,   1.5963018 ]],

        [[ 16.320042  ,  24.335136  ,  29.028204  , ...,  26.909355  ,
           26.832739  ,  19.12947   ],
         [ 25.65947   ,  38.2692    ,  46.230198  , ...,  42.912285  ,
           42.79307   ,  30.527315  ],
         [ 33.15393   ,  48.895203  ,  58.988373  , ...,  54.416576  ,
           54.319168  ,  38.740883  ],
         ...,
         [ 30.52281   ,  40.329235  ,  34.478436  , ..., -19.645569  ,
          -28.70458   , -24.10076   ],
         [ 29.546919  ,  36.57282   ,  24.235289  , ...,  -5.504977  ,
           -3.8640363 ,  -3.134786  ],
         [ 24.284231  ,  29.120619  ,  16.10622   , ...,  -4.966361  ,
            0.27867058,   1.5963018 ]],

        ...,

        [[ 16.320042  ,  24.335136  ,  29.028204  , ...,  26.909355  ,
           26.832739  ,  19.12947   ],
         [ 25.65947   ,  38.2692    ,  46.230198  , ...,  42.912285  ,
           42.79307   ,  30.527315  ],
         [ 33.15393   ,  48.895203  ,  58.988373  , ...,  54.416576  ,
           54.319168  ,  38.740883  ],
         ...,
         [ 30.52281   ,  40.329235  ,  34.478436  , ..., -19.645569  ,
          -28.70458   , -24.10076   ],
         [ 29.546919  ,  36.57282   ,  24.235289  , ...,  -5.504977  ,
           -3.8640363 ,  -3.134786  ],
         [ 24.284231  ,  29.120619  ,  16.10622   , ...,  -4.966361  ,
            0.27867058,   1.5963018 ]],

        [[ 16.320042  ,  24.335136  ,  29.028204  , ...,  26.909355  ,
           26.832739  ,  19.12947   ],
         [ 25.65947   ,  38.2692    ,  46.230198  , ...,  42.912285  ,
           42.79307   ,  30.527315  ],
         [ 33.15393   ,  48.895203  ,  58.988373  , ...,  54.416576  ,
           54.319168  ,  38.740883  ],
         ...,
         [ 30.52281   ,  40.329235  ,  34.478436  , ..., -19.645569  ,
          -28.70458   , -24.10076   ],
         [ 29.546919  ,  36.57282   ,  24.235289  , ...,  -5.504977  ,
           -3.8640363 ,  -3.134786  ],
         [ 24.284231  ,  29.120619  ,  16.10622   , ...,  -4.966361  ,
            0.27867058,   1.5963018 ]],

        [[ 16.320042  ,  24.335136  ,  29.028204  , ...,  26.909355  ,
           26.832739  ,  19.12947   ],
         [ 25.65947   ,  38.2692    ,  46.230198  , ...,  42.912285  ,
           42.79307   ,  30.527315  ],
         [ 33.15393   ,  48.895203  ,  58.988373  , ...,  54.416576  ,
           54.319168  ,  38.740883  ],
         ...,
         [ 30.52281   ,  40.329235  ,  34.478436  , ..., -19.645569  ,
          -28.70458   , -24.10076   ],
         [ 29.546919  ,  36.57282   ,  24.235289  , ...,  -5.504977  ,
           -3.8640363 ,  -3.134786  ],
         [ 24.284231  ,  29.120619  ,  16.10622   , ...,  -4.966361  ,
            0.27867058,   1.5963018 ]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [27], 'to': [14]}

generate models:16

analyse output arrays in iter:16

pre layer res:
5:relu
{'name': 'relu', 'output': array([[[[          inf,           inf,           inf, ...,
                    inf, 9.4961195e+19, 7.0167356e+20],
         [4.6071865e+28, 2.0382811e+34,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 8.4383568e+26, 7.6947855e+23],
         ...,
         [1.6516363e+38,           inf, 1.3733831e+32, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
          1.5455389e+25, 4.0939969e+35,           inf],
         [3.7332422e+32,           inf, 3.7332422e+32, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
          5.6857200e+24, 8.4383568e+26, 1.6516363e+38],
         [6.8376711e+30,           inf, 2.2352465e+37, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
          2.0916596e+24, 1.1420074e+26, 6.0760303e+37],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf, 5.6857200e+24, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf, 3.4042762e+29, ...,
          6.8376711e+30, 4.6071865e+28, 4.6071865e+28],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf, 1.1128637e+36, ...,
          2.2937833e+27, 6.8376711e+30, 7.4984170e+33],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
          8.4383568e+26, 1.2523633e+29, 2.5154387e+30]],

        ...,

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [24], 'to': [6]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [5], 'to': [7]}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [5], 'to': [7]}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [5], 'to': [7]}

pre layer res:
14:tanh
{'name': 'tanh', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [1], 'to': [9]}
tf node:
{'name': 'log', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [14], 'to': [16]}
ms node:
{'name': 'log', 'output': array([[[[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        ...,

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [14], 'to': [16]}
torch node:
{'name': 'log', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [14], 'to': [16]}

generate models:17

analyse output arrays in iter:24

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[ 73.,  71.,  77., ..., 183., 180., 185.],
         [ 73.,  75.,  78., ..., 181., 172., 174.],
         [ 77.,  94.,  99., ..., 175., 191., 185.],
         ...,
         [ 84.,  86., 118., ...,  79., 159., 117.],
         [ 76.,  81., 103., ...,  56.,  69., 104.],
         [102.,  91.,  95., ..., 100.,  72.,  48.]],

        [[ 77.,  68.,  69., ..., 210., 214., 225.],
         [ 74.,  68.,  64., ..., 229., 220., 218.],
         [ 72.,  82.,  81., ..., 213., 230., 226.],
         ...,
         [106., 105., 133., ...,  95., 177., 133.],
         [ 96.,  98., 116., ...,  80.,  90., 120.],
         [120., 109., 110., ..., 134.,  97.,  59.]],

        [[ 58.,  50.,  44., ..., 149., 143., 144.],
         [ 52.,  55.,  50., ..., 139., 129., 127.],
         [ 64.,  79.,  73., ..., 139., 152., 142.],
         ...,
         [ 56.,  58.,  84., ...,  78., 137.,  94.],
         [ 60.,  56.,  73., ...,  36.,  40.,  69.],
         [ 92.,  62.,  62., ...,  55.,  38.,  29.]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[ 6314.,  9880., 11022., ..., 15108., 14244., 10531.],
         [ 8789., 13330., 14708., ..., 19413., 18398., 13396.],
         [ 8913., 12454., 12867., ..., 17061., 15261., 10455.],
         ...,
         [ 9437., 13633., 14575., ..., 13235., 11592.,  7265.],
         [ 8354., 12051., 12675., ..., 11877., 10898.,  6949.],
         [ 5697.,  8242.,  8393., ...,  7267.,  6824.,  4826.]],

        [[ 6314.,  9880., 11022., ..., 15108., 14244., 10531.],
         [ 8789., 13330., 14708., ..., 19413., 18398., 13396.],
         [ 8913., 12454., 12867., ..., 17061., 15261., 10455.],
         ...,
         [ 9437., 13633., 14575., ..., 13235., 11592.,  7265.],
         [ 8354., 12051., 12675., ..., 11877., 10898.,  6949.],
         [ 5697.,  8242.,  8393., ...,  7267.,  6824.,  4826.]],

        [[ 6314.,  9880., 11022., ..., 15108., 14244., 10531.],
         [ 8789., 13330., 14708., ..., 19413., 18398., 13396.],
         [ 8913., 12454., 12867., ..., 17061., 15261., 10455.],
         ...,
         [ 9437., 13633., 14575., ..., 13235., 11592.,  7265.],
         [ 8354., 12051., 12675., ..., 11877., 10898.,  6949.],
         [ 5697.,  8242.,  8393., ...,  7267.,  6824.,  4826.]],

        ...,

        [[ 6314.,  9880., 11022., ..., 15108., 14244., 10531.],
         [ 8789., 13330., 14708., ..., 19413., 18398., 13396.],
         [ 8913., 12454., 12867., ..., 17061., 15261., 10455.],
         ...,
         [ 9437., 13633., 14575., ..., 13235., 11592.,  7265.],
         [ 8354., 12051., 12675., ..., 11877., 10898.,  6949.],
         [ 5697.,  8242.,  8393., ...,  7267.,  6824.,  4826.]],

        [[ 6314.,  9880., 11022., ..., 15108., 14244., 10531.],
         [ 8789., 13330., 14708., ..., 19413., 18398., 13396.],
         [ 8913., 12454., 12867., ..., 17061., 15261., 10455.],
         ...,
         [ 9437., 13633., 14575., ..., 13235., 11592.,  7265.],
         [ 8354., 12051., 12675., ..., 11877., 10898.,  6949.],
         [ 5697.,  8242.,  8393., ...,  7267.,  6824.,  4826.]],

        [[ 6314.,  9880., 11022., ..., 15108., 14244., 10531.],
         [ 8789., 13330., 14708., ..., 19413., 18398., 13396.],
         [ 8913., 12454., 12867., ..., 17061., 15261., 10455.],
         ...,
         [ 9437., 13633., 14575., ..., 13235., 11592.,  7265.],
         [ 8354., 12051., 12675., ..., 11877., 10898.,  6949.],
         [ 5697.,  8242.,  8393., ...,  7267.,  6824.,  4826.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [0], 'to': [2]}
ms node:
{'name': 'conv2d', 'output': array([[[[ 3867.,  6417.,  8490., ..., 11875., 13330., 10127.],
         [ 6099.,  9621., 12535., ..., 16010., 18334., 14583.],
         [ 7039., 10550., 13187., ..., 17508., 19076., 14807.],
         ...,
         [ 7382., 11624., 14322., ..., 11032., 12525.,  9129.],
         [ 7569., 11563., 14109., ..., 12445., 14235., 10011.],
         [ 5708.,  8599., 10277., ...,  8391., 10170.,  7818.]],

        [[ 3867.,  6417.,  8490., ..., 11875., 13330., 10127.],
         [ 6099.,  9621., 12535., ..., 16010., 18334., 14583.],
         [ 7039., 10550., 13187., ..., 17508., 19076., 14807.],
         ...,
         [ 7382., 11624., 14322., ..., 11032., 12525.,  9129.],
         [ 7569., 11563., 14109., ..., 12445., 14235., 10011.],
         [ 5708.,  8599., 10277., ...,  8391., 10170.,  7818.]],

        [[ 3867.,  6417.,  8490., ..., 11875., 13330., 10127.],
         [ 6099.,  9621., 12535., ..., 16010., 18334., 14583.],
         [ 7039., 10550., 13187., ..., 17508., 19076., 14807.],
         ...,
         [ 7382., 11624., 14322., ..., 11032., 12525.,  9129.],
         [ 7569., 11563., 14109., ..., 12445., 14235., 10011.],
         [ 5708.,  8599., 10277., ...,  8391., 10170.,  7818.]],

        ...,

        [[ 3867.,  6417.,  8490., ..., 11875., 13330., 10127.],
         [ 6099.,  9621., 12535., ..., 16010., 18334., 14583.],
         [ 7039., 10550., 13187., ..., 17508., 19076., 14807.],
         ...,
         [ 7382., 11624., 14322., ..., 11032., 12525.,  9129.],
         [ 7569., 11563., 14109., ..., 12445., 14235., 10011.],
         [ 5708.,  8599., 10277., ...,  8391., 10170.,  7818.]],

        [[ 3867.,  6417.,  8490., ..., 11875., 13330., 10127.],
         [ 6099.,  9621., 12535., ..., 16010., 18334., 14583.],
         [ 7039., 10550., 13187., ..., 17508., 19076., 14807.],
         ...,
         [ 7382., 11624., 14322., ..., 11032., 12525.,  9129.],
         [ 7569., 11563., 14109., ..., 12445., 14235., 10011.],
         [ 5708.,  8599., 10277., ...,  8391., 10170.,  7818.]],

        [[ 3867.,  6417.,  8490., ..., 11875., 13330., 10127.],
         [ 6099.,  9621., 12535., ..., 16010., 18334., 14583.],
         [ 7039., 10550., 13187., ..., 17508., 19076., 14807.],
         ...,
         [ 7382., 11624., 14322., ..., 11032., 12525.,  9129.],
         [ 7569., 11563., 14109., ..., 12445., 14235., 10011.],
         [ 5708.,  8599., 10277., ...,  8391., 10170.,  7818.]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [0], 'to': [2]}
torch node:
{'name': 'conv2d', 'output': array([[[[ 3867.,  6417.,  8490., ..., 11875., 13330., 10127.],
         [ 6099.,  9621., 12535., ..., 16010., 18334., 14583.],
         [ 7039., 10550., 13187., ..., 17508., 19076., 14807.],
         ...,
         [ 7382., 11624., 14322., ..., 11032., 12525.,  9129.],
         [ 7569., 11563., 14109., ..., 12445., 14235., 10011.],
         [ 5708.,  8599., 10277., ...,  8391., 10170.,  7818.]],

        [[ 3867.,  6417.,  8490., ..., 11875., 13330., 10127.],
         [ 6099.,  9621., 12535., ..., 16010., 18334., 14583.],
         [ 7039., 10550., 13187., ..., 17508., 19076., 14807.],
         ...,
         [ 7382., 11624., 14322., ..., 11032., 12525.,  9129.],
         [ 7569., 11563., 14109., ..., 12445., 14235., 10011.],
         [ 5708.,  8599., 10277., ...,  8391., 10170.,  7818.]],

        [[ 3867.,  6417.,  8490., ..., 11875., 13330., 10127.],
         [ 6099.,  9621., 12535., ..., 16010., 18334., 14583.],
         [ 7039., 10550., 13187., ..., 17508., 19076., 14807.],
         ...,
         [ 7382., 11624., 14322., ..., 11032., 12525.,  9129.],
         [ 7569., 11563., 14109., ..., 12445., 14235., 10011.],
         [ 5708.,  8599., 10277., ...,  8391., 10170.,  7818.]],

        ...,

        [[ 3867.,  6417.,  8490., ..., 11875., 13330., 10127.],
         [ 6099.,  9621., 12535., ..., 16010., 18334., 14583.],
         [ 7039., 10550., 13187., ..., 17508., 19076., 14807.],
         ...,
         [ 7382., 11624., 14322., ..., 11032., 12525.,  9129.],
         [ 7569., 11563., 14109., ..., 12445., 14235., 10011.],
         [ 5708.,  8599., 10277., ...,  8391., 10170.,  7818.]],

        [[ 3867.,  6417.,  8490., ..., 11875., 13330., 10127.],
         [ 6099.,  9621., 12535., ..., 16010., 18334., 14583.],
         [ 7039., 10550., 13187., ..., 17508., 19076., 14807.],
         ...,
         [ 7382., 11624., 14322., ..., 11032., 12525.,  9129.],
         [ 7569., 11563., 14109., ..., 12445., 14235., 10011.],
         [ 5708.,  8599., 10277., ...,  8391., 10170.,  7818.]],

        [[ 3867.,  6417.,  8490., ..., 11875., 13330., 10127.],
         [ 6099.,  9621., 12535., ..., 16010., 18334., 14583.],
         [ 7039., 10550., 13187., ..., 17508., 19076., 14807.],
         ...,
         [ 7382., 11624., 14322., ..., 11032., 12525.,  9129.],
         [ 7569., 11563., 14109., ..., 12445., 14235., 10011.],
         [ 5708.,  8599., 10277., ...,  8391., 10170.,  7818.]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [0], 'to': [2]}

generate models:25

analyse output arrays in iter:25

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[162., 164., 169., ..., 184., 190., 202.],
         [153., 158., 164., ..., 178., 189., 201.],
         [157., 161., 164., ..., 178., 190., 202.],
         ...,
         [214., 213., 213., ..., 240., 241., 242.],
         [218., 209., 208., ..., 232., 236., 239.],
         [216., 207., 201., ..., 231., 233., 235.]],

        [[164., 167., 171., ..., 176., 186., 198.],
         [151., 156., 163., ..., 171., 184., 198.],
         [151., 156., 160., ..., 170., 186., 199.],
         ...,
         [205., 193., 185., ..., 207., 206., 209.],
         [209., 188., 180., ..., 195., 196., 200.],
         [204., 189., 174., ..., 192., 194., 198.]],

        [[130., 128., 131., ..., 137., 146., 161.],
         [119., 120., 124., ..., 131., 143., 158.],
         [120., 121., 122., ..., 131., 142., 156.],
         ...,
         [193., 181., 174., ..., 193., 194., 196.],
         [198., 176., 169., ..., 182., 185., 187.],
         [197., 178., 156., ..., 178., 181., 183.]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[12609., 18706., 20492., ..., 16757., 14770., 10197.],
         [19671., 28500., 30185., ..., 23833., 20892., 14297.],
         [21638., 30824., 31766., ..., 24141., 21372., 14458.],
         ...,
         [15376., 18641., 15317., ..., 20205., 18660., 12975.],
         [15540., 18486., 14387., ..., 20128., 19501., 13836.],
         [10862., 12917., 10215., ..., 14681., 14215.,  9945.]],

        [[12609., 18706., 20492., ..., 16757., 14770., 10197.],
         [19671., 28500., 30185., ..., 23833., 20892., 14297.],
         [21638., 30824., 31766., ..., 24141., 21372., 14458.],
         ...,
         [15376., 18641., 15317., ..., 20205., 18660., 12975.],
         [15540., 18486., 14387., ..., 20128., 19501., 13836.],
         [10862., 12917., 10215., ..., 14681., 14215.,  9945.]],

        [[12609., 18706., 20492., ..., 16757., 14770., 10197.],
         [19671., 28500., 30185., ..., 23833., 20892., 14297.],
         [21638., 30824., 31766., ..., 24141., 21372., 14458.],
         ...,
         [15376., 18641., 15317., ..., 20205., 18660., 12975.],
         [15540., 18486., 14387., ..., 20128., 19501., 13836.],
         [10862., 12917., 10215., ..., 14681., 14215.,  9945.]],

        ...,

        [[12609., 18706., 20492., ..., 16757., 14770., 10197.],
         [19671., 28500., 30185., ..., 23833., 20892., 14297.],
         [21638., 30824., 31766., ..., 24141., 21372., 14458.],
         ...,
         [15376., 18641., 15317., ..., 20205., 18660., 12975.],
         [15540., 18486., 14387., ..., 20128., 19501., 13836.],
         [10862., 12917., 10215., ..., 14681., 14215.,  9945.]],

        [[12609., 18706., 20492., ..., 16757., 14770., 10197.],
         [19671., 28500., 30185., ..., 23833., 20892., 14297.],
         [21638., 30824., 31766., ..., 24141., 21372., 14458.],
         ...,
         [15376., 18641., 15317., ..., 20205., 18660., 12975.],
         [15540., 18486., 14387., ..., 20128., 19501., 13836.],
         [10862., 12917., 10215., ..., 14681., 14215.,  9945.]],

        [[12609., 18706., 20492., ..., 16757., 14770., 10197.],
         [19671., 28500., 30185., ..., 23833., 20892., 14297.],
         [21638., 30824., 31766., ..., 24141., 21372., 14458.],
         ...,
         [15376., 18641., 15317., ..., 20205., 18660., 12975.],
         [15540., 18486., 14387., ..., 20128., 19501., 13836.],
         [10862., 12917., 10215., ..., 14681., 14215.,  9945.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [0], 'to': [2]}
ms node:
{'name': 'conv2d', 'output': array([[[[ 7326., 11701., 14806., ..., 13135., 13558.,  9918.],
         [12581., 19846., 24658., ..., 20105., 20644., 15028.],
         [16257., 25137., 30401., ..., 23505., 24443., 17708.],
         ...,
         [11879., 15146., 15308., ..., 17505., 19011., 13983.],
         [14670., 18991., 18301., ..., 20072., 23658., 17954.],
         [11303., 14729., 13794., ..., 15571., 19412., 14939.]],

        [[ 7326., 11701., 14806., ..., 13135., 13558.,  9918.],
         [12581., 19846., 24658., ..., 20105., 20644., 15028.],
         [16257., 25137., 30401., ..., 23505., 24443., 17708.],
         ...,
         [11879., 15146., 15308., ..., 17505., 19011., 13983.],
         [14670., 18991., 18301., ..., 20072., 23658., 17954.],
         [11303., 14729., 13794., ..., 15571., 19412., 14939.]],

        [[ 7326., 11701., 14806., ..., 13135., 13558.,  9918.],
         [12581., 19846., 24658., ..., 20105., 20644., 15028.],
         [16257., 25137., 30401., ..., 23505., 24443., 17708.],
         ...,
         [11879., 15146., 15308., ..., 17505., 19011., 13983.],
         [14670., 18991., 18301., ..., 20072., 23658., 17954.],
         [11303., 14729., 13794., ..., 15571., 19412., 14939.]],

        ...,

        [[ 7326., 11701., 14806., ..., 13135., 13558.,  9918.],
         [12581., 19846., 24658., ..., 20105., 20644., 15028.],
         [16257., 25137., 30401., ..., 23505., 24443., 17708.],
         ...,
         [11879., 15146., 15308., ..., 17505., 19011., 13983.],
         [14670., 18991., 18301., ..., 20072., 23658., 17954.],
         [11303., 14729., 13794., ..., 15571., 19412., 14939.]],

        [[ 7326., 11701., 14806., ..., 13135., 13558.,  9918.],
         [12581., 19846., 24658., ..., 20105., 20644., 15028.],
         [16257., 25137., 30401., ..., 23505., 24443., 17708.],
         ...,
         [11879., 15146., 15308., ..., 17505., 19011., 13983.],
         [14670., 18991., 18301., ..., 20072., 23658., 17954.],
         [11303., 14729., 13794., ..., 15571., 19412., 14939.]],

        [[ 7326., 11701., 14806., ..., 13135., 13558.,  9918.],
         [12581., 19846., 24658., ..., 20105., 20644., 15028.],
         [16257., 25137., 30401., ..., 23505., 24443., 17708.],
         ...,
         [11879., 15146., 15308., ..., 17505., 19011., 13983.],
         [14670., 18991., 18301., ..., 20072., 23658., 17954.],
         [11303., 14729., 13794., ..., 15571., 19412., 14939.]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [0], 'to': [2]}
torch node:
{'name': 'conv2d', 'output': array([[[[ 7326., 11701., 14806., ..., 13135., 13558.,  9918.],
         [12581., 19846., 24658., ..., 20105., 20644., 15028.],
         [16257., 25137., 30401., ..., 23505., 24443., 17708.],
         ...,
         [11879., 15146., 15308., ..., 17505., 19011., 13983.],
         [14670., 18991., 18301., ..., 20072., 23658., 17954.],
         [11303., 14729., 13794., ..., 15571., 19412., 14939.]],

        [[ 7326., 11701., 14806., ..., 13135., 13558.,  9918.],
         [12581., 19846., 24658., ..., 20105., 20644., 15028.],
         [16257., 25137., 30401., ..., 23505., 24443., 17708.],
         ...,
         [11879., 15146., 15308., ..., 17505., 19011., 13983.],
         [14670., 18991., 18301., ..., 20072., 23658., 17954.],
         [11303., 14729., 13794., ..., 15571., 19412., 14939.]],

        [[ 7326., 11701., 14806., ..., 13135., 13558.,  9918.],
         [12581., 19846., 24658., ..., 20105., 20644., 15028.],
         [16257., 25137., 30401., ..., 23505., 24443., 17708.],
         ...,
         [11879., 15146., 15308., ..., 17505., 19011., 13983.],
         [14670., 18991., 18301., ..., 20072., 23658., 17954.],
         [11303., 14729., 13794., ..., 15571., 19412., 14939.]],

        ...,

        [[ 7326., 11701., 14806., ..., 13135., 13558.,  9918.],
         [12581., 19846., 24658., ..., 20105., 20644., 15028.],
         [16257., 25137., 30401., ..., 23505., 24443., 17708.],
         ...,
         [11879., 15146., 15308., ..., 17505., 19011., 13983.],
         [14670., 18991., 18301., ..., 20072., 23658., 17954.],
         [11303., 14729., 13794., ..., 15571., 19412., 14939.]],

        [[ 7326., 11701., 14806., ..., 13135., 13558.,  9918.],
         [12581., 19846., 24658., ..., 20105., 20644., 15028.],
         [16257., 25137., 30401., ..., 23505., 24443., 17708.],
         ...,
         [11879., 15146., 15308., ..., 17505., 19011., 13983.],
         [14670., 18991., 18301., ..., 20072., 23658., 17954.],
         [11303., 14729., 13794., ..., 15571., 19412., 14939.]],

        [[ 7326., 11701., 14806., ..., 13135., 13558.,  9918.],
         [12581., 19846., 24658., ..., 20105., 20644., 15028.],
         [16257., 25137., 30401., ..., 23505., 24443., 17708.],
         ...,
         [11879., 15146., 15308., ..., 17505., 19011., 13983.],
         [14670., 18991., 18301., ..., 20072., 23658., 17954.],
         [11303., 14729., 13794., ..., 15571., 19412., 14939.]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [0], 'to': [2]}

generate models:26

analyse output arrays in iter:27

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[ 45.,  42.,  35., ...,  93.,  51.,  39.],
         [ 46.,  42.,  40., ..., 105.,  66.,  48.],
         [ 43.,  40.,  48., ...,  88.,  77.,  58.],
         ...,
         [ 55.,  67.,  73., ...,  93., 101., 103.],
         [ 55.,  62.,  68., ...,  69.,  81.,  99.],
         [ 58.,  59.,  58., ...,  77.,  66.,  83.]],

        [[ 20.,  21.,  17., ...,  86.,  47.,  36.],
         [ 22.,  22.,  22., ...,  93.,  53.,  39.],
         [ 22.,  21.,  32., ...,  74.,  59.,  44.],
         ...,
         [ 54.,  57.,  64., ...,  87., 116., 123.],
         [ 54.,  53.,  59., ...,  62.,  93., 117.],
         [ 53.,  46.,  45., ...,  68.,  75.,  99.]],

        [[ 19.,  18.,  13., ...,  81.,  42.,  32.],
         [ 20.,  18.,  18., ...,  92.,  52.,  36.],
         [ 19.,  17.,  27., ...,  77.,  60.,  43.],
         ...,
         [ 51.,  54.,  57., ...,  49.,  34.,  30.],
         [ 51.,  50.,  52., ...,  38.,  29.,  35.],
         [ 51.,  44.,  40., ...,  53.,  29.,  31.]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [], 'to': [1, 12]}
tf node:
{'name': 'conv2d', 'output': array([[[[ 2463.,  3771.,  4930., ...,  5440.,  4824.,  3359.],
         [ 3885.,  5760.,  7120., ...,  7902.,  6753.,  4704.],
         [ 4737.,  6853.,  7626., ...,  8120.,  7013.,  4770.],
         ...,
         [ 8115., 11881., 12366., ..., 12593., 10485.,  7270.],
         [ 6065.,  8963.,  9722., ..., 11548.,  9290.,  6131.],
         [ 3763.,  5570.,  6206., ...,  7647.,  6162.,  3973.]],

        [[ 2463.,  3771.,  4930., ...,  5440.,  4824.,  3359.],
         [ 3885.,  5760.,  7120., ...,  7902.,  6753.,  4704.],
         [ 4737.,  6853.,  7626., ...,  8120.,  7013.,  4770.],
         ...,
         [ 8115., 11881., 12366., ..., 12593., 10485.,  7270.],
         [ 6065.,  8963.,  9722., ..., 11548.,  9290.,  6131.],
         [ 3763.,  5570.,  6206., ...,  7647.,  6162.,  3973.]],

        [[ 2463.,  3771.,  4930., ...,  5440.,  4824.,  3359.],
         [ 3885.,  5760.,  7120., ...,  7902.,  6753.,  4704.],
         [ 4737.,  6853.,  7626., ...,  8120.,  7013.,  4770.],
         ...,
         [ 8115., 11881., 12366., ..., 12593., 10485.,  7270.],
         [ 6065.,  8963.,  9722., ..., 11548.,  9290.,  6131.],
         [ 3763.,  5570.,  6206., ...,  7647.,  6162.,  3973.]],

        ...,

        [[ 2463.,  3771.,  4930., ...,  5440.,  4824.,  3359.],
         [ 3885.,  5760.,  7120., ...,  7902.,  6753.,  4704.],
         [ 4737.,  6853.,  7626., ...,  8120.,  7013.,  4770.],
         ...,
         [ 8115., 11881., 12366., ..., 12593., 10485.,  7270.],
         [ 6065.,  8963.,  9722., ..., 11548.,  9290.,  6131.],
         [ 3763.,  5570.,  6206., ...,  7647.,  6162.,  3973.]],

        [[ 2463.,  3771.,  4930., ...,  5440.,  4824.,  3359.],
         [ 3885.,  5760.,  7120., ...,  7902.,  6753.,  4704.],
         [ 4737.,  6853.,  7626., ...,  8120.,  7013.,  4770.],
         ...,
         [ 8115., 11881., 12366., ..., 12593., 10485.,  7270.],
         [ 6065.,  8963.,  9722., ..., 11548.,  9290.,  6131.],
         [ 3763.,  5570.,  6206., ...,  7647.,  6162.,  3973.]],

        [[ 2463.,  3771.,  4930., ...,  5440.,  4824.,  3359.],
         [ 3885.,  5760.,  7120., ...,  7902.,  6753.,  4704.],
         [ 4737.,  6853.,  7626., ...,  8120.,  7013.,  4770.],
         ...,
         [ 8115., 11881., 12366., ..., 12593., 10485.,  7270.],
         [ 6065.,  8963.,  9722., ..., 11548.,  9290.,  6131.],
         [ 3763.,  5570.,  6206., ...,  7647.,  6162.,  3973.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [0], 'to': [2]}
ms node:
{'name': 'conv2d', 'output': array([[[[ 1449.,  2385.,  3295., ...,  4536.,  4506.,  3398.],
         [ 2430.,  3876.,  5256., ...,  6477.,  6422.,  4710.],
         [ 3320.,  5280.,  6862., ...,  7777.,  8083.,  5744.],
         ...,
         [ 6938., 10626., 12920., ..., 12685., 11609.,  9142.],
         [ 5836.,  9094., 11321., ..., 13725., 12239.,  9102.],
         [ 3750.,  6063.,  7546., ..., 10475.,  9330.,  6670.]],

        [[ 1449.,  2385.,  3295., ...,  4536.,  4506.,  3398.],
         [ 2430.,  3876.,  5256., ...,  6477.,  6422.,  4710.],
         [ 3320.,  5280.,  6862., ...,  7777.,  8083.,  5744.],
         ...,
         [ 6938., 10626., 12920., ..., 12685., 11609.,  9142.],
         [ 5836.,  9094., 11321., ..., 13725., 12239.,  9102.],
         [ 3750.,  6063.,  7546., ..., 10475.,  9330.,  6670.]],

        [[ 1449.,  2385.,  3295., ...,  4536.,  4506.,  3398.],
         [ 2430.,  3876.,  5256., ...,  6477.,  6422.,  4710.],
         [ 3320.,  5280.,  6862., ...,  7777.,  8083.,  5744.],
         ...,
         [ 6938., 10626., 12920., ..., 12685., 11609.,  9142.],
         [ 5836.,  9094., 11321., ..., 13725., 12239.,  9102.],
         [ 3750.,  6063.,  7546., ..., 10475.,  9330.,  6670.]],

        ...,

        [[ 1449.,  2385.,  3295., ...,  4536.,  4506.,  3398.],
         [ 2430.,  3876.,  5256., ...,  6477.,  6422.,  4710.],
         [ 3320.,  5280.,  6862., ...,  7777.,  8083.,  5744.],
         ...,
         [ 6938., 10626., 12920., ..., 12685., 11609.,  9142.],
         [ 5836.,  9094., 11321., ..., 13725., 12239.,  9102.],
         [ 3750.,  6063.,  7546., ..., 10475.,  9330.,  6670.]],

        [[ 1449.,  2385.,  3295., ...,  4536.,  4506.,  3398.],
         [ 2430.,  3876.,  5256., ...,  6477.,  6422.,  4710.],
         [ 3320.,  5280.,  6862., ...,  7777.,  8083.,  5744.],
         ...,
         [ 6938., 10626., 12920., ..., 12685., 11609.,  9142.],
         [ 5836.,  9094., 11321., ..., 13725., 12239.,  9102.],
         [ 3750.,  6063.,  7546., ..., 10475.,  9330.,  6670.]],

        [[ 1449.,  2385.,  3295., ...,  4536.,  4506.,  3398.],
         [ 2430.,  3876.,  5256., ...,  6477.,  6422.,  4710.],
         [ 3320.,  5280.,  6862., ...,  7777.,  8083.,  5744.],
         ...,
         [ 6938., 10626., 12920., ..., 12685., 11609.,  9142.],
         [ 5836.,  9094., 11321., ..., 13725., 12239.,  9102.],
         [ 3750.,  6063.,  7546., ..., 10475.,  9330.,  6670.]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [0], 'to': [2]}
torch node:
{'name': 'conv2d', 'output': array([[[[ 1449.,  2385.,  3295., ...,  4536.,  4506.,  3398.],
         [ 2430.,  3876.,  5256., ...,  6477.,  6422.,  4710.],
         [ 3320.,  5280.,  6862., ...,  7777.,  8083.,  5744.],
         ...,
         [ 6938., 10626., 12920., ..., 12685., 11609.,  9142.],
         [ 5836.,  9094., 11321., ..., 13725., 12239.,  9102.],
         [ 3750.,  6063.,  7546., ..., 10475.,  9330.,  6670.]],

        [[ 1449.,  2385.,  3295., ...,  4536.,  4506.,  3398.],
         [ 2430.,  3876.,  5256., ...,  6477.,  6422.,  4710.],
         [ 3320.,  5280.,  6862., ...,  7777.,  8083.,  5744.],
         ...,
         [ 6938., 10626., 12920., ..., 12685., 11609.,  9142.],
         [ 5836.,  9094., 11321., ..., 13725., 12239.,  9102.],
         [ 3750.,  6063.,  7546., ..., 10475.,  9330.,  6670.]],

        [[ 1449.,  2385.,  3295., ...,  4536.,  4506.,  3398.],
         [ 2430.,  3876.,  5256., ...,  6477.,  6422.,  4710.],
         [ 3320.,  5280.,  6862., ...,  7777.,  8083.,  5744.],
         ...,
         [ 6938., 10626., 12920., ..., 12685., 11609.,  9142.],
         [ 5836.,  9094., 11321., ..., 13725., 12239.,  9102.],
         [ 3750.,  6063.,  7546., ..., 10475.,  9330.,  6670.]],

        ...,

        [[ 1449.,  2385.,  3295., ...,  4536.,  4506.,  3398.],
         [ 2430.,  3876.,  5256., ...,  6477.,  6422.,  4710.],
         [ 3320.,  5280.,  6862., ...,  7777.,  8083.,  5744.],
         ...,
         [ 6938., 10626., 12920., ..., 12685., 11609.,  9142.],
         [ 5836.,  9094., 11321., ..., 13725., 12239.,  9102.],
         [ 3750.,  6063.,  7546., ..., 10475.,  9330.,  6670.]],

        [[ 1449.,  2385.,  3295., ...,  4536.,  4506.,  3398.],
         [ 2430.,  3876.,  5256., ...,  6477.,  6422.,  4710.],
         [ 3320.,  5280.,  6862., ...,  7777.,  8083.,  5744.],
         ...,
         [ 6938., 10626., 12920., ..., 12685., 11609.,  9142.],
         [ 5836.,  9094., 11321., ..., 13725., 12239.,  9102.],
         [ 3750.,  6063.,  7546., ..., 10475.,  9330.,  6670.]],

        [[ 1449.,  2385.,  3295., ...,  4536.,  4506.,  3398.],
         [ 2430.,  3876.,  5256., ...,  6477.,  6422.,  4710.],
         [ 3320.,  5280.,  6862., ...,  7777.,  8083.,  5744.],
         ...,
         [ 6938., 10626., 12920., ..., 12685., 11609.,  9142.],
         [ 5836.,  9094., 11321., ..., 13725., 12239.,  9102.],
         [ 3750.,  6063.,  7546., ..., 10475.,  9330.,  6670.]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [0], 'to': [2]}

generate models:28

analyse output arrays in iter:28

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[128., 121., 138., ..., 130., 101., 122.],
         [133., 125., 136., ..., 131., 106., 127.],
         [141., 126., 141., ..., 132., 114., 126.],
         ...,
         [191., 186., 175., ..., 190., 182., 195.],
         [210., 207., 198., ..., 194., 184., 192.],
         [209., 206., 207., ..., 201., 193., 196.]],

        [[141., 134., 151., ..., 150., 121., 141.],
         [146., 138., 149., ..., 151., 126., 147.],
         [155., 139., 154., ..., 152., 134., 146.],
         ...,
         [178., 174., 160., ..., 179., 175., 188.],
         [195., 197., 179., ..., 179., 178., 186.],
         [194., 195., 189., ..., 187., 187., 190.]],

        [[123., 116., 133., ..., 138., 109., 129.],
         [128., 120., 131., ..., 139., 114., 135.],
         [136., 121., 136., ..., 140., 122., 134.],
         ...,
         [126., 124., 112., ..., 138., 137., 145.],
         [143., 144., 129., ..., 138., 133., 142.],
         [142., 143., 138., ..., 145., 142., 146.]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[ 9850., 13533., 12865., ..., 13852., 11747.,  7892.],
         [14311., 19697., 18697., ..., 19431., 16441., 10959.],
         [15117., 20702., 19583., ..., 19977., 16912., 11319.],
         ...,
         [13654., 19628., 20059., ..., 21612., 18692., 12794.],
         [14048., 19790., 19903., ..., 19878., 17377., 11854.],
         [ 9964., 14093., 13985., ..., 13769., 11893.,  8035.]],

        [[ 9850., 13533., 12865., ..., 13852., 11747.,  7892.],
         [14311., 19697., 18697., ..., 19431., 16441., 10959.],
         [15117., 20702., 19583., ..., 19977., 16912., 11319.],
         ...,
         [13654., 19628., 20059., ..., 21612., 18692., 12794.],
         [14048., 19790., 19903., ..., 19878., 17377., 11854.],
         [ 9964., 14093., 13985., ..., 13769., 11893.,  8035.]],

        [[ 9850., 13533., 12865., ..., 13852., 11747.,  7892.],
         [14311., 19697., 18697., ..., 19431., 16441., 10959.],
         [15117., 20702., 19583., ..., 19977., 16912., 11319.],
         ...,
         [13654., 19628., 20059., ..., 21612., 18692., 12794.],
         [14048., 19790., 19903., ..., 19878., 17377., 11854.],
         [ 9964., 14093., 13985., ..., 13769., 11893.,  8035.]],

        ...,

        [[ 9850., 13533., 12865., ..., 13852., 11747.,  7892.],
         [14311., 19697., 18697., ..., 19431., 16441., 10959.],
         [15117., 20702., 19583., ..., 19977., 16912., 11319.],
         ...,
         [13654., 19628., 20059., ..., 21612., 18692., 12794.],
         [14048., 19790., 19903., ..., 19878., 17377., 11854.],
         [ 9964., 14093., 13985., ..., 13769., 11893.,  8035.]],

        [[ 9850., 13533., 12865., ..., 13852., 11747.,  7892.],
         [14311., 19697., 18697., ..., 19431., 16441., 10959.],
         [15117., 20702., 19583., ..., 19977., 16912., 11319.],
         ...,
         [13654., 19628., 20059., ..., 21612., 18692., 12794.],
         [14048., 19790., 19903., ..., 19878., 17377., 11854.],
         [ 9964., 14093., 13985., ..., 13769., 11893.,  8035.]],

        [[ 9850., 13533., 12865., ..., 13852., 11747.,  7892.],
         [14311., 19697., 18697., ..., 19431., 16441., 10959.],
         [15117., 20702., 19583., ..., 19977., 16912., 11319.],
         ...,
         [13654., 19628., 20059., ..., 21612., 18692., 12794.],
         [14048., 19790., 19903., ..., 19878., 17377., 11854.],
         [ 9964., 14093., 13985., ..., 13769., 11893.,  8035.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [0], 'to': [5]}
ms node:
{'name': 'conv2d', 'output': array([[[[ 6380.,  9251., 10158., ..., 11381., 11228.,  7970.],
         [ 9777., 14502., 15937., ..., 16833., 16526., 11663.],
         [11795., 17606., 19310., ..., 19935., 19617., 13828.],
         ...,
         [ 9388., 14497., 17612., ..., 19952., 20526., 14278.],
         [12127., 18718., 22024., ..., 22755., 23439., 16570.],
         [ 9703., 14642., 17018., ..., 16816., 17258., 12242.]],

        [[ 6380.,  9251., 10158., ..., 11381., 11228.,  7970.],
         [ 9777., 14502., 15937., ..., 16833., 16526., 11663.],
         [11795., 17606., 19310., ..., 19935., 19617., 13828.],
         ...,
         [ 9388., 14497., 17612., ..., 19952., 20526., 14278.],
         [12127., 18718., 22024., ..., 22755., 23439., 16570.],
         [ 9703., 14642., 17018., ..., 16816., 17258., 12242.]],

        [[ 6380.,  9251., 10158., ..., 11381., 11228.,  7970.],
         [ 9777., 14502., 15937., ..., 16833., 16526., 11663.],
         [11795., 17606., 19310., ..., 19935., 19617., 13828.],
         ...,
         [ 9388., 14497., 17612., ..., 19952., 20526., 14278.],
         [12127., 18718., 22024., ..., 22755., 23439., 16570.],
         [ 9703., 14642., 17018., ..., 16816., 17258., 12242.]],

        ...,

        [[ 6380.,  9251., 10158., ..., 11381., 11228.,  7970.],
         [ 9777., 14502., 15937., ..., 16833., 16526., 11663.],
         [11795., 17606., 19310., ..., 19935., 19617., 13828.],
         ...,
         [ 9388., 14497., 17612., ..., 19952., 20526., 14278.],
         [12127., 18718., 22024., ..., 22755., 23439., 16570.],
         [ 9703., 14642., 17018., ..., 16816., 17258., 12242.]],

        [[ 6380.,  9251., 10158., ..., 11381., 11228.,  7970.],
         [ 9777., 14502., 15937., ..., 16833., 16526., 11663.],
         [11795., 17606., 19310., ..., 19935., 19617., 13828.],
         ...,
         [ 9388., 14497., 17612., ..., 19952., 20526., 14278.],
         [12127., 18718., 22024., ..., 22755., 23439., 16570.],
         [ 9703., 14642., 17018., ..., 16816., 17258., 12242.]],

        [[ 6380.,  9251., 10158., ..., 11381., 11228.,  7970.],
         [ 9777., 14502., 15937., ..., 16833., 16526., 11663.],
         [11795., 17606., 19310., ..., 19935., 19617., 13828.],
         ...,
         [ 9388., 14497., 17612., ..., 19952., 20526., 14278.],
         [12127., 18718., 22024., ..., 22755., 23439., 16570.],
         [ 9703., 14642., 17018., ..., 16816., 17258., 12242.]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [0], 'to': [5]}
torch node:
{'name': 'conv2d', 'output': array([[[[ 6380.,  9251., 10158., ..., 11381., 11228.,  7970.],
         [ 9777., 14502., 15937., ..., 16833., 16526., 11663.],
         [11795., 17606., 19310., ..., 19935., 19617., 13828.],
         ...,
         [ 9388., 14497., 17612., ..., 19952., 20526., 14278.],
         [12127., 18718., 22024., ..., 22755., 23439., 16570.],
         [ 9703., 14642., 17018., ..., 16816., 17258., 12242.]],

        [[ 6380.,  9251., 10158., ..., 11381., 11228.,  7970.],
         [ 9777., 14502., 15937., ..., 16833., 16526., 11663.],
         [11795., 17606., 19310., ..., 19935., 19617., 13828.],
         ...,
         [ 9388., 14497., 17612., ..., 19952., 20526., 14278.],
         [12127., 18718., 22024., ..., 22755., 23439., 16570.],
         [ 9703., 14642., 17018., ..., 16816., 17258., 12242.]],

        [[ 6380.,  9251., 10158., ..., 11381., 11228.,  7970.],
         [ 9777., 14502., 15937., ..., 16833., 16526., 11663.],
         [11795., 17606., 19310., ..., 19935., 19617., 13828.],
         ...,
         [ 9388., 14497., 17612., ..., 19952., 20526., 14278.],
         [12127., 18718., 22024., ..., 22755., 23439., 16570.],
         [ 9703., 14642., 17018., ..., 16816., 17258., 12242.]],

        ...,

        [[ 6380.,  9251., 10158., ..., 11381., 11228.,  7970.],
         [ 9777., 14502., 15937., ..., 16833., 16526., 11663.],
         [11795., 17606., 19310., ..., 19935., 19617., 13828.],
         ...,
         [ 9388., 14497., 17612., ..., 19952., 20526., 14278.],
         [12127., 18718., 22024., ..., 22755., 23439., 16570.],
         [ 9703., 14642., 17018., ..., 16816., 17258., 12242.]],

        [[ 6380.,  9251., 10158., ..., 11381., 11228.,  7970.],
         [ 9777., 14502., 15937., ..., 16833., 16526., 11663.],
         [11795., 17606., 19310., ..., 19935., 19617., 13828.],
         ...,
         [ 9388., 14497., 17612., ..., 19952., 20526., 14278.],
         [12127., 18718., 22024., ..., 22755., 23439., 16570.],
         [ 9703., 14642., 17018., ..., 16816., 17258., 12242.]],

        [[ 6380.,  9251., 10158., ..., 11381., 11228.,  7970.],
         [ 9777., 14502., 15937., ..., 16833., 16526., 11663.],
         [11795., 17606., 19310., ..., 19935., 19617., 13828.],
         ...,
         [ 9388., 14497., 17612., ..., 19952., 20526., 14278.],
         [12127., 18718., 22024., ..., 22755., 23439., 16570.],
         [ 9703., 14642., 17018., ..., 16816., 17258., 12242.]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [0], 'to': [5]}

generate models:29

analyse output arrays in iter:30

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[126., 122., 126., ..., 124., 120., 117.],
         [122., 119., 121., ..., 124., 122., 117.],
         [122., 121., 121., ..., 126., 123., 121.],
         ...,
         [126., 126., 128., ..., 133., 122., 114.],
         [125., 126., 127., ..., 128., 121., 114.],
         [123., 123., 126., ..., 128., 126., 121.]],

        [[118., 115., 119., ..., 118., 114., 111.],
         [115., 112., 114., ..., 118., 116., 111.],
         [115., 114., 114., ..., 120., 117., 115.],
         ...,
         [118., 118., 120., ..., 125., 114., 106.],
         [117., 118., 119., ..., 120., 113., 106.],
         [115., 115., 118., ..., 119., 118., 113.]],

        [[110., 108., 111., ..., 106., 102.,  99.],
         [107., 104., 106., ..., 106., 104.,  99.],
         [107., 106., 106., ..., 108., 105., 103.],
         ...,
         [107., 107., 109., ..., 114., 103.,  95.],
         [106., 107., 108., ..., 109., 102.,  95.],
         [104., 104., 107., ..., 109., 107., 102.]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[ 8794., 12460., 12650., ..., 12656., 10630.,  6982.],
         [12415., 17626., 17917., ..., 17794., 14976.,  9846.],
         [12479., 17763., 18236., ..., 17999., 15171.,  9984.],
         ...,
         [11341., 15833., 16109., ..., 19246., 16607., 10845.],
         [10601., 15054., 15392., ..., 15339., 12918.,  8752.],
         [ 7103., 10043., 10212., ..., 10180.,  8443.,  5432.]],

        [[ 8794., 12460., 12650., ..., 12656., 10630.,  6982.],
         [12415., 17626., 17917., ..., 17794., 14976.,  9846.],
         [12479., 17763., 18236., ..., 17999., 15171.,  9984.],
         ...,
         [11341., 15833., 16109., ..., 19246., 16607., 10845.],
         [10601., 15054., 15392., ..., 15339., 12918.,  8752.],
         [ 7103., 10043., 10212., ..., 10180.,  8443.,  5432.]],

        [[ 8794., 12460., 12650., ..., 12656., 10630.,  6982.],
         [12415., 17626., 17917., ..., 17794., 14976.,  9846.],
         [12479., 17763., 18236., ..., 17999., 15171.,  9984.],
         ...,
         [11341., 15833., 16109., ..., 19246., 16607., 10845.],
         [10601., 15054., 15392., ..., 15339., 12918.,  8752.],
         [ 7103., 10043., 10212., ..., 10180.,  8443.,  5432.]],

        ...,

        [[ 8794., 12460., 12650., ..., 12656., 10630.,  6982.],
         [12415., 17626., 17917., ..., 17794., 14976.,  9846.],
         [12479., 17763., 18236., ..., 17999., 15171.,  9984.],
         ...,
         [11341., 15833., 16109., ..., 19246., 16607., 10845.],
         [10601., 15054., 15392., ..., 15339., 12918.,  8752.],
         [ 7103., 10043., 10212., ..., 10180.,  8443.,  5432.]],

        [[ 8794., 12460., 12650., ..., 12656., 10630.,  6982.],
         [12415., 17626., 17917., ..., 17794., 14976.,  9846.],
         [12479., 17763., 18236., ..., 17999., 15171.,  9984.],
         ...,
         [11341., 15833., 16109., ..., 19246., 16607., 10845.],
         [10601., 15054., 15392., ..., 15339., 12918.,  8752.],
         [ 7103., 10043., 10212., ..., 10180.,  8443.,  5432.]],

        [[ 8794., 12460., 12650., ..., 12656., 10630.,  6982.],
         [12415., 17626., 17917., ..., 17794., 14976.,  9846.],
         [12479., 17763., 18236., ..., 17999., 15171.,  9984.],
         ...,
         [11341., 15833., 16109., ..., 19246., 16607., 10845.],
         [10601., 15054., 15392., ..., 15339., 12918.,  8752.],
         [ 7103., 10043., 10212., ..., 10180.,  8443.,  5432.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [0], 'to': [2, 24]}
ms node:
{'name': 'conv2d', 'output': array([[[[ 5556.,  8436.,  9979., ..., 10232.,  9941.,  6984.],
         [ 8443., 12833., 15193., ..., 15393., 15026., 10590.],
         [ 9853., 15002., 17811., ..., 18130., 17715., 12487.],
         ...,
         [ 8551., 12308., 14079., ..., 20014., 19921., 14063.],
         [ 9757., 14556., 17335., ..., 18475., 18289., 13341.],
         [ 7060., 10696., 12685., ..., 12703., 12293.,  8571.]],

        [[ 5556.,  8436.,  9979., ..., 10232.,  9941.,  6984.],
         [ 8443., 12833., 15193., ..., 15393., 15026., 10590.],
         [ 9853., 15002., 17811., ..., 18130., 17715., 12487.],
         ...,
         [ 8551., 12308., 14079., ..., 20014., 19921., 14063.],
         [ 9757., 14556., 17335., ..., 18475., 18289., 13341.],
         [ 7060., 10696., 12685., ..., 12703., 12293.,  8571.]],

        [[ 5556.,  8436.,  9979., ..., 10232.,  9941.,  6984.],
         [ 8443., 12833., 15193., ..., 15393., 15026., 10590.],
         [ 9853., 15002., 17811., ..., 18130., 17715., 12487.],
         ...,
         [ 8551., 12308., 14079., ..., 20014., 19921., 14063.],
         [ 9757., 14556., 17335., ..., 18475., 18289., 13341.],
         [ 7060., 10696., 12685., ..., 12703., 12293.,  8571.]],

        ...,

        [[ 5556.,  8436.,  9979., ..., 10232.,  9941.,  6984.],
         [ 8443., 12833., 15193., ..., 15393., 15026., 10590.],
         [ 9853., 15002., 17811., ..., 18130., 17715., 12487.],
         ...,
         [ 8551., 12308., 14079., ..., 20014., 19921., 14063.],
         [ 9757., 14556., 17335., ..., 18475., 18289., 13341.],
         [ 7060., 10696., 12685., ..., 12703., 12293.,  8571.]],

        [[ 5556.,  8436.,  9979., ..., 10232.,  9941.,  6984.],
         [ 8443., 12833., 15193., ..., 15393., 15026., 10590.],
         [ 9853., 15002., 17811., ..., 18130., 17715., 12487.],
         ...,
         [ 8551., 12308., 14079., ..., 20014., 19921., 14063.],
         [ 9757., 14556., 17335., ..., 18475., 18289., 13341.],
         [ 7060., 10696., 12685., ..., 12703., 12293.,  8571.]],

        [[ 5556.,  8436.,  9979., ..., 10232.,  9941.,  6984.],
         [ 8443., 12833., 15193., ..., 15393., 15026., 10590.],
         [ 9853., 15002., 17811., ..., 18130., 17715., 12487.],
         ...,
         [ 8551., 12308., 14079., ..., 20014., 19921., 14063.],
         [ 9757., 14556., 17335., ..., 18475., 18289., 13341.],
         [ 7060., 10696., 12685., ..., 12703., 12293.,  8571.]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [0], 'to': [2, 24]}
torch node:
{'name': 'conv2d', 'output': array([[[[ 5556.,  8436.,  9979., ..., 10232.,  9941.,  6984.],
         [ 8443., 12833., 15193., ..., 15393., 15026., 10590.],
         [ 9853., 15002., 17811., ..., 18130., 17715., 12487.],
         ...,
         [ 8551., 12308., 14079., ..., 20014., 19921., 14063.],
         [ 9757., 14556., 17335., ..., 18475., 18289., 13341.],
         [ 7060., 10696., 12685., ..., 12703., 12293.,  8571.]],

        [[ 5556.,  8436.,  9979., ..., 10232.,  9941.,  6984.],
         [ 8443., 12833., 15193., ..., 15393., 15026., 10590.],
         [ 9853., 15002., 17811., ..., 18130., 17715., 12487.],
         ...,
         [ 8551., 12308., 14079., ..., 20014., 19921., 14063.],
         [ 9757., 14556., 17335., ..., 18475., 18289., 13341.],
         [ 7060., 10696., 12685., ..., 12703., 12293.,  8571.]],

        [[ 5556.,  8436.,  9979., ..., 10232.,  9941.,  6984.],
         [ 8443., 12833., 15193., ..., 15393., 15026., 10590.],
         [ 9853., 15002., 17811., ..., 18130., 17715., 12487.],
         ...,
         [ 8551., 12308., 14079., ..., 20014., 19921., 14063.],
         [ 9757., 14556., 17335., ..., 18475., 18289., 13341.],
         [ 7060., 10696., 12685., ..., 12703., 12293.,  8571.]],

        ...,

        [[ 5556.,  8436.,  9979., ..., 10232.,  9941.,  6984.],
         [ 8443., 12833., 15193., ..., 15393., 15026., 10590.],
         [ 9853., 15002., 17811., ..., 18130., 17715., 12487.],
         ...,
         [ 8551., 12308., 14079., ..., 20014., 19921., 14063.],
         [ 9757., 14556., 17335., ..., 18475., 18289., 13341.],
         [ 7060., 10696., 12685., ..., 12703., 12293.,  8571.]],

        [[ 5556.,  8436.,  9979., ..., 10232.,  9941.,  6984.],
         [ 8443., 12833., 15193., ..., 15393., 15026., 10590.],
         [ 9853., 15002., 17811., ..., 18130., 17715., 12487.],
         ...,
         [ 8551., 12308., 14079., ..., 20014., 19921., 14063.],
         [ 9757., 14556., 17335., ..., 18475., 18289., 13341.],
         [ 7060., 10696., 12685., ..., 12703., 12293.,  8571.]],

        [[ 5556.,  8436.,  9979., ..., 10232.,  9941.,  6984.],
         [ 8443., 12833., 15193., ..., 15393., 15026., 10590.],
         [ 9853., 15002., 17811., ..., 18130., 17715., 12487.],
         ...,
         [ 8551., 12308., 14079., ..., 20014., 19921., 14063.],
         [ 9757., 14556., 17335., ..., 18475., 18289., 13341.],
         [ 7060., 10696., 12685., ..., 12703., 12293.,  8571.]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [0], 'to': [2, 24]}

generate models:31

analyse output arrays in iter:31

pre layer res:
28:exp
{'name': 'exp', 'output': array([[[[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [2.0382811e+34, 2.5154387e+30, 1.8586717e+31, ...,
          3.1855931e+16, 4.3112318e+15, 2.1464359e+14],
         [1.5060974e+35, 7.4984170e+33, 1.3733831e+32, ...,
          2.5813129e+20, 2.9048850e+13, 2.6489123e+10],
         [5.5406225e+34, 5.5406225e+34, 1.3733831e+32, ...,
          2.3538525e+17, 1.4462571e+12, 3.5849126e+09]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [1.3733831e+32, 1.6948892e+28, 3.4042762e+29, ...,
          2.9048850e+13, 3.9313342e+12, 7.2004903e+10],
         [2.0382811e+34, 5.0523936e+31, 3.4042762e+29, ...,
          3.1855931e+16, 2.6489123e+10, 2.4154952e+07],
         [5.5406225e+34, 2.7585135e+33, 1.2523633e+29, ...,
          1.0686474e+13, 1.3188157e+09, 3.2690175e+06]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [1.1420074e+26, 2.5813129e+20, 3.4934271e+19, ...,
          7.2004903e+10, 9.7448028e+09, 1.7848230e+08],
         [8.4383568e+26, 2.0916596e+24, 1.9073466e+21, ...,
          3.9313342e+12, 2.4154952e+07, 2.2026467e+04],
         [2.2937833e+27, 3.1042978e+26, 3.8310077e+22, ...,
          4.8516522e+08, 1.6275480e+05, 2.9809580e+03]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [0], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 1.1440945e+26, 2.9511036e+20],
         [2.3834141e+37, 2.3834149e+37, 3.5577062e+32, ...,
          2.8116001e+33, 1.1430521e+26, 2.9336948e+20]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 1.1440945e+26, 2.9511036e+20],
         [2.3834141e+37, 2.3834149e+37, 3.5577062e+32, ...,
          2.8116001e+33, 1.1430521e+26, 2.9336948e+20]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 1.1440945e+26, 2.9511036e+20],
         [2.3834141e+37, 2.3834149e+37, 3.5577062e+32, ...,
          2.8116001e+33, 1.1430521e+26, 2.9336948e+20]],

        ...,

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 1.1440945e+26, 2.9511036e+20],
         [2.3834141e+37, 2.3834149e+37, 3.5577062e+32, ...,
          2.8116001e+33, 1.1430521e+26, 2.9336948e+20]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 1.1440945e+26, 2.9511036e+20],
         [2.3834141e+37, 2.3834149e+37, 3.5577062e+32, ...,
          2.8116001e+33, 1.1430521e+26, 2.9336948e+20]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 1.1440945e+26, 2.9511036e+20],
         [2.3834141e+37, 2.3834149e+37, 3.5577062e+32, ...,
          2.8116001e+33, 1.1430521e+26, 2.9336948e+20]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [28], 'to': [17]}
ms node:
{'name': 'conv2d', 'output': array([[[[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 4.1534552e+35, 1.0530007e+23],
         [          inf,           inf, 6.2689700e+35, ...,
          4.5159297e+37, 4.0982352e+35, 2.9340130e+20]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 4.1534552e+35, 1.0530007e+23],
         [          inf,           inf, 6.2689700e+35, ...,
          4.5159297e+37, 4.0982352e+35, 2.9340130e+20]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 4.1534552e+35, 1.0530007e+23],
         [          inf,           inf, 6.2689700e+35, ...,
          4.5159297e+37, 4.0982352e+35, 2.9340130e+20]],

        ...,

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 4.1534552e+35, 1.0530007e+23],
         [          inf,           inf, 6.2689700e+35, ...,
          4.5159297e+37, 4.0982352e+35, 2.9340130e+20]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 4.1534552e+35, 1.0530007e+23],
         [          inf,           inf, 6.2689700e+35, ...,
          4.5159297e+37, 4.0982352e+35, 2.9340130e+20]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 4.1534552e+35, 1.0530007e+23],
         [          inf,           inf, 6.2689700e+35, ...,
          4.5159297e+37, 4.0982352e+35, 2.9340130e+20]]]], dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [28], 'to': [17]}
torch node:
{'name': 'conv2d', 'output': array([[[[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 4.1534564e+35, 1.0530007e+23],
         [          inf,           inf, 6.2689715e+35, ...,
          4.5159307e+37, 4.0982360e+35, 2.9340134e+20]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 4.1534564e+35, 1.0530007e+23],
         [          inf,           inf, 6.2689715e+35, ...,
          4.5159307e+37, 4.0982360e+35, 2.9340134e+20]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 4.1534564e+35, 1.0530007e+23],
         [          inf,           inf, 6.2689715e+35, ...,
          4.5159307e+37, 4.0982360e+35, 2.9340134e+20]],

        ...,

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 4.1534564e+35, 1.0530007e+23],
         [          inf,           inf, 6.2689715e+35, ...,
          4.5159307e+37, 4.0982360e+35, 2.9340134e+20]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 4.1534564e+35, 1.0530007e+23],
         [          inf,           inf, 6.2689715e+35, ...,
          4.5159307e+37, 4.0982360e+35, 2.9340134e+20]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 4.1534564e+35, 1.0530007e+23],
         [          inf,           inf, 6.2689715e+35, ...,
          4.5159307e+37, 4.0982360e+35, 2.9340134e+20]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [28], 'to': [17]}

generate models:32

analyse output arrays in iter:32

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[ 50.,  51.,  42., ...,  48.,  18.,  14.],
         [ 86.,  92.,  82., ...,  46.,  17.,  11.],
         [ 43.,  43.,  51., ...,  42.,  10.,   6.],
         ...,
         [220., 209., 199., ..., 177., 176., 175.],
         [188., 182., 182., ..., 176., 175., 174.],
         [188., 184., 186., ..., 176., 176., 173.]],

        [[ 64.,  63.,  55., ...,  45.,  18.,  15.],
         [107., 110.,  99., ...,  43.,  17.,  12.],
         [ 60.,  56.,  65., ...,  39.,  10.,   6.],
         ...,
         [165., 174., 172., ..., 171., 170., 168.],
         [178., 170., 161., ..., 168., 167., 166.],
         [167., 163., 167., ..., 169., 168., 165.]],

        [[ 37.,  41.,  41., ...,  42.,  14.,  12.],
         [ 67.,  76.,  67., ...,  41.,  14.,  10.],
         [ 42.,  41.,  46., ...,  37.,   9.,   5.],
         ...,
         [151., 165., 164., ..., 168., 167., 166.],
         [162., 162., 157., ..., 166., 165., 164.],
         [162., 157., 160., ..., 166., 166., 162.]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[ 3965.,  5650.,  5795., ...,  4965.,  3359.,  2341.],
         [ 4772.,  6898.,  7216., ..., 10631.,  6785.,  3441.],
         [ 3498.,  5499.,  6522., ..., 13748.,  9129.,  3618.],
         ...,
         [13814., 17112., 15045., ..., 23098., 20897., 14188.],
         [11928., 15918., 15019., ..., 21277., 18190., 12104.],
         [ 9866., 13509., 12974., ..., 14117., 12102.,  8085.]],

        [[ 3965.,  5650.,  5795., ...,  4965.,  3359.,  2341.],
         [ 4772.,  6898.,  7216., ..., 10631.,  6785.,  3441.],
         [ 3498.,  5499.,  6522., ..., 13748.,  9129.,  3618.],
         ...,
         [13814., 17112., 15045., ..., 23098., 20897., 14188.],
         [11928., 15918., 15019., ..., 21277., 18190., 12104.],
         [ 9866., 13509., 12974., ..., 14117., 12102.,  8085.]],

        [[ 3965.,  5650.,  5795., ...,  4965.,  3359.,  2341.],
         [ 4772.,  6898.,  7216., ..., 10631.,  6785.,  3441.],
         [ 3498.,  5499.,  6522., ..., 13748.,  9129.,  3618.],
         ...,
         [13814., 17112., 15045., ..., 23098., 20897., 14188.],
         [11928., 15918., 15019., ..., 21277., 18190., 12104.],
         [ 9866., 13509., 12974., ..., 14117., 12102.,  8085.]],

        ...,

        [[ 3965.,  5650.,  5795., ...,  4965.,  3359.,  2341.],
         [ 4772.,  6898.,  7216., ..., 10631.,  6785.,  3441.],
         [ 3498.,  5499.,  6522., ..., 13748.,  9129.,  3618.],
         ...,
         [13814., 17112., 15045., ..., 23098., 20897., 14188.],
         [11928., 15918., 15019., ..., 21277., 18190., 12104.],
         [ 9866., 13509., 12974., ..., 14117., 12102.,  8085.]],

        [[ 3965.,  5650.,  5795., ...,  4965.,  3359.,  2341.],
         [ 4772.,  6898.,  7216., ..., 10631.,  6785.,  3441.],
         [ 3498.,  5499.,  6522., ..., 13748.,  9129.,  3618.],
         ...,
         [13814., 17112., 15045., ..., 23098., 20897., 14188.],
         [11928., 15918., 15019., ..., 21277., 18190., 12104.],
         [ 9866., 13509., 12974., ..., 14117., 12102.,  8085.]],

        [[ 3965.,  5650.,  5795., ...,  4965.,  3359.,  2341.],
         [ 4772.,  6898.,  7216., ..., 10631.,  6785.,  3441.],
         [ 3498.,  5499.,  6522., ..., 13748.,  9129.,  3618.],
         ...,
         [13814., 17112., 15045., ..., 23098., 20897., 14188.],
         [11928., 15918., 15019., ..., 21277., 18190., 12104.],
         [ 9866., 13509., 12974., ..., 14117., 12102.,  8085.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [0], 'to': [2]}
ms node:
{'name': 'conv2d', 'output': array([[[[ 2665.,  4228.,  5052., ...,  3993.,  2990.,  2201.],
         [ 3279.,  5265.,  6350., ...,  8739.,  6349.,  3563.],
         [ 3347.,  5267.,  6850., ..., 14156., 10899.,  5532.],
         ...,
         [10875., 15184., 15025., ..., 19213., 22213., 16775.],
         [11015., 16198., 16978., ..., 23730., 24755., 17745.],
         [ 8304., 12972., 14409., ..., 17769., 17670., 12626.]],

        [[ 2665.,  4228.,  5052., ...,  3993.,  2990.,  2201.],
         [ 3279.,  5265.,  6350., ...,  8739.,  6349.,  3563.],
         [ 3347.,  5267.,  6850., ..., 14156., 10899.,  5532.],
         ...,
         [10875., 15184., 15025., ..., 19213., 22213., 16775.],
         [11015., 16198., 16978., ..., 23730., 24755., 17745.],
         [ 8304., 12972., 14409., ..., 17769., 17670., 12626.]],

        [[ 2665.,  4228.,  5052., ...,  3993.,  2990.,  2201.],
         [ 3279.,  5265.,  6350., ...,  8739.,  6349.,  3563.],
         [ 3347.,  5267.,  6850., ..., 14156., 10899.,  5532.],
         ...,
         [10875., 15184., 15025., ..., 19213., 22213., 16775.],
         [11015., 16198., 16978., ..., 23730., 24755., 17745.],
         [ 8304., 12972., 14409., ..., 17769., 17670., 12626.]],

        ...,

        [[ 2665.,  4228.,  5052., ...,  3993.,  2990.,  2201.],
         [ 3279.,  5265.,  6350., ...,  8739.,  6349.,  3563.],
         [ 3347.,  5267.,  6850., ..., 14156., 10899.,  5532.],
         ...,
         [10875., 15184., 15025., ..., 19213., 22213., 16775.],
         [11015., 16198., 16978., ..., 23730., 24755., 17745.],
         [ 8304., 12972., 14409., ..., 17769., 17670., 12626.]],

        [[ 2665.,  4228.,  5052., ...,  3993.,  2990.,  2201.],
         [ 3279.,  5265.,  6350., ...,  8739.,  6349.,  3563.],
         [ 3347.,  5267.,  6850., ..., 14156., 10899.,  5532.],
         ...,
         [10875., 15184., 15025., ..., 19213., 22213., 16775.],
         [11015., 16198., 16978., ..., 23730., 24755., 17745.],
         [ 8304., 12972., 14409., ..., 17769., 17670., 12626.]],

        [[ 2665.,  4228.,  5052., ...,  3993.,  2990.,  2201.],
         [ 3279.,  5265.,  6350., ...,  8739.,  6349.,  3563.],
         [ 3347.,  5267.,  6850., ..., 14156., 10899.,  5532.],
         ...,
         [10875., 15184., 15025., ..., 19213., 22213., 16775.],
         [11015., 16198., 16978., ..., 23730., 24755., 17745.],
         [ 8304., 12972., 14409., ..., 17769., 17670., 12626.]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [0], 'to': [2]}
torch node:
{'name': 'conv2d', 'output': array([[[[ 2665.,  4228.,  5052., ...,  3993.,  2990.,  2201.],
         [ 3279.,  5265.,  6350., ...,  8739.,  6349.,  3563.],
         [ 3347.,  5267.,  6850., ..., 14156., 10899.,  5532.],
         ...,
         [10875., 15184., 15025., ..., 19213., 22213., 16775.],
         [11015., 16198., 16978., ..., 23730., 24755., 17745.],
         [ 8304., 12972., 14409., ..., 17769., 17670., 12626.]],

        [[ 2665.,  4228.,  5052., ...,  3993.,  2990.,  2201.],
         [ 3279.,  5265.,  6350., ...,  8739.,  6349.,  3563.],
         [ 3347.,  5267.,  6850., ..., 14156., 10899.,  5532.],
         ...,
         [10875., 15184., 15025., ..., 19213., 22213., 16775.],
         [11015., 16198., 16978., ..., 23730., 24755., 17745.],
         [ 8304., 12972., 14409., ..., 17769., 17670., 12626.]],

        [[ 2665.,  4228.,  5052., ...,  3993.,  2990.,  2201.],
         [ 3279.,  5265.,  6350., ...,  8739.,  6349.,  3563.],
         [ 3347.,  5267.,  6850., ..., 14156., 10899.,  5532.],
         ...,
         [10875., 15184., 15025., ..., 19213., 22213., 16775.],
         [11015., 16198., 16978., ..., 23730., 24755., 17745.],
         [ 8304., 12972., 14409., ..., 17769., 17670., 12626.]],

        ...,

        [[ 2665.,  4228.,  5052., ...,  3993.,  2990.,  2201.],
         [ 3279.,  5265.,  6350., ...,  8739.,  6349.,  3563.],
         [ 3347.,  5267.,  6850., ..., 14156., 10899.,  5532.],
         ...,
         [10875., 15184., 15025., ..., 19213., 22213., 16775.],
         [11015., 16198., 16978., ..., 23730., 24755., 17745.],
         [ 8304., 12972., 14409., ..., 17769., 17670., 12626.]],

        [[ 2665.,  4228.,  5052., ...,  3993.,  2990.,  2201.],
         [ 3279.,  5265.,  6350., ...,  8739.,  6349.,  3563.],
         [ 3347.,  5267.,  6850., ..., 14156., 10899.,  5532.],
         ...,
         [10875., 15184., 15025., ..., 19213., 22213., 16775.],
         [11015., 16198., 16978., ..., 23730., 24755., 17745.],
         [ 8304., 12972., 14409., ..., 17769., 17670., 12626.]],

        [[ 2665.,  4228.,  5052., ...,  3993.,  2990.,  2201.],
         [ 3279.,  5265.,  6350., ...,  8739.,  6349.,  3563.],
         [ 3347.,  5267.,  6850., ..., 14156., 10899.,  5532.],
         ...,
         [10875., 15184., 15025., ..., 19213., 22213., 16775.],
         [11015., 16198., 16978., ..., 23730., 24755., 17745.],
         [ 8304., 12972., 14409., ..., 17769., 17670., 12626.]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [0], 'to': [2]}

generate models:33

analyse output arrays in iter:33

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[  7.,   7.,   5., ...,  82.,  80.,  69.],
         [  6.,   6.,   5., ...,  85.,  86.,  81.],
         [  1.,   7.,   8., ...,  98.,  96.,  86.],
         ...,
         [150., 135., 129., ...,  72.,  45.,  26.],
         [156., 153., 138., ...,  57.,  23.,  38.],
         [183., 191., 182., ...,  83.,  67., 114.]],

        [[  5.,   5.,   4., ...,  84.,  85.,  73.],
         [  4.,   4.,   3., ...,  86.,  88.,  80.],
         [  1.,   7.,   8., ...,  96.,  96.,  84.],
         ...,
         [153., 136., 129., ...,  72.,  51.,  32.],
         [156., 151., 136., ...,  58.,  32.,  45.],
         [193., 199., 189., ...,  83.,  74., 120.]],

        [[  8.,   8.,   6., ...,  78.,  81.,  68.],
         [  8.,   9.,   8., ...,  77.,  81.,  72.],
         [  6.,  12.,  13., ...,  83.,  85.,  73.],
         ...,
         [139., 121., 113., ...,  69.,  63.,  51.],
         [139., 130., 110., ...,  56.,  48.,  64.],
         [183., 185., 171., ...,  76.,  81., 119.]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [], 'to': [1, 17]}
tf node:
{'name': 'conv2d', 'output': array([[[[ 2770.,  4002.,  4477., ..., 10222.,  8334.,  5205.],
         [ 4846.,  7315.,  8155., ..., 14457., 11769.,  7468.],
         [ 5786.,  9017., 10489., ..., 15760., 12438.,  7800.],
         ...,
         [13177., 17379., 17442., ..., 17076., 13795.,  8472.],
         [12612., 16439., 15530., ..., 14824., 11541.,  6872.],
         [ 9009., 12084., 11031., ...,  9652.,  7147.,  3968.]],

        [[ 2770.,  4002.,  4477., ..., 10222.,  8334.,  5205.],
         [ 4846.,  7315.,  8155., ..., 14457., 11769.,  7468.],
         [ 5786.,  9017., 10489., ..., 15760., 12438.,  7800.],
         ...,
         [13177., 17379., 17442., ..., 17076., 13795.,  8472.],
         [12612., 16439., 15530., ..., 14824., 11541.,  6872.],
         [ 9009., 12084., 11031., ...,  9652.,  7147.,  3968.]],

        [[ 2770.,  4002.,  4477., ..., 10222.,  8334.,  5205.],
         [ 4846.,  7315.,  8155., ..., 14457., 11769.,  7468.],
         [ 5786.,  9017., 10489., ..., 15760., 12438.,  7800.],
         ...,
         [13177., 17379., 17442., ..., 17076., 13795.,  8472.],
         [12612., 16439., 15530., ..., 14824., 11541.,  6872.],
         [ 9009., 12084., 11031., ...,  9652.,  7147.,  3968.]],

        ...,

        [[ 2770.,  4002.,  4477., ..., 10222.,  8334.,  5205.],
         [ 4846.,  7315.,  8155., ..., 14457., 11769.,  7468.],
         [ 5786.,  9017., 10489., ..., 15760., 12438.,  7800.],
         ...,
         [13177., 17379., 17442., ..., 17076., 13795.,  8472.],
         [12612., 16439., 15530., ..., 14824., 11541.,  6872.],
         [ 9009., 12084., 11031., ...,  9652.,  7147.,  3968.]],

        [[ 2770.,  4002.,  4477., ..., 10222.,  8334.,  5205.],
         [ 4846.,  7315.,  8155., ..., 14457., 11769.,  7468.],
         [ 5786.,  9017., 10489., ..., 15760., 12438.,  7800.],
         ...,
         [13177., 17379., 17442., ..., 17076., 13795.,  8472.],
         [12612., 16439., 15530., ..., 14824., 11541.,  6872.],
         [ 9009., 12084., 11031., ...,  9652.,  7147.,  3968.]],

        [[ 2770.,  4002.,  4477., ..., 10222.,  8334.,  5205.],
         [ 4846.,  7315.,  8155., ..., 14457., 11769.,  7468.],
         [ 5786.,  9017., 10489., ..., 15760., 12438.,  7800.],
         ...,
         [13177., 17379., 17442., ..., 17076., 13795.,  8472.],
         [12612., 16439., 15530., ..., 14824., 11541.,  6872.],
         [ 9009., 12084., 11031., ...,  9652.,  7147.,  3968.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [0], 'to': [2]}
ms node:
{'name': 'conv2d', 'output': array([[[[  999.,  1523.,  2129., ...,  7864.,  7902.,  5093.],
         [ 3270.,  4901.,  6522., ..., 11936., 12004.,  7985.],
         [ 4308.,  6611.,  8934., ..., 15203., 14686.,  9703.],
         ...,
         [10799., 15838., 17463., ..., 17292., 16311., 11466.],
         [11274., 16213., 17447., ..., 18513., 16628., 10935.],
         [ 8899., 13002., 13802., ..., 13295., 11524.,  7331.]],

        [[  999.,  1523.,  2129., ...,  7864.,  7902.,  5093.],
         [ 3270.,  4901.,  6522., ..., 11936., 12004.,  7985.],
         [ 4308.,  6611.,  8934., ..., 15203., 14686.,  9703.],
         ...,
         [10799., 15838., 17463., ..., 17292., 16311., 11466.],
         [11274., 16213., 17447., ..., 18513., 16628., 10935.],
         [ 8899., 13002., 13802., ..., 13295., 11524.,  7331.]],

        [[  999.,  1523.,  2129., ...,  7864.,  7902.,  5093.],
         [ 3270.,  4901.,  6522., ..., 11936., 12004.,  7985.],
         [ 4308.,  6611.,  8934., ..., 15203., 14686.,  9703.],
         ...,
         [10799., 15838., 17463., ..., 17292., 16311., 11466.],
         [11274., 16213., 17447., ..., 18513., 16628., 10935.],
         [ 8899., 13002., 13802., ..., 13295., 11524.,  7331.]],

        ...,

        [[  999.,  1523.,  2129., ...,  7864.,  7902.,  5093.],
         [ 3270.,  4901.,  6522., ..., 11936., 12004.,  7985.],
         [ 4308.,  6611.,  8934., ..., 15203., 14686.,  9703.],
         ...,
         [10799., 15838., 17463., ..., 17292., 16311., 11466.],
         [11274., 16213., 17447., ..., 18513., 16628., 10935.],
         [ 8899., 13002., 13802., ..., 13295., 11524.,  7331.]],

        [[  999.,  1523.,  2129., ...,  7864.,  7902.,  5093.],
         [ 3270.,  4901.,  6522., ..., 11936., 12004.,  7985.],
         [ 4308.,  6611.,  8934., ..., 15203., 14686.,  9703.],
         ...,
         [10799., 15838., 17463., ..., 17292., 16311., 11466.],
         [11274., 16213., 17447., ..., 18513., 16628., 10935.],
         [ 8899., 13002., 13802., ..., 13295., 11524.,  7331.]],

        [[  999.,  1523.,  2129., ...,  7864.,  7902.,  5093.],
         [ 3270.,  4901.,  6522., ..., 11936., 12004.,  7985.],
         [ 4308.,  6611.,  8934., ..., 15203., 14686.,  9703.],
         ...,
         [10799., 15838., 17463., ..., 17292., 16311., 11466.],
         [11274., 16213., 17447., ..., 18513., 16628., 10935.],
         [ 8899., 13002., 13802., ..., 13295., 11524.,  7331.]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [0], 'to': [2]}
torch node:
{'name': 'conv2d', 'output': array([[[[  999.,  1523.,  2129., ...,  7864.,  7902.,  5093.],
         [ 3270.,  4901.,  6522., ..., 11936., 12004.,  7985.],
         [ 4308.,  6611.,  8934., ..., 15203., 14686.,  9703.],
         ...,
         [10799., 15838., 17463., ..., 17292., 16311., 11466.],
         [11274., 16213., 17447., ..., 18513., 16628., 10935.],
         [ 8899., 13002., 13802., ..., 13295., 11524.,  7331.]],

        [[  999.,  1523.,  2129., ...,  7864.,  7902.,  5093.],
         [ 3270.,  4901.,  6522., ..., 11936., 12004.,  7985.],
         [ 4308.,  6611.,  8934., ..., 15203., 14686.,  9703.],
         ...,
         [10799., 15838., 17463., ..., 17292., 16311., 11466.],
         [11274., 16213., 17447., ..., 18513., 16628., 10935.],
         [ 8899., 13002., 13802., ..., 13295., 11524.,  7331.]],

        [[  999.,  1523.,  2129., ...,  7864.,  7902.,  5093.],
         [ 3270.,  4901.,  6522., ..., 11936., 12004.,  7985.],
         [ 4308.,  6611.,  8934., ..., 15203., 14686.,  9703.],
         ...,
         [10799., 15838., 17463., ..., 17292., 16311., 11466.],
         [11274., 16213., 17447., ..., 18513., 16628., 10935.],
         [ 8899., 13002., 13802., ..., 13295., 11524.,  7331.]],

        ...,

        [[  999.,  1523.,  2129., ...,  7864.,  7902.,  5093.],
         [ 3270.,  4901.,  6522., ..., 11936., 12004.,  7985.],
         [ 4308.,  6611.,  8934., ..., 15203., 14686.,  9703.],
         ...,
         [10799., 15838., 17463., ..., 17292., 16311., 11466.],
         [11274., 16213., 17447., ..., 18513., 16628., 10935.],
         [ 8899., 13002., 13802., ..., 13295., 11524.,  7331.]],

        [[  999.,  1523.,  2129., ...,  7864.,  7902.,  5093.],
         [ 3270.,  4901.,  6522., ..., 11936., 12004.,  7985.],
         [ 4308.,  6611.,  8934., ..., 15203., 14686.,  9703.],
         ...,
         [10799., 15838., 17463., ..., 17292., 16311., 11466.],
         [11274., 16213., 17447., ..., 18513., 16628., 10935.],
         [ 8899., 13002., 13802., ..., 13295., 11524.,  7331.]],

        [[  999.,  1523.,  2129., ...,  7864.,  7902.,  5093.],
         [ 3270.,  4901.,  6522., ..., 11936., 12004.,  7985.],
         [ 4308.,  6611.,  8934., ..., 15203., 14686.,  9703.],
         ...,
         [10799., 15838., 17463., ..., 17292., 16311., 11466.],
         [11274., 16213., 17447., ..., 18513., 16628., 10935.],
         [ 8899., 13002., 13802., ..., 13295., 11524.,  7331.]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [0], 'to': [2]}

generate models:34

analyse output arrays in iter:34

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[172., 171., 168., ..., 158., 156., 147.],
         [169., 168., 168., ..., 158., 152., 145.],
         [174., 169., 170., ..., 157., 149., 146.],
         ...,
         [150., 157., 162., ..., 158., 147., 139.],
         [143., 149., 155., ..., 148., 143., 140.],
         [148., 146., 149., ..., 137., 134., 136.]],

        [[187., 186., 182., ..., 170., 169., 163.],
         [185., 183., 184., ..., 175., 170., 165.],
         [190., 185., 186., ..., 177., 170., 168.],
         ...,
         [163., 168., 170., ..., 168., 160., 154.],
         [154., 158., 161., ..., 157., 153., 153.],
         [158., 155., 157., ..., 143., 139., 143.]],

        [[130., 130., 126., ..., 113., 113., 107.],
         [123., 122., 123., ..., 114., 110., 107.],
         [126., 122., 123., ..., 115., 108., 109.],
         ...,
         [100., 103., 104., ..., 108.,  99.,  90.],
         [ 89.,  90.,  96., ...,  99.,  92.,  88.],
         [ 93.,  89.,  92., ...,  86.,  80.,  82.]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[12094., 17038., 17172., ..., 15621., 13116.,  8638.],
         [16938., 23844., 24053., ..., 21511., 18003., 11871.],
         [16929., 23841., 24126., ..., 21268., 17825., 11706.],
         ...,
         [11972., 17265., 16192., ..., 21128., 17915., 11880.],
         [12716., 17929., 16211., ..., 17363., 14717.,  9744.],
         [ 8322., 11614., 10457., ..., 11299.,  9621.,  6343.]],

        [[12094., 17038., 17172., ..., 15621., 13116.,  8638.],
         [16938., 23844., 24053., ..., 21511., 18003., 11871.],
         [16929., 23841., 24126., ..., 21268., 17825., 11706.],
         ...,
         [11972., 17265., 16192., ..., 21128., 17915., 11880.],
         [12716., 17929., 16211., ..., 17363., 14717.,  9744.],
         [ 8322., 11614., 10457., ..., 11299.,  9621.,  6343.]],

        [[12094., 17038., 17172., ..., 15621., 13116.,  8638.],
         [16938., 23844., 24053., ..., 21511., 18003., 11871.],
         [16929., 23841., 24126., ..., 21268., 17825., 11706.],
         ...,
         [11972., 17265., 16192., ..., 21128., 17915., 11880.],
         [12716., 17929., 16211., ..., 17363., 14717.,  9744.],
         [ 8322., 11614., 10457., ..., 11299.,  9621.,  6343.]],

        ...,

        [[12094., 17038., 17172., ..., 15621., 13116.,  8638.],
         [16938., 23844., 24053., ..., 21511., 18003., 11871.],
         [16929., 23841., 24126., ..., 21268., 17825., 11706.],
         ...,
         [11972., 17265., 16192., ..., 21128., 17915., 11880.],
         [12716., 17929., 16211., ..., 17363., 14717.,  9744.],
         [ 8322., 11614., 10457., ..., 11299.,  9621.,  6343.]],

        [[12094., 17038., 17172., ..., 15621., 13116.,  8638.],
         [16938., 23844., 24053., ..., 21511., 18003., 11871.],
         [16929., 23841., 24126., ..., 21268., 17825., 11706.],
         ...,
         [11972., 17265., 16192., ..., 21128., 17915., 11880.],
         [12716., 17929., 16211., ..., 17363., 14717.,  9744.],
         [ 8322., 11614., 10457., ..., 11299.,  9621.,  6343.]],

        [[12094., 17038., 17172., ..., 15621., 13116.,  8638.],
         [16938., 23844., 24053., ..., 21511., 18003., 11871.],
         [16929., 23841., 24126., ..., 21268., 17825., 11706.],
         ...,
         [11972., 17265., 16192., ..., 21128., 17915., 11880.],
         [12716., 17929., 16211., ..., 17363., 14717.,  9744.],
         [ 8322., 11614., 10457., ..., 11299.,  9621.,  6343.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [0], 'to': [23]}
ms node:
{'name': 'conv2d', 'output': array([[[[ 7727., 11623., 13631., ..., 12699., 12382.,  8801.],
         [11600., 17476., 20539., ..., 18824., 18172., 12825.],
         [13496., 20375., 23947., ..., 21780., 21105., 14862.],
         ...,
         [ 8482., 13463., 16124., ..., 21711., 21329., 15122.],
         [10665., 16477., 19276., ..., 20666., 20305., 14420.],
         [ 8490., 12740., 14739., ..., 14443., 14184., 10086.]],

        [[ 7727., 11623., 13631., ..., 12699., 12382.,  8801.],
         [11600., 17476., 20539., ..., 18824., 18172., 12825.],
         [13496., 20375., 23947., ..., 21780., 21105., 14862.],
         ...,
         [ 8482., 13463., 16124., ..., 21711., 21329., 15122.],
         [10665., 16477., 19276., ..., 20666., 20305., 14420.],
         [ 8490., 12740., 14739., ..., 14443., 14184., 10086.]],

        [[ 7727., 11623., 13631., ..., 12699., 12382.,  8801.],
         [11600., 17476., 20539., ..., 18824., 18172., 12825.],
         [13496., 20375., 23947., ..., 21780., 21105., 14862.],
         ...,
         [ 8482., 13463., 16124., ..., 21711., 21329., 15122.],
         [10665., 16477., 19276., ..., 20666., 20305., 14420.],
         [ 8490., 12740., 14739., ..., 14443., 14184., 10086.]],

        ...,

        [[ 7727., 11623., 13631., ..., 12699., 12382.,  8801.],
         [11600., 17476., 20539., ..., 18824., 18172., 12825.],
         [13496., 20375., 23947., ..., 21780., 21105., 14862.],
         ...,
         [ 8482., 13463., 16124., ..., 21711., 21329., 15122.],
         [10665., 16477., 19276., ..., 20666., 20305., 14420.],
         [ 8490., 12740., 14739., ..., 14443., 14184., 10086.]],

        [[ 7727., 11623., 13631., ..., 12699., 12382.,  8801.],
         [11600., 17476., 20539., ..., 18824., 18172., 12825.],
         [13496., 20375., 23947., ..., 21780., 21105., 14862.],
         ...,
         [ 8482., 13463., 16124., ..., 21711., 21329., 15122.],
         [10665., 16477., 19276., ..., 20666., 20305., 14420.],
         [ 8490., 12740., 14739., ..., 14443., 14184., 10086.]],

        [[ 7727., 11623., 13631., ..., 12699., 12382.,  8801.],
         [11600., 17476., 20539., ..., 18824., 18172., 12825.],
         [13496., 20375., 23947., ..., 21780., 21105., 14862.],
         ...,
         [ 8482., 13463., 16124., ..., 21711., 21329., 15122.],
         [10665., 16477., 19276., ..., 20666., 20305., 14420.],
         [ 8490., 12740., 14739., ..., 14443., 14184., 10086.]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [0], 'to': [23]}
torch node:
{'name': 'conv2d', 'output': array([[[[ 7727., 11623., 13631., ..., 12699., 12382.,  8801.],
         [11600., 17476., 20539., ..., 18824., 18172., 12825.],
         [13496., 20375., 23947., ..., 21780., 21105., 14862.],
         ...,
         [ 8482., 13463., 16124., ..., 21711., 21329., 15122.],
         [10665., 16477., 19276., ..., 20666., 20305., 14420.],
         [ 8490., 12740., 14739., ..., 14443., 14184., 10086.]],

        [[ 7727., 11623., 13631., ..., 12699., 12382.,  8801.],
         [11600., 17476., 20539., ..., 18824., 18172., 12825.],
         [13496., 20375., 23947., ..., 21780., 21105., 14862.],
         ...,
         [ 8482., 13463., 16124., ..., 21711., 21329., 15122.],
         [10665., 16477., 19276., ..., 20666., 20305., 14420.],
         [ 8490., 12740., 14739., ..., 14443., 14184., 10086.]],

        [[ 7727., 11623., 13631., ..., 12699., 12382.,  8801.],
         [11600., 17476., 20539., ..., 18824., 18172., 12825.],
         [13496., 20375., 23947., ..., 21780., 21105., 14862.],
         ...,
         [ 8482., 13463., 16124., ..., 21711., 21329., 15122.],
         [10665., 16477., 19276., ..., 20666., 20305., 14420.],
         [ 8490., 12740., 14739., ..., 14443., 14184., 10086.]],

        ...,

        [[ 7727., 11623., 13631., ..., 12699., 12382.,  8801.],
         [11600., 17476., 20539., ..., 18824., 18172., 12825.],
         [13496., 20375., 23947., ..., 21780., 21105., 14862.],
         ...,
         [ 8482., 13463., 16124., ..., 21711., 21329., 15122.],
         [10665., 16477., 19276., ..., 20666., 20305., 14420.],
         [ 8490., 12740., 14739., ..., 14443., 14184., 10086.]],

        [[ 7727., 11623., 13631., ..., 12699., 12382.,  8801.],
         [11600., 17476., 20539., ..., 18824., 18172., 12825.],
         [13496., 20375., 23947., ..., 21780., 21105., 14862.],
         ...,
         [ 8482., 13463., 16124., ..., 21711., 21329., 15122.],
         [10665., 16477., 19276., ..., 20666., 20305., 14420.],
         [ 8490., 12740., 14739., ..., 14443., 14184., 10086.]],

        [[ 7727., 11623., 13631., ..., 12699., 12382.,  8801.],
         [11600., 17476., 20539., ..., 18824., 18172., 12825.],
         [13496., 20375., 23947., ..., 21780., 21105., 14862.],
         ...,
         [ 8482., 13463., 16124., ..., 21711., 21329., 15122.],
         [10665., 16477., 19276., ..., 20666., 20305., 14420.],
         [ 8490., 12740., 14739., ..., 14443., 14184., 10086.]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [0], 'to': [23]}

generate models:35

analyse output arrays in iter:35

pre layer res:
4:transpose
{'name': 'transpose', 'output': array([[[[251., 249., 167., ..., 133., 123., 125.],
         [247., 246., 167., ..., 123., 124., 129.],
         [247., 246., 167., ..., 124., 126., 126.],
         ...,
         [229., 233., 217., ..., 118., 112., 118.],
         [244., 249., 217., ..., 114., 108., 112.],
         [251., 252., 220., ..., 115., 104., 105.]],

        [[249., 248., 165., ..., 130., 125., 128.],
         [245., 244., 164., ..., 127., 127., 132.],
         [245., 245., 164., ..., 130., 129., 130.],
         ...,
         [190., 188., 182., ..., 125., 122., 128.],
         [231., 237., 211., ..., 122., 119., 122.],
         [241., 242., 213., ..., 125., 119., 121.]],

        [[250., 248., 148., ...,  39.,  36.,  42.],
         [247., 244., 148., ...,  36.,  36.,  43.],
         [247., 244., 149., ...,  35.,  32.,  36.],
         ...,
         [146., 141., 139., ...,  30.,  26.,  35.],
         [224., 233., 203., ...,  26.,  27.,  33.],
         [241., 241., 208., ...,  27.,  22.,  26.]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [0], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[11675., 13579.,  9170., ..., 10803.,  9041.,  5885.],
         [16350., 19070., 13078., ..., 15097., 12647.,  8286.],
         [16419., 19155., 13264., ..., 14974., 12583.,  8324.],
         ...,
         [18434., 22498., 18213., ..., 11395., 10222.,  7316.],
         [15931., 19662., 16281., ..., 10362.,  9082.,  6325.],
         [10566., 12813., 10751., ...,  7629.,  6486.,  4324.]],

        [[11675., 13579.,  9170., ..., 10803.,  9041.,  5885.],
         [16350., 19070., 13078., ..., 15097., 12647.,  8286.],
         [16419., 19155., 13264., ..., 14974., 12583.,  8324.],
         ...,
         [18434., 22498., 18213., ..., 11395., 10222.,  7316.],
         [15931., 19662., 16281., ..., 10362.,  9082.,  6325.],
         [10566., 12813., 10751., ...,  7629.,  6486.,  4324.]],

        [[11675., 13579.,  9170., ..., 10803.,  9041.,  5885.],
         [16350., 19070., 13078., ..., 15097., 12647.,  8286.],
         [16419., 19155., 13264., ..., 14974., 12583.,  8324.],
         ...,
         [18434., 22498., 18213., ..., 11395., 10222.,  7316.],
         [15931., 19662., 16281., ..., 10362.,  9082.,  6325.],
         [10566., 12813., 10751., ...,  7629.,  6486.,  4324.]],

        ...,

        [[11675., 13579.,  9170., ..., 10803.,  9041.,  5885.],
         [16350., 19070., 13078., ..., 15097., 12647.,  8286.],
         [16419., 19155., 13264., ..., 14974., 12583.,  8324.],
         ...,
         [18434., 22498., 18213., ..., 11395., 10222.,  7316.],
         [15931., 19662., 16281., ..., 10362.,  9082.,  6325.],
         [10566., 12813., 10751., ...,  7629.,  6486.,  4324.]],

        [[11675., 13579.,  9170., ..., 10803.,  9041.,  5885.],
         [16350., 19070., 13078., ..., 15097., 12647.,  8286.],
         [16419., 19155., 13264., ..., 14974., 12583.,  8324.],
         ...,
         [18434., 22498., 18213., ..., 11395., 10222.,  7316.],
         [15931., 19662., 16281., ..., 10362.,  9082.,  6325.],
         [10566., 12813., 10751., ...,  7629.,  6486.,  4324.]],

        [[11675., 13579.,  9170., ..., 10803.,  9041.,  5885.],
         [16350., 19070., 13078., ..., 15097., 12647.,  8286.],
         [16419., 19155., 13264., ..., 14974., 12583.,  8324.],
         ...,
         [18434., 22498., 18213., ..., 11395., 10222.,  7316.],
         [15931., 19662., 16281., ..., 10362.,  9082.,  6325.],
         [10566., 12813., 10751., ...,  7629.,  6486.,  4324.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [4], 'to': [7]}
ms node:
{'name': 'conv2d', 'output': array([[[[ 8627., 10081.,  8746., ...,  8825.,  8568.,  5933.],
         [12935., 15135., 13231., ..., 13167., 12793.,  8886.],
         [15117., 17675., 15564., ..., 15174., 14824., 10365.],
         ...,
         [16537., 20381., 20066., ..., 10902., 11457.,  8712.],
         [16633., 20490., 20616., ..., 11675., 11975.,  8973.],
         [11838., 14963., 15088., ...,  9192.,  9115.,  6640.]],

        [[ 8627., 10081.,  8746., ...,  8825.,  8568.,  5933.],
         [12935., 15135., 13231., ..., 13167., 12793.,  8886.],
         [15117., 17675., 15564., ..., 15174., 14824., 10365.],
         ...,
         [16537., 20381., 20066., ..., 10902., 11457.,  8712.],
         [16633., 20490., 20616., ..., 11675., 11975.,  8973.],
         [11838., 14963., 15088., ...,  9192.,  9115.,  6640.]],

        [[ 8627., 10081.,  8746., ...,  8825.,  8568.,  5933.],
         [12935., 15135., 13231., ..., 13167., 12793.,  8886.],
         [15117., 17675., 15564., ..., 15174., 14824., 10365.],
         ...,
         [16537., 20381., 20066., ..., 10902., 11457.,  8712.],
         [16633., 20490., 20616., ..., 11675., 11975.,  8973.],
         [11838., 14963., 15088., ...,  9192.,  9115.,  6640.]],

        ...,

        [[ 8627., 10081.,  8746., ...,  8825.,  8568.,  5933.],
         [12935., 15135., 13231., ..., 13167., 12793.,  8886.],
         [15117., 17675., 15564., ..., 15174., 14824., 10365.],
         ...,
         [16537., 20381., 20066., ..., 10902., 11457.,  8712.],
         [16633., 20490., 20616., ..., 11675., 11975.,  8973.],
         [11838., 14963., 15088., ...,  9192.,  9115.,  6640.]],

        [[ 8627., 10081.,  8746., ...,  8825.,  8568.,  5933.],
         [12935., 15135., 13231., ..., 13167., 12793.,  8886.],
         [15117., 17675., 15564., ..., 15174., 14824., 10365.],
         ...,
         [16537., 20381., 20066., ..., 10902., 11457.,  8712.],
         [16633., 20490., 20616., ..., 11675., 11975.,  8973.],
         [11838., 14963., 15088., ...,  9192.,  9115.,  6640.]],

        [[ 8627., 10081.,  8746., ...,  8825.,  8568.,  5933.],
         [12935., 15135., 13231., ..., 13167., 12793.,  8886.],
         [15117., 17675., 15564., ..., 15174., 14824., 10365.],
         ...,
         [16537., 20381., 20066., ..., 10902., 11457.,  8712.],
         [16633., 20490., 20616., ..., 11675., 11975.,  8973.],
         [11838., 14963., 15088., ...,  9192.,  9115.,  6640.]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [4], 'to': [7]}
torch node:
{'name': 'conv2d', 'output': array([[[[ 8627., 10081.,  8746., ...,  8825.,  8568.,  5933.],
         [12935., 15135., 13231., ..., 13167., 12793.,  8886.],
         [15117., 17675., 15564., ..., 15174., 14824., 10365.],
         ...,
         [16537., 20381., 20066., ..., 10902., 11457.,  8712.],
         [16633., 20490., 20616., ..., 11675., 11975.,  8973.],
         [11838., 14963., 15088., ...,  9192.,  9115.,  6640.]],

        [[ 8627., 10081.,  8746., ...,  8825.,  8568.,  5933.],
         [12935., 15135., 13231., ..., 13167., 12793.,  8886.],
         [15117., 17675., 15564., ..., 15174., 14824., 10365.],
         ...,
         [16537., 20381., 20066., ..., 10902., 11457.,  8712.],
         [16633., 20490., 20616., ..., 11675., 11975.,  8973.],
         [11838., 14963., 15088., ...,  9192.,  9115.,  6640.]],

        [[ 8627., 10081.,  8746., ...,  8825.,  8568.,  5933.],
         [12935., 15135., 13231., ..., 13167., 12793.,  8886.],
         [15117., 17675., 15564., ..., 15174., 14824., 10365.],
         ...,
         [16537., 20381., 20066., ..., 10902., 11457.,  8712.],
         [16633., 20490., 20616., ..., 11675., 11975.,  8973.],
         [11838., 14963., 15088., ...,  9192.,  9115.,  6640.]],

        ...,

        [[ 8627., 10081.,  8746., ...,  8825.,  8568.,  5933.],
         [12935., 15135., 13231., ..., 13167., 12793.,  8886.],
         [15117., 17675., 15564., ..., 15174., 14824., 10365.],
         ...,
         [16537., 20381., 20066., ..., 10902., 11457.,  8712.],
         [16633., 20490., 20616., ..., 11675., 11975.,  8973.],
         [11838., 14963., 15088., ...,  9192.,  9115.,  6640.]],

        [[ 8627., 10081.,  8746., ...,  8825.,  8568.,  5933.],
         [12935., 15135., 13231., ..., 13167., 12793.,  8886.],
         [15117., 17675., 15564., ..., 15174., 14824., 10365.],
         ...,
         [16537., 20381., 20066., ..., 10902., 11457.,  8712.],
         [16633., 20490., 20616., ..., 11675., 11975.,  8973.],
         [11838., 14963., 15088., ...,  9192.,  9115.,  6640.]],

        [[ 8627., 10081.,  8746., ...,  8825.,  8568.,  5933.],
         [12935., 15135., 13231., ..., 13167., 12793.,  8886.],
         [15117., 17675., 15564., ..., 15174., 14824., 10365.],
         ...,
         [16537., 20381., 20066., ..., 10902., 11457.,  8712.],
         [16633., 20490., 20616., ..., 11675., 11975.,  8973.],
         [11838., 14963., 15088., ...,  9192.,  9115.,  6640.]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [4], 'to': [7]}

generate models:36

analyse output arrays in iter:37

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[ 95.,  88.,  86., ..., 101.,  91., 105.],
         [ 82.,  75.,  76., ...,  94.,  51.,  84.],
         [ 77.,  74.,  71., ...,  71.,  47.,  88.],
         ...,
         [ 97.,  92.,  97., ...,  86.,  94.,  90.],
         [ 95.,  84.,  89., ...,  96., 102.,  97.],
         [ 91.,  83.,  82., ..., 100., 105., 108.]],

        [[105.,  97.,  96., ..., 116., 108., 124.],
         [ 90.,  83.,  84., ..., 102.,  61.,  97.],
         [ 85.,  81.,  78., ...,  74.,  52.,  95.],
         ...,
         [ 95.,  92.,  93., ...,  91.,  97.,  97.],
         [ 90.,  86.,  89., ...,  97.,  96.,  94.],
         [ 84.,  81.,  81., ...,  96.,  97., 102.]],

        [[127., 120., 118., ..., 144., 136., 157.],
         [110., 104., 104., ..., 123.,  80., 122.],
         [103.,  98.,  95., ...,  86.,  63., 111.],
         ...,
         [ 72.,  69.,  70., ...,  65.,  72.,  71.],
         [ 65.,  59.,  62., ...,  76.,  77.,  73.],
         [ 63.,  57.,  55., ...,  78.,  80.,  83.]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[ 6759.,  9666., 10345., ..., 11394.,  9726.,  6961.],
         [ 8846., 12722., 13708., ..., 15421., 13863., 10685.],
         [ 7445., 11095., 11700., ..., 14656., 14264., 11957.],
         ...,
         [10355., 14776., 15640., ..., 12116., 10372.,  6925.],
         [ 8615., 12167., 12543., ..., 10556.,  9118.,  6127.],
         [ 5529.,  7762.,  7746., ...,  7139.,  6179.,  4135.]],

        [[ 6759.,  9666., 10345., ..., 11394.,  9726.,  6961.],
         [ 8846., 12722., 13708., ..., 15421., 13863., 10685.],
         [ 7445., 11095., 11700., ..., 14656., 14264., 11957.],
         ...,
         [10355., 14776., 15640., ..., 12116., 10372.,  6925.],
         [ 8615., 12167., 12543., ..., 10556.,  9118.,  6127.],
         [ 5529.,  7762.,  7746., ...,  7139.,  6179.,  4135.]],

        [[ 6759.,  9666., 10345., ..., 11394.,  9726.,  6961.],
         [ 8846., 12722., 13708., ..., 15421., 13863., 10685.],
         [ 7445., 11095., 11700., ..., 14656., 14264., 11957.],
         ...,
         [10355., 14776., 15640., ..., 12116., 10372.,  6925.],
         [ 8615., 12167., 12543., ..., 10556.,  9118.,  6127.],
         [ 5529.,  7762.,  7746., ...,  7139.,  6179.,  4135.]],

        ...,

        [[ 6759.,  9666., 10345., ..., 11394.,  9726.,  6961.],
         [ 8846., 12722., 13708., ..., 15421., 13863., 10685.],
         [ 7445., 11095., 11700., ..., 14656., 14264., 11957.],
         ...,
         [10355., 14776., 15640., ..., 12116., 10372.,  6925.],
         [ 8615., 12167., 12543., ..., 10556.,  9118.,  6127.],
         [ 5529.,  7762.,  7746., ...,  7139.,  6179.,  4135.]],

        [[ 6759.,  9666., 10345., ..., 11394.,  9726.,  6961.],
         [ 8846., 12722., 13708., ..., 15421., 13863., 10685.],
         [ 7445., 11095., 11700., ..., 14656., 14264., 11957.],
         ...,
         [10355., 14776., 15640., ..., 12116., 10372.,  6925.],
         [ 8615., 12167., 12543., ..., 10556.,  9118.,  6127.],
         [ 5529.,  7762.,  7746., ...,  7139.,  6179.,  4135.]],

        [[ 6759.,  9666., 10345., ..., 11394.,  9726.,  6961.],
         [ 8846., 12722., 13708., ..., 15421., 13863., 10685.],
         [ 7445., 11095., 11700., ..., 14656., 14264., 11957.],
         ...,
         [10355., 14776., 15640., ..., 12116., 10372.,  6925.],
         [ 8615., 12167., 12543., ..., 10556.,  9118.,  6127.],
         [ 5529.,  7762.,  7746., ...,  7139.,  6179.,  4135.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [0], 'to': [2]}
ms node:
{'name': 'conv2d', 'output': array([[[[ 4346.,  6692.,  7984., ...,  8986.,  8691.,  5903.],
         [ 6219.,  9641., 11507., ..., 13247., 13575., 10206.],
         [ 6103.,  9799., 11827., ..., 13833., 15302., 12488.],
         ...,
         [ 7572., 13149., 15221., ..., 12140., 11972.,  8525.],
         [ 7266., 12712., 14452., ..., 12156., 12320.,  8837.],
         [ 5033.,  8868.,  9880., ...,  8847.,  8999.,  6429.]],

        [[ 4346.,  6692.,  7984., ...,  8986.,  8691.,  5903.],
         [ 6219.,  9641., 11507., ..., 13247., 13575., 10206.],
         [ 6103.,  9799., 11827., ..., 13833., 15302., 12488.],
         ...,
         [ 7572., 13149., 15221., ..., 12140., 11972.,  8525.],
         [ 7266., 12712., 14452., ..., 12156., 12320.,  8837.],
         [ 5033.,  8868.,  9880., ...,  8847.,  8999.,  6429.]],

        [[ 4346.,  6692.,  7984., ...,  8986.,  8691.,  5903.],
         [ 6219.,  9641., 11507., ..., 13247., 13575., 10206.],
         [ 6103.,  9799., 11827., ..., 13833., 15302., 12488.],
         ...,
         [ 7572., 13149., 15221., ..., 12140., 11972.,  8525.],
         [ 7266., 12712., 14452., ..., 12156., 12320.,  8837.],
         [ 5033.,  8868.,  9880., ...,  8847.,  8999.,  6429.]],

        ...,

        [[ 4346.,  6692.,  7984., ...,  8986.,  8691.,  5903.],
         [ 6219.,  9641., 11507., ..., 13247., 13575., 10206.],
         [ 6103.,  9799., 11827., ..., 13833., 15302., 12488.],
         ...,
         [ 7572., 13149., 15221., ..., 12140., 11972.,  8525.],
         [ 7266., 12712., 14452., ..., 12156., 12320.,  8837.],
         [ 5033.,  8868.,  9880., ...,  8847.,  8999.,  6429.]],

        [[ 4346.,  6692.,  7984., ...,  8986.,  8691.,  5903.],
         [ 6219.,  9641., 11507., ..., 13247., 13575., 10206.],
         [ 6103.,  9799., 11827., ..., 13833., 15302., 12488.],
         ...,
         [ 7572., 13149., 15221., ..., 12140., 11972.,  8525.],
         [ 7266., 12712., 14452., ..., 12156., 12320.,  8837.],
         [ 5033.,  8868.,  9880., ...,  8847.,  8999.,  6429.]],

        [[ 4346.,  6692.,  7984., ...,  8986.,  8691.,  5903.],
         [ 6219.,  9641., 11507., ..., 13247., 13575., 10206.],
         [ 6103.,  9799., 11827., ..., 13833., 15302., 12488.],
         ...,
         [ 7572., 13149., 15221., ..., 12140., 11972.,  8525.],
         [ 7266., 12712., 14452., ..., 12156., 12320.,  8837.],
         [ 5033.,  8868.,  9880., ...,  8847.,  8999.,  6429.]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [0], 'to': [2]}
torch node:
{'name': 'conv2d', 'output': array([[[[ 4346.,  6692.,  7984., ...,  8986.,  8691.,  5903.],
         [ 6219.,  9641., 11507., ..., 13247., 13575., 10206.],
         [ 6103.,  9799., 11827., ..., 13833., 15302., 12488.],
         ...,
         [ 7572., 13149., 15221., ..., 12140., 11972.,  8525.],
         [ 7266., 12712., 14452., ..., 12156., 12320.,  8837.],
         [ 5033.,  8868.,  9880., ...,  8847.,  8999.,  6429.]],

        [[ 4346.,  6692.,  7984., ...,  8986.,  8691.,  5903.],
         [ 6219.,  9641., 11507., ..., 13247., 13575., 10206.],
         [ 6103.,  9799., 11827., ..., 13833., 15302., 12488.],
         ...,
         [ 7572., 13149., 15221., ..., 12140., 11972.,  8525.],
         [ 7266., 12712., 14452., ..., 12156., 12320.,  8837.],
         [ 5033.,  8868.,  9880., ...,  8847.,  8999.,  6429.]],

        [[ 4346.,  6692.,  7984., ...,  8986.,  8691.,  5903.],
         [ 6219.,  9641., 11507., ..., 13247., 13575., 10206.],
         [ 6103.,  9799., 11827., ..., 13833., 15302., 12488.],
         ...,
         [ 7572., 13149., 15221., ..., 12140., 11972.,  8525.],
         [ 7266., 12712., 14452., ..., 12156., 12320.,  8837.],
         [ 5033.,  8868.,  9880., ...,  8847.,  8999.,  6429.]],

        ...,

        [[ 4346.,  6692.,  7984., ...,  8986.,  8691.,  5903.],
         [ 6219.,  9641., 11507., ..., 13247., 13575., 10206.],
         [ 6103.,  9799., 11827., ..., 13833., 15302., 12488.],
         ...,
         [ 7572., 13149., 15221., ..., 12140., 11972.,  8525.],
         [ 7266., 12712., 14452., ..., 12156., 12320.,  8837.],
         [ 5033.,  8868.,  9880., ...,  8847.,  8999.,  6429.]],

        [[ 4346.,  6692.,  7984., ...,  8986.,  8691.,  5903.],
         [ 6219.,  9641., 11507., ..., 13247., 13575., 10206.],
         [ 6103.,  9799., 11827., ..., 13833., 15302., 12488.],
         ...,
         [ 7572., 13149., 15221., ..., 12140., 11972.,  8525.],
         [ 7266., 12712., 14452., ..., 12156., 12320.,  8837.],
         [ 5033.,  8868.,  9880., ...,  8847.,  8999.,  6429.]],

        [[ 4346.,  6692.,  7984., ...,  8986.,  8691.,  5903.],
         [ 6219.,  9641., 11507., ..., 13247., 13575., 10206.],
         [ 6103.,  9799., 11827., ..., 13833., 15302., 12488.],
         ...,
         [ 7572., 13149., 15221., ..., 12140., 11972.,  8525.],
         [ 7266., 12712., 14452., ..., 12156., 12320.,  8837.],
         [ 5033.,  8868.,  9880., ...,  8847.,  8999.,  6429.]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [0], 'to': [2]}

generate models:38

analyse output arrays in iter:38

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[110., 223., 243., ...,   7.,   0.,   0.],
         [102., 213., 244., ...,  98.,  80.,  31.],
         [ 99., 204., 248., ..., 221., 198.,  89.],
         ...,
         [ 58.,  58.,  51., ...,   8.,   9.,   6.],
         [ 69.,  54.,  49., ...,  48.,  52.,  35.],
         [ 81.,  52.,  50., ...,  15.,  16.,  13.]],

        [[ 90., 197., 215., ...,   2.,   0.,   0.],
         [ 83., 187., 217., ...,  90.,  74.,  27.],
         [ 78., 179., 221., ..., 209., 188.,  81.],
         ...,
         [ 63.,  70.,  69., ...,   8.,  10.,   8.],
         [ 72.,  64.,  65., ...,  44.,  47.,  32.],
         [ 80.,  58.,  63., ...,   5.,   5.,   3.]],

        [[ 84., 185., 201., ...,   3.,   0.,   0.],
         [ 77., 176., 203., ...,  92.,  75.,  28.],
         [ 72., 167., 207., ..., 213., 191.,  83.],
         ...,
         [ 87., 100., 103., ...,  10.,   7.,   5.],
         [ 94.,  92.,  98., ...,  43.,  44.,  30.],
         [100.,  84.,  93., ...,   5.,   5.,   4.]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[12704., 17087., 17872., ..., 17658., 12712.,  7710.],
         [17663., 23373., 24798., ..., 26891., 20369., 12775.],
         [17293., 23455., 25633., ..., 30342., 23563., 14618.],
         ...,
         [ 9003., 12910., 14508., ...,  6902.,  4421.,  2151.],
         [ 7184., 10203., 10714., ...,  4820.,  2877.,  1298.],
         [ 4531.,  6376.,  6460., ...,  3004.,  1627.,   672.]],

        [[12704., 17087., 17872., ..., 17658., 12712.,  7710.],
         [17663., 23373., 24798., ..., 26891., 20369., 12775.],
         [17293., 23455., 25633., ..., 30342., 23563., 14618.],
         ...,
         [ 9003., 12910., 14508., ...,  6902.,  4421.,  2151.],
         [ 7184., 10203., 10714., ...,  4820.,  2877.,  1298.],
         [ 4531.,  6376.,  6460., ...,  3004.,  1627.,   672.]],

        [[12704., 17087., 17872., ..., 17658., 12712.,  7710.],
         [17663., 23373., 24798., ..., 26891., 20369., 12775.],
         [17293., 23455., 25633., ..., 30342., 23563., 14618.],
         ...,
         [ 9003., 12910., 14508., ...,  6902.,  4421.,  2151.],
         [ 7184., 10203., 10714., ...,  4820.,  2877.,  1298.],
         [ 4531.,  6376.,  6460., ...,  3004.,  1627.,   672.]],

        ...,

        [[12704., 17087., 17872., ..., 17658., 12712.,  7710.],
         [17663., 23373., 24798., ..., 26891., 20369., 12775.],
         [17293., 23455., 25633., ..., 30342., 23563., 14618.],
         ...,
         [ 9003., 12910., 14508., ...,  6902.,  4421.,  2151.],
         [ 7184., 10203., 10714., ...,  4820.,  2877.,  1298.],
         [ 4531.,  6376.,  6460., ...,  3004.,  1627.,   672.]],

        [[12704., 17087., 17872., ..., 17658., 12712.,  7710.],
         [17663., 23373., 24798., ..., 26891., 20369., 12775.],
         [17293., 23455., 25633., ..., 30342., 23563., 14618.],
         ...,
         [ 9003., 12910., 14508., ...,  6902.,  4421.,  2151.],
         [ 7184., 10203., 10714., ...,  4820.,  2877.,  1298.],
         [ 4531.,  6376.,  6460., ...,  3004.,  1627.,   672.]],

        [[12704., 17087., 17872., ..., 17658., 12712.,  7710.],
         [17663., 23373., 24798., ..., 26891., 20369., 12775.],
         [17293., 23455., 25633., ..., 30342., 23563., 14618.],
         ...,
         [ 9003., 12910., 14508., ...,  6902.,  4421.,  2151.],
         [ 7184., 10203., 10714., ...,  4820.,  2877.,  1298.],
         [ 4531.,  6376.,  6460., ...,  3004.,  1627.,   672.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [0], 'to': [2, 5]}
ms node:
{'name': 'conv2d', 'output': array([[[[ 8107., 12008., 14455., ..., 14409., 11533.,  7070.],
         [12090., 17964., 21707., ..., 23000., 19997., 13050.],
         [13948., 20336., 24388., ..., 30588., 27636., 18854.],
         ...,
         [ 7436., 11586., 14717., ...,  8673.,  6467.,  3334.],
         [ 6770., 10435., 12809., ...,  7037.,  5033.,  2330.],
         [ 4580.,  7004.,  8319., ...,  4563.,  3210.,  1437.]],

        [[ 8107., 12008., 14455., ..., 14409., 11533.,  7070.],
         [12090., 17964., 21707., ..., 23000., 19997., 13050.],
         [13948., 20336., 24388., ..., 30588., 27636., 18854.],
         ...,
         [ 7436., 11586., 14717., ...,  8673.,  6467.,  3334.],
         [ 6770., 10435., 12809., ...,  7037.,  5033.,  2330.],
         [ 4580.,  7004.,  8319., ...,  4563.,  3210.,  1437.]],

        [[ 8107., 12008., 14455., ..., 14409., 11533.,  7070.],
         [12090., 17964., 21707., ..., 23000., 19997., 13050.],
         [13948., 20336., 24388., ..., 30588., 27636., 18854.],
         ...,
         [ 7436., 11586., 14717., ...,  8673.,  6467.,  3334.],
         [ 6770., 10435., 12809., ...,  7037.,  5033.,  2330.],
         [ 4580.,  7004.,  8319., ...,  4563.,  3210.,  1437.]],

        ...,

        [[ 8107., 12008., 14455., ..., 14409., 11533.,  7070.],
         [12090., 17964., 21707., ..., 23000., 19997., 13050.],
         [13948., 20336., 24388., ..., 30588., 27636., 18854.],
         ...,
         [ 7436., 11586., 14717., ...,  8673.,  6467.,  3334.],
         [ 6770., 10435., 12809., ...,  7037.,  5033.,  2330.],
         [ 4580.,  7004.,  8319., ...,  4563.,  3210.,  1437.]],

        [[ 8107., 12008., 14455., ..., 14409., 11533.,  7070.],
         [12090., 17964., 21707., ..., 23000., 19997., 13050.],
         [13948., 20336., 24388., ..., 30588., 27636., 18854.],
         ...,
         [ 7436., 11586., 14717., ...,  8673.,  6467.,  3334.],
         [ 6770., 10435., 12809., ...,  7037.,  5033.,  2330.],
         [ 4580.,  7004.,  8319., ...,  4563.,  3210.,  1437.]],

        [[ 8107., 12008., 14455., ..., 14409., 11533.,  7070.],
         [12090., 17964., 21707., ..., 23000., 19997., 13050.],
         [13948., 20336., 24388., ..., 30588., 27636., 18854.],
         ...,
         [ 7436., 11586., 14717., ...,  8673.,  6467.,  3334.],
         [ 6770., 10435., 12809., ...,  7037.,  5033.,  2330.],
         [ 4580.,  7004.,  8319., ...,  4563.,  3210.,  1437.]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [0], 'to': [2, 5]}
torch node:
{'name': 'conv2d', 'output': array([[[[ 8107., 12008., 14455., ..., 14409., 11533.,  7070.],
         [12090., 17964., 21707., ..., 23000., 19997., 13050.],
         [13948., 20336., 24388., ..., 30588., 27636., 18854.],
         ...,
         [ 7436., 11586., 14717., ...,  8673.,  6467.,  3334.],
         [ 6770., 10435., 12809., ...,  7037.,  5033.,  2330.],
         [ 4580.,  7004.,  8319., ...,  4563.,  3210.,  1437.]],

        [[ 8107., 12008., 14455., ..., 14409., 11533.,  7070.],
         [12090., 17964., 21707., ..., 23000., 19997., 13050.],
         [13948., 20336., 24388., ..., 30588., 27636., 18854.],
         ...,
         [ 7436., 11586., 14717., ...,  8673.,  6467.,  3334.],
         [ 6770., 10435., 12809., ...,  7037.,  5033.,  2330.],
         [ 4580.,  7004.,  8319., ...,  4563.,  3210.,  1437.]],

        [[ 8107., 12008., 14455., ..., 14409., 11533.,  7070.],
         [12090., 17964., 21707., ..., 23000., 19997., 13050.],
         [13948., 20336., 24388., ..., 30588., 27636., 18854.],
         ...,
         [ 7436., 11586., 14717., ...,  8673.,  6467.,  3334.],
         [ 6770., 10435., 12809., ...,  7037.,  5033.,  2330.],
         [ 4580.,  7004.,  8319., ...,  4563.,  3210.,  1437.]],

        ...,

        [[ 8107., 12008., 14455., ..., 14409., 11533.,  7070.],
         [12090., 17964., 21707., ..., 23000., 19997., 13050.],
         [13948., 20336., 24388., ..., 30588., 27636., 18854.],
         ...,
         [ 7436., 11586., 14717., ...,  8673.,  6467.,  3334.],
         [ 6770., 10435., 12809., ...,  7037.,  5033.,  2330.],
         [ 4580.,  7004.,  8319., ...,  4563.,  3210.,  1437.]],

        [[ 8107., 12008., 14455., ..., 14409., 11533.,  7070.],
         [12090., 17964., 21707., ..., 23000., 19997., 13050.],
         [13948., 20336., 24388., ..., 30588., 27636., 18854.],
         ...,
         [ 7436., 11586., 14717., ...,  8673.,  6467.,  3334.],
         [ 6770., 10435., 12809., ...,  7037.,  5033.,  2330.],
         [ 4580.,  7004.,  8319., ...,  4563.,  3210.,  1437.]],

        [[ 8107., 12008., 14455., ..., 14409., 11533.,  7070.],
         [12090., 17964., 21707., ..., 23000., 19997., 13050.],
         [13948., 20336., 24388., ..., 30588., 27636., 18854.],
         ...,
         [ 7436., 11586., 14717., ...,  8673.,  6467.,  3334.],
         [ 6770., 10435., 12809., ...,  7037.,  5033.,  2330.],
         [ 4580.,  7004.,  8319., ...,  4563.,  3210.,  1437.]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [0], 'to': [2, 5]}

generate models:39

analyse output arrays in iter:39

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[ 98., 119., 109., ...,  75.,  60.,  61.],
         [ 44.,  75.,  69., ...,  81.,  55.,  65.],
         [ 73.,  94., 111., ...,  77.,  60.,  58.],
         ...,
         [ 96., 100., 129., ...,  72.,  68.,  85.],
         [124., 114., 110., ...,  84.,  81.,  73.],
         [ 93.,  98.,  95., ...,  73.,  55.,  72.]],

        [[110., 132., 122., ...,  97.,  82.,  84.],
         [ 56.,  86.,  80., ..., 103.,  77.,  87.],
         [ 84., 105., 122., ...,  99.,  82.,  82.],
         ...,
         [ 98., 100., 126., ...,  73.,  71.,  93.],
         [137., 124., 117., ...,  92.,  89.,  81.],
         [110., 112., 106., ...,  82.,  63.,  79.]],

        [[ 96., 117., 107., ...,  76.,  62.,  67.],
         [ 46.,  76.,  70., ...,  82.,  57.,  74.],
         [ 77.,  98., 115., ...,  78.,  61.,  61.],
         ...,
         [ 99., 100., 124., ...,  69.,  67.,  85.],
         [135., 121., 111., ...,  85.,  84.,  74.],
         [107., 107.,  99., ...,  75.,  58.,  72.]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[ 7320., 10428., 10642., ...,  8879.,  7099.,  4460.],
         [ 9991., 14433., 14861., ..., 12424., 10006.,  6169.],
         [10052., 14710., 15160., ..., 12621., 10128.,  6202.],
         ...,
         [11113., 15310., 15603., ..., 13434., 11103.,  7660.],
         [ 9813., 13674., 13820., ..., 10662.,  8773.,  6019.],
         [ 6614.,  9327.,  9726., ...,  6580.,  5306.,  3542.]],

        [[ 7320., 10428., 10642., ...,  8879.,  7099.,  4460.],
         [ 9991., 14433., 14861., ..., 12424., 10006.,  6169.],
         [10052., 14710., 15160., ..., 12621., 10128.,  6202.],
         ...,
         [11113., 15310., 15603., ..., 13434., 11103.,  7660.],
         [ 9813., 13674., 13820., ..., 10662.,  8773.,  6019.],
         [ 6614.,  9327.,  9726., ...,  6580.,  5306.,  3542.]],

        [[ 7320., 10428., 10642., ...,  8879.,  7099.,  4460.],
         [ 9991., 14433., 14861., ..., 12424., 10006.,  6169.],
         [10052., 14710., 15160., ..., 12621., 10128.,  6202.],
         ...,
         [11113., 15310., 15603., ..., 13434., 11103.,  7660.],
         [ 9813., 13674., 13820., ..., 10662.,  8773.,  6019.],
         [ 6614.,  9327.,  9726., ...,  6580.,  5306.,  3542.]],

        ...,

        [[ 7320., 10428., 10642., ...,  8879.,  7099.,  4460.],
         [ 9991., 14433., 14861., ..., 12424., 10006.,  6169.],
         [10052., 14710., 15160., ..., 12621., 10128.,  6202.],
         ...,
         [11113., 15310., 15603., ..., 13434., 11103.,  7660.],
         [ 9813., 13674., 13820., ..., 10662.,  8773.,  6019.],
         [ 6614.,  9327.,  9726., ...,  6580.,  5306.,  3542.]],

        [[ 7320., 10428., 10642., ...,  8879.,  7099.,  4460.],
         [ 9991., 14433., 14861., ..., 12424., 10006.,  6169.],
         [10052., 14710., 15160., ..., 12621., 10128.,  6202.],
         ...,
         [11113., 15310., 15603., ..., 13434., 11103.,  7660.],
         [ 9813., 13674., 13820., ..., 10662.,  8773.,  6019.],
         [ 6614.,  9327.,  9726., ...,  6580.,  5306.,  3542.]],

        [[ 7320., 10428., 10642., ...,  8879.,  7099.,  4460.],
         [ 9991., 14433., 14861., ..., 12424., 10006.,  6169.],
         [10052., 14710., 15160., ..., 12621., 10128.,  6202.],
         ...,
         [11113., 15310., 15603., ..., 13434., 11103.,  7660.],
         [ 9813., 13674., 13820., ..., 10662.,  8773.,  6019.],
         [ 6614.,  9327.,  9726., ...,  6580.,  5306.,  3542.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [0], 'to': [2, 28]}
ms node:
{'name': 'conv2d', 'output': array([[[[ 4692.,  7059.,  8516., ...,  7662.,  6967.,  4713.],
         [ 6943., 10500., 12736., ..., 10997., 10131.,  6879.],
         [ 7700., 12022., 14673., ..., 13042., 11994.,  7988.],
         ...,
         [ 8796., 13059., 15224., ..., 14139., 13502.,  9510.],
         [ 8844., 13240., 15460., ..., 13541., 12756.,  8842.],
         [ 6688., 10019., 11844., ...,  8949.,  8311.,  5611.]],

        [[ 4692.,  7059.,  8516., ...,  7662.,  6967.,  4713.],
         [ 6943., 10500., 12736., ..., 10997., 10131.,  6879.],
         [ 7700., 12022., 14673., ..., 13042., 11994.,  7988.],
         ...,
         [ 8796., 13059., 15224., ..., 14139., 13502.,  9510.],
         [ 8844., 13240., 15460., ..., 13541., 12756.,  8842.],
         [ 6688., 10019., 11844., ...,  8949.,  8311.,  5611.]],

        [[ 4692.,  7059.,  8516., ...,  7662.,  6967.,  4713.],
         [ 6943., 10500., 12736., ..., 10997., 10131.,  6879.],
         [ 7700., 12022., 14673., ..., 13042., 11994.,  7988.],
         ...,
         [ 8796., 13059., 15224., ..., 14139., 13502.,  9510.],
         [ 8844., 13240., 15460., ..., 13541., 12756.,  8842.],
         [ 6688., 10019., 11844., ...,  8949.,  8311.,  5611.]],

        ...,

        [[ 4692.,  7059.,  8516., ...,  7662.,  6967.,  4713.],
         [ 6943., 10500., 12736., ..., 10997., 10131.,  6879.],
         [ 7700., 12022., 14673., ..., 13042., 11994.,  7988.],
         ...,
         [ 8796., 13059., 15224., ..., 14139., 13502.,  9510.],
         [ 8844., 13240., 15460., ..., 13541., 12756.,  8842.],
         [ 6688., 10019., 11844., ...,  8949.,  8311.,  5611.]],

        [[ 4692.,  7059.,  8516., ...,  7662.,  6967.,  4713.],
         [ 6943., 10500., 12736., ..., 10997., 10131.,  6879.],
         [ 7700., 12022., 14673., ..., 13042., 11994.,  7988.],
         ...,
         [ 8796., 13059., 15224., ..., 14139., 13502.,  9510.],
         [ 8844., 13240., 15460., ..., 13541., 12756.,  8842.],
         [ 6688., 10019., 11844., ...,  8949.,  8311.,  5611.]],

        [[ 4692.,  7059.,  8516., ...,  7662.,  6967.,  4713.],
         [ 6943., 10500., 12736., ..., 10997., 10131.,  6879.],
         [ 7700., 12022., 14673., ..., 13042., 11994.,  7988.],
         ...,
         [ 8796., 13059., 15224., ..., 14139., 13502.,  9510.],
         [ 8844., 13240., 15460., ..., 13541., 12756.,  8842.],
         [ 6688., 10019., 11844., ...,  8949.,  8311.,  5611.]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [0], 'to': [2, 28]}
torch node:
{'name': 'conv2d', 'output': array([[[[ 4692.,  7059.,  8516., ...,  7662.,  6967.,  4713.],
         [ 6943., 10500., 12736., ..., 10997., 10131.,  6879.],
         [ 7700., 12022., 14673., ..., 13042., 11994.,  7988.],
         ...,
         [ 8796., 13059., 15224., ..., 14139., 13502.,  9510.],
         [ 8844., 13240., 15460., ..., 13541., 12756.,  8842.],
         [ 6688., 10019., 11844., ...,  8949.,  8311.,  5611.]],

        [[ 4692.,  7059.,  8516., ...,  7662.,  6967.,  4713.],
         [ 6943., 10500., 12736., ..., 10997., 10131.,  6879.],
         [ 7700., 12022., 14673., ..., 13042., 11994.,  7988.],
         ...,
         [ 8796., 13059., 15224., ..., 14139., 13502.,  9510.],
         [ 8844., 13240., 15460., ..., 13541., 12756.,  8842.],
         [ 6688., 10019., 11844., ...,  8949.,  8311.,  5611.]],

        [[ 4692.,  7059.,  8516., ...,  7662.,  6967.,  4713.],
         [ 6943., 10500., 12736., ..., 10997., 10131.,  6879.],
         [ 7700., 12022., 14673., ..., 13042., 11994.,  7988.],
         ...,
         [ 8796., 13059., 15224., ..., 14139., 13502.,  9510.],
         [ 8844., 13240., 15460., ..., 13541., 12756.,  8842.],
         [ 6688., 10019., 11844., ...,  8949.,  8311.,  5611.]],

        ...,

        [[ 4692.,  7059.,  8516., ...,  7662.,  6967.,  4713.],
         [ 6943., 10500., 12736., ..., 10997., 10131.,  6879.],
         [ 7700., 12022., 14673., ..., 13042., 11994.,  7988.],
         ...,
         [ 8796., 13059., 15224., ..., 14139., 13502.,  9510.],
         [ 8844., 13240., 15460., ..., 13541., 12756.,  8842.],
         [ 6688., 10019., 11844., ...,  8949.,  8311.,  5611.]],

        [[ 4692.,  7059.,  8516., ...,  7662.,  6967.,  4713.],
         [ 6943., 10500., 12736., ..., 10997., 10131.,  6879.],
         [ 7700., 12022., 14673., ..., 13042., 11994.,  7988.],
         ...,
         [ 8796., 13059., 15224., ..., 14139., 13502.,  9510.],
         [ 8844., 13240., 15460., ..., 13541., 12756.,  8842.],
         [ 6688., 10019., 11844., ...,  8949.,  8311.,  5611.]],

        [[ 4692.,  7059.,  8516., ...,  7662.,  6967.,  4713.],
         [ 6943., 10500., 12736., ..., 10997., 10131.,  6879.],
         [ 7700., 12022., 14673., ..., 13042., 11994.,  7988.],
         ...,
         [ 8796., 13059., 15224., ..., 14139., 13502.,  9510.],
         [ 8844., 13240., 15460., ..., 13541., 12756.,  8842.],
         [ 6688., 10019., 11844., ...,  8949.,  8311.,  5611.]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [0], 'to': [2, 28]}

generate models:40

analyse output arrays in iter:41

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[145., 145., 148., ..., 237., 230., 224.],
         [147., 150., 168., ..., 231., 221., 214.],
         [145., 150., 178., ..., 229., 230., 232.],
         ...,
         [231., 230., 227., ..., 235., 234., 231.],
         [224., 231., 231., ..., 240., 228., 223.],
         [125., 225., 232., ..., 224., 216., 228.]],

        [[125., 126., 130., ..., 210., 202., 199.],
         [126., 132., 147., ..., 203., 192., 190.],
         [124., 130., 155., ..., 201., 201., 205.],
         ...,
         [202., 202., 198., ..., 209., 207., 203.],
         [199., 200., 202., ..., 213., 201., 199.],
         [120., 200., 204., ..., 197., 189., 203.]],

        [[ 83.,  82.,  82., ..., 170., 161., 158.],
         [ 83.,  84., 107., ..., 163., 151., 149.],
         [ 79.,  84., 110., ..., 161., 160., 166.],
         ...,
         [169., 170., 166., ..., 172., 170., 167.],
         [163., 167., 170., ..., 177., 162., 162.],
         [ 98., 166., 170., ..., 160., 150., 167.]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[10708., 15693., 17103., ..., 20992., 17904., 11958.],
         [16652., 24055., 25592., ..., 29421., 25074., 16731.],
         [18737., 26786., 27883., ..., 29389., 25125., 16781.],
         ...,
         [20189., 28686., 29507., ..., 29653., 25356., 16887.],
         [16941., 24145., 25227., ..., 25433., 21792., 14502.],
         [11637., 16379., 16814., ..., 16966., 14521.,  9659.]],

        [[10708., 15693., 17103., ..., 20992., 17904., 11958.],
         [16652., 24055., 25592., ..., 29421., 25074., 16731.],
         [18737., 26786., 27883., ..., 29389., 25125., 16781.],
         ...,
         [20189., 28686., 29507., ..., 29653., 25356., 16887.],
         [16941., 24145., 25227., ..., 25433., 21792., 14502.],
         [11637., 16379., 16814., ..., 16966., 14521.,  9659.]],

        [[10708., 15693., 17103., ..., 20992., 17904., 11958.],
         [16652., 24055., 25592., ..., 29421., 25074., 16731.],
         [18737., 26786., 27883., ..., 29389., 25125., 16781.],
         ...,
         [20189., 28686., 29507., ..., 29653., 25356., 16887.],
         [16941., 24145., 25227., ..., 25433., 21792., 14502.],
         [11637., 16379., 16814., ..., 16966., 14521.,  9659.]],

        ...,

        [[10708., 15693., 17103., ..., 20992., 17904., 11958.],
         [16652., 24055., 25592., ..., 29421., 25074., 16731.],
         [18737., 26786., 27883., ..., 29389., 25125., 16781.],
         ...,
         [20189., 28686., 29507., ..., 29653., 25356., 16887.],
         [16941., 24145., 25227., ..., 25433., 21792., 14502.],
         [11637., 16379., 16814., ..., 16966., 14521.,  9659.]],

        [[10708., 15693., 17103., ..., 20992., 17904., 11958.],
         [16652., 24055., 25592., ..., 29421., 25074., 16731.],
         [18737., 26786., 27883., ..., 29389., 25125., 16781.],
         ...,
         [20189., 28686., 29507., ..., 29653., 25356., 16887.],
         [16941., 24145., 25227., ..., 25433., 21792., 14502.],
         [11637., 16379., 16814., ..., 16966., 14521.,  9659.]],

        [[10708., 15693., 17103., ..., 20992., 17904., 11958.],
         [16652., 24055., 25592., ..., 29421., 25074., 16731.],
         [18737., 26786., 27883., ..., 29389., 25125., 16781.],
         ...,
         [20189., 28686., 29507., ..., 29653., 25356., 16887.],
         [16941., 24145., 25227., ..., 25433., 21792., 14502.],
         [11637., 16379., 16814., ..., 16966., 14521.,  9659.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [0], 'to': [2, 6]}
ms node:
{'name': 'conv2d', 'output': array([[[[ 6368., 10032., 12506., ..., 16949., 16744., 11950.],
         [10648., 16707., 20600., ..., 25317., 25071., 17928.],
         [13982., 21607., 26127., ..., 29513., 29249., 20858.],
         ...,
         [15921., 24448., 29264., ..., 29607., 29490., 21058.],
         [15694., 24190., 29137., ..., 29604., 29549., 21087.],
         [11198., 17217., 20747., ..., 21178., 21221., 15141.]],

        [[ 6368., 10032., 12506., ..., 16949., 16744., 11950.],
         [10648., 16707., 20600., ..., 25317., 25071., 17928.],
         [13982., 21607., 26127., ..., 29513., 29249., 20858.],
         ...,
         [15921., 24448., 29264., ..., 29607., 29490., 21058.],
         [15694., 24190., 29137., ..., 29604., 29549., 21087.],
         [11198., 17217., 20747., ..., 21178., 21221., 15141.]],

        [[ 6368., 10032., 12506., ..., 16949., 16744., 11950.],
         [10648., 16707., 20600., ..., 25317., 25071., 17928.],
         [13982., 21607., 26127., ..., 29513., 29249., 20858.],
         ...,
         [15921., 24448., 29264., ..., 29607., 29490., 21058.],
         [15694., 24190., 29137., ..., 29604., 29549., 21087.],
         [11198., 17217., 20747., ..., 21178., 21221., 15141.]],

        ...,

        [[ 6368., 10032., 12506., ..., 16949., 16744., 11950.],
         [10648., 16707., 20600., ..., 25317., 25071., 17928.],
         [13982., 21607., 26127., ..., 29513., 29249., 20858.],
         ...,
         [15921., 24448., 29264., ..., 29607., 29490., 21058.],
         [15694., 24190., 29137., ..., 29604., 29549., 21087.],
         [11198., 17217., 20747., ..., 21178., 21221., 15141.]],

        [[ 6368., 10032., 12506., ..., 16949., 16744., 11950.],
         [10648., 16707., 20600., ..., 25317., 25071., 17928.],
         [13982., 21607., 26127., ..., 29513., 29249., 20858.],
         ...,
         [15921., 24448., 29264., ..., 29607., 29490., 21058.],
         [15694., 24190., 29137., ..., 29604., 29549., 21087.],
         [11198., 17217., 20747., ..., 21178., 21221., 15141.]],

        [[ 6368., 10032., 12506., ..., 16949., 16744., 11950.],
         [10648., 16707., 20600., ..., 25317., 25071., 17928.],
         [13982., 21607., 26127., ..., 29513., 29249., 20858.],
         ...,
         [15921., 24448., 29264., ..., 29607., 29490., 21058.],
         [15694., 24190., 29137., ..., 29604., 29549., 21087.],
         [11198., 17217., 20747., ..., 21178., 21221., 15141.]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [0], 'to': [2, 6]}
torch node:
{'name': 'conv2d', 'output': array([[[[ 6368., 10032., 12506., ..., 16949., 16744., 11950.],
         [10648., 16707., 20600., ..., 25317., 25071., 17928.],
         [13982., 21607., 26127., ..., 29513., 29249., 20858.],
         ...,
         [15921., 24448., 29264., ..., 29607., 29490., 21058.],
         [15694., 24190., 29137., ..., 29604., 29549., 21087.],
         [11198., 17217., 20747., ..., 21178., 21221., 15141.]],

        [[ 6368., 10032., 12506., ..., 16949., 16744., 11950.],
         [10648., 16707., 20600., ..., 25317., 25071., 17928.],
         [13982., 21607., 26127., ..., 29513., 29249., 20858.],
         ...,
         [15921., 24448., 29264., ..., 29607., 29490., 21058.],
         [15694., 24190., 29137., ..., 29604., 29549., 21087.],
         [11198., 17217., 20747., ..., 21178., 21221., 15141.]],

        [[ 6368., 10032., 12506., ..., 16949., 16744., 11950.],
         [10648., 16707., 20600., ..., 25317., 25071., 17928.],
         [13982., 21607., 26127., ..., 29513., 29249., 20858.],
         ...,
         [15921., 24448., 29264., ..., 29607., 29490., 21058.],
         [15694., 24190., 29137., ..., 29604., 29549., 21087.],
         [11198., 17217., 20747., ..., 21178., 21221., 15141.]],

        ...,

        [[ 6368., 10032., 12506., ..., 16949., 16744., 11950.],
         [10648., 16707., 20600., ..., 25317., 25071., 17928.],
         [13982., 21607., 26127., ..., 29513., 29249., 20858.],
         ...,
         [15921., 24448., 29264., ..., 29607., 29490., 21058.],
         [15694., 24190., 29137., ..., 29604., 29549., 21087.],
         [11198., 17217., 20747., ..., 21178., 21221., 15141.]],

        [[ 6368., 10032., 12506., ..., 16949., 16744., 11950.],
         [10648., 16707., 20600., ..., 25317., 25071., 17928.],
         [13982., 21607., 26127., ..., 29513., 29249., 20858.],
         ...,
         [15921., 24448., 29264., ..., 29607., 29490., 21058.],
         [15694., 24190., 29137., ..., 29604., 29549., 21087.],
         [11198., 17217., 20747., ..., 21178., 21221., 15141.]],

        [[ 6368., 10032., 12506., ..., 16949., 16744., 11950.],
         [10648., 16707., 20600., ..., 25317., 25071., 17928.],
         [13982., 21607., 26127., ..., 29513., 29249., 20858.],
         ...,
         [15921., 24448., 29264., ..., 29607., 29490., 21058.],
         [15694., 24190., 29137., ..., 29604., 29549., 21087.],
         [11198., 17217., 20747., ..., 21178., 21221., 15141.]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [0], 'to': [2, 6]}

pre layer res:
13:relu
{'name': 'relu', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [12], 'to': [14]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 14, 14]), 'from': [13], 'to': [5]}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 64, 14, 14), 'from': [13], 'to': [5]}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 14, 14]), 'from': [13], 'to': [5]}

generate models:42

analyse output arrays in iter:47

pre layer res:
18:empty_seq_operator
{'name': 'empty_seq_operator', 'output': array([[[[ 77.,  76.,  78., ...,  68.,  58.,  48.],
         [ 71.,  67.,  69., ...,  57.,  44.,  36.],
         [ 55.,  52.,  58., ...,  62.,  53.,  48.],
         ...,
         [ 63.,  62.,  67., ...,  63.,  58.,  55.],
         [ 89.,  91.,  89., ...,  65.,  68.,  66.],
         [103., 107.,  92., ...,  69.,  77.,  77.]],

        [[113., 112., 114., ..., 104.,  94.,  84.],
         [107., 102., 105., ...,  93.,  80.,  72.],
         [ 91.,  88.,  94., ...,  98.,  89.,  84.],
         ...,
         [ 97.,  92.,  97., ...,  97.,  92.,  89.],
         [118., 116., 114., ...,  99., 102., 101.],
         [129., 131., 119., ..., 104., 111., 112.]],

        [[137., 136., 139., ..., 128., 118., 108.],
         [131., 126., 130., ..., 116., 104.,  96.],
         [115., 112., 119., ..., 122., 113., 108.],
         ...,
         [119., 115., 121., ..., 123., 118., 115.],
         [136., 135., 136., ..., 122., 125., 124.],
         [144., 147., 138., ..., 127., 134., 135.]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [0], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[ 7300., 10309., 10400., ...,  9152.,  7638.,  5072.],
         [10314., 14544., 14648., ..., 12567., 10584.,  7022.],
         [10032., 14194., 14343., ..., 12814., 10917.,  7255.],
         ...,
         [ 9480., 12992., 13029., ..., 13852., 11908.,  7793.],
         [ 8794., 12082., 11945., ..., 12066., 10194.,  6692.],
         [ 6209.,  8516.,  8392., ...,  8085.,  6869.,  4575.]],

        [[ 7300., 10309., 10400., ...,  9152.,  7638.,  5072.],
         [10314., 14544., 14648., ..., 12567., 10584.,  7022.],
         [10032., 14194., 14343., ..., 12814., 10917.,  7255.],
         ...,
         [ 9480., 12992., 13029., ..., 13852., 11908.,  7793.],
         [ 8794., 12082., 11945., ..., 12066., 10194.,  6692.],
         [ 6209.,  8516.,  8392., ...,  8085.,  6869.,  4575.]],

        [[ 7300., 10309., 10400., ...,  9152.,  7638.,  5072.],
         [10314., 14544., 14648., ..., 12567., 10584.,  7022.],
         [10032., 14194., 14343., ..., 12814., 10917.,  7255.],
         ...,
         [ 9480., 12992., 13029., ..., 13852., 11908.,  7793.],
         [ 8794., 12082., 11945., ..., 12066., 10194.,  6692.],
         [ 6209.,  8516.,  8392., ...,  8085.,  6869.,  4575.]],

        ...,

        [[ 7300., 10309., 10400., ...,  9152.,  7638.,  5072.],
         [10314., 14544., 14648., ..., 12567., 10584.,  7022.],
         [10032., 14194., 14343., ..., 12814., 10917.,  7255.],
         ...,
         [ 9480., 12992., 13029., ..., 13852., 11908.,  7793.],
         [ 8794., 12082., 11945., ..., 12066., 10194.,  6692.],
         [ 6209.,  8516.,  8392., ...,  8085.,  6869.,  4575.]],

        [[ 7300., 10309., 10400., ...,  9152.,  7638.,  5072.],
         [10314., 14544., 14648., ..., 12567., 10584.,  7022.],
         [10032., 14194., 14343., ..., 12814., 10917.,  7255.],
         ...,
         [ 9480., 12992., 13029., ..., 13852., 11908.,  7793.],
         [ 8794., 12082., 11945., ..., 12066., 10194.,  6692.],
         [ 6209.,  8516.,  8392., ...,  8085.,  6869.,  4575.]],

        [[ 7300., 10309., 10400., ...,  9152.,  7638.,  5072.],
         [10314., 14544., 14648., ..., 12567., 10584.,  7022.],
         [10032., 14194., 14343., ..., 12814., 10917.,  7255.],
         ...,
         [ 9480., 12992., 13029., ..., 13852., 11908.,  7793.],
         [ 8794., 12082., 11945., ..., 12066., 10194.,  6692.],
         [ 6209.,  8516.,  8392., ...,  8085.,  6869.,  4575.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [18], 'to': [2]}
ms node:
{'name': 'conv2d', 'output': array([[[[ 4621.,  7123.,  8473., ...,  7728.,  7306.,  5204.],
         [ 7018., 10670., 12496., ..., 11119., 10678.,  7636.],
         [ 8018., 12253., 14387., ..., 12769., 12364.,  8892.],
         ...,
         [ 7572., 11139., 12897., ..., 13716., 13719.,  9774.],
         [ 8077., 11790., 13521., ..., 14087., 13946.,  9887.],
         [ 6050.,  8820., 10120., ..., 10098.,  9921.,  7008.]],

        [[ 4621.,  7123.,  8473., ...,  7728.,  7306.,  5204.],
         [ 7018., 10670., 12496., ..., 11119., 10678.,  7636.],
         [ 8018., 12253., 14387., ..., 12769., 12364.,  8892.],
         ...,
         [ 7572., 11139., 12897., ..., 13716., 13719.,  9774.],
         [ 8077., 11790., 13521., ..., 14087., 13946.,  9887.],
         [ 6050.,  8820., 10120., ..., 10098.,  9921.,  7008.]],

        [[ 4621.,  7123.,  8473., ...,  7728.,  7306.,  5204.],
         [ 7018., 10670., 12496., ..., 11119., 10678.,  7636.],
         [ 8018., 12253., 14387., ..., 12769., 12364.,  8892.],
         ...,
         [ 7572., 11139., 12897., ..., 13716., 13719.,  9774.],
         [ 8077., 11790., 13521., ..., 14087., 13946.,  9887.],
         [ 6050.,  8820., 10120., ..., 10098.,  9921.,  7008.]],

        ...,

        [[ 4621.,  7123.,  8473., ...,  7728.,  7306.,  5204.],
         [ 7018., 10670., 12496., ..., 11119., 10678.,  7636.],
         [ 8018., 12253., 14387., ..., 12769., 12364.,  8892.],
         ...,
         [ 7572., 11139., 12897., ..., 13716., 13719.,  9774.],
         [ 8077., 11790., 13521., ..., 14087., 13946.,  9887.],
         [ 6050.,  8820., 10120., ..., 10098.,  9921.,  7008.]],

        [[ 4621.,  7123.,  8473., ...,  7728.,  7306.,  5204.],
         [ 7018., 10670., 12496., ..., 11119., 10678.,  7636.],
         [ 8018., 12253., 14387., ..., 12769., 12364.,  8892.],
         ...,
         [ 7572., 11139., 12897., ..., 13716., 13719.,  9774.],
         [ 8077., 11790., 13521., ..., 14087., 13946.,  9887.],
         [ 6050.,  8820., 10120., ..., 10098.,  9921.,  7008.]],

        [[ 4621.,  7123.,  8473., ...,  7728.,  7306.,  5204.],
         [ 7018., 10670., 12496., ..., 11119., 10678.,  7636.],
         [ 8018., 12253., 14387., ..., 12769., 12364.,  8892.],
         ...,
         [ 7572., 11139., 12897., ..., 13716., 13719.,  9774.],
         [ 8077., 11790., 13521., ..., 14087., 13946.,  9887.],
         [ 6050.,  8820., 10120., ..., 10098.,  9921.,  7008.]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [18], 'to': [2]}
torch node:
{'name': 'conv2d', 'output': array([[[[ 4621.,  7123.,  8473., ...,  7728.,  7306.,  5204.],
         [ 7018., 10670., 12496., ..., 11119., 10678.,  7636.],
         [ 8018., 12253., 14387., ..., 12769., 12364.,  8892.],
         ...,
         [ 7572., 11139., 12897., ..., 13716., 13719.,  9774.],
         [ 8077., 11790., 13521., ..., 14087., 13946.,  9887.],
         [ 6050.,  8820., 10120., ..., 10098.,  9921.,  7008.]],

        [[ 4621.,  7123.,  8473., ...,  7728.,  7306.,  5204.],
         [ 7018., 10670., 12496., ..., 11119., 10678.,  7636.],
         [ 8018., 12253., 14387., ..., 12769., 12364.,  8892.],
         ...,
         [ 7572., 11139., 12897., ..., 13716., 13719.,  9774.],
         [ 8077., 11790., 13521., ..., 14087., 13946.,  9887.],
         [ 6050.,  8820., 10120., ..., 10098.,  9921.,  7008.]],

        [[ 4621.,  7123.,  8473., ...,  7728.,  7306.,  5204.],
         [ 7018., 10670., 12496., ..., 11119., 10678.,  7636.],
         [ 8018., 12253., 14387., ..., 12769., 12364.,  8892.],
         ...,
         [ 7572., 11139., 12897., ..., 13716., 13719.,  9774.],
         [ 8077., 11790., 13521., ..., 14087., 13946.,  9887.],
         [ 6050.,  8820., 10120., ..., 10098.,  9921.,  7008.]],

        ...,

        [[ 4621.,  7123.,  8473., ...,  7728.,  7306.,  5204.],
         [ 7018., 10670., 12496., ..., 11119., 10678.,  7636.],
         [ 8018., 12253., 14387., ..., 12769., 12364.,  8892.],
         ...,
         [ 7572., 11139., 12897., ..., 13716., 13719.,  9774.],
         [ 8077., 11790., 13521., ..., 14087., 13946.,  9887.],
         [ 6050.,  8820., 10120., ..., 10098.,  9921.,  7008.]],

        [[ 4621.,  7123.,  8473., ...,  7728.,  7306.,  5204.],
         [ 7018., 10670., 12496., ..., 11119., 10678.,  7636.],
         [ 8018., 12253., 14387., ..., 12769., 12364.,  8892.],
         ...,
         [ 7572., 11139., 12897., ..., 13716., 13719.,  9774.],
         [ 8077., 11790., 13521., ..., 14087., 13946.,  9887.],
         [ 6050.,  8820., 10120., ..., 10098.,  9921.,  7008.]],

        [[ 4621.,  7123.,  8473., ...,  7728.,  7306.,  5204.],
         [ 7018., 10670., 12496., ..., 11119., 10678.,  7636.],
         [ 8018., 12253., 14387., ..., 12769., 12364.,  8892.],
         ...,
         [ 7572., 11139., 12897., ..., 13716., 13719.,  9774.],
         [ 8077., 11790., 13521., ..., 14087., 13946.,  9887.],
         [ 6050.,  8820., 10120., ..., 10098.,  9921.,  7008.]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [18], 'to': [2]}

generate models:47

analyse output arrays in iter:48

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[191., 190., 190., ..., 135., 142., 146.],
         [187., 184., 179., ..., 147., 152., 153.],
         [181., 176., 165., ..., 154., 162., 158.],
         ...,
         [220., 221., 222., ..., 211., 214., 224.],
         [212., 220., 225., ..., 216., 216., 221.],
         [201., 212., 217., ..., 220., 217., 217.]],

        [[191., 192., 193., ..., 143., 149., 150.],
         [188., 187., 183., ..., 154., 158., 158.],
         [183., 178., 169., ..., 161., 167., 163.],
         ...,
         [245., 245., 244., ..., 238., 240., 248.],
         [238., 245., 247., ..., 242., 241., 244.],
         [226., 239., 243., ..., 242., 240., 238.]],

        [[168., 172., 174., ..., 123., 126., 127.],
         [165., 166., 163., ..., 134., 135., 134.],
         [160., 157., 148., ..., 140., 143., 139.],
         ...,
         [198., 199., 202., ..., 189., 193., 203.],
         [190., 198., 204., ..., 194., 195., 201.],
         [178., 190., 196., ..., 197., 196., 195.]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[12483., 17588., 17566., ..., 15464., 13148.,  9096.],
         [17317., 24459., 24429., ..., 23615., 19754., 13373.],
         [16541., 23574., 23562., ..., 25316., 21074., 14219.],
         ...,
         [23412., 33072., 33659., ..., 32342., 27663., 18361.],
         [19973., 28213., 28767., ..., 27746., 23765., 15804.],
         [13354., 18866., 19247., ..., 18388., 15759., 10496.]],

        [[12483., 17588., 17566., ..., 15464., 13148.,  9096.],
         [17317., 24459., 24429., ..., 23615., 19754., 13373.],
         [16541., 23574., 23562., ..., 25316., 21074., 14219.],
         ...,
         [23412., 33072., 33659., ..., 32342., 27663., 18361.],
         [19973., 28213., 28767., ..., 27746., 23765., 15804.],
         [13354., 18866., 19247., ..., 18388., 15759., 10496.]],

        [[12483., 17588., 17566., ..., 15464., 13148.,  9096.],
         [17317., 24459., 24429., ..., 23615., 19754., 13373.],
         [16541., 23574., 23562., ..., 25316., 21074., 14219.],
         ...,
         [23412., 33072., 33659., ..., 32342., 27663., 18361.],
         [19973., 28213., 28767., ..., 27746., 23765., 15804.],
         [13354., 18866., 19247., ..., 18388., 15759., 10496.]],

        ...,

        [[12483., 17588., 17566., ..., 15464., 13148.,  9096.],
         [17317., 24459., 24429., ..., 23615., 19754., 13373.],
         [16541., 23574., 23562., ..., 25316., 21074., 14219.],
         ...,
         [23412., 33072., 33659., ..., 32342., 27663., 18361.],
         [19973., 28213., 28767., ..., 27746., 23765., 15804.],
         [13354., 18866., 19247., ..., 18388., 15759., 10496.]],

        [[12483., 17588., 17566., ..., 15464., 13148.,  9096.],
         [17317., 24459., 24429., ..., 23615., 19754., 13373.],
         [16541., 23574., 23562., ..., 25316., 21074., 14219.],
         ...,
         [23412., 33072., 33659., ..., 32342., 27663., 18361.],
         [19973., 28213., 28767., ..., 27746., 23765., 15804.],
         [13354., 18866., 19247., ..., 18388., 15759., 10496.]],

        [[12483., 17588., 17566., ..., 15464., 13148.,  9096.],
         [17317., 24459., 24429., ..., 23615., 19754., 13373.],
         [16541., 23574., 23562., ..., 25316., 21074., 14219.],
         ...,
         [23412., 33072., 33659., ..., 32342., 27663., 18361.],
         [19973., 28213., 28767., ..., 27746., 23765., 15804.],
         [13354., 18866., 19247., ..., 18388., 15759., 10496.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [0], 'to': [2]}
ms node:
{'name': 'conv2d', 'output': array([[[[ 8170., 12171., 14244., ..., 11959., 11784.,  8629.],
         [11975., 17901., 21021., ..., 19666., 19162., 13866.],
         [13665., 20524., 24076., ..., 24966., 24067., 17288.],
         ...,
         [18619., 28143., 33284., ..., 32448., 32307., 22976.],
         [18563., 28147., 33262., ..., 32454., 32327., 23034.],
         [13247., 20105., 23790., ..., 23118., 23078., 16461.]],

        [[ 8170., 12171., 14244., ..., 11959., 11784.,  8629.],
         [11975., 17901., 21021., ..., 19666., 19162., 13866.],
         [13665., 20524., 24076., ..., 24966., 24067., 17288.],
         ...,
         [18619., 28143., 33284., ..., 32448., 32307., 22976.],
         [18563., 28147., 33262., ..., 32454., 32327., 23034.],
         [13247., 20105., 23790., ..., 23118., 23078., 16461.]],

        [[ 8170., 12171., 14244., ..., 11959., 11784.,  8629.],
         [11975., 17901., 21021., ..., 19666., 19162., 13866.],
         [13665., 20524., 24076., ..., 24966., 24067., 17288.],
         ...,
         [18619., 28143., 33284., ..., 32448., 32307., 22976.],
         [18563., 28147., 33262., ..., 32454., 32327., 23034.],
         [13247., 20105., 23790., ..., 23118., 23078., 16461.]],

        ...,

        [[ 8170., 12171., 14244., ..., 11959., 11784.,  8629.],
         [11975., 17901., 21021., ..., 19666., 19162., 13866.],
         [13665., 20524., 24076., ..., 24966., 24067., 17288.],
         ...,
         [18619., 28143., 33284., ..., 32448., 32307., 22976.],
         [18563., 28147., 33262., ..., 32454., 32327., 23034.],
         [13247., 20105., 23790., ..., 23118., 23078., 16461.]],

        [[ 8170., 12171., 14244., ..., 11959., 11784.,  8629.],
         [11975., 17901., 21021., ..., 19666., 19162., 13866.],
         [13665., 20524., 24076., ..., 24966., 24067., 17288.],
         ...,
         [18619., 28143., 33284., ..., 32448., 32307., 22976.],
         [18563., 28147., 33262., ..., 32454., 32327., 23034.],
         [13247., 20105., 23790., ..., 23118., 23078., 16461.]],

        [[ 8170., 12171., 14244., ..., 11959., 11784.,  8629.],
         [11975., 17901., 21021., ..., 19666., 19162., 13866.],
         [13665., 20524., 24076., ..., 24966., 24067., 17288.],
         ...,
         [18619., 28143., 33284., ..., 32448., 32307., 22976.],
         [18563., 28147., 33262., ..., 32454., 32327., 23034.],
         [13247., 20105., 23790., ..., 23118., 23078., 16461.]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [0], 'to': [2]}
torch node:
{'name': 'conv2d', 'output': array([[[[ 8170., 12171., 14244., ..., 11959., 11784.,  8629.],
         [11975., 17901., 21021., ..., 19666., 19162., 13866.],
         [13665., 20524., 24076., ..., 24966., 24067., 17288.],
         ...,
         [18619., 28143., 33284., ..., 32448., 32307., 22976.],
         [18563., 28147., 33262., ..., 32454., 32327., 23034.],
         [13247., 20105., 23790., ..., 23118., 23078., 16461.]],

        [[ 8170., 12171., 14244., ..., 11959., 11784.,  8629.],
         [11975., 17901., 21021., ..., 19666., 19162., 13866.],
         [13665., 20524., 24076., ..., 24966., 24067., 17288.],
         ...,
         [18619., 28143., 33284., ..., 32448., 32307., 22976.],
         [18563., 28147., 33262., ..., 32454., 32327., 23034.],
         [13247., 20105., 23790., ..., 23118., 23078., 16461.]],

        [[ 8170., 12171., 14244., ..., 11959., 11784.,  8629.],
         [11975., 17901., 21021., ..., 19666., 19162., 13866.],
         [13665., 20524., 24076., ..., 24966., 24067., 17288.],
         ...,
         [18619., 28143., 33284., ..., 32448., 32307., 22976.],
         [18563., 28147., 33262., ..., 32454., 32327., 23034.],
         [13247., 20105., 23790., ..., 23118., 23078., 16461.]],

        ...,

        [[ 8170., 12171., 14244., ..., 11959., 11784.,  8629.],
         [11975., 17901., 21021., ..., 19666., 19162., 13866.],
         [13665., 20524., 24076., ..., 24966., 24067., 17288.],
         ...,
         [18619., 28143., 33284., ..., 32448., 32307., 22976.],
         [18563., 28147., 33262., ..., 32454., 32327., 23034.],
         [13247., 20105., 23790., ..., 23118., 23078., 16461.]],

        [[ 8170., 12171., 14244., ..., 11959., 11784.,  8629.],
         [11975., 17901., 21021., ..., 19666., 19162., 13866.],
         [13665., 20524., 24076., ..., 24966., 24067., 17288.],
         ...,
         [18619., 28143., 33284., ..., 32448., 32307., 22976.],
         [18563., 28147., 33262., ..., 32454., 32327., 23034.],
         [13247., 20105., 23790., ..., 23118., 23078., 16461.]],

        [[ 8170., 12171., 14244., ..., 11959., 11784.,  8629.],
         [11975., 17901., 21021., ..., 19666., 19162., 13866.],
         [13665., 20524., 24076., ..., 24966., 24067., 17288.],
         ...,
         [18619., 28143., 33284., ..., 32448., 32307., 22976.],
         [18563., 28147., 33262., ..., 32454., 32327., 23034.],
         [13247., 20105., 23790., ..., 23118., 23078., 16461.]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [0], 'to': [2]}

pre layer res:
13:relu
{'name': 'relu', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [12], 'to': [14]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 14, 14]), 'from': [13], 'to': [15]}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 64, 14, 14), 'from': [13], 'to': [15]}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 14, 14]), 'from': [13], 'to': [15]}

generate models:48

analyse output arrays in iter:49

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[255., 255., 255., ..., 255., 255., 255.],
         [255., 252., 255., ..., 254., 254., 254.],
         [255., 252., 255., ..., 254., 254., 254.],
         ...,
         [255., 254., 254., ..., 254., 254., 254.],
         [255., 253., 254., ..., 254., 254., 254.],
         [255., 255., 255., ..., 255., 255., 255.]],

        [[255., 255., 255., ..., 255., 255., 255.],
         [255., 252., 255., ..., 254., 254., 254.],
         [255., 252., 255., ..., 254., 254., 254.],
         ...,
         [255., 254., 254., ..., 254., 254., 254.],
         [255., 253., 254., ..., 254., 254., 254.],
         [255., 255., 255., ..., 255., 255., 255.]],

        [[255., 255., 255., ..., 255., 255., 255.],
         [255., 252., 255., ..., 254., 254., 254.],
         [255., 252., 255., ..., 254., 254., 254.],
         ...,
         [255., 254., 254., ..., 254., 254., 254.],
         [255., 253., 254., ..., 254., 254., 254.],
         [255., 255., 255., ..., 255., 255., 255.]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[15797., 21982., 21969., ..., 26616., 22845., 15247.],
         [22652., 29930., 29905., ..., 35956., 31096., 20650.],
         [23469., 28655., 28489., ..., 32298., 28921., 19375.],
         ...,
         [26631., 37272., 37261., ..., 32791., 31104., 21294.],
         [22878., 32016., 32010., ..., 29617., 27021., 18285.],
         [15258., 21360., 21357., ..., 20904., 18294., 12201.]],

        [[15797., 21982., 21969., ..., 26616., 22845., 15247.],
         [22652., 29930., 29905., ..., 35956., 31096., 20650.],
         [23469., 28655., 28489., ..., 32298., 28921., 19375.],
         ...,
         [26631., 37272., 37261., ..., 32791., 31104., 21294.],
         [22878., 32016., 32010., ..., 29617., 27021., 18285.],
         [15258., 21360., 21357., ..., 20904., 18294., 12201.]],

        [[15797., 21982., 21969., ..., 26616., 22845., 15247.],
         [22652., 29930., 29905., ..., 35956., 31096., 20650.],
         [23469., 28655., 28489., ..., 32298., 28921., 19375.],
         ...,
         [26631., 37272., 37261., ..., 32791., 31104., 21294.],
         [22878., 32016., 32010., ..., 29617., 27021., 18285.],
         [15258., 21360., 21357., ..., 20904., 18294., 12201.]],

        ...,

        [[15797., 21982., 21969., ..., 26616., 22845., 15247.],
         [22652., 29930., 29905., ..., 35956., 31096., 20650.],
         [23469., 28655., 28489., ..., 32298., 28921., 19375.],
         ...,
         [26631., 37272., 37261., ..., 32791., 31104., 21294.],
         [22878., 32016., 32010., ..., 29617., 27021., 18285.],
         [15258., 21360., 21357., ..., 20904., 18294., 12201.]],

        [[15797., 21982., 21969., ..., 26616., 22845., 15247.],
         [22652., 29930., 29905., ..., 35956., 31096., 20650.],
         [23469., 28655., 28489., ..., 32298., 28921., 19375.],
         ...,
         [26631., 37272., 37261., ..., 32791., 31104., 21294.],
         [22878., 32016., 32010., ..., 29617., 27021., 18285.],
         [15258., 21360., 21357., ..., 20904., 18294., 12201.]],

        [[15797., 21982., 21969., ..., 26616., 22845., 15247.],
         [22652., 29930., 29905., ..., 35956., 31096., 20650.],
         [23469., 28655., 28489., ..., 32298., 28921., 19375.],
         ...,
         [26631., 37272., 37261., ..., 32791., 31104., 21294.],
         [22878., 32016., 32010., ..., 29617., 27021., 18285.],
         [15258., 21360., 21357., ..., 20904., 18294., 12201.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [0], 'to': [2, 6]}
ms node:
{'name': 'conv2d', 'output': array([[[[11507., 14898., 17906., ..., 21348., 21363., 15255.],
         [17563., 21748., 25936., ..., 31579., 31570., 22761.],
         [20794., 24924., 29014., ..., 34368., 34816., 25321.],
         ...,
         [21084., 31722., 36999., ..., 29559., 34506., 26541.],
         [21333., 32001., 37296., ..., 31653., 35292., 26589.],
         [15255., 22881., 26679., ..., 23944., 26235., 19053.]],

        [[11507., 14898., 17906., ..., 21348., 21363., 15255.],
         [17563., 21748., 25936., ..., 31579., 31570., 22761.],
         [20794., 24924., 29014., ..., 34368., 34816., 25321.],
         ...,
         [21084., 31722., 36999., ..., 29559., 34506., 26541.],
         [21333., 32001., 37296., ..., 31653., 35292., 26589.],
         [15255., 22881., 26679., ..., 23944., 26235., 19053.]],

        [[11507., 14898., 17906., ..., 21348., 21363., 15255.],
         [17563., 21748., 25936., ..., 31579., 31570., 22761.],
         [20794., 24924., 29014., ..., 34368., 34816., 25321.],
         ...,
         [21084., 31722., 36999., ..., 29559., 34506., 26541.],
         [21333., 32001., 37296., ..., 31653., 35292., 26589.],
         [15255., 22881., 26679., ..., 23944., 26235., 19053.]],

        ...,

        [[11507., 14898., 17906., ..., 21348., 21363., 15255.],
         [17563., 21748., 25936., ..., 31579., 31570., 22761.],
         [20794., 24924., 29014., ..., 34368., 34816., 25321.],
         ...,
         [21084., 31722., 36999., ..., 29559., 34506., 26541.],
         [21333., 32001., 37296., ..., 31653., 35292., 26589.],
         [15255., 22881., 26679., ..., 23944., 26235., 19053.]],

        [[11507., 14898., 17906., ..., 21348., 21363., 15255.],
         [17563., 21748., 25936., ..., 31579., 31570., 22761.],
         [20794., 24924., 29014., ..., 34368., 34816., 25321.],
         ...,
         [21084., 31722., 36999., ..., 29559., 34506., 26541.],
         [21333., 32001., 37296., ..., 31653., 35292., 26589.],
         [15255., 22881., 26679., ..., 23944., 26235., 19053.]],

        [[11507., 14898., 17906., ..., 21348., 21363., 15255.],
         [17563., 21748., 25936., ..., 31579., 31570., 22761.],
         [20794., 24924., 29014., ..., 34368., 34816., 25321.],
         ...,
         [21084., 31722., 36999., ..., 29559., 34506., 26541.],
         [21333., 32001., 37296., ..., 31653., 35292., 26589.],
         [15255., 22881., 26679., ..., 23944., 26235., 19053.]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [0], 'to': [2, 6]}
torch node:
{'name': 'conv2d', 'output': array([[[[11507., 14898., 17906., ..., 21348., 21363., 15255.],
         [17563., 21748., 25936., ..., 31579., 31570., 22761.],
         [20794., 24924., 29014., ..., 34368., 34816., 25321.],
         ...,
         [21084., 31722., 36999., ..., 29559., 34506., 26541.],
         [21333., 32001., 37296., ..., 31653., 35292., 26589.],
         [15255., 22881., 26679., ..., 23944., 26235., 19053.]],

        [[11507., 14898., 17906., ..., 21348., 21363., 15255.],
         [17563., 21748., 25936., ..., 31579., 31570., 22761.],
         [20794., 24924., 29014., ..., 34368., 34816., 25321.],
         ...,
         [21084., 31722., 36999., ..., 29559., 34506., 26541.],
         [21333., 32001., 37296., ..., 31653., 35292., 26589.],
         [15255., 22881., 26679., ..., 23944., 26235., 19053.]],

        [[11507., 14898., 17906., ..., 21348., 21363., 15255.],
         [17563., 21748., 25936., ..., 31579., 31570., 22761.],
         [20794., 24924., 29014., ..., 34368., 34816., 25321.],
         ...,
         [21084., 31722., 36999., ..., 29559., 34506., 26541.],
         [21333., 32001., 37296., ..., 31653., 35292., 26589.],
         [15255., 22881., 26679., ..., 23944., 26235., 19053.]],

        ...,

        [[11507., 14898., 17906., ..., 21348., 21363., 15255.],
         [17563., 21748., 25936., ..., 31579., 31570., 22761.],
         [20794., 24924., 29014., ..., 34368., 34816., 25321.],
         ...,
         [21084., 31722., 36999., ..., 29559., 34506., 26541.],
         [21333., 32001., 37296., ..., 31653., 35292., 26589.],
         [15255., 22881., 26679., ..., 23944., 26235., 19053.]],

        [[11507., 14898., 17906., ..., 21348., 21363., 15255.],
         [17563., 21748., 25936., ..., 31579., 31570., 22761.],
         [20794., 24924., 29014., ..., 34368., 34816., 25321.],
         ...,
         [21084., 31722., 36999., ..., 29559., 34506., 26541.],
         [21333., 32001., 37296., ..., 31653., 35292., 26589.],
         [15255., 22881., 26679., ..., 23944., 26235., 19053.]],

        [[11507., 14898., 17906., ..., 21348., 21363., 15255.],
         [17563., 21748., 25936., ..., 31579., 31570., 22761.],
         [20794., 24924., 29014., ..., 34368., 34816., 25321.],
         ...,
         [21084., 31722., 36999., ..., 29559., 34506., 26541.],
         [21333., 32001., 37296., ..., 31653., 35292., 26589.],
         [15255., 22881., 26679., ..., 23944., 26235., 19053.]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [0], 'to': [2, 6]}

generate models:49

final statics:
total operators:28
tensorflow --> nums:28,distinct_bugs:1
mindspore --> nums:1,distinct_bugs:1
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:28
mindspore --> 
log:1
torch --> 

generate models:49

analyse output arrays in iter:53

pre layer res:
1:conv2d
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [22], 'to': [16]}
8:reshape
{'name': 'reshape', 'output': array([[[[5.056246 , 5.049856 , 5.056246 , ..., 5.1298985, 5.1416636,
          5.1474943],
         [5.1298985, 5.117994 , 5.1119876, ..., 5.17615  , 5.17615  ,
          5.164786 ],
         [5.0875964, 5.0875964, 5.0875964, ..., 5.17615  , 5.192957 ,
          5.192957 ],
         ...,
         [5.3752785, 5.370638 , 5.365976 , ..., 5.081404 , 5.062595 ,
          5.0998664],
         [5.198497 , 5.198497 , 5.214936 , ..., 5.31812  , 5.3798976,
          5.398163 ],
         [5.351858 , 5.293305 , 5.220356 , ..., 5.0689044, 5.049856 ,
          5.117994 ]],

        [[5.209486 , 5.209486 , 5.214936 , ..., 5.220356 , 5.214936 ,
          5.2040067],
         [5.1357985, 5.1298985, 5.09375  , ..., 5.075174 , 5.062595 ,
          5.123964 ],
         [5.214936 , 5.214936 , 5.209486 , ..., 5.030438 , 5.062595 ,
          5.0106354],
         ...,
         [5.1298985, 5.123964 , 5.123964 , ..., 4.727388 , 4.983607 ,
          5.236442 ],
         [5.273    , 5.17615  , 4.905275 , ..., 5.0998664, 5.0238805,
          5.0998664],
         [5.1298985, 5.123964 , 5.1298985, ..., 4.882802 , 5.164786 ,
          5.2574954]],

        [[5.26269  , 5.049856 , 4.574711 , ..., 5.049856 , 4.962845 ,
          5.0998664],
         [5.1357985, 5.1298985, 5.1357985, ..., 5.1357985, 5.236442 ,
          5.26269  ],
         [5.247024 , 4.934474 , 4.158883 , ..., 5.030438 , 4.934474 ,
          5.1119876],
         ...,
         [4.4426513, 4.3694477, 4.2341065, ..., 5.288267 , 5.293305 ,
          5.293305 ],
         [5.2574954, 5.117994 , 4.6821313, ..., 4.0943446, 4.0943446,
          4.3438053],
         [4.248495 , 4.060443 , 4.26268  , ..., 5.2983174, 5.293305 ,
          5.293305 ]],

        ...,

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [20], 'to': [16, 19]}
tf node:
{'name': 'add', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [1, 8], 'to': [21]}
ms node:
{'name': 'add', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [1, 8], 'to': [21]}
torch node:
{'name': 'add', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [1, 8], 'to': [21]}

generate models:52

analyse output arrays in iter:54

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[ 45.,  47.,  48., ...,  50.,  47.,  46.],
         [ 45.,  47.,  48., ...,  55.,  51.,  51.],
         [ 45.,  46.,  47., ...,  60.,  56.,  55.],
         ...,
         [ 50.,  50.,  51., ...,  97.,  79.,  76.],
         [ 50.,  49.,  51., ...,  81., 103.,  72.],
         [ 50.,  50.,  51., ...,  83.,  90.,  88.]],

        [[ 73.,  75.,  76., ...,  73.,  69.,  70.],
         [ 72.,  74.,  75., ...,  77.,  74.,  75.],
         [ 71.,  72.,  73., ...,  83.,  80.,  80.],
         ...,
         [ 76.,  78.,  78., ..., 118., 112., 104.],
         [ 76.,  77.,  78., ...,  92., 121., 101.],
         [ 75.,  78.,  77., ...,  91., 100., 110.]],

        [[ 28.,  30.,  33., ...,  28.,  29.,  31.],
         [ 27.,  29.,  32., ...,  32.,  31.,  32.],
         [ 29.,  30.,  31., ...,  36.,  34.,  34.],
         ...,
         [ 34.,  34.,  35., ...,  99.,  50.,  49.],
         [ 34.,  34.,  35., ..., 105., 100.,  44.],
         [ 35.,  33.,  35., ..., 100., 106.,  80.]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[ 3777.,  5382.,  5600., ...,  6812.,  5469.,  3485.],
         [ 5233.,  7436.,  7691., ...,  9889.,  8036.,  5149.],
         [ 5141.,  7272.,  7431., ..., 10506.,  8711.,  5643.],
         ...,
         [ 5807.,  9222., 10885., ..., 13070., 11220.,  7385.],
         [ 5293.,  8784., 10526., ..., 10867.,  9487.,  6396.],
         [ 3650.,  6486.,  7927., ...,  6858.,  6226.,  4351.]],

        [[ 3777.,  5382.,  5600., ...,  6812.,  5469.,  3485.],
         [ 5233.,  7436.,  7691., ...,  9889.,  8036.,  5149.],
         [ 5141.,  7272.,  7431., ..., 10506.,  8711.,  5643.],
         ...,
         [ 5807.,  9222., 10885., ..., 13070., 11220.,  7385.],
         [ 5293.,  8784., 10526., ..., 10867.,  9487.,  6396.],
         [ 3650.,  6486.,  7927., ...,  6858.,  6226.,  4351.]],

        [[ 3777.,  5382.,  5600., ...,  6812.,  5469.,  3485.],
         [ 5233.,  7436.,  7691., ...,  9889.,  8036.,  5149.],
         [ 5141.,  7272.,  7431., ..., 10506.,  8711.,  5643.],
         ...,
         [ 5807.,  9222., 10885., ..., 13070., 11220.,  7385.],
         [ 5293.,  8784., 10526., ..., 10867.,  9487.,  6396.],
         [ 3650.,  6486.,  7927., ...,  6858.,  6226.,  4351.]],

        ...,

        [[ 3777.,  5382.,  5600., ...,  6812.,  5469.,  3485.],
         [ 5233.,  7436.,  7691., ...,  9889.,  8036.,  5149.],
         [ 5141.,  7272.,  7431., ..., 10506.,  8711.,  5643.],
         ...,
         [ 5807.,  9222., 10885., ..., 13070., 11220.,  7385.],
         [ 5293.,  8784., 10526., ..., 10867.,  9487.,  6396.],
         [ 3650.,  6486.,  7927., ...,  6858.,  6226.,  4351.]],

        [[ 3777.,  5382.,  5600., ...,  6812.,  5469.,  3485.],
         [ 5233.,  7436.,  7691., ...,  9889.,  8036.,  5149.],
         [ 5141.,  7272.,  7431., ..., 10506.,  8711.,  5643.],
         ...,
         [ 5807.,  9222., 10885., ..., 13070., 11220.,  7385.],
         [ 5293.,  8784., 10526., ..., 10867.,  9487.,  6396.],
         [ 3650.,  6486.,  7927., ...,  6858.,  6226.,  4351.]],

        [[ 3777.,  5382.,  5600., ...,  6812.,  5469.,  3485.],
         [ 5233.,  7436.,  7691., ...,  9889.,  8036.,  5149.],
         [ 5141.,  7272.,  7431., ..., 10506.,  8711.,  5643.],
         ...,
         [ 5807.,  9222., 10885., ..., 13070., 11220.,  7385.],
         [ 5293.,  8784., 10526., ..., 10867.,  9487.,  6396.],
         [ 3650.,  6486.,  7927., ...,  6858.,  6226.,  4351.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [0], 'to': [2]}
ms node:
{'name': 'conv2d', 'output': array([[[[ 2411.,  3682.,  4429., ...,  5517.,  5088.,  3439.],
         [ 3578.,  5452.,  6541., ...,  8584.,  8055.,  5484.],
         [ 4124.,  6252.,  7449., ..., 10419.,  9988.,  6877.],
         ...,
         [ 4570.,  6991.,  9249., ..., 13250., 13098.,  9341.],
         [ 4596.,  7958., 10853., ..., 12683., 12742.,  9293.],
         [ 3291.,  5981.,  8525., ...,  8537.,  8973.,  6703.]],

        [[ 2411.,  3682.,  4429., ...,  5517.,  5088.,  3439.],
         [ 3578.,  5452.,  6541., ...,  8584.,  8055.,  5484.],
         [ 4124.,  6252.,  7449., ..., 10419.,  9988.,  6877.],
         ...,
         [ 4570.,  6991.,  9249., ..., 13250., 13098.,  9341.],
         [ 4596.,  7958., 10853., ..., 12683., 12742.,  9293.],
         [ 3291.,  5981.,  8525., ...,  8537.,  8973.,  6703.]],

        [[ 2411.,  3682.,  4429., ...,  5517.,  5088.,  3439.],
         [ 3578.,  5452.,  6541., ...,  8584.,  8055.,  5484.],
         [ 4124.,  6252.,  7449., ..., 10419.,  9988.,  6877.],
         ...,
         [ 4570.,  6991.,  9249., ..., 13250., 13098.,  9341.],
         [ 4596.,  7958., 10853., ..., 12683., 12742.,  9293.],
         [ 3291.,  5981.,  8525., ...,  8537.,  8973.,  6703.]],

        ...,

        [[ 2411.,  3682.,  4429., ...,  5517.,  5088.,  3439.],
         [ 3578.,  5452.,  6541., ...,  8584.,  8055.,  5484.],
         [ 4124.,  6252.,  7449., ..., 10419.,  9988.,  6877.],
         ...,
         [ 4570.,  6991.,  9249., ..., 13250., 13098.,  9341.],
         [ 4596.,  7958., 10853., ..., 12683., 12742.,  9293.],
         [ 3291.,  5981.,  8525., ...,  8537.,  8973.,  6703.]],

        [[ 2411.,  3682.,  4429., ...,  5517.,  5088.,  3439.],
         [ 3578.,  5452.,  6541., ...,  8584.,  8055.,  5484.],
         [ 4124.,  6252.,  7449., ..., 10419.,  9988.,  6877.],
         ...,
         [ 4570.,  6991.,  9249., ..., 13250., 13098.,  9341.],
         [ 4596.,  7958., 10853., ..., 12683., 12742.,  9293.],
         [ 3291.,  5981.,  8525., ...,  8537.,  8973.,  6703.]],

        [[ 2411.,  3682.,  4429., ...,  5517.,  5088.,  3439.],
         [ 3578.,  5452.,  6541., ...,  8584.,  8055.,  5484.],
         [ 4124.,  6252.,  7449., ..., 10419.,  9988.,  6877.],
         ...,
         [ 4570.,  6991.,  9249., ..., 13250., 13098.,  9341.],
         [ 4596.,  7958., 10853., ..., 12683., 12742.,  9293.],
         [ 3291.,  5981.,  8525., ...,  8537.,  8973.,  6703.]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [0], 'to': [2]}
torch node:
{'name': 'conv2d', 'output': array([[[[ 2411.,  3682.,  4429., ...,  5517.,  5088.,  3439.],
         [ 3578.,  5452.,  6541., ...,  8584.,  8055.,  5484.],
         [ 4124.,  6252.,  7449., ..., 10419.,  9988.,  6877.],
         ...,
         [ 4570.,  6991.,  9249., ..., 13250., 13098.,  9341.],
         [ 4596.,  7958., 10853., ..., 12683., 12742.,  9293.],
         [ 3291.,  5981.,  8525., ...,  8537.,  8973.,  6703.]],

        [[ 2411.,  3682.,  4429., ...,  5517.,  5088.,  3439.],
         [ 3578.,  5452.,  6541., ...,  8584.,  8055.,  5484.],
         [ 4124.,  6252.,  7449., ..., 10419.,  9988.,  6877.],
         ...,
         [ 4570.,  6991.,  9249., ..., 13250., 13098.,  9341.],
         [ 4596.,  7958., 10853., ..., 12683., 12742.,  9293.],
         [ 3291.,  5981.,  8525., ...,  8537.,  8973.,  6703.]],

        [[ 2411.,  3682.,  4429., ...,  5517.,  5088.,  3439.],
         [ 3578.,  5452.,  6541., ...,  8584.,  8055.,  5484.],
         [ 4124.,  6252.,  7449., ..., 10419.,  9988.,  6877.],
         ...,
         [ 4570.,  6991.,  9249., ..., 13250., 13098.,  9341.],
         [ 4596.,  7958., 10853., ..., 12683., 12742.,  9293.],
         [ 3291.,  5981.,  8525., ...,  8537.,  8973.,  6703.]],

        ...,

        [[ 2411.,  3682.,  4429., ...,  5517.,  5088.,  3439.],
         [ 3578.,  5452.,  6541., ...,  8584.,  8055.,  5484.],
         [ 4124.,  6252.,  7449., ..., 10419.,  9988.,  6877.],
         ...,
         [ 4570.,  6991.,  9249., ..., 13250., 13098.,  9341.],
         [ 4596.,  7958., 10853., ..., 12683., 12742.,  9293.],
         [ 3291.,  5981.,  8525., ...,  8537.,  8973.,  6703.]],

        [[ 2411.,  3682.,  4429., ...,  5517.,  5088.,  3439.],
         [ 3578.,  5452.,  6541., ...,  8584.,  8055.,  5484.],
         [ 4124.,  6252.,  7449., ..., 10419.,  9988.,  6877.],
         ...,
         [ 4570.,  6991.,  9249., ..., 13250., 13098.,  9341.],
         [ 4596.,  7958., 10853., ..., 12683., 12742.,  9293.],
         [ 3291.,  5981.,  8525., ...,  8537.,  8973.,  6703.]],

        [[ 2411.,  3682.,  4429., ...,  5517.,  5088.,  3439.],
         [ 3578.,  5452.,  6541., ...,  8584.,  8055.,  5484.],
         [ 4124.,  6252.,  7449., ..., 10419.,  9988.,  6877.],
         ...,
         [ 4570.,  6991.,  9249., ..., 13250., 13098.,  9341.],
         [ 4596.,  7958., 10853., ..., 12683., 12742.,  9293.],
         [ 3291.,  5981.,  8525., ...,  8537.,  8973.,  6703.]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [0], 'to': [2]}

pre layer res:
17:add
{'name': 'add', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [13, 18], 'to': [14]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 14, 14]), 'from': [17], 'to': [15]}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 64, 14, 14), 'from': [17], 'to': [15]}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 14, 14]), 'from': [17], 'to': [15]}

generate models:53

analyse output arrays in iter:56

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[141., 139., 136., ..., 228., 228., 229.],
         [148., 150., 148., ..., 228., 228., 228.],
         [149., 149., 148., ..., 230., 229., 229.],
         ...,
         [125., 124., 139., ..., 220., 199., 208.],
         [126., 116., 135., ..., 246., 226., 196.],
         [143., 145., 169., ..., 254., 255., 227.]],

        [[ 70.,  61.,  55., ..., 198., 199., 200.],
         [ 71.,  67.,  64., ..., 197., 196., 197.],
         [ 72.,  66.,  64., ..., 197., 197., 197.],
         ...,
         [100., 102., 110., ..., 169., 143., 149.],
         [101.,  93., 107., ..., 205., 181., 145.],
         [105., 107., 127., ..., 208., 206., 174.]],

        [[  8.,   2.,   0., ..., 155., 156., 157.],
         [ 10.,   5.,   2., ..., 153., 152., 153.],
         [ 17.,   7.,   4., ..., 151., 151., 151.],
         ...,
         [ 73.,  80.,  75., ..., 109.,  86.,  93.],
         [ 75.,  71.,  73., ..., 144., 121.,  87.],
         [ 67.,  71.,  83., ..., 141., 138., 105.]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[ 5620.,  7653.,  7271., ..., 17465., 16181., 11272.],
         [ 8097., 11154., 10808., ..., 20003., 18642., 13068.],
         [ 8400., 11805., 11747., ..., 14580., 13807.,  9778.],
         ...,
         [13373., 21206., 23979., ..., 25948., 21637., 14243.],
         [11764., 18615., 20720., ..., 22817., 18923., 12277.],
         [ 8033., 12628., 13842., ..., 15801., 12972.,  8301.]],

        [[ 5620.,  7653.,  7271., ..., 17465., 16181., 11272.],
         [ 8097., 11154., 10808., ..., 20003., 18642., 13068.],
         [ 8400., 11805., 11747., ..., 14580., 13807.,  9778.],
         ...,
         [13373., 21206., 23979., ..., 25948., 21637., 14243.],
         [11764., 18615., 20720., ..., 22817., 18923., 12277.],
         [ 8033., 12628., 13842., ..., 15801., 12972.,  8301.]],

        [[ 5620.,  7653.,  7271., ..., 17465., 16181., 11272.],
         [ 8097., 11154., 10808., ..., 20003., 18642., 13068.],
         [ 8400., 11805., 11747., ..., 14580., 13807.,  9778.],
         ...,
         [13373., 21206., 23979., ..., 25948., 21637., 14243.],
         [11764., 18615., 20720., ..., 22817., 18923., 12277.],
         [ 8033., 12628., 13842., ..., 15801., 12972.,  8301.]],

        ...,

        [[ 5620.,  7653.,  7271., ..., 17465., 16181., 11272.],
         [ 8097., 11154., 10808., ..., 20003., 18642., 13068.],
         [ 8400., 11805., 11747., ..., 14580., 13807.,  9778.],
         ...,
         [13373., 21206., 23979., ..., 25948., 21637., 14243.],
         [11764., 18615., 20720., ..., 22817., 18923., 12277.],
         [ 8033., 12628., 13842., ..., 15801., 12972.,  8301.]],

        [[ 5620.,  7653.,  7271., ..., 17465., 16181., 11272.],
         [ 8097., 11154., 10808., ..., 20003., 18642., 13068.],
         [ 8400., 11805., 11747., ..., 14580., 13807.,  9778.],
         ...,
         [13373., 21206., 23979., ..., 25948., 21637., 14243.],
         [11764., 18615., 20720., ..., 22817., 18923., 12277.],
         [ 8033., 12628., 13842., ..., 15801., 12972.,  8301.]],

        [[ 5620.,  7653.,  7271., ..., 17465., 16181., 11272.],
         [ 8097., 11154., 10808., ..., 20003., 18642., 13068.],
         [ 8400., 11805., 11747., ..., 14580., 13807.,  9778.],
         ...,
         [13373., 21206., 23979., ..., 25948., 21637., 14243.],
         [11764., 18615., 20720., ..., 22817., 18923., 12277.],
         [ 8033., 12628., 13842., ..., 15801., 12972.,  8301.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [0], 'to': [18]}
ms node:
{'name': 'conv2d', 'output': array([[[[ 3514.,  5141.,  5714., ..., 14667., 15713., 11493.],
         [ 5557.,  8156.,  9204., ..., 17594., 19983., 15120.],
         [ 6566.,  9858., 11396., ..., 16123., 18318., 13860.],
         ...,
         [ 9887., 16964., 22467., ..., 26500., 25602., 18139.],
         [ 9956., 17530., 22948., ..., 26818., 25794., 18155.],
         [ 7125., 12855., 16686., ..., 19700., 18749., 13072.]],

        [[ 3514.,  5141.,  5714., ..., 14667., 15713., 11493.],
         [ 5557.,  8156.,  9204., ..., 17594., 19983., 15120.],
         [ 6566.,  9858., 11396., ..., 16123., 18318., 13860.],
         ...,
         [ 9887., 16964., 22467., ..., 26500., 25602., 18139.],
         [ 9956., 17530., 22948., ..., 26818., 25794., 18155.],
         [ 7125., 12855., 16686., ..., 19700., 18749., 13072.]],

        [[ 3514.,  5141.,  5714., ..., 14667., 15713., 11493.],
         [ 5557.,  8156.,  9204., ..., 17594., 19983., 15120.],
         [ 6566.,  9858., 11396., ..., 16123., 18318., 13860.],
         ...,
         [ 9887., 16964., 22467., ..., 26500., 25602., 18139.],
         [ 9956., 17530., 22948., ..., 26818., 25794., 18155.],
         [ 7125., 12855., 16686., ..., 19700., 18749., 13072.]],

        ...,

        [[ 3514.,  5141.,  5714., ..., 14667., 15713., 11493.],
         [ 5557.,  8156.,  9204., ..., 17594., 19983., 15120.],
         [ 6566.,  9858., 11396., ..., 16123., 18318., 13860.],
         ...,
         [ 9887., 16964., 22467., ..., 26500., 25602., 18139.],
         [ 9956., 17530., 22948., ..., 26818., 25794., 18155.],
         [ 7125., 12855., 16686., ..., 19700., 18749., 13072.]],

        [[ 3514.,  5141.,  5714., ..., 14667., 15713., 11493.],
         [ 5557.,  8156.,  9204., ..., 17594., 19983., 15120.],
         [ 6566.,  9858., 11396., ..., 16123., 18318., 13860.],
         ...,
         [ 9887., 16964., 22467., ..., 26500., 25602., 18139.],
         [ 9956., 17530., 22948., ..., 26818., 25794., 18155.],
         [ 7125., 12855., 16686., ..., 19700., 18749., 13072.]],

        [[ 3514.,  5141.,  5714., ..., 14667., 15713., 11493.],
         [ 5557.,  8156.,  9204., ..., 17594., 19983., 15120.],
         [ 6566.,  9858., 11396., ..., 16123., 18318., 13860.],
         ...,
         [ 9887., 16964., 22467., ..., 26500., 25602., 18139.],
         [ 9956., 17530., 22948., ..., 26818., 25794., 18155.],
         [ 7125., 12855., 16686., ..., 19700., 18749., 13072.]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [0], 'to': [18]}
torch node:
{'name': 'conv2d', 'output': array([[[[ 3514.,  5141.,  5714., ..., 14667., 15713., 11493.],
         [ 5557.,  8156.,  9204., ..., 17594., 19983., 15120.],
         [ 6566.,  9858., 11396., ..., 16123., 18318., 13860.],
         ...,
         [ 9887., 16964., 22467., ..., 26500., 25602., 18139.],
         [ 9956., 17530., 22948., ..., 26818., 25794., 18155.],
         [ 7125., 12855., 16686., ..., 19700., 18749., 13072.]],

        [[ 3514.,  5141.,  5714., ..., 14667., 15713., 11493.],
         [ 5557.,  8156.,  9204., ..., 17594., 19983., 15120.],
         [ 6566.,  9858., 11396., ..., 16123., 18318., 13860.],
         ...,
         [ 9887., 16964., 22467., ..., 26500., 25602., 18139.],
         [ 9956., 17530., 22948., ..., 26818., 25794., 18155.],
         [ 7125., 12855., 16686., ..., 19700., 18749., 13072.]],

        [[ 3514.,  5141.,  5714., ..., 14667., 15713., 11493.],
         [ 5557.,  8156.,  9204., ..., 17594., 19983., 15120.],
         [ 6566.,  9858., 11396., ..., 16123., 18318., 13860.],
         ...,
         [ 9887., 16964., 22467., ..., 26500., 25602., 18139.],
         [ 9956., 17530., 22948., ..., 26818., 25794., 18155.],
         [ 7125., 12855., 16686., ..., 19700., 18749., 13072.]],

        ...,

        [[ 3514.,  5141.,  5714., ..., 14667., 15713., 11493.],
         [ 5557.,  8156.,  9204., ..., 17594., 19983., 15120.],
         [ 6566.,  9858., 11396., ..., 16123., 18318., 13860.],
         ...,
         [ 9887., 16964., 22467., ..., 26500., 25602., 18139.],
         [ 9956., 17530., 22948., ..., 26818., 25794., 18155.],
         [ 7125., 12855., 16686., ..., 19700., 18749., 13072.]],

        [[ 3514.,  5141.,  5714., ..., 14667., 15713., 11493.],
         [ 5557.,  8156.,  9204., ..., 17594., 19983., 15120.],
         [ 6566.,  9858., 11396., ..., 16123., 18318., 13860.],
         ...,
         [ 9887., 16964., 22467., ..., 26500., 25602., 18139.],
         [ 9956., 17530., 22948., ..., 26818., 25794., 18155.],
         [ 7125., 12855., 16686., ..., 19700., 18749., 13072.]],

        [[ 3514.,  5141.,  5714., ..., 14667., 15713., 11493.],
         [ 5557.,  8156.,  9204., ..., 17594., 19983., 15120.],
         [ 6566.,  9858., 11396., ..., 16123., 18318., 13860.],
         ...,
         [ 9887., 16964., 22467., ..., 26500., 25602., 18139.],
         [ 9956., 17530., 22948., ..., 26818., 25794., 18155.],
         [ 7125., 12855., 16686., ..., 19700., 18749., 13072.]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [0], 'to': [18]}

generate models:55

analyse output arrays in iter:59

pre layer res:
16:exp
{'name': 'exp', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 16, 16]), 'from': [9], 'to': [5]}
tf node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 16, 16]), 'from': [16], 'to': [10]}
ms node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 256, 16, 16), 'from': [16], 'to': [10]}
torch node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 16, 16]), 'from': [16], 'to': [10]}

generate models:58

analyse output arrays in iter:61

pre layer res:
4:tanh
{'name': 'tanh', 'output': array([[[[0.9998461 , 0.9998539 , 0.999861  , ..., 0.99992657,
          0.9998719 , 0.99981153],
         [0.9998378 , 0.99985135, 0.9998633 , ..., 0.9999239 ,
          0.9998761 , 0.99981153],
         [0.9998461 , 0.9998633 , 0.999878  , ..., 0.99992824,
          0.9998854 , 0.99982214],
         ...,
         [0.99992657, 0.99993086, 0.9999347 , ..., 0.9999416 ,
          0.9999533 , 0.9999505 ],
         [0.9999347 , 0.9999347 , 0.9999382 , ..., 0.9999428 ,
          0.99995005, 0.99994636],
         [0.9999331 , 0.9999316 , 0.99993604, ..., 0.9999524 ,
          0.9999547 , 0.9999511 ]],

        [[0.99985874, 0.99986565, 0.999874  , ..., 0.9999275 ,
          0.999874  , 0.99981153],
         [0.99985135, 0.9998633 , 0.999874  , ..., 0.9999249 ,
          0.999878  , 0.99981153],
         [0.99985874, 0.9998719 , 0.9998854 , ..., 0.99992913,
          0.999887  , 0.9998286 ],
         ...,
         [0.9999275 , 0.9999316 , 0.9999354 , ..., 0.9999377 ,
          0.9999496 , 0.99994636],
         [0.9999354 , 0.9999354 , 0.999939  , ..., 0.99993956,
          0.99994683, 0.9999422 ],
         [0.999934  , 0.99993247, 0.99993694, ..., 0.99995005,
          0.99995196, 0.9999474 ]],

        [[0.9998719 , 0.999874  , 0.9998797 , ..., 0.9999219 ,
          0.9998633 , 0.99983466],
         [0.99986565, 0.9998761 , 0.999887  , ..., 0.9999188 ,
          0.99986774, 0.9998316 ],
         [0.9998719 , 0.9998919 , 0.99990076, ..., 0.9999239 ,
          0.999874  , 0.9998078 ],
         ...,
         [0.9999228 , 0.99992824, 0.9999316 , ..., 0.99992913,
          0.99994683, 0.9999416 ],
         [0.9999316 , 0.9999316 , 0.9999354 , ..., 0.9999239 ,
          0.999939  , 0.99993694],
         [0.99992996, 0.99992824, 0.9999331 , ..., 0.99993956,
          0.9999458 , 0.9999428 ]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [12], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[ 74.99139 , 104.98873 , 104.99035 , ..., 104.991684,
           89.991356,  59.993553],
         [104.98847 , 146.98499 , 146.98729 , ..., 146.98889 ,
          125.98841 ,  83.99134 ],
         [104.98865 , 146.98557 , 146.98755 , ..., 146.98973 ,
          125.98933 ,  83.99206 ],
         ...,
         [104.95687 , 146.94717 , 146.94556 , ..., 140.88972 ,
          119.893654,  83.909096],
         [ 89.97505 , 125.97044 , 125.968796, ..., 119.90135 ,
          101.90367 ,  71.91133 ],
         [ 59.995987,  83.9945  ,  83.99452 , ...,  77.90784 ,
           65.90953 ,  47.91541 ]],

        [[ 74.99139 , 104.98873 , 104.99035 , ..., 104.991684,
           89.991356,  59.993553],
         [104.98847 , 146.98499 , 146.98729 , ..., 146.98889 ,
          125.98841 ,  83.99134 ],
         [104.98865 , 146.98557 , 146.98755 , ..., 146.98973 ,
          125.98933 ,  83.99206 ],
         ...,
         [104.95687 , 146.94717 , 146.94556 , ..., 140.88972 ,
          119.893654,  83.909096],
         [ 89.97505 , 125.97044 , 125.968796, ..., 119.90135 ,
          101.90367 ,  71.91133 ],
         [ 59.995987,  83.9945  ,  83.99452 , ...,  77.90784 ,
           65.90953 ,  47.91541 ]],

        [[ 74.99139 , 104.98873 , 104.99035 , ..., 104.991684,
           89.991356,  59.993553],
         [104.98847 , 146.98499 , 146.98729 , ..., 146.98889 ,
          125.98841 ,  83.99134 ],
         [104.98865 , 146.98557 , 146.98755 , ..., 146.98973 ,
          125.98933 ,  83.99206 ],
         ...,
         [104.95687 , 146.94717 , 146.94556 , ..., 140.88972 ,
          119.893654,  83.909096],
         [ 89.97505 , 125.97044 , 125.968796, ..., 119.90135 ,
          101.90367 ,  71.91133 ],
         [ 59.995987,  83.9945  ,  83.99452 , ...,  77.90784 ,
           65.90953 ,  47.91541 ]],

        ...,

        [[ 74.99139 , 104.98873 , 104.99035 , ..., 104.991684,
           89.991356,  59.993553],
         [104.98847 , 146.98499 , 146.98729 , ..., 146.98889 ,
          125.98841 ,  83.99134 ],
         [104.98865 , 146.98557 , 146.98755 , ..., 146.98973 ,
          125.98933 ,  83.99206 ],
         ...,
         [104.95687 , 146.94717 , 146.94556 , ..., 140.88972 ,
          119.893654,  83.909096],
         [ 89.97505 , 125.97044 , 125.968796, ..., 119.90135 ,
          101.90367 ,  71.91133 ],
         [ 59.995987,  83.9945  ,  83.99452 , ...,  77.90784 ,
           65.90953 ,  47.91541 ]],

        [[ 74.99139 , 104.98873 , 104.99035 , ..., 104.991684,
           89.991356,  59.993553],
         [104.98847 , 146.98499 , 146.98729 , ..., 146.98889 ,
          125.98841 ,  83.99134 ],
         [104.98865 , 146.98557 , 146.98755 , ..., 146.98973 ,
          125.98933 ,  83.99206 ],
         ...,
         [104.95687 , 146.94717 , 146.94556 , ..., 140.88972 ,
          119.893654,  83.909096],
         [ 89.97505 , 125.97044 , 125.968796, ..., 119.90135 ,
          101.90367 ,  71.91133 ],
         [ 59.995987,  83.9945  ,  83.99452 , ...,  77.90784 ,
           65.90953 ,  47.91541 ]],

        [[ 74.99139 , 104.98873 , 104.99035 , ..., 104.991684,
           89.991356,  59.993553],
         [104.98847 , 146.98499 , 146.98729 , ..., 146.98889 ,
          125.98841 ,  83.99134 ],
         [104.98865 , 146.98557 , 146.98755 , ..., 146.98973 ,
          125.98933 ,  83.99206 ],
         ...,
         [104.95687 , 146.94717 , 146.94556 , ..., 140.88972 ,
          119.893654,  83.909096],
         [ 89.97505 , 125.97044 , 125.968796, ..., 119.90135 ,
          101.90367 ,  71.91133 ],
         [ 59.995987,  83.9945  ,  83.99452 , ...,  77.90784 ,
           65.90953 ,  47.91541 ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [4], 'to': [5]}
ms node:
{'name': 'conv2d', 'output': array([[[[ 47.99411 ,  71.99181 ,  83.99141 , ...,  83.99374 ,
           83.99198 ,  59.993774],
         [ 71.99155 , 107.98832 , 125.987816, ..., 125.99102 ,
          125.98856 ,  89.99114 ],
         [ 83.990486, 125.98713 , 146.98683 , ..., 146.99013 ,
          146.98749 , 104.990265],
         ...,
         [ 83.97799 , 125.94263 , 146.93925 , ..., 140.88771 ,
          140.88893 ,  98.89993 ],
         [ 83.98349 , 125.95995 , 146.95691 , ..., 140.89604 ,
          140.89775 ,  98.904785],
         [ 59.992172,  89.98609 , 104.984146, ...,  98.9021  ,
           98.90373 ,  68.90842 ]],

        [[ 47.99411 ,  71.99181 ,  83.99141 , ...,  83.99374 ,
           83.99198 ,  59.993774],
         [ 71.99155 , 107.98832 , 125.987816, ..., 125.99102 ,
          125.98856 ,  89.99114 ],
         [ 83.990486, 125.98713 , 146.98683 , ..., 146.99013 ,
          146.98749 , 104.990265],
         ...,
         [ 83.97799 , 125.94263 , 146.93925 , ..., 140.88771 ,
          140.88893 ,  98.89993 ],
         [ 83.98349 , 125.95995 , 146.95691 , ..., 140.89604 ,
          140.89775 ,  98.904785],
         [ 59.992172,  89.98609 , 104.984146, ...,  98.9021  ,
           98.90373 ,  68.90842 ]],

        [[ 47.99411 ,  71.99181 ,  83.99141 , ...,  83.99374 ,
           83.99198 ,  59.993774],
         [ 71.99155 , 107.98832 , 125.987816, ..., 125.99102 ,
          125.98856 ,  89.99114 ],
         [ 83.990486, 125.98713 , 146.98683 , ..., 146.99013 ,
          146.98749 , 104.990265],
         ...,
         [ 83.97799 , 125.94263 , 146.93925 , ..., 140.88771 ,
          140.88893 ,  98.89993 ],
         [ 83.98349 , 125.95995 , 146.95691 , ..., 140.89604 ,
          140.89775 ,  98.904785],
         [ 59.992172,  89.98609 , 104.984146, ...,  98.9021  ,
           98.90373 ,  68.90842 ]],

        ...,

        [[ 47.99411 ,  71.99181 ,  83.99141 , ...,  83.99374 ,
           83.99198 ,  59.993774],
         [ 71.99155 , 107.98832 , 125.987816, ..., 125.99102 ,
          125.98856 ,  89.99114 ],
         [ 83.990486, 125.98713 , 146.98683 , ..., 146.99013 ,
          146.98749 , 104.990265],
         ...,
         [ 83.97799 , 125.94263 , 146.93925 , ..., 140.88771 ,
          140.88893 ,  98.89993 ],
         [ 83.98349 , 125.95995 , 146.95691 , ..., 140.89604 ,
          140.89775 ,  98.904785],
         [ 59.992172,  89.98609 , 104.984146, ...,  98.9021  ,
           98.90373 ,  68.90842 ]],

        [[ 47.99411 ,  71.99181 ,  83.99141 , ...,  83.99374 ,
           83.99198 ,  59.993774],
         [ 71.99155 , 107.98832 , 125.987816, ..., 125.99102 ,
          125.98856 ,  89.99114 ],
         [ 83.990486, 125.98713 , 146.98683 , ..., 146.99013 ,
          146.98749 , 104.990265],
         ...,
         [ 83.97799 , 125.94263 , 146.93925 , ..., 140.88771 ,
          140.88893 ,  98.89993 ],
         [ 83.98349 , 125.95995 , 146.95691 , ..., 140.89604 ,
          140.89775 ,  98.904785],
         [ 59.992172,  89.98609 , 104.984146, ...,  98.9021  ,
           98.90373 ,  68.90842 ]],

        [[ 47.99411 ,  71.99181 ,  83.99141 , ...,  83.99374 ,
           83.99198 ,  59.993774],
         [ 71.99155 , 107.98832 , 125.987816, ..., 125.99102 ,
          125.98856 ,  89.99114 ],
         [ 83.990486, 125.98713 , 146.98683 , ..., 146.99013 ,
          146.98749 , 104.990265],
         ...,
         [ 83.97799 , 125.94263 , 146.93925 , ..., 140.88771 ,
          140.88893 ,  98.89993 ],
         [ 83.98349 , 125.95995 , 146.95691 , ..., 140.89604 ,
          140.89775 ,  98.904785],
         [ 59.992172,  89.98609 , 104.984146, ...,  98.9021  ,
           98.90373 ,  68.90842 ]]]], dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [4], 'to': [5]}
torch node:
{'name': 'conv2d', 'output': array([[[[ 47.994118,  71.99181 ,  83.99139 , ...,  83.99374 ,
           83.99197 ,  59.993763],
         [ 71.99155 , 107.988304, 125.98776 , ..., 125.99103 ,
          125.98857 ,  89.99114 ],
         [ 83.99046 , 125.987114, 146.98679 , ..., 146.99005 ,
          146.98743 , 104.99027 ],
         ...,
         [ 83.977974, 125.94264 , 146.93932 , ..., 140.88774 ,
          140.88898 ,  98.89994 ],
         [ 83.983505, 125.95997 , 146.95685 , ..., 140.89604 ,
          140.89778 ,  98.90477 ],
         [ 59.99216 ,  89.98609 , 104.98415 , ...,  98.90211 ,
           98.90373 ,  68.90842 ]],

        [[ 47.994118,  71.99181 ,  83.99139 , ...,  83.99374 ,
           83.99197 ,  59.993763],
         [ 71.99155 , 107.988304, 125.98776 , ..., 125.99103 ,
          125.98857 ,  89.99114 ],
         [ 83.99046 , 125.987114, 146.98679 , ..., 146.99005 ,
          146.98743 , 104.99027 ],
         ...,
         [ 83.977974, 125.94264 , 146.93932 , ..., 140.88774 ,
          140.88898 ,  98.89994 ],
         [ 83.983505, 125.95997 , 146.95685 , ..., 140.89604 ,
          140.89778 ,  98.90477 ],
         [ 59.99216 ,  89.98609 , 104.98415 , ...,  98.90211 ,
           98.90373 ,  68.90842 ]],

        [[ 47.994118,  71.99181 ,  83.99139 , ...,  83.99374 ,
           83.99197 ,  59.993763],
         [ 71.99155 , 107.988304, 125.98776 , ..., 125.99103 ,
          125.98857 ,  89.99114 ],
         [ 83.99046 , 125.987114, 146.98679 , ..., 146.99005 ,
          146.98743 , 104.99027 ],
         ...,
         [ 83.977974, 125.94264 , 146.93932 , ..., 140.88774 ,
          140.88898 ,  98.89994 ],
         [ 83.983505, 125.95997 , 146.95685 , ..., 140.89604 ,
          140.89778 ,  98.90477 ],
         [ 59.99216 ,  89.98609 , 104.98415 , ...,  98.90211 ,
           98.90373 ,  68.90842 ]],

        ...,

        [[ 47.994118,  71.99181 ,  83.99139 , ...,  83.99374 ,
           83.99197 ,  59.993763],
         [ 71.99155 , 107.988304, 125.98776 , ..., 125.99103 ,
          125.98857 ,  89.99114 ],
         [ 83.99046 , 125.987114, 146.98679 , ..., 146.99005 ,
          146.98743 , 104.99027 ],
         ...,
         [ 83.977974, 125.94264 , 146.93932 , ..., 140.88774 ,
          140.88898 ,  98.89994 ],
         [ 83.983505, 125.95997 , 146.95685 , ..., 140.89604 ,
          140.89778 ,  98.90477 ],
         [ 59.99216 ,  89.98609 , 104.98415 , ...,  98.90211 ,
           98.90373 ,  68.90842 ]],

        [[ 47.994118,  71.99181 ,  83.99139 , ...,  83.99374 ,
           83.99197 ,  59.993763],
         [ 71.99155 , 107.988304, 125.98776 , ..., 125.99103 ,
          125.98857 ,  89.99114 ],
         [ 83.99046 , 125.987114, 146.98679 , ..., 146.99005 ,
          146.98743 , 104.99027 ],
         ...,
         [ 83.977974, 125.94264 , 146.93932 , ..., 140.88774 ,
          140.88898 ,  98.89994 ],
         [ 83.983505, 125.95997 , 146.95685 , ..., 140.89604 ,
          140.89778 ,  98.90477 ],
         [ 59.99216 ,  89.98609 , 104.98415 , ...,  98.90211 ,
           98.90373 ,  68.90842 ]],

        [[ 47.994118,  71.99181 ,  83.99139 , ...,  83.99374 ,
           83.99197 ,  59.993763],
         [ 71.99155 , 107.988304, 125.98776 , ..., 125.99103 ,
          125.98857 ,  89.99114 ],
         [ 83.99046 , 125.987114, 146.98679 , ..., 146.99005 ,
          146.98743 , 104.99027 ],
         ...,
         [ 83.977974, 125.94264 , 146.93932 , ..., 140.88774 ,
          140.88898 ,  98.89994 ],
         [ 83.983505, 125.95997 , 146.95685 , ..., 140.89604 ,
          140.89778 ,  98.90477 ],
         [ 59.99216 ,  89.98609 , 104.98415 , ...,  98.90211 ,
           98.90373 ,  68.90842 ]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [4], 'to': [5]}

generate models:60

analyse output arrays in iter:64

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[ 65.,  67.,  69., ...,  93., 108., 102.],
         [ 65.,  65.,  69., ..., 104., 122., 132.],
         [ 62.,  63.,  68., ..., 122., 146., 140.],
         ...,
         [ 88.,  90.,  95., ...,  83.,  89.,  92.],
         [ 90.,  94.,  98., ...,  75.,  78.,  85.],
         [ 95., 102., 104., ...,  74.,  79.,  84.]],

        [[ 29.,  32.,  35., ...,  73.,  87.,  81.],
         [ 29.,  30.,  34., ...,  83.,  97., 106.],
         [ 27.,  28.,  32., ...,  99., 118., 114.],
         ...,
         [ 76.,  79.,  85., ...,  85.,  93.,  97.],
         [ 79.,  83.,  87., ...,  66.,  74.,  86.],
         [ 84.,  90.,  94., ...,  62.,  70.,  78.]],

        [[ 29.,  30.,  33., ...,  70.,  82.,  74.],
         [ 29.,  28.,  32., ...,  78.,  90.,  98.],
         [ 25.,  24.,  30., ...,  93., 110., 104.],
         ...,
         [ 84.,  86.,  92., ...,  99., 108., 111.],
         [ 85.,  90.,  95., ...,  71.,  83.,  97.],
         [ 92.,  98., 102., ...,  62.,  73.,  83.]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[ 3656.,  7109., 10072., ..., 10232.,  9389.,  6457.],
         [ 4984.,  9408., 13705., ..., 15020., 13619.,  9270.],
         [ 5537., 10171., 15105., ..., 16388., 14883., 10229.],
         ...,
         [ 8727., 12040., 11302., ..., 10756., 10216.,  7484.],
         [ 7918., 10965., 10568., ...,  7815.,  7904.,  6062.],
         [ 5444.,  7542.,  7404., ...,  5161.,  5309.,  3981.]],

        [[ 3656.,  7109., 10072., ..., 10232.,  9389.,  6457.],
         [ 4984.,  9408., 13705., ..., 15020., 13619.,  9270.],
         [ 5537., 10171., 15105., ..., 16388., 14883., 10229.],
         ...,
         [ 8727., 12040., 11302., ..., 10756., 10216.,  7484.],
         [ 7918., 10965., 10568., ...,  7815.,  7904.,  6062.],
         [ 5444.,  7542.,  7404., ...,  5161.,  5309.,  3981.]],

        [[ 3656.,  7109., 10072., ..., 10232.,  9389.,  6457.],
         [ 4984.,  9408., 13705., ..., 15020., 13619.,  9270.],
         [ 5537., 10171., 15105., ..., 16388., 14883., 10229.],
         ...,
         [ 8727., 12040., 11302., ..., 10756., 10216.,  7484.],
         [ 7918., 10965., 10568., ...,  7815.,  7904.,  6062.],
         [ 5444.,  7542.,  7404., ...,  5161.,  5309.,  3981.]],

        ...,

        [[ 3656.,  7109., 10072., ..., 10232.,  9389.,  6457.],
         [ 4984.,  9408., 13705., ..., 15020., 13619.,  9270.],
         [ 5537., 10171., 15105., ..., 16388., 14883., 10229.],
         ...,
         [ 8727., 12040., 11302., ..., 10756., 10216.,  7484.],
         [ 7918., 10965., 10568., ...,  7815.,  7904.,  6062.],
         [ 5444.,  7542.,  7404., ...,  5161.,  5309.,  3981.]],

        [[ 3656.,  7109., 10072., ..., 10232.,  9389.,  6457.],
         [ 4984.,  9408., 13705., ..., 15020., 13619.,  9270.],
         [ 5537., 10171., 15105., ..., 16388., 14883., 10229.],
         ...,
         [ 8727., 12040., 11302., ..., 10756., 10216.,  7484.],
         [ 7918., 10965., 10568., ...,  7815.,  7904.,  6062.],
         [ 5444.,  7542.,  7404., ...,  5161.,  5309.,  3981.]],

        [[ 3656.,  7109., 10072., ..., 10232.,  9389.,  6457.],
         [ 4984.,  9408., 13705., ..., 15020., 13619.,  9270.],
         [ 5537., 10171., 15105., ..., 16388., 14883., 10229.],
         ...,
         [ 8727., 12040., 11302., ..., 10756., 10216.,  7484.],
         [ 7918., 10965., 10568., ...,  7815.,  7904.,  6062.],
         [ 5444.,  7542.,  7404., ...,  5161.,  5309.,  3981.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [0], 'to': [2, 5]}
ms node:
{'name': 'conv2d', 'output': array([[[[ 1998.,  3869.,  6218., ...,  7633.,  8415.,  6215.],
         [ 2957.,  6119., 10342., ..., 11510., 12812.,  9673.],
         [ 3639.,  7321., 12393., ..., 14986., 16504., 12387.],
         ...,
         [ 6766., 10028., 11212., ..., 10754., 11631.,  9058.],
         [ 7230., 10802., 12361., ...,  9604., 10853.,  8511.],
         [ 5347.,  7998.,  9292., ...,  5651.,  7210.,  6050.]],

        [[ 1998.,  3869.,  6218., ...,  7633.,  8415.,  6215.],
         [ 2957.,  6119., 10342., ..., 11510., 12812.,  9673.],
         [ 3639.,  7321., 12393., ..., 14986., 16504., 12387.],
         ...,
         [ 6766., 10028., 11212., ..., 10754., 11631.,  9058.],
         [ 7230., 10802., 12361., ...,  9604., 10853.,  8511.],
         [ 5347.,  7998.,  9292., ...,  5651.,  7210.,  6050.]],

        [[ 1998.,  3869.,  6218., ...,  7633.,  8415.,  6215.],
         [ 2957.,  6119., 10342., ..., 11510., 12812.,  9673.],
         [ 3639.,  7321., 12393., ..., 14986., 16504., 12387.],
         ...,
         [ 6766., 10028., 11212., ..., 10754., 11631.,  9058.],
         [ 7230., 10802., 12361., ...,  9604., 10853.,  8511.],
         [ 5347.,  7998.,  9292., ...,  5651.,  7210.,  6050.]],

        ...,

        [[ 1998.,  3869.,  6218., ...,  7633.,  8415.,  6215.],
         [ 2957.,  6119., 10342., ..., 11510., 12812.,  9673.],
         [ 3639.,  7321., 12393., ..., 14986., 16504., 12387.],
         ...,
         [ 6766., 10028., 11212., ..., 10754., 11631.,  9058.],
         [ 7230., 10802., 12361., ...,  9604., 10853.,  8511.],
         [ 5347.,  7998.,  9292., ...,  5651.,  7210.,  6050.]],

        [[ 1998.,  3869.,  6218., ...,  7633.,  8415.,  6215.],
         [ 2957.,  6119., 10342., ..., 11510., 12812.,  9673.],
         [ 3639.,  7321., 12393., ..., 14986., 16504., 12387.],
         ...,
         [ 6766., 10028., 11212., ..., 10754., 11631.,  9058.],
         [ 7230., 10802., 12361., ...,  9604., 10853.,  8511.],
         [ 5347.,  7998.,  9292., ...,  5651.,  7210.,  6050.]],

        [[ 1998.,  3869.,  6218., ...,  7633.,  8415.,  6215.],
         [ 2957.,  6119., 10342., ..., 11510., 12812.,  9673.],
         [ 3639.,  7321., 12393., ..., 14986., 16504., 12387.],
         ...,
         [ 6766., 10028., 11212., ..., 10754., 11631.,  9058.],
         [ 7230., 10802., 12361., ...,  9604., 10853.,  8511.],
         [ 5347.,  7998.,  9292., ...,  5651.,  7210.,  6050.]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [0], 'to': [2, 5]}
torch node:
{'name': 'conv2d', 'output': array([[[[ 1998.,  3869.,  6218., ...,  7633.,  8415.,  6215.],
         [ 2957.,  6119., 10342., ..., 11510., 12812.,  9673.],
         [ 3639.,  7321., 12393., ..., 14986., 16504., 12387.],
         ...,
         [ 6766., 10028., 11212., ..., 10754., 11631.,  9058.],
         [ 7230., 10802., 12361., ...,  9604., 10853.,  8511.],
         [ 5347.,  7998.,  9292., ...,  5651.,  7210.,  6050.]],

        [[ 1998.,  3869.,  6218., ...,  7633.,  8415.,  6215.],
         [ 2957.,  6119., 10342., ..., 11510., 12812.,  9673.],
         [ 3639.,  7321., 12393., ..., 14986., 16504., 12387.],
         ...,
         [ 6766., 10028., 11212., ..., 10754., 11631.,  9058.],
         [ 7230., 10802., 12361., ...,  9604., 10853.,  8511.],
         [ 5347.,  7998.,  9292., ...,  5651.,  7210.,  6050.]],

        [[ 1998.,  3869.,  6218., ...,  7633.,  8415.,  6215.],
         [ 2957.,  6119., 10342., ..., 11510., 12812.,  9673.],
         [ 3639.,  7321., 12393., ..., 14986., 16504., 12387.],
         ...,
         [ 6766., 10028., 11212., ..., 10754., 11631.,  9058.],
         [ 7230., 10802., 12361., ...,  9604., 10853.,  8511.],
         [ 5347.,  7998.,  9292., ...,  5651.,  7210.,  6050.]],

        ...,

        [[ 1998.,  3869.,  6218., ...,  7633.,  8415.,  6215.],
         [ 2957.,  6119., 10342., ..., 11510., 12812.,  9673.],
         [ 3639.,  7321., 12393., ..., 14986., 16504., 12387.],
         ...,
         [ 6766., 10028., 11212., ..., 10754., 11631.,  9058.],
         [ 7230., 10802., 12361., ...,  9604., 10853.,  8511.],
         [ 5347.,  7998.,  9292., ...,  5651.,  7210.,  6050.]],

        [[ 1998.,  3869.,  6218., ...,  7633.,  8415.,  6215.],
         [ 2957.,  6119., 10342., ..., 11510., 12812.,  9673.],
         [ 3639.,  7321., 12393., ..., 14986., 16504., 12387.],
         ...,
         [ 6766., 10028., 11212., ..., 10754., 11631.,  9058.],
         [ 7230., 10802., 12361., ...,  9604., 10853.,  8511.],
         [ 5347.,  7998.,  9292., ...,  5651.,  7210.,  6050.]],

        [[ 1998.,  3869.,  6218., ...,  7633.,  8415.,  6215.],
         [ 2957.,  6119., 10342., ..., 11510., 12812.,  9673.],
         [ 3639.,  7321., 12393., ..., 14986., 16504., 12387.],
         ...,
         [ 6766., 10028., 11212., ..., 10754., 11631.,  9058.],
         [ 7230., 10802., 12361., ...,  9604., 10853.,  8511.],
         [ 5347.,  7998.,  9292., ...,  5651.,  7210.,  6050.]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [0], 'to': [2, 5]}

generate models:63

analyse output arrays in iter:75

pre layer res:
5:log
{'name': 'log', 'output': array([[[[      -inf,       -inf, 0.07625529, ...,       -inf,
                -inf,       -inf],
         [      -inf, 1.9146801 , 1.9912034 , ...,       -inf,
          3.3555167 ,       -inf],
         [4.1160436 ,       -inf, 4.111442  , ...,       -inf,
          1.9534283 ,       -inf],
         ...,
         [3.9250352 , 4.1168947 , 4.028321  , ..., 4.034409  ,
          2.5089    ,       -inf],
         [3.1518395 , 3.8227706 , 4.1430135 , ..., 2.5089    ,
          2.5089    , 2.405228  ],
         [2.445401  ,       -inf,       -inf, ..., 3.8127513 ,
          3.8272088 ,       -inf]],

        [[      -inf,       -inf, 0.07625529, ...,       -inf,
                -inf,       -inf],
         [      -inf, 1.9146801 , 1.9912034 , ...,       -inf,
          3.3555167 ,       -inf],
         [4.1160436 ,       -inf, 4.111442  , ...,       -inf,
          1.9534283 ,       -inf],
         ...,
         [3.9250352 , 4.1168947 , 4.028321  , ..., 4.034409  ,
          2.5089    ,       -inf],
         [3.1518395 , 3.8227706 , 4.1430135 , ..., 2.5089    ,
          2.5089    , 2.405228  ],
         [2.445401  ,       -inf,       -inf, ..., 3.8127513 ,
          3.8272088 ,       -inf]],

        [[      -inf,       -inf, 0.07625529, ...,       -inf,
                -inf,       -inf],
         [      -inf, 1.9146801 , 1.9912034 , ...,       -inf,
          3.3555167 ,       -inf],
         [4.1160436 ,       -inf, 4.111442  , ...,       -inf,
          1.9534283 ,       -inf],
         ...,
         [3.9250352 , 4.1168947 , 4.028321  , ..., 4.034409  ,
          2.5089    ,       -inf],
         [3.1518395 , 3.8227706 , 4.1430135 , ..., 2.5089    ,
          2.5089    , 2.405228  ],
         [2.445401  ,       -inf,       -inf, ..., 3.8127513 ,
          3.8272088 ,       -inf]],

        ...,

        [[      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [15], 'to': [19]}
tf node:
{'name': 'sin', 'output': array([[[[        nan,         nan,  0.07618141, ...,         nan,
                  nan,         nan],
         [        nan,  0.9414524 ,  0.91292286, ...,         nan,
          -0.2122961 ,         nan],
         [-0.82739365,         nan, -0.8248006 , ...,         nan,
           0.9276852 ,         nan],
         ...,
         [-0.70572263, -0.8278714 , -0.77500826, ..., -0.7788414 ,
           0.5913184 ,         nan],
         [-0.01024666, -0.6297085 , -0.84223783, ...,  0.5913184 ,
           0.5913184 ,  0.671599  ],
         [ 0.6413003 ,         nan,         nan, ..., -0.6218937 ,
          -0.63315   ,         nan]],

        [[        nan,         nan,  0.07618141, ...,         nan,
                  nan,         nan],
         [        nan,  0.9414524 ,  0.91292286, ...,         nan,
          -0.2122961 ,         nan],
         [-0.82739365,         nan, -0.8248006 , ...,         nan,
           0.9276852 ,         nan],
         ...,
         [-0.70572263, -0.8278714 , -0.77500826, ..., -0.7788414 ,
           0.5913184 ,         nan],
         [-0.01024666, -0.6297085 , -0.84223783, ...,  0.5913184 ,
           0.5913184 ,  0.671599  ],
         [ 0.6413003 ,         nan,         nan, ..., -0.6218937 ,
          -0.63315   ,         nan]],

        [[        nan,         nan,  0.07618141, ...,         nan,
                  nan,         nan],
         [        nan,  0.9414524 ,  0.91292286, ...,         nan,
          -0.2122961 ,         nan],
         [-0.82739365,         nan, -0.8248006 , ...,         nan,
           0.9276852 ,         nan],
         ...,
         [-0.70572263, -0.8278714 , -0.77500826, ..., -0.7788414 ,
           0.5913184 ,         nan],
         [-0.01024666, -0.6297085 , -0.84223783, ...,  0.5913184 ,
           0.5913184 ,  0.671599  ],
         [ 0.6413003 ,         nan,         nan, ..., -0.6218937 ,
          -0.63315   ,         nan]],

        ...,

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [5], 'to': [20]}
ms node:
{'name': 'sin', 'output': array([[[[        nan,         nan,  0.07617851, ...,         nan,
                  nan,         nan],
         [        nan,  0.9414535 ,  0.9129233 , ...,         nan,
          -0.21229516,         nan],
         [-0.82739365,         nan, -0.8248006 , ...,         nan,
           0.92768556,         nan],
         ...,
         [-0.70572096, -0.8278716 , -0.77500767, ..., -0.7788407 ,
           0.59132016,         nan],
         [-0.01024666, -0.62971073, -0.84223706, ...,  0.59132016,
           0.59132016,  0.67159575],
         [ 0.64130044,         nan,         nan, ..., -0.62189597,
          -0.6331515 ,         nan]],

        [[        nan,         nan,  0.07617851, ...,         nan,
                  nan,         nan],
         [        nan,  0.9414535 ,  0.9129233 , ...,         nan,
          -0.21229516,         nan],
         [-0.82739365,         nan, -0.8248006 , ...,         nan,
           0.92768556,         nan],
         ...,
         [-0.70572096, -0.8278716 , -0.77500767, ..., -0.7788407 ,
           0.59132016,         nan],
         [-0.01024666, -0.62971073, -0.84223706, ...,  0.59132016,
           0.59132016,  0.67159575],
         [ 0.64130044,         nan,         nan, ..., -0.62189597,
          -0.6331515 ,         nan]],

        [[        nan,         nan,  0.07617851, ...,         nan,
                  nan,         nan],
         [        nan,  0.9414535 ,  0.9129233 , ...,         nan,
          -0.21229516,         nan],
         [-0.82739365,         nan, -0.8248006 , ...,         nan,
           0.92768556,         nan],
         ...,
         [-0.70572096, -0.8278716 , -0.77500767, ..., -0.7788407 ,
           0.59132016,         nan],
         [-0.01024666, -0.62971073, -0.84223706, ...,  0.59132016,
           0.59132016,  0.67159575],
         [ 0.64130044,         nan,         nan, ..., -0.62189597,
          -0.6331515 ,         nan]],

        ...,

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [5], 'to': [20]}
torch node:
{'name': 'sin', 'output': array([[[[        nan,         nan,  0.07618141, ...,         nan,
                  nan,         nan],
         [        nan,  0.9414524 ,  0.91292286, ...,         nan,
          -0.2122961 ,         nan],
         [-0.82739365,         nan, -0.8248006 , ...,         nan,
           0.9276852 ,         nan],
         ...,
         [-0.70572263, -0.8278714 , -0.77500826, ..., -0.7788413 ,
           0.5913184 ,         nan],
         [-0.01024666, -0.6297085 , -0.84223783, ...,  0.5913184 ,
           0.5913184 ,  0.6715979 ],
         [ 0.64130026,         nan,         nan, ..., -0.62189376,
          -0.63314927,         nan]],

        [[        nan,         nan,  0.07618141, ...,         nan,
                  nan,         nan],
         [        nan,  0.9414524 ,  0.91292286, ...,         nan,
          -0.2122961 ,         nan],
         [-0.82739365,         nan, -0.8248006 , ...,         nan,
           0.9276852 ,         nan],
         ...,
         [-0.70572263, -0.8278714 , -0.77500826, ..., -0.7788413 ,
           0.5913184 ,         nan],
         [-0.01024666, -0.6297085 , -0.84223783, ...,  0.5913184 ,
           0.5913184 ,  0.6715979 ],
         [ 0.64130026,         nan,         nan, ..., -0.62189376,
          -0.63314927,         nan]],

        [[        nan,         nan,  0.07618141, ...,         nan,
                  nan,         nan],
         [        nan,  0.9414524 ,  0.91292286, ...,         nan,
          -0.2122961 ,         nan],
         [-0.82739365,         nan, -0.8248006 , ...,         nan,
           0.9276852 ,         nan],
         ...,
         [-0.70572263, -0.8278714 , -0.77500826, ..., -0.7788413 ,
           0.5913184 ,         nan],
         [-0.01024666, -0.6297085 , -0.84223783, ...,  0.5913184 ,
           0.5913184 ,  0.6715979 ],
         [ 0.64130026,         nan,         nan, ..., -0.62189376,
          -0.63314927,         nan]],

        ...,

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [5], 'to': [20]}

generate models:73

analyse the exceptions in iter:78
torch exception:
{'id': 4, 'name': 'conv2d', 'frame_work': 'torch', 'input_datas': [tensor([[[[8.2756, 8.2756, 8.2610,  ..., 8.1764, 8.1764, 8.1092],
          [8.2756, 8.2756, 8.2610,  ..., 8.1764, 8.1764, 8.1092],
          [8.2723, 8.2723, 8.2610,  ..., 8.1764, 8.1764, 8.1092],
          ...,
          [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
          [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
          [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],

         [[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
          [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
          [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
          ...,
          [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
          [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
          [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],

         [[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
          [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
          [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
          ...,
          [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
          [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
          [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]]]])]}
Given groups=1, weight of size [64, 64, 1, 1], expected input[1, 3, 32, 32] to have 64 channels, but got 3 channels instead
mindspore exception:
{'id': 4, 'name': 'conv2d', 'framework': 'mindspore', 'input_datas': [Tensor(shape=[1, 3, 32, 32], dtype=Float32, value=
[[[[8.27563095e+000, 8.27563095e+000, 8.26100922e+000 ... 8.17638969e+000, 8.17638969e+000, 8.10922241e+000],
   [8.27563095e+000, 8.27563095e+000, 8.26100922e+000 ... 8.17638969e+000, 8.17638969e+000, 8.10922241e+000],
   [8.27231503e+000, 8.27231503e+000, 8.26100922e+000 ... 8.17638969e+000, 8.17638969e+000, 8.10922241e+000],
   ...
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000]],
  [[0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   ...
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000]],
  [[0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   ...
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000]]]])]}
For 'Conv2D', 'C_in' of input 'x' shape divide by parameter 'group' must be equal to 'C_in' of input 'weight' shape: 64, but got 'C_in' of input 'x' shape: 3, and 'group': 1.

----------------------------------------------------
- C++ Call Stack: (For framework developers)
----------------------------------------------------
mindspore\core\ops\conv2d.cc:214 Conv2dInferShape


generate models:76

analyse output arrays in iter:89

pre layer res:
4:add
{'name': 'add', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [7, 18], 'to': [14]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 30, 30]), 'from': [4], 'to': [15]}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 64, 30, 30), 'from': [4], 'to': [15]}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 30, 30]), 'from': [4], 'to': [15]}

generate models:87

analyse output arrays in iter:91

pre layer res:
4:log
{'name': 'log', 'output': array([[[[9.010914, 9.010914, 9.010914, ..., 9.010914, 9.010914,
          9.010914],
         [9.010914, 9.010914, 9.010914, ..., 9.010914, 9.010914,
          9.010914],
         [9.010914, 9.010914, 9.010914, ..., 9.010914, 9.010914,
          9.010914],
         ...,
         [9.010914, 9.010914, 9.010914, ..., 9.010914, 9.010914,
          9.010914],
         [9.010914, 9.010914, 9.010914, ..., 9.010914, 9.010914,
          9.010914],
         [9.010914, 9.010914, 9.010914, ..., 9.010914, 9.010914,
          9.010914]],

        [[9.010914, 9.010914, 9.010914, ..., 9.010914, 9.010914,
          9.010914],
         [9.010914, 9.010914, 9.010914, ..., 9.010914, 9.010914,
          9.010914],
         [9.010914, 9.010914, 9.010914, ..., 9.010914, 9.010914,
          9.010914],
         ...,
         [9.010914, 9.010914, 9.010914, ..., 9.010914, 9.010914,
          9.010914],
         [9.010914, 9.010914, 9.010914, ..., 9.010914, 9.010914,
          9.010914],
         [9.010914, 9.010914, 9.010914, ..., 9.010914, 9.010914,
          9.010914]],

        [[    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         ...,
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf]],

        ...,

        [[    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         ...,
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf]],

        [[    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         ...,
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf]],

        [[    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         ...,
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [13], 'to': [14]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 30, 30]), 'from': [4], 'to': [15]}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 64, 30, 30), 'from': [4], 'to': [15]}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 30, 30]), 'from': [4], 'to': [15]}

generate models:89

analyse output arrays in iter:96

pre layer res:
6:exp
{'name': 'exp', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [1], 'to': [18]}
tf node:
{'name': 'log', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [6], 'to': [2, 28]}
ms node:
{'name': 'log', 'output': array([[[[88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         ...,
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284]],

        [[88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         ...,
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284]],

        [[88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         ...,
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284]],

        ...,

        [[88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         ...,
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284]],

        [[88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         ...,
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284]],

        [[88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         ...,
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [6], 'to': [2, 28]}
torch node:
{'name': 'log', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [6], 'to': [2, 28]}

generate models:94

final statics:
total operators:28
tensorflow --> nums:38,distinct_bugs:4
mindspore --> nums:6,distinct_bugs:5
torch --> nums:4,distinct_bugs:4
tensorflow --> 
conv2d:35
add:1
softmax:1
sin:1
mindspore --> 
log:2
add:1
softmax:1
sin:1
conv2d:1
torch --> 
add:1
softmax:1
sin:1
conv2d:1

generate models:97

analyse output arrays in iter:104

pre layer res:
5:add
{'name': 'add', 'output': array([[[[    0.   ,     0.   ,     0.   , ..., 55771.926, 43061.285,
           9251.473],
         [ 9248.473,  9248.473,  9248.473, ..., 59595.793, 59595.793,
           9252.473],
         [ 9251.473,  9251.473,  9248.473, ..., 64840.75 , 64843.75 ,
          64843.75 ],
         ...,
         [    0.   ,     0.   ,     0.   , ..., 65524.754, 65553.75 ,
          65408.754],
         [    0.   ,     0.   ,     0.   , ..., 65511.754, 65450.754,
          65324.754],
         [    0.   ,     0.   ,     0.   , ..., 65481.754, 65414.754,
          65311.754]],

        [[    0.   ,     0.   ,     0.   , ..., 55771.926, 43061.285,
           9251.473],
         [ 9248.473,  9248.473,  9248.473, ..., 59595.793, 59595.793,
           9252.473],
         [ 9251.473,  9251.473,  9248.473, ..., 64840.75 , 64843.75 ,
          64843.75 ],
         ...,
         [    0.   ,     0.   ,     0.   , ..., 65524.754, 65553.75 ,
          65408.754],
         [    0.   ,     0.   ,     0.   , ..., 65511.754, 65450.754,
          65324.754],
         [    0.   ,     0.   ,     0.   , ..., 65481.754, 65414.754,
          65311.754]],

        [[    0.   ,     0.   ,     0.   , ..., 55771.926, 43061.285,
           9251.473],
         [ 9248.473,  9248.473,  9248.473, ..., 59595.793, 59595.793,
           9252.473],
         [ 9251.473,  9251.473,  9248.473, ..., 64840.75 , 64843.75 ,
          64843.75 ],
         ...,
         [    0.   ,     0.   ,     0.   , ..., 65524.754, 65553.75 ,
          65408.754],
         [    0.   ,     0.   ,     0.   , ..., 65511.754, 65450.754,
          65324.754],
         [    0.   ,     0.   ,     0.   , ..., 65481.754, 65414.754,
          65311.754]],

        ...,

        [[    0.   ,     0.   ,     0.   , ..., 55771.926, 43061.285,
           9251.473],
         [ 9248.473,  9248.473,  9248.473, ..., 59595.793, 59595.793,
           9252.473],
         [ 9251.473,  9251.473,  9248.473, ..., 64840.75 , 64843.75 ,
          64843.75 ],
         ...,
         [    0.   ,     0.   ,     0.   , ..., 65524.754, 65553.75 ,
          65408.754],
         [    0.   ,     0.   ,     0.   , ..., 65511.754, 65450.754,
          65324.754],
         [    0.   ,     0.   ,     0.   , ..., 65481.754, 65414.754,
          65311.754]],

        [[    0.   ,     0.   ,     0.   , ..., 55771.926, 43061.285,
           9251.473],
         [ 9248.473,  9248.473,  9248.473, ..., 59595.793, 59595.793,
           9252.473],
         [ 9251.473,  9251.473,  9248.473, ..., 64840.75 , 64843.75 ,
          64843.75 ],
         ...,
         [    0.   ,     0.   ,     0.   , ..., 65524.754, 65553.75 ,
          65408.754],
         [    0.   ,     0.   ,     0.   , ..., 65511.754, 65450.754,
          65324.754],
         [    0.   ,     0.   ,     0.   , ..., 65481.754, 65414.754,
          65311.754]],

        [[    0.   ,     0.   ,     0.   , ..., 55771.926, 43061.285,
           9251.473],
         [ 9248.473,  9248.473,  9248.473, ..., 59595.793, 59595.793,
           9252.473],
         [ 9251.473,  9251.473,  9248.473, ..., 64840.75 , 64843.75 ,
          64843.75 ],
         ...,
         [    0.   ,     0.   ,     0.   , ..., 65524.754, 65553.75 ,
          65408.754],
         [    0.   ,     0.   ,     0.   , ..., 65511.754, 65450.754,
          65324.754],
         [    0.   ,     0.   ,     0.   , ..., 65481.754, 65414.754,
          65311.754]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [4, 6], 'to': [7]}
tf node:
{'name': 'sin', 'output': array([[[[ 0.        ,  0.        ,  0.        , ...,  0.69512796,
           0.5015128 ,  0.4948903 ],
         [-0.36731067, -0.36731067, -0.36731067, ..., -0.21790741,
          -0.21790741, -0.46381044],
         [ 0.4948903 ,  0.4948903 , -0.36731067, ..., -0.9885347 ,
           0.9573336 ,  0.9573336 ],
         ...,
         [ 0.        ,  0.        ,  0.        , ..., -0.52773374,
           0.957351  ,  0.71376455],
         [ 0.        ,  0.        ,  0.        , ..., -0.12199628,
          -0.927414  , -0.9988927 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9994697 ,
           0.48963684, -0.92620933]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.69512796,
           0.5015128 ,  0.4948903 ],
         [-0.36731067, -0.36731067, -0.36731067, ..., -0.21790741,
          -0.21790741, -0.46381044],
         [ 0.4948903 ,  0.4948903 , -0.36731067, ..., -0.9885347 ,
           0.9573336 ,  0.9573336 ],
         ...,
         [ 0.        ,  0.        ,  0.        , ..., -0.52773374,
           0.957351  ,  0.71376455],
         [ 0.        ,  0.        ,  0.        , ..., -0.12199628,
          -0.927414  , -0.9988927 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9994697 ,
           0.48963684, -0.92620933]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.69512796,
           0.5015128 ,  0.4948903 ],
         [-0.36731067, -0.36731067, -0.36731067, ..., -0.21790741,
          -0.21790741, -0.46381044],
         [ 0.4948903 ,  0.4948903 , -0.36731067, ..., -0.9885347 ,
           0.9573336 ,  0.9573336 ],
         ...,
         [ 0.        ,  0.        ,  0.        , ..., -0.52773374,
           0.957351  ,  0.71376455],
         [ 0.        ,  0.        ,  0.        , ..., -0.12199628,
          -0.927414  , -0.9988927 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9994697 ,
           0.48963684, -0.92620933]],

        ...,

        [[ 0.        ,  0.        ,  0.        , ...,  0.69512796,
           0.5015128 ,  0.4948903 ],
         [-0.36731067, -0.36731067, -0.36731067, ..., -0.21790741,
          -0.21790741, -0.46381044],
         [ 0.4948903 ,  0.4948903 , -0.36731067, ..., -0.9885347 ,
           0.9573336 ,  0.9573336 ],
         ...,
         [ 0.        ,  0.        ,  0.        , ..., -0.52773374,
           0.957351  ,  0.71376455],
         [ 0.        ,  0.        ,  0.        , ..., -0.12199628,
          -0.927414  , -0.9988927 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9994697 ,
           0.48963684, -0.92620933]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.69512796,
           0.5015128 ,  0.4948903 ],
         [-0.36731067, -0.36731067, -0.36731067, ..., -0.21790741,
          -0.21790741, -0.46381044],
         [ 0.4948903 ,  0.4948903 , -0.36731067, ..., -0.9885347 ,
           0.9573336 ,  0.9573336 ],
         ...,
         [ 0.        ,  0.        ,  0.        , ..., -0.52773374,
           0.957351  ,  0.71376455],
         [ 0.        ,  0.        ,  0.        , ..., -0.12199628,
          -0.927414  , -0.9988927 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9994697 ,
           0.48963684, -0.92620933]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.69512796,
           0.5015128 ,  0.4948903 ],
         [-0.36731067, -0.36731067, -0.36731067, ..., -0.21790741,
          -0.21790741, -0.46381044],
         [ 0.4948903 ,  0.4948903 , -0.36731067, ..., -0.9885347 ,
           0.9573336 ,  0.9573336 ],
         ...,
         [ 0.        ,  0.        ,  0.        , ..., -0.52773374,
           0.957351  ,  0.71376455],
         [ 0.        ,  0.        ,  0.        , ..., -0.12199628,
          -0.927414  , -0.9988927 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9994697 ,
           0.48963684, -0.92620933]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [5], 'to': [8]}
ms node:
{'name': 'sin', 'output': array([[[[ 0.        ,  0.        ,  0.        , ...,  0.69512796,
           0.5015128 ,  0.4948903 ],
         [-0.36731067, -0.36731067, -0.36731067, ..., -0.21790741,
          -0.21790741, -0.46381044],
         [ 0.4948903 ,  0.4948903 , -0.36731067, ..., -0.9885347 ,
           0.9573336 ,  0.9573336 ],
         ...,
         [ 0.        ,  0.        ,  0.        , ..., -0.52773374,
           0.957351  ,  0.7137645 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.12199628,
          -0.92741394, -0.9988927 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9994697 ,
           0.48963684, -0.92620933]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.69512796,
           0.5015128 ,  0.4948903 ],
         [-0.36731067, -0.36731067, -0.36731067, ..., -0.21790741,
          -0.21790741, -0.46381044],
         [ 0.4948903 ,  0.4948903 , -0.36731067, ..., -0.9885347 ,
           0.9573336 ,  0.9573336 ],
         ...,
         [ 0.        ,  0.        ,  0.        , ..., -0.52773374,
           0.957351  ,  0.7137645 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.12199628,
          -0.92741394, -0.9988927 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9994697 ,
           0.48963684, -0.92620933]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.69512796,
           0.5015128 ,  0.4948903 ],
         [-0.36731067, -0.36731067, -0.36731067, ..., -0.21790741,
          -0.21790741, -0.46381044],
         [ 0.4948903 ,  0.4948903 , -0.36731067, ..., -0.9885347 ,
           0.9573336 ,  0.9573336 ],
         ...,
         [ 0.        ,  0.        ,  0.        , ..., -0.52773374,
           0.957351  ,  0.7137645 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.12199628,
          -0.92741394, -0.9988927 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9994697 ,
           0.48963684, -0.92620933]],

        ...,

        [[ 0.        ,  0.        ,  0.        , ...,  0.69512796,
           0.5015128 ,  0.4948903 ],
         [-0.36731067, -0.36731067, -0.36731067, ..., -0.21790741,
          -0.21790741, -0.46381044],
         [ 0.4948903 ,  0.4948903 , -0.36731067, ..., -0.9885347 ,
           0.9573336 ,  0.9573336 ],
         ...,
         [ 0.        ,  0.        ,  0.        , ..., -0.52773374,
           0.957351  ,  0.7137645 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.12199628,
          -0.92741394, -0.9988927 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9994697 ,
           0.48963684, -0.92620933]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.74391544,
           0.47767183,  0.51846284],
         [-0.39260256, -0.39260256, -0.39260256, ..., -0.3671283 ,
          -0.3671283 , -0.4394153 ],
         [ 0.51846284,  0.51846284, -0.39260256, ..., -0.9234725 ,
           0.8600881 ,  0.8600881 ],
         ...,
         [ 0.        ,  0.        ,  0.        , ..., -0.304903  ,
           0.86011887,  0.52163374],
         [ 0.        ,  0.        ,  0.        , ...,  0.12347687,
          -0.9905941 , -0.9802588 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9614242 ,
           0.26246846, -0.80645794]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.74391544,
           0.47767183,  0.51846284],
         [-0.39260256, -0.39260256, -0.39260256, ..., -0.3671283 ,
          -0.3671283 , -0.4394153 ],
         [ 0.51846284,  0.51846284, -0.39260256, ..., -0.9234725 ,
           0.8600881 ,  0.8600881 ],
         ...,
         [ 0.        ,  0.        ,  0.        , ..., -0.304903  ,
           0.86011887,  0.52163374],
         [ 0.        ,  0.        ,  0.        , ...,  0.12347687,
          -0.9905941 , -0.9802588 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9614242 ,
           0.26246846, -0.80645794]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [5], 'to': [8]}
torch node:
{'name': 'sin', 'output': array([[[[ 0.        ,  0.        ,  0.        , ...,  0.74391544,
           0.47767183,  0.51846284],
         [-0.39260256, -0.39260256, -0.39260256, ..., -0.3671283 ,
          -0.3671283 , -0.4394153 ],
         [ 0.51846284,  0.51846284, -0.39260256, ..., -0.9234725 ,
           0.8600881 ,  0.8600881 ],
         ...,
         [ 0.        ,  0.        ,  0.        , ..., -0.304903  ,
           0.86011887,  0.52163374],
         [ 0.        ,  0.        ,  0.        , ...,  0.12347687,
          -0.9905941 , -0.9802588 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9614242 ,
           0.26246846, -0.80645794]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.74391544,
           0.47767183,  0.51846284],
         [-0.39260256, -0.39260256, -0.39260256, ..., -0.3671283 ,
          -0.3671283 , -0.4394153 ],
         [ 0.51846284,  0.51846284, -0.39260256, ..., -0.9234725 ,
           0.8600881 ,  0.8600881 ],
         ...,
         [ 0.        ,  0.        ,  0.        , ..., -0.304903  ,
           0.86011887,  0.52163374],
         [ 0.        ,  0.        ,  0.        , ...,  0.12347687,
          -0.9905941 , -0.9802588 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9614242 ,
           0.26246846, -0.80645794]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.74391544,
           0.47767183,  0.51846284],
         [-0.39260256, -0.39260256, -0.39260256, ..., -0.3671283 ,
          -0.3671283 , -0.4394153 ],
         [ 0.51846284,  0.51846284, -0.39260256, ..., -0.9234725 ,
           0.8600881 ,  0.8600881 ],
         ...,
         [ 0.        ,  0.        ,  0.        , ..., -0.304903  ,
           0.86011887,  0.52163374],
         [ 0.        ,  0.        ,  0.        , ...,  0.12347687,
          -0.9905941 , -0.9802588 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9614242 ,
           0.26246846, -0.80645794]],

        ...,

        [[ 0.        ,  0.        ,  0.        , ...,  0.74391544,
           0.47767183,  0.51846284],
         [-0.39260256, -0.39260256, -0.39260256, ..., -0.3671283 ,
          -0.3671283 , -0.4394153 ],
         [ 0.51846284,  0.51846284, -0.39260256, ..., -0.9234725 ,
           0.8600881 ,  0.8600881 ],
         ...,
         [ 0.        ,  0.        ,  0.        , ..., -0.304903  ,
           0.86011887,  0.52163374],
         [ 0.        ,  0.        ,  0.        , ...,  0.12347687,
          -0.9905941 , -0.9802588 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9614242 ,
           0.26246846, -0.80645794]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.74391544,
           0.47767183,  0.51846284],
         [-0.39260256, -0.39260256, -0.39260256, ..., -0.3671283 ,
          -0.3671283 , -0.4394153 ],
         [ 0.51846284,  0.51846284, -0.39260256, ..., -0.9234725 ,
           0.8600881 ,  0.8600881 ],
         ...,
         [ 0.        ,  0.        ,  0.        , ..., -0.304903  ,
           0.86011887,  0.52163374],
         [ 0.        ,  0.        ,  0.        , ...,  0.12347687,
          -0.9905941 , -0.9802588 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9614242 ,
           0.26246846, -0.80645794]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.74391544,
           0.47767183,  0.51846284],
         [-0.39260256, -0.39260256, -0.39260256, ..., -0.3671283 ,
          -0.3671283 , -0.4394153 ],
         [ 0.51846284,  0.51846284, -0.39260256, ..., -0.9234725 ,
           0.8600881 ,  0.8600881 ],
         ...,
         [ 0.        ,  0.        ,  0.        , ..., -0.304903  ,
           0.86011887,  0.52163374],
         [ 0.        ,  0.        ,  0.        , ...,  0.12347687,
          -0.9905941 , -0.9802588 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9614242 ,
           0.26246846, -0.80645794]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [5], 'to': [8]}

generate models:102

analyse output arrays in iter:109

pre layer res:
22:transpose
{'name': 'transpose', 'output': array([[[[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
          1.9248361e+28,           inf,           inf],
         [          inf,           inf,           inf, ...,
          1.9073701e+21,           inf,           inf],
         [          inf,           inf,           inf, ...,
          4.7278434e+18, 3.0250960e+36,           inf]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
          1.9248361e+28,           inf,           inf],
         [          inf,           inf,           inf, ...,
          1.9073701e+21,           inf,           inf],
         [          inf,           inf,           inf, ...,
          4.7278434e+18, 3.0250960e+36,           inf]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
          1.9248361e+28,           inf,           inf],
         [          inf,           inf,           inf, ...,
          1.9073701e+21,           inf,           inf],
         [          inf,           inf,           inf, ...,
          4.7278434e+18, 3.0250960e+36,           inf]],

        ...,

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
          1.9248361e+28,           inf,           inf],
         [          inf,           inf,           inf, ...,
          1.9073701e+21,           inf,           inf],
         [          inf,           inf,           inf, ...,
          4.7278434e+18, 3.0250960e+36,           inf]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
          1.9248361e+28,           inf,           inf],
         [          inf,           inf,           inf, ...,
          1.9073701e+21,           inf,           inf],
         [          inf,           inf,           inf, ...,
          4.7278434e+18, 3.0250960e+36,           inf]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
          1.9248361e+28,           inf,           inf],
         [          inf,           inf,           inf, ...,
          1.9073701e+21,           inf,           inf],
         [          inf,           inf,           inf, ...,
          4.7278434e+18, 3.0250960e+36,           inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [13], 'to': [14]}
tf node:
{'name': 'conv2d', 'output': array([[[[          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
          8.7989194e+33,           nan,           nan]],

        [[          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
          8.7989194e+33,           nan,           nan]],

        [[          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
          8.7989194e+33,           nan,           nan]],

        ...,

        [[          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
          8.7989194e+33,           nan,           nan]],

        [[          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
          8.7989194e+33,           nan,           nan]],

        [[          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
          8.7989194e+33,           nan,           nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 30, 30]), 'from': [22], 'to': [5]}
ms node:
{'name': 'conv2d', 'output': array([[[[         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         ...,
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ..., 8.798935e+33,
                   inf,          inf]],

        [[         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         ...,
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ..., 8.798935e+33,
                   inf,          inf]],

        [[         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         ...,
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ..., 8.798935e+33,
                   inf,          inf]],

        ...,

        [[         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         ...,
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ..., 8.798935e+33,
                   inf,          inf]],

        [[         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         ...,
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ..., 8.798935e+33,
                   inf,          inf]],

        [[         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         ...,
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ..., 8.798935e+33,
                   inf,          inf]]]], dtype=float32), 'output_shape': (1, 64, 30, 30), 'from': [22], 'to': [5]}
torch node:
{'name': 'conv2d', 'output': array([[[[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
          8.7989504e+33,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
          8.7989504e+33,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
          8.7989504e+33,           inf,           inf]],

        ...,

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
          8.7989504e+33,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
          8.7989504e+33,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
          8.7989504e+33,           inf,           inf]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 30, 30]), 'from': [22], 'to': [5]}

generate models:107

analyse output arrays in iter:110

pre layer res:
17:add
{'name': 'add', 'output': array([[[[557.0753 , 557.0753 , 557.0753 , ...,       inf, 489.68015,
          489.68015],
         [557.0753 , 557.0753 , 557.0753 , ...,       inf, 489.68015,
          489.68015],
         [557.0753 , 557.0753 , 557.0753 , ...,       inf, 489.68015,
          489.68015],
         ...,
         [      inf, 571.50085, 405.68832, ..., 537.3542 , 537.3542 ,
                inf],
         [      inf, 571.50085, 405.68832, ..., 537.3542 , 537.3542 ,
                inf],
         [      inf, 571.50085, 405.68832, ..., 537.3542 , 537.3542 ,
                inf]],

        [[557.0753 , 557.0753 , 557.0753 , ...,       inf, 489.68015,
          489.68015],
         [557.0753 , 557.0753 , 557.0753 , ...,       inf, 489.68015,
          489.68015],
         [557.0753 , 557.0753 , 557.0753 , ...,       inf, 489.68015,
          489.68015],
         ...,
         [      inf, 571.50085, 405.68832, ..., 537.3542 , 537.3542 ,
                inf],
         [      inf, 571.50085, 405.68832, ..., 537.3542 , 537.3542 ,
                inf],
         [      inf, 571.50085, 405.68832, ..., 537.3542 , 537.3542 ,
                inf]],

        [[557.0753 , 557.0753 , 557.0753 , ...,       inf, 489.68015,
          489.68015],
         [557.0753 , 557.0753 , 557.0753 , ...,       inf, 489.68015,
          489.68015],
         [557.0753 , 557.0753 , 557.0753 , ...,       inf, 489.68015,
          489.68015],
         ...,
         [      inf, 571.50085, 405.68832, ..., 537.3542 , 537.3542 ,
                inf],
         [      inf, 571.50085, 405.68832, ..., 537.3542 , 537.3542 ,
                inf],
         [      inf, 571.50085, 405.68832, ..., 537.3542 , 537.3542 ,
                inf]],

        ...,

        [[557.0753 , 557.0753 , 557.0753 , ...,       inf, 489.68015,
          489.68015],
         [557.0753 , 557.0753 , 557.0753 , ...,       inf, 489.68015,
          489.68015],
         [557.0753 , 557.0753 , 557.0753 , ...,       inf, 489.68015,
          489.68015],
         ...,
         [      inf, 571.50085, 405.68832, ..., 537.3542 , 537.3542 ,
                inf],
         [      inf, 571.50085, 405.68832, ..., 537.3542 , 537.3542 ,
                inf],
         [      inf, 571.50085, 405.68832, ..., 537.3542 , 537.3542 ,
                inf]],

        [[557.0753 , 557.0753 , 557.0753 , ...,       inf, 489.68015,
          489.68015],
         [557.0753 , 557.0753 , 557.0753 , ...,       inf, 489.68015,
          489.68015],
         [557.0753 , 557.0753 , 557.0753 , ...,       inf, 489.68015,
          489.68015],
         ...,
         [      inf, 571.50085, 405.68832, ..., 537.3542 , 537.3542 ,
                inf],
         [      inf, 571.50085, 405.68832, ..., 537.3542 , 537.3542 ,
                inf],
         [      inf, 571.50085, 405.68832, ..., 537.3542 , 537.3542 ,
                inf]],

        [[557.0753 , 557.0753 , 557.0753 , ...,       inf, 489.68015,
          489.68015],
         [557.0753 , 557.0753 , 557.0753 , ...,       inf, 489.68015,
          489.68015],
         [557.0753 , 557.0753 , 557.0753 , ...,       inf, 489.68015,
          489.68015],
         ...,
         [      inf, 571.50085, 405.68832, ..., 537.3542 , 537.3542 ,
                inf],
         [      inf, 571.50085, 405.68832, ..., 537.3542 , 537.3542 ,
                inf],
         [      inf, 571.50085, 405.68832, ..., 537.3542 , 537.3542 ,
                inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [4, 4], 'to': [14]}
tf node:
{'name': 'conv2d', 'output': array([[[[320875.38, 320875.38, 320875.38, ...,       nan,       nan,
                nan],
         [303004.44, 301176.44, 299348.44, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan,       nan, ...,       nan,       nan,
                inf],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan, 290792.1 , 284236.12, ...,       nan,       nan,
                nan]],

        [[320875.38, 320875.38, 320875.38, ...,       nan,       nan,
                nan],
         [303004.44, 301176.44, 299348.44, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan,       nan, ...,       nan,       nan,
                inf],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan, 290792.1 , 284236.12, ...,       nan,       nan,
                nan]],

        [[320875.38, 320875.38, 320875.38, ...,       nan,       nan,
                nan],
         [303004.44, 301176.44, 299348.44, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan,       nan, ...,       nan,       nan,
                inf],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan, 290792.1 , 284236.12, ...,       nan,       nan,
                nan]],

        ...,

        [[320875.38, 320875.38, 320875.38, ...,       nan,       nan,
                nan],
         [303004.44, 301176.44, 299348.44, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan,       nan, ...,       nan,       nan,
                inf],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan, 290792.1 , 284236.12, ...,       nan,       nan,
                nan]],

        [[320875.38, 320875.38, 320875.38, ...,       nan,       nan,
                nan],
         [303004.44, 301176.44, 299348.44, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan,       nan, ...,       nan,       nan,
                inf],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan, 290792.1 , 284236.12, ...,       nan,       nan,
                nan]],

        [[320875.38, 320875.38, 320875.38, ...,       nan,       nan,
                nan],
         [303004.44, 301176.44, 299348.44, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan,       nan, ...,       nan,       nan,
                inf],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan, 290792.1 , 284236.12, ...,       nan,       nan,
                nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 30, 30]), 'from': [17], 'to': [15]}
ms node:
{'name': 'conv2d', 'output': array([[[[320875.9 , 320875.9 , 320875.9 , ...,       inf,       inf,
                inf],
         [303004.62, 301176.62, 299348.62, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf, 290791.94, 284235.88, ...,       inf,       inf,
                inf]],

        [[320875.9 , 320875.9 , 320875.9 , ...,       inf,       inf,
                inf],
         [303004.62, 301176.62, 299348.62, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf, 290791.94, 284235.88, ...,       inf,       inf,
                inf]],

        [[320875.9 , 320875.9 , 320875.9 , ...,       inf,       inf,
                inf],
         [303004.62, 301176.62, 299348.62, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf, 290791.94, 284235.88, ...,       inf,       inf,
                inf]],

        ...,

        [[320875.9 , 320875.9 , 320875.9 , ...,       inf,       inf,
                inf],
         [303004.62, 301176.62, 299348.62, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf, 290791.94, 284235.88, ...,       inf,       inf,
                inf]],

        [[320875.9 , 320875.9 , 320875.9 , ...,       inf,       inf,
                inf],
         [303004.62, 301176.62, 299348.62, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf, 290791.94, 284235.88, ...,       inf,       inf,
                inf]],

        [[320875.9 , 320875.9 , 320875.9 , ...,       inf,       inf,
                inf],
         [303004.62, 301176.62, 299348.62, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf, 290791.94, 284235.88, ...,       inf,       inf,
                inf]]]], dtype=float32), 'output_shape': (1, 64, 30, 30), 'from': [17], 'to': [15]}
torch node:
{'name': 'conv2d', 'output': array([[[[320875.3 , 320875.3 , 320875.3 , ...,       inf,       inf,
                inf],
         [303004.72, 301176.7 , 299348.62, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf, 290792.1 , 284236.38, ...,       inf,       inf,
                inf]],

        [[320875.3 , 320875.3 , 320875.3 , ...,       inf,       inf,
                inf],
         [303004.72, 301176.7 , 299348.62, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf, 290792.1 , 284236.38, ...,       inf,       inf,
                inf]],

        [[320875.3 , 320875.3 , 320875.3 , ...,       inf,       inf,
                inf],
         [303004.72, 301176.7 , 299348.62, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf, 290792.1 , 284236.38, ...,       inf,       inf,
                inf]],

        ...,

        [[320875.3 , 320875.3 , 320875.3 , ...,       inf,       inf,
                inf],
         [303004.72, 301176.7 , 299348.62, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf, 290792.1 , 284236.38, ...,       inf,       inf,
                inf]],

        [[320875.3 , 320875.3 , 320875.3 , ...,       inf,       inf,
                inf],
         [303004.72, 301176.7 , 299348.62, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf, 290792.1 , 284236.38, ...,       inf,       inf,
                inf]],

        [[320875.3 , 320875.3 , 320875.3 , ...,       inf,       inf,
                inf],
         [303004.72, 301176.7 , 299348.62, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf, 290792.1 , 284236.38, ...,       inf,       inf,
                inf]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 30, 30]), 'from': [17], 'to': [15]}

generate models:108

analyse output arrays in iter:114

pre layer res:
18:exp
{'name': 'exp', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [13], 'to': [14]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 30, 30]), 'from': [18], 'to': [5]}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 64, 30, 30), 'from': [18], 'to': [5]}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 30, 30]), 'from': [18], 'to': [5]}

generate models:111

analyse output arrays in iter:117

pre layer res:
25:add
{'name': 'add', 'output': array([[[[ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [442., 445., 499., ..., 366., 440., 551.],
         ...,
         [345., 348., 316., ..., 390., 428., 354.],
         [354., 369., 344., ..., 338., 312., 286.],
         [342., 387., 378., ..., 342., 301., 268.]],

        [[ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [442., 445., 499., ..., 366., 440., 551.],
         ...,
         [345., 348., 316., ..., 390., 428., 354.],
         [354., 369., 344., ..., 338., 312., 286.],
         [342., 387., 378., ..., 342., 301., 268.]],

        [[ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [442., 445., 499., ..., 366., 440., 551.],
         ...,
         [345., 348., 316., ..., 390., 428., 354.],
         [354., 369., 344., ..., 338., 312., 286.],
         [342., 387., 378., ..., 342., 301., 268.]],

        ...,

        [[ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [442., 445., 499., ..., 366., 440., 551.],
         ...,
         [345., 348., 316., ..., 390., 428., 354.],
         [354., 369., 344., ..., 338., 312., 286.],
         [342., 387., 378., ..., 342., 301., 268.]],

        [[ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [442., 445., 499., ..., 366., 440., 551.],
         ...,
         [345., 348., 316., ..., 390., 428., 354.],
         [354., 369., 344., ..., 338., 312., 286.],
         [342., 387., 378., ..., 342., 301., 268.]],

        [[ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [442., 445., 499., ..., 366., 440., 551.],
         ...,
         [345., 348., 316., ..., 390., 428., 354.],
         [354., 369., 344., ..., 338., 312., 286.],
         [342., 387., 378., ..., 342., 301., 268.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [13, 28], 'to': [14]}
tf node:
{'name': 'conv2d', 'output': array([[[[    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [263104., 252032., 256704., ..., 227776., 229760., 249920.],
         ...,
         [194880., 190208., 186816., ..., 230080., 241728., 236032.],
         [197504., 193216., 189056., ..., 214976., 222400., 215808.],
         [203712., 201280., 196096., ..., 206592., 206592., 193216.]],

        [[    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [263104., 252032., 256704., ..., 227776., 229760., 249920.],
         ...,
         [194880., 190208., 186816., ..., 230080., 241728., 236032.],
         [197504., 193216., 189056., ..., 214976., 222400., 215808.],
         [203712., 201280., 196096., ..., 206592., 206592., 193216.]],

        [[    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [263104., 252032., 256704., ..., 227776., 229760., 249920.],
         ...,
         [194880., 190208., 186816., ..., 230080., 241728., 236032.],
         [197504., 193216., 189056., ..., 214976., 222400., 215808.],
         [203712., 201280., 196096., ..., 206592., 206592., 193216.]],

        ...,

        [[    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [263104., 252032., 256704., ..., 227776., 229760., 249920.],
         ...,
         [194880., 190208., 186816., ..., 230080., 241728., 236032.],
         [197504., 193216., 189056., ..., 214976., 222400., 215808.],
         [203712., 201280., 196096., ..., 206592., 206592., 193216.]],

        [[    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [263104., 252032., 256704., ..., 227776., 229760., 249920.],
         ...,
         [194880., 190208., 186816., ..., 230080., 241728., 236032.],
         [197504., 193216., 189056., ..., 214976., 222400., 215808.],
         [203712., 201280., 196096., ..., 206592., 206592., 193216.]],

        [[    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [263104., 252032., 256704., ..., 227776., 229760., 249920.],
         ...,
         [194880., 190208., 186816., ..., 230080., 241728., 236032.],
         [197504., 193216., 189056., ..., 214976., 222400., 215808.],
         [203712., 201280., 196096., ..., 206592., 206592., 193216.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 30, 30]), 'from': [25], 'to': [15]}
ms node:
{'name': 'conv2d', 'output': array([[[[    inf,     inf,     inf, ...,     inf,     inf,     inf],
         [    inf,     inf,     inf, ...,     inf,     inf,     inf],
         [263104., 252032., 256704., ..., 227776., 229760., 249920.],
         ...,
         [194880., 190208., 186816., ..., 230080., 241728., 236032.],
         [197504., 193216., 189056., ..., 214976., 222400., 215808.],
         [203712., 201280., 196096., ..., 206592., 206592., 193216.]],

        [[    inf,     inf,     inf, ...,     inf,     inf,     inf],
         [    inf,     inf,     inf, ...,     inf,     inf,     inf],
         [263104., 252032., 256704., ..., 227776., 229760., 249920.],
         ...,
         [194880., 190208., 186816., ..., 230080., 241728., 236032.],
         [197504., 193216., 189056., ..., 214976., 222400., 215808.],
         [203712., 201280., 196096., ..., 206592., 206592., 193216.]],

        [[    inf,     inf,     inf, ...,     inf,     inf,     inf],
         [    inf,     inf,     inf, ...,     inf,     inf,     inf],
         [263104., 252032., 256704., ..., 227776., 229760., 249920.],
         ...,
         [194880., 190208., 186816., ..., 230080., 241728., 236032.],
         [197504., 193216., 189056., ..., 214976., 222400., 215808.],
         [203712., 201280., 196096., ..., 206592., 206592., 193216.]],

        ...,

        [[    inf,     inf,     inf, ...,     inf,     inf,     inf],
         [    inf,     inf,     inf, ...,     inf,     inf,     inf],
         [263104., 252032., 256704., ..., 227776., 229760., 249920.],
         ...,
         [194880., 190208., 186816., ..., 230080., 241728., 236032.],
         [197504., 193216., 189056., ..., 214976., 222400., 215808.],
         [203712., 201280., 196096., ..., 206592., 206592., 193216.]],

        [[    inf,     inf,     inf, ...,     inf,     inf,     inf],
         [    inf,     inf,     inf, ...,     inf,     inf,     inf],
         [263104., 252032., 256704., ..., 227776., 229760., 249920.],
         ...,
         [194880., 190208., 186816., ..., 230080., 241728., 236032.],
         [197504., 193216., 189056., ..., 214976., 222400., 215808.],
         [203712., 201280., 196096., ..., 206592., 206592., 193216.]],

        [[    inf,     inf,     inf, ...,     inf,     inf,     inf],
         [    inf,     inf,     inf, ...,     inf,     inf,     inf],
         [263104., 252032., 256704., ..., 227776., 229760., 249920.],
         ...,
         [194880., 190208., 186816., ..., 230080., 241728., 236032.],
         [197504., 193216., 189056., ..., 214976., 222400., 215808.],
         [203712., 201280., 196096., ..., 206592., 206592., 193216.]]]],
      dtype=float32), 'output_shape': (1, 64, 30, 30), 'from': [25], 'to': [15]}
torch node:
{'name': 'conv2d', 'output': array([[[[    inf,     inf,     inf, ...,     inf,     inf,     inf],
         [    inf,     inf,     inf, ...,     inf,     inf,     inf],
         [263104., 252032., 256704., ..., 227776., 229760., 249920.],
         ...,
         [194880., 190208., 186816., ..., 230080., 241728., 236032.],
         [197504., 193216., 189056., ..., 214976., 222400., 215808.],
         [203712., 201280., 196096., ..., 206592., 206592., 193216.]],

        [[    inf,     inf,     inf, ...,     inf,     inf,     inf],
         [    inf,     inf,     inf, ...,     inf,     inf,     inf],
         [263104., 252032., 256704., ..., 227776., 229760., 249920.],
         ...,
         [194880., 190208., 186816., ..., 230080., 241728., 236032.],
         [197504., 193216., 189056., ..., 214976., 222400., 215808.],
         [203712., 201280., 196096., ..., 206592., 206592., 193216.]],

        [[    inf,     inf,     inf, ...,     inf,     inf,     inf],
         [    inf,     inf,     inf, ...,     inf,     inf,     inf],
         [263104., 252032., 256704., ..., 227776., 229760., 249920.],
         ...,
         [194880., 190208., 186816., ..., 230080., 241728., 236032.],
         [197504., 193216., 189056., ..., 214976., 222400., 215808.],
         [203712., 201280., 196096., ..., 206592., 206592., 193216.]],

        ...,

        [[    inf,     inf,     inf, ...,     inf,     inf,     inf],
         [    inf,     inf,     inf, ...,     inf,     inf,     inf],
         [263104., 252032., 256704., ..., 227776., 229760., 249920.],
         ...,
         [194880., 190208., 186816., ..., 230080., 241728., 236032.],
         [197504., 193216., 189056., ..., 214976., 222400., 215808.],
         [203712., 201280., 196096., ..., 206592., 206592., 193216.]],

        [[    inf,     inf,     inf, ...,     inf,     inf,     inf],
         [    inf,     inf,     inf, ...,     inf,     inf,     inf],
         [263104., 252032., 256704., ..., 227776., 229760., 249920.],
         ...,
         [194880., 190208., 186816., ..., 230080., 241728., 236032.],
         [197504., 193216., 189056., ..., 214976., 222400., 215808.],
         [203712., 201280., 196096., ..., 206592., 206592., 193216.]],

        [[    inf,     inf,     inf, ...,     inf,     inf,     inf],
         [    inf,     inf,     inf, ...,     inf,     inf,     inf],
         [263104., 252032., 256704., ..., 227776., 229760., 249920.],
         ...,
         [194880., 190208., 186816., ..., 230080., 241728., 236032.],
         [197504., 193216., 189056., ..., 214976., 222400., 215808.],
         [203712., 201280., 196096., ..., 206592., 206592., 193216.]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 30, 30]), 'from': [25], 'to': [15]}

generate models:114

analyse output arrays in iter:120

pre layer res:
9:transpose
{'name': 'transpose', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 32, 32]), 'from': [10], 'to': [12]}
tf node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 32, 32]), 'from': [9], 'to': [11]}
ms node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 256, 32, 32), 'from': [9], 'to': [11]}
torch node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 32, 32]), 'from': [9], 'to': [11]}

generate models:116

analyse output arrays in iter:122

pre layer res:
20:exp
{'name': 'exp', 'output': array([[[[2.6821475 , 2.1065953 , 2.1065953 , ..., 1.3110754 ,
          1.0000603 , 0.53635174],
         [0.36797002, 0.3852994 , 0.7692674 , ..., 1.6972878 ,
          2.6859674 , 0.525418  ],
         [0.36797002, 2.6821475 , 0.36797002, ..., 0.52545434,
          2.3307457 , 0.43526882],
         ...,
         [1.7100924 , 0.40281215, 0.868411  , ..., 2.7180433 ,
          0.43526882, 2.3417246 ],
         [0.43106893, 2.68952   , 0.36788303, ..., 0.5149882 ,
          0.76920027, 1.4857993 ],
         [2.7176147 , 0.7434919 , 1.5345082 , ..., 0.46383083,
          0.5719155 , 2.682187  ]],

        [[2.6821475 , 2.1065953 , 2.1065953 , ..., 1.3110754 ,
          1.0000603 , 0.53635174],
         [0.36797002, 0.3852994 , 0.7692674 , ..., 1.6972878 ,
          2.6859674 , 0.525418  ],
         [0.36797002, 2.6821475 , 0.36797002, ..., 0.52545434,
          2.3307457 , 0.43526882],
         ...,
         [1.7100924 , 0.40281215, 0.868411  , ..., 2.7180433 ,
          0.43526882, 2.3417246 ],
         [0.43106893, 2.68952   , 0.36788303, ..., 0.5149882 ,
          0.76920027, 1.4857993 ],
         [2.7176147 , 0.7434919 , 1.5345082 , ..., 0.46383083,
          0.5719155 , 2.682187  ]],

        [[2.6821475 , 2.1065953 , 2.1065953 , ..., 1.3110754 ,
          1.0000603 , 0.53635174],
         [0.36797002, 0.3852994 , 0.7692674 , ..., 1.6972878 ,
          2.6859674 , 0.525418  ],
         [0.36797002, 2.6821475 , 0.36797002, ..., 0.52545434,
          2.3307457 , 0.43526882],
         ...,
         [1.7100924 , 0.40281215, 0.868411  , ..., 2.7180433 ,
          0.43526882, 2.3417246 ],
         [0.43106893, 2.68952   , 0.36788303, ..., 0.5149882 ,
          0.76920027, 1.4857993 ],
         [2.7176147 , 0.7434919 , 1.5345082 , ..., 0.46383083,
          0.5719155 , 2.682187  ]],

        ...,

        [[2.6821475 , 2.1065953 , 2.1065953 , ..., 1.3110754 ,
          1.0000603 , 0.53635174],
         [0.36797002, 0.3852994 , 0.7692674 , ..., 1.6972878 ,
          2.6859674 , 0.525418  ],
         [0.36797002, 2.6821475 , 0.36797002, ..., 0.52545434,
          2.3307457 , 0.43526882],
         ...,
         [1.7100924 , 0.40281215, 0.868411  , ..., 2.7180433 ,
          0.43526882, 2.3417246 ],
         [0.43106893, 2.68952   , 0.36788303, ..., 0.5149882 ,
          0.76920027, 1.4857993 ],
         [2.7176147 , 0.7434919 , 1.5345082 , ..., 0.46383083,
          0.5719155 , 2.682187  ]],

        [[2.6821475 , 2.1065953 , 2.1065953 , ..., 1.3110754 ,
          1.0000603 , 0.53635174],
         [0.36797002, 0.3852994 , 0.7692674 , ..., 1.6972878 ,
          2.6859674 , 0.525418  ],
         [0.36797002, 2.6821475 , 0.36797002, ..., 0.52545434,
          2.3307457 , 0.43526882],
         ...,
         [1.7100924 , 0.40281215, 0.868411  , ..., 2.7180433 ,
          0.43526882, 2.3417246 ],
         [0.43106893, 2.68952   , 0.36788303, ..., 0.5149882 ,
          0.76920027, 1.4857993 ],
         [2.7176147 , 0.7434919 , 1.5345082 , ..., 0.46383083,
          0.5719155 , 2.682187  ]],

        [[2.6821475 , 2.1065953 , 2.1065953 , ..., 1.3110754 ,
          1.0000603 , 0.53635174],
         [0.36797002, 0.3852994 , 0.7692674 , ..., 1.6972878 ,
          2.6859674 , 0.525418  ],
         [0.36797002, 2.6821475 , 0.36797002, ..., 0.52545434,
          2.3307457 , 0.43526882],
         ...,
         [1.7100924 , 0.40281215, 0.868411  , ..., 2.7180433 ,
          0.43526882, 2.3417246 ],
         [0.43106893, 2.68952   , 0.36788303, ..., 0.5149882 ,
          0.76920027, 1.4857993 ],
         [2.7176147 , 0.7434919 , 1.5345082 , ..., 0.46383083,
          0.5719155 , 2.682187  ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [16], 'to': [9]}
tf node:
{'name': 'log', 'output': array([[[[ 9.8661780e-01,  7.4507302e-01,  7.4507302e-01, ...,
           2.7084777e-01,  6.0318082e-05, -6.2296510e-01],
         [-9.9975383e-01, -9.5373452e-01, -2.6231667e-01, ...,
           5.2903157e-01,  9.8804098e-01, -6.4356118e-01],
         [-9.9975383e-01,  9.8661780e-01, -9.9975383e-01, ...,
          -6.4349198e-01,  8.4618825e-01, -8.3179146e-01],
         ...,
         [ 5.3654742e-01, -9.0928495e-01, -1.4109017e-01, ...,
           9.9991226e-01, -8.3179146e-01,  8.5088766e-01],
         [-8.4148729e-01,  9.8936272e-01, -9.9999022e-01, ...,
          -6.6361135e-01, -2.6240394e-01,  3.9595288e-01],
         [ 9.9975455e-01, -2.9639742e-01,  4.2820996e-01, ...,
          -7.6823539e-01, -5.5876398e-01,  9.8663253e-01]],

        [[ 9.8661780e-01,  7.4507302e-01,  7.4507302e-01, ...,
           2.7084777e-01,  6.0318082e-05, -6.2296510e-01],
         [-9.9975383e-01, -9.5373452e-01, -2.6231667e-01, ...,
           5.2903157e-01,  9.8804098e-01, -6.4356118e-01],
         [-9.9975383e-01,  9.8661780e-01, -9.9975383e-01, ...,
          -6.4349198e-01,  8.4618825e-01, -8.3179146e-01],
         ...,
         [ 5.3654742e-01, -9.0928495e-01, -1.4109017e-01, ...,
           9.9991226e-01, -8.3179146e-01,  8.5088766e-01],
         [-8.4148729e-01,  9.8936272e-01, -9.9999022e-01, ...,
          -6.6361135e-01, -2.6240394e-01,  3.9595288e-01],
         [ 9.9975455e-01, -2.9639742e-01,  4.2820996e-01, ...,
          -7.6823539e-01, -5.5876398e-01,  9.8663253e-01]],

        [[ 9.8661780e-01,  7.4507302e-01,  7.4507302e-01, ...,
           2.7084777e-01,  6.0318082e-05, -6.2296510e-01],
         [-9.9975383e-01, -9.5373452e-01, -2.6231667e-01, ...,
           5.2903157e-01,  9.8804098e-01, -6.4356118e-01],
         [-9.9975383e-01,  9.8661780e-01, -9.9975383e-01, ...,
          -6.4349198e-01,  8.4618825e-01, -8.3179146e-01],
         ...,
         [ 5.3654742e-01, -9.0928495e-01, -1.4109017e-01, ...,
           9.9991226e-01, -8.3179146e-01,  8.5088766e-01],
         [-8.4148729e-01,  9.8936272e-01, -9.9999022e-01, ...,
          -6.6361135e-01, -2.6240394e-01,  3.9595288e-01],
         [ 9.9975455e-01, -2.9639742e-01,  4.2820996e-01, ...,
          -7.6823539e-01, -5.5876398e-01,  9.8663253e-01]],

        ...,

        [[ 9.8661780e-01,  7.4507302e-01,  7.4507302e-01, ...,
           2.7084777e-01,  6.0318082e-05, -6.2296510e-01],
         [-9.9975383e-01, -9.5373452e-01, -2.6231667e-01, ...,
           5.2903157e-01,  9.8804098e-01, -6.4356118e-01],
         [-9.9975383e-01,  9.8661780e-01, -9.9975383e-01, ...,
          -6.4349198e-01,  8.4618825e-01, -8.3179146e-01],
         ...,
         [ 5.3654742e-01, -9.0928495e-01, -1.4109017e-01, ...,
           9.9991226e-01, -8.3179146e-01,  8.5088766e-01],
         [-8.4148729e-01,  9.8936272e-01, -9.9999022e-01, ...,
          -6.6361135e-01, -2.6240394e-01,  3.9595288e-01],
         [ 9.9975455e-01, -2.9639742e-01,  4.2820996e-01, ...,
          -7.6823539e-01, -5.5876398e-01,  9.8663253e-01]],

        [[ 9.8661780e-01,  7.4507302e-01,  7.4507302e-01, ...,
           2.7084777e-01,  6.0318082e-05, -6.2296510e-01],
         [-9.9975383e-01, -9.5373452e-01, -2.6231667e-01, ...,
           5.2903157e-01,  9.8804098e-01, -6.4356118e-01],
         [-9.9975383e-01,  9.8661780e-01, -9.9975383e-01, ...,
          -6.4349198e-01,  8.4618825e-01, -8.3179146e-01],
         ...,
         [ 5.3654742e-01, -9.0928495e-01, -1.4109017e-01, ...,
           9.9991226e-01, -8.3179146e-01,  8.5088766e-01],
         [-8.4148729e-01,  9.8936272e-01, -9.9999022e-01, ...,
          -6.6361135e-01, -2.6240394e-01,  3.9595288e-01],
         [ 9.9975455e-01, -2.9639742e-01,  4.2820996e-01, ...,
          -7.6823539e-01, -5.5876398e-01,  9.8663253e-01]],

        [[ 9.8661780e-01,  7.4507302e-01,  7.4507302e-01, ...,
           2.7084777e-01,  6.0318082e-05, -6.2296510e-01],
         [-9.9975383e-01, -9.5373452e-01, -2.6231667e-01, ...,
           5.2903157e-01,  9.8804098e-01, -6.4356118e-01],
         [-9.9975383e-01,  9.8661780e-01, -9.9975383e-01, ...,
          -6.4349198e-01,  8.4618825e-01, -8.3179146e-01],
         ...,
         [ 5.3654742e-01, -9.0928495e-01, -1.4109017e-01, ...,
           9.9991226e-01, -8.3179146e-01,  8.5088766e-01],
         [-8.4148729e-01,  9.8936272e-01, -9.9999022e-01, ...,
          -6.6361135e-01, -2.6240394e-01,  3.9595288e-01],
         [ 9.9975455e-01, -2.9639742e-01,  4.2820996e-01, ...,
          -7.6823539e-01, -5.5876398e-01,  9.8663253e-01]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [20], 'to': [3]}
ms node:
{'name': 'log', 'output': array([[[[ 9.8661596e-01,  7.4507636e-01,  7.4507636e-01, ...,
           2.7085066e-01,  5.8887570e-05, -6.2296802e-01],
         [-9.9975377e-01, -9.5373672e-01, -2.6231882e-01, ...,
           5.2902812e-01,  9.8803908e-01, -6.4355779e-01],
         [-9.9975377e-01,  9.8661596e-01, -9.9975377e-01, ...,
          -6.4348859e-01,  8.4618676e-01, -8.3179253e-01],
         ...,
         [ 5.3654414e-01, -9.0928733e-01, -1.4109123e-01, ...,
           9.9991041e-01, -8.3179253e-01,  8.5088611e-01],
         [-8.4148836e-01,  9.8936087e-01, -9.9999028e-01, ...,
          -6.6361278e-01, -2.6240614e-01,  3.9595282e-01],
         [ 9.9975258e-01, -2.9639733e-01,  4.2820773e-01, ...,
          -7.6823539e-01, -5.5876726e-01,  9.8663068e-01]],

        [[ 9.8661596e-01,  7.4507636e-01,  7.4507636e-01, ...,
           2.7085066e-01,  5.8887570e-05, -6.2296802e-01],
         [-9.9975377e-01, -9.5373672e-01, -2.6231882e-01, ...,
           5.2902812e-01,  9.8803908e-01, -6.4355779e-01],
         [-9.9975377e-01,  9.8661596e-01, -9.9975377e-01, ...,
          -6.4348859e-01,  8.4618676e-01, -8.3179253e-01],
         ...,
         [ 5.3654414e-01, -9.0928733e-01, -1.4109123e-01, ...,
           9.9991041e-01, -8.3179253e-01,  8.5088611e-01],
         [-8.4148836e-01,  9.8936087e-01, -9.9999028e-01, ...,
          -6.6361278e-01, -2.6240614e-01,  3.9595282e-01],
         [ 9.9975258e-01, -2.9639733e-01,  4.2820773e-01, ...,
          -7.6823539e-01, -5.5876726e-01,  9.8663068e-01]],

        [[ 9.8661596e-01,  7.4507636e-01,  7.4507636e-01, ...,
           2.7085066e-01,  5.8887570e-05, -6.2296802e-01],
         [-9.9975377e-01, -9.5373672e-01, -2.6231882e-01, ...,
           5.2902812e-01,  9.8803908e-01, -6.4355779e-01],
         [-9.9975377e-01,  9.8661596e-01, -9.9975377e-01, ...,
          -6.4348859e-01,  8.4618676e-01, -8.3179253e-01],
         ...,
         [ 5.3654414e-01, -9.0928733e-01, -1.4109123e-01, ...,
           9.9991041e-01, -8.3179253e-01,  8.5088611e-01],
         [-8.4148836e-01,  9.8936087e-01, -9.9999028e-01, ...,
          -6.6361278e-01, -2.6240614e-01,  3.9595282e-01],
         [ 9.9975258e-01, -2.9639733e-01,  4.2820773e-01, ...,
          -7.6823539e-01, -5.5876726e-01,  9.8663068e-01]],

        ...,

        [[ 9.8661596e-01,  7.4507636e-01,  7.4507636e-01, ...,
           2.7085066e-01,  5.8887570e-05, -6.2296802e-01],
         [-9.9975377e-01, -9.5373672e-01, -2.6231882e-01, ...,
           5.2902812e-01,  9.8803908e-01, -6.4355779e-01],
         [-9.9975377e-01,  9.8661596e-01, -9.9975377e-01, ...,
          -6.4348859e-01,  8.4618676e-01, -8.3179253e-01],
         ...,
         [ 5.3654414e-01, -9.0928733e-01, -1.4109123e-01, ...,
           9.9991041e-01, -8.3179253e-01,  8.5088611e-01],
         [-8.4148836e-01,  9.8936087e-01, -9.9999028e-01, ...,
          -6.6361278e-01, -2.6240614e-01,  3.9595282e-01],
         [ 9.9975258e-01, -2.9639733e-01,  4.2820773e-01, ...,
          -7.6823539e-01, -5.5876726e-01,  9.8663068e-01]],

        [[ 9.8661596e-01,  7.4507636e-01,  7.4507636e-01, ...,
           2.7085066e-01,  5.8887570e-05, -6.2296802e-01],
         [-9.9975377e-01, -9.5373672e-01, -2.6231882e-01, ...,
           5.2902812e-01,  9.8803908e-01, -6.4355779e-01],
         [-9.9975377e-01,  9.8661596e-01, -9.9975377e-01, ...,
          -6.4348859e-01,  8.4618676e-01, -8.3179253e-01],
         ...,
         [ 5.3654414e-01, -9.0928733e-01, -1.4109123e-01, ...,
           9.9991041e-01, -8.3179253e-01,  8.5088611e-01],
         [-8.4148836e-01,  9.8936087e-01, -9.9999028e-01, ...,
          -6.6361278e-01, -2.6240614e-01,  3.9595282e-01],
         [ 9.9975258e-01, -2.9639733e-01,  4.2820773e-01, ...,
          -7.6823539e-01, -5.5876726e-01,  9.8663068e-01]],

        [[ 9.8661596e-01,  7.4507636e-01,  7.4507636e-01, ...,
           2.7085066e-01,  5.8887570e-05, -6.2296802e-01],
         [-9.9975377e-01, -9.5373672e-01, -2.6231882e-01, ...,
           5.2902812e-01,  9.8803908e-01, -6.4355779e-01],
         [-9.9975377e-01,  9.8661596e-01, -9.9975377e-01, ...,
          -6.4348859e-01,  8.4618676e-01, -8.3179253e-01],
         ...,
         [ 5.3654414e-01, -9.0928733e-01, -1.4109123e-01, ...,
           9.9991041e-01, -8.3179253e-01,  8.5088611e-01],
         [-8.4148836e-01,  9.8936087e-01, -9.9999028e-01, ...,
          -6.6361278e-01, -2.6240614e-01,  3.9595282e-01],
         [ 9.9975258e-01, -2.9639733e-01,  4.2820773e-01, ...,
          -7.6823539e-01, -5.5876726e-01,  9.8663068e-01]]]],
      dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [20], 'to': [3]}
torch node:
{'name': 'log', 'output': array([[[[ 9.8661780e-01,  7.4507290e-01,  7.4507290e-01, ...,
           2.7084777e-01,  6.0318082e-05, -6.2296498e-01],
         [-9.9975383e-01, -9.5373452e-01, -2.6231667e-01, ...,
           5.2903152e-01,  9.8804092e-01, -6.4356118e-01],
         [-9.9975383e-01,  9.8661780e-01, -9.9975383e-01, ...,
          -6.4349198e-01,  8.4618825e-01, -8.3179146e-01],
         ...,
         [ 5.3654748e-01, -9.0928489e-01, -1.4109017e-01, ...,
           9.9991226e-01, -8.3179146e-01,  8.5088766e-01],
         [-8.4148729e-01,  9.8936272e-01, -9.9999034e-01, ...,
          -6.6361129e-01, -2.6240394e-01,  3.9595282e-01],
         [ 9.9975443e-01, -2.9639733e-01,  4.2820987e-01, ...,
          -7.6823539e-01, -5.5876398e-01,  9.8663253e-01]],

        [[ 9.8661780e-01,  7.4507290e-01,  7.4507290e-01, ...,
           2.7084777e-01,  6.0318082e-05, -6.2296498e-01],
         [-9.9975383e-01, -9.5373452e-01, -2.6231667e-01, ...,
           5.2903152e-01,  9.8804092e-01, -6.4356118e-01],
         [-9.9975383e-01,  9.8661780e-01, -9.9975383e-01, ...,
          -6.4349198e-01,  8.4618825e-01, -8.3179146e-01],
         ...,
         [ 5.3654748e-01, -9.0928489e-01, -1.4109017e-01, ...,
           9.9991226e-01, -8.3179146e-01,  8.5088766e-01],
         [-8.4148729e-01,  9.8936272e-01, -9.9999034e-01, ...,
          -6.6361129e-01, -2.6240394e-01,  3.9595282e-01],
         [ 9.9975443e-01, -2.9639733e-01,  4.2820987e-01, ...,
          -7.6823539e-01, -5.5876398e-01,  9.8663253e-01]],

        [[ 9.8661780e-01,  7.4507290e-01,  7.4507290e-01, ...,
           2.7084777e-01,  6.0318082e-05, -6.2296498e-01],
         [-9.9975383e-01, -9.5373452e-01, -2.6231667e-01, ...,
           5.2903152e-01,  9.8804092e-01, -6.4356118e-01],
         [-9.9975383e-01,  9.8661780e-01, -9.9975383e-01, ...,
          -6.4349198e-01,  8.4618825e-01, -8.3179146e-01],
         ...,
         [ 5.3654748e-01, -9.0928489e-01, -1.4109017e-01, ...,
           9.9991226e-01, -8.3179146e-01,  8.5088766e-01],
         [-8.4148729e-01,  9.8936272e-01, -9.9999034e-01, ...,
          -6.6361129e-01, -2.6240394e-01,  3.9595282e-01],
         [ 9.9975443e-01, -2.9639733e-01,  4.2820987e-01, ...,
          -7.6823539e-01, -5.5876398e-01,  9.8663253e-01]],

        ...,

        [[ 9.8661780e-01,  7.4507290e-01,  7.4507290e-01, ...,
           2.7084777e-01,  6.0318082e-05, -6.2296498e-01],
         [-9.9975383e-01, -9.5373452e-01, -2.6231667e-01, ...,
           5.2903152e-01,  9.8804092e-01, -6.4356118e-01],
         [-9.9975383e-01,  9.8661780e-01, -9.9975383e-01, ...,
          -6.4349198e-01,  8.4618825e-01, -8.3179146e-01],
         ...,
         [ 5.3654748e-01, -9.0928489e-01, -1.4109017e-01, ...,
           9.9991226e-01, -8.3179146e-01,  8.5088766e-01],
         [-8.4148729e-01,  9.8936272e-01, -9.9999034e-01, ...,
          -6.6361129e-01, -2.6240394e-01,  3.9595282e-01],
         [ 9.9975443e-01, -2.9639733e-01,  4.2820987e-01, ...,
          -7.6823539e-01, -5.5876398e-01,  9.8663253e-01]],

        [[ 9.8661780e-01,  7.4507290e-01,  7.4507290e-01, ...,
           2.7084777e-01,  6.0318082e-05, -6.2296498e-01],
         [-9.9975383e-01, -9.5373452e-01, -2.6231667e-01, ...,
           5.2903152e-01,  9.8804092e-01, -6.4356118e-01],
         [-9.9975383e-01,  9.8661780e-01, -9.9975383e-01, ...,
          -6.4349198e-01,  8.4618825e-01, -8.3179146e-01],
         ...,
         [ 5.3654748e-01, -9.0928489e-01, -1.4109017e-01, ...,
           9.9991226e-01, -8.3179146e-01,  8.5088766e-01],
         [-8.4148729e-01,  9.8936272e-01, -9.9999034e-01, ...,
          -6.6361129e-01, -2.6240394e-01,  3.9595282e-01],
         [ 9.9975443e-01, -2.9639733e-01,  4.2820987e-01, ...,
          -7.6823539e-01, -5.5876398e-01,  9.8663253e-01]],

        [[ 9.8661780e-01,  7.4507290e-01,  7.4507290e-01, ...,
           2.7084777e-01,  6.0318082e-05, -6.2296498e-01],
         [-9.9975383e-01, -9.5373452e-01, -2.6231667e-01, ...,
           5.2903152e-01,  9.8804092e-01, -6.4356118e-01],
         [-9.9975383e-01,  9.8661780e-01, -9.9975383e-01, ...,
          -6.4349198e-01,  8.4618825e-01, -8.3179146e-01],
         ...,
         [ 5.3654748e-01, -9.0928489e-01, -1.4109017e-01, ...,
           9.9991226e-01, -8.3179146e-01,  8.5088766e-01],
         [-8.4148729e-01,  9.8936272e-01, -9.9999034e-01, ...,
          -6.6361129e-01, -2.6240394e-01,  3.9595282e-01],
         [ 9.9975443e-01, -2.9639733e-01,  4.2820987e-01, ...,
          -7.6823539e-01, -5.5876398e-01,  9.8663253e-01]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [20], 'to': [3]}

generate models:118

analyse output arrays in iter:149

pre layer res:
11:relu
{'name': 'relu', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 32, 32]), 'from': [10], 'to': [20]}
tf node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 32, 32]), 'from': [11], 'to': [19]}
ms node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 256, 32, 32), 'from': [11], 'to': [19]}
torch node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 32, 32]), 'from': [11], 'to': [19]}

generate models:145

analyse output arrays in iter:157

pre layer res:
33:reshape
{'name': 'reshape', 'output': array([[[[2898.1338,    0.    ,    0.    , ...,    0.    ,    0.    ,
          1680.4822],
         [1217.6517,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ],
         [   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ],
         ...,
         [   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ],
         [   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ],
         [   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ]],

        [[   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ],
         [   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ],
         [   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ],
         ...,
         [   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ],
         [   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ],
         [   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ]],

        [[   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ],
         [   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ],
         [   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ],
         ...,
         [   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ],
         [   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ],
         [   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ]],

        ...,

        [[   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ],
         [   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ],
         [   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ],
         ...,
         [   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ],
         [   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ],
         [   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ]],

        [[   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ],
         [   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ],
         [   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ],
         ...,
         [   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ],
         [   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ],
         [   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ]],

        [[   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ],
         [   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ],
         [   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ],
         ...,
         [   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ],
         [   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ],
         [   0.    ,    0.    ,    0.    , ...,    0.    ,    0.    ,
             0.    ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [32], 'to': [24]}
tf node:
{'name': 'cos', 'output': array([[[[-0.01456561,  1.        ,  1.        , ...,  1.        ,
           1.        , -0.9637997 ],
         [ 0.2807545 ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]],

        ...,

        [[ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [33], 'to': [13]}
ms node:
{'name': 'cos', 'output': array([[[[-0.01480972,  1.        ,  1.        , ...,  1.        ,
           1.        , -0.9637997 ],
         [ 0.28087166,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]],

        ...,

        [[ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [33], 'to': [13]}
torch node:
{'name': 'cos', 'output': array([[[[-0.01480972,  1.        ,  1.        , ...,  1.        ,
           1.        , -0.9637672 ],
         [ 0.2807545 ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]],

        ...,

        [[ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [33], 'to': [13]}

pre layer res:
9:square
{'name': 'square', 'output': array([[[[1.6546654e+08, 1.6550981e+08, 1.6551464e+08, ...,
          1.6551827e+08, 1.6551827e+08, 1.6551750e+08],
         [1.6551960e+08, 1.6552434e+08, 1.6552434e+08, ...,
          1.6552632e+08, 1.6552901e+08, 1.6552901e+08],
         [1.6552901e+08, 1.6553112e+08, 1.6553394e+08, ...,
          1.6553394e+08, 1.6553554e+08, 1.6553554e+08],
         ...,
         [1.6557736e+08, 1.6557741e+08, 1.6557741e+08, ...,
          1.6557741e+08, 1.6557725e+08, 1.6557701e+08],
         [1.6557725e+08, 1.6557741e+08, 1.6557741e+08, ...,
          1.6557741e+08, 1.6557725e+08, 1.6557701e+08],
         [1.6557725e+08, 1.6557741e+08, 1.6557741e+08, ...,
          1.6557741e+08, 1.6557725e+08, 1.6557701e+08]],

        [[1.6546654e+08, 1.6550981e+08, 1.6551464e+08, ...,
          1.6551827e+08, 1.6551827e+08, 1.6551750e+08],
         [1.6551960e+08, 1.6552434e+08, 1.6552434e+08, ...,
          1.6552632e+08, 1.6552901e+08, 1.6552901e+08],
         [1.6552901e+08, 1.6553112e+08, 1.6553394e+08, ...,
          1.6553394e+08, 1.6553554e+08, 1.6553554e+08],
         ...,
         [1.6557736e+08, 1.6557741e+08, 1.6557741e+08, ...,
          1.6557741e+08, 1.6557725e+08, 1.6557701e+08],
         [1.6557725e+08, 1.6557741e+08, 1.6557741e+08, ...,
          1.6557741e+08, 1.6557725e+08, 1.6557701e+08],
         [1.6557725e+08, 1.6557741e+08, 1.6557741e+08, ...,
          1.6557741e+08, 1.6557725e+08, 1.6557701e+08]],

        [[1.6546654e+08, 1.6550981e+08, 1.6551464e+08, ...,
          1.6551827e+08, 1.6551827e+08, 1.6551750e+08],
         [1.6551960e+08, 1.6552434e+08, 1.6552434e+08, ...,
          1.6552632e+08, 1.6552901e+08, 1.6552901e+08],
         [1.6552901e+08, 1.6553112e+08, 1.6553394e+08, ...,
          1.6553394e+08, 1.6553554e+08, 1.6553554e+08],
         ...,
         [1.6557736e+08, 1.6557741e+08, 1.6557741e+08, ...,
          1.6557741e+08, 1.6557725e+08, 1.6557701e+08],
         [1.6557725e+08, 1.6557741e+08, 1.6557741e+08, ...,
          1.6557741e+08, 1.6557725e+08, 1.6557701e+08],
         [1.6557725e+08, 1.6557741e+08, 1.6557741e+08, ...,
          1.6557741e+08, 1.6557725e+08, 1.6557701e+08]],

        ...,

        [[1.6546654e+08, 1.6550981e+08, 1.6551464e+08, ...,
          1.6551827e+08, 1.6551827e+08, 1.6551750e+08],
         [1.6551960e+08, 1.6552434e+08, 1.6552434e+08, ...,
          1.6552632e+08, 1.6552901e+08, 1.6552901e+08],
         [1.6552901e+08, 1.6553112e+08, 1.6553394e+08, ...,
          1.6553394e+08, 1.6553554e+08, 1.6553554e+08],
         ...,
         [1.6557736e+08, 1.6557741e+08, 1.6557741e+08, ...,
          1.6557741e+08, 1.6557725e+08, 1.6557701e+08],
         [1.6557725e+08, 1.6557741e+08, 1.6557741e+08, ...,
          1.6557741e+08, 1.6557725e+08, 1.6557701e+08],
         [1.6557725e+08, 1.6557741e+08, 1.6557741e+08, ...,
          1.6557741e+08, 1.6557725e+08, 1.6557701e+08]],

        [[1.6546654e+08, 1.6550981e+08, 1.6551464e+08, ...,
          1.6551827e+08, 1.6551827e+08, 1.6551750e+08],
         [1.6551960e+08, 1.6552434e+08, 1.6552434e+08, ...,
          1.6552632e+08, 1.6552901e+08, 1.6552901e+08],
         [1.6552901e+08, 1.6553112e+08, 1.6553394e+08, ...,
          1.6553394e+08, 1.6553554e+08, 1.6553554e+08],
         ...,
         [1.6557736e+08, 1.6557741e+08, 1.6557741e+08, ...,
          1.6557741e+08, 1.6557725e+08, 1.6557701e+08],
         [1.6557725e+08, 1.6557741e+08, 1.6557741e+08, ...,
          1.6557741e+08, 1.6557725e+08, 1.6557701e+08],
         [1.6557725e+08, 1.6557741e+08, 1.6557741e+08, ...,
          1.6557741e+08, 1.6557725e+08, 1.6557701e+08]],

        [[1.6546654e+08, 1.6550981e+08, 1.6551464e+08, ...,
          1.6551827e+08, 1.6551827e+08, 1.6551750e+08],
         [1.6551960e+08, 1.6552434e+08, 1.6552434e+08, ...,
          1.6552632e+08, 1.6552901e+08, 1.6552901e+08],
         [1.6552901e+08, 1.6553112e+08, 1.6553394e+08, ...,
          1.6553394e+08, 1.6553554e+08, 1.6553554e+08],
         ...,
         [1.6557736e+08, 1.6557741e+08, 1.6557741e+08, ...,
          1.6557741e+08, 1.6557725e+08, 1.6557701e+08],
         [1.6557725e+08, 1.6557741e+08, 1.6557741e+08, ...,
          1.6557741e+08, 1.6557725e+08, 1.6557701e+08],
         [1.6557725e+08, 1.6557741e+08, 1.6557741e+08, ...,
          1.6557741e+08, 1.6557725e+08, 1.6557701e+08]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 32, 32]), 'from': [10], 'to': [25]}
tf node:
{'name': 'sin', 'output': array([[[[ 0.61819255,  0.44495702,  0.63778967, ...,  0.847107  ,
           0.847107  , -0.426731  ],
         [-0.11655946,  0.9862702 ,  0.9862702 , ...,  0.24753864,
          -0.8152568 , -0.8152568 ],
         [-0.8152568 , -0.10325135,  0.85706556, ...,  0.85706556,
          -0.92563367, -0.92563367],
         ...,
         [ 0.9340908 , -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ],
         [ 0.10815637, -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ],
         [ 0.10815637, -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ]],

        [[ 0.61819255,  0.44495702,  0.63778967, ...,  0.847107  ,
           0.847107  , -0.426731  ],
         [-0.11655946,  0.9862702 ,  0.9862702 , ...,  0.24753864,
          -0.8152568 , -0.8152568 ],
         [-0.8152568 , -0.10325135,  0.85706556, ...,  0.85706556,
          -0.92563367, -0.92563367],
         ...,
         [ 0.9340908 , -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ],
         [ 0.10815637, -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ],
         [ 0.10815637, -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ]],

        [[ 0.61819255,  0.44495702,  0.63778967, ...,  0.847107  ,
           0.847107  , -0.426731  ],
         [-0.11655946,  0.9862702 ,  0.9862702 , ...,  0.24753864,
          -0.8152568 , -0.8152568 ],
         [-0.8152568 , -0.10325135,  0.85706556, ...,  0.85706556,
          -0.92563367, -0.92563367],
         ...,
         [ 0.9340908 , -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ],
         [ 0.10815637, -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ],
         [ 0.10815637, -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ]],

        ...,

        [[ 0.61819255,  0.44495702,  0.63778967, ...,  0.847107  ,
           0.847107  , -0.426731  ],
         [-0.11655946,  0.9862702 ,  0.9862702 , ...,  0.24753864,
          -0.8152568 , -0.8152568 ],
         [-0.8152568 , -0.10325135,  0.85706556, ...,  0.85706556,
          -0.92563367, -0.92563367],
         ...,
         [ 0.9340908 , -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ],
         [ 0.10815637, -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ],
         [ 0.10815637, -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ]],

        [[ 0.61819255,  0.44495702,  0.63778967, ...,  0.847107  ,
           0.847107  , -0.426731  ],
         [-0.11655946,  0.9862702 ,  0.9862702 , ...,  0.24753864,
          -0.8152568 , -0.8152568 ],
         [-0.8152568 , -0.10325135,  0.85706556, ...,  0.85706556,
          -0.92563367, -0.92563367],
         ...,
         [ 0.9340908 , -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ],
         [ 0.10815637, -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ],
         [ 0.10815637, -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ]],

        [[ 0.61819255,  0.44495702,  0.63778967, ...,  0.847107  ,
           0.847107  , -0.426731  ],
         [-0.11655946,  0.9862702 ,  0.9862702 , ...,  0.24753864,
          -0.8152568 , -0.8152568 ],
         [-0.8152568 , -0.10325135,  0.85706556, ...,  0.85706556,
          -0.92563367, -0.92563367],
         ...,
         [ 0.9340908 , -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ],
         [ 0.10815637, -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ],
         [ 0.10815637, -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 32, 32]), 'from': [9], 'to': [11]}
ms node:
{'name': 'sin', 'output': array([[[[-0.36571828,  0.44495702,  0.63778967, ...,  0.84710693,
           0.84710693, -0.426731  ],
         [-0.6449046 ,  0.9862702 ,  0.9862702 , ...,  0.24753863,
          -0.9994372 , -0.9994372 ],
         [-0.9994372 , -0.10325135,  0.8570655 , ...,  0.8570655 ,
          -0.92563367, -0.92563367],
         ...,
         [ 0.93409073, -0.32365862, -0.32365862, ..., -0.32365862,
          -0.38979143,  0.9751344 ],
         [-0.38979143, -0.32365862, -0.32365862, ..., -0.32365862,
          -0.38979143,  0.9751344 ],
         [-0.38979143, -0.32365862, -0.32365862, ..., -0.32365862,
          -0.38979143,  0.9751344 ]],

        [[-0.36571828,  0.44495702,  0.63778967, ...,  0.84710693,
           0.84710693, -0.426731  ],
         [-0.6449046 ,  0.9862702 ,  0.9862702 , ...,  0.24753863,
          -0.9994372 , -0.9994372 ],
         [-0.9994372 , -0.10325135,  0.8570655 , ...,  0.8570655 ,
          -0.92563367, -0.92563367],
         ...,
         [ 0.93409073, -0.32365862, -0.32365862, ..., -0.32365862,
          -0.38979143,  0.9751344 ],
         [-0.38979143, -0.32365862, -0.32365862, ..., -0.32365862,
          -0.38979143,  0.9751344 ],
         [-0.38979143, -0.32365862, -0.32365862, ..., -0.32365862,
          -0.38979143,  0.9751344 ]],

        [[-0.36571828,  0.44495702,  0.63778967, ...,  0.84710693,
           0.84710693, -0.426731  ],
         [-0.6449046 ,  0.9862702 ,  0.9862702 , ...,  0.24753863,
          -0.9994372 , -0.9994372 ],
         [-0.9994372 , -0.10325135,  0.8570655 , ...,  0.8570655 ,
          -0.92563367, -0.92563367],
         ...,
         [ 0.93409073, -0.32365862, -0.32365862, ..., -0.32365862,
          -0.38979143,  0.9751344 ],
         [-0.38979143, -0.32365862, -0.32365862, ..., -0.32365862,
          -0.38979143,  0.9751344 ],
         [-0.38979143, -0.32365862, -0.32365862, ..., -0.32365862,
          -0.38979143,  0.9751344 ]],

        ...,

        [[-0.36571828,  0.44495702,  0.63778967, ...,  0.84710693,
           0.84710693, -0.426731  ],
         [-0.6449046 ,  0.9862702 ,  0.9862702 , ...,  0.24753863,
          -0.9994372 , -0.9994372 ],
         [-0.9994372 , -0.10325135,  0.8570655 , ...,  0.8570655 ,
          -0.92563367, -0.92563367],
         ...,
         [ 0.93409073, -0.32365862, -0.32365862, ..., -0.32365862,
          -0.38979143,  0.9751344 ],
         [-0.38979143, -0.32365862, -0.32365862, ..., -0.32365862,
          -0.38979143,  0.9751344 ],
         [-0.38979143, -0.32365862, -0.32365862, ..., -0.32365862,
          -0.38979143,  0.9751344 ]],

        [[-0.36571828,  0.44495702,  0.63778967, ...,  0.84710693,
           0.84710693, -0.426731  ],
         [-0.6449046 ,  0.9862702 ,  0.9862702 , ...,  0.24753863,
          -0.9994372 , -0.9994372 ],
         [-0.9994372 , -0.10325135,  0.8570655 , ...,  0.8570655 ,
          -0.92563367, -0.92563367],
         ...,
         [ 0.93409073, -0.32365862, -0.32365862, ..., -0.32365862,
          -0.38979143,  0.9751344 ],
         [-0.38979143, -0.32365862, -0.32365862, ..., -0.32365862,
          -0.38979143,  0.9751344 ],
         [-0.38979143, -0.32365862, -0.32365862, ..., -0.32365862,
          -0.38979143,  0.9751344 ]],

        [[-0.36571828,  0.44495702,  0.63778967, ...,  0.84710693,
           0.84710693, -0.426731  ],
         [-0.6449046 ,  0.9862702 ,  0.9862702 , ...,  0.24753863,
          -0.9994372 , -0.9994372 ],
         [-0.9994372 , -0.10325135,  0.8570655 , ...,  0.8570655 ,
          -0.92563367, -0.92563367],
         ...,
         [ 0.93409073, -0.32365862, -0.32365862, ..., -0.32365862,
          -0.38979143,  0.9751344 ],
         [-0.38979143, -0.32365862, -0.32365862, ..., -0.32365862,
          -0.38979143,  0.9751344 ],
         [-0.38979143, -0.32365862, -0.32365862, ..., -0.32365862,
          -0.38979143,  0.9751344 ]]]], dtype=float32), 'output_shape': (1, 256, 32, 32), 'from': [9], 'to': [11]}
torch node:
{'name': 'sin', 'output': array([[[[ 0.61819255,  0.44495702,  0.63778967, ...,  0.84710693,
           0.84710693, -0.426731  ],
         [-0.11655946,  0.9862702 ,  0.9862702 , ...,  0.24753863,
          -0.8152568 , -0.8152568 ],
         [-0.8152568 , -0.10325135,  0.8570655 , ...,  0.8570655 ,
          -0.92563367, -0.92563367],
         ...,
         [ 0.93409073, -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ],
         [ 0.10815637, -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ],
         [ 0.10815637, -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ]],

        [[ 0.61819255,  0.44495702,  0.63778967, ...,  0.84710693,
           0.84710693, -0.426731  ],
         [-0.11655946,  0.9862702 ,  0.9862702 , ...,  0.24753863,
          -0.8152568 , -0.8152568 ],
         [-0.8152568 , -0.10325135,  0.8570655 , ...,  0.8570655 ,
          -0.92563367, -0.92563367],
         ...,
         [ 0.93409073, -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ],
         [ 0.10815637, -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ],
         [ 0.10815637, -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ]],

        [[ 0.61819255,  0.44495702,  0.63778967, ...,  0.84710693,
           0.84710693, -0.426731  ],
         [-0.11655946,  0.9862702 ,  0.9862702 , ...,  0.24753863,
          -0.8152568 , -0.8152568 ],
         [-0.8152568 , -0.10325135,  0.8570655 , ...,  0.8570655 ,
          -0.92563367, -0.92563367],
         ...,
         [ 0.93409073, -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ],
         [ 0.10815637, -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ],
         [ 0.10815637, -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ]],

        ...,

        [[ 0.61819255,  0.44495702,  0.63778967, ...,  0.84710693,
           0.84710693, -0.426731  ],
         [-0.11655946,  0.9862702 ,  0.9862702 , ...,  0.24753863,
          -0.8152568 , -0.8152568 ],
         [-0.8152568 , -0.10325135,  0.8570655 , ...,  0.8570655 ,
          -0.92563367, -0.92563367],
         ...,
         [ 0.93409073, -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ],
         [ 0.10815637, -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ],
         [ 0.10815637, -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ]],

        [[ 0.61819255,  0.44495702,  0.63778967, ...,  0.84710693,
           0.84710693, -0.426731  ],
         [-0.11655946,  0.9862702 ,  0.9862702 , ...,  0.24753863,
          -0.8152568 , -0.8152568 ],
         [-0.8152568 , -0.10325135,  0.8570655 , ...,  0.8570655 ,
          -0.92563367, -0.92563367],
         ...,
         [ 0.93409073, -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ],
         [ 0.10815637, -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ],
         [ 0.10815637, -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ]],

        [[ 0.61819255,  0.44495702,  0.63778967, ...,  0.84710693,
           0.84710693, -0.426731  ],
         [-0.11655946,  0.9862702 ,  0.9862702 , ...,  0.24753863,
          -0.8152568 , -0.8152568 ],
         [-0.8152568 , -0.10325135,  0.8570655 , ...,  0.8570655 ,
          -0.92563367, -0.92563367],
         ...,
         [ 0.93409073, -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ],
         [ 0.10815637, -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ],
         [ 0.10815637, -0.32365862, -0.32365862, ..., -0.32365862,
           0.10815637,  0.9751344 ]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 32, 32]), 'from': [9], 'to': [11]}

generate models:151

analyse output arrays in iter:173

pre layer res:
17:add
{'name': 'add', 'output': array([[[[          inf,           inf,           inf, ...,
                    inf,           inf, 4.6071865e+28],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf, 2.5154387e+30],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf, 1.3733831e+32],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]],

        ...,

        [[2.8081000e+04, 2.8081000e+04, 2.0931000e+04, ...,
          2.2817000e+04, 2.0736000e+04, 1.8266000e+04],
         [2.8082000e+04, 2.8082000e+04, 2.1332000e+04, ...,
          2.2830000e+04, 2.2686000e+04, 2.2686000e+04],
         [2.7951000e+04, 2.7951000e+04, 2.2296000e+04, ...,
          2.2829000e+04, 2.2686000e+04, 2.2686000e+04],
         ...,
         [1.2156000e+04, 1.2221000e+04, 1.2221000e+04, ...,
          1.5471000e+04, 1.8461000e+04, 1.8461000e+04],
         [1.4756000e+04, 1.4756000e+04, 1.4756000e+04, ...,
          1.5991000e+04, 1.6251000e+04, 1.6251000e+04],
         [1.4756000e+04, 1.4756000e+04, 1.4756000e+04, ...,
          1.5991000e+04, 1.5991000e+04, 1.4951000e+04]],

        [[2.8081000e+04, 2.8081000e+04, 2.0931000e+04, ...,
          2.2817000e+04, 2.0736000e+04, 1.8266000e+04],
         [2.8082000e+04, 2.8082000e+04, 2.1332000e+04, ...,
          2.2830000e+04, 2.2686000e+04, 2.2686000e+04],
         [2.7951000e+04, 2.7951000e+04, 2.2296000e+04, ...,
          2.2829000e+04, 2.2686000e+04, 2.2686000e+04],
         ...,
         [1.2156000e+04, 1.2221000e+04, 1.2221000e+04, ...,
          1.5471000e+04, 1.8461000e+04, 1.8461000e+04],
         [1.4756000e+04, 1.4756000e+04, 1.4756000e+04, ...,
          1.5991000e+04, 1.6251000e+04, 1.6251000e+04],
         [1.4756000e+04, 1.4756000e+04, 1.4756000e+04, ...,
          1.5991000e+04, 1.5991000e+04, 1.4951000e+04]],

        [[2.8081000e+04, 2.8081000e+04, 2.0931000e+04, ...,
          2.2817000e+04, 2.0736000e+04, 1.8266000e+04],
         [2.8082000e+04, 2.8082000e+04, 2.1332000e+04, ...,
          2.2830000e+04, 2.2686000e+04, 2.2686000e+04],
         [2.7951000e+04, 2.7951000e+04, 2.2296000e+04, ...,
          2.2829000e+04, 2.2686000e+04, 2.2686000e+04],
         ...,
         [1.2156000e+04, 1.2221000e+04, 1.2221000e+04, ...,
          1.5471000e+04, 1.8461000e+04, 1.8461000e+04],
         [1.4756000e+04, 1.4756000e+04, 1.4756000e+04, ...,
          1.5991000e+04, 1.6251000e+04, 1.6251000e+04],
         [1.4756000e+04, 1.4756000e+04, 1.4756000e+04, ...,
          1.5991000e+04, 1.5991000e+04, 1.4951000e+04]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 32, 32]), 'from': [9, 25], 'to': [4]}
tf node:
{'name': 'cos', 'output': array([[[[        nan,         nan,         nan, ...,         nan,
                  nan, -0.97464347],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan, -0.4526635 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,  0.99391454],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        ...,

        [[ 0.1256015 ,  0.1256015 , -0.13849881, ..., -0.92587817,
           0.08221711,  0.7106941 ],
         [-0.7669444 , -0.7669444 ,  0.83322465, ..., -0.9989336 ,
          -0.847548  , -0.847548  ],
         [-0.96887255, -0.96887255, -0.9931706 , ..., -0.5785768 ,
          -0.847548  , -0.847548  ],
         ...,
         [-0.3827518 ,  0.9791469 ,  0.9791469 , ..., -0.22503348,
           0.5389826 ,  0.5389826 ],
         [-0.9981587 , -0.9981587 , -0.9981587 , ...,  0.95726806,
          -0.89658594, -0.89658594],
         [-0.9981587 , -0.9981587 , -0.9981587 , ...,  0.95726806,
           0.95726806, -0.9871377 ]],

        [[ 0.1256015 ,  0.1256015 , -0.13849881, ..., -0.92587817,
           0.08221711,  0.7106941 ],
         [-0.7669444 , -0.7669444 ,  0.83322465, ..., -0.9989336 ,
          -0.847548  , -0.847548  ],
         [-0.96887255, -0.96887255, -0.9931706 , ..., -0.5785768 ,
          -0.847548  , -0.847548  ],
         ...,
         [-0.3827518 ,  0.9791469 ,  0.9791469 , ..., -0.22503348,
           0.5389826 ,  0.5389826 ],
         [-0.9981587 , -0.9981587 , -0.9981587 , ...,  0.95726806,
          -0.89658594, -0.89658594],
         [-0.9981587 , -0.9981587 , -0.9981587 , ...,  0.95726806,
           0.95726806, -0.9871377 ]],

        [[ 0.1256015 ,  0.1256015 , -0.13849881, ..., -0.92587817,
           0.08221711,  0.7106941 ],
         [-0.7669444 , -0.7669444 ,  0.83322465, ..., -0.9989336 ,
          -0.847548  , -0.847548  ],
         [-0.96887255, -0.96887255, -0.9931706 , ..., -0.5785768 ,
          -0.847548  , -0.847548  ],
         ...,
         [-0.3827518 ,  0.9791469 ,  0.9791469 , ..., -0.22503348,
           0.5389826 ,  0.5389826 ],
         [-0.9981587 , -0.9981587 , -0.9981587 , ...,  0.95726806,
          -0.89658594, -0.89658594],
         [-0.9981587 , -0.9981587 , -0.9981587 , ...,  0.95726806,
           0.95726806, -0.9871377 ]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 32, 32]), 'from': [17], 'to': [10]}
ms node:
{'name': 'cos', 'output': array([[[[        nan,         nan,         nan, ...,         nan,
                  nan, -0.41269454],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,  0.62524015],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan, -0.3081279 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        ...,

        [[ 0.1256015 ,  0.1256015 , -0.13849881, ..., -0.92587817,
           0.08221711,  0.7106941 ],
         [-0.7669444 , -0.7669444 ,  0.83322465, ..., -0.9989336 ,
          -0.84754795, -0.84754795],
         [-0.96887255, -0.96887255, -0.9931706 , ..., -0.5785768 ,
          -0.84754795, -0.84754795],
         ...,
         [-0.3827518 ,  0.9791469 ,  0.9791469 , ..., -0.22503348,
           0.5389826 ,  0.5389826 ],
         [-0.9981587 , -0.9981587 , -0.9981587 , ...,  0.95726806,
          -0.8965859 , -0.8965859 ],
         [-0.9981587 , -0.9981587 , -0.9981587 , ...,  0.95726806,
           0.95726806, -0.9871377 ]],

        [[ 0.1256015 ,  0.1256015 , -0.13849881, ..., -0.92587817,
           0.08221711,  0.7106941 ],
         [-0.7669444 , -0.7669444 ,  0.83322465, ..., -0.9989336 ,
          -0.84754795, -0.84754795],
         [-0.96887255, -0.96887255, -0.9931706 , ..., -0.5785768 ,
          -0.84754795, -0.84754795],
         ...,
         [-0.3827518 ,  0.9791469 ,  0.9791469 , ..., -0.22503348,
           0.5389826 ,  0.5389826 ],
         [-0.9981587 , -0.9981587 , -0.9981587 , ...,  0.95726806,
          -0.8965859 , -0.8965859 ],
         [-0.9981587 , -0.9981587 , -0.9981587 , ...,  0.95726806,
           0.95726806, -0.9871377 ]],

        [[ 0.1256015 ,  0.1256015 , -0.13849881, ..., -0.92587817,
           0.08221711,  0.7106941 ],
         [-0.7669444 , -0.7669444 ,  0.83322465, ..., -0.9989336 ,
          -0.84754795, -0.84754795],
         [-0.96887255, -0.96887255, -0.9931706 , ..., -0.5785768 ,
          -0.84754795, -0.84754795],
         ...,
         [-0.3827518 ,  0.9791469 ,  0.9791469 , ..., -0.22503348,
           0.5389826 ,  0.5389826 ],
         [-0.9981587 , -0.9981587 , -0.9981587 , ...,  0.95726806,
          -0.8965859 , -0.8965859 ],
         [-0.9981587 , -0.9981587 , -0.9981587 , ...,  0.95726806,
           0.95726806, -0.9871377 ]]]], dtype=float32), 'output_shape': (1, 256, 32, 32), 'from': [17], 'to': [10]}
torch node:
{'name': 'cos', 'output': array([[[[        nan,         nan,         nan, ...,         nan,
                  nan, -0.97464347],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan, -0.4526635 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan, -0.48983908],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        ...,

        [[ 0.1256015 ,  0.1256015 , -0.13849881, ..., -0.92587817,
           0.08221711,  0.7106941 ],
         [-0.7669444 , -0.7669444 ,  0.83322465, ..., -0.9989336 ,
          -0.84754795, -0.84754795],
         [-0.96887255, -0.96887255, -0.9931706 , ..., -0.5785768 ,
          -0.84754795, -0.84754795],
         ...,
         [-0.3827518 ,  0.9791469 ,  0.9791469 , ..., -0.22503348,
           0.5389826 ,  0.5389826 ],
         [-0.9981587 , -0.9981587 , -0.9981587 , ...,  0.95726806,
          -0.8965859 , -0.8965859 ],
         [-0.9981587 , -0.9981587 , -0.9981587 , ...,  0.95726806,
           0.95726806, -0.9871377 ]],

        [[ 0.1256015 ,  0.1256015 , -0.13849881, ..., -0.92587817,
           0.08221711,  0.7106941 ],
         [-0.7669444 , -0.7669444 ,  0.83322465, ..., -0.9989336 ,
          -0.84754795, -0.84754795],
         [-0.96887255, -0.96887255, -0.9931706 , ..., -0.5785768 ,
          -0.84754795, -0.84754795],
         ...,
         [-0.3827518 ,  0.9791469 ,  0.9791469 , ..., -0.22503348,
           0.5389826 ,  0.5389826 ],
         [-0.9981587 , -0.9981587 , -0.9981587 , ...,  0.95726806,
          -0.8965859 , -0.8965859 ],
         [-0.9981587 , -0.9981587 , -0.9981587 , ...,  0.95726806,
           0.95726806, -0.9871377 ]],

        [[ 0.1256015 ,  0.1256015 , -0.13849881, ..., -0.92587817,
           0.08221711,  0.7106941 ],
         [-0.7669444 , -0.7669444 ,  0.83322465, ..., -0.9989336 ,
          -0.84754795, -0.84754795],
         [-0.96887255, -0.96887255, -0.9931706 , ..., -0.5785768 ,
          -0.84754795, -0.84754795],
         ...,
         [-0.3827518 ,  0.9791469 ,  0.9791469 , ..., -0.22503348,
           0.5389826 ,  0.5389826 ],
         [-0.9981587 , -0.9981587 , -0.9981587 , ...,  0.95726806,
          -0.8965859 , -0.8965859 ],
         [-0.9981587 , -0.9981587 , -0.9981587 , ...,  0.95726806,
           0.95726806, -0.9871377 ]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 32, 32]), 'from': [17], 'to': [10]}

generate models:166

analyse output arrays in iter:181

pre layer res:
9:add
{'name': 'add', 'output': array([[[[3066721.5, 3137633.5, 3184481.5, ..., 2040418. , 2070626. ,
          2070626. ],
         [3066731. , 3137643. , 3184491. , ..., 2040424.5, 2070632.5,
          2070632.5],
         [3066735. , 3137647. , 3184495. , ..., 2040430.5, 2070638.5,
          2070638.5],
         ...,
         [3066619.8, 3137532. , 3184380. , ..., 2040314. , 2070522. ,
          2070522. ],
         [3066623.8, 3137535.8, 3184383.8, ..., 2040319.9, 2070527.9,
          2070527.9],
         [3066623.8, 3137535.8, 3184383.8, ..., 2040319.9, 2070527.9,
          2070527.9]],

        [[3066721.5, 3137633.5, 3184481.5, ..., 2040418. , 2070626. ,
          2070626. ],
         [3066731. , 3137643. , 3184491. , ..., 2040424.5, 2070632.5,
          2070632.5],
         [3066735. , 3137647. , 3184495. , ..., 2040430.5, 2070638.5,
          2070638.5],
         ...,
         [3066619.8, 3137532. , 3184380. , ..., 2040314. , 2070522. ,
          2070522. ],
         [3066623.8, 3137535.8, 3184383.8, ..., 2040319.9, 2070527.9,
          2070527.9],
         [3066623.8, 3137535.8, 3184383.8, ..., 2040319.9, 2070527.9,
          2070527.9]],

        [[3066721.5, 3137633.5, 3184481.5, ..., 2040418. , 2070626. ,
          2070626. ],
         [3066731. , 3137643. , 3184491. , ..., 2040424.5, 2070632.5,
          2070632.5],
         [3066735. , 3137647. , 3184495. , ..., 2040430.5, 2070638.5,
          2070638.5],
         ...,
         [3066619.8, 3137532. , 3184380. , ..., 2040314. , 2070522. ,
          2070522. ],
         [3066623.8, 3137535.8, 3184383.8, ..., 2040319.9, 2070527.9,
          2070527.9],
         [3066623.8, 3137535.8, 3184383.8, ..., 2040319.9, 2070527.9,
          2070527.9]],

        ...,

        [[3066721.5, 3137633.5, 3184481.5, ..., 2040418. , 2070626. ,
          2070626. ],
         [3066731. , 3137643. , 3184491. , ..., 2040424.5, 2070632.5,
          2070632.5],
         [3066735. , 3137647. , 3184495. , ..., 2040430.5, 2070638.5,
          2070638.5],
         ...,
         [3066619.8, 3137532. , 3184380. , ..., 2040314. , 2070522. ,
          2070522. ],
         [3066623.8, 3137535.8, 3184383.8, ..., 2040319.9, 2070527.9,
          2070527.9],
         [3066623.8, 3137535.8, 3184383.8, ..., 2040319.9, 2070527.9,
          2070527.9]],

        [[3066721.5, 3137633.5, 3184481.5, ..., 2040418. , 2070626. ,
          2070626. ],
         [3066731. , 3137643. , 3184491. , ..., 2040424.5, 2070632.5,
          2070632.5],
         [3066735. , 3137647. , 3184495. , ..., 2040430.5, 2070638.5,
          2070638.5],
         ...,
         [3066619.8, 3137532. , 3184380. , ..., 2040314. , 2070522. ,
          2070522. ],
         [3066623.8, 3137535.8, 3184383.8, ..., 2040319.9, 2070527.9,
          2070527.9],
         [3066623.8, 3137535.8, 3184383.8, ..., 2040319.9, 2070527.9,
          2070527.9]],

        [[3066721.5, 3137633.5, 3184481.5, ..., 2040418. , 2070626. ,
          2070626. ],
         [3066731. , 3137643. , 3184491. , ..., 2040424.5, 2070632.5,
          2070632.5],
         [3066735. , 3137647. , 3184495. , ..., 2040430.5, 2070638.5,
          2070638.5],
         ...,
         [3066619.8, 3137532. , 3184380. , ..., 2040314. , 2070522. ,
          2070522. ],
         [3066623.8, 3137535.8, 3184383.8, ..., 2040319.9, 2070527.9,
          2070527.9],
         [3066623.8, 3137535.8, 3184383.8, ..., 2040319.9, 2070527.9,
          2070527.9]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [6, 6], 'to': [17]}
tf node:
{'name': 'cos', 'output': array([[[[ 0.753472  ,  0.733835  ,  0.9844649 , ..., -0.76780826,
          -0.6527605 , -0.6527605 ],
         [-0.8007516 , -0.782812  , -0.9948761 , ..., -0.61200905,
          -0.8004451 , -0.8004451 ],
         [ 0.97672826,  0.9826067 ,  0.7268083 , ..., -0.80860883,
          -0.60108024, -0.60108024],
         ...,
         [-0.35761076, -0.14457656,  0.41256186, ...,  0.93307   ,
           0.37442836,  0.37442836],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9991903 ,
          -0.02440267, -0.02440267],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9991903 ,
          -0.02440267, -0.02440267]],

        [[ 0.753472  ,  0.733835  ,  0.9844649 , ..., -0.76780826,
          -0.6527605 , -0.6527605 ],
         [-0.8007516 , -0.782812  , -0.9948761 , ..., -0.61200905,
          -0.8004451 , -0.8004451 ],
         [ 0.97672826,  0.9826067 ,  0.7268083 , ..., -0.80860883,
          -0.60108024, -0.60108024],
         ...,
         [-0.35761076, -0.14457656,  0.41256186, ...,  0.93307   ,
           0.37442836,  0.37442836],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9991903 ,
          -0.02440267, -0.02440267],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9991903 ,
          -0.02440267, -0.02440267]],

        [[ 0.753472  ,  0.733835  ,  0.9844649 , ..., -0.76780826,
          -0.6527605 , -0.6527605 ],
         [-0.8007516 , -0.782812  , -0.9948761 , ..., -0.61200905,
          -0.8004451 , -0.8004451 ],
         [ 0.97672826,  0.9826067 ,  0.7268083 , ..., -0.80860883,
          -0.60108024, -0.60108024],
         ...,
         [-0.35761076, -0.14457656,  0.41256186, ...,  0.93307   ,
           0.37442836,  0.37442836],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9991903 ,
          -0.02440267, -0.02440267],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9991903 ,
          -0.02440267, -0.02440267]],

        ...,

        [[ 0.753472  ,  0.733835  ,  0.9844649 , ..., -0.76780826,
          -0.6527605 , -0.6527605 ],
         [-0.8007516 , -0.782812  , -0.9948761 , ..., -0.61200905,
          -0.8004451 , -0.8004451 ],
         [ 0.97672826,  0.9826067 ,  0.7268083 , ..., -0.80860883,
          -0.60108024, -0.60108024],
         ...,
         [-0.35761076, -0.14457656,  0.41256186, ...,  0.93307   ,
           0.37442836,  0.37442836],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9991903 ,
          -0.02440267, -0.02440267],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9991903 ,
          -0.02440267, -0.02440267]],

        [[ 0.753472  ,  0.733835  ,  0.9844649 , ..., -0.76780826,
          -0.6527605 , -0.6527605 ],
         [-0.8007516 , -0.782812  , -0.9948761 , ..., -0.61200905,
          -0.8004451 , -0.8004451 ],
         [ 0.97672826,  0.9826067 ,  0.7268083 , ..., -0.80860883,
          -0.60108024, -0.60108024],
         ...,
         [-0.35761076, -0.14457656,  0.41256186, ...,  0.93307   ,
           0.37442836,  0.37442836],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9991903 ,
          -0.02440267, -0.02440267],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9991903 ,
          -0.02440267, -0.02440267]],

        [[ 0.753472  ,  0.733835  ,  0.9844649 , ..., -0.76780826,
          -0.6527605 , -0.6527605 ],
         [-0.8007516 , -0.782812  , -0.9948761 , ..., -0.61200905,
          -0.8004451 , -0.8004451 ],
         [ 0.97672826,  0.9826067 ,  0.7268083 , ..., -0.80860883,
          -0.60108024, -0.60108024],
         ...,
         [-0.35761076, -0.14457656,  0.41256186, ...,  0.93307   ,
           0.37442836,  0.37442836],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9991903 ,
          -0.02440267, -0.02440267],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9991903 ,
          -0.02440267, -0.02440267]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [9], 'to': [7]}
ms node:
{'name': 'cos', 'output': array([[[[ 0.7534719 ,  0.7338349 ,  0.9844649 , ..., -0.7678082 ,
          -0.6527605 , -0.6527605 ],
         [-0.80075157, -0.782812  , -0.9948761 , ..., -0.612009  ,
          -0.800445  , -0.800445  ],
         [ 0.97672826,  0.9826067 ,  0.7268083 , ..., -0.80860883,
          -0.6010802 , -0.6010802 ],
         ...,
         [-0.35761076, -0.14457656,  0.41256186, ...,  0.93307   ,
           0.37442836,  0.37442836],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9991903 ,
          -0.02440268, -0.02440268],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9991903 ,
          -0.02440268, -0.02440268]],

        [[ 0.7534719 ,  0.7338349 ,  0.9844649 , ..., -0.7678082 ,
          -0.6527605 , -0.6527605 ],
         [-0.80075157, -0.782812  , -0.9948761 , ..., -0.612009  ,
          -0.800445  , -0.800445  ],
         [ 0.97672826,  0.9826067 ,  0.7268083 , ..., -0.80860883,
          -0.6010802 , -0.6010802 ],
         ...,
         [-0.35761076, -0.14457656,  0.41256186, ...,  0.93307   ,
           0.37442836,  0.37442836],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9991903 ,
          -0.02440268, -0.02440268],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9991903 ,
          -0.02440268, -0.02440268]],

        [[ 0.7534719 ,  0.7338349 ,  0.9844649 , ..., -0.7678082 ,
          -0.6527605 , -0.6527605 ],
         [-0.80075157, -0.782812  , -0.9948761 , ..., -0.612009  ,
          -0.800445  , -0.800445  ],
         [ 0.97672826,  0.9826067 ,  0.7268083 , ..., -0.80860883,
          -0.6010802 , -0.6010802 ],
         ...,
         [-0.35761076, -0.14457656,  0.41256186, ...,  0.93307   ,
           0.37442836,  0.37442836],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9991903 ,
          -0.02440268, -0.02440268],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9991903 ,
          -0.02440268, -0.02440268]],

        ...,

        [[ 0.7534719 ,  0.7338349 ,  0.9844649 , ..., -0.7678082 ,
          -0.6527605 , -0.6527605 ],
         [-0.80075157, -0.782812  , -0.9948761 , ..., -0.612009  ,
          -0.800445  , -0.800445  ],
         [ 0.97672826,  0.9826067 ,  0.7268083 , ..., -0.80860883,
          -0.6010802 , -0.6010802 ],
         ...,
         [-0.35761076, -0.14457656,  0.41256186, ...,  0.93307   ,
           0.37442836,  0.37442836],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9991903 ,
          -0.02440268, -0.02440268],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9991903 ,
          -0.02440268, -0.02440268]],

        [[ 0.7091316 ,  0.7295355 ,  0.24478014, ...,  0.84124774,
          -0.52725774, -0.52725774],
         [ 0.9690742 ,  0.97590435,  0.7036193 , ..., -0.15793435,
          -0.9898272 , -0.9898272 ],
         [ 0.70820767,  0.6871649 ,  0.97065246, ..., -0.6440715 ,
           0.754668  ,  0.754668  ],
         ...,
         [-0.9989916 , -0.99724185, -0.8794642 , ..., -0.62266546,
           0.77252775,  0.77252775],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9863782 ,
          -0.14884989, -0.14884989],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9863782 ,
          -0.14884989, -0.14884989]],

        [[ 0.7091316 ,  0.7295355 ,  0.24478014, ...,  0.84124774,
          -0.52725774, -0.52725774],
         [ 0.9690742 ,  0.97590435,  0.7036193 , ..., -0.15793435,
          -0.9898272 , -0.9898272 ],
         [ 0.70820767,  0.6871649 ,  0.97065246, ..., -0.6440715 ,
           0.754668  ,  0.754668  ],
         ...,
         [-0.9989916 , -0.99724185, -0.8794642 , ..., -0.62266546,
           0.77252775,  0.77252775],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9863782 ,
          -0.14884989, -0.14884989],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9863782 ,
          -0.14884989, -0.14884989]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [9], 'to': [7]}
torch node:
{'name': 'cos', 'output': array([[[[ 0.7534719 ,  0.7338349 ,  0.9844649 , ..., -0.76780826,
          -0.6527605 , -0.6527605 ],
         [-0.80075157, -0.782812  , -0.9948761 , ..., -0.612009  ,
          -0.800445  , -0.800445  ],
         [ 0.97672826,  0.9826067 ,  0.7268083 , ..., -0.80860883,
          -0.6010802 , -0.6010802 ],
         ...,
         [-0.35761076, -0.14457656,  0.41256186, ...,  0.93307   ,
           0.37442836,  0.37442836],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9991903 ,
          -0.02440268, -0.02440268],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9991903 ,
          -0.02440268, -0.02440268]],

        [[ 0.7534719 ,  0.7338349 ,  0.9844649 , ..., -0.76780826,
          -0.6527605 , -0.6527605 ],
         [-0.80075157, -0.782812  , -0.9948761 , ..., -0.612009  ,
          -0.800445  , -0.800445  ],
         [ 0.97672826,  0.9826067 ,  0.7268083 , ..., -0.80860883,
          -0.6010802 , -0.6010802 ],
         ...,
         [-0.35761076, -0.14457656,  0.41256186, ...,  0.93307   ,
           0.37442836,  0.37442836],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9991903 ,
          -0.02440268, -0.02440268],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9991903 ,
          -0.02440268, -0.02440268]],

        [[ 0.7534719 ,  0.7338349 ,  0.9844649 , ..., -0.76780826,
          -0.6527605 , -0.6527605 ],
         [-0.80075157, -0.782812  , -0.9948761 , ..., -0.612009  ,
          -0.800445  , -0.800445  ],
         [ 0.97672826,  0.9826067 ,  0.7268083 , ..., -0.80860883,
          -0.6010802 , -0.6010802 ],
         ...,
         [-0.35761076, -0.14457656,  0.41256186, ...,  0.93307   ,
           0.37442836,  0.37442836],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9991903 ,
          -0.02440268, -0.02440268],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9991903 ,
          -0.02440268, -0.02440268]],

        ...,

        [[ 0.7534719 ,  0.7338349 ,  0.9844649 , ..., -0.76780826,
          -0.6527605 , -0.6527605 ],
         [-0.80075157, -0.782812  , -0.9948761 , ..., -0.612009  ,
          -0.800445  , -0.800445  ],
         [ 0.97672826,  0.9826067 ,  0.7268083 , ..., -0.80860883,
          -0.6010802 , -0.6010802 ],
         ...,
         [-0.35761076, -0.14457656,  0.41256186, ...,  0.93307   ,
           0.37442836,  0.37442836],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9991903 ,
          -0.02440268, -0.02440268],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9991903 ,
          -0.02440268, -0.02440268]],

        [[ 0.7534719 ,  0.7338349 ,  0.9844649 , ..., -0.76780826,
          -0.6527605 , -0.6527605 ],
         [-0.80075157, -0.782812  , -0.9948761 , ..., -0.612009  ,
          -0.800445  , -0.800445  ],
         [ 0.97672826,  0.9826067 ,  0.7268083 , ..., -0.80860883,
          -0.6010802 , -0.6010802 ],
         ...,
         [-0.35761076, -0.14457656,  0.41256186, ...,  0.93307   ,
           0.37442836,  0.37442836],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9991903 ,
          -0.02440268, -0.02440268],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9991903 ,
          -0.02440268, -0.02440268]],

        [[ 0.7534719 ,  0.7338349 ,  0.9844649 , ..., -0.76780826,
          -0.6527605 , -0.6527605 ],
         [-0.80075157, -0.782812  , -0.9948761 , ..., -0.612009  ,
          -0.800445  , -0.800445  ],
         [ 0.97672826,  0.9826067 ,  0.7268083 , ..., -0.80860883,
          -0.6010802 , -0.6010802 ],
         ...,
         [-0.35761076, -0.14457656,  0.41256186, ...,  0.93307   ,
           0.37442836,  0.37442836],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9991903 ,
          -0.02440268, -0.02440268],
         [-0.4730057 , -0.44692263, -0.8591836 , ...,  0.9991903 ,
          -0.02440268, -0.02440268]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [9], 'to': [7]}

generate models:172

analyse output arrays in iter:189

pre layer res:
18:relu
{'name': 'relu', 'output': array([[[[1.4073586e+21, 1.5194292e+21, 1.5304498e+21, ...,
          1.2574129e+21, 1.3130476e+21, 1.3190979e+21],
         [1.5194292e+21, 1.7732538e+21, 1.7841336e+21, ...,
          1.1887004e+21, 1.2456267e+21, 1.2218179e+21],
         [1.5304498e+21, 1.7841336e+21, 1.7842253e+21, ...,
          1.1749682e+21, 1.2901885e+21, 1.2488061e+21],
         ...,
         [1.2574129e+21, 1.1887004e+21, 1.1749682e+21, ...,
          1.9552060e+21, 1.8948879e+21, 1.6599964e+21],
         [1.3130476e+21, 1.2456267e+21, 1.2901885e+21, ...,
          1.8948879e+21, 1.9867008e+21, 1.7991412e+21],
         [1.3190979e+21, 1.2218179e+21, 1.2488061e+21, ...,
          1.6599964e+21, 1.7991412e+21, 1.6978298e+21]],

        [[1.4073586e+21, 1.5194292e+21, 1.5304498e+21, ...,
          1.2574129e+21, 1.3130476e+21, 1.3190979e+21],
         [1.5194292e+21, 1.7732538e+21, 1.7841336e+21, ...,
          1.1887004e+21, 1.2456267e+21, 1.2218179e+21],
         [1.5304498e+21, 1.7841336e+21, 1.7842253e+21, ...,
          1.1749682e+21, 1.2901885e+21, 1.2488061e+21],
         ...,
         [1.2574129e+21, 1.1887004e+21, 1.1749682e+21, ...,
          1.9552060e+21, 1.8948879e+21, 1.6599964e+21],
         [1.3130476e+21, 1.2456267e+21, 1.2901885e+21, ...,
          1.8948879e+21, 1.9867008e+21, 1.7991412e+21],
         [1.3190979e+21, 1.2218179e+21, 1.2488061e+21, ...,
          1.6599964e+21, 1.7991412e+21, 1.6978298e+21]],

        [[1.4073586e+21, 1.5194292e+21, 1.5304498e+21, ...,
          1.2574129e+21, 1.3130476e+21, 1.3190979e+21],
         [1.5194292e+21, 1.7732538e+21, 1.7841336e+21, ...,
          1.1887004e+21, 1.2456267e+21, 1.2218179e+21],
         [1.5304498e+21, 1.7841336e+21, 1.7842253e+21, ...,
          1.1749682e+21, 1.2901885e+21, 1.2488061e+21],
         ...,
         [1.2574129e+21, 1.1887004e+21, 1.1749682e+21, ...,
          1.9552060e+21, 1.8948879e+21, 1.6599964e+21],
         [1.3130476e+21, 1.2456267e+21, 1.2901885e+21, ...,
          1.8948879e+21, 1.9867008e+21, 1.7991412e+21],
         [1.3190979e+21, 1.2218179e+21, 1.2488061e+21, ...,
          1.6599964e+21, 1.7991412e+21, 1.6978298e+21]],

        ...,

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 32, 32]), 'from': [17], 'to': [24]}
tf node:
{'name': 'sin', 'output': array([[[[-0.85626507, -0.9825097 , -0.40683812, ..., -0.28094423,
          -0.81906813, -0.53145486],
         [-0.9825097 ,  0.6126468 ,  0.9884695 , ...,  0.85282457,
           0.6627836 , -0.616905  ],
         [-0.40683812,  0.9884695 , -0.01016199, ...,  0.8287818 ,
          -0.8930179 ,  0.4280269 ],
         ...,
         [-0.28094423,  0.85282457,  0.8287818 , ..., -0.8716927 ,
          -0.86601734,  0.95542544],
         [-0.81906813,  0.6627836 , -0.8930179 , ..., -0.86601734,
           0.99998933, -0.99753135],
         [-0.53145486, -0.616905  ,  0.4280269 , ...,  0.95542544,
          -0.99753135,  0.9605548 ]],

        [[-0.85626507, -0.9825097 , -0.40683812, ..., -0.28094423,
          -0.81906813, -0.53145486],
         [-0.9825097 ,  0.6126468 ,  0.9884695 , ...,  0.85282457,
           0.6627836 , -0.616905  ],
         [-0.40683812,  0.9884695 , -0.01016199, ...,  0.8287818 ,
          -0.8930179 ,  0.4280269 ],
         ...,
         [-0.28094423,  0.85282457,  0.8287818 , ..., -0.8716927 ,
          -0.86601734,  0.95542544],
         [-0.81906813,  0.6627836 , -0.8930179 , ..., -0.86601734,
           0.99998933, -0.99753135],
         [-0.53145486, -0.616905  ,  0.4280269 , ...,  0.95542544,
          -0.99753135,  0.9605548 ]],

        [[-0.85626507, -0.9825097 , -0.40683812, ..., -0.28094423,
          -0.81906813, -0.53145486],
         [-0.9825097 ,  0.6126468 ,  0.9884695 , ...,  0.85282457,
           0.6627836 , -0.616905  ],
         [-0.40683812,  0.9884695 , -0.01016199, ...,  0.8287818 ,
          -0.8930179 ,  0.4280269 ],
         ...,
         [-0.28094423,  0.85282457,  0.8287818 , ..., -0.8716927 ,
          -0.86601734,  0.95542544],
         [-0.81906813,  0.6627836 , -0.8930179 , ..., -0.86601734,
           0.99998933, -0.99753135],
         [-0.53145486, -0.616905  ,  0.4280269 , ...,  0.95542544,
          -0.99753135,  0.9605548 ]],

        ...,

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 32, 32]), 'from': [18], 'to': [19]}
ms node:
{'name': 'sin', 'output': array([[[[ 0.60548574,  0.23988111,  0.2957113 , ..., -0.9555666 ,
          -0.1588132 , -0.99244165],
         [ 0.23988111, -0.5994023 ,  0.9857561 , ...,  0.1117847 ,
           0.80605793,  0.97571564],
         [ 0.2957113 ,  0.9857561 ,  0.4413101 , ...,  0.02213134,
           0.89736015, -0.8771853 ],
         ...,
         [-0.9555666 ,  0.1117847 ,  0.02213134, ...,  0.1669426 ,
          -0.9445711 ,  0.25574166],
         [-0.1588132 ,  0.80605793,  0.89736015, ..., -0.9445711 ,
           0.03387046, -0.8078842 ],
         [-0.99244165,  0.97571564, -0.8771853 , ...,  0.25574166,
          -0.8078842 , -0.9942713 ]],

        [[ 0.60548574,  0.23988111,  0.2957113 , ..., -0.9555666 ,
          -0.1588132 , -0.99244165],
         [ 0.23988111, -0.5994023 ,  0.9857561 , ...,  0.1117847 ,
           0.80605793,  0.97571564],
         [ 0.2957113 ,  0.9857561 ,  0.4413101 , ...,  0.02213134,
           0.89736015, -0.8771853 ],
         ...,
         [-0.9555666 ,  0.1117847 ,  0.02213134, ...,  0.1669426 ,
          -0.9445711 ,  0.25574166],
         [-0.1588132 ,  0.80605793,  0.89736015, ..., -0.9445711 ,
           0.03387046, -0.8078842 ],
         [-0.99244165,  0.97571564, -0.8771853 , ...,  0.25574166,
          -0.8078842 , -0.9942713 ]],

        [[ 0.60548574,  0.23988111,  0.2957113 , ..., -0.9555666 ,
          -0.1588132 , -0.99244165],
         [ 0.23988111, -0.5994023 ,  0.9857561 , ...,  0.1117847 ,
           0.80605793,  0.97571564],
         [ 0.2957113 ,  0.9857561 ,  0.4413101 , ...,  0.02213134,
           0.89736015, -0.8771853 ],
         ...,
         [-0.9555666 ,  0.1117847 ,  0.02213134, ...,  0.1669426 ,
          -0.9445711 ,  0.25574166],
         [-0.1588132 ,  0.80605793,  0.89736015, ..., -0.9445711 ,
           0.03387046, -0.8078842 ],
         [-0.99244165,  0.97571564, -0.8771853 , ...,  0.25574166,
          -0.8078842 , -0.9942713 ]],

        ...,

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ]]]], dtype=float32), 'output_shape': (1, 256, 32, 32), 'from': [18], 'to': [19]}
torch node:
{'name': 'sin', 'output': array([[[[-0.85626507, -0.9825097 , -0.40683812, ..., -0.28094423,
          -0.81906813, -0.5314549 ],
         [-0.9825097 ,  0.6126468 ,  0.9884695 , ...,  0.8528245 ,
           0.6627836 , -0.616905  ],
         [-0.40683812,  0.9884695 , -0.01016199, ...,  0.8287817 ,
          -0.8930178 ,  0.4280269 ],
         ...,
         [-0.28094423,  0.8528245 ,  0.8287817 , ..., -0.8716927 ,
          -0.86601734,  0.95542544],
         [-0.81906813,  0.6627836 , -0.8930178 , ..., -0.86601734,
           0.99998933, -0.99753135],
         [-0.5314549 , -0.616905  ,  0.4280269 , ...,  0.95542544,
          -0.99753135,  0.9605548 ]],

        [[-0.85626507, -0.9825097 , -0.40683812, ..., -0.28094423,
          -0.81906813, -0.5314549 ],
         [-0.9825097 ,  0.6126468 ,  0.9884695 , ...,  0.8528245 ,
           0.6627836 , -0.616905  ],
         [-0.40683812,  0.9884695 , -0.01016199, ...,  0.8287817 ,
          -0.8930178 ,  0.4280269 ],
         ...,
         [-0.28094423,  0.8528245 ,  0.8287817 , ..., -0.8716927 ,
          -0.86601734,  0.95542544],
         [-0.81906813,  0.6627836 , -0.8930178 , ..., -0.86601734,
           0.99998933, -0.99753135],
         [-0.5314549 , -0.616905  ,  0.4280269 , ...,  0.95542544,
          -0.99753135,  0.9605548 ]],

        [[-0.85626507, -0.9825097 , -0.40683812, ..., -0.28094423,
          -0.81906813, -0.5314549 ],
         [-0.9825097 ,  0.6126468 ,  0.9884695 , ...,  0.8528245 ,
           0.6627836 , -0.616905  ],
         [-0.40683812,  0.9884695 , -0.01016199, ...,  0.8287817 ,
          -0.8930178 ,  0.4280269 ],
         ...,
         [-0.28094423,  0.8528245 ,  0.8287817 , ..., -0.8716927 ,
          -0.86601734,  0.95542544],
         [-0.81906813,  0.6627836 , -0.8930178 , ..., -0.86601734,
           0.99998933, -0.99753135],
         [-0.5314549 , -0.616905  ,  0.4280269 , ...,  0.95542544,
          -0.99753135,  0.9605548 ]],

        ...,

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 32, 32]), 'from': [18], 'to': [19]}

generate models:180

analyse output arrays in iter:191

pre layer res:
13:add
{'name': 'add', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 32, 32]), 'from': [6, 10], 'to': [8]}
tf node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 32, 32]), 'from': [13], 'to': [7]}
ms node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 256, 32, 32), 'from': [13], 'to': [7]}
torch node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 32, 32]), 'from': [13], 'to': [7]}

generate models:181

analyse output arrays in iter:206

pre layer res:
28:log
{'name': 'log', 'output': array([[[[13.733171 , 13.760184 , 13.787012 , ..., 13.810827 ,
          13.84496  , 13.826268 ],
         [13.713664 , 13.740925 , 13.769475 , ..., 13.790562 ,
          13.827028 , 13.826395 ],
         [13.729273 , 13.75258  , 13.788328 , ..., 13.760725 ,
          13.787144 , 13.779742 ],
         ...,
         [13.778681 , 13.806575 , 13.821572 , ..., 13.747934 ,
          13.750942 , 13.760995 ],
         [13.747934 , 13.782127 , 13.804894 , ..., 13.823732 ,
          13.84297  , 13.830817 ],
         [13.790956 , 13.816215 , 13.8327055, ..., 13.779742 ,
          13.803341 , 13.800746 ]],

        [[13.737472 , 13.774155 , 13.799446 , ..., 13.841724 ,
          13.8735075, 13.843219 ],
         [13.740511 , 13.770279 , 13.792528 , ..., 13.828546 ,
          13.863188 , 13.856453 ],
         [13.76356  , 13.789248 , 13.822462 , ..., 13.799836 ,
          13.824748 , 13.8112135],
         ...,
         [13.785431 , 13.81314  , 13.827534 , ..., 13.777884 ,
          13.779742 , 13.78938  ],
         [13.758018 , 13.791873 , 13.809412 , ..., 13.853006 ,
          13.869271 , 13.857312 ],
         [13.788723 , 13.814037 , 13.828546 , ..., 13.813524 ,
          13.8295555, 13.826268 ]],

        [[13.73345  , 13.769877 , 13.793838 , ..., 13.871452 ,
          13.895962 , 13.86453  ],
         [13.734561 , 13.764099 , 13.785298 , ..., 13.85202  ,
          13.879409 , 13.870483 ],
         [13.759507 , 13.784903 , 13.816087 , ..., 13.816215 ,
          13.838852 , 13.820682 ],
         ...,
         [13.772018 , 13.806188 , 13.822208 , ..., 13.772419 ,
          13.764235 , 13.774822 ],
         [13.744229 , 13.784771 , 13.803988 , ..., 13.8479395,
          13.85903  , 13.847692 ],
         [13.77961  , 13.807092 , 13.823225 , ..., 13.838977 ,
          13.848806 , 13.84496  ]],

        ...,

        [[      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 32, 32]), 'from': [18], 'to': [4]}
tf node:
{'name': 'cos', 'output': array([[[[0.3930953 , 0.36811668, 0.34304327, ..., 0.32057807,
          0.28806612, 0.30591443],
         [0.41095638, 0.38595435, 0.35946262, ..., 0.33970693,
          0.30519068, 0.30579367],
         [0.39667708, 0.37517658, 0.34180674, ..., 0.36761388,
          0.34291965, 0.34986284],
         ...,
         [0.35085702, 0.32460314, 0.3103818 , ..., 0.37947854,
          0.37669393, 0.36736286],
         [0.37947854, 0.34762746, 0.32619208, ..., 0.30832767,
          0.2899715 , 0.30158034],
         [0.33933645, 0.31547046, 0.29977944, ..., 0.34986284,
          0.32766023, 0.33011082]],

        [[0.38913774, 0.3550918 , 0.33133754, ..., 0.29116327,
          0.2606153 , 0.28973326],
         [0.38633615, 0.3587123 , 0.33785674, ..., 0.30374545,
          0.27056432, 0.27704176],
         [0.36497566, 0.34094176, 0.30953583, ..., 0.33096948,
          0.30736133, 0.3202122 ],
         ...,
         [0.34452808, 0.3183866 , 0.30470932, ..., 0.3516035 ,
          0.34986284, 0.34081802],
         [0.37013042, 0.33847332, 0.3219183 , ..., 0.2803518 ,
          0.26470277, 0.27621606],
         [0.3414357 , 0.31753576, 0.30374545, ..., 0.31802225,
          0.30278307, 0.30591443]],

        [[0.39283925, 0.35908705, 0.33662406, ..., 0.26259887,
          0.2388731 , 0.2692723 ],
         [0.39181727, 0.36447394, 0.34465253, ..., 0.28129822,
          0.25491336, 0.26353368],
         [0.36874616, 0.34502402, 0.31559172, ..., 0.31547046,
          0.29391006, 0.31122842],
         ...,
         [0.35708803, 0.32496935, 0.30977705, ..., 0.35671386,
          0.36434785, 0.35446766],
         [0.3829038 , 0.34514755, 0.32704836, ..., 0.28521186,
          0.2745649 , 0.2854495 ],
         [0.34998703, 0.3241142 , 0.3088103 , ..., 0.29379064,
          0.28438085, 0.28806612]],

        ...,

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 32, 32]), 'from': [28], 'to': [11]}
ms node:
{'name': 'cos', 'output': array([[[[0.39309618, 0.36811846, 0.34304327, ..., 0.32057804,
          0.28806794, 0.30591443],
         [0.41095814, 0.38595524, 0.3594635 , ..., 0.33970693,
          0.3051916 , 0.30579364],
         [0.39667884, 0.37517834, 0.34180674, ..., 0.36761564,
          0.34291962, 0.34986374],
         ...,
         [0.3508588 , 0.32460403, 0.3103827 , ..., 0.3794803 ,
          0.3766957 , 0.36736375],
         [0.3794803 , 0.34762746, 0.32619205, ..., 0.30832767,
          0.28997332, 0.30158123],
         [0.33933645, 0.31547135, 0.29978126, ..., 0.34986374,
          0.32766113, 0.33011082]],

        [[0.3891395 , 0.3550927 , 0.33133754, ..., 0.29116508,
          0.2606171 , 0.28973508],
         [0.386337  , 0.35871407, 0.33785674, ..., 0.30374634,
          0.27056614, 0.2770436 ],
         [0.36497742, 0.34094173, 0.30953583, ..., 0.33096948,
          0.30736226, 0.32021308],
         ...,
         [0.34452897, 0.3183875 , 0.30470932, ..., 0.35160527,
          0.34986374, 0.34081802],
         [0.37013218, 0.3384733 , 0.32191828, ..., 0.28035364,
          0.26470459, 0.27621788],
         [0.34143567, 0.31753576, 0.30374634, ..., 0.31802225,
          0.30278304, 0.30591443]],

        [[0.39284098, 0.3590888 , 0.33662495, ..., 0.26260072,
          0.23887031, 0.26927412],
         [0.39181903, 0.36447483, 0.3446525 , ..., 0.28130004,
          0.2549152 , 0.2635355 ],
         [0.36874706, 0.34502402, 0.31559262, ..., 0.31547135,
          0.29391187, 0.31122932],
         ...,
         [0.3570898 , 0.32497025, 0.30977795, ..., 0.35671476,
          0.3643496 , 0.35446945],
         [0.38290468, 0.34514844, 0.32704836, ..., 0.28521368,
          0.2745667 , 0.28545132],
         [0.34998792, 0.3241151 , 0.3088112 , ..., 0.29379246,
          0.2843827 , 0.28806794]],

        ...,

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]]]], dtype=float32), 'output_shape': (1, 256, 32, 32), 'from': [28], 'to': [11]}
torch node:
{'name': 'cos', 'output': array([[[[0.3930953 , 0.36811668, 0.34304327, ..., 0.32057807,
          0.28806612, 0.30591443],
         [0.41095638, 0.38595435, 0.35946262, ..., 0.33970693,
          0.30519068, 0.30579367],
         [0.39667708, 0.37517658, 0.34180674, ..., 0.36761388,
          0.34291965, 0.34986284],
         ...,
         [0.35085702, 0.32460314, 0.3103818 , ..., 0.3794794 ,
          0.3766939 , 0.36736286],
         [0.3794794 , 0.34762746, 0.32619208, ..., 0.30832767,
          0.2899715 , 0.30158034],
         [0.33933645, 0.31547046, 0.29977944, ..., 0.34986284,
          0.32766023, 0.33011082]],

        [[0.38913774, 0.3550918 , 0.33133754, ..., 0.29116327,
          0.26061526, 0.28973326],
         [0.38633615, 0.3587123 , 0.33785674, ..., 0.30374542,
          0.27056432, 0.27704176],
         [0.36497566, 0.34094173, 0.30953583, ..., 0.33096948,
          0.30736133, 0.3202122 ],
         ...,
         [0.34452808, 0.31838658, 0.30470932, ..., 0.35160348,
          0.34986284, 0.34081802],
         [0.3701313 , 0.33847332, 0.32191828, ..., 0.2803518 ,
          0.26470274, 0.27621603],
         [0.34143567, 0.31753576, 0.30374542, ..., 0.31802225,
          0.30278304, 0.30591443]],

        [[0.39283922, 0.35908705, 0.33662406, ..., 0.26259887,
          0.2388731 , 0.2692723 ],
         [0.39181727, 0.36447394, 0.3446525 , ..., 0.28129822,
          0.25491336, 0.26353368],
         [0.36874616, 0.34502402, 0.31559172, ..., 0.31547046,
          0.29391006, 0.31122842],
         ...,
         [0.35708803, 0.32496935, 0.30977705, ..., 0.35671386,
          0.36434785, 0.35446766],
         [0.3829038 , 0.34514755, 0.32704836, ..., 0.28521186,
          0.2745649 , 0.2854495 ],
         [0.34998703, 0.3241151 , 0.3088103 , ..., 0.29379064,
          0.28438085, 0.28806612]],

        ...,

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 32, 32]), 'from': [28], 'to': [11]}

generate models:196

analyse output arrays in iter:219

pre layer res:
6:reshape
{'name': 'reshape', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [19], 'to': [7]}
tf node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [6], 'to': [13]}
ms node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [6], 'to': [13]}
torch node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [6], 'to': [13]}

generate models:209

analyse output arrays in iter:245

pre layer res:
26:transpose
{'name': 'transpose', 'output': array([[[[         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         ...,
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [9.789631e+36,          inf,          inf, ...,          inf,
                   inf,          inf]],

        [[         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         ...,
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [9.789631e+36,          inf,          inf, ...,          inf,
                   inf,          inf]],

        [[         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         ...,
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [9.789631e+36,          inf,          inf, ...,          inf,
                   inf,          inf]],

        ...,

        [[         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         ...,
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [9.789631e+36,          inf,          inf, ...,          inf,
                   inf,          inf]],

        [[         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         ...,
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [9.789631e+36,          inf,          inf, ...,          inf,
                   inf,          inf]],

        [[         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         ...,
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [9.789631e+36,          inf,          inf, ...,          inf,
                   inf,          inf]]]], dtype=float32), 'output_shape': TensorShape([1, 32, 32, 32]), 'from': [17], 'to': [21]}
tf node:
{'name': 'sin', 'output': array([[[[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [0.07469058,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [0.07469058,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [0.07469058,        nan,        nan, ...,        nan,
                 nan,        nan]],

        ...,

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [0.07469058,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [0.07469058,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [0.07469058,        nan,        nan, ...,        nan,
                 nan,        nan]]]], dtype=float32), 'output_shape': TensorShape([1, 32, 32, 32]), 'from': [26], 'to': [14]}
ms node:
{'name': 'sin', 'output': array([[[[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.9763934 ,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.9763934 ,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.9763934 ,         nan,         nan, ...,         nan,
                  nan,         nan]],

        ...,

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.9763934 ,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [ 0.85561746,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [ 0.85561746,         nan,         nan, ...,         nan,
                  nan,         nan]]]], dtype=float32), 'output_shape': (1, 32, 32, 32), 'from': [26], 'to': [14]}
torch node:
{'name': 'sin', 'output': array([[[[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [0.07469058,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [0.07469058,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [0.07469058,        nan,        nan, ...,        nan,
                 nan,        nan]],

        ...,

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [0.07469058,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [0.07469058,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [0.07469058,        nan,        nan, ...,        nan,
                 nan,        nan]]]], dtype=float32), 'output_shape': torch.Size([1, 32, 32, 32]), 'from': [26], 'to': [14]}

generate models:233

analyse output arrays in iter:275

pre layer res:
22:reshape
{'name': 'reshape', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [21], 'to': [19]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [22], 'to': [23]}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 28, 28), 'from': [22], 'to': [23]}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 28, 28]), 'from': [22], 'to': [23]}

generate models:262

analyse output arrays in iter:283

pre layer res:
9:transpose
{'name': 'transpose', 'output': array([[[[6417.258 , 6420.5024, 6420.633 , ..., 6387.9683, 6389.938 ,
          6389.938 ],
         [6417.258 , 6420.5024, 6420.633 , ..., 6412.312 , 6420.4136,
          6420.4136],
         [6417.258 , 6420.5024, 6420.5024, ..., 6424.063 , 6423.6177,
          6420.4136],
         ...,
         [6422.6587, 6422.6587, 6422.6587, ..., 6420.971 , 6422.4067,
          6422.4067],
         [6422.6587, 6422.6587, 6422.6587, ..., 6421.906 , 6422.4067,
          6422.4067],
         [6421.1484, 6421.1484, 6421.1484, ..., 6421.906 , 6422.117 ,
          6422.117 ]],

        [[6417.258 , 6420.5024, 6420.633 , ..., 6387.9683, 6389.938 ,
          6389.938 ],
         [6417.258 , 6420.5024, 6420.633 , ..., 6412.312 , 6420.4136,
          6420.4136],
         [6417.258 , 6420.5024, 6420.5024, ..., 6424.063 , 6423.6177,
          6420.4136],
         ...,
         [6422.6587, 6422.6587, 6422.6587, ..., 6420.971 , 6422.4067,
          6422.4067],
         [6422.6587, 6422.6587, 6422.6587, ..., 6421.906 , 6422.4067,
          6422.4067],
         [6421.1484, 6421.1484, 6421.1484, ..., 6421.906 , 6422.117 ,
          6422.117 ]],

        [[6417.258 , 6420.5024, 6420.633 , ..., 6387.9683, 6389.938 ,
          6389.938 ],
         [6417.258 , 6420.5024, 6420.633 , ..., 6412.312 , 6420.4136,
          6420.4136],
         [6417.258 , 6420.5024, 6420.5024, ..., 6424.063 , 6423.6177,
          6420.4136],
         ...,
         [6422.6587, 6422.6587, 6422.6587, ..., 6420.971 , 6422.4067,
          6422.4067],
         [6422.6587, 6422.6587, 6422.6587, ..., 6421.906 , 6422.4067,
          6422.4067],
         [6421.1484, 6421.1484, 6421.1484, ..., 6421.906 , 6422.117 ,
          6422.117 ]],

        ...,

        [[6417.258 , 6420.5024, 6420.633 , ..., 6387.9683, 6389.938 ,
          6389.938 ],
         [6417.258 , 6420.5024, 6420.633 , ..., 6412.312 , 6420.4136,
          6420.4136],
         [6417.258 , 6420.5024, 6420.5024, ..., 6424.063 , 6423.6177,
          6420.4136],
         ...,
         [6422.6587, 6422.6587, 6422.6587, ..., 6420.971 , 6422.4067,
          6422.4067],
         [6422.6587, 6422.6587, 6422.6587, ..., 6421.906 , 6422.4067,
          6422.4067],
         [6421.1484, 6421.1484, 6421.1484, ..., 6421.906 , 6422.117 ,
          6422.117 ]],

        [[6417.258 , 6420.5024, 6420.633 , ..., 6387.9683, 6389.938 ,
          6389.938 ],
         [6417.258 , 6420.5024, 6420.633 , ..., 6412.312 , 6420.4136,
          6420.4136],
         [6417.258 , 6420.5024, 6420.5024, ..., 6424.063 , 6423.6177,
          6420.4136],
         ...,
         [6422.6587, 6422.6587, 6422.6587, ..., 6420.971 , 6422.4067,
          6422.4067],
         [6422.6587, 6422.6587, 6422.6587, ..., 6421.906 , 6422.4067,
          6422.4067],
         [6421.1484, 6421.1484, 6421.1484, ..., 6421.906 , 6422.117 ,
          6422.117 ]],

        [[6417.258 , 6420.5024, 6420.633 , ..., 6387.9683, 6389.938 ,
          6389.938 ],
         [6417.258 , 6420.5024, 6420.633 , ..., 6412.312 , 6420.4136,
          6420.4136],
         [6417.258 , 6420.5024, 6420.5024, ..., 6424.063 , 6423.6177,
          6420.4136],
         ...,
         [6422.6587, 6422.6587, 6422.6587, ..., 6420.971 , 6422.4067,
          6422.4067],
         [6422.6587, 6422.6587, 6422.6587, ..., 6421.906 , 6422.4067,
          6422.4067],
         [6421.1484, 6421.1484, 6421.1484, ..., 6421.906 , 6422.117 ,
          6422.117 ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [6], 'to': [12]}
tf node:
{'name': 'cos', 'output': array([[[[-0.52678823,  0.61142   ,  0.70910275, ..., -0.44430593,
           0.99811137,  0.99811137],
         [-0.52678823,  0.61142   ,  0.70910275, ..., -0.9487923 ,
           0.5387786 ,  0.5387786 ],
         [-0.52678823,  0.61142   ,  0.61142   , ..., -0.8804489 ,
          -0.59035254,  0.5387786 ],
         ...,
         [ 0.32166636,  0.32166636,  0.32166636, ...,  0.902958  ,
           0.54755706,  0.54755706],
         [ 0.32166636,  0.32166636,  0.32166636, ...,  0.882155  ,
           0.54755706,  0.54755706],
         [ 0.9645809 ,  0.9645809 ,  0.9645809 , ...,  0.882155  ,
           0.7636791 ,  0.7636791 ]],

        [[-0.52678823,  0.61142   ,  0.70910275, ..., -0.44430593,
           0.99811137,  0.99811137],
         [-0.52678823,  0.61142   ,  0.70910275, ..., -0.9487923 ,
           0.5387786 ,  0.5387786 ],
         [-0.52678823,  0.61142   ,  0.61142   , ..., -0.8804489 ,
          -0.59035254,  0.5387786 ],
         ...,
         [ 0.32166636,  0.32166636,  0.32166636, ...,  0.902958  ,
           0.54755706,  0.54755706],
         [ 0.32166636,  0.32166636,  0.32166636, ...,  0.882155  ,
           0.54755706,  0.54755706],
         [ 0.9645809 ,  0.9645809 ,  0.9645809 , ...,  0.882155  ,
           0.7636791 ,  0.7636791 ]],

        [[-0.52678823,  0.61142   ,  0.70910275, ..., -0.44430593,
           0.99811137,  0.99811137],
         [-0.52678823,  0.61142   ,  0.70910275, ..., -0.9487923 ,
           0.5387786 ,  0.5387786 ],
         [-0.52678823,  0.61142   ,  0.61142   , ..., -0.8804489 ,
          -0.59035254,  0.5387786 ],
         ...,
         [ 0.32166636,  0.32166636,  0.32166636, ...,  0.902958  ,
           0.54755706,  0.54755706],
         [ 0.32166636,  0.32166636,  0.32166636, ...,  0.882155  ,
           0.54755706,  0.54755706],
         [ 0.9645809 ,  0.9645809 ,  0.9645809 , ...,  0.882155  ,
           0.7636791 ,  0.7636791 ]],

        ...,

        [[-0.52678823,  0.61142   ,  0.70910275, ..., -0.44430593,
           0.99811137,  0.99811137],
         [-0.52678823,  0.61142   ,  0.70910275, ..., -0.9487923 ,
           0.5387786 ,  0.5387786 ],
         [-0.52678823,  0.61142   ,  0.61142   , ..., -0.8804489 ,
          -0.59035254,  0.5387786 ],
         ...,
         [ 0.32166636,  0.32166636,  0.32166636, ...,  0.902958  ,
           0.54755706,  0.54755706],
         [ 0.32166636,  0.32166636,  0.32166636, ...,  0.882155  ,
           0.54755706,  0.54755706],
         [ 0.9645809 ,  0.9645809 ,  0.9645809 , ...,  0.882155  ,
           0.7636791 ,  0.7636791 ]],

        [[-0.52678823,  0.61142   ,  0.70910275, ..., -0.44430593,
           0.99811137,  0.99811137],
         [-0.52678823,  0.61142   ,  0.70910275, ..., -0.9487923 ,
           0.5387786 ,  0.5387786 ],
         [-0.52678823,  0.61142   ,  0.61142   , ..., -0.8804489 ,
          -0.59035254,  0.5387786 ],
         ...,
         [ 0.32166636,  0.32166636,  0.32166636, ...,  0.902958  ,
           0.54755706,  0.54755706],
         [ 0.32166636,  0.32166636,  0.32166636, ...,  0.882155  ,
           0.54755706,  0.54755706],
         [ 0.9645809 ,  0.9645809 ,  0.9645809 , ...,  0.882155  ,
           0.7636791 ,  0.7636791 ]],

        [[-0.52678823,  0.61142   ,  0.70910275, ..., -0.44430593,
           0.99811137,  0.99811137],
         [-0.52678823,  0.61142   ,  0.70910275, ..., -0.9487923 ,
           0.5387786 ,  0.5387786 ],
         [-0.52678823,  0.61142   ,  0.61142   , ..., -0.8804489 ,
          -0.59035254,  0.5387786 ],
         ...,
         [ 0.32166636,  0.32166636,  0.32166636, ...,  0.902958  ,
           0.54755706,  0.54755706],
         [ 0.32166636,  0.32166636,  0.32166636, ...,  0.882155  ,
           0.54755706,  0.54755706],
         [ 0.9645809 ,  0.9645809 ,  0.9645809 , ...,  0.882155  ,
           0.7636791 ,  0.7636791 ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [9], 'to': [7, 19]}
ms node:
{'name': 'cos', 'output': array([[[[-0.52678823,  0.6118063 ,  0.70910275, ..., -0.44430593,
           0.99811137,  0.99811137],
         [-0.52678823,  0.6118063 ,  0.70910275, ..., -0.9487923 ,
           0.5387786 ,  0.5387786 ],
         [-0.52678823,  0.6118063 ,  0.6118063 , ..., -0.8804488 ,
          -0.59035254,  0.5387786 ],
         ...,
         [ 0.321204  ,  0.321204  ,  0.321204  , ...,  0.90316767,
           0.5475571 ,  0.5475571 ],
         [ 0.321204  ,  0.321204  ,  0.321204  , ...,  0.882155  ,
           0.5475571 ,  0.5475571 ],
         [ 0.9645809 ,  0.9645809 ,  0.9645809 , ...,  0.882155  ,
           0.763679  ,  0.763679  ]],

        [[-0.52678823,  0.6118063 ,  0.70910275, ..., -0.44430593,
           0.99811137,  0.99811137],
         [-0.52678823,  0.6118063 ,  0.70910275, ..., -0.9487923 ,
           0.5387786 ,  0.5387786 ],
         [-0.52678823,  0.6118063 ,  0.6118063 , ..., -0.8804488 ,
          -0.59035254,  0.5387786 ],
         ...,
         [ 0.321204  ,  0.321204  ,  0.321204  , ...,  0.90316767,
           0.5475571 ,  0.5475571 ],
         [ 0.321204  ,  0.321204  ,  0.321204  , ...,  0.882155  ,
           0.5475571 ,  0.5475571 ],
         [ 0.9645809 ,  0.9645809 ,  0.9645809 , ...,  0.882155  ,
           0.763679  ,  0.763679  ]],

        [[-0.52678823,  0.6118063 ,  0.70910275, ..., -0.44430593,
           0.99811137,  0.99811137],
         [-0.52678823,  0.6118063 ,  0.70910275, ..., -0.9487923 ,
           0.5387786 ,  0.5387786 ],
         [-0.52678823,  0.6118063 ,  0.6118063 , ..., -0.8804488 ,
          -0.59035254,  0.5387786 ],
         ...,
         [ 0.321204  ,  0.321204  ,  0.321204  , ...,  0.90316767,
           0.5475571 ,  0.5475571 ],
         [ 0.321204  ,  0.321204  ,  0.321204  , ...,  0.882155  ,
           0.5475571 ,  0.5475571 ],
         [ 0.9645809 ,  0.9645809 ,  0.9645809 , ...,  0.882155  ,
           0.763679  ,  0.763679  ]],

        ...,

        [[-0.52678823,  0.6118063 ,  0.70910275, ..., -0.44430593,
           0.99811137,  0.99811137],
         [-0.52678823,  0.6118063 ,  0.70910275, ..., -0.9487923 ,
           0.5387786 ,  0.5387786 ],
         [-0.52678823,  0.6118063 ,  0.6118063 , ..., -0.8804488 ,
          -0.59035254,  0.5387786 ],
         ...,
         [ 0.321204  ,  0.321204  ,  0.321204  , ...,  0.90316767,
           0.5475571 ,  0.5475571 ],
         [ 0.321204  ,  0.321204  ,  0.321204  , ...,  0.882155  ,
           0.5475571 ,  0.5475571 ],
         [ 0.9645809 ,  0.9645809 ,  0.9645809 , ...,  0.882155  ,
           0.763679  ,  0.763679  ]],

        [[-0.5296904 ,  0.6137356 ,  0.71150863, ..., -0.4451806 ,
           0.99811137,  0.99811137],
         [-0.5296904 ,  0.6137356 ,  0.71150863, ..., -0.9487923 ,
           0.54206526,  0.54206526],
         [-0.5296904 ,  0.6137356 ,  0.6137356 , ..., -0.8804488 ,
          -0.5871951 ,  0.54206526],
         ...,
         [ 0.318891  ,  0.318891  ,  0.318891  , ...,  0.9042131 ,
           0.5475571 ,  0.5475571 ],
         [ 0.318891  ,  0.318891  ,  0.318891  , ...,  0.8826145 ,
           0.5475571 ,  0.5475571 ],
         [ 0.96367365,  0.96367365,  0.96367365, ...,  0.8826145 ,
           0.76588124,  0.76588124]],

        [[-0.5296904 ,  0.6137356 ,  0.71150863, ..., -0.4451806 ,
           0.99811137,  0.99811137],
         [-0.5296904 ,  0.6137356 ,  0.71150863, ..., -0.9487923 ,
           0.54206526,  0.54206526],
         [-0.5296904 ,  0.6137356 ,  0.6137356 , ..., -0.8804488 ,
          -0.5871951 ,  0.54206526],
         ...,
         [ 0.318891  ,  0.318891  ,  0.318891  , ...,  0.9042131 ,
           0.5475571 ,  0.5475571 ],
         [ 0.318891  ,  0.318891  ,  0.318891  , ...,  0.8826145 ,
           0.5475571 ,  0.5475571 ],
         [ 0.96367365,  0.96367365,  0.96367365, ...,  0.8826145 ,
           0.76588124,  0.76588124]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [9], 'to': [7, 19]}
torch node:
{'name': 'cos', 'output': array([[[[-0.52678823,  0.61142   ,  0.70910275, ..., -0.44430593,
           0.99811137,  0.99811137],
         [-0.52678823,  0.61142   ,  0.70910275, ..., -0.9487923 ,
           0.5387786 ,  0.5387786 ],
         [-0.52678823,  0.61142   ,  0.61142   , ..., -0.8804488 ,
          -0.59035254,  0.5387786 ],
         ...,
         [ 0.32166636,  0.32166636,  0.32166636, ...,  0.902958  ,
           0.5475571 ,  0.5475571 ],
         [ 0.32166636,  0.32166636,  0.32166636, ...,  0.882155  ,
           0.5475571 ,  0.5475571 ],
         [ 0.9645809 ,  0.9645809 ,  0.9645809 , ...,  0.882155  ,
           0.763679  ,  0.763679  ]],

        [[-0.52678823,  0.61142   ,  0.70910275, ..., -0.44430593,
           0.99811137,  0.99811137],
         [-0.52678823,  0.61142   ,  0.70910275, ..., -0.9487923 ,
           0.5387786 ,  0.5387786 ],
         [-0.52678823,  0.61142   ,  0.61142   , ..., -0.8804488 ,
          -0.59035254,  0.5387786 ],
         ...,
         [ 0.32166636,  0.32166636,  0.32166636, ...,  0.902958  ,
           0.5475571 ,  0.5475571 ],
         [ 0.32166636,  0.32166636,  0.32166636, ...,  0.882155  ,
           0.5475571 ,  0.5475571 ],
         [ 0.9645809 ,  0.9645809 ,  0.9645809 , ...,  0.882155  ,
           0.763679  ,  0.763679  ]],

        [[-0.52678823,  0.61142   ,  0.70910275, ..., -0.44430593,
           0.99811137,  0.99811137],
         [-0.52678823,  0.61142   ,  0.70910275, ..., -0.9487923 ,
           0.5387786 ,  0.5387786 ],
         [-0.52678823,  0.61142   ,  0.61142   , ..., -0.8804488 ,
          -0.59035254,  0.5387786 ],
         ...,
         [ 0.32166636,  0.32166636,  0.32166636, ...,  0.902958  ,
           0.5475571 ,  0.5475571 ],
         [ 0.32166636,  0.32166636,  0.32166636, ...,  0.882155  ,
           0.5475571 ,  0.5475571 ],
         [ 0.9645809 ,  0.9645809 ,  0.9645809 , ...,  0.882155  ,
           0.763679  ,  0.763679  ]],

        ...,

        [[-0.52678823,  0.61142   ,  0.70910275, ..., -0.44430593,
           0.99811137,  0.99811137],
         [-0.52678823,  0.61142   ,  0.70910275, ..., -0.9487923 ,
           0.5387786 ,  0.5387786 ],
         [-0.52678823,  0.61142   ,  0.61142   , ..., -0.8804488 ,
          -0.59035254,  0.5387786 ],
         ...,
         [ 0.32166636,  0.32166636,  0.32166636, ...,  0.902958  ,
           0.5475571 ,  0.5475571 ],
         [ 0.32166636,  0.32166636,  0.32166636, ...,  0.882155  ,
           0.5475571 ,  0.5475571 ],
         [ 0.9645809 ,  0.9645809 ,  0.9645809 , ...,  0.882155  ,
           0.763679  ,  0.763679  ]],

        [[-0.52678823,  0.61142   ,  0.70910275, ..., -0.44430593,
           0.99811137,  0.99811137],
         [-0.52678823,  0.61142   ,  0.70910275, ..., -0.9487923 ,
           0.5387786 ,  0.5387786 ],
         [-0.52678823,  0.61142   ,  0.61142   , ..., -0.8804488 ,
          -0.59035254,  0.5387786 ],
         ...,
         [ 0.32166636,  0.32166636,  0.32166636, ...,  0.902958  ,
           0.5475571 ,  0.5475571 ],
         [ 0.32166636,  0.32166636,  0.32166636, ...,  0.882155  ,
           0.5475571 ,  0.5475571 ],
         [ 0.9645809 ,  0.9645809 ,  0.9645809 , ...,  0.882155  ,
           0.763679  ,  0.763679  ]],

        [[-0.52678823,  0.61142   ,  0.70910275, ..., -0.44430593,
           0.99811137,  0.99811137],
         [-0.52678823,  0.61142   ,  0.70910275, ..., -0.9487923 ,
           0.5387786 ,  0.5387786 ],
         [-0.52678823,  0.61142   ,  0.61142   , ..., -0.8804488 ,
          -0.59035254,  0.5387786 ],
         ...,
         [ 0.32166636,  0.32166636,  0.32166636, ...,  0.902958  ,
           0.5475571 ,  0.5475571 ],
         [ 0.32166636,  0.32166636,  0.32166636, ...,  0.882155  ,
           0.5475571 ,  0.5475571 ],
         [ 0.9645809 ,  0.9645809 ,  0.9645809 , ...,  0.882155  ,
           0.763679  ,  0.763679  ]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [9], 'to': [7, 19]}

generate models:270

analyse output arrays in iter:286

pre layer res:
3:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[           inf,            inf,            inf, ...,
                     inf, 6.83771345e+30, 6.23591859e+27],
         [           inf,            inf,            inf, ...,
                     inf, 6.83771345e+30, 6.23591859e+27],
         [           inf,            inf,            inf, ...,
                     inf, 1.02569305e+34, 1.02569305e+34],
         ...,
         [           inf,            inf,            inf, ...,
          6.96290739e+30, 1.14483814e+26, 4.21162410e+25],
         [           inf,            inf,            inf, ...,
          2.03831519e+34, 3.13761880e+27, 3.10431697e+26],
         [           inf,            inf,            inf, ...,
          2.03831519e+34, 3.13761880e+27, 3.10431697e+26]],

        [[           inf,            inf,            inf, ...,
                     inf, 6.83771345e+30, 6.23591859e+27],
         [           inf,            inf,            inf, ...,
                     inf, 6.83771345e+30, 6.23591859e+27],
         [           inf,            inf,            inf, ...,
                     inf, 1.02569305e+34, 1.02569305e+34],
         ...,
         [           inf,            inf,            inf, ...,
          6.96290739e+30, 1.14483814e+26, 4.21162410e+25],
         [           inf,            inf,            inf, ...,
          2.03831519e+34, 3.13761880e+27, 3.10431697e+26],
         [           inf,            inf,            inf, ...,
          2.03831519e+34, 3.13761880e+27, 3.10431697e+26]],

        [[           inf,            inf,            inf, ...,
                     inf, 6.83771345e+30, 6.23591859e+27],
         [           inf,            inf,            inf, ...,
                     inf, 6.83771345e+30, 6.23591859e+27],
         [           inf,            inf,            inf, ...,
                     inf, 1.02569305e+34, 1.02569305e+34],
         ...,
         [           inf,            inf,            inf, ...,
          6.96290739e+30, 1.14483814e+26, 4.21162410e+25],
         [           inf,            inf,            inf, ...,
          2.03831519e+34, 3.13761880e+27, 3.10431697e+26],
         [           inf,            inf,            inf, ...,
          2.03831519e+34, 3.13761880e+27, 3.10431697e+26]],

        ...,

        [[           inf,            inf,            inf, ...,
                     inf, 6.83771345e+30, 6.23591859e+27],
         [           inf,            inf,            inf, ...,
                     inf, 6.83771345e+30, 6.23591859e+27],
         [           inf,            inf,            inf, ...,
                     inf, 1.02569305e+34, 1.02569305e+34],
         ...,
         [           inf,            inf,            inf, ...,
          6.96290739e+30, 1.14483814e+26, 4.21162410e+25],
         [           inf,            inf,            inf, ...,
          2.03831519e+34, 3.13761880e+27, 3.10431697e+26],
         [           inf,            inf,            inf, ...,
          2.03831519e+34, 3.13761880e+27, 3.10431697e+26]],

        [[           inf,            inf,            inf, ...,
                     inf, 6.83771345e+30, 6.23591859e+27],
         [           inf,            inf,            inf, ...,
                     inf, 6.83771345e+30, 6.23591859e+27],
         [           inf,            inf,            inf, ...,
                     inf, 1.02569305e+34, 1.02569305e+34],
         ...,
         [           inf,            inf,            inf, ...,
          6.96290739e+30, 1.14483814e+26, 4.21162410e+25],
         [           inf,            inf,            inf, ...,
          2.03831519e+34, 3.13761880e+27, 3.10431697e+26],
         [           inf,            inf,            inf, ...,
          2.03831519e+34, 3.13761880e+27, 3.10431697e+26]],

        [[           inf,            inf,            inf, ...,
                     inf, 6.83771345e+30, 6.23591859e+27],
         [           inf,            inf,            inf, ...,
                     inf, 6.83771345e+30, 6.23591859e+27],
         [           inf,            inf,            inf, ...,
                     inf, 1.02569305e+34, 1.02569305e+34],
         ...,
         [           inf,            inf,            inf, ...,
          6.96290739e+30, 1.14483814e+26, 4.21162410e+25],
         [           inf,            inf,            inf, ...,
          2.03831519e+34, 3.13761880e+27, 3.10431697e+26],
         [           inf,            inf,            inf, ...,
          2.03831519e+34, 3.13761880e+27, 3.10431697e+26]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [2], 'to': [9]}
tf node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [3], 'to': [4]}
ms node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan,  0.,  0.],
         [nan, nan, nan, ..., nan,  0.,  0.],
         [nan, nan, nan, ..., nan,  0.,  0.],
         ...,
         [nan, nan, nan, ...,  0.,  0.,  0.],
         [nan, nan, nan, ...,  0.,  0.,  0.],
         [nan, nan, nan, ...,  0.,  0.,  0.]],

        [[nan, nan, nan, ..., nan,  0.,  0.],
         [nan, nan, nan, ..., nan,  0.,  0.],
         [nan, nan, nan, ..., nan,  0.,  0.],
         ...,
         [nan, nan, nan, ...,  0.,  0.,  0.],
         [nan, nan, nan, ...,  0.,  0.,  0.],
         [nan, nan, nan, ...,  0.,  0.,  0.]],

        [[nan, nan, nan, ..., nan,  0.,  0.],
         [nan, nan, nan, ..., nan,  0.,  0.],
         [nan, nan, nan, ..., nan,  0.,  0.],
         ...,
         [nan, nan, nan, ...,  0.,  0.,  0.],
         [nan, nan, nan, ...,  0.,  0.,  0.],
         [nan, nan, nan, ...,  0.,  0.,  0.]],

        ...,

        [[nan, nan, nan, ..., nan,  0.,  0.],
         [nan, nan, nan, ..., nan,  0.,  0.],
         [nan, nan, nan, ..., nan,  0.,  0.],
         ...,
         [nan, nan, nan, ...,  0.,  0.,  0.],
         [nan, nan, nan, ...,  0.,  0.,  0.],
         [nan, nan, nan, ...,  0.,  0.,  0.]],

        [[nan, nan, nan, ..., nan,  0.,  0.],
         [nan, nan, nan, ..., nan,  0.,  0.],
         [nan, nan, nan, ..., nan,  0.,  0.],
         ...,
         [nan, nan, nan, ...,  0.,  0.,  0.],
         [nan, nan, nan, ...,  0.,  0.,  0.],
         [nan, nan, nan, ...,  0.,  0.,  0.]],

        [[nan, nan, nan, ..., nan,  0.,  0.],
         [nan, nan, nan, ..., nan,  0.,  0.],
         [nan, nan, nan, ..., nan,  0.,  0.],
         ...,
         [nan, nan, nan, ...,  0.,  0.,  0.],
         [nan, nan, nan, ...,  0.,  0.,  0.],
         [nan, nan, nan, ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [3], 'to': [4]}
torch node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [3], 'to': [4]}

generate models:273

analyse output arrays in iter:292

pre layer res:
33:sigmoid
{'name': 'sigmoid', 'output': array([[[[1. , 1. , 0.5, ..., 0.5, 0.5, 0.5],
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         ...,
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         [1. , 1. , 0.5, ..., 0.5, 0.5, 0.5],
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5]],

        [[1. , 1. , 0.5, ..., 0.5, 0.5, 0.5],
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         ...,
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         [1. , 1. , 0.5, ..., 0.5, 0.5, 0.5],
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5]],

        [[1. , 1. , 0.5, ..., 0.5, 0.5, 0.5],
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         ...,
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         [1. , 1. , 0.5, ..., 0.5, 0.5, 0.5],
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5]],

        ...,

        [[1. , 1. , 0.5, ..., 0.5, 0.5, 0.5],
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         ...,
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         [1. , 1. , 0.5, ..., 0.5, 0.5, 0.5],
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5]],

        [[1. , 1. , 0.5, ..., 0.5, 0.5, 0.5],
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         ...,
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         [1. , 1. , 0.5, ..., 0.5, 0.5, 0.5],
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5]],

        [[1. , 1. , 0.5, ..., 0.5, 0.5, 0.5],
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         ...,
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         [1. , 1. , 0.5, ..., 0.5, 0.5, 0.5],
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 112, 112]), 'from': [14], 'to': [32]}
tf node:
{'name': 'log', 'output': array([[[[ 0.       ,  0.       , -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         ...,
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [ 0.       ,  0.       , -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472]],

        [[ 0.       ,  0.       , -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         ...,
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [ 0.       ,  0.       , -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472]],

        [[ 0.       ,  0.       , -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         ...,
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [ 0.       ,  0.       , -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472]],

        ...,

        [[ 0.       ,  0.       , -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         ...,
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [ 0.       ,  0.       , -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472]],

        [[ 0.       ,  0.       , -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         ...,
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [ 0.       ,  0.       , -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472]],

        [[ 0.       ,  0.       , -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         ...,
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [ 0.       ,  0.       , -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 112, 112]), 'from': [33], 'to': [22]}
ms node:
{'name': 'log', 'output': array([[[[-1.4305115e-06, -1.4305115e-06, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         ...,
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-1.4305115e-06, -1.4305115e-06, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01]],

        [[-1.4305115e-06, -1.4305115e-06, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         ...,
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-1.4305115e-06, -1.4305115e-06, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01]],

        [[-1.4305115e-06, -1.4305115e-06, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         ...,
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-1.4305115e-06, -1.4305115e-06, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01]],

        ...,

        [[-1.4305115e-06, -1.4305115e-06, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         ...,
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-1.4305115e-06, -1.4305115e-06, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01]],

        [[-1.4305115e-06, -1.4305115e-06, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         ...,
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-1.4305115e-06, -1.4305115e-06, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01]],

        [[-1.4305115e-06, -1.4305115e-06, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         ...,
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-1.4305115e-06, -1.4305115e-06, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01]]]],
      dtype=float32), 'output_shape': (1, 128, 112, 112), 'from': [33], 'to': [22]}
torch node:
{'name': 'log', 'output': array([[[[ 0.       ,  0.       , -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         ...,
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [ 0.       ,  0.       , -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472]],

        [[ 0.       ,  0.       , -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         ...,
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [ 0.       ,  0.       , -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472]],

        [[ 0.       ,  0.       , -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         ...,
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [ 0.       ,  0.       , -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472]],

        ...,

        [[ 0.       ,  0.       , -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         ...,
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [ 0.       ,  0.       , -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472]],

        [[ 0.       ,  0.       , -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         ...,
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [ 0.       ,  0.       , -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472]],

        [[ 0.       ,  0.       , -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         ...,
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [ 0.       ,  0.       , -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 112, 112]), 'from': [33], 'to': [22]}

generate models:279

analyse output arrays in iter:307

pre layer res:
17:log
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [12], 'to': [5]}
tf node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [17], 'to': [8]}
ms node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [17], 'to': [8]}
torch node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [17], 'to': [8]}

generate models:293

analyse output arrays in iter:313

pre layer res:
4:cos
{'name': 'cos', 'output': array([[[[-0.98870915, -0.22374095, -0.3424948 , ..., -0.42415172,
           0.9182708 , -0.6469423 ],
         [ 0.5984842 ,  0.9468777 ,  0.27513435, ...,  0.54770404,
          -0.7421744 ,  0.62646794],
         [ 0.5624289 , -0.9074341 , -0.4401701 , ..., -0.54032767,
          -0.98870915, -0.15422167],
         ...,
         [ 0.29210997, -0.89988   ,  0.7480776 , ...,  0.30899408,
           0.6536665 , -0.3174573 ],
         [ 0.7480776 , -0.6469423 , -0.99119884, ...,  0.41617426,
           0.14552987,  0.7822497 ],
         [ 0.66691566, -0.5697256 ,  0.64016753, ...,  0.99437064,
           0.1279338 , -0.4401701 ]],

        [[-0.98870915, -0.22374095, -0.3424948 , ..., -0.42415172,
           0.9182708 , -0.6469423 ],
         [ 0.5984842 ,  0.9468777 ,  0.27513435, ...,  0.54770404,
          -0.7421744 ,  0.62646794],
         [ 0.5624289 , -0.9074341 , -0.4401701 , ..., -0.54032767,
          -0.98870915, -0.15422167],
         ...,
         [ 0.29210997, -0.89988   ,  0.7480776 , ...,  0.30899408,
           0.6536665 , -0.3174573 ],
         [ 0.7480776 , -0.6469423 , -0.99119884, ...,  0.41617426,
           0.14552987,  0.7822497 ],
         [ 0.66691566, -0.5697256 ,  0.64016753, ...,  0.99437064,
           0.1279338 , -0.4401701 ]],

        [[-0.98870915, -0.22374095, -0.3424948 , ..., -0.42415172,
           0.9182708 , -0.6469423 ],
         [ 0.5984842 ,  0.9468777 ,  0.27513435, ...,  0.54770404,
          -0.7421744 ,  0.62646794],
         [ 0.5624289 , -0.9074341 , -0.4401701 , ..., -0.54032767,
          -0.98870915, -0.15422167],
         ...,
         [ 0.29210997, -0.89988   ,  0.7480776 , ...,  0.30899408,
           0.6536665 , -0.3174573 ],
         [ 0.7480776 , -0.6469423 , -0.99119884, ...,  0.41617426,
           0.14552987,  0.7822497 ],
         [ 0.66691566, -0.5697256 ,  0.64016753, ...,  0.99437064,
           0.1279338 , -0.4401701 ]],

        ...,

        [[-0.98870915, -0.22374095, -0.3424948 , ..., -0.42415172,
           0.9182708 , -0.6469423 ],
         [ 0.5984842 ,  0.9468777 ,  0.27513435, ...,  0.54770404,
          -0.7421744 ,  0.62646794],
         [ 0.5624289 , -0.9074341 , -0.4401701 , ..., -0.54032767,
          -0.98870915, -0.15422167],
         ...,
         [ 0.29210997, -0.89988   ,  0.7480776 , ...,  0.30899408,
           0.6536665 , -0.3174573 ],
         [ 0.7480776 , -0.6469423 , -0.99119884, ...,  0.41617426,
           0.14552987,  0.7822497 ],
         [ 0.66691566, -0.5697256 ,  0.64016753, ...,  0.99437064,
           0.1279338 , -0.4401701 ]],

        [[-0.98870915, -0.22374095, -0.3424948 , ..., -0.42415172,
           0.9182708 , -0.6469423 ],
         [ 0.5984842 ,  0.9468777 ,  0.27513435, ...,  0.54770404,
          -0.7421744 ,  0.62646794],
         [ 0.5624289 , -0.9074341 , -0.4401701 , ..., -0.54032767,
          -0.98870915, -0.15422167],
         ...,
         [ 0.29210997, -0.89988   ,  0.7480776 , ...,  0.30899408,
           0.6536665 , -0.3174573 ],
         [ 0.7480776 , -0.6469423 , -0.99119884, ...,  0.41617426,
           0.14552987,  0.7822497 ],
         [ 0.66691566, -0.5697256 ,  0.64016753, ...,  0.99437064,
           0.1279338 , -0.4401701 ]],

        [[-0.98870915, -0.22374095, -0.3424948 , ..., -0.42415172,
           0.9182708 , -0.6469423 ],
         [ 0.5984842 ,  0.9468777 ,  0.27513435, ...,  0.54770404,
          -0.7421744 ,  0.62646794],
         [ 0.5624289 , -0.9074341 , -0.4401701 , ..., -0.54032767,
          -0.98870915, -0.15422167],
         ...,
         [ 0.29210997, -0.89988   ,  0.7480776 , ...,  0.30899408,
           0.6536665 , -0.3174573 ],
         [ 0.7480776 , -0.6469423 , -0.99119884, ...,  0.41617426,
           0.14552987,  0.7822497 ],
         [ 0.66691566, -0.5697256 ,  0.64016753, ...,  0.99437064,
           0.1279338 , -0.4401701 ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [2], 'to': [7, 15]}
tf node:
{'name': 'log', 'output': array([[[[        nan,         nan,         nan, ...,         nan,
          -0.08526292,         nan],
         [-0.51335514, -0.05458532, -1.2904958 , ..., -0.6020202 ,
                  nan, -0.4676577 ],
         [-0.5754906 ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-1.2306249 ,         nan, -0.2902486 , ..., -1.1744331 ,
          -0.425158  ,         nan],
         [-0.2902486 ,         nan,         nan, ..., -0.8766512 ,
          -1.9273739 , -0.2455813 ],
         [-0.4050917 ,         nan, -0.44602537, ..., -0.00564527,
          -2.0562422 ,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
          -0.08526292,         nan],
         [-0.51335514, -0.05458532, -1.2904958 , ..., -0.6020202 ,
                  nan, -0.4676577 ],
         [-0.5754906 ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-1.2306249 ,         nan, -0.2902486 , ..., -1.1744331 ,
          -0.425158  ,         nan],
         [-0.2902486 ,         nan,         nan, ..., -0.8766512 ,
          -1.9273739 , -0.2455813 ],
         [-0.4050917 ,         nan, -0.44602537, ..., -0.00564527,
          -2.0562422 ,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
          -0.08526292,         nan],
         [-0.51335514, -0.05458532, -1.2904958 , ..., -0.6020202 ,
                  nan, -0.4676577 ],
         [-0.5754906 ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-1.2306249 ,         nan, -0.2902486 , ..., -1.1744331 ,
          -0.425158  ,         nan],
         [-0.2902486 ,         nan,         nan, ..., -0.8766512 ,
          -1.9273739 , -0.2455813 ],
         [-0.4050917 ,         nan, -0.44602537, ..., -0.00564527,
          -2.0562422 ,         nan]],

        ...,

        [[        nan,         nan,         nan, ...,         nan,
          -0.08526292,         nan],
         [-0.51335514, -0.05458532, -1.2904958 , ..., -0.6020202 ,
                  nan, -0.4676577 ],
         [-0.5754906 ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-1.2306249 ,         nan, -0.2902486 , ..., -1.1744331 ,
          -0.425158  ,         nan],
         [-0.2902486 ,         nan,         nan, ..., -0.8766512 ,
          -1.9273739 , -0.2455813 ],
         [-0.4050917 ,         nan, -0.44602537, ..., -0.00564527,
          -2.0562422 ,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
          -0.08526292,         nan],
         [-0.51335514, -0.05458532, -1.2904958 , ..., -0.6020202 ,
                  nan, -0.4676577 ],
         [-0.5754906 ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-1.2306249 ,         nan, -0.2902486 , ..., -1.1744331 ,
          -0.425158  ,         nan],
         [-0.2902486 ,         nan,         nan, ..., -0.8766512 ,
          -1.9273739 , -0.2455813 ],
         [-0.4050917 ,         nan, -0.44602537, ..., -0.00564527,
          -2.0562422 ,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
          -0.08526292,         nan],
         [-0.51335514, -0.05458532, -1.2904958 , ..., -0.6020202 ,
                  nan, -0.4676577 ],
         [-0.5754906 ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-1.2306249 ,         nan, -0.2902486 , ..., -1.1744331 ,
          -0.425158  ,         nan],
         [-0.2902486 ,         nan,         nan, ..., -0.8766512 ,
          -1.9273739 , -0.2455813 ],
         [-0.4050917 ,         nan, -0.44602537, ..., -0.00564527,
          -2.0562422 ,         nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [4], 'to': [12]}
ms node:
{'name': 'log', 'output': array([[[[        nan,         nan,         nan, ...,         nan,
          -0.0852639 ,         nan],
         [-0.5133566 , -0.0545853 , -1.2904952 , ..., -0.6020196 ,
                  nan, -0.46765485],
         [-0.5754899 ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-1.2306265 ,         nan, -0.29024875, ..., -1.1744324 ,
          -0.42515528,         nan],
         [-0.29024875,         nan,         nan, ..., -0.87665457,
          -1.9273756 , -0.24558371],
         [-0.4050937 ,         nan, -0.44602266, ..., -0.0056467 ,
          -2.0562437 ,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
          -0.0852639 ,         nan],
         [-0.5133566 , -0.0545853 , -1.2904952 , ..., -0.6020196 ,
                  nan, -0.46765485],
         [-0.5754899 ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-1.2306265 ,         nan, -0.29024875, ..., -1.1744324 ,
          -0.42515528,         nan],
         [-0.29024875,         nan,         nan, ..., -0.87665457,
          -1.9273756 , -0.24558371],
         [-0.4050937 ,         nan, -0.44602266, ..., -0.0056467 ,
          -2.0562437 ,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
          -0.0852639 ,         nan],
         [-0.5133566 , -0.0545853 , -1.2904952 , ..., -0.6020196 ,
                  nan, -0.46765485],
         [-0.5754899 ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-1.2306265 ,         nan, -0.29024875, ..., -1.1744324 ,
          -0.42515528,         nan],
         [-0.29024875,         nan,         nan, ..., -0.87665457,
          -1.9273756 , -0.24558371],
         [-0.4050937 ,         nan, -0.44602266, ..., -0.0056467 ,
          -2.0562437 ,         nan]],

        ...,

        [[        nan,         nan,         nan, ...,         nan,
          -0.0852639 ,         nan],
         [-0.5133566 , -0.0545853 , -1.2904952 , ..., -0.6020196 ,
                  nan, -0.46765485],
         [-0.5754899 ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-1.2306265 ,         nan, -0.29024875, ..., -1.1744324 ,
          -0.42515528,         nan],
         [-0.29024875,         nan,         nan, ..., -0.87665457,
          -1.9273756 , -0.24558371],
         [-0.4050937 ,         nan, -0.44602266, ..., -0.0056467 ,
          -2.0562437 ,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
          -0.0852639 ,         nan],
         [-0.5133566 , -0.0545853 , -1.2904952 , ..., -0.6020196 ,
                  nan, -0.46765485],
         [-0.5754899 ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-1.2306265 ,         nan, -0.29024875, ..., -1.1744324 ,
          -0.42515528,         nan],
         [-0.29024875,         nan,         nan, ..., -0.87665457,
          -1.9273756 , -0.24558371],
         [-0.4050937 ,         nan, -0.44602266, ..., -0.0056467 ,
          -2.0562437 ,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
          -0.0852639 ,         nan],
         [-0.5133566 , -0.0545853 , -1.2904952 , ..., -0.6020196 ,
                  nan, -0.46765485],
         [-0.5754899 ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-1.2306265 ,         nan, -0.29024875, ..., -1.1744324 ,
          -0.42515528,         nan],
         [-0.29024875,         nan,         nan, ..., -0.87665457,
          -1.9273756 , -0.24558371],
         [-0.4050937 ,         nan, -0.44602266, ..., -0.0056467 ,
          -2.0562437 ,         nan]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [4], 'to': [12]}
torch node:
{'name': 'log', 'output': array([[[[        nan,         nan,         nan, ...,         nan,
          -0.08526292,         nan],
         [-0.51335514, -0.05458532, -1.2904958 , ..., -0.6020202 ,
                  nan, -0.4676577 ],
         [-0.5754905 ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-1.2306249 ,         nan, -0.2902487 , ..., -1.1744332 ,
          -0.42515808,         nan],
         [-0.2902487 ,         nan,         nan, ..., -0.8766512 ,
          -1.927374  , -0.2455813 ],
         [-0.4050918 ,         nan, -0.44602546, ..., -0.00564527,
          -2.0562422 ,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
          -0.08526292,         nan],
         [-0.51335514, -0.05458532, -1.2904958 , ..., -0.6020202 ,
                  nan, -0.4676577 ],
         [-0.5754905 ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-1.2306249 ,         nan, -0.2902487 , ..., -1.1744332 ,
          -0.42515808,         nan],
         [-0.2902487 ,         nan,         nan, ..., -0.8766512 ,
          -1.927374  , -0.2455813 ],
         [-0.4050918 ,         nan, -0.44602546, ..., -0.00564527,
          -2.0562422 ,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
          -0.08526292,         nan],
         [-0.51335514, -0.05458532, -1.2904958 , ..., -0.6020202 ,
                  nan, -0.4676577 ],
         [-0.5754905 ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-1.2306249 ,         nan, -0.2902487 , ..., -1.1744332 ,
          -0.42515808,         nan],
         [-0.2902487 ,         nan,         nan, ..., -0.8766512 ,
          -1.927374  , -0.2455813 ],
         [-0.4050918 ,         nan, -0.44602546, ..., -0.00564527,
          -2.0562422 ,         nan]],

        ...,

        [[        nan,         nan,         nan, ...,         nan,
          -0.08526292,         nan],
         [-0.51335514, -0.05458532, -1.2904958 , ..., -0.6020202 ,
                  nan, -0.4676577 ],
         [-0.5754905 ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-1.2306249 ,         nan, -0.2902487 , ..., -1.1744332 ,
          -0.42515808,         nan],
         [-0.2902487 ,         nan,         nan, ..., -0.8766512 ,
          -1.927374  , -0.2455813 ],
         [-0.4050918 ,         nan, -0.44602546, ..., -0.00564527,
          -2.0562422 ,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
          -0.08526292,         nan],
         [-0.51335514, -0.05458532, -1.2904958 , ..., -0.6020202 ,
                  nan, -0.4676577 ],
         [-0.5754905 ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-1.2306249 ,         nan, -0.2902487 , ..., -1.1744332 ,
          -0.42515808,         nan],
         [-0.2902487 ,         nan,         nan, ..., -0.8766512 ,
          -1.927374  , -0.2455813 ],
         [-0.4050918 ,         nan, -0.44602546, ..., -0.00564527,
          -2.0562422 ,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
          -0.08526292,         nan],
         [-0.51335514, -0.05458532, -1.2904958 , ..., -0.6020202 ,
                  nan, -0.4676577 ],
         [-0.5754905 ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-1.2306249 ,         nan, -0.2902487 , ..., -1.1744332 ,
          -0.42515808,         nan],
         [-0.2902487 ,         nan,         nan, ..., -0.8766512 ,
          -1.927374  , -0.2455813 ],
         [-0.4050918 ,         nan, -0.44602546, ..., -0.00564527,
          -2.0562422 ,         nan]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [4], 'to': [12]}

generate models:299

analyse output arrays in iter:317

pre layer res:
18:relu
{'name': 'relu', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 32, 32]), 'from': [17], 'to': [5, 21]}
tf node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 32, 32]), 'from': [18], 'to': [4]}
ms node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 256, 32, 32), 'from': [18], 'to': [4]}
torch node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 32, 32]), 'from': [18], 'to': [4]}

pre layer res:
2:relu
{'name': 'relu', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [16], 'to': [14]}
tf node:
{'name': 'log', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [2], 'to': [3]}
ms node:
{'name': 'log', 'output': array([[[[88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         ...,
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284]],

        [[88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         ...,
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284]],

        [[88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         ...,
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284]],

        ...,

        [[88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         ...,
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284]],

        [[88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         ...,
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284]],

        [[88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         ...,
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [2], 'to': [3]}
torch node:
{'name': 'log', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [2], 'to': [3]}

generate models:302

analyse output arrays in iter:325

pre layer res:
19:conv2d
{'name': 'conv2d', 'output': array([[[[144179.56 , 175501.2  , 128346.01 , ..., 135501.55 ,
           82612.78 ,  82612.78 ],
         [159840.08 , 191162.72 , 191162.72 , ..., 202061.23 ,
          209911.   , 143611.64 ],
         [ 65529.938, 191162.72 , 191162.72 , ..., 221587.75 ,
          229436.06 , 145954.56 ],
         ...,
         [162481.3  , 213459.98 , 223223.06 , ..., 100414.04 ,
          115734.04 , 115734.04 ],
         [ 74011.16 , 229157.12 , 238920.22 , ..., 108074.04 ,
          123394.03 , 123394.03 ],
         [ 74011.16 , 196008.03 , 197179.97 , ..., 108074.04 ,
          123394.03 , 123394.03 ]],

        [[144179.56 , 175501.2  , 128346.01 , ..., 135501.55 ,
           82612.78 ,  82612.78 ],
         [159840.08 , 191162.72 , 191162.72 , ..., 202061.23 ,
          209911.   , 143611.64 ],
         [ 65529.938, 191162.72 , 191162.72 , ..., 221587.75 ,
          229436.06 , 145954.56 ],
         ...,
         [162481.3  , 213459.98 , 223223.06 , ..., 100414.04 ,
          115734.04 , 115734.04 ],
         [ 74011.16 , 229157.12 , 238920.22 , ..., 108074.04 ,
          123394.03 , 123394.03 ],
         [ 74011.16 , 196008.03 , 197179.97 , ..., 108074.04 ,
          123394.03 , 123394.03 ]],

        [[144179.56 , 175501.2  , 128346.01 , ..., 135501.55 ,
           82612.78 ,  82612.78 ],
         [159840.08 , 191162.72 , 191162.72 , ..., 202061.23 ,
          209911.   , 143611.64 ],
         [ 65529.938, 191162.72 , 191162.72 , ..., 221587.75 ,
          229436.06 , 145954.56 ],
         ...,
         [162481.3  , 213459.98 , 223223.06 , ..., 100414.04 ,
          115734.04 , 115734.04 ],
         [ 74011.16 , 229157.12 , 238920.22 , ..., 108074.04 ,
          123394.03 , 123394.03 ],
         [ 74011.16 , 196008.03 , 197179.97 , ..., 108074.04 ,
          123394.03 , 123394.03 ]],

        ...,

        [[144179.56 , 175501.2  , 128346.01 , ..., 135501.55 ,
           82612.78 ,  82612.78 ],
         [159840.08 , 191162.72 , 191162.72 , ..., 202061.23 ,
          209911.   , 143611.64 ],
         [ 65529.938, 191162.72 , 191162.72 , ..., 221587.75 ,
          229436.06 , 145954.56 ],
         ...,
         [162481.3  , 213459.98 , 223223.06 , ..., 100414.04 ,
          115734.04 , 115734.04 ],
         [ 74011.16 , 229157.12 , 238920.22 , ..., 108074.04 ,
          123394.03 , 123394.03 ],
         [ 74011.16 , 196008.03 , 197179.97 , ..., 108074.04 ,
          123394.03 , 123394.03 ]],

        [[144179.56 , 175501.2  , 128346.01 , ..., 135501.55 ,
           82612.78 ,  82612.78 ],
         [159840.08 , 191162.72 , 191162.72 , ..., 202061.23 ,
          209911.   , 143611.64 ],
         [ 65529.938, 191162.72 , 191162.72 , ..., 221587.75 ,
          229436.06 , 145954.56 ],
         ...,
         [162481.3  , 213459.98 , 223223.06 , ..., 100414.04 ,
          115734.04 , 115734.04 ],
         [ 74011.16 , 229157.12 , 238920.22 , ..., 108074.04 ,
          123394.03 , 123394.03 ],
         [ 74011.16 , 196008.03 , 197179.97 , ..., 108074.04 ,
          123394.03 , 123394.03 ]],

        [[144179.56 , 175501.2  , 128346.01 , ..., 135501.55 ,
           82612.78 ,  82612.78 ],
         [159840.08 , 191162.72 , 191162.72 , ..., 202061.23 ,
          209911.   , 143611.64 ],
         [ 65529.938, 191162.72 , 191162.72 , ..., 221587.75 ,
          229436.06 , 145954.56 ],
         ...,
         [162481.3  , 213459.98 , 223223.06 , ..., 100414.04 ,
          115734.04 , 115734.04 ],
         [ 74011.16 , 229157.12 , 238920.22 , ..., 108074.04 ,
          123394.03 , 123394.03 ],
         [ 74011.16 , 196008.03 , 197179.97 , ..., 108074.04 ,
          123394.03 , 123394.03 ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [4], 'to': [21]}
tf node:
{'name': 'sin', 'output': array([[[[-0.6371107 , -0.666031  , -0.57977885, ..., -0.9983951 ,
           0.9939599 ,  0.9939599 ],
         [ 0.8492151 ,  0.05260399,  0.05260399, ...,  0.27451128,
           0.7147978 , -0.01565081],
         [ 0.51727283,  0.05260399,  0.05260399, ..., -0.9748904 ,
          -0.6684903 ,  0.63699454],
         ...,
         [-0.9540352 ,  0.9711327 ,  0.33168754, ...,  0.634162  ,
          -0.78784186, -0.78784186],
         [ 0.9985272 ,  0.06787857,  0.8644967 , ..., -0.10996354,
          -0.9920978 , -0.9920978 ],
         [ 0.9985272 , -0.79801846,  0.8661467 , ..., -0.10996354,
          -0.9920978 , -0.9920978 ]],

        [[-0.6371107 , -0.666031  , -0.57977885, ..., -0.9983951 ,
           0.9939599 ,  0.9939599 ],
         [ 0.8492151 ,  0.05260399,  0.05260399, ...,  0.27451128,
           0.7147978 , -0.01565081],
         [ 0.51727283,  0.05260399,  0.05260399, ..., -0.9748904 ,
          -0.6684903 ,  0.63699454],
         ...,
         [-0.9540352 ,  0.9711327 ,  0.33168754, ...,  0.634162  ,
          -0.78784186, -0.78784186],
         [ 0.9985272 ,  0.06787857,  0.8644967 , ..., -0.10996354,
          -0.9920978 , -0.9920978 ],
         [ 0.9985272 , -0.79801846,  0.8661467 , ..., -0.10996354,
          -0.9920978 , -0.9920978 ]],

        [[-0.6371107 , -0.666031  , -0.57977885, ..., -0.9983951 ,
           0.9939599 ,  0.9939599 ],
         [ 0.8492151 ,  0.05260399,  0.05260399, ...,  0.27451128,
           0.7147978 , -0.01565081],
         [ 0.51727283,  0.05260399,  0.05260399, ..., -0.9748904 ,
          -0.6684903 ,  0.63699454],
         ...,
         [-0.9540352 ,  0.9711327 ,  0.33168754, ...,  0.634162  ,
          -0.78784186, -0.78784186],
         [ 0.9985272 ,  0.06787857,  0.8644967 , ..., -0.10996354,
          -0.9920978 , -0.9920978 ],
         [ 0.9985272 , -0.79801846,  0.8661467 , ..., -0.10996354,
          -0.9920978 , -0.9920978 ]],

        ...,

        [[-0.6371107 , -0.666031  , -0.57977885, ..., -0.9983951 ,
           0.9939599 ,  0.9939599 ],
         [ 0.8492151 ,  0.05260399,  0.05260399, ...,  0.27451128,
           0.7147978 , -0.01565081],
         [ 0.51727283,  0.05260399,  0.05260399, ..., -0.9748904 ,
          -0.6684903 ,  0.63699454],
         ...,
         [-0.9540352 ,  0.9711327 ,  0.33168754, ...,  0.634162  ,
          -0.78784186, -0.78784186],
         [ 0.9985272 ,  0.06787857,  0.8644967 , ..., -0.10996354,
          -0.9920978 , -0.9920978 ],
         [ 0.9985272 , -0.79801846,  0.8661467 , ..., -0.10996354,
          -0.9920978 , -0.9920978 ]],

        [[-0.6371107 , -0.666031  , -0.57977885, ..., -0.9983951 ,
           0.9939599 ,  0.9939599 ],
         [ 0.8492151 ,  0.05260399,  0.05260399, ...,  0.27451128,
           0.7147978 , -0.01565081],
         [ 0.51727283,  0.05260399,  0.05260399, ..., -0.9748904 ,
          -0.6684903 ,  0.63699454],
         ...,
         [-0.9540352 ,  0.9711327 ,  0.33168754, ...,  0.634162  ,
          -0.78784186, -0.78784186],
         [ 0.9985272 ,  0.06787857,  0.8644967 , ..., -0.10996354,
          -0.9920978 , -0.9920978 ],
         [ 0.9985272 , -0.79801846,  0.8661467 , ..., -0.10996354,
          -0.9920978 , -0.9920978 ]],

        [[-0.6371107 , -0.666031  , -0.57977885, ..., -0.9983951 ,
           0.9939599 ,  0.9939599 ],
         [ 0.8492151 ,  0.05260399,  0.05260399, ...,  0.27451128,
           0.7147978 , -0.01565081],
         [ 0.51727283,  0.05260399,  0.05260399, ..., -0.9748904 ,
          -0.6684903 ,  0.63699454],
         ...,
         [-0.9540352 ,  0.9711327 ,  0.33168754, ...,  0.634162  ,
          -0.78784186, -0.78784186],
         [ 0.9985272 ,  0.06787857,  0.8644967 , ..., -0.10996354,
          -0.9920978 , -0.9920978 ],
         [ 0.9985272 , -0.79801846,  0.8661467 , ..., -0.10996354,
          -0.9920978 , -0.9920978 ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [19], 'to': [5]}
ms node:
{'name': 'sin', 'output': array([[[[-0.6371107 , -0.666031  , -0.57977885, ..., -0.9983951 ,
           0.9939599 ,  0.9939599 ],
         [ 0.84921503,  0.05260399,  0.05260399, ...,  0.27451128,
           0.7147978 , -0.01565081],
         [ 0.51727283,  0.05260399,  0.05260399, ..., -0.9748904 ,
          -0.6684903 ,  0.63699454],
         ...,
         [-0.9540352 ,  0.9711327 ,  0.33168754, ...,  0.63416195,
          -0.78784186, -0.78784186],
         [ 0.9985272 ,  0.06787857,  0.8644967 , ..., -0.10996353,
          -0.9920978 , -0.9920978 ],
         [ 0.9985272 , -0.79801846,  0.8661466 , ..., -0.10996353,
          -0.9920978 , -0.9920978 ]],

        [[-0.6371107 , -0.666031  , -0.57977885, ..., -0.9983951 ,
           0.9939599 ,  0.9939599 ],
         [ 0.84921503,  0.05260399,  0.05260399, ...,  0.27451128,
           0.7147978 , -0.01565081],
         [ 0.51727283,  0.05260399,  0.05260399, ..., -0.9748904 ,
          -0.6684903 ,  0.63699454],
         ...,
         [-0.9540352 ,  0.9711327 ,  0.33168754, ...,  0.63416195,
          -0.78784186, -0.78784186],
         [ 0.9985272 ,  0.06787857,  0.8644967 , ..., -0.10996353,
          -0.9920978 , -0.9920978 ],
         [ 0.9985272 , -0.79801846,  0.8661466 , ..., -0.10996353,
          -0.9920978 , -0.9920978 ]],

        [[-0.6371107 , -0.666031  , -0.57977885, ..., -0.9983951 ,
           0.9939599 ,  0.9939599 ],
         [ 0.84921503,  0.05260399,  0.05260399, ...,  0.27451128,
           0.7147978 , -0.01565081],
         [ 0.51727283,  0.05260399,  0.05260399, ..., -0.9748904 ,
          -0.6684903 ,  0.63699454],
         ...,
         [-0.9540352 ,  0.9711327 ,  0.33168754, ...,  0.63416195,
          -0.78784186, -0.78784186],
         [ 0.9985272 ,  0.06787857,  0.8644967 , ..., -0.10996353,
          -0.9920978 , -0.9920978 ],
         [ 0.9985272 , -0.79801846,  0.8661466 , ..., -0.10996353,
          -0.9920978 , -0.9920978 ]],

        ...,

        [[-0.6371107 , -0.666031  , -0.57977885, ..., -0.9983951 ,
           0.9939599 ,  0.9939599 ],
         [ 0.84921503,  0.05260399,  0.05260399, ...,  0.27451128,
           0.7147978 , -0.01565081],
         [ 0.51727283,  0.05260399,  0.05260399, ..., -0.9748904 ,
          -0.6684903 ,  0.63699454],
         ...,
         [-0.9540352 ,  0.9711327 ,  0.33168754, ...,  0.63416195,
          -0.78784186, -0.78784186],
         [ 0.9985272 ,  0.06787857,  0.8644967 , ..., -0.10996353,
          -0.9920978 , -0.9920978 ],
         [ 0.9985272 , -0.79801846,  0.8661466 , ..., -0.10996353,
          -0.9920978 , -0.9920978 ]],

        [[-0.8968601 , -0.501862  , -0.5733958 , ..., -0.9268779 ,
           0.9969957 ,  0.9969957 ],
         [ 0.805413  ,  0.56423247,  0.56423247, ...,  0.79481727,
           0.9625713 ,  0.3222436 ],
         [ 0.5697168 ,  0.56423247,  0.56423247, ..., -0.9999519 ,
          -0.63290685,  0.50927585],
         ...,
         [-0.97089124,  0.9672871 , -0.25288224, ...,  0.6034827 ,
          -0.8067002 , -0.8067002 ],
         [ 0.9922484 , -0.7003011 ,  0.7348179 , ..., -0.14869538,
          -0.9876932 , -0.9876932 ],
         [ 0.9922484 , -0.8073368 ,  0.858232  , ..., -0.14869538,
          -0.9876932 , -0.9876932 ]],

        [[-0.8968601 , -0.501862  , -0.5733958 , ..., -0.9268779 ,
           0.9969957 ,  0.9969957 ],
         [ 0.805413  ,  0.56423247,  0.56423247, ...,  0.79481727,
           0.9625713 ,  0.3222436 ],
         [ 0.5697168 ,  0.56423247,  0.56423247, ..., -0.9999519 ,
          -0.63290685,  0.50927585],
         ...,
         [-0.97089124,  0.9672871 , -0.25288224, ...,  0.6034827 ,
          -0.8067002 , -0.8067002 ],
         [ 0.9922484 , -0.7003011 ,  0.7348179 , ..., -0.14869538,
          -0.9876932 , -0.9876932 ],
         [ 0.9922484 , -0.8073368 ,  0.858232  , ..., -0.14869538,
          -0.9876932 , -0.9876932 ]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [19], 'to': [5]}
torch node:
{'name': 'sin', 'output': array([[[[-0.8968601 , -0.501862  , -0.5733958 , ..., -0.9268779 ,
           0.9969957 ,  0.9969957 ],
         [ 0.805413  ,  0.56423247,  0.56423247, ...,  0.79481727,
           0.9625713 ,  0.3222436 ],
         [ 0.5697168 ,  0.56423247,  0.56423247, ..., -0.9999519 ,
          -0.63290685,  0.50927585],
         ...,
         [-0.97089124,  0.9672871 , -0.25288224, ...,  0.6034827 ,
          -0.8067002 , -0.8067002 ],
         [ 0.9922484 , -0.7003011 ,  0.7348179 , ..., -0.14869538,
          -0.9876932 , -0.9876932 ],
         [ 0.9922484 , -0.8073368 ,  0.858232  , ..., -0.14869538,
          -0.9876932 , -0.9876932 ]],

        [[-0.8968601 , -0.501862  , -0.5733958 , ..., -0.9268779 ,
           0.9969957 ,  0.9969957 ],
         [ 0.805413  ,  0.56423247,  0.56423247, ...,  0.79481727,
           0.9625713 ,  0.3222436 ],
         [ 0.5697168 ,  0.56423247,  0.56423247, ..., -0.9999519 ,
          -0.63290685,  0.50927585],
         ...,
         [-0.97089124,  0.9672871 , -0.25288224, ...,  0.6034827 ,
          -0.8067002 , -0.8067002 ],
         [ 0.9922484 , -0.7003011 ,  0.7348179 , ..., -0.14869538,
          -0.9876932 , -0.9876932 ],
         [ 0.9922484 , -0.8073368 ,  0.858232  , ..., -0.14869538,
          -0.9876932 , -0.9876932 ]],

        [[-0.8968601 , -0.501862  , -0.5733958 , ..., -0.9268779 ,
           0.9969957 ,  0.9969957 ],
         [ 0.805413  ,  0.56423247,  0.56423247, ...,  0.79481727,
           0.9625713 ,  0.3222436 ],
         [ 0.5697168 ,  0.56423247,  0.56423247, ..., -0.9999519 ,
          -0.63290685,  0.50927585],
         ...,
         [-0.97089124,  0.9672871 , -0.25288224, ...,  0.6034827 ,
          -0.8067002 , -0.8067002 ],
         [ 0.9922484 , -0.7003011 ,  0.7348179 , ..., -0.14869538,
          -0.9876932 , -0.9876932 ],
         [ 0.9922484 , -0.8073368 ,  0.858232  , ..., -0.14869538,
          -0.9876932 , -0.9876932 ]],

        ...,

        [[-0.8968601 , -0.501862  , -0.5733958 , ..., -0.9268779 ,
           0.9969957 ,  0.9969957 ],
         [ 0.805413  ,  0.56423247,  0.56423247, ...,  0.79481727,
           0.9625713 ,  0.3222436 ],
         [ 0.5697168 ,  0.56423247,  0.56423247, ..., -0.9999519 ,
          -0.63290685,  0.50927585],
         ...,
         [-0.97089124,  0.9672871 , -0.25288224, ...,  0.6034827 ,
          -0.8067002 , -0.8067002 ],
         [ 0.9922484 , -0.7003011 ,  0.7348179 , ..., -0.14869538,
          -0.9876932 , -0.9876932 ],
         [ 0.9922484 , -0.8073368 ,  0.858232  , ..., -0.14869538,
          -0.9876932 , -0.9876932 ]],

        [[-0.8968601 , -0.501862  , -0.5733958 , ..., -0.9268779 ,
           0.9969957 ,  0.9969957 ],
         [ 0.805413  ,  0.56423247,  0.56423247, ...,  0.79481727,
           0.9625713 ,  0.3222436 ],
         [ 0.5697168 ,  0.56423247,  0.56423247, ..., -0.9999519 ,
          -0.63290685,  0.50927585],
         ...,
         [-0.97089124,  0.9672871 , -0.25288224, ...,  0.6034827 ,
          -0.8067002 , -0.8067002 ],
         [ 0.9922484 , -0.7003011 ,  0.7348179 , ..., -0.14869538,
          -0.9876932 , -0.9876932 ],
         [ 0.9922484 , -0.8073368 ,  0.858232  , ..., -0.14869538,
          -0.9876932 , -0.9876932 ]],

        [[-0.8968601 , -0.501862  , -0.5733958 , ..., -0.9268779 ,
           0.9969957 ,  0.9969957 ],
         [ 0.805413  ,  0.56423247,  0.56423247, ...,  0.79481727,
           0.9625713 ,  0.3222436 ],
         [ 0.5697168 ,  0.56423247,  0.56423247, ..., -0.9999519 ,
          -0.63290685,  0.50927585],
         ...,
         [-0.97089124,  0.9672871 , -0.25288224, ...,  0.6034827 ,
          -0.8067002 , -0.8067002 ],
         [ 0.9922484 , -0.7003011 ,  0.7348179 , ..., -0.14869538,
          -0.9876932 , -0.9876932 ],
         [ 0.9922484 , -0.8073368 ,  0.858232  , ..., -0.14869538,
          -0.9876932 , -0.9876932 ]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [19], 'to': [5]}

generate models:309

analyse output arrays in iter:336

pre layer res:
7:log
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [12], 'to': [4]}
tf node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [7], 'to': [13]}
ms node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [7], 'to': [13]}
torch node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [7], 'to': [13]}

generate models:319

analyse output arrays in iter:342

pre layer res:
20:square
{'name': 'square', 'output': array([[[[          inf,           inf,           inf, ...,
          2.5558631e+31, 3.4635135e+30, 4.6812298e+29],
         [          inf,           inf,           inf, ...,
          1.0304517e+34, 1.0304517e+34, 1.3945627e+33],
         [          inf,           inf,           inf, ...,
          3.0713757e+37, 4.1566536e+36, 7.6131951e+34],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
          2.5558631e+31, 3.4635135e+30, 4.6812298e+29],
         [          inf,           inf,           inf, ...,
          1.0304517e+34, 1.0304517e+34, 1.3945627e+33],
         [          inf,           inf,           inf, ...,
          3.0713757e+37, 4.1566536e+36, 7.6131951e+34],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
          2.5558631e+31, 3.4635135e+30, 4.6812298e+29],
         [          inf,           inf,           inf, ...,
          1.0304517e+34, 1.0304517e+34, 1.3945627e+33],
         [          inf,           inf,           inf, ...,
          3.0713757e+37, 4.1566536e+36, 7.6131951e+34],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]],

        ...,

        [[          inf,           inf,           inf, ...,
          2.5558631e+31, 3.4635135e+30, 4.6812298e+29],
         [          inf,           inf,           inf, ...,
          1.0304517e+34, 1.0304517e+34, 1.3945627e+33],
         [          inf,           inf,           inf, ...,
          3.0713757e+37, 4.1566536e+36, 7.6131951e+34],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
          2.5558631e+31, 3.4635135e+30, 4.6812298e+29],
         [          inf,           inf,           inf, ...,
          1.0304517e+34, 1.0304517e+34, 1.3945627e+33],
         [          inf,           inf,           inf, ...,
          3.0713757e+37, 4.1566536e+36, 7.6131951e+34],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
          2.5558631e+31, 3.4635135e+30, 4.6812298e+29],
         [          inf,           inf,           inf, ...,
          1.0304517e+34, 1.0304517e+34, 1.3945627e+33],
         [          inf,           inf,           inf, ...,
          3.0713757e+37, 4.1566536e+36, 7.6131951e+34],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [5], 'to': [21, 24]}
tf node:
{'name': 'sin', 'output': array([[[[        nan,         nan,         nan, ...,  0.8172245 ,
           0.9993728 , -0.84737784],
         [        nan,         nan,         nan, ...,  0.9970098 ,
           0.9970098 ,  0.72646844],
         [        nan,         nan,         nan, ...,  0.94553465,
          -0.5495501 , -0.9352811 ],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,  0.8172245 ,
           0.9993728 , -0.84737784],
         [        nan,         nan,         nan, ...,  0.9970098 ,
           0.9970098 ,  0.72646844],
         [        nan,         nan,         nan, ...,  0.94553465,
          -0.5495501 , -0.9352811 ],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,  0.8172245 ,
           0.9993728 , -0.84737784],
         [        nan,         nan,         nan, ...,  0.9970098 ,
           0.9970098 ,  0.72646844],
         [        nan,         nan,         nan, ...,  0.94553465,
          -0.5495501 , -0.9352811 ],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        ...,

        [[        nan,         nan,         nan, ...,  0.8172245 ,
           0.9993728 , -0.84737784],
         [        nan,         nan,         nan, ...,  0.9970098 ,
           0.9970098 ,  0.72646844],
         [        nan,         nan,         nan, ...,  0.94553465,
          -0.5495501 , -0.9352811 ],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,  0.8172245 ,
           0.9993728 , -0.84737784],
         [        nan,         nan,         nan, ...,  0.9970098 ,
           0.9970098 ,  0.72646844],
         [        nan,         nan,         nan, ...,  0.94553465,
          -0.5495501 , -0.9352811 ],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,  0.8172245 ,
           0.9993728 , -0.84737784],
         [        nan,         nan,         nan, ...,  0.9970098 ,
           0.9970098 ,  0.72646844],
         [        nan,         nan,         nan, ...,  0.94553465,
          -0.5495501 , -0.9352811 ],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [20], 'to': [23]}
ms node:
{'name': 'sin', 'output': array([[[[        nan,         nan,         nan, ...,  0.16636142,
          -0.9828556 , -0.66416734],
         [        nan,         nan,         nan, ..., -0.9929972 ,
          -0.9929972 , -0.9871578 ],
         [        nan,         nan,         nan, ..., -0.78529215,
           0.6778143 ,  0.39586043],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,  0.16636142,
          -0.9828556 , -0.66416734],
         [        nan,         nan,         nan, ..., -0.9929972 ,
          -0.9929972 , -0.9871578 ],
         [        nan,         nan,         nan, ..., -0.78529215,
           0.6778143 ,  0.39586043],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,  0.16636142,
          -0.9828556 , -0.66416734],
         [        nan,         nan,         nan, ..., -0.9929972 ,
          -0.9929972 , -0.9871578 ],
         [        nan,         nan,         nan, ..., -0.78529215,
           0.6778143 ,  0.39586043],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        ...,

        [[        nan,         nan,         nan, ...,  0.16636142,
          -0.9828556 , -0.66416734],
         [        nan,         nan,         nan, ..., -0.9929972 ,
          -0.9929972 , -0.9871578 ],
         [        nan,         nan,         nan, ..., -0.78529215,
           0.6778143 ,  0.39586043],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,  0.16636142,
          -0.9161562 , -0.76808316],
         [        nan,         nan,         nan, ...,  0.89186   ,
           0.89186   , -0.99325436],
         [        nan,         nan,         nan, ...,  0.5807281 ,
           0.82566357,  0.89768744],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,  0.16636142,
          -0.9161562 , -0.76808316],
         [        nan,         nan,         nan, ...,  0.89186   ,
           0.89186   , -0.99325436],
         [        nan,         nan,         nan, ...,  0.5807281 ,
           0.82566357,  0.89768744],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [20], 'to': [23]}
torch node:
{'name': 'sin', 'output': array([[[[        nan,         nan,         nan, ...,  0.02957913,
           0.9993728 , -0.84737784],
         [        nan,         nan,         nan, ...,  0.9970098 ,
           0.9970098 ,  0.50610065],
         [        nan,         nan,         nan, ...,  0.94553465,
          -0.54955006,  0.99974287],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,  0.02957913,
           0.9993728 , -0.84737784],
         [        nan,         nan,         nan, ...,  0.9970098 ,
           0.9970098 ,  0.50610065],
         [        nan,         nan,         nan, ...,  0.94553465,
          -0.54955006,  0.99974287],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,  0.02957913,
           0.9993728 , -0.84737784],
         [        nan,         nan,         nan, ...,  0.9970098 ,
           0.9970098 ,  0.50610065],
         [        nan,         nan,         nan, ...,  0.94553465,
          -0.54955006,  0.99974287],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        ...,

        [[        nan,         nan,         nan, ...,  0.02957913,
           0.9993728 , -0.84737784],
         [        nan,         nan,         nan, ...,  0.9970098 ,
           0.9970098 ,  0.50610065],
         [        nan,         nan,         nan, ...,  0.94553465,
          -0.54955006,  0.99974287],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,  0.02957913,
           0.9993728 , -0.84737784],
         [        nan,         nan,         nan, ...,  0.9970098 ,
           0.9970098 ,  0.50610065],
         [        nan,         nan,         nan, ...,  0.94553465,
          -0.54955006,  0.99974287],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,  0.02957913,
           0.9993728 , -0.84737784],
         [        nan,         nan,         nan, ...,  0.9970098 ,
           0.9970098 ,  0.50610065],
         [        nan,         nan,         nan, ...,  0.94553465,
          -0.54955006,  0.99974287],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [20], 'to': [23]}

generate models:325

analyse output arrays in iter:371

pre layer res:
8:add
{'name': 'add', 'output': array([[[[2145.8345 , 2149.133  , 2149.133  , ..., 1610.8733 ,
          1654.2156 , 1654.2156 ],
         [2145.8345 , 2149.133  , 2149.133  , ..., 1610.8733 ,
          1654.2156 , 1654.2156 ],
         [2145.8345 , 2149.133  , 2149.133  , ..., 1610.8733 ,
          1654.2156 , 1654.2156 ],
         ...,
         [2019.5474 , 2108.6409 , 2108.6409 , ..., 1570.3813 ,
          1613.7236 , 1613.7236 ],
         [2019.5474 , 2108.6409 , 2108.6409 , ..., 1570.3813 ,
          1613.7236 , 1613.7236 ],
         [2019.5474 , 2108.6409 , 2108.6409 , ..., 1570.3813 ,
          1613.7236 , 1613.7236 ]],

        [[2145.8345 , 2149.133  , 2149.133  , ..., 1610.8733 ,
          1654.2156 , 1654.2156 ],
         [2145.8345 , 2149.133  , 2149.133  , ..., 1610.8733 ,
          1654.2156 , 1654.2156 ],
         [2145.8345 , 2149.133  , 2149.133  , ..., 1610.8733 ,
          1654.2156 , 1654.2156 ],
         ...,
         [2019.5474 , 2108.6409 , 2108.6409 , ..., 1570.3813 ,
          1613.7236 , 1613.7236 ],
         [2019.5474 , 2108.6409 , 2108.6409 , ..., 1570.3813 ,
          1613.7236 , 1613.7236 ],
         [2019.5474 , 2108.6409 , 2108.6409 , ..., 1570.3813 ,
          1613.7236 , 1613.7236 ]],

        [[2145.8345 , 2149.133  , 2149.133  , ..., 1610.8733 ,
          1654.2156 , 1654.2156 ],
         [2145.8345 , 2149.133  , 2149.133  , ..., 1610.8733 ,
          1654.2156 , 1654.2156 ],
         [2145.8345 , 2149.133  , 2149.133  , ..., 1610.8733 ,
          1654.2156 , 1654.2156 ],
         ...,
         [2019.5474 , 2108.6409 , 2108.6409 , ..., 1570.3813 ,
          1613.7236 , 1613.7236 ],
         [2019.5474 , 2108.6409 , 2108.6409 , ..., 1570.3813 ,
          1613.7236 , 1613.7236 ],
         [2019.5474 , 2108.6409 , 2108.6409 , ..., 1570.3813 ,
          1613.7236 , 1613.7236 ]],

        ...,

        [[ 126.2871 ,  126.2871 ,  126.2871 , ...,  126.2871 ,
           126.2871 ,  126.2871 ],
         [ 126.2871 ,  126.2871 ,  126.2871 , ...,  126.2871 ,
           126.2871 ,  126.2871 ],
         [ 126.2871 ,  126.2871 ,  126.2871 , ...,  126.2871 ,
           126.2871 ,  126.2871 ],
         ...,
         [   0.     ,   85.79506,   85.79506, ...,   85.79506,
            85.79506,   85.79506],
         [   0.     ,   85.79506,   85.79506, ...,   85.79506,
            85.79506,   85.79506],
         [   0.     ,   85.79506,   85.79506, ...,   85.79506,
            85.79506,   85.79506]],

        [[ 126.2871 ,  126.2871 ,  126.2871 , ...,  126.2871 ,
           126.2871 ,  126.2871 ],
         [ 126.2871 ,  126.2871 ,  126.2871 , ...,  126.2871 ,
           126.2871 ,  126.2871 ],
         [ 126.2871 ,  126.2871 ,  126.2871 , ...,  126.2871 ,
           126.2871 ,  126.2871 ],
         ...,
         [   0.     ,   85.79506,   85.79506, ...,   85.79506,
            85.79506,   85.79506],
         [   0.     ,   85.79506,   85.79506, ...,   85.79506,
            85.79506,   85.79506],
         [   0.     ,   85.79506,   85.79506, ...,   85.79506,
            85.79506,   85.79506]],

        [[ 126.2871 ,  126.2871 ,  126.2871 , ...,  126.2871 ,
           126.2871 ,  126.2871 ],
         [ 126.2871 ,  126.2871 ,  126.2871 , ...,  126.2871 ,
           126.2871 ,  126.2871 ],
         [ 126.2871 ,  126.2871 ,  126.2871 , ...,  126.2871 ,
           126.2871 ,  126.2871 ],
         ...,
         [   0.     ,   85.79506,   85.79506, ...,   85.79506,
            85.79506,   85.79506],
         [   0.     ,   85.79506,   85.79506, ...,   85.79506,
            85.79506,   85.79506],
         [   0.     ,   85.79506,   85.79506, ...,   85.79506,
            85.79506,   85.79506]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 32, 32]), 'from': [17, 9], 'to': [5]}
tf node:
{'name': 'sin', 'output': array([[[[-0.12635162,  0.27989197,  0.27989197, ...,  0.69162774,
           0.9860805 ,  0.9860805 ],
         [-0.12635162,  0.27989197,  0.27989197, ...,  0.69162774,
           0.9860805 ,  0.9860805 ],
         [-0.12635162,  0.27989197,  0.27989197, ...,  0.69162774,
           0.9860805 ,  0.9860805 ],
         ...,
         [ 0.47653833, -0.59091985, -0.59091985, ..., -0.40317082,
          -0.8698959 , -0.8698959 ],
         [ 0.47653833, -0.59091985, -0.59091985, ..., -0.40317082,
          -0.8698959 , -0.8698959 ],
         [ 0.47653833, -0.59091985, -0.59091985, ..., -0.40317082,
          -0.8698959 , -0.8698959 ]],

        [[-0.12635162,  0.27989197,  0.27989197, ...,  0.69162774,
           0.9860805 ,  0.9860805 ],
         [-0.12635162,  0.27989197,  0.27989197, ...,  0.69162774,
           0.9860805 ,  0.9860805 ],
         [-0.12635162,  0.27989197,  0.27989197, ...,  0.69162774,
           0.9860805 ,  0.9860805 ],
         ...,
         [ 0.47653833, -0.59091985, -0.59091985, ..., -0.40317082,
          -0.8698959 , -0.8698959 ],
         [ 0.47653833, -0.59091985, -0.59091985, ..., -0.40317082,
          -0.8698959 , -0.8698959 ],
         [ 0.47653833, -0.59091985, -0.59091985, ..., -0.40317082,
          -0.8698959 , -0.8698959 ]],

        [[-0.12635162,  0.27989197,  0.27989197, ...,  0.69162774,
           0.9860805 ,  0.9860805 ],
         [-0.12635162,  0.27989197,  0.27989197, ...,  0.69162774,
           0.9860805 ,  0.9860805 ],
         [-0.12635162,  0.27989197,  0.27989197, ...,  0.69162774,
           0.9860805 ,  0.9860805 ],
         ...,
         [ 0.47653833, -0.59091985, -0.59091985, ..., -0.40317082,
          -0.8698959 , -0.8698959 ],
         [ 0.47653833, -0.59091985, -0.59091985, ..., -0.40317082,
          -0.8698959 , -0.8698959 ],
         [ 0.47653833, -0.59091985, -0.59091985, ..., -0.40317082,
          -0.8698959 , -0.8698959 ]],

        ...,

        [[ 0.5837954 ,  0.5837954 ,  0.5837954 , ...,  0.5837954 ,
           0.5837954 ,  0.5837954 ],
         [ 0.5837954 ,  0.5837954 ,  0.5837954 , ...,  0.5837954 ,
           0.5837954 ,  0.5837954 ],
         [ 0.5837954 ,  0.5837954 ,  0.5837954 , ...,  0.5837954 ,
           0.5837954 ,  0.5837954 ],
         ...,
         [ 0.        , -0.8260471 , -0.8260471 , ..., -0.8260471 ,
          -0.8260471 , -0.8260471 ],
         [ 0.        , -0.8260471 , -0.8260471 , ..., -0.8260471 ,
          -0.8260471 , -0.8260471 ],
         [ 0.        , -0.8260471 , -0.8260471 , ..., -0.8260471 ,
          -0.8260471 , -0.8260471 ]],

        [[ 0.5837954 ,  0.5837954 ,  0.5837954 , ...,  0.5837954 ,
           0.5837954 ,  0.5837954 ],
         [ 0.5837954 ,  0.5837954 ,  0.5837954 , ...,  0.5837954 ,
           0.5837954 ,  0.5837954 ],
         [ 0.5837954 ,  0.5837954 ,  0.5837954 , ...,  0.5837954 ,
           0.5837954 ,  0.5837954 ],
         ...,
         [ 0.        , -0.8260471 , -0.8260471 , ..., -0.8260471 ,
          -0.8260471 , -0.8260471 ],
         [ 0.        , -0.8260471 , -0.8260471 , ..., -0.8260471 ,
          -0.8260471 , -0.8260471 ],
         [ 0.        , -0.8260471 , -0.8260471 , ..., -0.8260471 ,
          -0.8260471 , -0.8260471 ]],

        [[ 0.5837954 ,  0.5837954 ,  0.5837954 , ...,  0.5837954 ,
           0.5837954 ,  0.5837954 ],
         [ 0.5837954 ,  0.5837954 ,  0.5837954 , ...,  0.5837954 ,
           0.5837954 ,  0.5837954 ],
         [ 0.5837954 ,  0.5837954 ,  0.5837954 , ...,  0.5837954 ,
           0.5837954 ,  0.5837954 ],
         ...,
         [ 0.        , -0.8260471 , -0.8260471 , ..., -0.8260471 ,
          -0.8260471 , -0.8260471 ],
         [ 0.        , -0.8260471 , -0.8260471 , ..., -0.8260471 ,
          -0.8260471 , -0.8260471 ],
         [ 0.        , -0.8260471 , -0.8260471 , ..., -0.8260471 ,
          -0.8260471 , -0.8260471 ]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 32, 32]), 'from': [8], 'to': [18]}
ms node:
{'name': 'sin', 'output': array([[[[-0.12610944,  0.27965757,  0.27965757, ...,  0.6916277 ,
           0.98610085,  0.98610085],
         [-0.12610944,  0.27965757,  0.27965757, ...,  0.6916277 ,
           0.98610085,  0.98610085],
         [-0.12610944,  0.27965757,  0.27965757, ...,  0.6916277 ,
           0.98610085,  0.98610085],
         ...,
         [ 0.47664565, -0.59091985, -0.59091985, ..., -0.40317085,
          -0.8699561 , -0.8699561 ],
         [ 0.47664565, -0.59091985, -0.59091985, ..., -0.40317085,
          -0.8699561 , -0.8699561 ],
         [ 0.47664565, -0.59091985, -0.59091985, ..., -0.40317085,
          -0.8699561 , -0.8699561 ]],

        [[-0.12610944,  0.27965757,  0.27965757, ...,  0.6916277 ,
           0.98610085,  0.98610085],
         [-0.12610944,  0.27965757,  0.27965757, ...,  0.6916277 ,
           0.98610085,  0.98610085],
         [-0.12610944,  0.27965757,  0.27965757, ...,  0.6916277 ,
           0.98610085,  0.98610085],
         ...,
         [ 0.47664565, -0.59091985, -0.59091985, ..., -0.40317085,
          -0.8699561 , -0.8699561 ],
         [ 0.47664565, -0.59091985, -0.59091985, ..., -0.40317085,
          -0.8699561 , -0.8699561 ],
         [ 0.47664565, -0.59091985, -0.59091985, ..., -0.40317085,
          -0.8699561 , -0.8699561 ]],

        [[-0.12610944,  0.27965757,  0.27965757, ...,  0.6916277 ,
           0.98610085,  0.98610085],
         [-0.12610944,  0.27965757,  0.27965757, ...,  0.6916277 ,
           0.98610085,  0.98610085],
         [-0.12610944,  0.27965757,  0.27965757, ...,  0.6916277 ,
           0.98610085,  0.98610085],
         ...,
         [ 0.47664565, -0.59091985, -0.59091985, ..., -0.40317085,
          -0.8699561 , -0.8699561 ],
         [ 0.47664565, -0.59091985, -0.59091985, ..., -0.40317085,
          -0.8699561 , -0.8699561 ],
         [ 0.47664565, -0.59091985, -0.59091985, ..., -0.40317085,
          -0.8699561 , -0.8699561 ]],

        ...,

        [[ 0.5837954 ,  0.5837954 ,  0.5837954 , ...,  0.5837954 ,
           0.5837954 ,  0.5837954 ],
         [ 0.5837954 ,  0.5837954 ,  0.5837954 , ...,  0.5837954 ,
           0.5837954 ,  0.5837954 ],
         [ 0.5837954 ,  0.5837954 ,  0.5837954 , ...,  0.5837954 ,
           0.5837954 ,  0.5837954 ],
         ...,
         [ 0.        , -0.8260471 , -0.8260471 , ..., -0.8260471 ,
          -0.8260471 , -0.8260471 ],
         [ 0.        , -0.8260471 , -0.8260471 , ..., -0.8260471 ,
          -0.8260471 , -0.8260471 ],
         [ 0.        , -0.8260471 , -0.8260471 , ..., -0.8260471 ,
          -0.8260471 , -0.8260471 ]],

        [[ 0.5837954 ,  0.5837954 ,  0.5837954 , ...,  0.5837954 ,
           0.5837954 ,  0.5837954 ],
         [ 0.5837954 ,  0.5837954 ,  0.5837954 , ...,  0.5837954 ,
           0.5837954 ,  0.5837954 ],
         [ 0.5837954 ,  0.5837954 ,  0.5837954 , ...,  0.5837954 ,
           0.5837954 ,  0.5837954 ],
         ...,
         [ 0.        , -0.8260471 , -0.8260471 , ..., -0.8260471 ,
          -0.8260471 , -0.8260471 ],
         [ 0.        , -0.8260471 , -0.8260471 , ..., -0.8260471 ,
          -0.8260471 , -0.8260471 ],
         [ 0.        , -0.8260471 , -0.8260471 , ..., -0.8260471 ,
          -0.8260471 , -0.8260471 ]],

        [[ 0.5837954 ,  0.5837954 ,  0.5837954 , ...,  0.5837954 ,
           0.5837954 ,  0.5837954 ],
         [ 0.5837954 ,  0.5837954 ,  0.5837954 , ...,  0.5837954 ,
           0.5837954 ,  0.5837954 ],
         [ 0.5837954 ,  0.5837954 ,  0.5837954 , ...,  0.5837954 ,
           0.5837954 ,  0.5837954 ],
         ...,
         [ 0.        , -0.8260471 , -0.8260471 , ..., -0.8260471 ,
          -0.8260471 , -0.8260471 ],
         [ 0.        , -0.8260471 , -0.8260471 , ..., -0.8260471 ,
          -0.8260471 , -0.8260471 ],
         [ 0.        , -0.8260471 , -0.8260471 , ..., -0.8260471 ,
          -0.8260471 , -0.8260471 ]]]], dtype=float32), 'output_shape': (1, 256, 32, 32), 'from': [8], 'to': [18]}
torch node:
{'name': 'sin', 'output': array([[[[-0.12635162,  0.27989197,  0.27989197, ...,  0.6916277 ,
           0.98610085,  0.98610085],
         [-0.12635162,  0.27989197,  0.27989197, ...,  0.6916277 ,
           0.98610085,  0.98610085],
         [-0.12635162,  0.27989197,  0.27989197, ...,  0.6916277 ,
           0.98610085,  0.98610085],
         ...,
         [ 0.47653833, -0.59091985, -0.59091985, ..., -0.40317085,
          -0.8699561 , -0.8699561 ],
         [ 0.47653833, -0.59091985, -0.59091985, ..., -0.40317085,
          -0.8699561 , -0.8699561 ],
         [ 0.47653833, -0.59091985, -0.59091985, ..., -0.40317085,
          -0.8699561 , -0.8699561 ]],

        [[-0.12635162,  0.27989197,  0.27989197, ...,  0.6916277 ,
           0.98610085,  0.98610085],
         [-0.12635162,  0.27989197,  0.27989197, ...,  0.6916277 ,
           0.98610085,  0.98610085],
         [-0.12635162,  0.27989197,  0.27989197, ...,  0.6916277 ,
           0.98610085,  0.98610085],
         ...,
         [ 0.47653833, -0.59091985, -0.59091985, ..., -0.40317085,
          -0.8699561 , -0.8699561 ],
         [ 0.47653833, -0.59091985, -0.59091985, ..., -0.40317085,
          -0.8699561 , -0.8699561 ],
         [ 0.47653833, -0.59091985, -0.59091985, ..., -0.40317085,
          -0.8699561 , -0.8699561 ]],

        [[-0.12635162,  0.27989197,  0.27989197, ...,  0.6916277 ,
           0.98610085,  0.98610085],
         [-0.12635162,  0.27989197,  0.27989197, ...,  0.6916277 ,
           0.98610085,  0.98610085],
         [-0.12635162,  0.27989197,  0.27989197, ...,  0.6916277 ,
           0.98610085,  0.98610085],
         ...,
         [ 0.47653833, -0.59091985, -0.59091985, ..., -0.40317085,
          -0.8699561 , -0.8699561 ],
         [ 0.47653833, -0.59091985, -0.59091985, ..., -0.40317085,
          -0.8699561 , -0.8699561 ],
         [ 0.47653833, -0.59091985, -0.59091985, ..., -0.40317085,
          -0.8699561 , -0.8699561 ]],

        ...,

        [[ 0.5837954 ,  0.5837954 ,  0.5837954 , ...,  0.5837954 ,
           0.5837954 ,  0.5837954 ],
         [ 0.5837954 ,  0.5837954 ,  0.5837954 , ...,  0.5837954 ,
           0.5837954 ,  0.5837954 ],
         [ 0.5837954 ,  0.5837954 ,  0.5837954 , ...,  0.5837954 ,
           0.5837954 ,  0.5837954 ],
         ...,
         [ 0.        , -0.8260471 , -0.8260471 , ..., -0.8260471 ,
          -0.8260471 , -0.8260471 ],
         [ 0.        , -0.8260471 , -0.8260471 , ..., -0.8260471 ,
          -0.8260471 , -0.8260471 ],
         [ 0.        , -0.8260471 , -0.8260471 , ..., -0.8260471 ,
          -0.8260471 , -0.8260471 ]],

        [[ 0.5837954 ,  0.5837954 ,  0.5837954 , ...,  0.5837954 ,
           0.5837954 ,  0.5837954 ],
         [ 0.5837954 ,  0.5837954 ,  0.5837954 , ...,  0.5837954 ,
           0.5837954 ,  0.5837954 ],
         [ 0.5837954 ,  0.5837954 ,  0.5837954 , ...,  0.5837954 ,
           0.5837954 ,  0.5837954 ],
         ...,
         [ 0.        , -0.8260471 , -0.8260471 , ..., -0.8260471 ,
          -0.8260471 , -0.8260471 ],
         [ 0.        , -0.8260471 , -0.8260471 , ..., -0.8260471 ,
          -0.8260471 , -0.8260471 ],
         [ 0.        , -0.8260471 , -0.8260471 , ..., -0.8260471 ,
          -0.8260471 , -0.8260471 ]],

        [[ 0.5837954 ,  0.5837954 ,  0.5837954 , ...,  0.5837954 ,
           0.5837954 ,  0.5837954 ],
         [ 0.5837954 ,  0.5837954 ,  0.5837954 , ...,  0.5837954 ,
           0.5837954 ,  0.5837954 ],
         [ 0.5837954 ,  0.5837954 ,  0.5837954 , ...,  0.5837954 ,
           0.5837954 ,  0.5837954 ],
         ...,
         [ 0.        , -0.8260471 , -0.8260471 , ..., -0.8260471 ,
          -0.8260471 , -0.8260471 ],
         [ 0.        , -0.8260471 , -0.8260471 , ..., -0.8260471 ,
          -0.8260471 , -0.8260471 ],
         [ 0.        , -0.8260471 , -0.8260471 , ..., -0.8260471 ,
          -0.8260471 , -0.8260471 ]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 32, 32]), 'from': [8], 'to': [18]}

generate models:353

analyse output arrays in iter:380

pre layer res:
5:reshape
{'name': 'reshape', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [4], 'to': [6]}
tf node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [5], 'to': [19, 20]}
ms node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [5], 'to': [19, 20]}
torch node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [5], 'to': [19, 20]}

generate models:362

analyse output arrays in iter:388

pre layer res:
12:conv2d
{'name': 'conv2d', 'output': array([[[[14975.519, 14975.559, 14975.562, ..., 19519.334, 19519.334,
          19519.324],
         [14975.425, 14975.492, 14975.521, ..., 19519.275, 19519.275,
          19519.275],
         [19653.842, 19653.906, 19653.938, ..., 19519.266, 19519.275,
          19519.285],
         ...,
         [17753.   , 17906.162, 17906.209, ..., 20790.404, 18637.09 ,
          18637.031],
         [17753.031, 17906.242, 17906.482, ..., 20790.363, 18637.041,
          18636.96 ],
         [17753.127, 17753.79 , 14277.616, ...,  7143.428, 14763.171,
          14763.196]],

        [[14975.519, 14975.559, 14975.562, ..., 19519.334, 19519.334,
          19519.324],
         [14975.425, 14975.492, 14975.521, ..., 19519.275, 19519.275,
          19519.275],
         [19653.842, 19653.906, 19653.938, ..., 19519.266, 19519.275,
          19519.285],
         ...,
         [17753.   , 17906.162, 17906.209, ..., 20790.404, 18637.09 ,
          18637.031],
         [17753.031, 17906.242, 17906.482, ..., 20790.363, 18637.041,
          18636.96 ],
         [17753.127, 17753.79 , 14277.616, ...,  7143.428, 14763.171,
          14763.196]],

        [[14975.519, 14975.559, 14975.562, ..., 19519.334, 19519.334,
          19519.324],
         [14975.425, 14975.492, 14975.521, ..., 19519.275, 19519.275,
          19519.275],
         [19653.842, 19653.906, 19653.938, ..., 19519.266, 19519.275,
          19519.285],
         ...,
         [17753.   , 17906.162, 17906.209, ..., 20790.404, 18637.09 ,
          18637.031],
         [17753.031, 17906.242, 17906.482, ..., 20790.363, 18637.041,
          18636.96 ],
         [17753.127, 17753.79 , 14277.616, ...,  7143.428, 14763.171,
          14763.196]],

        ...,

        [[14975.519, 14975.559, 14975.562, ..., 19519.334, 19519.334,
          19519.324],
         [14975.425, 14975.492, 14975.521, ..., 19519.275, 19519.275,
          19519.275],
         [19653.842, 19653.906, 19653.938, ..., 19519.266, 19519.275,
          19519.285],
         ...,
         [17753.   , 17906.162, 17906.209, ..., 20790.404, 18637.09 ,
          18637.031],
         [17753.031, 17906.242, 17906.482, ..., 20790.363, 18637.041,
          18636.96 ],
         [17753.127, 17753.79 , 14277.616, ...,  7143.428, 14763.171,
          14763.196]],

        [[14975.519, 14975.559, 14975.562, ..., 19519.334, 19519.334,
          19519.324],
         [14975.425, 14975.492, 14975.521, ..., 19519.275, 19519.275,
          19519.275],
         [19653.842, 19653.906, 19653.938, ..., 19519.266, 19519.275,
          19519.285],
         ...,
         [17753.   , 17906.162, 17906.209, ..., 20790.404, 18637.09 ,
          18637.031],
         [17753.031, 17906.242, 17906.482, ..., 20790.363, 18637.041,
          18636.96 ],
         [17753.127, 17753.79 , 14277.616, ...,  7143.428, 14763.171,
          14763.196]],

        [[14975.519, 14975.559, 14975.562, ..., 19519.334, 19519.334,
          19519.324],
         [14975.425, 14975.492, 14975.521, ..., 19519.275, 19519.275,
          19519.275],
         [19653.842, 19653.906, 19653.938, ..., 19519.266, 19519.275,
          19519.285],
         ...,
         [17753.   , 17906.162, 17906.209, ..., 20790.404, 18637.09 ,
          18637.031],
         [17753.031, 17906.242, 17906.482, ..., 20790.363, 18637.041,
          18636.96 ],
         [17753.127, 17753.79 , 14277.616, ...,  7143.428, 14763.171,
          14763.196]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [11], 'to': [26]}
tf node:
{'name': 'sin', 'output': array([[[[ 0.43822676,  0.40189546,  0.39921108, ..., -0.5800806 ,
          -0.5800806 , -0.5720984 ],
         [ 0.52044755,  0.4617722 ,  0.4355915 , ..., -0.53138435,
          -0.53138435, -0.53138435],
         [ 0.03814676,  0.10242918,  0.13345975, ..., -0.52308637,
          -0.53138435, -0.53963166],
         ...,
         [ 0.13962771, -0.7931818 , -0.7637748 , ..., -0.60986054,
           0.9176884 ,  0.89284754],
         [ 0.1086207 , -0.7419257 , -0.5610913 , ..., -0.64184374,
           0.89720297,  0.85900164],
         [ 0.01313193, -0.6043717 ,  0.7970531 , ..., -0.5256437 ,
          -0.7359165 , -0.7528687 ]],

        [[ 0.43822676,  0.40189546,  0.39921108, ..., -0.5800806 ,
          -0.5800806 , -0.5720984 ],
         [ 0.52044755,  0.4617722 ,  0.4355915 , ..., -0.53138435,
          -0.53138435, -0.53138435],
         [ 0.03814676,  0.10242918,  0.13345975, ..., -0.52308637,
          -0.53138435, -0.53963166],
         ...,
         [ 0.13962771, -0.7931818 , -0.7637748 , ..., -0.60986054,
           0.9176884 ,  0.89284754],
         [ 0.1086207 , -0.7419257 , -0.5610913 , ..., -0.64184374,
           0.89720297,  0.85900164],
         [ 0.01313193, -0.6043717 ,  0.7970531 , ..., -0.5256437 ,
          -0.7359165 , -0.7528687 ]],

        [[ 0.43822676,  0.40189546,  0.39921108, ..., -0.5800806 ,
          -0.5800806 , -0.5720984 ],
         [ 0.52044755,  0.4617722 ,  0.4355915 , ..., -0.53138435,
          -0.53138435, -0.53138435],
         [ 0.03814676,  0.10242918,  0.13345975, ..., -0.52308637,
          -0.53138435, -0.53963166],
         ...,
         [ 0.13962771, -0.7931818 , -0.7637748 , ..., -0.60986054,
           0.9176884 ,  0.89284754],
         [ 0.1086207 , -0.7419257 , -0.5610913 , ..., -0.64184374,
           0.89720297,  0.85900164],
         [ 0.01313193, -0.6043717 ,  0.7970531 , ..., -0.5256437 ,
          -0.7359165 , -0.7528687 ]],

        ...,

        [[ 0.43822676,  0.40189546,  0.39921108, ..., -0.5800806 ,
          -0.5800806 , -0.5720984 ],
         [ 0.52044755,  0.4617722 ,  0.4355915 , ..., -0.53138435,
          -0.53138435, -0.53138435],
         [ 0.03814676,  0.10242918,  0.13345975, ..., -0.52308637,
          -0.53138435, -0.53963166],
         ...,
         [ 0.13962771, -0.7931818 , -0.7637748 , ..., -0.60986054,
           0.9176884 ,  0.89284754],
         [ 0.1086207 , -0.7419257 , -0.5610913 , ..., -0.64184374,
           0.89720297,  0.85900164],
         [ 0.01313193, -0.6043717 ,  0.7970531 , ..., -0.5256437 ,
          -0.7359165 , -0.7528687 ]],

        [[ 0.43822676,  0.40189546,  0.39921108, ..., -0.5800806 ,
          -0.5800806 , -0.5720984 ],
         [ 0.52044755,  0.4617722 ,  0.4355915 , ..., -0.53138435,
          -0.53138435, -0.53138435],
         [ 0.03814676,  0.10242918,  0.13345975, ..., -0.52308637,
          -0.53138435, -0.53963166],
         ...,
         [ 0.13962771, -0.7931818 , -0.7637748 , ..., -0.60986054,
           0.9176884 ,  0.89284754],
         [ 0.1086207 , -0.7419257 , -0.5610913 , ..., -0.64184374,
           0.89720297,  0.85900164],
         [ 0.01313193, -0.6043717 ,  0.7970531 , ..., -0.5256437 ,
          -0.7359165 , -0.7528687 ]],

        [[ 0.43822676,  0.40189546,  0.39921108, ..., -0.5800806 ,
          -0.5800806 , -0.5720984 ],
         [ 0.52044755,  0.4617722 ,  0.4355915 , ..., -0.53138435,
          -0.53138435, -0.53138435],
         [ 0.03814676,  0.10242918,  0.13345975, ..., -0.52308637,
          -0.53138435, -0.53963166],
         ...,
         [ 0.13962771, -0.7931818 , -0.7637748 , ..., -0.60986054,
           0.9176884 ,  0.89284754],
         [ 0.1086207 , -0.7419257 , -0.5610913 , ..., -0.64184374,
           0.89720297,  0.85900164],
         [ 0.01313193, -0.6043717 ,  0.7970531 , ..., -0.5256437 ,
          -0.7359165 , -0.7528687 ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [12], 'to': [13]}
ms node:
{'name': 'sin', 'output': array([[[[ 0.43910435,  0.4027895 ,  0.39921108, ..., -0.58008057,
          -0.58008057, -0.5720984 ],
         [ 0.52044755,  0.46177223,  0.4355915 , ..., -0.53138435,
          -0.53138435, -0.53138435],
         [ 0.03619498,  0.10048614,  0.13152383, ..., -0.52308637,
          -0.53138435, -0.5396316 ],
         ...,
         [ 0.13962771, -0.7931818 , -0.7637748 , ..., -0.60986054,
           0.9176884 ,  0.89284754],
         [ 0.1086207 , -0.7419257 , -0.5610913 , ..., -0.64184374,
           0.89720297,  0.85900164],
         [ 0.01313193, -0.6043717 ,  0.80233   , ..., -0.52647424,
          -0.73591644, -0.75286865]],

        [[ 0.43910435,  0.4027895 ,  0.39921108, ..., -0.58008057,
          -0.58008057, -0.5720984 ],
         [ 0.52044755,  0.46177223,  0.4355915 , ..., -0.53138435,
          -0.53138435, -0.53138435],
         [ 0.03619498,  0.10048614,  0.13152383, ..., -0.52308637,
          -0.53138435, -0.5396316 ],
         ...,
         [ 0.13962771, -0.7931818 , -0.7637748 , ..., -0.60986054,
           0.9176884 ,  0.89284754],
         [ 0.1086207 , -0.7419257 , -0.5610913 , ..., -0.64184374,
           0.89720297,  0.85900164],
         [ 0.01313193, -0.6043717 ,  0.80233   , ..., -0.52647424,
          -0.73591644, -0.75286865]],

        [[ 0.43910435,  0.4027895 ,  0.39921108, ..., -0.58008057,
          -0.58008057, -0.5720984 ],
         [ 0.52044755,  0.46177223,  0.4355915 , ..., -0.53138435,
          -0.53138435, -0.53138435],
         [ 0.03619498,  0.10048614,  0.13152383, ..., -0.52308637,
          -0.53138435, -0.5396316 ],
         ...,
         [ 0.13962771, -0.7931818 , -0.7637748 , ..., -0.60986054,
           0.9176884 ,  0.89284754],
         [ 0.1086207 , -0.7419257 , -0.5610913 , ..., -0.64184374,
           0.89720297,  0.85900164],
         [ 0.01313193, -0.6043717 ,  0.80233   , ..., -0.52647424,
          -0.73591644, -0.75286865]],

        ...,

        [[ 0.43910435,  0.4027895 ,  0.39921108, ..., -0.58008057,
          -0.58008057, -0.5720984 ],
         [ 0.52044755,  0.46177223,  0.4355915 , ..., -0.53138435,
          -0.53138435, -0.53138435],
         [ 0.03619498,  0.10048614,  0.13152383, ..., -0.52308637,
          -0.53138435, -0.5396316 ],
         ...,
         [ 0.13962771, -0.7931818 , -0.7637748 , ..., -0.60986054,
           0.9176884 ,  0.89284754],
         [ 0.1086207 , -0.7419257 , -0.5610913 , ..., -0.64184374,
           0.89720297,  0.85900164],
         [ 0.01313193, -0.6043717 ,  0.80233   , ..., -0.52647424,
          -0.73591644, -0.75286865]],

        [[ 0.48840904,  0.45308825,  0.4496025 , ..., -0.58008057,
          -0.58008057, -0.5720984 ],
         [ 0.56795216,  0.511245  ,  0.48585045, ..., -0.5297288 ,
          -0.5297288 , -0.5297288 ],
         [-0.0028596 ,  0.05960504,  0.0907653 , ..., -0.52308637,
          -0.5297288 , -0.5396316 ],
         ...,
         [ 0.13962771, -0.808387  , -0.77991605, ..., -0.57045233,
           0.9176884 ,  0.89284754],
         [ 0.1086207 , -0.7587087 , -0.5819254 , ..., -0.6036505 ,
           0.8963387 ,  0.85900164],
         [ 0.01313193, -0.6043717 ,  0.77779484, ..., -0.52605903,
          -0.7265911 , -0.74445254]],

        [[ 0.48840904,  0.45308825,  0.4496025 , ..., -0.58008057,
          -0.58008057, -0.5720984 ],
         [ 0.56795216,  0.511245  ,  0.48585045, ..., -0.5297288 ,
          -0.5297288 , -0.5297288 ],
         [-0.0028596 ,  0.05960504,  0.0907653 , ..., -0.52308637,
          -0.5297288 , -0.5396316 ],
         ...,
         [ 0.13962771, -0.808387  , -0.77991605, ..., -0.57045233,
           0.9176884 ,  0.89284754],
         [ 0.1086207 , -0.7587087 , -0.5819254 , ..., -0.6036505 ,
           0.8963387 ,  0.85900164],
         [ 0.01313193, -0.6043717 ,  0.77779484, ..., -0.52605903,
          -0.7265911 , -0.74445254]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [12], 'to': [13]}
torch node:
{'name': 'sin', 'output': array([[[[ 0.48755664,  0.45221746,  0.4496025 , ..., -0.58008057,
          -0.58008057, -0.5720984 ],
         [ 0.5671481 ,  0.5095654 ,  0.48414242, ..., -0.5297288 ,
          -0.5297288 , -0.5297288 ],
         [ 0.00104664,  0.06350388,  0.09465472, ..., -0.52308637,
          -0.5297288 , -0.5396316 ],
         ...,
         [ 0.13962771, -0.808387  , -0.77991605, ..., -0.57045233,
           0.9176884 ,  0.89284754],
         [ 0.1086207 , -0.7587087 , -0.5819254 , ..., -0.6036505 ,
           0.89720297,  0.85900164],
         [ 0.01313193, -0.6043717 ,  0.7659997 , ..., -0.524397  ,
          -0.7272617 , -0.74445254]],

        [[ 0.48755664,  0.45221746,  0.4496025 , ..., -0.58008057,
          -0.58008057, -0.5720984 ],
         [ 0.5671481 ,  0.5095654 ,  0.48414242, ..., -0.5297288 ,
          -0.5297288 , -0.5297288 ],
         [ 0.00104664,  0.06350388,  0.09465472, ..., -0.52308637,
          -0.5297288 , -0.5396316 ],
         ...,
         [ 0.13962771, -0.808387  , -0.77991605, ..., -0.57045233,
           0.9176884 ,  0.89284754],
         [ 0.1086207 , -0.7587087 , -0.5819254 , ..., -0.6036505 ,
           0.89720297,  0.85900164],
         [ 0.01313193, -0.6043717 ,  0.7659997 , ..., -0.524397  ,
          -0.7272617 , -0.74445254]],

        [[ 0.48755664,  0.45221746,  0.4496025 , ..., -0.58008057,
          -0.58008057, -0.5720984 ],
         [ 0.5671481 ,  0.5095654 ,  0.48414242, ..., -0.5297288 ,
          -0.5297288 , -0.5297288 ],
         [ 0.00104664,  0.06350388,  0.09465472, ..., -0.52308637,
          -0.5297288 , -0.5396316 ],
         ...,
         [ 0.13962771, -0.808387  , -0.77991605, ..., -0.57045233,
           0.9176884 ,  0.89284754],
         [ 0.1086207 , -0.7587087 , -0.5819254 , ..., -0.6036505 ,
           0.89720297,  0.85900164],
         [ 0.01313193, -0.6043717 ,  0.7659997 , ..., -0.524397  ,
          -0.7272617 , -0.74445254]],

        ...,

        [[ 0.48755664,  0.45221746,  0.4496025 , ..., -0.58008057,
          -0.58008057, -0.5720984 ],
         [ 0.5671481 ,  0.5095654 ,  0.48414242, ..., -0.5297288 ,
          -0.5297288 , -0.5297288 ],
         [ 0.00104664,  0.06350388,  0.09465472, ..., -0.52308637,
          -0.5297288 , -0.5396316 ],
         ...,
         [ 0.13962771, -0.808387  , -0.77991605, ..., -0.57045233,
           0.9176884 ,  0.89284754],
         [ 0.1086207 , -0.7587087 , -0.5819254 , ..., -0.6036505 ,
           0.89720297,  0.85900164],
         [ 0.01313193, -0.6043717 ,  0.7659997 , ..., -0.524397  ,
          -0.7272617 , -0.74445254]],

        [[ 0.48755664,  0.45221746,  0.4496025 , ..., -0.58008057,
          -0.58008057, -0.5720984 ],
         [ 0.5671481 ,  0.5095654 ,  0.48414242, ..., -0.5297288 ,
          -0.5297288 , -0.5297288 ],
         [ 0.00104664,  0.06350388,  0.09465472, ..., -0.52308637,
          -0.5297288 , -0.5396316 ],
         ...,
         [ 0.13962771, -0.808387  , -0.77991605, ..., -0.57045233,
           0.9176884 ,  0.89284754],
         [ 0.1086207 , -0.7587087 , -0.5819254 , ..., -0.6036505 ,
           0.89720297,  0.85900164],
         [ 0.01313193, -0.6043717 ,  0.7659997 , ..., -0.524397  ,
          -0.7272617 , -0.74445254]],

        [[ 0.48755664,  0.45221746,  0.4496025 , ..., -0.58008057,
          -0.58008057, -0.5720984 ],
         [ 0.5671481 ,  0.5095654 ,  0.48414242, ..., -0.5297288 ,
          -0.5297288 , -0.5297288 ],
         [ 0.00104664,  0.06350388,  0.09465472, ..., -0.52308637,
          -0.5297288 , -0.5396316 ],
         ...,
         [ 0.13962771, -0.808387  , -0.77991605, ..., -0.57045233,
           0.9176884 ,  0.89284754],
         [ 0.1086207 , -0.7587087 , -0.5819254 , ..., -0.6036505 ,
           0.89720297,  0.85900164],
         [ 0.01313193, -0.6043717 ,  0.7659997 , ..., -0.524397  ,
          -0.7272617 , -0.74445254]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [12], 'to': [13]}

generate models:369

analyse output arrays in iter:390

pre layer res:
14:conv2d
{'name': 'conv2d', 'output': array([[[[1.4736394e+09, 1.4736394e+09, 1.4862336e+09, ...,
          1.6541696e+09, 1.6079885e+09, 1.5702016e+09],
         [1.5576077e+09, 1.5576077e+09, 1.5744013e+09, ...,
          1.7423375e+09, 1.7087503e+09, 1.6919567e+09],
         [1.6961536e+09, 1.7129472e+09, 1.7507313e+09, ...,
          1.9942418e+09, 1.9606546e+09, 1.9018734e+09],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          8.1868800e+08, 6.6754560e+08, 5.0380800e+07],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          8.1868800e+08, 6.6754560e+08, 5.0380800e+07],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          1.0076160e+08, 7.5571200e+07, 2.5190400e+07]],

        [[1.4736394e+09, 1.4736394e+09, 1.4862336e+09, ...,
          1.6541696e+09, 1.6079885e+09, 1.5702016e+09],
         [1.5576077e+09, 1.5576077e+09, 1.5744013e+09, ...,
          1.7423375e+09, 1.7087503e+09, 1.6919567e+09],
         [1.6961536e+09, 1.7129472e+09, 1.7507313e+09, ...,
          1.9942418e+09, 1.9606546e+09, 1.9018734e+09],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          8.1868800e+08, 6.6754560e+08, 5.0380800e+07],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          8.1868800e+08, 6.6754560e+08, 5.0380800e+07],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          1.0076160e+08, 7.5571200e+07, 2.5190400e+07]],

        [[1.4736394e+09, 1.4736394e+09, 1.4862336e+09, ...,
          1.6541696e+09, 1.6079885e+09, 1.5702016e+09],
         [1.5576077e+09, 1.5576077e+09, 1.5744013e+09, ...,
          1.7423375e+09, 1.7087503e+09, 1.6919567e+09],
         [1.6961536e+09, 1.7129472e+09, 1.7507313e+09, ...,
          1.9942418e+09, 1.9606546e+09, 1.9018734e+09],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          8.1868800e+08, 6.6754560e+08, 5.0380800e+07],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          8.1868800e+08, 6.6754560e+08, 5.0380800e+07],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          1.0076160e+08, 7.5571200e+07, 2.5190400e+07]],

        ...,

        [[1.4736394e+09, 1.4736394e+09, 1.4862336e+09, ...,
          1.6541696e+09, 1.6079885e+09, 1.5702016e+09],
         [1.5576077e+09, 1.5576077e+09, 1.5744013e+09, ...,
          1.7423375e+09, 1.7087503e+09, 1.6919567e+09],
         [1.6961536e+09, 1.7129472e+09, 1.7507313e+09, ...,
          1.9942418e+09, 1.9606546e+09, 1.9018734e+09],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          8.1868800e+08, 6.6754560e+08, 5.0380800e+07],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          8.1868800e+08, 6.6754560e+08, 5.0380800e+07],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          1.0076160e+08, 7.5571200e+07, 2.5190400e+07]],

        [[1.4736394e+09, 1.4736394e+09, 1.4862336e+09, ...,
          1.6541696e+09, 1.6079885e+09, 1.5702016e+09],
         [1.5576077e+09, 1.5576077e+09, 1.5744013e+09, ...,
          1.7423375e+09, 1.7087503e+09, 1.6919567e+09],
         [1.6961536e+09, 1.7129472e+09, 1.7507313e+09, ...,
          1.9942418e+09, 1.9606546e+09, 1.9018734e+09],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          8.1868800e+08, 6.6754560e+08, 5.0380800e+07],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          8.1868800e+08, 6.6754560e+08, 5.0380800e+07],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          1.0076160e+08, 7.5571200e+07, 2.5190400e+07]],

        [[1.4736394e+09, 1.4736394e+09, 1.4862336e+09, ...,
          1.6541696e+09, 1.6079885e+09, 1.5702016e+09],
         [1.5576077e+09, 1.5576077e+09, 1.5744013e+09, ...,
          1.7423375e+09, 1.7087503e+09, 1.6919567e+09],
         [1.6961536e+09, 1.7129472e+09, 1.7507313e+09, ...,
          1.9942418e+09, 1.9606546e+09, 1.9018734e+09],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          8.1868800e+08, 6.6754560e+08, 5.0380800e+07],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          8.1868800e+08, 6.6754560e+08, 5.0380800e+07],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          1.0076160e+08, 7.5571200e+07, 2.5190400e+07]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [6], 'to': [17]}
tf node:
{'name': 'sin', 'output': array([[[[-0.85975987, -0.85975987,  0.18282901, ..., -0.3229856 ,
           0.16773893,  0.9673161 ],
         [-0.8760011 , -0.8760011 ,  0.6945904 , ...,  0.6424783 ,
           0.09825454,  0.1998884 ],
         [-0.9129825 ,  0.7518597 , -0.93234855, ..., -0.49688044,
           0.0792312 ,  0.11428617],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9743127 ,
           0.22051097, -0.9006705 ]],

        [[-0.85975987, -0.85975987,  0.18282901, ..., -0.3229856 ,
           0.16773893,  0.9673161 ],
         [-0.8760011 , -0.8760011 ,  0.6945904 , ...,  0.6424783 ,
           0.09825454,  0.1998884 ],
         [-0.9129825 ,  0.7518597 , -0.93234855, ..., -0.49688044,
           0.0792312 ,  0.11428617],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9743127 ,
           0.22051097, -0.9006705 ]],

        [[-0.85975987, -0.85975987,  0.18282901, ..., -0.3229856 ,
           0.16773893,  0.9673161 ],
         [-0.8760011 , -0.8760011 ,  0.6945904 , ...,  0.6424783 ,
           0.09825454,  0.1998884 ],
         [-0.9129825 ,  0.7518597 , -0.93234855, ..., -0.49688044,
           0.0792312 ,  0.11428617],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9743127 ,
           0.22051097, -0.9006705 ]],

        ...,

        [[-0.85975987, -0.85975987,  0.18282901, ..., -0.3229856 ,
           0.16773893,  0.9673161 ],
         [-0.8760011 , -0.8760011 ,  0.6945904 , ...,  0.6424783 ,
           0.09825454,  0.1998884 ],
         [-0.9129825 ,  0.7518597 , -0.93234855, ..., -0.49688044,
           0.0792312 ,  0.11428617],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9743127 ,
           0.22051097, -0.9006705 ]],

        [[-0.85975987, -0.85975987,  0.18282901, ..., -0.3229856 ,
           0.16773893,  0.9673161 ],
         [-0.8760011 , -0.8760011 ,  0.6945904 , ...,  0.6424783 ,
           0.09825454,  0.1998884 ],
         [-0.9129825 ,  0.7518597 , -0.93234855, ..., -0.49688044,
           0.0792312 ,  0.11428617],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9743127 ,
           0.22051097, -0.9006705 ]],

        [[-0.85975987, -0.85975987,  0.18282901, ..., -0.3229856 ,
           0.16773893,  0.9673161 ],
         [-0.8760011 , -0.8760011 ,  0.6945904 , ...,  0.6424783 ,
           0.09825454,  0.1998884 ],
         [-0.9129825 ,  0.7518597 , -0.93234855, ..., -0.49688044,
           0.0792312 ,  0.11428617],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9743127 ,
           0.22051097, -0.9006705 ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [14], 'to': [19]}
ms node:
{'name': 'sin', 'output': array([[[[-0.85975987, -0.85975987,  0.18282901, ..., -0.3229856 ,
           0.16773893,  0.9673161 ],
         [-0.8760011 , -0.8760011 ,  0.69459033, ...,  0.6424783 ,
           0.09825454,  0.1998884 ],
         [-0.9129825 ,  0.75185966, -0.9323485 , ..., -0.49688044,
           0.0792312 ,  0.11428617],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9743127 ,
           0.22051097, -0.9006705 ]],

        [[-0.85975987, -0.85975987,  0.18282901, ..., -0.3229856 ,
           0.16773893,  0.9673161 ],
         [-0.8760011 , -0.8760011 ,  0.69459033, ...,  0.6424783 ,
           0.09825454,  0.1998884 ],
         [-0.9129825 ,  0.75185966, -0.9323485 , ..., -0.49688044,
           0.0792312 ,  0.11428617],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9743127 ,
           0.22051097, -0.9006705 ]],

        [[-0.85975987, -0.85975987,  0.18282901, ..., -0.3229856 ,
           0.16773893,  0.9673161 ],
         [-0.8760011 , -0.8760011 ,  0.69459033, ...,  0.6424783 ,
           0.09825454,  0.1998884 ],
         [-0.9129825 ,  0.75185966, -0.9323485 , ..., -0.49688044,
           0.0792312 ,  0.11428617],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9743127 ,
           0.22051097, -0.9006705 ]],

        ...,

        [[-0.85975987, -0.85975987,  0.18282901, ..., -0.3229856 ,
           0.16773893,  0.9673161 ],
         [-0.8760011 , -0.8760011 ,  0.69459033, ...,  0.6424783 ,
           0.09825454,  0.1998884 ],
         [-0.9129825 ,  0.75185966, -0.9323485 , ..., -0.49688044,
           0.0792312 ,  0.11428617],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9743127 ,
           0.22051097, -0.9006705 ]],

        [[-0.9298498 , -0.9298498 ,  0.18282901, ..., -0.3229856 ,
           0.9332134 ,  0.9673161 ],
         [-0.29960856, -0.29960856,  0.56788963, ..., -0.44298047,
           0.13993353, -0.42598617],
         [-0.9129825 ,  0.75185966,  0.820364  , ..., -0.9710063 ,
          -0.93662643,  0.9865703 ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9743127 ,
           0.22051097, -0.9006705 ]],

        [[-0.9298498 , -0.9298498 ,  0.18282901, ..., -0.3229856 ,
           0.9332134 ,  0.9673161 ],
         [-0.29960856, -0.29960856,  0.56788963, ..., -0.44298047,
           0.13993353, -0.42598617],
         [-0.9129825 ,  0.75185966,  0.820364  , ..., -0.9710063 ,
          -0.93662643,  0.9865703 ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9743127 ,
           0.22051097, -0.9006705 ]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [14], 'to': [19]}
torch node:
{'name': 'sin', 'output': array([[[[-0.85975987, -0.85975987,  0.18282901, ..., -0.3229856 ,
           0.16773893,  0.9673161 ],
         [-0.8760012 , -0.8760012 ,  0.69459033, ...,  0.6424783 ,
           0.09825454,  0.1998884 ],
         [-0.9129825 ,  0.75185966, -0.9323485 , ..., -0.49688044,
           0.0792312 ,  0.11428617],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9743127 ,
           0.22051097, -0.9006705 ]],

        [[-0.85975987, -0.85975987,  0.18282901, ..., -0.3229856 ,
           0.16773893,  0.9673161 ],
         [-0.8760012 , -0.8760012 ,  0.69459033, ...,  0.6424783 ,
           0.09825454,  0.1998884 ],
         [-0.9129825 ,  0.75185966, -0.9323485 , ..., -0.49688044,
           0.0792312 ,  0.11428617],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9743127 ,
           0.22051097, -0.9006705 ]],

        [[-0.85975987, -0.85975987,  0.18282901, ..., -0.3229856 ,
           0.16773893,  0.9673161 ],
         [-0.8760012 , -0.8760012 ,  0.69459033, ...,  0.6424783 ,
           0.09825454,  0.1998884 ],
         [-0.9129825 ,  0.75185966, -0.9323485 , ..., -0.49688044,
           0.0792312 ,  0.11428617],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9743127 ,
           0.22051097, -0.9006705 ]],

        ...,

        [[-0.85975987, -0.85975987,  0.18282901, ..., -0.3229856 ,
           0.16773893,  0.9673161 ],
         [-0.8760012 , -0.8760012 ,  0.69459033, ...,  0.6424783 ,
           0.09825454,  0.1998884 ],
         [-0.9129825 ,  0.75185966, -0.9323485 , ..., -0.49688044,
           0.0792312 ,  0.11428617],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9743127 ,
           0.22051097, -0.9006705 ]],

        [[-0.85975987, -0.85975987,  0.18282901, ..., -0.3229856 ,
           0.16773893,  0.9673161 ],
         [-0.8760012 , -0.8760012 ,  0.69459033, ...,  0.6424783 ,
           0.09825454,  0.1998884 ],
         [-0.9129825 ,  0.75185966, -0.9323485 , ..., -0.49688044,
           0.0792312 ,  0.11428617],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9743127 ,
           0.22051097, -0.9006705 ]],

        [[-0.85975987, -0.85975987,  0.18282901, ..., -0.3229856 ,
           0.16773893,  0.9673161 ],
         [-0.8760012 , -0.8760012 ,  0.69459033, ...,  0.6424783 ,
           0.09825454,  0.1998884 ],
         [-0.9129825 ,  0.75185966, -0.9323485 , ..., -0.49688044,
           0.0792312 ,  0.11428617],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.3091222 ,
          -0.13003741,  0.7826875 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.9743127 ,
           0.22051097, -0.9006705 ]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [14], 'to': [19]}

generate models:371

analyse output arrays in iter:402

pre layer res:
8:flatten
{'name': 'flatten', 'output': array([[2056995.6,  670746.2,  708943.3, ..., 4078017.5, 3869254.5,
        2469909. ]], dtype=float32), 'output_shape': TensorShape([1, 50176]), 'from': [4], 'to': [28]}
tf node:
{'name': 'softmax', 'output': array([[0., 0., 0., ..., 0., 0., 0.]], dtype=float32), 'output_shape': TensorShape([1, 50176]), 'from': [8], 'to': [16]}
ms node:
{'name': 'softmax', 'output': array([[0., 0., 0., ..., 0., 0., 0.]], dtype=float32), 'output_shape': (1, 50176), 'from': [8], 'to': [16]}
torch node:
{'name': 'softmax', 'output': array([[0., 0., 0., ..., 0., 0., 0.]], dtype=float32), 'output_shape': torch.Size([1, 50176]), 'from': [8], 'to': [16]}

generate models:383

analyse output arrays in iter:410

pre layer res:
4:square
{'name': 'square', 'output': array([[[[162483.56, 162483.56, 162264.97, ..., 161437.78, 161437.78,
          162034.23],
         [160902.7 , 162389.34, 161345.67, ..., 161437.78, 161437.78,
          162034.23],
         [160907.22, 161330.56, 161832.73, ..., 161221.9 , 160990.9 ,
          162034.23],
         ...,
         [161409.23, 162431.39, 162352.83, ..., 162098.27, 162492.73,
          162008.47],
         [162159.83, 161249.53, 161344.  , ..., 162440.17, 161004.81,
          161137.53],
         [162450.81, 161705.3 , 161335.31, ..., 162440.17, 161799.77,
          162469.83]],

        [[162483.56, 162483.56, 162264.97, ..., 161437.78, 161437.78,
          162034.23],
         [160902.7 , 162389.34, 161345.67, ..., 161437.78, 161437.78,
          162034.23],
         [160907.22, 161330.56, 161832.73, ..., 161221.9 , 160990.9 ,
          162034.23],
         ...,
         [161409.23, 162431.39, 162352.83, ..., 162098.27, 162492.73,
          162008.47],
         [162159.83, 161249.53, 161344.  , ..., 162440.17, 161004.81,
          161137.53],
         [162450.81, 161705.3 , 161335.31, ..., 162440.17, 161799.77,
          162469.83]],

        [[162483.56, 162483.56, 162264.97, ..., 161437.78, 161437.78,
          162034.23],
         [160902.7 , 162389.34, 161345.67, ..., 161437.78, 161437.78,
          162034.23],
         [160907.22, 161330.56, 161832.73, ..., 161221.9 , 160990.9 ,
          162034.23],
         ...,
         [161409.23, 162431.39, 162352.83, ..., 162098.27, 162492.73,
          162008.47],
         [162159.83, 161249.53, 161344.  , ..., 162440.17, 161004.81,
          161137.53],
         [162450.81, 161705.3 , 161335.31, ..., 162440.17, 161799.77,
          162469.83]],

        ...,

        [[162483.56, 162483.56, 162264.97, ..., 161437.78, 161437.78,
          162034.23],
         [160902.7 , 162389.34, 161345.67, ..., 161437.78, 161437.78,
          162034.23],
         [160907.22, 161330.56, 161832.73, ..., 161221.9 , 160990.9 ,
          162034.23],
         ...,
         [161409.23, 162431.39, 162352.83, ..., 162098.27, 162492.73,
          162008.47],
         [162159.83, 161249.53, 161344.  , ..., 162440.17, 161004.81,
          161137.53],
         [162450.81, 161705.3 , 161335.31, ..., 162440.17, 161799.77,
          162469.83]],

        [[162483.56, 162483.56, 162264.97, ..., 161437.78, 161437.78,
          162034.23],
         [160902.7 , 162389.34, 161345.67, ..., 161437.78, 161437.78,
          162034.23],
         [160907.22, 161330.56, 161832.73, ..., 161221.9 , 160990.9 ,
          162034.23],
         ...,
         [161409.23, 162431.39, 162352.83, ..., 162098.27, 162492.73,
          162008.47],
         [162159.83, 161249.53, 161344.  , ..., 162440.17, 161004.81,
          161137.53],
         [162450.81, 161705.3 , 161335.31, ..., 162440.17, 161799.77,
          162469.83]],

        [[162483.56, 162483.56, 162264.97, ..., 161437.78, 161437.78,
          162034.23],
         [160902.7 , 162389.34, 161345.67, ..., 161437.78, 161437.78,
          162034.23],
         [160907.22, 161330.56, 161832.73, ..., 161221.9 , 160990.9 ,
          162034.23],
         ...,
         [161409.23, 162431.39, 162352.83, ..., 162098.27, 162492.73,
          162008.47],
         [162159.83, 161249.53, 161344.  , ..., 162440.17, 161004.81,
          161137.53],
         [162450.81, 161705.3 , 161335.31, ..., 162440.17, 161799.77,
          162469.83]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [7], 'to': [20]}
tf node:
{'name': 'softmax', 'output': array([[[[5.0000000e-01, 5.0000000e-01, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 1.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 2.2842721e-27, 0.0000000e+00, ...,
          0.0000000e+00, 1.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          2.0935378e-29, 0.0000000e+00, 0.0000000e+00],
         [1.0599990e-24, 0.0000000e+00, 0.0000000e+00, ...,
          2.5359502e-29, 0.0000000e+00, 1.9217039e-16]],

        [[5.0000000e-01, 5.0000000e-01, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 1.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 2.2842721e-27, 0.0000000e+00, ...,
          0.0000000e+00, 1.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          2.0935378e-29, 0.0000000e+00, 0.0000000e+00],
         [1.0599990e-24, 0.0000000e+00, 0.0000000e+00, ...,
          2.5359502e-29, 0.0000000e+00, 1.9217039e-16]],

        [[5.0000000e-01, 5.0000000e-01, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 1.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 2.2842721e-27, 0.0000000e+00, ...,
          0.0000000e+00, 1.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          2.0935378e-29, 0.0000000e+00, 0.0000000e+00],
         [1.0599990e-24, 0.0000000e+00, 0.0000000e+00, ...,
          2.5359502e-29, 0.0000000e+00, 1.9217039e-16]],

        ...,

        [[5.0000000e-01, 5.0000000e-01, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 1.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 2.2842721e-27, 0.0000000e+00, ...,
          0.0000000e+00, 1.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          2.0935378e-29, 0.0000000e+00, 0.0000000e+00],
         [1.0599990e-24, 0.0000000e+00, 0.0000000e+00, ...,
          2.5359502e-29, 0.0000000e+00, 1.9217039e-16]],

        [[5.0000000e-01, 5.0000000e-01, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 1.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 2.2842721e-27, 0.0000000e+00, ...,
          0.0000000e+00, 1.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          2.0935378e-29, 0.0000000e+00, 0.0000000e+00],
         [1.0599990e-24, 0.0000000e+00, 0.0000000e+00, ...,
          2.5359502e-29, 0.0000000e+00, 1.9217039e-16]],

        [[5.0000000e-01, 5.0000000e-01, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 1.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 2.2842721e-27, 0.0000000e+00, ...,
          0.0000000e+00, 1.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          2.0935378e-29, 0.0000000e+00, 0.0000000e+00],
         [1.0599990e-24, 0.0000000e+00, 0.0000000e+00, ...,
          2.5359502e-29, 0.0000000e+00, 1.9217039e-16]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [4], 'to': [15]}
ms node:
{'name': 'softmax', 'output': array([[[[5.00000000e-01, 5.00000000e-01, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 1.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         ...,
         [0.00000000e+00, 2.21399321e-27, 0.00000000e+00, ...,
          0.00000000e+00, 1.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          2.09353821e-29, 0.00000000e+00, 0.00000000e+00],
         [1.05999910e-24, 0.00000000e+00, 0.00000000e+00, ...,
          2.53595080e-29, 0.00000000e+00, 1.92170401e-16]],

        [[5.00000000e-01, 5.00000000e-01, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 1.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         ...,
         [0.00000000e+00, 2.21399321e-27, 0.00000000e+00, ...,
          0.00000000e+00, 1.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          2.09353821e-29, 0.00000000e+00, 0.00000000e+00],
         [1.05999910e-24, 0.00000000e+00, 0.00000000e+00, ...,
          2.53595080e-29, 0.00000000e+00, 1.92170401e-16]],

        [[5.00000000e-01, 5.00000000e-01, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 1.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         ...,
         [0.00000000e+00, 2.21399321e-27, 0.00000000e+00, ...,
          0.00000000e+00, 1.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          2.09353821e-29, 0.00000000e+00, 0.00000000e+00],
         [1.05999910e-24, 0.00000000e+00, 0.00000000e+00, ...,
          2.53595080e-29, 0.00000000e+00, 1.92170401e-16]],

        ...,

        [[5.00000000e-01, 5.00000000e-01, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 1.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         ...,
         [0.00000000e+00, 2.21399321e-27, 0.00000000e+00, ...,
          0.00000000e+00, 1.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          2.09353821e-29, 0.00000000e+00, 0.00000000e+00],
         [1.05999910e-24, 0.00000000e+00, 0.00000000e+00, ...,
          2.53595080e-29, 0.00000000e+00, 1.92170401e-16]],

        [[5.00000000e-01, 5.00000000e-01, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 1.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         ...,
         [0.00000000e+00, 3.17139860e-27, 0.00000000e+00, ...,
          0.00000000e+00, 1.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          1.08611345e-29, 0.00000000e+00, 0.00000000e+00],
         [6.44895664e-25, 0.00000000e+00, 0.00000000e+00, ...,
          1.38300518e-29, 0.00000000e+00, 7.91086752e-17]],

        [[5.00000000e-01, 5.00000000e-01, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 1.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         ...,
         [0.00000000e+00, 3.17139860e-27, 0.00000000e+00, ...,
          0.00000000e+00, 1.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          1.08611345e-29, 0.00000000e+00, 0.00000000e+00],
         [6.44895664e-25, 0.00000000e+00, 0.00000000e+00, ...,
          1.38300518e-29, 0.00000000e+00, 7.91086752e-17]]]],
      dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [4], 'to': [15]}
torch node:
{'name': 'softmax', 'output': array([[[[5.00000000e-01, 5.00000000e-01, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 1.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         ...,
         [0.00000000e+00, 3.17139802e-27, 0.00000000e+00, ...,
          0.00000000e+00, 1.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          1.08611315e-29, 0.00000000e+00, 0.00000000e+00],
         [6.44895713e-25, 0.00000000e+00, 0.00000000e+00, ...,
          1.38300518e-29, 0.00000000e+00, 7.91086884e-17]],

        [[5.00000000e-01, 5.00000000e-01, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 1.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         ...,
         [0.00000000e+00, 3.17139802e-27, 0.00000000e+00, ...,
          0.00000000e+00, 1.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          1.08611315e-29, 0.00000000e+00, 0.00000000e+00],
         [6.44895713e-25, 0.00000000e+00, 0.00000000e+00, ...,
          1.38300518e-29, 0.00000000e+00, 7.91086884e-17]],

        [[5.00000000e-01, 5.00000000e-01, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 1.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         ...,
         [0.00000000e+00, 3.17139802e-27, 0.00000000e+00, ...,
          0.00000000e+00, 1.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          1.08611315e-29, 0.00000000e+00, 0.00000000e+00],
         [6.44895713e-25, 0.00000000e+00, 0.00000000e+00, ...,
          1.38300518e-29, 0.00000000e+00, 7.91086884e-17]],

        ...,

        [[5.00000000e-01, 5.00000000e-01, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 1.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         ...,
         [0.00000000e+00, 3.17139802e-27, 0.00000000e+00, ...,
          0.00000000e+00, 1.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          1.08611315e-29, 0.00000000e+00, 0.00000000e+00],
         [6.44895713e-25, 0.00000000e+00, 0.00000000e+00, ...,
          1.38300518e-29, 0.00000000e+00, 7.91086884e-17]],

        [[5.00000000e-01, 5.00000000e-01, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 1.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         ...,
         [0.00000000e+00, 3.17139802e-27, 0.00000000e+00, ...,
          0.00000000e+00, 1.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          1.08611315e-29, 0.00000000e+00, 0.00000000e+00],
         [6.44895713e-25, 0.00000000e+00, 0.00000000e+00, ...,
          1.38300518e-29, 0.00000000e+00, 7.91086884e-17]],

        [[5.00000000e-01, 5.00000000e-01, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 1.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         ...,
         [0.00000000e+00, 3.17139802e-27, 0.00000000e+00, ...,
          0.00000000e+00, 1.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          1.08611315e-29, 0.00000000e+00, 0.00000000e+00],
         [6.44895713e-25, 0.00000000e+00, 0.00000000e+00, ...,
          1.38300518e-29, 0.00000000e+00, 7.91086884e-17]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [4], 'to': [15]}

generate models:391

analyse output arrays in iter:440

pre layer res:
5:sigmoid
{'name': 'sigmoid', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 32, 32]), 'from': [9], 'to': [7]}
tf node:
{'name': 'log', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 32, 32]), 'from': [5], 'to': [10]}
ms node:
{'name': 'log', 'output': array([[[[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        ...,

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]]]],
      dtype=float32), 'output_shape': (1, 256, 32, 32), 'from': [5], 'to': [10]}
torch node:
{'name': 'log', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 32, 32]), 'from': [5], 'to': [10]}

pre layer res:
4:transpose
{'name': 'transpose', 'output': array([[[[25843200., 25917608., 25684992., ..., 19537920., 19425056.,
          19425056.],
         [25843200., 25917608., 25684992., ..., 19537920., 19425056.,
          19425056.],
         [28282368., 28320768., 27985052., ..., 20916432., 21037056.,
          21006336.],
         ...,
         [21558472., 21558472., 21576192., ..., 16003584., 16047360.,
          15984384.],
         [22146876., 22146876., 21840384., ..., 16495104., 16546560.,
          16546560.],
         [22146876., 22146876., 21840384., ..., 16495104., 16546560.,
          16546560.]],

        [[25843200., 25917608., 25684992., ..., 19537920., 19425056.,
          19425056.],
         [25843200., 25917608., 25684992., ..., 19537920., 19425056.,
          19425056.],
         [28282368., 28320768., 27985052., ..., 20916432., 21037056.,
          21006336.],
         ...,
         [21558472., 21558472., 21576192., ..., 16003584., 16047360.,
          15984384.],
         [22146876., 22146876., 21840384., ..., 16495104., 16546560.,
          16546560.],
         [22146876., 22146876., 21840384., ..., 16495104., 16546560.,
          16546560.]],

        [[25843200., 25917608., 25684992., ..., 19537920., 19425056.,
          19425056.],
         [25843200., 25917608., 25684992., ..., 19537920., 19425056.,
          19425056.],
         [28282368., 28320768., 27985052., ..., 20916432., 21037056.,
          21006336.],
         ...,
         [21558472., 21558472., 21576192., ..., 16003584., 16047360.,
          15984384.],
         [22146876., 22146876., 21840384., ..., 16495104., 16546560.,
          16546560.],
         [22146876., 22146876., 21840384., ..., 16495104., 16546560.,
          16546560.]],

        ...,

        [[25843200., 25917608., 25684992., ..., 19537920., 19425056.,
          19425056.],
         [25843200., 25917608., 25684992., ..., 19537920., 19425056.,
          19425056.],
         [28282368., 28320768., 27985052., ..., 20916432., 21037056.,
          21006336.],
         ...,
         [21558472., 21558472., 21576192., ..., 16003584., 16047360.,
          15984384.],
         [22146876., 22146876., 21840384., ..., 16495104., 16546560.,
          16546560.],
         [22146876., 22146876., 21840384., ..., 16495104., 16546560.,
          16546560.]],

        [[25843200., 25917608., 25684992., ..., 19537920., 19425056.,
          19425056.],
         [25843200., 25917608., 25684992., ..., 19537920., 19425056.,
          19425056.],
         [28282368., 28320768., 27985052., ..., 20916432., 21037056.,
          21006336.],
         ...,
         [21558472., 21558472., 21576192., ..., 16003584., 16047360.,
          15984384.],
         [22146876., 22146876., 21840384., ..., 16495104., 16546560.,
          16546560.],
         [22146876., 22146876., 21840384., ..., 16495104., 16546560.,
          16546560.]],

        [[25843200., 25917608., 25684992., ..., 19537920., 19425056.,
          19425056.],
         [25843200., 25917608., 25684992., ..., 19537920., 19425056.,
          19425056.],
         [28282368., 28320768., 27985052., ..., 20916432., 21037056.,
          21006336.],
         ...,
         [21558472., 21558472., 21576192., ..., 16003584., 16047360.,
          15984384.],
         [22146876., 22146876., 21840384., ..., 16495104., 16546560.,
          16546560.],
         [22146876., 22146876., 21840384., ..., 16495104., 16546560.,
          16546560.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [12], 'to': [8]}
tf node:
{'name': 'sin', 'output': array([[[[ 0.1583733 ,  0.44659612,  0.36768177, ..., -0.28341687,
          -0.9107217 , -0.9107217 ],
         [ 0.1583733 ,  0.44659612,  0.36768177, ..., -0.28341687,
          -0.9107217 , -0.9107217 ],
         [-0.87492293,  0.98152435,  0.77655095, ..., -0.27685145,
           0.30602157,  0.9695896 ],
         ...,
         [ 0.66456604,  0.66456604, -0.6369388 , ..., -0.00494087,
          -0.8688654 , -0.98853725],
         [-0.9694472 , -0.9694472 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ],
         [-0.9694472 , -0.9694472 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ]],

        [[ 0.1583733 ,  0.44659612,  0.36768177, ..., -0.28341687,
          -0.9107217 , -0.9107217 ],
         [ 0.1583733 ,  0.44659612,  0.36768177, ..., -0.28341687,
          -0.9107217 , -0.9107217 ],
         [-0.87492293,  0.98152435,  0.77655095, ..., -0.27685145,
           0.30602157,  0.9695896 ],
         ...,
         [ 0.66456604,  0.66456604, -0.6369388 , ..., -0.00494087,
          -0.8688654 , -0.98853725],
         [-0.9694472 , -0.9694472 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ],
         [-0.9694472 , -0.9694472 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ]],

        [[ 0.1583733 ,  0.44659612,  0.36768177, ..., -0.28341687,
          -0.9107217 , -0.9107217 ],
         [ 0.1583733 ,  0.44659612,  0.36768177, ..., -0.28341687,
          -0.9107217 , -0.9107217 ],
         [-0.87492293,  0.98152435,  0.77655095, ..., -0.27685145,
           0.30602157,  0.9695896 ],
         ...,
         [ 0.66456604,  0.66456604, -0.6369388 , ..., -0.00494087,
          -0.8688654 , -0.98853725],
         [-0.9694472 , -0.9694472 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ],
         [-0.9694472 , -0.9694472 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ]],

        ...,

        [[ 0.1583733 ,  0.44659612,  0.36768177, ..., -0.28341687,
          -0.9107217 , -0.9107217 ],
         [ 0.1583733 ,  0.44659612,  0.36768177, ..., -0.28341687,
          -0.9107217 , -0.9107217 ],
         [-0.87492293,  0.98152435,  0.77655095, ..., -0.27685145,
           0.30602157,  0.9695896 ],
         ...,
         [ 0.66456604,  0.66456604, -0.6369388 , ..., -0.00494087,
          -0.8688654 , -0.98853725],
         [-0.9694472 , -0.9694472 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ],
         [-0.9694472 , -0.9694472 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ]],

        [[ 0.1583733 ,  0.44659612,  0.36768177, ..., -0.28341687,
          -0.9107217 , -0.9107217 ],
         [ 0.1583733 ,  0.44659612,  0.36768177, ..., -0.28341687,
          -0.9107217 , -0.9107217 ],
         [-0.87492293,  0.98152435,  0.77655095, ..., -0.27685145,
           0.30602157,  0.9695896 ],
         ...,
         [ 0.66456604,  0.66456604, -0.6369388 , ..., -0.00494087,
          -0.8688654 , -0.98853725],
         [-0.9694472 , -0.9694472 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ],
         [-0.9694472 , -0.9694472 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ]],

        [[ 0.1583733 ,  0.44659612,  0.36768177, ..., -0.28341687,
          -0.9107217 , -0.9107217 ],
         [ 0.1583733 ,  0.44659612,  0.36768177, ..., -0.28341687,
          -0.9107217 , -0.9107217 ],
         [-0.87492293,  0.98152435,  0.77655095, ..., -0.27685145,
           0.30602157,  0.9695896 ],
         ...,
         [ 0.66456604,  0.66456604, -0.6369388 , ..., -0.00494087,
          -0.8688654 , -0.98853725],
         [-0.9694472 , -0.9694472 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ],
         [-0.9694472 , -0.9694472 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [4], 'to': [13]}
ms node:
{'name': 'sin', 'output': array([[[[ 0.1583733 ,  0.4465961 ,  0.36768177, ..., -0.2834169 ,
          -0.9107217 , -0.9107217 ],
         [ 0.1583733 ,  0.4465961 ,  0.36768177, ..., -0.2834169 ,
          -0.9107217 , -0.9107217 ],
         [-0.87492293,  0.98152435,  0.7765509 , ..., -0.27685145,
           0.30602157,  0.9695896 ],
         ...,
         [ 0.66456604,  0.66456604, -0.6369388 , ..., -0.00494087,
          -0.8688654 , -0.98853725],
         [-0.9694472 , -0.9694472 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ],
         [-0.9694472 , -0.9694472 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ]],

        [[ 0.1583733 ,  0.4465961 ,  0.36768177, ..., -0.2834169 ,
          -0.9107217 , -0.9107217 ],
         [ 0.1583733 ,  0.4465961 ,  0.36768177, ..., -0.2834169 ,
          -0.9107217 , -0.9107217 ],
         [-0.87492293,  0.98152435,  0.7765509 , ..., -0.27685145,
           0.30602157,  0.9695896 ],
         ...,
         [ 0.66456604,  0.66456604, -0.6369388 , ..., -0.00494087,
          -0.8688654 , -0.98853725],
         [-0.9694472 , -0.9694472 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ],
         [-0.9694472 , -0.9694472 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ]],

        [[ 0.1583733 ,  0.4465961 ,  0.36768177, ..., -0.2834169 ,
          -0.9107217 , -0.9107217 ],
         [ 0.1583733 ,  0.4465961 ,  0.36768177, ..., -0.2834169 ,
          -0.9107217 , -0.9107217 ],
         [-0.87492293,  0.98152435,  0.7765509 , ..., -0.27685145,
           0.30602157,  0.9695896 ],
         ...,
         [ 0.66456604,  0.66456604, -0.6369388 , ..., -0.00494087,
          -0.8688654 , -0.98853725],
         [-0.9694472 , -0.9694472 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ],
         [-0.9694472 , -0.9694472 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ]],

        ...,

        [[ 0.1583733 ,  0.4465961 ,  0.36768177, ..., -0.2834169 ,
          -0.9107217 , -0.9107217 ],
         [ 0.1583733 ,  0.4465961 ,  0.36768177, ..., -0.2834169 ,
          -0.9107217 , -0.9107217 ],
         [-0.87492293,  0.98152435,  0.7765509 , ..., -0.27685145,
           0.30602157,  0.9695896 ],
         ...,
         [ 0.66456604,  0.66456604, -0.6369388 , ..., -0.00494087,
          -0.8688654 , -0.98853725],
         [-0.9694472 , -0.9694472 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ],
         [-0.9694472 , -0.9694472 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ]],

        [[ 0.1583733 ,  0.4146441 ,  0.36768177, ..., -0.2834169 ,
          -0.53199476, -0.53199476],
         [ 0.1583733 ,  0.4146441 ,  0.36768177, ..., -0.2834169 ,
          -0.53199476, -0.53199476],
         [-0.87492293,  0.98152435,  0.98867244, ...,  0.9154506 ,
           0.30602157,  0.9695896 ],
         ...,
         [ 0.9567394 ,  0.9567394 , -0.6369388 , ..., -0.00494087,
          -0.8688654 , -0.98853725],
         [ 0.9980842 ,  0.9980842 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ],
         [ 0.9980842 ,  0.9980842 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ]],

        [[ 0.1583733 ,  0.4146441 ,  0.36768177, ..., -0.2834169 ,
          -0.53199476, -0.53199476],
         [ 0.1583733 ,  0.4146441 ,  0.36768177, ..., -0.2834169 ,
          -0.53199476, -0.53199476],
         [-0.87492293,  0.98152435,  0.98867244, ...,  0.9154506 ,
           0.30602157,  0.9695896 ],
         ...,
         [ 0.9567394 ,  0.9567394 , -0.6369388 , ..., -0.00494087,
          -0.8688654 , -0.98853725],
         [ 0.9980842 ,  0.9980842 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ],
         [ 0.9980842 ,  0.9980842 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [4], 'to': [13]}
torch node:
{'name': 'sin', 'output': array([[[[ 0.1583733 ,  0.4146441 ,  0.36768177, ..., -0.2834169 ,
          -0.53199476, -0.53199476],
         [ 0.1583733 ,  0.4146441 ,  0.36768177, ..., -0.2834169 ,
          -0.53199476, -0.53199476],
         [-0.87492293,  0.98152435,  0.98867244, ...,  0.9154506 ,
           0.30602157,  0.9695896 ],
         ...,
         [ 0.9567394 ,  0.9567394 , -0.6369388 , ..., -0.00494087,
          -0.8688654 , -0.98853725],
         [ 0.9980842 ,  0.9980842 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ],
         [ 0.9980842 ,  0.9980842 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ]],

        [[ 0.1583733 ,  0.4146441 ,  0.36768177, ..., -0.2834169 ,
          -0.53199476, -0.53199476],
         [ 0.1583733 ,  0.4146441 ,  0.36768177, ..., -0.2834169 ,
          -0.53199476, -0.53199476],
         [-0.87492293,  0.98152435,  0.98867244, ...,  0.9154506 ,
           0.30602157,  0.9695896 ],
         ...,
         [ 0.9567394 ,  0.9567394 , -0.6369388 , ..., -0.00494087,
          -0.8688654 , -0.98853725],
         [ 0.9980842 ,  0.9980842 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ],
         [ 0.9980842 ,  0.9980842 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ]],

        [[ 0.1583733 ,  0.4146441 ,  0.36768177, ..., -0.2834169 ,
          -0.53199476, -0.53199476],
         [ 0.1583733 ,  0.4146441 ,  0.36768177, ..., -0.2834169 ,
          -0.53199476, -0.53199476],
         [-0.87492293,  0.98152435,  0.98867244, ...,  0.9154506 ,
           0.30602157,  0.9695896 ],
         ...,
         [ 0.9567394 ,  0.9567394 , -0.6369388 , ..., -0.00494087,
          -0.8688654 , -0.98853725],
         [ 0.9980842 ,  0.9980842 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ],
         [ 0.9980842 ,  0.9980842 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ]],

        ...,

        [[ 0.1583733 ,  0.4146441 ,  0.36768177, ..., -0.2834169 ,
          -0.53199476, -0.53199476],
         [ 0.1583733 ,  0.4146441 ,  0.36768177, ..., -0.2834169 ,
          -0.53199476, -0.53199476],
         [-0.87492293,  0.98152435,  0.98867244, ...,  0.9154506 ,
           0.30602157,  0.9695896 ],
         ...,
         [ 0.9567394 ,  0.9567394 , -0.6369388 , ..., -0.00494087,
          -0.8688654 , -0.98853725],
         [ 0.9980842 ,  0.9980842 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ],
         [ 0.9980842 ,  0.9980842 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ]],

        [[ 0.1583733 ,  0.4146441 ,  0.36768177, ..., -0.2834169 ,
          -0.53199476, -0.53199476],
         [ 0.1583733 ,  0.4146441 ,  0.36768177, ..., -0.2834169 ,
          -0.53199476, -0.53199476],
         [-0.87492293,  0.98152435,  0.98867244, ...,  0.9154506 ,
           0.30602157,  0.9695896 ],
         ...,
         [ 0.9567394 ,  0.9567394 , -0.6369388 , ..., -0.00494087,
          -0.8688654 , -0.98853725],
         [ 0.9980842 ,  0.9980842 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ],
         [ 0.9980842 ,  0.9980842 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ]],

        [[ 0.1583733 ,  0.4146441 ,  0.36768177, ..., -0.2834169 ,
          -0.53199476, -0.53199476],
         [ 0.1583733 ,  0.4146441 ,  0.36768177, ..., -0.2834169 ,
          -0.53199476, -0.53199476],
         [-0.87492293,  0.98152435,  0.98867244, ...,  0.9154506 ,
           0.30602157,  0.9695896 ],
         ...,
         [ 0.9567394 ,  0.9567394 , -0.6369388 , ..., -0.00494087,
          -0.8688654 , -0.98853725],
         [ 0.9980842 ,  0.9980842 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ],
         [ 0.9980842 ,  0.9980842 ,  0.44064513, ...,  0.84962255,
          -0.9173383 , -0.9173383 ]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [4], 'to': [13]}

generate models:419

final statics:
total operators:28
tensorflow --> nums:67,distinct_bugs:6
mindspore --> nums:36,distinct_bugs:6
torch --> nums:27,distinct_bugs:6
tensorflow --> 
conv2d:40
add:1
softmax:4
sin:15
log:2
cos:5
mindspore --> 
log:7
add:1
softmax:5
sin:17
conv2d:1
cos:5
torch --> 
add:1
softmax:4
sin:15
conv2d:1
log:2
cos:4

generate models:472
