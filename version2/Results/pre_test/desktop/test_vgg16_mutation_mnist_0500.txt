
analyse output arrays in iter:2

pre layer res:
3:transpose
{'name': 'transpose', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [4], 'to': [2]}
tf node:
{'name': 'conv2d', 'output': array([[[[256., 384., 384., ..., 384., 384., 256.],
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         ...,
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         [256., 384., 384., ..., 384., 384., 256.]],

        [[256., 384., 384., ..., 384., 384., 256.],
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         ...,
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         [256., 384., 384., ..., 384., 384., 256.]],

        [[256., 384., 384., ..., 384., 384., 256.],
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         ...,
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         [256., 384., 384., ..., 384., 384., 256.]],

        ...,

        [[256., 384., 384., ..., 384., 384., 256.],
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         ...,
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         [256., 384., 384., ..., 384., 384., 256.]],

        [[256., 384., 384., ..., 384., 384., 256.],
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         ...,
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         [256., 384., 384., ..., 384., 384., 256.]],

        [[256., 384., 384., ..., 384., 384., 256.],
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         ...,
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         [256., 384., 384., ..., 384., 384., 256.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [3], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[256., 384., 384., ..., 384., 384., 256.],
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         ...,
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         [256., 384., 384., ..., 384., 384., 256.]],

        [[256., 384., 384., ..., 384., 384., 256.],
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         ...,
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         [256., 384., 384., ..., 384., 384., 256.]],

        [[256., 384., 384., ..., 384., 384., 256.],
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         ...,
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         [256., 384., 384., ..., 384., 384., 256.]],

        ...,

        [[256., 384., 384., ..., 384., 384., 256.],
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         ...,
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         [256., 384., 384., ..., 384., 384., 256.]],

        [[256., 384., 384., ..., 384., 384., 256.],
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         ...,
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         [256., 384., 384., ..., 384., 384., 256.]],

        [[256., 384., 384., ..., 384., 384., 256.],
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         ...,
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         [256., 384., 384., ..., 384., 384., 256.]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [3], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[256., 384., 384., ..., 384., 384., 256.],
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         ...,
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         [256., 384., 384., ..., 384., 384., 256.]],

        [[256., 384., 384., ..., 384., 384., 256.],
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         ...,
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         [256., 384., 384., ..., 384., 384., 256.]],

        [[256., 384., 384., ..., 384., 384., 256.],
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         ...,
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         [256., 384., 384., ..., 384., 384., 256.]],

        ...,

        [[256., 384., 384., ..., 384., 384., 256.],
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         ...,
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         [256., 384., 384., ..., 384., 384., 256.]],

        [[256., 384., 384., ..., 384., 384., 256.],
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         ...,
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         [256., 384., 384., ..., 384., 384., 256.]],

        [[256., 384., 384., ..., 384., 384., 256.],
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         ...,
         [384., 576., 576., ..., 576., 576., 384.],
         [384., 576., 576., ..., 576., 576., 384.],
         [256., 384., 384., ..., 384., 384., 256.]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [3], 'to': []}

generate models:3

analyse output arrays in iter:8

pre layer res:
28:square
{'name': 'square', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf,  1.,  1.],
         [ 1.,  1.,  1., ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf,  1.,  1.],
         [ 1.,  1.,  1., ..., inf, inf, inf],
         [inf, inf, inf, ..., inf,  1.,  1.]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf,  1.,  1.],
         [ 1.,  1.,  1., ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf,  1.,  1.],
         [ 1.,  1.,  1., ..., inf, inf, inf],
         [inf, inf, inf, ..., inf,  1.,  1.]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf,  1.,  1.],
         [ 1.,  1.,  1., ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf,  1.,  1.],
         [ 1.,  1.,  1., ..., inf, inf, inf],
         [inf, inf, inf, ..., inf,  1.,  1.]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         ...,
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         ...,
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         ...,
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [26], 'to': [7]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [28], 'to': [17]}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 128, 14, 14), 'from': [28], 'to': [17]}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 14, 14]), 'from': [28], 'to': [17]}

generate models:9

final statics:
total operators:28
tensorflow --> nums:2,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:2
mindspore --> 
torch --> 

generate models:10

analyse output arrays in iter:15

pre layer res:
18:sin
{'name': 'sin', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [0], 'to': [13]}
tf node:
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [18], 'to': [1]}
ms node:
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [18], 'to': [1]}
torch node:
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [18], 'to': [1]}

generate models:16

analyse output arrays in iter:16

pre layer res:
25:log
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [6], 'to': [7]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [25], 'to': [8]}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 128, 14, 14), 'from': [25], 'to': [8]}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 14, 14]), 'from': [25], 'to': [8]}

generate models:17

analyse output arrays in iter:17

pre layer res:
18:reshape
{'name': 'reshape', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [17], 'to': [7]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [18], 'to': [33]}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 128, 14, 14), 'from': [18], 'to': [33]}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 14, 14]), 'from': [18], 'to': [33]}

generate models:18

analyse output arrays in iter:31

pre layer res:
16:add
{'name': 'add', 'output': array([[[[         -inf,          -inf, 4.5158273e-01, ...,
          4.5158273e-01, 4.5158273e-01, 4.5158273e-01],
         [         -inf,          -inf, 4.5158273e-01, ...,
          4.5158273e-01, 4.5158273e-01, 4.5158273e-01],
         [         -inf, 4.5158243e-01, 4.5158273e-01, ...,
          4.5158273e-01, 4.5158273e-01, 4.5158273e-01],
         ...,
         [4.5158273e-01, 4.5158273e-01, 4.5158273e-01, ...,
          4.5158273e-01, 4.5158273e-01,          -inf],
         [5.5214085e+06, 5.6115205e+06, 4.7964165e+06, ...,
          4.2188844e+05,          -inf,          -inf],
         [4.5158273e-01, 4.5158273e-01, 4.5158273e-01, ...,
          4.5158273e-01,          -inf,          -inf]],

        [[         -inf,          -inf, 6.9713925e+06, ...,
          2.6583045e+06, 8.6016453e+04, 4.5158273e-01],
         [         -inf,          -inf, 4.5158273e-01, ...,
          4.5158273e-01, 4.5158273e-01, 5.8982405e+06],
         [         -inf, 4.4113925e+06, 5.5336965e+06, ...,
          6.6560005e+06, 1.1509765e+06, 4.5158273e-01],
         ...,
         [8.9292800e+06, 7.5038725e+06, 7.9912965e+06, ...,
          6.5290245e+06, 1.0649605e+06,          -inf],
         [4.5158273e-01, 4.5158273e-01, 4.5158273e-01, ...,
          1.6384451e+04,          -inf,          -inf],
         [9.3265920e+06, 9.3184000e+06, 7.5243525e+06, ...,
          1.3475845e+06,          -inf,          -inf]],

        [[         -inf,          -inf, 4.5158273e-01, ...,
          2.8672005e+06, 6.9468165e+06, 9.2078080e+06],
         [         -inf,          -inf, 1.6793605e+06, ...,
          4.5158273e-01, 4.5158273e-01, 4.5158273e-01],
         [         -inf, 4.5158243e-01, 4.5158273e-01, ...,
          7.9749125e+06, 8.5032960e+06, 9.0030080e+06],
         ...,
         [4.5158273e-01, 4.5158273e-01, 1.4458885e+06, ...,
          7.0123525e+06, 5.1978245e+06,          -inf],
         [7.0533125e+06, 8.3558444e+05, 4.5158273e-01, ...,
          4.5158273e-01,          -inf,          -inf],
         [4.5158273e-01, 4.5158273e-01, 3.8051845e+06, ...,
          6.1317125e+06,          -inf,          -inf]],

        ...,

        [[         -inf,          -inf, 6.9713925e+06, ...,
          2.6583045e+06, 8.6016453e+04, 4.5158273e-01],
         [         -inf,          -inf, 4.5158273e-01, ...,
          4.5158273e-01, 4.5158273e-01, 5.8982405e+06],
         [         -inf, 4.4113925e+06, 5.5336965e+06, ...,
          6.6560005e+06, 1.1509765e+06, 4.5158273e-01],
         ...,
         [8.9292800e+06, 7.5038725e+06, 7.9912965e+06, ...,
          6.5290245e+06, 1.0649605e+06,          -inf],
         [4.5158273e-01, 4.5158273e-01, 4.5158273e-01, ...,
          1.6384451e+04,          -inf,          -inf],
         [9.3265920e+06, 9.3184000e+06, 7.5243525e+06, ...,
          1.3475845e+06,          -inf,          -inf]],

        [[         -inf,          -inf, 4.5158273e-01, ...,
          2.8672005e+06, 6.9468165e+06, 9.2078080e+06],
         [         -inf,          -inf, 1.6793605e+06, ...,
          4.5158273e-01, 4.5158273e-01, 4.5158273e-01],
         [         -inf, 4.5158243e-01, 4.5158273e-01, ...,
          7.9749125e+06, 8.5032960e+06, 9.0030080e+06],
         ...,
         [4.5158273e-01, 4.5158273e-01, 1.4458885e+06, ...,
          7.0123525e+06, 5.1978245e+06,          -inf],
         [7.0533125e+06, 8.3558444e+05, 4.5158273e-01, ...,
          4.5158273e-01,          -inf,          -inf],
         [4.5158273e-01, 4.5158273e-01, 3.8051845e+06, ...,
          6.1317125e+06,          -inf,          -inf]],

        [[         -inf,          -inf, 4.5158273e-01, ...,
          4.5158273e-01, 4.5158273e-01, 4.5158273e-01],
         [         -inf,          -inf, 3.8584325e+06, ...,
          8.8678400e+06, 8.6097920e+06, 7.8110725e+06],
         [         -inf, 4.5158243e-01, 4.5158273e-01, ...,
          4.5158273e-01, 4.5158273e-01, 4.5158273e-01],
         ...,
         [3.1129644e+05, 4.5158273e-01, 4.5158273e-01, ...,
          4.5158273e-01, 4.5158273e-01,          -inf],
         [4.5158273e-01, 4.5158273e-01, 4.5158273e-01, ...,
          4.5158273e-01,          -inf,          -inf],
         [4.5158273e-01, 4.5158273e-01, 4.5158273e-01, ...,
          4.5158273e-01,          -inf,          -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [15, 19], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[          nan,           nan,           nan, ...,
          1.4666959e+09, 1.6944991e+09, 1.2339118e+09],
         [          nan,           nan,           nan, ...,
          2.6198674e+09, 2.7597212e+09, 1.8309448e+09],
         [          nan,           nan,          -inf, ...,
          2.5441078e+09, 2.7481869e+09, 1.7972593e+09],
         ...,
         [          nan,           nan, 1.7342139e+09, ...,
                    nan,           nan,           nan],
         [1.7411607e+09, 2.5591811e+09, 2.5510546e+09, ...,
                    nan,           nan,           nan],
         [1.2053381e+09, 1.7213686e+09, 1.5109980e+09, ...,
                    nan,           nan,           nan]],

        [[          nan,           nan,           nan, ...,
          1.4666959e+09, 1.6944991e+09, 1.2339118e+09],
         [          nan,           nan,           nan, ...,
          2.6198674e+09, 2.7597212e+09, 1.8309448e+09],
         [          nan,           nan,          -inf, ...,
          2.5441078e+09, 2.7481869e+09, 1.7972593e+09],
         ...,
         [          nan,           nan, 1.7342139e+09, ...,
                    nan,           nan,           nan],
         [1.7411607e+09, 2.5591811e+09, 2.5510546e+09, ...,
                    nan,           nan,           nan],
         [1.2053381e+09, 1.7213686e+09, 1.5109980e+09, ...,
                    nan,           nan,           nan]],

        [[          nan,           nan,           nan, ...,
          1.4666959e+09, 1.6944991e+09, 1.2339118e+09],
         [          nan,           nan,           nan, ...,
          2.6198674e+09, 2.7597212e+09, 1.8309448e+09],
         [          nan,           nan,          -inf, ...,
          2.5441078e+09, 2.7481869e+09, 1.7972593e+09],
         ...,
         [          nan,           nan, 1.7342139e+09, ...,
                    nan,           nan,           nan],
         [1.7411607e+09, 2.5591811e+09, 2.5510546e+09, ...,
                    nan,           nan,           nan],
         [1.2053381e+09, 1.7213686e+09, 1.5109980e+09, ...,
                    nan,           nan,           nan]],

        ...,

        [[          nan,           nan,           nan, ...,
          1.4666959e+09, 1.6944991e+09, 1.2339118e+09],
         [          nan,           nan,           nan, ...,
          2.6198674e+09, 2.7597212e+09, 1.8309448e+09],
         [          nan,           nan,          -inf, ...,
          2.5441078e+09, 2.7481869e+09, 1.7972593e+09],
         ...,
         [          nan,           nan, 1.7342139e+09, ...,
                    nan,           nan,           nan],
         [1.7411607e+09, 2.5591811e+09, 2.5510546e+09, ...,
                    nan,           nan,           nan],
         [1.2053381e+09, 1.7213686e+09, 1.5109980e+09, ...,
                    nan,           nan,           nan]],

        [[          nan,           nan,           nan, ...,
          1.4666959e+09, 1.6944991e+09, 1.2339118e+09],
         [          nan,           nan,           nan, ...,
          2.6198674e+09, 2.7597212e+09, 1.8309448e+09],
         [          nan,           nan,          -inf, ...,
          2.5441078e+09, 2.7481869e+09, 1.7972593e+09],
         ...,
         [          nan,           nan, 1.7342139e+09, ...,
                    nan,           nan,           nan],
         [1.7411607e+09, 2.5591811e+09, 2.5510546e+09, ...,
                    nan,           nan,           nan],
         [1.2053381e+09, 1.7213686e+09, 1.5109980e+09, ...,
                    nan,           nan,           nan]],

        [[          nan,           nan,           nan, ...,
          1.4666959e+09, 1.6944991e+09, 1.2339118e+09],
         [          nan,           nan,           nan, ...,
          2.6198674e+09, 2.7597212e+09, 1.8309448e+09],
         [          nan,           nan,          -inf, ...,
          2.5441078e+09, 2.7481869e+09, 1.7972593e+09],
         ...,
         [          nan,           nan, 1.7342139e+09, ...,
                    nan,           nan,           nan],
         [1.7411607e+09, 2.5591811e+09, 2.5510546e+09, ...,
                    nan,           nan,           nan],
         [1.2053381e+09, 1.7213686e+09, 1.5109980e+09, ...,
                    nan,           nan,           nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [16], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[         -inf,          -inf,          -inf, ...,
          1.4666957e+09, 1.6944988e+09, 1.2339118e+09],
         [         -inf,          -inf,          -inf, ...,
          2.6198671e+09, 2.7597210e+09, 1.8309448e+09],
         [         -inf,          -inf,          -inf, ...,
          2.5441075e+09, 2.7481866e+09, 1.7972593e+09],
         ...,
         [         -inf,          -inf, 1.7342136e+09, ...,
                   -inf,          -inf,          -inf],
         [1.7411604e+09, 2.5591808e+09, 2.5510543e+09, ...,
                   -inf,          -inf,          -inf],
         [1.2053381e+09, 1.7213686e+09, 1.5109980e+09, ...,
                   -inf,          -inf,          -inf]],

        [[         -inf,          -inf,          -inf, ...,
          1.4666957e+09, 1.6944988e+09, 1.2339118e+09],
         [         -inf,          -inf,          -inf, ...,
          2.6198671e+09, 2.7597210e+09, 1.8309448e+09],
         [         -inf,          -inf,          -inf, ...,
          2.5441075e+09, 2.7481866e+09, 1.7972593e+09],
         ...,
         [         -inf,          -inf, 1.7342136e+09, ...,
                   -inf,          -inf,          -inf],
         [1.7411604e+09, 2.5591808e+09, 2.5510543e+09, ...,
                   -inf,          -inf,          -inf],
         [1.2053381e+09, 1.7213686e+09, 1.5109980e+09, ...,
                   -inf,          -inf,          -inf]],

        [[         -inf,          -inf,          -inf, ...,
          1.4666957e+09, 1.6944988e+09, 1.2339118e+09],
         [         -inf,          -inf,          -inf, ...,
          2.6198671e+09, 2.7597210e+09, 1.8309448e+09],
         [         -inf,          -inf,          -inf, ...,
          2.5441075e+09, 2.7481866e+09, 1.7972593e+09],
         ...,
         [         -inf,          -inf, 1.7342136e+09, ...,
                   -inf,          -inf,          -inf],
         [1.7411604e+09, 2.5591808e+09, 2.5510543e+09, ...,
                   -inf,          -inf,          -inf],
         [1.2053381e+09, 1.7213686e+09, 1.5109980e+09, ...,
                   -inf,          -inf,          -inf]],

        ...,

        [[         -inf,          -inf,          -inf, ...,
          1.4666957e+09, 1.6944988e+09, 1.2339118e+09],
         [         -inf,          -inf,          -inf, ...,
          2.6198671e+09, 2.7597210e+09, 1.8309448e+09],
         [         -inf,          -inf,          -inf, ...,
          2.5441075e+09, 2.7481866e+09, 1.7972593e+09],
         ...,
         [         -inf,          -inf, 1.7342136e+09, ...,
                   -inf,          -inf,          -inf],
         [1.7411604e+09, 2.5591808e+09, 2.5510543e+09, ...,
                   -inf,          -inf,          -inf],
         [1.2053381e+09, 1.7213686e+09, 1.5109980e+09, ...,
                   -inf,          -inf,          -inf]],

        [[         -inf,          -inf,          -inf, ...,
          1.4666957e+09, 1.6944988e+09, 1.2339118e+09],
         [         -inf,          -inf,          -inf, ...,
          2.6198671e+09, 2.7597210e+09, 1.8309448e+09],
         [         -inf,          -inf,          -inf, ...,
          2.5441075e+09, 2.7481866e+09, 1.7972594e+09],
         ...,
         [         -inf,          -inf, 1.7342136e+09, ...,
                   -inf,          -inf,          -inf],
         [1.7411604e+09, 2.5591808e+09, 2.5510543e+09, ...,
                   -inf,          -inf,          -inf],
         [1.2053381e+09, 1.7213686e+09, 1.5109980e+09, ...,
                   -inf,          -inf,          -inf]],

        [[         -inf,          -inf,          -inf, ...,
          1.4666957e+09, 1.6944988e+09, 1.2339118e+09],
         [         -inf,          -inf,          -inf, ...,
          2.6198671e+09, 2.7597210e+09, 1.8309448e+09],
         [         -inf,          -inf,          -inf, ...,
          2.5441075e+09, 2.7481866e+09, 1.7972594e+09],
         ...,
         [         -inf,          -inf, 1.7342136e+09, ...,
                   -inf,          -inf,          -inf],
         [1.7411604e+09, 2.5591808e+09, 2.5510543e+09, ...,
                   -inf,          -inf,          -inf],
         [1.2053381e+09, 1.7213686e+09, 1.5109980e+09, ...,
                   -inf,          -inf,          -inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [16], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[         -inf,          -inf,          -inf, ...,
          1.4666957e+09, 1.6944988e+09, 1.2339118e+09],
         [         -inf,          -inf,          -inf, ...,
          2.6198671e+09, 2.7597210e+09, 1.8309448e+09],
         [         -inf,          -inf,          -inf, ...,
          2.5441075e+09, 2.7481866e+09, 1.7972593e+09],
         ...,
         [         -inf,          -inf, 1.7342136e+09, ...,
                   -inf,          -inf,          -inf],
         [1.7411604e+09, 2.5591808e+09, 2.5510543e+09, ...,
                   -inf,          -inf,          -inf],
         [1.2053381e+09, 1.7213686e+09, 1.5109980e+09, ...,
                   -inf,          -inf,          -inf]],

        [[         -inf,          -inf,          -inf, ...,
          1.4666957e+09, 1.6944988e+09, 1.2339118e+09],
         [         -inf,          -inf,          -inf, ...,
          2.6198671e+09, 2.7597210e+09, 1.8309448e+09],
         [         -inf,          -inf,          -inf, ...,
          2.5441075e+09, 2.7481866e+09, 1.7972593e+09],
         ...,
         [         -inf,          -inf, 1.7342136e+09, ...,
                   -inf,          -inf,          -inf],
         [1.7411604e+09, 2.5591808e+09, 2.5510543e+09, ...,
                   -inf,          -inf,          -inf],
         [1.2053381e+09, 1.7213686e+09, 1.5109980e+09, ...,
                   -inf,          -inf,          -inf]],

        [[         -inf,          -inf,          -inf, ...,
          1.4666957e+09, 1.6944988e+09, 1.2339118e+09],
         [         -inf,          -inf,          -inf, ...,
          2.6198671e+09, 2.7597210e+09, 1.8309448e+09],
         [         -inf,          -inf,          -inf, ...,
          2.5441075e+09, 2.7481866e+09, 1.7972593e+09],
         ...,
         [         -inf,          -inf, 1.7342136e+09, ...,
                   -inf,          -inf,          -inf],
         [1.7411604e+09, 2.5591808e+09, 2.5510543e+09, ...,
                   -inf,          -inf,          -inf],
         [1.2053381e+09, 1.7213686e+09, 1.5109980e+09, ...,
                   -inf,          -inf,          -inf]],

        ...,

        [[         -inf,          -inf,          -inf, ...,
          1.4666957e+09, 1.6944988e+09, 1.2339118e+09],
         [         -inf,          -inf,          -inf, ...,
          2.6198671e+09, 2.7597210e+09, 1.8309448e+09],
         [         -inf,          -inf,          -inf, ...,
          2.5441075e+09, 2.7481866e+09, 1.7972593e+09],
         ...,
         [         -inf,          -inf, 1.7342136e+09, ...,
                   -inf,          -inf,          -inf],
         [1.7411604e+09, 2.5591808e+09, 2.5510543e+09, ...,
                   -inf,          -inf,          -inf],
         [1.2053381e+09, 1.7213686e+09, 1.5109980e+09, ...,
                   -inf,          -inf,          -inf]],

        [[         -inf,          -inf,          -inf, ...,
          1.4666957e+09, 1.6944988e+09, 1.2339118e+09],
         [         -inf,          -inf,          -inf, ...,
          2.6198671e+09, 2.7597210e+09, 1.8309448e+09],
         [         -inf,          -inf,          -inf, ...,
          2.5441075e+09, 2.7481866e+09, 1.7972593e+09],
         ...,
         [         -inf,          -inf, 1.7342136e+09, ...,
                   -inf,          -inf,          -inf],
         [1.7411604e+09, 2.5591808e+09, 2.5510543e+09, ...,
                   -inf,          -inf,          -inf],
         [1.2053381e+09, 1.7213686e+09, 1.5109980e+09, ...,
                   -inf,          -inf,          -inf]],

        [[         -inf,          -inf,          -inf, ...,
          1.4666957e+09, 1.6944988e+09, 1.2339118e+09],
         [         -inf,          -inf,          -inf, ...,
          2.6198671e+09, 2.7597210e+09, 1.8309448e+09],
         [         -inf,          -inf,          -inf, ...,
          2.5441075e+09, 2.7481866e+09, 1.7972593e+09],
         ...,
         [         -inf,          -inf, 1.7342136e+09, ...,
                   -inf,          -inf,          -inf],
         [1.7411604e+09, 2.5591808e+09, 2.5510543e+09, ...,
                   -inf,          -inf,          -inf],
         [1.2053381e+09, 1.7213686e+09, 1.5109980e+09, ...,
                   -inf,          -inf,          -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [16], 'to': []}

generate models:31

analyse output arrays in iter:35

pre layer res:
6:relu
{'name': 'relu', 'output': array([[[[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         ...,
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         ...,
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         ...,
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        ...,

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         ...,
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         ...,
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         ...,
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [12], 'to': [16]}
tf node:
{'name': 'sin', 'output': array([[[[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]],

        [[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]],

        [[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]],

        ...,

        [[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]],

        [[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]],

        [[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [6], 'to': [7]}
ms node:
{'name': 'sin', 'output': array([[[[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]],

        [[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]],

        [[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]],

        ...,

        [[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]],

        [[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]],

        [[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]]]], dtype=float32), 'output_shape': (1, 128, 14, 14), 'from': [6], 'to': [7]}
torch node:
{'name': 'sin', 'output': array([[[[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]],

        [[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]],

        [[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]],

        ...,

        [[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]],

        [[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]],

        [[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 14, 14]), 'from': [6], 'to': [7]}

generate models:35

analyse output arrays in iter:39

pre layer res:
2:conv2d
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [19], 'to': [18]}
tf node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [2], 'to': [3]}
ms node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [2], 'to': [3]}
torch node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [2], 'to': [3]}

generate models:39

analyse output arrays in iter:41

pre layer res:
11:add
{'name': 'add', 'output': array([[[[3.1618003e+17, 1.8618278e+17, 1.7664273e+16, ...,
          6.6209951e+17, 7.5927985e+17, 6.6937175e+17],
         [9.7566704e+17, 5.0282213e+17,           inf, ...,
                    inf,           inf, 1.0361309e+18],
         [3.6257832e+17, 2.6777754e+17,           inf, ...,
                    inf,           inf, 5.3568646e+17],
         ...,
         [9.4553121e+16, 7.3301389e+17,           inf, ...,
                    inf, 2.9105200e+17, 2.3672046e+17],
         [          inf,           inf,           inf, ...,
                    inf, 1.3954349e+17, 1.5195038e+17],
         [          inf,           inf,           inf, ...,
          2.4133428e+17, 2.4002408e+16,           inf]],

        [[          inf,           inf,           inf, ...,
          6.6209951e+17,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf, 1.0180654e+18, ...,
          2.4133428e+17,           inf,           inf]],

        [[          inf,           inf, 1.7664273e+16, ...,
          6.6209951e+17, 7.5927985e+17,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf, 1.5195038e+17],
         [          inf,           inf, 1.0180654e+18, ...,
                    inf,           inf, 3.0115898e+16]],

        ...,

        [[3.1618003e+17, 1.8618278e+17, 1.7664273e+16, ...,
          6.6209951e+17, 7.5927985e+17, 6.6937175e+17],
         [9.7566704e+17, 5.0282213e+17, 1.0430803e+18, ...,
          5.3035097e+18, 4.1948408e+18, 1.0361309e+18],
         [3.6257832e+17, 2.6777754e+17, 2.9572465e+18, ...,
          4.8407682e+18, 2.6577917e+18, 5.3568646e+17],
         ...,
         [9.4553121e+16, 7.3301389e+17, 3.8407711e+18, ...,
          2.3581888e+18, 2.9105200e+17, 2.3672046e+17],
         [2.6696424e+17, 1.9078149e+18, 5.4518355e+18, ...,
          1.9698655e+18, 1.3954349e+17, 1.5195038e+17],
         [7.3121949e+17, 6.9798159e+17, 1.0180654e+18, ...,
          2.4133428e+17, 2.4002408e+16, 3.0115898e+16]],

        [[3.1618003e+17, 1.8618278e+17, 1.7664273e+16, ...,
          6.6209951e+17, 7.5927985e+17, 6.6937175e+17],
         [9.7566704e+17, 5.0282213e+17, 1.0430803e+18, ...,
          5.3035097e+18, 4.1948408e+18, 1.0361309e+18],
         [3.6257832e+17, 2.6777754e+17, 2.9572465e+18, ...,
          4.8407682e+18, 2.6577917e+18, 5.3568646e+17],
         ...,
         [9.4553121e+16, 7.3301389e+17, 3.8407711e+18, ...,
          2.3581888e+18, 2.9105200e+17, 2.3672046e+17],
         [2.6696424e+17, 1.9078149e+18, 5.4518355e+18, ...,
          1.9698655e+18, 1.3954349e+17, 1.5195038e+17],
         [7.3121949e+17, 6.9798159e+17, 1.0180654e+18, ...,
          2.4133428e+17, 2.4002408e+16, 3.0115898e+16]],

        [[3.1618003e+17, 1.8618278e+17, 1.7664273e+16, ...,
          6.6209951e+17, 7.5927985e+17, 6.6937175e+17],
         [9.7566704e+17, 5.0282213e+17, 1.0430803e+18, ...,
          5.3035097e+18, 4.1948408e+18, 1.0361309e+18],
         [3.6257832e+17, 2.6777754e+17, 2.9572465e+18, ...,
          4.8407682e+18, 2.6577917e+18, 5.3568646e+17],
         ...,
         [9.4553121e+16, 7.3301389e+17, 3.8407711e+18, ...,
          2.3581888e+18, 2.9105200e+17, 2.3672046e+17],
         [2.6696424e+17, 1.9078149e+18, 5.4518355e+18, ...,
          1.9698655e+18, 1.3954349e+17, 1.5195038e+17],
         [7.3121949e+17, 6.9798159e+17, 1.0180654e+18, ...,
          2.4133428e+17, 2.4002408e+16, 3.0115898e+16]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [9, 14], 'to': [27]}
tf node:
{'name': 'softmax', 'output': array([[[[ 0.,  0.,  0., ...,  0.,  1.,  0.],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[ 0.,  0.,  0., ...,  0.,  1.,  0.],
         [ 0.,  0.,  0., ...,  1.,  0.,  0.],
         [ 0.,  0.,  0., ...,  1.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  1., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  1.,  0.],
         [ 0.,  0.,  0., ...,  1.,  0.,  0.],
         [ 0.,  0.,  0., ...,  1.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  1., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  1.,  0.],
         [ 0.,  0.,  0., ...,  1.,  0.,  0.],
         [ 0.,  0.,  0., ...,  1.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  1., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [11], 'to': [15]}
ms node:
{'name': 'softmax', 'output': array([[[[ 0.,  0.,  0., ...,  0.,  1.,  0.],
         [ 0.,  0., nan, ..., nan, nan,  0.],
         [ 0.,  0., nan, ..., nan, nan,  0.],
         ...,
         [ 0.,  0., nan, ..., nan,  0.,  0.],
         [nan, nan, nan, ..., nan,  0.,  0.],
         [nan, nan, nan, ...,  0.,  0., nan]],

        [[nan, nan, nan, ...,  0., nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan,  0., ...,  0., nan, nan]],

        [[nan, nan,  0., ...,  0.,  0., nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan,  0.],
         [nan, nan,  0., ..., nan, nan,  0.]],

        ...,

        [[ 0.,  0.,  0., ...,  0.,  1.,  0.],
         [ 0.,  0.,  0., ...,  1.,  0.,  0.],
         [ 0.,  0.,  0., ...,  1.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  1., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  1.,  0.],
         [ 0.,  0.,  0., ...,  1.,  0.,  0.],
         [ 0.,  0.,  0., ...,  1.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  1., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  1.,  0.],
         [ 0.,  0.,  0., ...,  1.,  0.,  0.],
         [ 0.,  0.,  0., ...,  1.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  1., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': (1, 128, 7, 7), 'from': [11], 'to': [15]}
torch node:
{'name': 'softmax', 'output': array([[[[ 0.,  0.,  0., ...,  0.,  1.,  0.],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[ 0.,  0.,  0., ...,  0.,  1.,  0.],
         [ 0.,  0.,  0., ...,  1.,  0.,  0.],
         [ 0.,  0.,  0., ...,  1.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  1., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  1.,  0.],
         [ 0.,  0.,  0., ...,  1.,  0.,  0.],
         [ 0.,  0.,  0., ...,  1.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  1., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  1.,  0.],
         [ 0.,  0.,  0., ...,  1.,  0.,  0.],
         [ 0.,  0.,  0., ...,  1.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  1., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 7, 7]), 'from': [11], 'to': [15]}

generate models:41

analyse output arrays in iter:44

pre layer res:
21:log
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [11], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [21], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [21], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [21], 'to': []}

generate models:44

analyse output arrays in iter:45

pre layer res:
8:relu
{'name': 'relu', 'output': array([[[[ 5137604.,  6843204.,  5724160., ...,  1709760.,  3552640.,
           3149120.],
         [ 5137604.,  6843204.,  5724160., ...,  6327360.,  9863360.,
           8116160.],
         [ 8394880., 11885120., 10620480., ...,  4617783.,  6310720.,
           4967040.],
         ...,
         [ 2924480.,  4372160.,  4372160., ...,  2683200.,  2437760.,
           1389440.],
         [ 6980480.,  9667840.,  8702720., ...,   133120.,   511680.,
            511680.],
         [ 4056000.,  5295680.,  4330560., ...,   133120.,   511680.,
            511680.]],

        [[ 5137604.,  6843204.,  5724160., ...,  1709760.,  3552640.,
           3149120.],
         [ 5137604.,  6843204.,  5724160., ...,  6327360.,  9863360.,
           8116160.],
         [ 8394880., 11885120., 10620480., ...,  4617783.,  6310720.,
           4967040.],
         ...,
         [ 2924480.,  4372160.,  4372160., ...,  2683200.,  2437760.,
           1389440.],
         [ 6980480.,  9667840.,  8702720., ...,   133120.,   511680.,
            511680.],
         [ 4056000.,  5295680.,  4330560., ...,   133120.,   511680.,
            511680.]],

        [[ 5137604.,  6843204.,  5724160., ...,  1709760.,  3552640.,
           3149120.],
         [ 5137604.,  6843204.,  5724160., ...,  6327360.,  9863360.,
           8116160.],
         [ 8394880., 11885120., 10620480., ...,  4617783.,  6310720.,
           4967040.],
         ...,
         [ 2924480.,  4372160.,  4372160., ...,  2683200.,  2437760.,
           1389440.],
         [ 6980480.,  9667840.,  8702720., ...,   133120.,   511680.,
            511680.],
         [ 4056000.,  5295680.,  4330560., ...,   133120.,   511680.,
            511680.]],

        ...,

        [[ 5137604.,  6843204.,  5724160., ...,  1709760.,  3552640.,
           3149120.],
         [ 5137604.,  6843204.,  5724160., ...,  6327360.,  9863360.,
           8116160.],
         [ 8394880., 11885120., 10620480., ...,  4617783.,  6310720.,
           4967040.],
         ...,
         [ 2924480.,  4372160.,  4372160., ...,  2683200.,  2437760.,
           1389440.],
         [ 6980480.,  9667840.,  8702720., ...,   133120.,   511680.,
            511680.],
         [ 4056000.,  5295680.,  4330560., ...,   133120.,   511680.,
            511680.]],

        [[ 5137604.,  6843204.,  5724160., ...,  1709760.,  3552640.,
           3149120.],
         [ 5137604.,  6843204.,  5724160., ...,  6327360.,  9863360.,
           8116160.],
         [ 8394880., 11885120., 10620480., ...,  4617783.,  6310720.,
           4967040.],
         ...,
         [ 2924480.,  4372160.,  4372160., ...,  2683200.,  2437760.,
           1389440.],
         [ 6980480.,  9667840.,  8702720., ...,   133120.,   511680.,
            511680.],
         [ 4056000.,  5295680.,  4330560., ...,   133120.,   511680.,
            511680.]],

        [[ 5137604.,  6843204.,  5724160., ...,  1709760.,  3552640.,
           3149120.],
         [ 5137604.,  6843204.,  5724160., ...,  6327360.,  9863360.,
           8116160.],
         [ 8394880., 11885120., 10620480., ...,  4617783.,  6310720.,
           4967040.],
         ...,
         [ 2924480.,  4372160.,  4372160., ...,  2683200.,  2437760.,
           1389440.],
         [ 6980480.,  9667840.,  8702720., ...,   133120.,   511680.,
            511680.],
         [ 4056000.,  5295680.,  4330560., ...,   133120.,   511680.,
            511680.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [11], 'to': [12]}
tf node:
{'name': 'cos', 'output': array([[[[ 0.89872116, -0.0427991 , -0.63280815, ...,  0.03455566,
           0.2057028 ,  0.9959156 ],
         [ 0.89872116, -0.0427991 , -0.63280815, ..., -0.725856  ,
          -0.999995  ,  0.99425024],
         [-0.5945592 , -0.81908673,  0.77054775, ...,  0.9982473 ,
          -0.20259586,  0.980521  ],
         ...,
         [-0.9470446 ,  0.7114856 ,  0.7114856 , ..., -0.96321183,
          -0.9428405 ,  0.03687643],
         [ 0.79837793, -0.98766714,  0.83180004, ..., -0.2728045 ,
          -0.81372267, -0.81372267],
         [-0.94945323, -0.5926904 ,  0.9818656 , ..., -0.2728045 ,
          -0.81372267, -0.81372267]],

        [[ 0.89872116, -0.0427991 , -0.63280815, ...,  0.03455566,
           0.2057028 ,  0.9959156 ],
         [ 0.89872116, -0.0427991 , -0.63280815, ..., -0.725856  ,
          -0.999995  ,  0.99425024],
         [-0.5945592 , -0.81908673,  0.77054775, ...,  0.9982473 ,
          -0.20259586,  0.980521  ],
         ...,
         [-0.9470446 ,  0.7114856 ,  0.7114856 , ..., -0.96321183,
          -0.9428405 ,  0.03687643],
         [ 0.79837793, -0.98766714,  0.83180004, ..., -0.2728045 ,
          -0.81372267, -0.81372267],
         [-0.94945323, -0.5926904 ,  0.9818656 , ..., -0.2728045 ,
          -0.81372267, -0.81372267]],

        [[ 0.89872116, -0.0427991 , -0.63280815, ...,  0.03455566,
           0.2057028 ,  0.9959156 ],
         [ 0.89872116, -0.0427991 , -0.63280815, ..., -0.725856  ,
          -0.999995  ,  0.99425024],
         [-0.5945592 , -0.81908673,  0.77054775, ...,  0.9982473 ,
          -0.20259586,  0.980521  ],
         ...,
         [-0.9470446 ,  0.7114856 ,  0.7114856 , ..., -0.96321183,
          -0.9428405 ,  0.03687643],
         [ 0.79837793, -0.98766714,  0.83180004, ..., -0.2728045 ,
          -0.81372267, -0.81372267],
         [-0.94945323, -0.5926904 ,  0.9818656 , ..., -0.2728045 ,
          -0.81372267, -0.81372267]],

        ...,

        [[ 0.89872116, -0.0427991 , -0.63280815, ...,  0.03455566,
           0.2057028 ,  0.9959156 ],
         [ 0.89872116, -0.0427991 , -0.63280815, ..., -0.725856  ,
          -0.999995  ,  0.99425024],
         [-0.5945592 , -0.81908673,  0.77054775, ...,  0.9982473 ,
          -0.20259586,  0.980521  ],
         ...,
         [-0.9470446 ,  0.7114856 ,  0.7114856 , ..., -0.96321183,
          -0.9428405 ,  0.03687643],
         [ 0.79837793, -0.98766714,  0.83180004, ..., -0.2728045 ,
          -0.81372267, -0.81372267],
         [-0.94945323, -0.5926904 ,  0.9818656 , ..., -0.2728045 ,
          -0.81372267, -0.81372267]],

        [[ 0.89872116, -0.0427991 , -0.63280815, ...,  0.03455566,
           0.2057028 ,  0.9959156 ],
         [ 0.89872116, -0.0427991 , -0.63280815, ..., -0.725856  ,
          -0.999995  ,  0.99425024],
         [-0.5945592 , -0.81908673,  0.77054775, ...,  0.9982473 ,
          -0.20259586,  0.980521  ],
         ...,
         [-0.9470446 ,  0.7114856 ,  0.7114856 , ..., -0.96321183,
          -0.9428405 ,  0.03687643],
         [ 0.79837793, -0.98766714,  0.83180004, ..., -0.2728045 ,
          -0.81372267, -0.81372267],
         [-0.94945323, -0.5926904 ,  0.9818656 , ..., -0.2728045 ,
          -0.81372267, -0.81372267]],

        [[ 0.89872116, -0.0427991 , -0.63280815, ...,  0.03455566,
           0.2057028 ,  0.9959156 ],
         [ 0.89872116, -0.0427991 , -0.63280815, ..., -0.725856  ,
          -0.999995  ,  0.99425024],
         [-0.5945592 , -0.81908673,  0.77054775, ...,  0.9982473 ,
          -0.20259586,  0.980521  ],
         ...,
         [-0.9470446 ,  0.7114856 ,  0.7114856 , ..., -0.96321183,
          -0.9428405 ,  0.03687643],
         [ 0.79837793, -0.98766714,  0.83180004, ..., -0.2728045 ,
          -0.81372267, -0.81372267],
         [-0.94945323, -0.5926904 ,  0.9818656 , ..., -0.2728045 ,
          -0.81372267, -0.81372267]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [8], 'to': [20]}
ms node:
{'name': 'cos', 'output': array([[[[-0.9193168 ,  0.7840844 , -0.6328081 , ...,  0.03455566,
           0.2057028 ,  0.9959156 ],
         [-0.9193168 ,  0.7840844 , -0.6328081 , ..., -0.725856  ,
          -0.999995  ,  0.99425024],
         [-0.5945592 , -0.81908673,  0.77054775, ...,  0.58915347,
          -0.20259586,  0.980521  ],
         ...,
         [-0.9470446 ,  0.7114856 ,  0.7114856 , ..., -0.96321183,
          -0.9428405 ,  0.03687643],
         [ 0.7983779 , -0.98766714,  0.83180004, ..., -0.2728045 ,
          -0.8137226 , -0.8137226 ],
         [-0.94945323, -0.5926904 ,  0.9818656 , ..., -0.2728045 ,
          -0.8137226 , -0.8137226 ]],

        [[-0.9193168 ,  0.7840844 , -0.6328081 , ...,  0.03455566,
           0.2057028 ,  0.9959156 ],
         [-0.9193168 ,  0.7840844 , -0.6328081 , ..., -0.725856  ,
          -0.999995  ,  0.99425024],
         [-0.5945592 , -0.81908673,  0.77054775, ...,  0.58915347,
          -0.20259586,  0.980521  ],
         ...,
         [-0.9470446 ,  0.7114856 ,  0.7114856 , ..., -0.96321183,
          -0.9428405 ,  0.03687643],
         [ 0.7983779 , -0.98766714,  0.83180004, ..., -0.2728045 ,
          -0.8137226 , -0.8137226 ],
         [-0.94945323, -0.5926904 ,  0.9818656 , ..., -0.2728045 ,
          -0.8137226 , -0.8137226 ]],

        [[-0.9193168 ,  0.7840844 , -0.6328081 , ...,  0.03455566,
           0.2057028 ,  0.9959156 ],
         [-0.9193168 ,  0.7840844 , -0.6328081 , ..., -0.725856  ,
          -0.999995  ,  0.99425024],
         [-0.5945592 , -0.81908673,  0.77054775, ...,  0.58915347,
          -0.20259586,  0.980521  ],
         ...,
         [-0.9470446 ,  0.7114856 ,  0.7114856 , ..., -0.96321183,
          -0.9428405 ,  0.03687643],
         [ 0.7983779 , -0.98766714,  0.83180004, ..., -0.2728045 ,
          -0.8137226 , -0.8137226 ],
         [-0.94945323, -0.5926904 ,  0.9818656 , ..., -0.2728045 ,
          -0.8137226 , -0.8137226 ]],

        ...,

        [[-0.9193168 ,  0.7840844 , -0.6328081 , ...,  0.03455566,
           0.2057028 ,  0.9959156 ],
         [-0.9193168 ,  0.7840844 , -0.6328081 , ..., -0.725856  ,
          -0.999995  ,  0.99425024],
         [-0.5945592 , -0.81908673,  0.77054775, ...,  0.58915347,
          -0.20259586,  0.980521  ],
         ...,
         [-0.9470446 ,  0.7114856 ,  0.7114856 , ..., -0.96321183,
          -0.9428405 ,  0.03687643],
         [ 0.7983779 , -0.98766714,  0.83180004, ..., -0.2728045 ,
          -0.8137226 , -0.8137226 ],
         [-0.94945323, -0.5926904 ,  0.9818656 , ..., -0.2728045 ,
          -0.8137226 , -0.8137226 ]],

        [[-0.9193168 ,  0.7840844 , -0.6328081 , ...,  0.03455566,
           0.2057028 ,  0.9959156 ],
         [-0.9193168 ,  0.7840844 , -0.6328081 , ..., -0.725856  ,
          -0.999995  ,  0.99425024],
         [-0.5945592 , -0.81908673,  0.77054775, ...,  0.58915347,
          -0.20259586,  0.980521  ],
         ...,
         [-0.9470446 ,  0.7114856 ,  0.7114856 , ..., -0.96321183,
          -0.9428405 ,  0.03687643],
         [ 0.7983779 , -0.98766714,  0.83180004, ..., -0.2728045 ,
          -0.8137226 , -0.8137226 ],
         [-0.94945323, -0.5926904 ,  0.9818656 , ..., -0.2728045 ,
          -0.8137226 , -0.8137226 ]],

        [[-0.9193168 ,  0.7840844 , -0.6328081 , ...,  0.03455566,
           0.2057028 ,  0.9959156 ],
         [-0.9193168 ,  0.7840844 , -0.6328081 , ..., -0.725856  ,
          -0.999995  ,  0.99425024],
         [-0.5945592 , -0.81908673,  0.77054775, ...,  0.58915347,
          -0.20259586,  0.980521  ],
         ...,
         [-0.9470446 ,  0.7114856 ,  0.7114856 , ..., -0.96321183,
          -0.9428405 ,  0.03687643],
         [ 0.7983779 , -0.98766714,  0.83180004, ..., -0.2728045 ,
          -0.8137226 , -0.8137226 ],
         [-0.94945323, -0.5926904 ,  0.9818656 , ..., -0.2728045 ,
          -0.8137226 , -0.8137226 ]]]], dtype=float32), 'output_shape': (1, 128, 14, 14), 'from': [8], 'to': [20]}
torch node:
{'name': 'cos', 'output': array([[[[-0.9193168 ,  0.7840844 , -0.6328081 , ...,  0.03455566,
           0.2057028 ,  0.9959156 ],
         [-0.9193168 ,  0.7840844 , -0.6328081 , ..., -0.725856  ,
          -0.999995  ,  0.99425024],
         [-0.5945592 , -0.81908673,  0.77054775, ..., -0.9555747 ,
          -0.20259586,  0.980521  ],
         ...,
         [-0.9470446 ,  0.7114856 ,  0.7114856 , ..., -0.96321183,
          -0.9428405 ,  0.03687643],
         [ 0.7983779 , -0.98766714,  0.83180004, ..., -0.2728045 ,
          -0.8137226 , -0.8137226 ],
         [-0.94945323, -0.5926904 ,  0.9818656 , ..., -0.2728045 ,
          -0.8137226 , -0.8137226 ]],

        [[-0.9193168 ,  0.7840844 , -0.6328081 , ...,  0.03455566,
           0.2057028 ,  0.9959156 ],
         [-0.9193168 ,  0.7840844 , -0.6328081 , ..., -0.725856  ,
          -0.999995  ,  0.99425024],
         [-0.5945592 , -0.81908673,  0.77054775, ..., -0.9555747 ,
          -0.20259586,  0.980521  ],
         ...,
         [-0.9470446 ,  0.7114856 ,  0.7114856 , ..., -0.96321183,
          -0.9428405 ,  0.03687643],
         [ 0.7983779 , -0.98766714,  0.83180004, ..., -0.2728045 ,
          -0.8137226 , -0.8137226 ],
         [-0.94945323, -0.5926904 ,  0.9818656 , ..., -0.2728045 ,
          -0.8137226 , -0.8137226 ]],

        [[-0.9193168 ,  0.7840844 , -0.6328081 , ...,  0.03455566,
           0.2057028 ,  0.9959156 ],
         [-0.9193168 ,  0.7840844 , -0.6328081 , ..., -0.725856  ,
          -0.999995  ,  0.99425024],
         [-0.5945592 , -0.81908673,  0.77054775, ..., -0.9555747 ,
          -0.20259586,  0.980521  ],
         ...,
         [-0.9470446 ,  0.7114856 ,  0.7114856 , ..., -0.96321183,
          -0.9428405 ,  0.03687643],
         [ 0.7983779 , -0.98766714,  0.83180004, ..., -0.2728045 ,
          -0.8137226 , -0.8137226 ],
         [-0.94945323, -0.5926904 ,  0.9818656 , ..., -0.2728045 ,
          -0.8137226 , -0.8137226 ]],

        ...,

        [[-0.9193168 ,  0.7840844 , -0.6328081 , ...,  0.03455566,
           0.2057028 ,  0.9959156 ],
         [-0.9193168 ,  0.7840844 , -0.6328081 , ..., -0.725856  ,
          -0.999995  ,  0.99425024],
         [-0.5945592 , -0.81908673,  0.77054775, ..., -0.9555747 ,
          -0.20259586,  0.980521  ],
         ...,
         [-0.9470446 ,  0.7114856 ,  0.7114856 , ..., -0.96321183,
          -0.9428405 ,  0.03687643],
         [ 0.7983779 , -0.98766714,  0.83180004, ..., -0.2728045 ,
          -0.8137226 , -0.8137226 ],
         [-0.94945323, -0.5926904 ,  0.9818656 , ..., -0.2728045 ,
          -0.8137226 , -0.8137226 ]],

        [[-0.9193168 ,  0.7840844 , -0.6328081 , ...,  0.03455566,
           0.2057028 ,  0.9959156 ],
         [-0.9193168 ,  0.7840844 , -0.6328081 , ..., -0.725856  ,
          -0.999995  ,  0.99425024],
         [-0.5945592 , -0.81908673,  0.77054775, ..., -0.9555747 ,
          -0.20259586,  0.980521  ],
         ...,
         [-0.9470446 ,  0.7114856 ,  0.7114856 , ..., -0.96321183,
          -0.9428405 ,  0.03687643],
         [ 0.7983779 , -0.98766714,  0.83180004, ..., -0.2728045 ,
          -0.8137226 , -0.8137226 ],
         [-0.94945323, -0.5926904 ,  0.9818656 , ..., -0.2728045 ,
          -0.8137226 , -0.8137226 ]],

        [[-0.9193168 ,  0.7840844 , -0.6328081 , ...,  0.03455566,
           0.2057028 ,  0.9959156 ],
         [-0.9193168 ,  0.7840844 , -0.6328081 , ..., -0.725856  ,
          -0.999995  ,  0.99425024],
         [-0.5945592 , -0.81908673,  0.77054775, ..., -0.9555747 ,
          -0.20259586,  0.980521  ],
         ...,
         [-0.9470446 ,  0.7114856 ,  0.7114856 , ..., -0.96321183,
          -0.9428405 ,  0.03687643],
         [ 0.7983779 , -0.98766714,  0.83180004, ..., -0.2728045 ,
          -0.8137226 , -0.8137226 ],
         [-0.94945323, -0.5926904 ,  0.9818656 , ..., -0.2728045 ,
          -0.8137226 , -0.8137226 ]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 14, 14]), 'from': [8], 'to': [20]}

generate models:45

analyse output arrays in iter:47

pre layer res:
22:add
{'name': 'add', 'output': array([[[[2.0000e+00, 2.0000e+00, 2.0000e+00, ..., 2.0000e+00,
          2.0000e+00, 2.0000e+00],
         [2.0000e+00, 2.0000e+00, 2.0000e+00, ..., 1.6322e+04,
                 inf, 1.6322e+04],
         [2.0000e+00, 2.0000e+00,        inf, ...,        inf,
                 inf, 8.1940e+03],
         ...,
         [2.0000e+00,        inf,        inf, ...,        inf,
                 inf, 2.0000e+00],
         [2.0000e+00,        inf,        inf, ..., 8.1940e+03,
          2.0000e+00, 2.0000e+00],
         [2.0000e+00,        inf,        inf, ..., 2.0000e+00,
          2.0000e+00, 2.0000e+00]],

        [[2.0000e+00, 2.0000e+00, 2.0000e+00, ...,        inf,
          2.0000e+00, 2.0000e+00],
         [2.0000e+00, 2.0000e+00, 2.0000e+00, ..., 1.6322e+04,
                 inf,        inf],
         [       inf, 2.0000e+00,        inf, ...,        inf,
                 inf, 8.1940e+03],
         ...,
         [       inf,        inf,        inf, ...,        inf,
                 inf, 2.0000e+00],
         [2.0000e+00,        inf,        inf, ..., 8.1940e+03,
                 inf,        inf],
         [       inf,        inf,        inf, ...,        inf,
          2.0000e+00, 2.0000e+00]],

        [[2.0000e+00, 2.0000e+00, 2.0000e+00, ...,        inf,
                 inf, 2.0000e+00],
         [       inf,        inf,        inf, ...,        inf,
                 inf, 1.6322e+04],
         [2.0000e+00, 2.0000e+00,        inf, ...,        inf,
                 inf, 8.1940e+03],
         ...,
         [2.0000e+00,        inf,        inf, ...,        inf,
                 inf, 2.0000e+00],
         [2.0000e+00,        inf,        inf, ..., 8.1940e+03,
          2.0000e+00, 2.0000e+00],
         [2.0000e+00,        inf,        inf, ...,        inf,
          2.0000e+00, 2.0000e+00]],

        ...,

        [[1.0000e+00, 1.0000e+00, 1.0000e+00, ...,        inf,
          1.0000e+00, 1.0000e+00],
         [1.0000e+00, 1.0000e+00, 1.0000e+00, ..., 1.0000e+00,
          1.0000e+00,        inf],
         [       inf, 1.0000e+00, 1.0000e+00, ...,        inf,
          1.0000e+00, 1.0000e+00],
         ...,
         [       inf,        inf, 1.0000e+00, ...,        inf,
          1.0000e+00, 1.0000e+00],
         [1.0000e+00, 1.0000e+00, 1.0000e+00, ..., 1.0000e+00,
                 inf,        inf],
         [       inf,        inf,        inf, ...,        inf,
          1.0000e+00, 1.0000e+00]],

        [[1.0000e+00, 1.0000e+00, 1.0000e+00, ...,        inf,
                 inf, 1.0000e+00],
         [       inf,        inf,        inf, ...,        inf,
          1.0000e+00, 1.0000e+00],
         [1.0000e+00, 1.0000e+00, 1.0000e+00, ...,        inf,
          1.0000e+00, 1.0000e+00],
         ...,
         [1.0000e+00, 1.0000e+00, 1.0000e+00, ...,        inf,
          1.0000e+00, 1.0000e+00],
         [1.0000e+00, 1.0000e+00, 1.0000e+00, ..., 1.0000e+00,
          1.0000e+00, 1.0000e+00],
         [1.0000e+00, 1.0000e+00, 1.0000e+00, ...,        inf,
          1.0000e+00, 1.0000e+00]],

        [[1.0000e+00, 1.0000e+00, 1.0000e+00, ..., 1.0000e+00,
          1.0000e+00, 1.0000e+00],
         [1.0000e+00, 1.0000e+00, 1.0000e+00, ...,        inf,
          1.0000e+00, 1.0000e+00],
         [1.0000e+00, 1.0000e+00, 1.0000e+00, ..., 1.0000e+00,
          1.0000e+00, 1.0000e+00],
         ...,
         [1.0000e+00, 1.0000e+00, 1.0000e+00, ..., 1.0000e+00,
          1.0000e+00, 1.0000e+00],
         [1.0000e+00, 1.0000e+00, 1.0000e+00, ..., 1.0000e+00,
          1.0000e+00, 1.0000e+00],
         [1.0000e+00, 1.0000e+00, 1.0000e+00, ..., 1.0000e+00,
          1.0000e+00, 1.0000e+00]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [9, 25], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [22], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [22], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [22], 'to': []}

generate models:47

analyse the exceptions in iter:49
torch exception:
{'id': 25, 'name': 'flatten', 'frame_work': 'torch', 'input_datas': [tensor([84.0867], grad_fn=<MeanBackward1>)]}
Dimension out of range (expected to be in range of [-1, 0], but got 1)

generate models:49

final statics:
total operators:28
tensorflow --> nums:12,distinct_bugs:5
mindspore --> nums:5,distinct_bugs:4
torch --> nums:6,distinct_bugs:5
tensorflow --> 
conv2d:7
log:1
sin:2
softmax:1
cos:1
mindspore --> 
log:1
sin:2
softmax:1
cos:1
torch --> 
log:1
sin:2
softmax:1
cos:1
flatten:1

generate models:49

analyse output arrays in iter:52

pre layer res:
19:add
{'name': 'add', 'output': array([[[[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1., inf, inf, ..., inf,  1.,  1.],
         [ 1., inf, inf, ..., inf, inf,  1.],
         ...,
         [ 1.,  1.,  1., ..., inf, inf, inf],
         [ 1.,  1.,  1., ..., inf, inf, inf],
         [ 1.,  1.,  1., ..., inf,  1., inf]],

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1., inf, inf, ..., inf,  1.,  1.],
         [ 1., inf, inf, ..., inf, inf,  1.],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[ 1.,  1.,  1., ..., inf, inf, inf],
         [ 1., inf, inf, ..., inf, inf,  1.],
         [inf, inf, inf, ..., inf, inf,  1.],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf,  1., ..., inf, inf, inf]],

        ...,

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1., inf, inf, ..., inf,  1.,  1.],
         [ 1., inf, inf, ..., inf, inf,  1.],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[ 1.,  1.,  1., ..., inf, inf, inf],
         [ 1., inf, inf, ..., inf, inf,  1.],
         [inf, inf, inf, ..., inf, inf,  1.],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf,  1., ..., inf, inf, inf]],

        [[inf,  1.,  1., ...,  1.,  1.,  1.],
         [ 1., inf, inf, ..., inf,  1.,  1.],
         [ 1., inf, inf, ..., inf, inf,  1.],
         ...,
         [inf, inf,  1., ..., inf,  1.,  1.],
         [inf, inf,  1., ..., inf,  1.,  1.],
         [inf, inf,  1., ..., inf,  1.,  1.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [9, 22], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [19], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [19], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [19], 'to': []}

generate models:52

analyse output arrays in iter:67

pre layer res:
8:relu
{'name': 'relu', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [17], 'to': [19]}
tf node:
{'name': 'log', 'output': array([[[[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [8], 'to': [9]}
ms node:
{'name': 'log', 'output': array([[[[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        ...,

        [[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]],

        [[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]],

        [[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]]]],
      dtype=float32), 'output_shape': (1, 128, 14, 14), 'from': [8], 'to': [9]}
torch node:
{'name': 'log', 'output': array([[[[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 14, 14]), 'from': [8], 'to': [9]}

generate models:67

analyse output arrays in iter:72

pre layer res:
11:empty_seq_operator
{'name': 'empty_seq_operator', 'output': array([[[[7.3890557, 7.3890557, 7.3890557, ..., 7.3890557, 7.3890557,
          7.3890557],
         [7.3890557, 7.3890557, 7.3890557, ..., 7.3890557, 7.3890557,
          7.3890557],
         [7.3890557, 7.3890557, 7.3890557, ..., 7.3890557, 7.3890557,
          7.3890557],
         ...,
         [7.3890557, 7.3890557, 7.3890557, ..., 7.3890557, 7.3890557,
          7.3890557],
         [7.3890557, 7.3890557, 7.3890557, ..., 7.3890557, 7.3890557,
          7.3890557],
         [7.3890557, 7.3890557, 7.3890557, ..., 7.3890557, 7.3890557,
          7.3890557]],

        [[7.3890557, 7.3890557, 7.3890557, ..., 7.3890557, 7.3890557,
          7.3890557],
         [7.3890557, 7.3890557, 7.3890557, ..., 7.3890557, 7.3890557,
          7.3890557],
         [7.3890557, 7.3890557, 7.3890557, ..., 7.3890557, 7.3890557,
          7.3890557],
         ...,
         [7.3890557, 7.3890557, 7.3890557, ..., 7.3890557, 7.3890557,
          7.3890557],
         [7.3890557, 7.3890557, 7.3890557, ..., 7.3890557, 7.3890557,
          7.3890557],
         [7.3890557, 7.3890557, 7.3890557, ..., 7.3890557, 7.3890557,
          7.3890557]],

        [[7.3890557, 7.3890557, 7.3890557, ..., 7.3890557, 7.3890557,
          7.3890557],
         [7.3890557, 7.3890557, 7.3890557, ..., 7.3890557, 7.3890557,
          7.3890557],
         [7.3890557, 7.3890557, 7.3890557, ..., 7.3890557, 7.3890557,
          7.3890557],
         ...,
         [7.3890557, 7.3890557, 7.3890557, ..., 7.3890557, 7.3890557,
          7.3890557],
         [7.3890557, 7.3890557, 7.3890557, ..., 7.3890557, 7.3890557,
          7.3890557],
         [7.3890557, 7.3890557, 7.3890557, ..., 7.3890557, 7.3890557,
          7.3890557]],

        ...,

        [[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ]],

        [[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ]],

        [[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [16], 'to': [12]}
tf node:
{'name': 'log', 'output': array([[[[  2.,   2.,   2., ...,   2.,   2.,   2.],
         [  2.,   2.,   2., ...,   2.,   2.,   2.],
         [  2.,   2.,   2., ...,   2.,   2.,   2.],
         ...,
         [  2.,   2.,   2., ...,   2.,   2.,   2.],
         [  2.,   2.,   2., ...,   2.,   2.,   2.],
         [  2.,   2.,   2., ...,   2.,   2.,   2.]],

        [[  2.,   2.,   2., ...,   2.,   2.,   2.],
         [  2.,   2.,   2., ...,   2.,   2.,   2.],
         [  2.,   2.,   2., ...,   2.,   2.,   2.],
         ...,
         [  2.,   2.,   2., ...,   2.,   2.,   2.],
         [  2.,   2.,   2., ...,   2.,   2.,   2.],
         [  2.,   2.,   2., ...,   2.,   2.,   2.]],

        [[  2.,   2.,   2., ...,   2.,   2.,   2.],
         [  2.,   2.,   2., ...,   2.,   2.,   2.],
         [  2.,   2.,   2., ...,   2.,   2.,   2.],
         ...,
         [  2.,   2.,   2., ...,   2.,   2.,   2.],
         [  2.,   2.,   2., ...,   2.,   2.,   2.],
         [  2.,   2.,   2., ...,   2.,   2.,   2.]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [11], 'to': [6]}
ms node:
{'name': 'log', 'output': array([[[[2.0000002, 2.0000002, 2.0000002, ..., 2.0000002, 2.0000002,
          2.0000002],
         [2.0000002, 2.0000002, 2.0000002, ..., 2.0000002, 2.0000002,
          2.0000002],
         [2.0000002, 2.0000002, 2.0000002, ..., 2.0000002, 2.0000002,
          2.0000002],
         ...,
         [2.0000002, 2.0000002, 2.0000002, ..., 2.0000002, 2.0000002,
          2.0000002],
         [2.0000002, 2.0000002, 2.0000002, ..., 2.0000002, 2.0000002,
          2.0000002],
         [2.0000002, 2.0000002, 2.0000002, ..., 2.0000002, 2.0000002,
          2.0000002]],

        [[2.0000002, 2.0000002, 2.0000002, ..., 2.0000002, 2.0000002,
          2.0000002],
         [2.0000002, 2.0000002, 2.0000002, ..., 2.0000002, 2.0000002,
          2.0000002],
         [2.0000002, 2.0000002, 2.0000002, ..., 2.0000002, 2.0000002,
          2.0000002],
         ...,
         [2.0000002, 2.0000002, 2.0000002, ..., 2.0000002, 2.0000002,
          2.0000002],
         [2.0000002, 2.0000002, 2.0000002, ..., 2.0000002, 2.0000002,
          2.0000002],
         [2.0000002, 2.0000002, 2.0000002, ..., 2.0000002, 2.0000002,
          2.0000002]],

        [[2.0000002, 2.0000002, 2.0000002, ..., 2.0000002, 2.0000002,
          2.0000002],
         [2.0000002, 2.0000002, 2.0000002, ..., 2.0000002, 2.0000002,
          2.0000002],
         [2.0000002, 2.0000002, 2.0000002, ..., 2.0000002, 2.0000002,
          2.0000002],
         ...,
         [2.0000002, 2.0000002, 2.0000002, ..., 2.0000002, 2.0000002,
          2.0000002],
         [2.0000002, 2.0000002, 2.0000002, ..., 2.0000002, 2.0000002,
          2.0000002],
         [2.0000002, 2.0000002, 2.0000002, ..., 2.0000002, 2.0000002,
          2.0000002]],

        ...,

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]]]], dtype=float32), 'output_shape': (1, 128, 14, 14), 'from': [11], 'to': [6]}
torch node:
{'name': 'log', 'output': array([[[[  2.,   2.,   2., ...,   2.,   2.,   2.],
         [  2.,   2.,   2., ...,   2.,   2.,   2.],
         [  2.,   2.,   2., ...,   2.,   2.,   2.],
         ...,
         [  2.,   2.,   2., ...,   2.,   2.,   2.],
         [  2.,   2.,   2., ...,   2.,   2.,   2.],
         [  2.,   2.,   2., ...,   2.,   2.,   2.]],

        [[  2.,   2.,   2., ...,   2.,   2.,   2.],
         [  2.,   2.,   2., ...,   2.,   2.,   2.],
         [  2.,   2.,   2., ...,   2.,   2.,   2.],
         ...,
         [  2.,   2.,   2., ...,   2.,   2.,   2.],
         [  2.,   2.,   2., ...,   2.,   2.,   2.],
         [  2.,   2.,   2., ...,   2.,   2.,   2.]],

        [[  2.,   2.,   2., ...,   2.,   2.,   2.],
         [  2.,   2.,   2., ...,   2.,   2.,   2.],
         [  2.,   2.,   2., ...,   2.,   2.,   2.],
         ...,
         [  2.,   2.,   2., ...,   2.,   2.,   2.],
         [  2.,   2.,   2., ...,   2.,   2.,   2.],
         [  2.,   2.,   2., ...,   2.,   2.,   2.]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 14, 14]), 'from': [11], 'to': [6]}

generate models:72

analyse output arrays in iter:73

pre layer res:
22:log
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [6], 'to': [7]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [22], 'to': [8]}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 128, 14, 14), 'from': [22], 'to': [8]}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 14, 14]), 'from': [22], 'to': [8]}

generate models:73

analyse output arrays in iter:88

pre layer res:
8:relu
{'name': 'relu', 'output': array([[[[      0. ,       0. , 3007634.8, ..., 4745143. ,   72800. ,
           324480. ],
         [ 526240. ,  580320. , 3800114.8, ..., 4312503. ,       0. ,
                0. ],
         [      0. ,       0. , 2706871.2, ..., 4551012.5,  461760. ,
           777920. ],
         ...,
         [ 526240. ,  526240. , 3233111.2, ..., 3881252.5,       0. ,
                0. ],
         [      0. ,       0. , 2706871.2, ..., 4407492.5,  440960. ,
           189280. ],
         [ 453440. ,  526240. , 3233111.2, ..., 3881252.5,       0. ,
                0. ]],

        [[      0. ,       0. , 3007634.8, ..., 4745143. ,   72800. ,
           324480. ],
         [ 526240. ,  580320. , 3800114.8, ..., 4312503. ,       0. ,
                0. ],
         [      0. ,       0. , 2706871.2, ..., 4551012.5,  461760. ,
           777920. ],
         ...,
         [ 526240. ,  526240. , 3233111.2, ..., 3881252.5,       0. ,
                0. ],
         [      0. ,       0. , 2706871.2, ..., 4407492.5,  440960. ,
           189280. ],
         [ 453440. ,  526240. , 3233111.2, ..., 3881252.5,       0. ,
                0. ]],

        [[      0. ,       0. , 3007634.8, ..., 4745143. ,   72800. ,
           324480. ],
         [ 526240. ,  580320. , 3800114.8, ..., 4312503. ,       0. ,
                0. ],
         [      0. ,       0. , 2706871.2, ..., 4551012.5,  461760. ,
           777920. ],
         ...,
         [ 526240. ,  526240. , 3233111.2, ..., 3881252.5,       0. ,
                0. ],
         [      0. ,       0. , 2706871.2, ..., 4407492.5,  440960. ,
           189280. ],
         [ 453440. ,  526240. , 3233111.2, ..., 3881252.5,       0. ,
                0. ]],

        ...,

        [[      0. ,       0. , 3007634.8, ..., 4745143. ,   72800. ,
           324480. ],
         [ 526240. ,  580320. , 3800114.8, ..., 4312503. ,       0. ,
                0. ],
         [      0. ,       0. , 2706871.2, ..., 4551012.5,  461760. ,
           777920. ],
         ...,
         [ 526240. ,  526240. , 3233111.2, ..., 3881252.5,       0. ,
                0. ],
         [      0. ,       0. , 2706871.2, ..., 4407492.5,  440960. ,
           189280. ],
         [ 453440. ,  526240. , 3233111.2, ..., 3881252.5,       0. ,
                0. ]],

        [[      0. ,       0. , 3007634.8, ..., 4745143. ,   72800. ,
           324480. ],
         [ 526240. ,  580320. , 3800114.8, ..., 4312503. ,       0. ,
                0. ],
         [      0. ,       0. , 2706871.2, ..., 4551012.5,  461760. ,
           777920. ],
         ...,
         [ 526240. ,  526240. , 3233111.2, ..., 3881252.5,       0. ,
                0. ],
         [      0. ,       0. , 2706871.2, ..., 4407492.5,  440960. ,
           189280. ],
         [ 453440. ,  526240. , 3233111.2, ..., 3881252.5,       0. ,
                0. ]],

        [[      0. ,       0. , 3007634.8, ..., 4745143. ,   72800. ,
           324480. ],
         [ 526240. ,  580320. , 3800114.8, ..., 4312503. ,       0. ,
                0. ],
         [      0. ,       0. , 2706871.2, ..., 4551012.5,  461760. ,
           777920. ],
         ...,
         [ 526240. ,  526240. , 3233111.2, ..., 3881252.5,       0. ,
                0. ],
         [      0. ,       0. , 2706871.2, ..., 4407492.5,  440960. ,
           189280. ],
         [ 453440. ,  526240. , 3233111.2, ..., 3881252.5,       0. ,
                0. ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [7], 'to': [15]}
tf node:
{'name': 'cos', 'output': array([[[[ 1.        ,  1.        ,  0.9238253 , ...,  0.97470677,
          -0.9920018 , -0.8237662 ],
         [-0.3253872 ,  0.2884809 ,  0.9571154 , ...,  0.48423702,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.92919904, ...,  0.6591978 ,
          -0.7564013 ,  0.38749653],
         ...,
         [-0.3253872 , -0.3253872 , -0.651817  , ..., -0.99150264,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.92919904, ...,  0.19961482,
           0.97411066,  0.5756653 ],
         [ 0.20342965, -0.3253872 , -0.651817  , ..., -0.99150264,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  0.9238253 , ...,  0.97470677,
          -0.9920018 , -0.8237662 ],
         [-0.3253872 ,  0.2884809 ,  0.9571154 , ...,  0.48423702,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.92919904, ...,  0.6591978 ,
          -0.7564013 ,  0.38749653],
         ...,
         [-0.3253872 , -0.3253872 , -0.651817  , ..., -0.99150264,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.92919904, ...,  0.19961482,
           0.97411066,  0.5756653 ],
         [ 0.20342965, -0.3253872 , -0.651817  , ..., -0.99150264,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  0.9238253 , ...,  0.97470677,
          -0.9920018 , -0.8237662 ],
         [-0.3253872 ,  0.2884809 ,  0.9571154 , ...,  0.48423702,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.92919904, ...,  0.6591978 ,
          -0.7564013 ,  0.38749653],
         ...,
         [-0.3253872 , -0.3253872 , -0.651817  , ..., -0.99150264,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.92919904, ...,  0.19961482,
           0.97411066,  0.5756653 ],
         [ 0.20342965, -0.3253872 , -0.651817  , ..., -0.99150264,
           1.        ,  1.        ]],

        ...,

        [[ 1.        ,  1.        ,  0.9238253 , ...,  0.97470677,
          -0.9920018 , -0.8237662 ],
         [-0.3253872 ,  0.2884809 ,  0.9571154 , ...,  0.48423702,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.92919904, ...,  0.6591978 ,
          -0.7564013 ,  0.38749653],
         ...,
         [-0.3253872 , -0.3253872 , -0.651817  , ..., -0.99150264,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.92919904, ...,  0.19961482,
           0.97411066,  0.5756653 ],
         [ 0.20342965, -0.3253872 , -0.651817  , ..., -0.99150264,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  0.9238253 , ...,  0.97470677,
          -0.9920018 , -0.8237662 ],
         [-0.3253872 ,  0.2884809 ,  0.9571154 , ...,  0.48423702,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.92919904, ...,  0.6591978 ,
          -0.7564013 ,  0.38749653],
         ...,
         [-0.3253872 , -0.3253872 , -0.651817  , ..., -0.99150264,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.92919904, ...,  0.19961482,
           0.97411066,  0.5756653 ],
         [ 0.20342965, -0.3253872 , -0.651817  , ..., -0.99150264,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  0.9238253 , ...,  0.97470677,
          -0.9920018 , -0.8237662 ],
         [-0.3253872 ,  0.2884809 ,  0.9571154 , ...,  0.48423702,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.92919904, ...,  0.6591978 ,
          -0.7564013 ,  0.38749653],
         ...,
         [-0.3253872 , -0.3253872 , -0.651817  , ..., -0.99150264,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.92919904, ...,  0.19961482,
           0.97411066,  0.5756653 ],
         [ 0.20342965, -0.3253872 , -0.651817  , ..., -0.99150264,
           1.        ,  1.        ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [8], 'to': [9]}
ms node:
{'name': 'cos', 'output': array([[[[ 1.        ,  1.        ,  0.9238253 , ...,  0.97470677,
          -0.9920018 , -0.8237661 ],
         [-0.3253872 ,  0.2884809 ,  0.9571154 , ...,  0.484237  ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.92919904, ...,  0.65919775,
          -0.7564013 ,  0.38749656],
         ...,
         [-0.3253872 , -0.3253872 , -0.65181696, ..., -0.99150264,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.92919904, ...,  0.19961482,
           0.97411066,  0.5756653 ],
         [ 0.20342965, -0.3253872 , -0.65181696, ..., -0.99150264,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  0.9238253 , ...,  0.97470677,
          -0.9920018 , -0.8237661 ],
         [-0.3253872 ,  0.2884809 ,  0.9571154 , ...,  0.484237  ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.92919904, ...,  0.65919775,
          -0.7564013 ,  0.38749656],
         ...,
         [-0.3253872 , -0.3253872 , -0.65181696, ..., -0.99150264,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.92919904, ...,  0.19961482,
           0.97411066,  0.5756653 ],
         [ 0.20342965, -0.3253872 , -0.65181696, ..., -0.99150264,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  0.9238253 , ...,  0.97470677,
          -0.9920018 , -0.8237661 ],
         [-0.3253872 ,  0.2884809 ,  0.9571154 , ...,  0.484237  ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.92919904, ...,  0.65919775,
          -0.7564013 ,  0.38749656],
         ...,
         [-0.3253872 , -0.3253872 , -0.65181696, ..., -0.99150264,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.92919904, ...,  0.19961482,
           0.97411066,  0.5756653 ],
         [ 0.20342965, -0.3253872 , -0.65181696, ..., -0.99150264,
           1.        ,  1.        ]],

        ...,

        [[ 1.        ,  1.        ,  0.9238253 , ...,  0.97470677,
          -0.9920018 , -0.8237661 ],
         [-0.3253872 ,  0.2884809 ,  0.9571154 , ...,  0.484237  ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.92919904, ...,  0.65919775,
          -0.7564013 ,  0.38749656],
         ...,
         [-0.3253872 , -0.3253872 , -0.65181696, ..., -0.99150264,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.92919904, ...,  0.19961482,
           0.97411066,  0.5756653 ],
         [ 0.20342965, -0.3253872 , -0.65181696, ..., -0.99150264,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  0.8003961 , ...,  0.97470677,
          -0.9920018 , -0.8237661 ],
         [-0.3253872 ,  0.2884809 ,  0.99903566, ...,  0.484237  ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.808877  , ...,  0.65919775,
          -0.7564013 ,  0.38749656],
         ...,
         [-0.3253872 , -0.3253872 , -0.8191789 , ..., -0.99150264,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.808877  , ...,  0.19961482,
           0.97411066,  0.5756653 ],
         [ 0.20342965, -0.3253872 , -0.8191789 , ..., -0.99150264,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  0.8003961 , ...,  0.97470677,
          -0.9920018 , -0.8237661 ],
         [-0.3253872 ,  0.2884809 ,  0.99903566, ...,  0.484237  ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.808877  , ...,  0.65919775,
          -0.7564013 ,  0.38749656],
         ...,
         [-0.3253872 , -0.3253872 , -0.8191789 , ..., -0.99150264,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.808877  , ...,  0.19961482,
           0.97411066,  0.5756653 ],
         [ 0.20342965, -0.3253872 , -0.8191789 , ..., -0.99150264,
           1.        ,  1.        ]]]], dtype=float32), 'output_shape': (1, 128, 14, 14), 'from': [8], 'to': [9]}
torch node:
{'name': 'cos', 'output': array([[[[ 1.        ,  1.        ,  0.9238253 , ...,  0.97470677,
          -0.9920018 , -0.8237661 ],
         [-0.3253872 ,  0.2884809 ,  0.9571154 , ...,  0.484237  ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.92919904, ...,  0.65919775,
          -0.7564013 ,  0.38749656],
         ...,
         [-0.3253872 , -0.3253872 , -0.65181696, ..., -0.99150264,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.92919904, ...,  0.19961482,
           0.97411066,  0.5756653 ],
         [ 0.20342965, -0.3253872 , -0.65181696, ..., -0.99150264,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  0.9238253 , ...,  0.97470677,
          -0.9920018 , -0.8237661 ],
         [-0.3253872 ,  0.2884809 ,  0.9571154 , ...,  0.484237  ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.92919904, ...,  0.65919775,
          -0.7564013 ,  0.38749656],
         ...,
         [-0.3253872 , -0.3253872 , -0.65181696, ..., -0.99150264,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.92919904, ...,  0.19961482,
           0.97411066,  0.5756653 ],
         [ 0.20342965, -0.3253872 , -0.65181696, ..., -0.99150264,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  0.9238253 , ...,  0.97470677,
          -0.9920018 , -0.8237661 ],
         [-0.3253872 ,  0.2884809 ,  0.9571154 , ...,  0.484237  ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.92919904, ...,  0.65919775,
          -0.7564013 ,  0.38749656],
         ...,
         [-0.3253872 , -0.3253872 , -0.65181696, ..., -0.99150264,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.92919904, ...,  0.19961482,
           0.97411066,  0.5756653 ],
         [ 0.20342965, -0.3253872 , -0.65181696, ..., -0.99150264,
           1.        ,  1.        ]],

        ...,

        [[ 1.        ,  1.        ,  0.9238253 , ...,  0.97470677,
          -0.9920018 , -0.8237661 ],
         [-0.3253872 ,  0.2884809 ,  0.9571154 , ...,  0.484237  ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.92919904, ...,  0.65919775,
          -0.7564013 ,  0.38749656],
         ...,
         [-0.3253872 , -0.3253872 , -0.65181696, ..., -0.99150264,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.92919904, ...,  0.19961482,
           0.97411066,  0.5756653 ],
         [ 0.20342965, -0.3253872 , -0.65181696, ..., -0.99150264,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  0.9238253 , ...,  0.97470677,
          -0.9920018 , -0.8237661 ],
         [-0.3253872 ,  0.2884809 ,  0.9571154 , ...,  0.484237  ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.92919904, ...,  0.65919775,
          -0.7564013 ,  0.38749656],
         ...,
         [-0.3253872 , -0.3253872 , -0.65181696, ..., -0.99150264,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.92919904, ...,  0.19961482,
           0.97411066,  0.5756653 ],
         [ 0.20342965, -0.3253872 , -0.65181696, ..., -0.99150264,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  0.9238253 , ...,  0.97470677,
          -0.9920018 , -0.8237661 ],
         [-0.3253872 ,  0.2884809 ,  0.9571154 , ...,  0.484237  ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.92919904, ...,  0.65919775,
          -0.7564013 ,  0.38749656],
         ...,
         [-0.3253872 , -0.3253872 , -0.65181696, ..., -0.99150264,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.92919904, ...,  0.19961482,
           0.97411066,  0.5756653 ],
         [ 0.20342965, -0.3253872 , -0.65181696, ..., -0.99150264,
           1.        ,  1.        ]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 14, 14]), 'from': [8], 'to': [9]}

generate models:87

analyse output arrays in iter:93

pre layer res:
21:square
{'name': 'square', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [15], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [21], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [21], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [21], 'to': []}

generate models:92

analyse output arrays in iter:94

pre layer res:
11:add
{'name': 'add', 'output': array([[[[1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         ...,
         [5.9874145e+04,           inf,           inf, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 5.8346171e+14,           inf],
         [          inf,           inf,           inf, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00]],

        [[1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
                    inf,           inf,           inf],
         ...,
         [3.1855931e+16, 1.0000000e+00,           inf, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00]],

        [[1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.9572962e+11,           inf,           inf],
         [          inf,           inf,           inf, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 7.8962965e+13,           inf],
         ...,
         [          inf,           inf,           inf, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
                    inf, 7.8962965e+13,           inf],
         [          inf,           inf, 3.0250773e+36, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00]],

        ...,

        [[1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
                    inf,           inf,           inf],
         ...,
         [3.1855931e+16, 1.0000000e+00,           inf, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00]],

        [[1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.9572962e+11,           inf,           inf],
         [          inf,           inf,           inf, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 7.8962965e+13,           inf],
         ...,
         [          inf,           inf,           inf, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
                    inf, 7.8962965e+13,           inf],
         [          inf,           inf, 3.0250773e+36, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00]],

        [[1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          2.1464359e+14, 1.0000000e+00,           inf],
         [          inf,           inf, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          2.5154387e+30,           inf,           inf],
         ...,
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [8, 14], 'to': [15]}
tf node:
{'name': 'log', 'output': array([[[[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [11., inf, inf, ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0., 34., inf],
         [inf, inf, inf, ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ..., inf, inf, inf],
         [inf, inf, inf, ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ..., inf, inf, inf],
         ...,
         [38.,  0., inf, ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ..., inf, inf, inf],
         [inf, inf, inf, ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ..., 26., inf, inf],
         [inf, inf, inf, ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0., 32., inf],
         ...,
         [inf, inf, inf, ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ..., inf, 32., inf],
         [inf, inf, 84., ...,  0.,  0.,  0.]],

        ...,

        [[ 0.,  0.,  0., ..., inf, inf, inf],
         [inf, inf, inf, ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ..., inf, inf, inf],
         ...,
         [38.,  0., inf, ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ..., inf, inf, inf],
         [inf, inf, inf, ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ..., 26., inf, inf],
         [inf, inf, inf, ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0., 32., inf],
         ...,
         [inf, inf, inf, ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ..., inf, 32., inf],
         [inf, inf, 84., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ..., 33.,  0., inf],
         [inf, inf,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ..., 70., inf, inf],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [11], 'to': [9]}
ms node:
{'name': 'log', 'output': array([[[[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [ 1.0999998e+01,  8.8722839e+01,  8.8722839e+01, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06,  3.4000004e+01,  8.8722839e+01],
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01],
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01],
         ...,
         [ 3.7999996e+01, -1.4305115e-06,  8.8722839e+01, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01],
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
           2.6000002e+01,  8.8722839e+01,  8.8722839e+01],
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06,  3.1999998e+01,  8.8722839e+01],
         ...,
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
           8.8722839e+01,  3.1999998e+01,  8.8722839e+01],
         [ 8.8722839e+01,  8.8722839e+01,  8.3999992e+01, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        ...,

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01],
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01],
         ...,
         [ 3.7999996e+01, -1.4305115e-06,  8.8722839e+01, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01],
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
           2.6000002e+01,  8.8722839e+01,  8.8722839e+01],
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06,  3.1999998e+01,  8.8722839e+01],
         ...,
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
           8.8722839e+01,  3.1999998e+01,  8.8722839e+01],
         [ 8.8722839e+01,  8.8722839e+01,  8.3999992e+01, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
           3.3000000e+01, -1.4305115e-06,  8.8722839e+01],
         [ 8.8722839e+01,  8.8722839e+01, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
           7.0000000e+01,  8.8722839e+01,  8.8722839e+01],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]]]],
      dtype=float32), 'output_shape': (1, 128, 14, 14), 'from': [11], 'to': [9]}
torch node:
{'name': 'log', 'output': array([[[[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [11., inf, inf, ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0., 34., inf],
         [inf, inf, inf, ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ..., inf, inf, inf],
         [inf, inf, inf, ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ..., inf, inf, inf],
         ...,
         [38.,  0., inf, ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ..., inf, inf, inf],
         [inf, inf, inf, ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ..., 26., inf, inf],
         [inf, inf, inf, ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0., 32., inf],
         ...,
         [inf, inf, inf, ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ..., inf, 32., inf],
         [inf, inf, 84., ...,  0.,  0.,  0.]],

        ...,

        [[ 0.,  0.,  0., ..., inf, inf, inf],
         [inf, inf, inf, ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ..., inf, inf, inf],
         ...,
         [38.,  0., inf, ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ..., inf, inf, inf],
         [inf, inf, inf, ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ..., 26., inf, inf],
         [inf, inf, inf, ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0., 32., inf],
         ...,
         [inf, inf, inf, ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ..., inf, 32., inf],
         [inf, inf, 84., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ..., 33.,  0., inf],
         [inf, inf,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ..., 70., inf, inf],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 14, 14]), 'from': [11], 'to': [9]}

generate models:93

final statics:
total operators:28
tensorflow --> nums:15,distinct_bugs:5
mindspore --> nums:9,distinct_bugs:4
torch --> nums:6,distinct_bugs:5
tensorflow --> 
conv2d:10
log:1
sin:2
softmax:1
cos:1
mindspore --> 
log:4
sin:2
softmax:1
cos:2
torch --> 
log:1
sin:2
softmax:1
cos:1
flatten:1

generate models:98

analyse output arrays in iter:115

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [21], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [9], 'to': []}

generate models:113

analyse output arrays in iter:125

pre layer res:
1:relu
{'name': 'relu', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [0], 'to': [14]}
tf node:
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [1], 'to': [2]}
ms node:
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [1], 'to': [2]}
torch node:
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [1], 'to': [2]}

generate models:123

analyse output arrays in iter:130

pre layer res:
15:reshape
{'name': 'reshape', 'output': array([[[[  1.      , 102.07683 ,   1.      , ...,   1.      ,
          102.07683 ,   1.      ],
         [102.07683 ,   1.      , 102.07683 , ..., 102.07683 ,
            1.      , 102.07683 ],
         [  1.      , 102.40254 ,   1.      , ...,   1.      ,
          102.40254 ,   1.      ],
         ...,
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf]],

        [[       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         ...,
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf]],

        [[       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         ...,
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf]],

        ...,

        [[       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         ...,
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf]],

        [[       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         ...,
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf]],

        [[       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         ...,
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         [ 21.574972,   1.      ,  21.574972, ...,  21.574972,
            1.      ,  21.574972],
         [  1.      ,  21.574972,   1.      , ...,   1.      ,
           21.574972,   1.      ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [14], 'to': [25]}
tf node:
{'name': 'log', 'output': array([[[[0.       , 4.6257257, 0.       , ..., 0.       , 4.6257257,
          0.       ],
         [4.6257257, 0.       , 4.6257257, ..., 4.6257257, 0.       ,
          4.6257257],
         [0.       , 4.6289115, 0.       , ..., 0.       , 4.6289115,
          0.       ],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf]],

        [[      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf]],

        [[      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf]],

        ...,

        [[      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf]],

        [[      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf]],

        [[      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [3.071534 , 0.       , 3.071534 , ..., 3.071534 , 0.       ,
          3.071534 ],
         [0.       , 3.071534 , 0.       , ..., 0.       , 3.071534 ,
          0.       ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [15], 'to': [12]}
ms node:
{'name': 'log', 'output': array([[[[-1.4305115e-06,  4.6257234e+00, -1.4305115e-06, ...,
          -1.4305115e-06,  4.6257234e+00, -1.4305115e-06],
         [ 4.6257234e+00, -1.4305115e-06,  4.6257234e+00, ...,
           4.6257234e+00, -1.4305115e-06,  4.6257234e+00],
         [-1.4305115e-06,  4.6289091e+00, -1.4305115e-06, ...,
          -1.4305115e-06,  4.6289091e+00, -1.4305115e-06],
         ...,
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01],
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01],
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01]],

        [[ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01],
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01],
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01],
         ...,
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01],
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01],
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01]],

        [[ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01],
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01],
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01],
         ...,
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01],
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01],
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01]],

        ...,

        [[ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01],
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01],
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01],
         ...,
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01],
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01],
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01]],

        [[ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01],
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01],
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01],
         ...,
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01],
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01],
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01]],

        [[ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01],
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01],
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01],
         ...,
         [ 8.8722839e+01,  8.8722839e+01,  8.8722839e+01, ...,
           8.8722839e+01,  8.8722839e+01,  8.8722839e+01],
         [ 3.0715318e+00, -1.4305115e-06,  3.0715318e+00, ...,
           3.0715318e+00, -1.4305115e-06,  3.0715318e+00],
         [-1.4305115e-06,  3.0715318e+00, -1.4305115e-06, ...,
          -1.4305115e-06,  3.0715318e+00, -1.4305115e-06]]]],
      dtype=float32), 'output_shape': (1, 128, 7, 7), 'from': [15], 'to': [12]}
torch node:
{'name': 'log', 'output': array([[[[0.       , 4.6257257, 0.       , ..., 0.       , 4.6257257,
          0.       ],
         [4.6257257, 0.       , 4.6257257, ..., 4.6257257, 0.       ,
          4.6257257],
         [0.       , 4.6289115, 0.       , ..., 0.       , 4.6289115,
          0.       ],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf]],

        [[      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf]],

        [[      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf]],

        ...,

        [[      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf]],

        [[      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf]],

        [[      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [3.0715337, 0.       , 3.0715337, ..., 3.0715337, 0.       ,
          3.0715337],
         [0.       , 3.0715337, 0.       , ..., 0.       , 3.0715337,
          0.       ]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 7, 7]), 'from': [15], 'to': [12]}

generate models:128

analyse output arrays in iter:144

pre layer res:
7:conv2d
{'name': 'conv2d', 'output': array([[[[1755.4281, 1755.4281, 1755.4281, ..., 1755.4281, 1755.4281,
          1755.4281],
         [1755.4281, 1755.4281, 1755.4281, ..., 1755.4281, 1755.4281,
          1755.4281],
         [1755.4281, 1755.4281, 1755.4281, ..., 1755.4281, 1755.4281,
          1755.4281],
         ...,
         [1677.6909, 1677.6909, 1677.6909, ..., 1677.6909, 1677.6909,
          1677.6909],
         [1755.4281, 1755.4281, 1755.4281, ..., 1755.4281, 1755.4281,
          1755.4281],
         [1755.4281, 1755.4281, 1755.4281, ..., 1755.4281, 1755.4281,
          1755.4281]],

        [[1755.4281, 1755.4281, 1755.4281, ..., 1755.4281, 1755.4281,
          1755.4281],
         [1755.4281, 1755.4281, 1755.4281, ..., 1755.4281, 1755.4281,
          1755.4281],
         [1755.4281, 1755.4281, 1755.4281, ..., 1755.4281, 1755.4281,
          1755.4281],
         ...,
         [1677.6909, 1677.6909, 1677.6909, ..., 1677.6909, 1677.6909,
          1677.6909],
         [1755.4281, 1755.4281, 1755.4281, ..., 1755.4281, 1755.4281,
          1755.4281],
         [1755.4281, 1755.4281, 1755.4281, ..., 1755.4281, 1755.4281,
          1755.4281]],

        [[1755.4281, 1755.4281, 1755.4281, ..., 1755.4281, 1755.4281,
          1755.4281],
         [1755.4281, 1755.4281, 1755.4281, ..., 1755.4281, 1755.4281,
          1755.4281],
         [1755.4281, 1755.4281, 1755.4281, ..., 1755.4281, 1755.4281,
          1755.4281],
         ...,
         [1677.6909, 1677.6909, 1677.6909, ..., 1677.6909, 1677.6909,
          1677.6909],
         [1755.4281, 1755.4281, 1755.4281, ..., 1755.4281, 1755.4281,
          1755.4281],
         [1755.4281, 1755.4281, 1755.4281, ..., 1755.4281, 1755.4281,
          1755.4281]],

        ...,

        [[1755.4281, 1755.4281, 1755.4281, ..., 1755.4281, 1755.4281,
          1755.4281],
         [1755.4281, 1755.4281, 1755.4281, ..., 1755.4281, 1755.4281,
          1755.4281],
         [1755.4281, 1755.4281, 1755.4281, ..., 1755.4281, 1755.4281,
          1755.4281],
         ...,
         [1677.6909, 1677.6909, 1677.6909, ..., 1677.6909, 1677.6909,
          1677.6909],
         [1755.4281, 1755.4281, 1755.4281, ..., 1755.4281, 1755.4281,
          1755.4281],
         [1755.4281, 1755.4281, 1755.4281, ..., 1755.4281, 1755.4281,
          1755.4281]],

        [[1755.4281, 1755.4281, 1755.4281, ..., 1755.4281, 1755.4281,
          1755.4281],
         [1755.4281, 1755.4281, 1755.4281, ..., 1755.4281, 1755.4281,
          1755.4281],
         [1755.4281, 1755.4281, 1755.4281, ..., 1755.4281, 1755.4281,
          1755.4281],
         ...,
         [1677.6909, 1677.6909, 1677.6909, ..., 1677.6909, 1677.6909,
          1677.6909],
         [1755.4281, 1755.4281, 1755.4281, ..., 1755.4281, 1755.4281,
          1755.4281],
         [1755.4281, 1755.4281, 1755.4281, ..., 1755.4281, 1755.4281,
          1755.4281]],

        [[1755.4281, 1755.4281, 1755.4281, ..., 1755.4281, 1755.4281,
          1755.4281],
         [1755.4281, 1755.4281, 1755.4281, ..., 1755.4281, 1755.4281,
          1755.4281],
         [1755.4281, 1755.4281, 1755.4281, ..., 1755.4281, 1755.4281,
          1755.4281],
         ...,
         [1677.6909, 1677.6909, 1677.6909, ..., 1677.6909, 1677.6909,
          1677.6909],
         [1755.4281, 1755.4281, 1755.4281, ..., 1755.4281, 1755.4281,
          1755.4281],
         [1755.4281, 1755.4281, 1755.4281, ..., 1755.4281, 1755.4281,
          1755.4281]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [6], 'to': [21]}
tf node:
{'name': 'cos', 'output': array([[[[-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         ...,
         [ 0.9967664 ,  0.9967664 ,  0.9967664 , ...,  0.9967664 ,
           0.9967664 ,  0.9967664 ],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805]],

        [[-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         ...,
         [ 0.9967664 ,  0.9967664 ,  0.9967664 , ...,  0.9967664 ,
           0.9967664 ,  0.9967664 ],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805]],

        [[-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         ...,
         [ 0.9967664 ,  0.9967664 ,  0.9967664 , ...,  0.9967664 ,
           0.9967664 ,  0.9967664 ],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805]],

        ...,

        [[-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         ...,
         [ 0.9967664 ,  0.9967664 ,  0.9967664 , ...,  0.9967664 ,
           0.9967664 ,  0.9967664 ],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805]],

        [[-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         ...,
         [ 0.9967664 ,  0.9967664 ,  0.9967664 , ...,  0.9967664 ,
           0.9967664 ,  0.9967664 ],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805]],

        [[-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         ...,
         [ 0.9967664 ,  0.9967664 ,  0.9967664 , ...,  0.9967664 ,
           0.9967664 ,  0.9967664 ],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [7], 'to': [8]}
ms node:
{'name': 'cos', 'output': array([[[[-0.7506001 , -0.7506001 , -0.7506001 , ..., -0.7506001 ,
          -0.7506001 , -0.7506001 ],
         [-0.7506001 , -0.7506001 , -0.7506001 , ..., -0.7506001 ,
          -0.7506001 , -0.7506001 ],
         [-0.7506001 , -0.7506001 , -0.7506001 , ..., -0.7506001 ,
          -0.7506001 , -0.7506001 ],
         ...,
         [ 0.99684435,  0.99684435,  0.99684435, ...,  0.99684435,
           0.99684435,  0.99684435],
         [-0.7506001 , -0.7506001 , -0.7506001 , ..., -0.7506001 ,
          -0.7506001 , -0.7506001 ],
         [-0.7506001 , -0.7506001 , -0.7506001 , ..., -0.75027734,
          -0.75027734, -0.75027734]],

        [[-0.7506001 , -0.7506001 , -0.7506001 , ..., -0.7506001 ,
          -0.7506001 , -0.7506001 ],
         [-0.7506001 , -0.7506001 , -0.7506001 , ..., -0.7506001 ,
          -0.7506001 , -0.7506001 ],
         [-0.7506001 , -0.7506001 , -0.7506001 , ..., -0.7506001 ,
          -0.7506001 , -0.7506001 ],
         ...,
         [ 0.99684435,  0.99684435,  0.99684435, ...,  0.99684435,
           0.99684435,  0.99684435],
         [-0.7506001 , -0.7506001 , -0.7506001 , ..., -0.7506001 ,
          -0.7506001 , -0.7506001 ],
         [-0.7506001 , -0.7506001 , -0.7506001 , ..., -0.75027734,
          -0.75027734, -0.75027734]],

        [[-0.7506001 , -0.7506001 , -0.7506001 , ..., -0.7506001 ,
          -0.7506001 , -0.7506001 ],
         [-0.7506001 , -0.7506001 , -0.7506001 , ..., -0.7506001 ,
          -0.7506001 , -0.7506001 ],
         [-0.7506001 , -0.7506001 , -0.7506001 , ..., -0.7506001 ,
          -0.7506001 , -0.7506001 ],
         ...,
         [ 0.99684435,  0.99684435,  0.99684435, ...,  0.99684435,
           0.99684435,  0.99684435],
         [-0.7506001 , -0.7506001 , -0.7506001 , ..., -0.7506001 ,
          -0.7506001 , -0.7506001 ],
         [-0.7506001 , -0.7506001 , -0.7506001 , ..., -0.75027734,
          -0.75027734, -0.75027734]],

        ...,

        [[-0.7506001 , -0.7506001 , -0.7506001 , ..., -0.7506001 ,
          -0.7506001 , -0.7506001 ],
         [-0.7506001 , -0.7506001 , -0.7506001 , ..., -0.7506001 ,
          -0.7506001 , -0.7506001 ],
         [-0.7506001 , -0.7506001 , -0.7506001 , ..., -0.7506001 ,
          -0.7506001 , -0.7506001 ],
         ...,
         [ 0.99684435,  0.99684435,  0.99684435, ...,  0.99684435,
           0.99684435,  0.99684435],
         [-0.7506001 , -0.7506001 , -0.7506001 , ..., -0.7506001 ,
          -0.7506001 , -0.7506001 ],
         [-0.7506001 , -0.7506001 , -0.7506001 , ..., -0.75027734,
          -0.75027734, -0.75027734]],

        [[-0.7506001 , -0.7506001 , -0.7506001 , ..., -0.7506001 ,
          -0.7506001 , -0.7506001 ],
         [-0.7506001 , -0.7506001 , -0.7506001 , ..., -0.7506001 ,
          -0.7506001 , -0.7506001 ],
         [-0.7506001 , -0.7506001 , -0.7506001 , ..., -0.7506001 ,
          -0.7506001 , -0.7506001 ],
         ...,
         [ 0.99684435,  0.99684435,  0.99684435, ...,  0.99684435,
           0.99684435,  0.99684435],
         [-0.7506001 , -0.7506001 , -0.7506001 , ..., -0.7506001 ,
          -0.7506001 , -0.7506001 ],
         [-0.7506001 , -0.7506001 , -0.7506001 , ..., -0.75027734,
          -0.75027734, -0.75027734]],

        [[-0.7506001 , -0.7506001 , -0.7506001 , ..., -0.7506001 ,
          -0.7506001 , -0.7506001 ],
         [-0.7506001 , -0.7506001 , -0.7506001 , ..., -0.7506001 ,
          -0.7506001 , -0.7506001 ],
         [-0.7506001 , -0.7506001 , -0.7506001 , ..., -0.7506001 ,
          -0.7506001 , -0.7506001 ],
         ...,
         [ 0.99684435,  0.99684435,  0.99684435, ...,  0.99684435,
           0.99684435,  0.99684435],
         [-0.7506001 , -0.7506001 , -0.7506001 , ..., -0.7506001 ,
          -0.7506001 , -0.7506001 ],
         [-0.7506001 , -0.7506001 , -0.7506001 , ..., -0.75027734,
          -0.75027734, -0.75027734]]]], dtype=float32), 'output_shape': (1, 128, 14, 14), 'from': [7], 'to': [8]}
torch node:
{'name': 'cos', 'output': array([[[[-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         ...,
         [ 0.99678594,  0.99678594,  0.99678594, ...,  0.99678594,
           0.99678594,  0.99678594],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75019664,
          -0.75019664, -0.75019664]],

        [[-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         ...,
         [ 0.99678594,  0.99678594,  0.99678594, ...,  0.99678594,
           0.99678594,  0.99678594],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75019664,
          -0.75019664, -0.75019664]],

        [[-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         ...,
         [ 0.99678594,  0.99678594,  0.99678594, ...,  0.99678594,
           0.99678594,  0.99678594],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75019664,
          -0.75019664, -0.75019664]],

        ...,

        [[-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         ...,
         [ 0.99678594,  0.99678594,  0.99678594, ...,  0.99678594,
           0.99678594,  0.99678594],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75019664,
          -0.75019664, -0.75019664]],

        [[-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         ...,
         [ 0.99678594,  0.99678594,  0.99678594, ...,  0.99678594,
           0.99678594,  0.99678594],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75019664,
          -0.75019664, -0.75019664]],

        [[-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         ...,
         [ 0.99678594,  0.99678594,  0.99678594, ...,  0.99678594,
           0.99678594,  0.99678594],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75035805,
          -0.75035805, -0.75035805],
         [-0.75035805, -0.75035805, -0.75035805, ..., -0.75019664,
          -0.75019664, -0.75019664]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 14, 14]), 'from': [7], 'to': [8]}

generate models:141

analyse output arrays in iter:155

pre layer res:
11:log
{'name': 'log', 'output': array([[[[     -inf, 9.462181 , 9.462266 , ...,      -inf,      -inf,
               -inf],
         [     -inf, 9.462181 , 9.462266 , ...,      -inf,      -inf,
               -inf],
         [     -inf, 9.462181 , 9.462266 , ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf, 9.462023 , 9.4621525, ...,      -inf,      -inf,
               -inf],
         [     -inf, 9.462023 , 9.4621525, ...,      -inf,      -inf,
               -inf],
         [     -inf, 9.462023 , 9.4621525, ...,      -inf,      -inf,
               -inf]],

        [[     -inf, 9.462181 , 9.462266 , ...,      -inf,      -inf,
               -inf],
         [     -inf, 9.462181 , 9.462266 , ...,      -inf,      -inf,
               -inf],
         [     -inf, 9.462181 , 9.462266 , ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf, 9.462023 , 9.4621525, ...,      -inf,      -inf,
               -inf],
         [     -inf, 9.462023 , 9.4621525, ...,      -inf,      -inf,
               -inf],
         [     -inf, 9.462023 , 9.4621525, ...,      -inf,      -inf,
               -inf]],

        [[     -inf, 9.462181 , 9.462266 , ...,      -inf,      -inf,
               -inf],
         [     -inf, 9.462181 , 9.462266 , ...,      -inf,      -inf,
               -inf],
         [     -inf, 9.462181 , 9.462266 , ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf, 9.462023 , 9.4621525, ...,      -inf,      -inf,
               -inf],
         [     -inf, 9.462023 , 9.4621525, ...,      -inf,      -inf,
               -inf],
         [     -inf, 9.462023 , 9.4621525, ...,      -inf,      -inf,
               -inf]],

        ...,

        [[     -inf, 9.462181 , 9.462266 , ...,      -inf,      -inf,
               -inf],
         [     -inf, 9.462181 , 9.462266 , ...,      -inf,      -inf,
               -inf],
         [     -inf, 9.462181 , 9.462266 , ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf, 9.462023 , 9.4621525, ...,      -inf,      -inf,
               -inf],
         [     -inf, 9.462023 , 9.4621525, ...,      -inf,      -inf,
               -inf],
         [     -inf, 9.462023 , 9.4621525, ...,      -inf,      -inf,
               -inf]],

        [[     -inf, 9.462181 , 9.462266 , ...,      -inf,      -inf,
               -inf],
         [     -inf, 9.462181 , 9.462266 , ...,      -inf,      -inf,
               -inf],
         [     -inf, 9.462181 , 9.462266 , ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf, 9.462023 , 9.4621525, ...,      -inf,      -inf,
               -inf],
         [     -inf, 9.462023 , 9.4621525, ...,      -inf,      -inf,
               -inf],
         [     -inf, 9.462023 , 9.4621525, ...,      -inf,      -inf,
               -inf]],

        [[     -inf, 9.462181 , 9.462266 , ...,      -inf,      -inf,
               -inf],
         [     -inf, 9.462181 , 9.462266 , ...,      -inf,      -inf,
               -inf],
         [     -inf, 9.462181 , 9.462266 , ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf, 9.462023 , 9.4621525, ...,      -inf,      -inf,
               -inf],
         [     -inf, 9.462023 , 9.4621525, ...,      -inf,      -inf,
               -inf],
         [     -inf, 9.462023 , 9.4621525, ...,      -inf,      -inf,
               -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [8], 'to': [9]}
tf node:
{'name': 'maxpool2d', 'output': array([[[[ 9.4621811e+00,  9.4622688e+00,  9.4622946e+00, ...,
           9.4624109e+00,  9.4624052e+00, -3.4028235e+38],
         [ 9.4621811e+00,  9.4622688e+00,  9.4622946e+00, ...,
           9.4624109e+00,  9.4624052e+00, -3.4028235e+38],
         [ 9.4620228e+00,  9.4621582e+00,  9.4621906e+00, ...,
           9.4623661e+00,  9.4623623e+00, -3.4028235e+38],
         ...,
         [ 9.4620228e+00,  9.4621582e+00,  9.4621906e+00, ...,
           9.4623661e+00,  9.4623623e+00, -3.4028235e+38],
         [ 9.4620228e+00,  9.4621582e+00,  9.4621906e+00, ...,
           9.4623661e+00,  9.4623623e+00, -3.4028235e+38],
         [ 9.4620228e+00,  9.4621582e+00,  9.4621906e+00, ...,
           9.4623661e+00,  9.4623623e+00, -3.4028235e+38]],

        [[ 9.4621811e+00,  9.4622688e+00,  9.4622946e+00, ...,
           9.4624109e+00,  9.4624052e+00, -3.4028235e+38],
         [ 9.4621811e+00,  9.4622688e+00,  9.4622946e+00, ...,
           9.4624109e+00,  9.4624052e+00, -3.4028235e+38],
         [ 9.4620228e+00,  9.4621582e+00,  9.4621906e+00, ...,
           9.4623661e+00,  9.4623623e+00, -3.4028235e+38],
         ...,
         [ 9.4620228e+00,  9.4621582e+00,  9.4621906e+00, ...,
           9.4623661e+00,  9.4623623e+00, -3.4028235e+38],
         [ 9.4620228e+00,  9.4621582e+00,  9.4621906e+00, ...,
           9.4623661e+00,  9.4623623e+00, -3.4028235e+38],
         [ 9.4620228e+00,  9.4621582e+00,  9.4621906e+00, ...,
           9.4623661e+00,  9.4623623e+00, -3.4028235e+38]],

        [[ 9.4621811e+00,  9.4622688e+00,  9.4622946e+00, ...,
           9.4624109e+00,  9.4624052e+00, -3.4028235e+38],
         [ 9.4621811e+00,  9.4622688e+00,  9.4622946e+00, ...,
           9.4624109e+00,  9.4624052e+00, -3.4028235e+38],
         [ 9.4620228e+00,  9.4621582e+00,  9.4621906e+00, ...,
           9.4623661e+00,  9.4623623e+00, -3.4028235e+38],
         ...,
         [ 9.4620228e+00,  9.4621582e+00,  9.4621906e+00, ...,
           9.4623661e+00,  9.4623623e+00, -3.4028235e+38],
         [ 9.4620228e+00,  9.4621582e+00,  9.4621906e+00, ...,
           9.4623661e+00,  9.4623623e+00, -3.4028235e+38],
         [ 9.4620228e+00,  9.4621582e+00,  9.4621906e+00, ...,
           9.4623661e+00,  9.4623623e+00, -3.4028235e+38]],

        ...,

        [[ 9.4621811e+00,  9.4622688e+00,  9.4622946e+00, ...,
           9.4624109e+00,  9.4624052e+00, -3.4028235e+38],
         [ 9.4621811e+00,  9.4622688e+00,  9.4622946e+00, ...,
           9.4624109e+00,  9.4624052e+00, -3.4028235e+38],
         [ 9.4620228e+00,  9.4621582e+00,  9.4621906e+00, ...,
           9.4623661e+00,  9.4623623e+00, -3.4028235e+38],
         ...,
         [ 9.4620228e+00,  9.4621582e+00,  9.4621906e+00, ...,
           9.4623661e+00,  9.4623623e+00, -3.4028235e+38],
         [ 9.4620228e+00,  9.4621582e+00,  9.4621906e+00, ...,
           9.4623661e+00,  9.4623623e+00, -3.4028235e+38],
         [ 9.4620228e+00,  9.4621582e+00,  9.4621906e+00, ...,
           9.4623661e+00,  9.4623623e+00, -3.4028235e+38]],

        [[ 9.4621811e+00,  9.4622688e+00,  9.4622946e+00, ...,
           9.4624109e+00,  9.4624052e+00, -3.4028235e+38],
         [ 9.4621811e+00,  9.4622688e+00,  9.4622946e+00, ...,
           9.4624109e+00,  9.4624052e+00, -3.4028235e+38],
         [ 9.4620228e+00,  9.4621582e+00,  9.4621906e+00, ...,
           9.4623661e+00,  9.4623623e+00, -3.4028235e+38],
         ...,
         [ 9.4620228e+00,  9.4621582e+00,  9.4621906e+00, ...,
           9.4623661e+00,  9.4623623e+00, -3.4028235e+38],
         [ 9.4620228e+00,  9.4621582e+00,  9.4621906e+00, ...,
           9.4623661e+00,  9.4623623e+00, -3.4028235e+38],
         [ 9.4620228e+00,  9.4621582e+00,  9.4621906e+00, ...,
           9.4623661e+00,  9.4623623e+00, -3.4028235e+38]],

        [[ 9.4621811e+00,  9.4622688e+00,  9.4622946e+00, ...,
           9.4624109e+00,  9.4624052e+00, -3.4028235e+38],
         [ 9.4621811e+00,  9.4622688e+00,  9.4622946e+00, ...,
           9.4624109e+00,  9.4624052e+00, -3.4028235e+38],
         [ 9.4620228e+00,  9.4621582e+00,  9.4621906e+00, ...,
           9.4623661e+00,  9.4623623e+00, -3.4028235e+38],
         ...,
         [ 9.4620228e+00,  9.4621582e+00,  9.4621906e+00, ...,
           9.4623661e+00,  9.4623623e+00, -3.4028235e+38],
         [ 9.4620228e+00,  9.4621582e+00,  9.4621906e+00, ...,
           9.4623661e+00,  9.4623623e+00, -3.4028235e+38],
         [ 9.4620228e+00,  9.4621582e+00,  9.4621906e+00, ...,
           9.4623661e+00,  9.4623623e+00, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [11], 'to': [20]}
ms node:
{'name': 'maxpool2d', 'output': array([[[[ 9.4621792e+00,  9.4622669e+00,  9.4622927e+00, ...,
           9.4624090e+00,  9.4624033e+00, -3.4028235e+38],
         [ 9.4621792e+00,  9.4622669e+00,  9.4622927e+00, ...,
           9.4624090e+00,  9.4624033e+00, -3.4028235e+38],
         [ 9.4620209e+00,  9.4621563e+00,  9.4621887e+00, ...,
           9.4623642e+00,  9.4623604e+00, -3.4028235e+38],
         ...,
         [ 9.4620209e+00,  9.4621563e+00,  9.4621887e+00, ...,
           9.4623642e+00,  9.4623604e+00, -3.4028235e+38],
         [ 9.4620209e+00,  9.4621563e+00,  9.4621887e+00, ...,
           9.4623642e+00,  9.4623604e+00, -3.4028235e+38],
         [ 9.4620209e+00,  9.4621563e+00,  9.4621887e+00, ...,
           9.4623642e+00,  9.4623604e+00, -3.4028235e+38]],

        [[ 9.4621792e+00,  9.4622669e+00,  9.4622927e+00, ...,
           9.4624090e+00,  9.4624033e+00, -3.4028235e+38],
         [ 9.4621792e+00,  9.4622669e+00,  9.4622927e+00, ...,
           9.4624090e+00,  9.4624033e+00, -3.4028235e+38],
         [ 9.4620209e+00,  9.4621563e+00,  9.4621887e+00, ...,
           9.4623642e+00,  9.4623604e+00, -3.4028235e+38],
         ...,
         [ 9.4620209e+00,  9.4621563e+00,  9.4621887e+00, ...,
           9.4623642e+00,  9.4623604e+00, -3.4028235e+38],
         [ 9.4620209e+00,  9.4621563e+00,  9.4621887e+00, ...,
           9.4623642e+00,  9.4623604e+00, -3.4028235e+38],
         [ 9.4620209e+00,  9.4621563e+00,  9.4621887e+00, ...,
           9.4623642e+00,  9.4623604e+00, -3.4028235e+38]],

        [[ 9.4621792e+00,  9.4622669e+00,  9.4622927e+00, ...,
           9.4624090e+00,  9.4624033e+00, -3.4028235e+38],
         [ 9.4621792e+00,  9.4622669e+00,  9.4622927e+00, ...,
           9.4624090e+00,  9.4624033e+00, -3.4028235e+38],
         [ 9.4620209e+00,  9.4621563e+00,  9.4621887e+00, ...,
           9.4623642e+00,  9.4623604e+00, -3.4028235e+38],
         ...,
         [ 9.4620209e+00,  9.4621563e+00,  9.4621887e+00, ...,
           9.4623642e+00,  9.4623604e+00, -3.4028235e+38],
         [ 9.4620209e+00,  9.4621563e+00,  9.4621887e+00, ...,
           9.4623642e+00,  9.4623604e+00, -3.4028235e+38],
         [ 9.4620209e+00,  9.4621563e+00,  9.4621887e+00, ...,
           9.4623642e+00,  9.4623604e+00, -3.4028235e+38]],

        ...,

        [[ 9.4621792e+00,  9.4622669e+00,  9.4622927e+00, ...,
           9.4624090e+00,  9.4624033e+00, -3.4028235e+38],
         [ 9.4621792e+00,  9.4622669e+00,  9.4622927e+00, ...,
           9.4624090e+00,  9.4624033e+00, -3.4028235e+38],
         [ 9.4620209e+00,  9.4621563e+00,  9.4621887e+00, ...,
           9.4623642e+00,  9.4623604e+00, -3.4028235e+38],
         ...,
         [ 9.4620209e+00,  9.4621563e+00,  9.4621887e+00, ...,
           9.4623642e+00,  9.4623604e+00, -3.4028235e+38],
         [ 9.4620209e+00,  9.4621563e+00,  9.4621887e+00, ...,
           9.4623642e+00,  9.4623604e+00, -3.4028235e+38],
         [ 9.4620209e+00,  9.4621563e+00,  9.4621887e+00, ...,
           9.4623642e+00,  9.4623604e+00, -3.4028235e+38]],

        [[ 9.4621801e+00,  9.4622688e+00,  9.4622927e+00, ...,
           9.4624081e+00,  9.4624043e+00, -3.4028235e+38],
         [ 9.4621801e+00,  9.4622688e+00,  9.4622927e+00, ...,
           9.4624081e+00,  9.4624043e+00, -3.4028235e+38],
         [ 9.4620209e+00,  9.4621553e+00,  9.4621906e+00, ...,
           9.4623652e+00,  9.4623594e+00, -3.4028235e+38],
         ...,
         [ 9.4620209e+00,  9.4621553e+00,  9.4621906e+00, ...,
           9.4623652e+00,  9.4623594e+00, -3.4028235e+38],
         [ 9.4620209e+00,  9.4621553e+00,  9.4621906e+00, ...,
           9.4623652e+00,  9.4623594e+00, -3.4028235e+38],
         [ 9.4620209e+00,  9.4621553e+00,  9.4621906e+00, ...,
           9.4623652e+00,  9.4623594e+00, -3.4028235e+38]],

        [[ 9.4621801e+00,  9.4622688e+00,  9.4622927e+00, ...,
           9.4624081e+00,  9.4624043e+00, -3.4028235e+38],
         [ 9.4621801e+00,  9.4622688e+00,  9.4622927e+00, ...,
           9.4624081e+00,  9.4624043e+00, -3.4028235e+38],
         [ 9.4620209e+00,  9.4621553e+00,  9.4621906e+00, ...,
           9.4623652e+00,  9.4623594e+00, -3.4028235e+38],
         ...,
         [ 9.4620209e+00,  9.4621553e+00,  9.4621906e+00, ...,
           9.4623652e+00,  9.4623594e+00, -3.4028235e+38],
         [ 9.4620209e+00,  9.4621553e+00,  9.4621906e+00, ...,
           9.4623652e+00,  9.4623594e+00, -3.4028235e+38],
         [ 9.4620209e+00,  9.4621553e+00,  9.4621906e+00, ...,
           9.4623652e+00,  9.4623594e+00, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': (1, 128, 7, 7), 'from': [11], 'to': [20]}
torch node:
{'name': 'maxpool2d', 'output': array([[[[9.462181, 9.462269, 9.462295, ..., 9.462411, 9.462405,
              -inf],
         [9.462181, 9.462269, 9.462295, ..., 9.462411, 9.462405,
              -inf],
         [9.462023, 9.462158, 9.462191, ..., 9.462366, 9.462362,
              -inf],
         ...,
         [9.462023, 9.462158, 9.462191, ..., 9.462366, 9.462362,
              -inf],
         [9.462023, 9.462158, 9.462191, ..., 9.462366, 9.462362,
              -inf],
         [9.462023, 9.462158, 9.462191, ..., 9.462366, 9.462362,
              -inf]],

        [[9.462181, 9.462269, 9.462295, ..., 9.462411, 9.462405,
              -inf],
         [9.462181, 9.462269, 9.462295, ..., 9.462411, 9.462405,
              -inf],
         [9.462023, 9.462158, 9.462191, ..., 9.462366, 9.462362,
              -inf],
         ...,
         [9.462023, 9.462158, 9.462191, ..., 9.462366, 9.462362,
              -inf],
         [9.462023, 9.462158, 9.462191, ..., 9.462366, 9.462362,
              -inf],
         [9.462023, 9.462158, 9.462191, ..., 9.462366, 9.462362,
              -inf]],

        [[9.462181, 9.462269, 9.462295, ..., 9.462411, 9.462405,
              -inf],
         [9.462181, 9.462269, 9.462295, ..., 9.462411, 9.462405,
              -inf],
         [9.462023, 9.462158, 9.462191, ..., 9.462366, 9.462362,
              -inf],
         ...,
         [9.462023, 9.462158, 9.462191, ..., 9.462366, 9.462362,
              -inf],
         [9.462023, 9.462158, 9.462191, ..., 9.462366, 9.462362,
              -inf],
         [9.462023, 9.462158, 9.462191, ..., 9.462366, 9.462362,
              -inf]],

        ...,

        [[9.462181, 9.462269, 9.462295, ..., 9.462411, 9.462405,
              -inf],
         [9.462181, 9.462269, 9.462295, ..., 9.462411, 9.462405,
              -inf],
         [9.462023, 9.462158, 9.462191, ..., 9.462366, 9.462362,
              -inf],
         ...,
         [9.462023, 9.462158, 9.462191, ..., 9.462366, 9.462362,
              -inf],
         [9.462023, 9.462158, 9.462191, ..., 9.462366, 9.462362,
              -inf],
         [9.462023, 9.462158, 9.462191, ..., 9.462366, 9.462362,
              -inf]],

        [[9.462181, 9.462269, 9.462295, ..., 9.462411, 9.462405,
              -inf],
         [9.462181, 9.462269, 9.462295, ..., 9.462411, 9.462405,
              -inf],
         [9.462023, 9.462158, 9.462191, ..., 9.462366, 9.462362,
              -inf],
         ...,
         [9.462023, 9.462158, 9.462191, ..., 9.462366, 9.462362,
              -inf],
         [9.462023, 9.462158, 9.462191, ..., 9.462366, 9.462362,
              -inf],
         [9.462023, 9.462158, 9.462191, ..., 9.462366, 9.462362,
              -inf]],

        [[9.462181, 9.462269, 9.462295, ..., 9.462411, 9.462405,
              -inf],
         [9.462181, 9.462269, 9.462295, ..., 9.462411, 9.462405,
              -inf],
         [9.462023, 9.462158, 9.462191, ..., 9.462366, 9.462362,
              -inf],
         ...,
         [9.462023, 9.462158, 9.462191, ..., 9.462366, 9.462362,
              -inf],
         [9.462023, 9.462158, 9.462191, ..., 9.462366, 9.462362,
              -inf],
         [9.462023, 9.462158, 9.462191, ..., 9.462366, 9.462362,
              -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 7, 7]), 'from': [11], 'to': [20]}

generate models:152

analyse output arrays in iter:174

pre layer res:
17:log
{'name': 'log', 'output': array([[[[0.82667863, 0.82667863, 0.82667863, ..., 0.82667863,
          0.82667863, 0.82667863],
         [0.82667863, 0.82667863, 0.82667863, ..., 0.82667863,
          0.82667863, 0.82667863],
         [0.82667863, 0.82667863, 0.82667863, ..., 0.82667863,
          0.82667863, 0.82667863],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [0.82667863, 0.82667863, 0.82667863, ..., 0.82667863,
          0.82667863, 0.82667863],
         [0.82667863, 0.82667863, 0.82667863, ..., 0.82667863,
          0.82667863, 0.82667863]],

        [[0.82667863, 0.82667863, 0.82667863, ..., 0.82667863,
          0.82667863, 0.82667863],
         [0.82667863, 0.82667863, 0.82667863, ..., 0.82667863,
          0.82667863, 0.82667863],
         [0.82667863, 0.82667863, 0.82667863, ..., 0.82667863,
          0.82667863, 0.82667863],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [0.82667863, 0.82667863, 0.82667863, ..., 0.82667863,
          0.82667863, 0.82667863],
         [0.82667863, 0.82667863, 0.82667863, ..., 0.82667863,
          0.82667863, 0.82667863]],

        [[0.82667863, 0.82667863, 0.82667863, ..., 0.82667863,
          0.82667863, 0.82667863],
         [0.82667863, 0.82667863, 0.82667863, ..., 0.82667863,
          0.82667863, 0.82667863],
         [0.82667863, 0.82667863, 0.82667863, ..., 0.82667863,
          0.82667863, 0.82667863],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [0.82667863, 0.82667863, 0.82667863, ..., 0.82667863,
          0.82667863, 0.82667863],
         [0.82667863, 0.82667863, 0.82667863, ..., 0.82667863,
          0.82667863, 0.82667863]],

        ...,

        [[0.82667863, 0.82667863, 0.82667863, ..., 0.82667863,
          0.82667863, 0.82667863],
         [0.82667863, 0.82667863, 0.82667863, ..., 0.82667863,
          0.82667863, 0.82667863],
         [0.82667863, 0.82667863, 0.82667863, ..., 0.82667863,
          0.82667863, 0.82667863],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [0.82667863, 0.82667863, 0.82667863, ..., 0.82667863,
          0.82667863, 0.82667863],
         [0.82667863, 0.82667863, 0.82667863, ..., 0.82667863,
          0.82667863, 0.82667863]],

        [[0.82667863, 0.82667863, 0.82667863, ..., 0.82667863,
          0.82667863, 0.82667863],
         [0.82667863, 0.82667863, 0.82667863, ..., 0.82667863,
          0.82667863, 0.82667863],
         [0.82667863, 0.82667863, 0.82667863, ..., 0.82667863,
          0.82667863, 0.82667863],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [0.82667863, 0.82667863, 0.82667863, ..., 0.82667863,
          0.82667863, 0.82667863],
         [0.82667863, 0.82667863, 0.82667863, ..., 0.82667863,
          0.82667863, 0.82667863]],

        [[0.82667863, 0.82667863, 0.82667863, ..., 0.82667863,
          0.82667863, 0.82667863],
         [0.82667863, 0.82667863, 0.82667863, ..., 0.82667863,
          0.82667863, 0.82667863],
         [0.82667863, 0.82667863, 0.82667863, ..., 0.82667863,
          0.82667863, 0.82667863],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [0.82667863, 0.82667863, 0.82667863, ..., 0.82667863,
          0.82667863, 0.82667863],
         [0.82667863, 0.82667863, 0.82667863, ..., 0.82667863,
          0.82667863, 0.82667863]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [5], 'to': [16]}
tf node:
{'name': 'log', 'output': array([[[[-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925]],

        [[-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925]],

        [[-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925]],

        ...,

        [[-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925]],

        [[-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925]],

        [[-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [17], 'to': [6]}
ms node:
{'name': 'log', 'output': array([[[[-0.19034548, -0.19034548, -0.19034548, ..., -0.19034548,
          -0.19034548, -0.19034548],
         [-0.19034548, -0.19034548, -0.19034548, ..., -0.19034548,
          -0.19034548, -0.19034548],
         [-0.19034548, -0.19034548, -0.19034548, ..., -0.19034548,
          -0.19034548, -0.19034548],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.19034548, -0.19034548, -0.19034548, ..., -0.19034548,
          -0.19034548, -0.19034548],
         [-0.19034548, -0.19034548, -0.19034548, ..., -0.19034576,
          -0.19034576, -0.19034576]],

        [[-0.19034548, -0.19034548, -0.19034548, ..., -0.19034548,
          -0.19034548, -0.19034548],
         [-0.19034548, -0.19034548, -0.19034548, ..., -0.19034548,
          -0.19034548, -0.19034548],
         [-0.19034548, -0.19034548, -0.19034548, ..., -0.19034548,
          -0.19034548, -0.19034548],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.19034548, -0.19034548, -0.19034548, ..., -0.19034548,
          -0.19034548, -0.19034548],
         [-0.19034548, -0.19034548, -0.19034548, ..., -0.19034576,
          -0.19034576, -0.19034576]],

        [[-0.19034548, -0.19034548, -0.19034548, ..., -0.19034548,
          -0.19034548, -0.19034548],
         [-0.19034548, -0.19034548, -0.19034548, ..., -0.19034548,
          -0.19034548, -0.19034548],
         [-0.19034548, -0.19034548, -0.19034548, ..., -0.19034548,
          -0.19034548, -0.19034548],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.19034548, -0.19034548, -0.19034548, ..., -0.19034548,
          -0.19034548, -0.19034548],
         [-0.19034548, -0.19034548, -0.19034548, ..., -0.19034576,
          -0.19034576, -0.19034576]],

        ...,

        [[-0.19034548, -0.19034548, -0.19034548, ..., -0.19034548,
          -0.19034548, -0.19034548],
         [-0.19034548, -0.19034548, -0.19034548, ..., -0.19034548,
          -0.19034548, -0.19034548],
         [-0.19034548, -0.19034548, -0.19034548, ..., -0.19034548,
          -0.19034548, -0.19034548],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.19034548, -0.19034548, -0.19034548, ..., -0.19034548,
          -0.19034548, -0.19034548],
         [-0.19034548, -0.19034548, -0.19034548, ..., -0.19034576,
          -0.19034576, -0.19034576]],

        [[-0.19034576, -0.19034576, -0.19034576, ..., -0.19034576,
          -0.19034576, -0.19034576],
         [-0.19034576, -0.19034576, -0.19034576, ..., -0.19034576,
          -0.19034576, -0.19034576],
         [-0.19034576, -0.19034576, -0.19034576, ..., -0.19034576,
          -0.19034576, -0.19034576],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.19034576, -0.19034576, -0.19034576, ..., -0.19034576,
          -0.19034576, -0.19034576],
         [-0.19034576, -0.19034576, -0.19034576, ..., -0.19034576,
          -0.19034576, -0.19034576]],

        [[-0.19034576, -0.19034576, -0.19034576, ..., -0.19034576,
          -0.19034576, -0.19034576],
         [-0.19034576, -0.19034576, -0.19034576, ..., -0.19034576,
          -0.19034576, -0.19034576],
         [-0.19034576, -0.19034576, -0.19034576, ..., -0.19034576,
          -0.19034576, -0.19034576],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.19034576, -0.19034576, -0.19034576, ..., -0.19034576,
          -0.19034576, -0.19034576],
         [-0.19034576, -0.19034576, -0.19034576, ..., -0.19034576,
          -0.19034576, -0.19034576]]]], dtype=float32), 'output_shape': (1, 128, 14, 14), 'from': [17], 'to': [6]}
torch node:
{'name': 'log', 'output': array([[[[-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033954,
          -0.19033954, -0.19033954]],

        [[-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033954,
          -0.19033954, -0.19033954]],

        [[-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033954,
          -0.19033954, -0.19033954]],

        ...,

        [[-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033925,
          -0.19033925, -0.19033925],
         [-0.19033925, -0.19033925, -0.19033925, ..., -0.19033954,
          -0.19033954, -0.19033954]],

        [[-0.19033954, -0.19033954, -0.19033954, ..., -0.19033954,
          -0.19033954, -0.19033954],
         [-0.19033954, -0.19033954, -0.19033954, ..., -0.19033954,
          -0.19033954, -0.19033954],
         [-0.19033954, -0.19033954, -0.19033954, ..., -0.19033954,
          -0.19033954, -0.19033954],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.19033954, -0.19033954, -0.19033954, ..., -0.19033954,
          -0.19033954, -0.19033954],
         [-0.19033954, -0.19033954, -0.19033954, ..., -0.19033954,
          -0.19033954, -0.19033954]],

        [[-0.19033954, -0.19033954, -0.19033954, ..., -0.19033954,
          -0.19033954, -0.19033954],
         [-0.19033954, -0.19033954, -0.19033954, ..., -0.19033954,
          -0.19033954, -0.19033954],
         [-0.19033954, -0.19033954, -0.19033954, ..., -0.19033954,
          -0.19033954, -0.19033954],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.19033954, -0.19033954, -0.19033954, ..., -0.19033954,
          -0.19033954, -0.19033954],
         [-0.19033954, -0.19033954, -0.19033954, ..., -0.19033954,
          -0.19033954, -0.19033954]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 14, 14]), 'from': [17], 'to': [6]}

generate models:171

analyse output arrays in iter:175

pre layer res:
13:add
{'name': 'add', 'output': array([[[[       0.,  3661824., 13934592., ...,  8421376., 12337152.,
                 0.],
         [       0.,  3661824., 13934592., ...,  8421376., 12337152.,
                 0.],
         [       0.,  3661824., 13934592., ...,  8421376., 12337152.,
                 0.],
         ...,
         [       0.,  3661824., 13934592., ...,  8421376., 12337152.,
                 0.],
         [       0.,  3661824., 13934592., ...,  8421376., 12337152.,
                 0.],
         [       0.,  3661824., 13934592., ...,  8421376., 12337152.,
                 0.]],

        [[       0.,  3661824., 13934592., ...,  8421376., 12337152.,
                 0.],
         [       0.,  3661824., 13934592., ...,  8421376., 12337152.,
                 0.],
         [       0.,  3661824., 13934592., ...,  8421376., 12337152.,
                 0.],
         ...,
         [       0.,  3661824., 13934592., ...,  8421376., 12337152.,
                 0.],
         [       0.,  3661824., 13934592., ...,  8421376., 12337152.,
                 0.],
         [       0.,  3661824., 13934592., ...,  8421376., 12337152.,
                 0.]],

        [[       0.,  3661824., 13934592., ...,  8421376., 12337152.,
                 0.],
         [       0.,  3661824., 13934592., ...,  8421376., 12337152.,
                 0.],
         [       0.,  3661824., 13934592., ...,  8421376., 12337152.,
                 0.],
         ...,
         [       0.,  3661824., 13934592., ...,  8421376., 12337152.,
                 0.],
         [       0.,  3661824., 13934592., ...,  8421376., 12337152.,
                 0.],
         [       0.,  3661824., 13934592., ...,  8421376., 12337152.,
                 0.]],

        ...,

        [[       0.,        0.,        0., ...,        0.,        0.,
                 0.],
         [       0.,        0.,        0., ...,        0.,        0.,
                 0.],
         [       0.,        0.,        0., ...,        0.,        0.,
                 0.],
         ...,
         [       0.,        0.,        0., ...,        0.,        0.,
                 0.],
         [       0.,        0.,        0., ...,        0.,        0.,
                 0.],
         [       0.,        0.,        0., ...,        0.,        0.,
                 0.]],

        [[       0.,        0.,        0., ...,        0.,        0.,
                 0.],
         [       0.,        0.,        0., ...,        0.,        0.,
                 0.],
         [       0.,        0.,        0., ...,        0.,        0.,
                 0.],
         ...,
         [       0.,        0.,        0., ...,        0.,        0.,
                 0.],
         [       0.,        0.,        0., ...,        0.,        0.,
                 0.],
         [       0.,        0.,        0., ...,        0.,        0.,
                 0.]],

        [[       0.,        0.,        0., ...,        0.,        0.,
                 0.],
         [       0.,        0.,        0., ...,        0.,        0.,
                 0.],
         [       0.,        0.,        0., ...,        0.,        0.,
                 0.],
         ...,
         [       0.,        0.,        0., ...,        0.,        0.,
                 0.],
         [       0.,        0.,        0., ...,        0.,        0.,
                 0.],
         [       0.,        0.,        0., ...,        0.,        0.,
                 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [9, 18], 'to': [17]}
tf node:
{'name': 'log', 'output': array([[[[     -inf, 15.113472, 16.449884, ..., 15.946284, 16.328125,
               -inf],
         [     -inf, 15.113472, 16.449884, ..., 15.946284, 16.328125,
               -inf],
         [     -inf, 15.113472, 16.449884, ..., 15.946284, 16.328125,
               -inf],
         ...,
         [     -inf, 15.113472, 16.449884, ..., 15.946284, 16.328125,
               -inf],
         [     -inf, 15.113472, 16.449884, ..., 15.946284, 16.328125,
               -inf],
         [     -inf, 15.113472, 16.449884, ..., 15.946284, 16.328125,
               -inf]],

        [[     -inf, 15.113472, 16.449884, ..., 15.946284, 16.328125,
               -inf],
         [     -inf, 15.113472, 16.449884, ..., 15.946284, 16.328125,
               -inf],
         [     -inf, 15.113472, 16.449884, ..., 15.946284, 16.328125,
               -inf],
         ...,
         [     -inf, 15.113472, 16.449884, ..., 15.946284, 16.328125,
               -inf],
         [     -inf, 15.113472, 16.449884, ..., 15.946284, 16.328125,
               -inf],
         [     -inf, 15.113472, 16.449884, ..., 15.946284, 16.328125,
               -inf]],

        [[     -inf, 15.113472, 16.449884, ..., 15.946284, 16.328125,
               -inf],
         [     -inf, 15.113472, 16.449884, ..., 15.946284, 16.328125,
               -inf],
         [     -inf, 15.113472, 16.449884, ..., 15.946284, 16.328125,
               -inf],
         ...,
         [     -inf, 15.113472, 16.449884, ..., 15.946284, 16.328125,
               -inf],
         [     -inf, 15.113472, 16.449884, ..., 15.946284, 16.328125,
               -inf],
         [     -inf, 15.113472, 16.449884, ..., 15.946284, 16.328125,
               -inf]],

        ...,

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [13], 'to': [10]}
ms node:
{'name': 'log', 'output': array([[[[     -inf, 15.113471, 16.44988 , ..., 15.946282, 16.328125,
               -inf],
         [     -inf, 15.113471, 16.44988 , ..., 15.946282, 16.328125,
               -inf],
         [     -inf, 15.113471, 16.44988 , ..., 15.946282, 16.328125,
               -inf],
         ...,
         [     -inf, 15.113471, 16.44988 , ..., 15.946282, 16.328125,
               -inf],
         [     -inf, 15.113471, 16.44988 , ..., 15.946282, 16.328125,
               -inf],
         [     -inf, 15.113471, 16.44988 , ..., 15.946282, 16.328125,
               -inf]],

        [[     -inf, 15.113471, 16.44988 , ..., 15.946282, 16.328125,
               -inf],
         [     -inf, 15.113471, 16.44988 , ..., 15.946282, 16.328125,
               -inf],
         [     -inf, 15.113471, 16.44988 , ..., 15.946282, 16.328125,
               -inf],
         ...,
         [     -inf, 15.113471, 16.44988 , ..., 15.946282, 16.328125,
               -inf],
         [     -inf, 15.113471, 16.44988 , ..., 15.946282, 16.328125,
               -inf],
         [     -inf, 15.113471, 16.44988 , ..., 15.946282, 16.328125,
               -inf]],

        [[     -inf, 15.113471, 16.44988 , ..., 15.946282, 16.328125,
               -inf],
         [     -inf, 15.113471, 16.44988 , ..., 15.946282, 16.328125,
               -inf],
         [     -inf, 15.113471, 16.44988 , ..., 15.946282, 16.328125,
               -inf],
         ...,
         [     -inf, 15.113471, 16.44988 , ..., 15.946282, 16.328125,
               -inf],
         [     -inf, 15.113471, 16.44988 , ..., 15.946282, 16.328125,
               -inf],
         [     -inf, 15.113471, 16.44988 , ..., 15.946282, 16.328125,
               -inf]],

        ...,

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]]]], dtype=float32), 'output_shape': (1, 128, 7, 7), 'from': [13], 'to': [10]}
torch node:
{'name': 'log', 'output': array([[[[     -inf, 15.113472, 16.449884, ..., 15.946283, 16.328125,
               -inf],
         [     -inf, 15.113472, 16.449884, ..., 15.946283, 16.328125,
               -inf],
         [     -inf, 15.113472, 16.449884, ..., 15.946283, 16.328125,
               -inf],
         ...,
         [     -inf, 15.113472, 16.449884, ..., 15.946283, 16.328125,
               -inf],
         [     -inf, 15.113472, 16.449884, ..., 15.946283, 16.328125,
               -inf],
         [     -inf, 15.113472, 16.449884, ..., 15.946283, 16.328125,
               -inf]],

        [[     -inf, 15.113472, 16.449884, ..., 15.946283, 16.328125,
               -inf],
         [     -inf, 15.113472, 16.449884, ..., 15.946283, 16.328125,
               -inf],
         [     -inf, 15.113472, 16.449884, ..., 15.946283, 16.328125,
               -inf],
         ...,
         [     -inf, 15.113472, 16.449884, ..., 15.946283, 16.328125,
               -inf],
         [     -inf, 15.113472, 16.449884, ..., 15.946283, 16.328125,
               -inf],
         [     -inf, 15.113472, 16.449884, ..., 15.946283, 16.328125,
               -inf]],

        [[     -inf, 15.113472, 16.449884, ..., 15.946283, 16.328125,
               -inf],
         [     -inf, 15.113472, 16.449884, ..., 15.946283, 16.328125,
               -inf],
         [     -inf, 15.113472, 16.449884, ..., 15.946283, 16.328125,
               -inf],
         ...,
         [     -inf, 15.113472, 16.449884, ..., 15.946283, 16.328125,
               -inf],
         [     -inf, 15.113472, 16.449884, ..., 15.946283, 16.328125,
               -inf],
         [     -inf, 15.113472, 16.449884, ..., 15.946283, 16.328125,
               -inf]],

        ...,

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 7, 7]), 'from': [13], 'to': [10]}

generate models:172

analyse output arrays in iter:180

pre layer res:
26:reshape
{'name': 'reshape', 'output': array([[[[     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [8.      , 8.      , 8.      , ..., 8.000001, 8.      ,
          8.      ],
         [8.      , 8.      , 8.      , ...,      inf, 8.      ,
          8.      ],
         ...,
         [8.      , 8.      , 8.      , ..., 8.      , 8.      ,
          8.      ],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf]],

        [[     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [8.      , 8.      , 8.      , ..., 8.000001, 8.      ,
          8.      ],
         [8.      , 8.      , 8.      , ...,      inf, 8.      ,
          8.      ],
         ...,
         [8.      , 8.      , 8.      , ..., 8.      , 8.      ,
          8.      ],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf]],

        [[     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [8.      , 8.      , 8.      , ..., 8.000001, 8.      ,
          8.      ],
         [8.      , 8.      , 8.      , ...,      inf, 8.      ,
          8.      ],
         ...,
         [8.      , 8.      , 8.      , ..., 8.      , 8.      ,
          8.      ],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf]],

        ...,

        [[0.      , 0.      , 0.      , ..., 0.      , 0.      ,
          0.      ],
         [0.      , 0.      , 0.      , ..., 0.      , 0.      ,
          0.      ],
         [0.      , 0.      , 0.      , ..., 0.      , 0.      ,
          0.      ],
         ...,
         [0.      , 0.      , 0.      , ..., 0.      , 0.      ,
          0.      ],
         [0.      , 0.      , 0.      , ..., 0.      , 0.      ,
          0.      ],
         [0.      , 0.      , 0.      , ..., 0.      , 0.      ,
          0.      ]],

        [[0.      , 0.      , 0.      , ..., 0.      , 0.      ,
          0.      ],
         [0.      , 0.      , 0.      , ..., 0.      , 0.      ,
          0.      ],
         [0.      , 0.      , 0.      , ..., 0.      , 0.      ,
          0.      ],
         ...,
         [0.      , 0.      , 0.      , ..., 0.      , 0.      ,
          0.      ],
         [0.      , 0.      , 0.      , ..., 0.      , 0.      ,
          0.      ],
         [0.      , 0.      , 0.      , ..., 0.      , 0.      ,
          0.      ]],

        [[0.      , 0.      , 0.      , ..., 0.      , 0.      ,
          0.      ],
         [0.      , 0.      , 0.      , ..., 0.      , 0.      ,
          0.      ],
         [0.      , 0.      , 0.      , ..., 0.      , 0.      ,
          0.      ],
         ...,
         [0.      , 0.      , 0.      , ..., 0.      , 0.      ,
          0.      ],
         [0.      , 0.      , 0.      , ..., 0.      , 0.      ,
          0.      ],
         [0.      , 0.      , 0.      , ..., 0.      , 0.      ,
          0.      ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [25], 'to': [19]}
tf node:
{'name': 'softmax', 'output': array([[[[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        ...,

        [[0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         ...,
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715]],

        [[0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         ...,
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715]],

        [[0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         ...,
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [26], 'to': [10]}
ms node:
{'name': 'softmax', 'output': array([[[[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ...,        nan,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ...,        nan,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ...,        nan,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        ...,

        [[0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         ...,
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715]],

        [[0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         ...,
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715]],

        [[0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         ...,
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715]]]], dtype=float32), 'output_shape': (1, 128, 7, 7), 'from': [26], 'to': [10]}
torch node:
{'name': 'softmax', 'output': array([[[[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        ...,

        [[0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         ...,
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715]],

        [[0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         ...,
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715]],

        [[0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         ...,
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715],
         [0.14285715, 0.14285715, 0.14285715, ..., 0.14285715,
          0.14285715, 0.14285715]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 7, 7]), 'from': [26], 'to': [10]}

generate models:177

analyse output arrays in iter:185

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         ...,
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf]],

        [[  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         ...,
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf]],

        [[  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         ...,
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf]],

        ...,

        [[8193., 8193.,   inf, ...,   inf,   inf,   inf],
         [8193., 8193.,   inf, ...,   inf,   inf,   inf],
         [8193., 8193.,   inf, ...,   inf,   inf,   inf],
         ...,
         [8193., 8193.,   inf, ...,   inf,   inf,   inf],
         [8193., 8193.,   inf, ...,   inf,   inf,   inf],
         [8193., 8193.,   inf, ...,   inf,   inf,   inf]],

        [[8193., 8193.,   inf, ...,   inf,   inf,   inf],
         [8193., 8193.,   inf, ...,   inf,   inf,   inf],
         [8193., 8193.,   inf, ...,   inf,   inf,   inf],
         ...,
         [8193., 8193.,   inf, ...,   inf,   inf,   inf],
         [8193., 8193.,   inf, ...,   inf,   inf,   inf],
         [8193., 8193.,   inf, ...,   inf,   inf,   inf]],

        [[8193., 8193.,   inf, ...,   inf,   inf,   inf],
         [8193., 8193.,   inf, ...,   inf,   inf,   inf],
         [8193., 8193.,   inf, ...,   inf,   inf,   inf],
         ...,
         [8193., 8193.,   inf, ...,   inf,   inf,   inf],
         [8193., 8193.,   inf, ...,   inf,   inf,   inf],
         [8193., 8193.,   inf, ...,   inf,   inf,   inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [18], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [9], 'to': []}

generate models:182

analyse output arrays in iter:188

pre layer res:
17:add
{'name': 'add', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [9, 30], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [17], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [17], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [17], 'to': []}

generate models:184

analyse output arrays in iter:193

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [11], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [9], 'to': []}

generate models:189

analyse output arrays in iter:204

pre layer res:
12:exp
{'name': 'exp', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         ...,
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]],

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         ...,
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]],

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         ...,
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [9], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [12], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [12], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [12], 'to': []}

generate models:200

analyse output arrays in iter:210

pre layer res:
6:relu
{'name': 'relu', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [15], 'to': [21]}
tf node:
{'name': 'sin', 'output': array([[[[0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         ...,
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471]],

        [[0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         ...,
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471]],

        [[0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         ...,
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471]],

        ...,

        [[0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         ...,
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471]],

        [[0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         ...,
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471]],

        [[0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         ...,
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [6], 'to': [7]}
ms node:
{'name': 'sin', 'output': array([[[[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        ...,

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]]]], dtype=float32), 'output_shape': (1, 128, 14, 14), 'from': [6], 'to': [7]}
torch node:
{'name': 'sin', 'output': array([[[[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        ...,

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 14, 14]), 'from': [6], 'to': [7]}

generate models:205

analyse output arrays in iter:212

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[2.9990288e+28, 2.9990288e+28, 2.9990288e+28, ...,
          2.9990288e+28, 2.9990288e+28,           inf],
         [2.9990288e+28, 2.9990288e+28, 2.9990288e+28, ...,
          2.9990288e+28, 2.9990288e+28, 2.9990288e+28],
         [2.9990288e+28, 2.9990288e+28, 2.9990288e+28, ...,
          2.9990288e+28, 2.9990288e+28, 2.9990288e+28],
         ...,
         [2.9990288e+28, 2.9990288e+28, 2.9990288e+28, ...,
          2.9990288e+28, 2.9990288e+28, 2.9990288e+28],
         [2.9990288e+28, 2.9990288e+28, 2.9990288e+28, ...,
          2.9990288e+28, 2.9990288e+28,           inf],
         [2.9990288e+28, 2.9990288e+28, 2.9990288e+28, ...,
          2.9990288e+28, 2.9990288e+28,           inf]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [2.9990288e+28,           inf,           inf, ...,
                    inf,           inf,           inf],
         [2.9990288e+28, 2.9990288e+28, 2.9990288e+28, ...,
          2.9990288e+28, 2.9990288e+28, 2.9990288e+28],
         ...,
         [2.9990288e+28, 2.9990288e+28,           inf, ...,
                    inf,           inf, 2.9990288e+28],
         [          inf,           inf,           inf, ...,
                    inf,           inf, 2.9990288e+28],
         [          inf,           inf,           inf, ...,
          2.9990288e+28, 2.9990288e+28, 2.9990288e+28]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [2.9990288e+28, 2.9990288e+28, 2.9990288e+28, ...,
          2.9990288e+28, 2.9990288e+28, 2.9990288e+28],
         ...,
         [2.9990288e+28, 2.9990288e+28, 2.9990288e+28, ...,
          2.9990288e+28, 2.9990288e+28, 2.9990288e+28],
         [2.9990288e+28, 2.9990288e+28, 2.9990288e+28, ...,
          2.9990288e+28, 2.9990288e+28, 2.9990288e+28],
         [2.9990288e+28, 2.9990288e+28, 2.9990288e+28, ...,
          2.9990288e+28, 2.9990288e+28, 2.9990288e+28]],

        ...,

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [2.9990288e+28,           inf,           inf, ...,
                    inf,           inf,           inf],
         [2.9990288e+28, 2.9990288e+28, 2.9990288e+28, ...,
          2.9990288e+28, 2.9990288e+28, 2.9990288e+28],
         ...,
         [2.9990288e+28, 2.9990288e+28,           inf, ...,
                    inf,           inf, 2.9990288e+28],
         [          inf,           inf,           inf, ...,
                    inf,           inf, 2.9990288e+28],
         [          inf,           inf,           inf, ...,
          2.9990288e+28, 2.9990288e+28, 2.9990288e+28]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [2.9990288e+28, 2.9990288e+28, 2.9990288e+28, ...,
          2.9990288e+28, 2.9990288e+28, 2.9990288e+28],
         ...,
         [2.9990288e+28, 2.9990288e+28, 2.9990288e+28, ...,
          2.9990288e+28, 2.9990288e+28, 2.9990288e+28],
         [2.9990288e+28, 2.9990288e+28, 2.9990288e+28, ...,
          2.9990288e+28, 2.9990288e+28, 2.9990288e+28],
         [2.9990288e+28, 2.9990288e+28, 2.9990288e+28, ...,
          2.9990288e+28, 2.9990288e+28, 2.9990288e+28]],

        [[          inf,           inf,           inf, ...,
                    inf, 2.9990288e+28, 2.9990288e+28],
         [          inf,           inf,           inf, ...,
                    inf, 2.9990288e+28, 2.9990288e+28],
         [2.9990288e+28, 2.9990288e+28, 2.9990288e+28, ...,
          2.9990288e+28, 2.9990288e+28, 2.9990288e+28],
         ...,
         [2.9990288e+28, 2.9990288e+28, 2.9990288e+28, ...,
          2.9990288e+28, 2.9990288e+28, 2.9990288e+28],
         [2.9990288e+28, 2.9990288e+28, 2.9990288e+28, ...,
          2.9990288e+28, 2.9990288e+28, 2.9990288e+28],
         [2.9990288e+28, 2.9990288e+28, 2.9990288e+28, ...,
          2.9990288e+28, 2.9990288e+28, 2.9990288e+28]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [8], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [9], 'to': []}

generate models:207

analyse output arrays in iter:226

pre layer res:
13:exp
{'name': 'exp', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 14, 14]), 'from': [4], 'to': [24]}
tf node:
{'name': 'log', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 14, 14]), 'from': [13], 'to': [5]}
ms node:
{'name': 'log', 'output': array([[[[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        ...,

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]]]],
      dtype=float32), 'output_shape': (1, 64, 14, 14), 'from': [13], 'to': [5]}
torch node:
{'name': 'log', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 14, 14]), 'from': [13], 'to': [5]}

generate models:220

analyse output arrays in iter:244

pre layer res:
6:relu
{'name': 'relu', 'output': array([[[[      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [1962.1724, 1962.1724, 1962.1724, ..., 1685.3258, 1685.3258,
          1685.3258],
         ...,
         [1940.0624, 1940.0624, 1940.0624, ..., 1664.8364, 1664.8364,
          1664.8364],
         [1552.8021, 1552.8021, 1552.8021, ..., 1307.6804, 1307.6804,
          1307.6804],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf]],

        [[      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [1962.1724, 1962.1724, 1962.1724, ..., 1685.3258, 1685.3258,
          1685.3258],
         ...,
         [1940.0624, 1940.0624, 1940.0624, ..., 1664.8364, 1664.8364,
          1664.8364],
         [1552.8021, 1552.8021, 1552.8021, ..., 1307.6804, 1307.6804,
          1307.6804],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf]],

        [[      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [1962.1724, 1962.1724, 1962.1724, ..., 1685.3258, 1685.3258,
          1685.3258],
         ...,
         [1940.0624, 1940.0624, 1940.0624, ..., 1664.8364, 1664.8364,
          1664.8364],
         [1552.8021, 1552.8021, 1552.8021, ..., 1307.6804, 1307.6804,
          1307.6804],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf]],

        ...,

        [[      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [1962.1724, 1962.1724, 1962.1724, ..., 1685.3258, 1685.3258,
          1685.3258],
         ...,
         [1940.0624, 1940.0624, 1940.0624, ..., 1664.8364, 1664.8364,
          1664.8364],
         [1552.8021, 1552.8021, 1552.8021, ..., 1307.6804, 1307.6804,
          1307.6804],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf]],

        [[      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [1962.1724, 1962.1724, 1962.1724, ..., 1685.3258, 1685.3258,
          1685.3258],
         ...,
         [1940.0624, 1940.0624, 1940.0624, ..., 1664.8364, 1664.8364,
          1664.8364],
         [1552.8021, 1552.8021, 1552.8021, ..., 1307.6804, 1307.6804,
          1307.6804],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf]],

        [[      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [1962.1724, 1962.1724, 1962.1724, ..., 1685.3258, 1685.3258,
          1685.3258],
         ...,
         [1940.0624, 1940.0624, 1940.0624, ..., 1664.8364, 1664.8364,
          1664.8364],
         [1552.8021, 1552.8021, 1552.8021, ..., 1307.6804, 1307.6804,
          1307.6804],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [5], 'to': [17]}
tf node:
{'name': 'softmax', 'output': array([[[[ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         ...,
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan]],

        [[ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         ...,
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan]],

        [[ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         ...,
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan]],

        ...,

        [[ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         ...,
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan]],

        [[ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         ...,
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan]],

        [[ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         ...,
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [6], 'to': [7, 26]}
ms node:
{'name': 'softmax', 'output': array([[[[ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         ...,
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan]],

        [[ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         ...,
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan]],

        [[ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         ...,
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan]],

        ...,

        [[ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         ...,
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan]],

        [[ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         ...,
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan]],

        [[ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         ...,
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan]]]], dtype=float32), 'output_shape': (1, 128, 14, 14), 'from': [6], 'to': [7, 26]}
torch node:
{'name': 'softmax', 'output': array([[[[ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         ...,
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan]],

        [[ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         ...,
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan]],

        [[ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         ...,
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan]],

        ...,

        [[ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         ...,
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan]],

        [[ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         ...,
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan]],

        [[ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         ...,
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [0.25, 0.25, 0.25, ..., 0.  , 0.  , 0.  ],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 14, 14]), 'from': [6], 'to': [7, 26]}

generate models:237

analyse output arrays in iter:251

pre layer res:
17:add
{'name': 'add', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [11, 20], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [17], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [17], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [17], 'to': []}

generate models:244

analyse output arrays in iter:261

pre layer res:
13:log
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [14], 'to': [4]}
tf node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        ...,

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 14, 14]), 'from': [13], 'to': [12]}
ms node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        ...,

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': (1, 64, 14, 14), 'from': [13], 'to': [12]}
torch node:
{'name': 'maxpool2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 14, 14]), 'from': [13], 'to': [12]}

generate models:254

analyse output arrays in iter:263

pre layer res:
11:empty_seq_operator
{'name': 'empty_seq_operator', 'output': array([[[[6.2351488e+27, 6.2351488e+27, 6.2351488e+27, ...,
          6.2351488e+27, 6.2351488e+27, 6.2351488e+27],
         [6.2351488e+27, 6.2351488e+27,           inf, ...,
                    inf,           inf, 6.2351488e+27],
         [6.2351488e+27,           inf,           inf, ...,
                    inf,           inf, 6.2351488e+27],
         ...,
         [6.2351488e+27, 6.2351488e+27, 6.2351488e+27, ...,
                    inf, 6.2351488e+27, 6.2351488e+27],
         [6.2351488e+27, 6.2351488e+27,           inf, ...,
                    inf, 6.2351488e+27, 6.2351488e+27],
         [6.2351488e+27, 6.2351488e+27,           inf, ...,
          6.2351488e+27, 6.2351488e+27, 6.2351488e+27]],

        [[6.2351488e+27, 6.2351488e+27,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf, 2.5154387e+30],
         [6.2351488e+27,           inf,           inf, ...,
                    inf, 2.2352465e+37, 6.2351488e+27],
         [6.2351488e+27,           inf,           inf, ...,
                    inf, 6.2351488e+27, 6.2351488e+27]],

        [[          inf,           inf,           inf, ...,
          6.2351488e+27, 6.2351488e+27, 6.2351488e+27],
         [          inf,           inf,           inf, ...,
                    inf,           inf, 6.2351488e+27],
         [          inf,           inf,           inf, ...,
                    inf,           inf, 6.2351488e+27],
         ...,
         [          inf,           inf, 6.2351488e+27, ...,
                    inf, 6.2351488e+27,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 6.2351488e+27,           inf],
         [          inf,           inf,           inf, ...,
          6.2351488e+27, 6.2351488e+27,           inf]],

        ...,

        [[6.2351488e+27, 6.2351488e+27,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf, 2.5154387e+30],
         [6.2351488e+27,           inf,           inf, ...,
                    inf, 2.2352465e+37, 6.2351488e+27],
         [6.2351488e+27,           inf,           inf, ...,
                    inf, 6.2351488e+27, 6.2351488e+27]],

        [[          inf,           inf,           inf, ...,
          6.2351488e+27, 6.2351488e+27, 6.2351488e+27],
         [          inf,           inf,           inf, ...,
                    inf,           inf, 6.2351488e+27],
         [          inf,           inf,           inf, ...,
                    inf,           inf, 6.2351488e+27],
         ...,
         [          inf,           inf, 6.2351488e+27, ...,
                    inf, 6.2351488e+27,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 6.2351488e+27,           inf],
         [          inf,           inf,           inf, ...,
          6.2351488e+27, 6.2351488e+27,           inf]],

        [[          inf, 9.2537816e+29, 6.2351488e+27, ...,
          6.2351488e+27,           inf,           inf],
         [          inf, 6.2351488e+27,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [6.2351488e+27, 6.2351488e+27, 6.2351488e+27, ...,
                    inf,           inf,           inf],
         [6.2351488e+27, 6.2351488e+27,           inf, ...,
                    inf,           inf,           inf],
         [6.2351488e+27, 6.2351488e+27,           inf, ...,
          6.2351488e+27, 6.2351488e+27, 6.2351488e+27]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [19], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [11], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [11], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [11], 'to': []}

generate models:256

analyse output arrays in iter:271

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[4.4556091e+10, 4.5429293e+10, 6.0704686e+10, ...,
          4.5273448e+10, 4.5675446e+10, 4.3819205e+10],
         [4.4556091e+10, 4.5429293e+10, 6.0704686e+10, ...,
          4.5273448e+10, 4.5675446e+10, 4.3819205e+10],
         [4.4556091e+10, 4.5429293e+10, 6.0704686e+10, ...,
          4.5273448e+10, 4.5675446e+10, 4.3819205e+10],
         ...,
         [4.4556091e+10, 4.5429293e+10, 6.0704686e+10, ...,
          4.5273448e+10, 4.5675446e+10, 4.3819205e+10],
         [4.4556091e+10, 4.5429293e+10, 6.0704686e+10, ...,
          4.5273448e+10, 4.5675446e+10, 4.3819205e+10],
         [4.4556091e+10, 4.5429293e+10, 6.0704686e+10, ...,
          4.5273448e+10, 4.5675446e+10, 4.3819205e+10]],

        [[4.4556091e+10, 4.5429293e+10, 6.0704686e+10, ...,
          4.5273448e+10, 4.5675446e+10, 4.3819205e+10],
         [4.4556091e+10, 4.5429293e+10, 6.0704686e+10, ...,
          4.5273448e+10, 4.5675446e+10, 4.3819205e+10],
         [4.4556091e+10, 4.5429293e+10, 6.0704686e+10, ...,
          4.5273448e+10, 4.5675446e+10, 4.3819205e+10],
         ...,
         [4.4556091e+10, 4.5429293e+10, 6.0704686e+10, ...,
          4.5273448e+10, 4.5675446e+10, 4.3819205e+10],
         [4.4556091e+10, 4.5429293e+10, 6.0704686e+10, ...,
          4.5273448e+10, 4.5675446e+10, 4.3819205e+10],
         [4.4556091e+10, 4.5429293e+10, 6.0704686e+10, ...,
          4.5273448e+10, 4.5675446e+10, 4.3819205e+10]],

        [[4.4556091e+10, 4.5429293e+10, 6.0704686e+10, ...,
          4.5273448e+10, 4.5675446e+10, 4.3819205e+10],
         [4.4556091e+10, 4.5429293e+10, 6.0704686e+10, ...,
          4.5273448e+10, 4.5675446e+10, 4.3819205e+10],
         [4.4556091e+10, 4.5429293e+10, 6.0704686e+10, ...,
          4.5273448e+10, 4.5675446e+10, 4.3819205e+10],
         ...,
         [4.4556091e+10, 4.5429293e+10, 6.0704686e+10, ...,
          4.5273448e+10, 4.5675446e+10, 4.3819205e+10],
         [4.4556091e+10, 4.5429293e+10, 6.0704686e+10, ...,
          4.5273448e+10, 4.5675446e+10, 4.3819205e+10],
         [4.4556091e+10, 4.5429293e+10, 6.0704686e+10, ...,
          4.5273448e+10, 4.5675446e+10, 4.3819205e+10]],

        ...,

        [[0.0000000e+00, 2.5888206e-02, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 9.9963260e-01, 2.2483496e-01, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 8.8922435e-01, 2.2483496e-01, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 8.9105368e-01, 9.9278045e-01, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [3.6359262e-01, 7.4986154e-01, 0.0000000e+00, ...,
          1.2143806e-01, 8.9105368e-01, 0.0000000e+00]],

        [[0.0000000e+00, 3.5071582e-02, 1.2143806e-01, ...,
          8.7322271e-01, 0.0000000e+00, 9.4653964e-01],
         [9.2185408e-02, 2.2352935e-01, 9.9661446e-01, ...,
          9.5319164e-01, 9.0442103e-01, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 8.1431508e-01, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 5.6663051e-02, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 2.2903931e-01],
         [0.0000000e+00, 2.6233792e-01, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 9.9763387e-01],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],

        [[9.2185408e-02, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 9.2002606e-01],
         [2.3272981e-01, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [9.8819953e-01, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [22], 'to': [26]}
tf node:
{'name': 'log', 'output': array([[[[ 2.4520016e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01],
         [ 2.4520016e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01],
         [ 2.4520016e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01],
         ...,
         [ 2.4520016e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01],
         [ 2.4520016e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01],
         [ 2.4520016e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01]],

        [[ 2.4520016e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01],
         [ 2.4520016e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01],
         [ 2.4520016e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01],
         ...,
         [ 2.4520016e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01],
         [ 2.4520016e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01],
         [ 2.4520016e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01]],

        [[ 2.4520016e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01],
         [ 2.4520016e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01],
         [ 2.4520016e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01],
         ...,
         [ 2.4520016e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01],
         [ 2.4520016e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01],
         [ 2.4520016e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01]],

        ...,

        [[          -inf, -3.6539679e+00,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf, -3.6747055e-04, -1.4923886e+00, ...,
                    -inf,           -inf,           -inf],
         [          -inf, -1.1740571e-01, -1.4923886e+00, ...,
                    -inf,           -inf,           -inf],
         ...,
         [          -inf, -1.1535061e-01, -7.2457399e-03, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [-1.0117211e+00, -2.8786671e-01,           -inf, ...,
          -2.1083510e+00, -1.1535061e-01,           -inf]],

        [[          -inf, -3.3503642e+00, -2.1083510e+00, ...,
          -1.3556466e-01,           -inf, -5.4942429e-02],
         [-2.3839533e+00, -1.4982126e+00, -3.3912878e-03, ...,
          -4.7939308e-02, -1.0046028e-01,           -inf],
         [          -inf,           -inf, -2.0540792e-01, ...,
                    -inf,           -inf,           -inf],
         ...,
         [          -inf, -2.8706329e+00,           -inf, ...,
                    -inf,           -inf, -1.4738616e+00],
         [          -inf, -1.3381218e+00,           -inf, ...,
                    -inf,           -inf, -2.3689293e-03],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]],

        [[-2.3839533e+00,           -inf,           -inf, ...,
                    -inf,           -inf, -8.3353281e-02],
         [-1.4578772e+00,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [-1.1870646e-02,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [9], 'to': [10]}
ms node:
{'name': 'log', 'output': array([[[[ 2.45200176e+01,  2.45394230e+01,  2.48292847e+01, ...,
           2.45359859e+01,  2.45448265e+01,  2.45033417e+01],
         [ 2.45200176e+01,  2.45394230e+01,  2.48292847e+01, ...,
           2.45359859e+01,  2.45448265e+01,  2.45033417e+01],
         [ 2.45200176e+01,  2.45394230e+01,  2.48292847e+01, ...,
           2.45359859e+01,  2.45448265e+01,  2.45033417e+01],
         ...,
         [ 2.45200176e+01,  2.45394230e+01,  2.48292847e+01, ...,
           2.45359859e+01,  2.45448265e+01,  2.45033417e+01],
         [ 2.45200176e+01,  2.45394230e+01,  2.48292847e+01, ...,
           2.45359859e+01,  2.45448265e+01,  2.45033417e+01],
         [ 2.45200176e+01,  2.45394230e+01,  2.48292847e+01, ...,
           2.45359859e+01,  2.45448265e+01,  2.45033417e+01]],

        [[ 2.45200176e+01,  2.45394230e+01,  2.48292847e+01, ...,
           2.45359859e+01,  2.45448265e+01,  2.45033417e+01],
         [ 2.45200176e+01,  2.45394230e+01,  2.48292847e+01, ...,
           2.45359859e+01,  2.45448265e+01,  2.45033417e+01],
         [ 2.45200176e+01,  2.45394230e+01,  2.48292847e+01, ...,
           2.45359859e+01,  2.45448265e+01,  2.45033417e+01],
         ...,
         [ 2.45200176e+01,  2.45394230e+01,  2.48292847e+01, ...,
           2.45359859e+01,  2.45448265e+01,  2.45033417e+01],
         [ 2.45200176e+01,  2.45394230e+01,  2.48292847e+01, ...,
           2.45359859e+01,  2.45448265e+01,  2.45033417e+01],
         [ 2.45200176e+01,  2.45394230e+01,  2.48292847e+01, ...,
           2.45359859e+01,  2.45448265e+01,  2.45033417e+01]],

        [[ 2.45200176e+01,  2.45394230e+01,  2.48292847e+01, ...,
           2.45359859e+01,  2.45448265e+01,  2.45033417e+01],
         [ 2.45200176e+01,  2.45394230e+01,  2.48292847e+01, ...,
           2.45359859e+01,  2.45448265e+01,  2.45033417e+01],
         [ 2.45200176e+01,  2.45394230e+01,  2.48292847e+01, ...,
           2.45359859e+01,  2.45448265e+01,  2.45033417e+01],
         ...,
         [ 2.45200176e+01,  2.45394230e+01,  2.48292847e+01, ...,
           2.45359859e+01,  2.45448265e+01,  2.45033417e+01],
         [ 2.45200176e+01,  2.45394230e+01,  2.48292847e+01, ...,
           2.45359859e+01,  2.45448265e+01,  2.45033417e+01],
         [ 2.45200176e+01,  2.45394230e+01,  2.48292847e+01, ...,
           2.45359859e+01,  2.45448265e+01,  2.45033417e+01]],

        ...,

        [[           -inf, -3.65397096e+00,            -inf, ...,
                     -inf,            -inf,            -inf],
         [           -inf, -3.68901034e-04, -1.49238968e+00, ...,
                     -inf,            -inf,            -inf],
         [           -inf, -1.17406704e-01, -1.49238968e+00, ...,
                     -inf,            -inf,            -inf],
         ...,
         [           -inf, -1.15351595e-01, -7.24717090e-03, ...,
                     -inf,            -inf,            -inf],
         [           -inf,            -inf,            -inf, ...,
                     -inf,            -inf,            -inf],
         [-1.01172125e+00, -2.87866771e-01,            -inf, ...,
          -2.10835242e+00, -1.15351595e-01,            -inf]],

        [[           -inf, -3.35036349e+00, -2.10835242e+00, ...,
          -1.35565639e-01,            -inf, -5.49424067e-02],
         [-2.38395357e+00, -1.49821365e+00, -3.39271827e-03, ...,
          -4.79392856e-02, -1.00461274e-01,            -inf],
         [           -inf,            -inf, -2.05410317e-01, ...,
                     -inf,            -inf,            -inf],
         ...,
         [           -inf, -2.87063408e+00,            -inf, ...,
                     -inf,            -inf, -1.47386265e+00],
         [           -inf, -1.33811843e+00,            -inf, ...,
                     -inf,            -inf, -2.37035984e-03],
         [           -inf,            -inf,            -inf, ...,
                     -inf,            -inf,            -inf]],

        [[-2.38395357e+00,            -inf,            -inf, ...,
                     -inf,            -inf, -8.33542645e-02],
         [-1.45787716e+00,            -inf,            -inf, ...,
                     -inf,            -inf,            -inf],
         [-1.18720774e-02,            -inf,            -inf, ...,
                     -inf,            -inf,            -inf],
         ...,
         [           -inf,            -inf,            -inf, ...,
                     -inf,            -inf,            -inf],
         [           -inf,            -inf,            -inf, ...,
                     -inf,            -inf,            -inf],
         [           -inf,            -inf,            -inf, ...,
                     -inf,            -inf,            -inf]]]],
      dtype=float32), 'output_shape': (1, 128, 7, 7), 'from': [9], 'to': [10]}
torch node:
{'name': 'log', 'output': array([[[[ 2.4520014e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01],
         [ 2.4520014e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01],
         [ 2.4520014e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01],
         ...,
         [ 2.4520014e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01],
         [ 2.4520014e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01],
         [ 2.4520014e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01]],

        [[ 2.4520014e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01],
         [ 2.4520014e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01],
         [ 2.4520014e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01],
         ...,
         [ 2.4520014e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01],
         [ 2.4520014e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01],
         [ 2.4520014e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01]],

        [[ 2.4520014e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01],
         [ 2.4520014e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01],
         [ 2.4520014e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01],
         ...,
         [ 2.4520014e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01],
         [ 2.4520014e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01],
         [ 2.4520014e+01,  2.4539423e+01,  2.4829287e+01, ...,
           2.4535986e+01,  2.4544827e+01,  2.4503338e+01]],

        ...,

        [[          -inf, -3.6539679e+00,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf, -3.6747055e-04, -1.4923886e+00, ...,
                    -inf,           -inf,           -inf],
         [          -inf, -1.1740571e-01, -1.4923886e+00, ...,
                    -inf,           -inf,           -inf],
         ...,
         [          -inf, -1.1535061e-01, -7.2457399e-03, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [-1.0117211e+00, -2.8786671e-01,           -inf, ...,
          -2.1083510e+00, -1.1535061e-01,           -inf]],

        [[          -inf, -3.3503642e+00, -2.1083510e+00, ...,
          -1.3556466e-01,           -inf, -5.4942429e-02],
         [-2.3839533e+00, -1.4982126e+00, -3.3912878e-03, ...,
          -4.7939308e-02, -1.0046028e-01,           -inf],
         [          -inf,           -inf, -2.0540792e-01, ...,
                    -inf,           -inf,           -inf],
         ...,
         [          -inf, -2.8706329e+00,           -inf, ...,
                    -inf,           -inf, -1.4738616e+00],
         [          -inf, -1.3381218e+00,           -inf, ...,
                    -inf,           -inf, -2.3689293e-03],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]],

        [[-2.3839533e+00,           -inf,           -inf, ...,
                    -inf,           -inf, -8.3353281e-02],
         [-1.4578772e+00,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [-1.1870646e-02,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]]]],
      dtype=float32), 'output_shape': torch.Size([1, 128, 7, 7]), 'from': [9], 'to': [10]}

generate models:263

analyse output arrays in iter:278

pre layer res:
12:add
{'name': 'add', 'output': array([[[[-1.6674452e+00,           -inf,           -inf, ...,
           1.8516905e+01,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
           1.8707130e+01,  1.7764915e+01,           -inf],
         [          -inf,           -inf,           -inf, ...,
           1.7513601e+01,           -inf,           -inf],
         ...,
         [          -inf,  1.8422070e+01,  1.8707130e+01, ...,
           1.8707130e+01,  1.8558868e+01,           -inf],
         [          -inf,  1.0404010e+06,  1.0404027e+06, ...,
           1.8707130e+01,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]],

        [[          -inf,           -inf,           -inf, ...,
           1.8516905e+01,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
           1.8707130e+01,  1.7764915e+01,           -inf],
         [          -inf,           -inf,           -inf, ...,
           1.7513601e+01,           -inf,           -inf],
         ...,
         [          -inf,  3.1541044e+05,  1.8707130e+01, ...,
           1.8707130e+01,  1.8558868e+01,           -inf],
         [          -inf,  1.6998438e+01,  1.8707130e+01, ...,
           1.8707130e+01,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]],

        [[          -inf,           -inf,           -inf, ...,
           5.7362516e+04,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
           1.8707130e+01,  1.7764915e+01,           -inf],
         [          -inf,           -inf,           -inf, ...,
           1.0404015e+06,           -inf,           -inf],
         ...,
         [          -inf,  1.8422070e+01,  1.8707130e+01, ...,
           1.0404027e+06,  6.8405056e+05,           -inf],
         [          -inf,  1.0404010e+06,  1.0404027e+06, ...,
           1.8707130e+01,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]],

        ...,

        [[          -inf,           -inf,           -inf, ...,
           1.8516905e+01,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
           1.8707130e+01,  1.7764915e+01,           -inf],
         [          -inf,           -inf,           -inf, ...,
           1.7513601e+01,           -inf,           -inf],
         ...,
         [          -inf,  3.1541044e+05,  1.8707130e+01, ...,
           1.8707130e+01,  1.8558868e+01,           -inf],
         [          -inf,  1.6998438e+01,  1.8707130e+01, ...,
           1.8707130e+01,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]],

        [[          -inf,           -inf,           -inf, ...,
           5.7362516e+04,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
           1.8707130e+01,  1.7764915e+01,           -inf],
         [          -inf,           -inf,           -inf, ...,
           1.0404015e+06,           -inf,           -inf],
         ...,
         [          -inf,  1.8422070e+01,  1.8707130e+01, ...,
           1.0404027e+06,  6.8405056e+05,           -inf],
         [          -inf,  1.0404010e+06,  1.0404027e+06, ...,
           1.8707130e+01,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]],

        [[          -inf,           -inf,           -inf, ...,
           1.8516905e+01,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
           2.8690707e+04,  5.1611375e+05,           -inf],
         [          -inf,           -inf,           -inf, ...,
           1.7513601e+01,           -inf,           -inf],
         ...,
         [          -inf,  1.8422070e+01,  1.8707130e+01, ...,
           1.8707130e+01,  1.8558868e+01,           -inf],
         [          -inf,  1.6998438e+01,  1.8707130e+01, ...,
           1.8707130e+01,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [11, 15], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         ...,
         [ nan,  nan, -inf, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan]],

        [[ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         ...,
         [ nan,  nan, -inf, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan]],

        [[ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         ...,
         [ nan,  nan, -inf, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan]],

        ...,

        [[ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         ...,
         [ nan,  nan, -inf, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan]],

        [[ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         ...,
         [ nan,  nan, -inf, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan]],

        [[ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         ...,
         [ nan,  nan, -inf, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [12], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [12], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [12], 'to': []}

generate models:270

analyse output arrays in iter:289

pre layer res:
11:transpose
{'name': 'transpose', 'output': array([[[[1036544., 1036544., 1921280., ..., 1032448., 1036544.,
          1036544.],
         [1036544., 1032448., 1032448., ...,      inf, 1032448.,
          1032448.],
         [1036544., 1036544.,      inf, ...,      inf, 1077504.,
          1032448.],
         ...,
         [1044736.,      inf,      inf, ...,      inf,      inf,
           532736.],
         [1036544.,      inf,      inf, ...,  991488., 1032448.,
          1032448.],
         [ 254208.,  962816., 1794304., ...,  172288.,  344320.,
            57600.]],

        [[1036544., 1036544., 1921280., ..., 1032448., 1036544.,
          1036544.],
         [1036544., 1032448., 1032448., ...,      inf, 1032448.,
          1032448.],
         [1036544., 1036544.,      inf, ...,      inf, 1077504.,
          1032448.],
         ...,
         [1044736.,      inf,      inf, ...,      inf,      inf,
           532736.],
         [1036544.,      inf,      inf, ...,  991488., 1032448.,
          1032448.],
         [ 254208.,  962816., 1794304., ...,  172288.,  344320.,
            57600.]],

        [[1036544., 1036544., 1921280., ..., 1032448., 1036544.,
          1036544.],
         [1036544., 1032448., 1032448., ...,      inf, 1032448.,
          1032448.],
         [1036544., 1036544.,      inf, ...,      inf, 1077504.,
          1032448.],
         ...,
         [1044736.,      inf,      inf, ...,      inf,      inf,
           532736.],
         [1036544.,      inf,      inf, ...,  991488., 1032448.,
          1032448.],
         [ 254208.,  962816., 1794304., ...,  172288.,  344320.,
            57600.]],

        ...,

        [[1036544., 1036544., 1921280., ..., 1032448., 1036544.,
          1036544.],
         [1036544., 1032448., 1032448., ...,      inf, 1032448.,
          1032448.],
         [1036544., 1036544.,      inf, ...,      inf, 1077504.,
          1032448.],
         ...,
         [1044736.,      inf,      inf, ...,      inf,      inf,
           532736.],
         [1036544.,      inf,      inf, ...,  991488., 1032448.,
          1032448.],
         [ 254208.,  962816., 1794304., ...,  172288.,  344320.,
            57600.]],

        [[1036544., 1036544., 1921280., ..., 1032448., 1036544.,
          1036544.],
         [1036544., 1032448., 1032448., ...,      inf, 1032448.,
          1032448.],
         [1036544., 1036544.,      inf, ...,      inf, 1077504.,
          1032448.],
         ...,
         [1044736.,      inf,      inf, ...,      inf,      inf,
           532736.],
         [1036544.,      inf,      inf, ...,  991488., 1032448.,
          1032448.],
         [ 254208.,  962816., 1794304., ...,  172288.,  344320.,
            57600.]],

        [[1036544., 1036544., 1921280., ..., 1032448., 1036544.,
          1036544.],
         [1036544., 1032448., 1032448., ...,      inf, 1032448.,
          1032448.],
         [1036544., 1036544.,      inf, ...,      inf, 1077504.,
          1032448.],
         ...,
         [1044736.,      inf,      inf, ...,      inf,      inf,
           532736.],
         [1036544.,      inf,      inf, ...,  991488., 1032448.,
          1032448.],
         [ 254208.,  962816., 1794304., ...,  172288.,  344320.,
            57600.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [9], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[5.3018624e+08, 9.0826342e+08,           nan, ...,
                    nan,           nan, 5.2966195e+08],
         [7.9554150e+08,           inf,           nan, ...,
                    nan,           nan, 7.9973581e+08],
         [7.2476262e+08,           nan,           nan, ...,
                    nan,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
          5.0036736e+08, 4.6471578e+08, 3.1575245e+08]],

        [[5.3018624e+08, 9.0826342e+08,           nan, ...,
                    nan,           nan, 5.2966195e+08],
         [7.9554150e+08,           inf,           nan, ...,
                    nan,           nan, 7.9973581e+08],
         [7.2476262e+08,           nan,           nan, ...,
                    nan,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
          5.0036736e+08, 4.6471578e+08, 3.1575245e+08]],

        [[5.3018624e+08, 9.0826342e+08,           nan, ...,
                    nan,           nan, 5.2966195e+08],
         [7.9554150e+08,           inf,           nan, ...,
                    nan,           nan, 7.9973581e+08],
         [7.2476262e+08,           nan,           nan, ...,
                    nan,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
          5.0036736e+08, 4.6471578e+08, 3.1575245e+08]],

        ...,

        [[5.3018624e+08, 9.0826342e+08,           nan, ...,
                    nan,           nan, 5.2966195e+08],
         [7.9554150e+08,           inf,           nan, ...,
                    nan,           nan, 7.9973581e+08],
         [7.2476262e+08,           nan,           nan, ...,
                    nan,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
          5.0036736e+08, 4.6471578e+08, 3.1575245e+08]],

        [[5.3018624e+08, 9.0826342e+08,           nan, ...,
                    nan,           nan, 5.2966195e+08],
         [7.9554150e+08,           inf,           nan, ...,
                    nan,           nan, 7.9973581e+08],
         [7.2476262e+08,           nan,           nan, ...,
                    nan,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
          5.0036736e+08, 4.6471578e+08, 3.1575245e+08]],

        [[5.3018624e+08, 9.0826342e+08,           nan, ...,
                    nan,           nan, 5.2966195e+08],
         [7.9554150e+08,           inf,           nan, ...,
                    nan,           nan, 7.9973581e+08],
         [7.2476262e+08,           nan,           nan, ...,
                    nan,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
          5.0036736e+08, 4.6471578e+08, 3.1575245e+08]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [11], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[5.3018624e+08, 9.0826342e+08,           inf, ...,
                    inf,           inf, 5.2966195e+08],
         [7.9554150e+08,           inf,           inf, ...,
                    inf,           inf, 7.9973581e+08],
         [7.2476262e+08,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
          5.0036736e+08, 4.6471578e+08, 3.1575245e+08]],

        [[5.3018624e+08, 9.0826342e+08,           inf, ...,
                    inf,           inf, 5.2966195e+08],
         [7.9554150e+08,           inf,           inf, ...,
                    inf,           inf, 7.9973581e+08],
         [7.2476262e+08,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
          5.0036736e+08, 4.6471578e+08, 3.1575245e+08]],

        [[5.3018624e+08, 9.0826342e+08,           inf, ...,
                    inf,           inf, 5.2966195e+08],
         [7.9554150e+08,           inf,           inf, ...,
                    inf,           inf, 7.9973581e+08],
         [7.2476262e+08,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
          5.0036736e+08, 4.6471578e+08, 3.1575245e+08]],

        ...,

        [[5.3018624e+08, 9.0826342e+08,           inf, ...,
                    inf,           inf, 5.2966195e+08],
         [7.9554150e+08,           inf,           inf, ...,
                    inf,           inf, 7.9973581e+08],
         [7.2476262e+08,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
          5.0036736e+08, 4.6471578e+08, 3.1575245e+08]],

        [[5.3018624e+08, 9.0826342e+08,           inf, ...,
                    inf,           inf, 5.2966195e+08],
         [7.9554150e+08,           inf,           inf, ...,
                    inf,           inf, 7.9973581e+08],
         [7.2476262e+08,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
          5.0036736e+08, 4.6471578e+08, 3.1575245e+08]],

        [[5.3018624e+08, 9.0826342e+08,           inf, ...,
                    inf,           inf, 5.2966195e+08],
         [7.9554150e+08,           inf,           inf, ...,
                    inf,           inf, 7.9973581e+08],
         [7.2476262e+08,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
          5.0036736e+08, 4.6471578e+08, 3.1575245e+08]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [11], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[5.3018624e+08, 9.0826342e+08,           inf, ...,
                    inf,           inf, 5.2966195e+08],
         [7.9554150e+08,           inf,           inf, ...,
                    inf,           inf, 7.9973581e+08],
         [7.2476262e+08,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
          5.0036736e+08, 4.6471578e+08, 3.1575245e+08]],

        [[5.3018624e+08, 9.0826342e+08,           inf, ...,
                    inf,           inf, 5.2966195e+08],
         [7.9554150e+08,           inf,           inf, ...,
                    inf,           inf, 7.9973581e+08],
         [7.2476262e+08,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
          5.0036736e+08, 4.6471578e+08, 3.1575245e+08]],

        [[5.3018624e+08, 9.0826342e+08,           inf, ...,
                    inf,           inf, 5.2966195e+08],
         [7.9554150e+08,           inf,           inf, ...,
                    inf,           inf, 7.9973581e+08],
         [7.2476262e+08,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
          5.0036736e+08, 4.6471578e+08, 3.1575245e+08]],

        ...,

        [[5.3018624e+08, 9.0826342e+08,           inf, ...,
                    inf,           inf, 5.2966195e+08],
         [7.9554150e+08,           inf,           inf, ...,
                    inf,           inf, 7.9973581e+08],
         [7.2476262e+08,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
          5.0036736e+08, 4.6471578e+08, 3.1575245e+08]],

        [[5.3018624e+08, 9.0826342e+08,           inf, ...,
                    inf,           inf, 5.2966195e+08],
         [7.9554150e+08,           inf,           inf, ...,
                    inf,           inf, 7.9973581e+08],
         [7.2476262e+08,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
          5.0036736e+08, 4.6471578e+08, 3.1575245e+08]],

        [[5.3018624e+08, 9.0826342e+08,           inf, ...,
                    inf,           inf, 5.2966195e+08],
         [7.9554150e+08,           inf,           inf, ...,
                    inf,           inf, 7.9973581e+08],
         [7.2476262e+08,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
          5.0036736e+08, 4.6471578e+08, 3.1575245e+08]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [11], 'to': []}

generate models:281

analyse output arrays in iter:290

pre layer res:
6:relu
{'name': 'relu', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [5], 'to': [12]}
tf node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [6], 'to': [7]}
ms node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 128, 14, 14), 'from': [6], 'to': [7]}
torch node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 14, 14]), 'from': [6], 'to': [7]}

generate models:282

analyse output arrays in iter:293

pre layer res:
20:reshape
{'name': 'reshape', 'output': array([[[[1.0486759e+06, 1.0486759e+06, 1.0486759e+06, ...,
          1.0486759e+06, 1.0486759e+06, 1.0486759e+06],
         [1.0486759e+06, 1.0486759e+06, 1.0486759e+06, ...,
          1.0486759e+06, 1.0486759e+06, 1.0486759e+06],
         [1.0486759e+06, 1.0486759e+06, 1.0486759e+06, ...,
          1.0486759e+06, 1.0486759e+06, 1.0486759e+06],
         ...,
         [1.0486759e+06, 1.0486759e+06, 1.0486759e+06, ...,
          1.0486759e+06, 1.0486759e+06, 1.0486759e+06],
         [1.0486759e+06, 1.0486759e+06, 1.0486759e+06, ...,
          1.0486759e+06, 1.0486759e+06, 1.0486759e+06],
         [1.0486759e+06, 1.0486759e+06, 1.0486759e+06, ...,
          1.0486759e+06, 6.8849404e+13,           inf]],

        [[          inf,           inf,           inf, ...,
          1.7772190e+34, 1.0486759e+06, 1.0486759e+06],
         [1.0486759e+06, 1.0486759e+06, 1.0486759e+06, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 1.0486759e+06, 1.0486759e+06],
         ...,
         [          inf,           inf,           inf, ...,
                    inf, 1.0486759e+06, 1.0486759e+06],
         [1.0486759e+06, 1.0486759e+06,           inf, ...,
                    inf,           inf, 1.0486759e+06],
         [1.0486759e+06, 1.0486759e+06,           inf, ...,
                    inf, 1.0486759e+06, 1.0486759e+06]],

        [[1.0486759e+06, 1.0486759e+06,           inf, ...,
                    inf, 1.0486759e+06, 1.0486759e+06],
         [1.0486759e+06, 1.0486759e+06,           inf, ...,
                    inf, 1.0486759e+06, 1.0486759e+06],
         [1.0486759e+06, 1.0486759e+06,           inf, ...,
          5.2978247e+37, 1.0486759e+06, 1.0486759e+06],
         ...,
         [1.0486759e+06, 1.0486759e+06,           inf, ...,
                    inf, 2.1932624e+30, 2.1932624e+30],
         [2.1932624e+30,           inf,           inf, ...,
          4.4052928e+31, 1.0486759e+06, 1.0486759e+06],
         [1.0486759e+06, 1.0486759e+06,           inf, ...,
                    inf,           inf,           inf]],

        ...,

        [[          inf,           inf,           inf, ...,
          1.7772190e+34, 1.0486759e+06, 1.0486759e+06],
         [1.0486759e+06, 1.0486759e+06, 1.0486759e+06, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 1.0486759e+06, 1.0486759e+06],
         ...,
         [          inf,           inf,           inf, ...,
                    inf, 1.0486759e+06, 1.0486759e+06],
         [1.0486759e+06, 1.0486759e+06,           inf, ...,
                    inf,           inf, 1.0486759e+06],
         [1.0486759e+06, 1.0486759e+06,           inf, ...,
                    inf, 1.0486759e+06, 1.0486759e+06]],

        [[1.0486759e+06, 1.0486759e+06,           inf, ...,
                    inf, 1.0486759e+06, 1.0486759e+06],
         [1.0486759e+06, 1.0486759e+06,           inf, ...,
                    inf, 1.0486759e+06, 1.0486759e+06],
         [1.0486759e+06, 1.0486759e+06,           inf, ...,
          5.2978247e+37, 1.0486759e+06, 1.0486759e+06],
         ...,
         [1.0486759e+06, 1.0486759e+06,           inf, ...,
                    inf, 2.1932624e+30, 2.1932624e+30],
         [2.1932624e+30,           inf,           inf, ...,
          4.4052928e+31, 1.0486759e+06, 1.0486759e+06],
         [1.0486759e+06, 1.0486759e+06,           inf, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
          1.0486759e+06, 1.0486759e+06, 1.0486759e+06],
         [1.0486759e+06, 1.0486759e+06, 2.0523719e+17, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
          1.0486759e+06, 1.0486759e+06, 1.0486759e+06],
         ...,
         [1.0486759e+06, 1.0486759e+06, 1.0486759e+06, ...,
          1.0486759e+06, 1.0486759e+06, 1.0486759e+06],
         [1.0486759e+06, 1.0486759e+06, 1.0486759e+06, ...,
          1.0486759e+06, 1.0486759e+06, 1.0486759e+06],
         [1.0486759e+06, 1.0486759e+06, 1.0486759e+06, ...,
          1.0486759e+06, 1.0486759e+06, 1.0486759e+06]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [19], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [20], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [20], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [20], 'to': []}

generate models:285

analyse output arrays in iter:308

pre layer res:
7:conv2d
{'name': 'conv2d', 'output': array([[[[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 1064.6733,      -inf,
               -inf],
         ...,
         [     -inf,      -inf, 1064.6733, ..., 1476.6886,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 1064.6733,      -inf,
               -inf],
         ...,
         [     -inf,      -inf, 1064.6733, ..., 1476.6886,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 1064.6733,      -inf,
               -inf],
         ...,
         [     -inf,      -inf, 1064.6733, ..., 1476.6886,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        ...,

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 1064.6733,      -inf,
               -inf],
         ...,
         [     -inf,      -inf, 1064.6733, ..., 1476.6886,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 1064.6733,      -inf,
               -inf],
         ...,
         [     -inf,      -inf, 1064.6733, ..., 1476.6886,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 1064.6733,      -inf,
               -inf],
         ...,
         [     -inf,      -inf, 1064.6733, ..., 1476.6886,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [16], 'to': [17]}
tf node:
{'name': 'sin', 'output': array([[[[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ..., 0.32079595,
                 nan,        nan],
         ...,
         [       nan,        nan, 0.32079595, ..., 0.13959405,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ..., 0.32079595,
                 nan,        nan],
         ...,
         [       nan,        nan, 0.32079595, ..., 0.13959405,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ..., 0.32079595,
                 nan,        nan],
         ...,
         [       nan,        nan, 0.32079595, ..., 0.13959405,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        ...,

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ..., 0.32079595,
                 nan,        nan],
         ...,
         [       nan,        nan, 0.32079595, ..., 0.13959405,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ..., 0.32079595,
                 nan,        nan],
         ...,
         [       nan,        nan, 0.32079595, ..., 0.13959405,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ..., 0.32079595,
                 nan,        nan],
         ...,
         [       nan,        nan, 0.32079595, ..., 0.13959405,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [7], 'to': [11]}
ms node:
{'name': 'sin', 'output': array([[[[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ..., 0.32172075,
                 nan,        nan],
         ...,
         [       nan,        nan, 0.32172075, ..., 0.13959406,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ..., 0.32172075,
                 nan,        nan],
         ...,
         [       nan,        nan, 0.32172075, ..., 0.13959406,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ..., 0.32172075,
                 nan,        nan],
         ...,
         [       nan,        nan, 0.32172075, ..., 0.13959406,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        ...,

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ..., 0.32172075,
                 nan,        nan],
         ...,
         [       nan,        nan, 0.32172075, ..., 0.13959406,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ..., 0.32125837,
                 nan,        nan],
         ...,
         [       nan,        nan, 0.32125837, ..., 0.14056098,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ..., 0.32125837,
                 nan,        nan],
         ...,
         [       nan,        nan, 0.32125837, ..., 0.14056098,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]]]], dtype=float32), 'output_shape': (1, 128, 14, 14), 'from': [7], 'to': [11]}
torch node:
{'name': 'sin', 'output': array([[[[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ..., 0.32079595,
                 nan,        nan],
         ...,
         [       nan,        nan, 0.32079595, ..., 0.13959406,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ..., 0.32079595,
                 nan,        nan],
         ...,
         [       nan,        nan, 0.32079595, ..., 0.13959406,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ..., 0.32079595,
                 nan,        nan],
         ...,
         [       nan,        nan, 0.32079595, ..., 0.13959406,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        ...,

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ..., 0.32079595,
                 nan,        nan],
         ...,
         [       nan,        nan, 0.32079595, ..., 0.13959406,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ..., 0.32079595,
                 nan,        nan],
         ...,
         [       nan,        nan, 0.32079595, ..., 0.13959406,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ..., 0.32079595,
                 nan,        nan],
         ...,
         [       nan,        nan, 0.32079595, ..., 0.13959406,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 14, 14]), 'from': [7], 'to': [11]}

generate models:300

analyse output arrays in iter:310

pre layer res:
26:reshape
{'name': 'reshape', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        ...,

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [25], 'to': [21]}
tf node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        ...,

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [26], 'to': [2]}
ms node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        ...,

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [26], 'to': [2]}
torch node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        ...,

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [26], 'to': [2]}

generate models:302

analyse output arrays in iter:313

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[128., 128., 128., ..., 128., 128., 128.],
         [128., 128.,  inf, ...,  inf, 128., 128.],
         [128., 128.,  inf, ...,  inf, 128., 128.],
         ...,
         [128., 128.,  inf, ...,  inf, 128., 128.],
         [128., 128.,  inf, ..., 128., 128., 128.],
         [128., 128.,  inf, ..., 128., 128., 128.]],

        [[128., 128., 128., ..., 128., 128., 128.],
         [128., 128.,  inf, ...,  inf, 128., 128.],
         [128., 128.,  inf, ...,  inf, 128., 128.],
         ...,
         [128., 128.,  inf, ...,  inf, 128., 128.],
         [128., 128.,  inf, ..., 128., 128., 128.],
         [128., 128.,  inf, ..., 128., 128., 128.]],

        [[128., 128., 128., ..., 128., 128., 128.],
         [128., 128.,  inf, ...,  inf, 128., 128.],
         [128., 128.,  inf, ...,  inf, 128., 128.],
         ...,
         [128., 128.,  inf, ...,  inf, 128., 128.],
         [128., 128.,  inf, ..., 128., 128., 128.],
         [128., 128.,  inf, ..., 128., 128., 128.]],

        ...,

        [[128., 128., 128., ..., 128., 128., 128.],
         [128., 128.,  inf, ...,  inf, 128., 128.],
         [128., 128.,  inf, ...,  inf, 128., 128.],
         ...,
         [128., 128.,  inf, ...,  inf, 128., 128.],
         [128., 128.,  inf, ..., 128., 128., 128.],
         [128., 128.,  inf, ..., 128., 128., 128.]],

        [[128., 128., 128., ..., 128., 128., 128.],
         [128., 128.,  inf, ...,  inf, 128., 128.],
         [128., 128.,  inf, ...,  inf, 128., 128.],
         ...,
         [128., 128.,  inf, ...,  inf, 128., 128.],
         [128., 128.,  inf, ..., 128., 128., 128.],
         [128., 128.,  inf, ..., 128., 128., 128.]],

        [[128., 128., 128., ..., 128., 128., 128.],
         [128., 128.,  inf, ...,  inf, 128., 128.],
         [128., 128.,  inf, ...,  inf, 128., 128.],
         ...,
         [128., 128.,  inf, ...,  inf, 128., 128.],
         [128., 128.,  inf, ..., 128., 128., 128.],
         [128., 128.,  inf, ..., 128., 128., 128.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [15], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[65536.,    nan,    nan, ...,    nan,    nan, 65536.],
         [98304.,    nan,    nan, ...,    nan,    nan, 98304.],
         [98304.,    nan,    nan, ...,    nan,    nan, 98304.],
         ...,
         [98304.,    nan,    nan, ...,    nan,    nan, 98304.],
         [98304.,    nan,    nan, ...,    nan,    nan, 98304.],
         [65536.,    nan,    nan, ...,    nan, 98304., 65536.]],

        [[65536.,    nan,    nan, ...,    nan,    nan, 65536.],
         [98304.,    nan,    nan, ...,    nan,    nan, 98304.],
         [98304.,    nan,    nan, ...,    nan,    nan, 98304.],
         ...,
         [98304.,    nan,    nan, ...,    nan,    nan, 98304.],
         [98304.,    nan,    nan, ...,    nan,    nan, 98304.],
         [65536.,    nan,    nan, ...,    nan, 98304., 65536.]],

        [[65536.,    nan,    nan, ...,    nan,    nan, 65536.],
         [98304.,    nan,    nan, ...,    nan,    nan, 98304.],
         [98304.,    nan,    nan, ...,    nan,    nan, 98304.],
         ...,
         [98304.,    nan,    nan, ...,    nan,    nan, 98304.],
         [98304.,    nan,    nan, ...,    nan,    nan, 98304.],
         [65536.,    nan,    nan, ...,    nan, 98304., 65536.]],

        ...,

        [[65536.,    nan,    nan, ...,    nan,    nan, 65536.],
         [98304.,    nan,    nan, ...,    nan,    nan, 98304.],
         [98304.,    nan,    nan, ...,    nan,    nan, 98304.],
         ...,
         [98304.,    nan,    nan, ...,    nan,    nan, 98304.],
         [98304.,    nan,    nan, ...,    nan,    nan, 98304.],
         [65536.,    nan,    nan, ...,    nan, 98304., 65536.]],

        [[65536.,    nan,    nan, ...,    nan,    nan, 65536.],
         [98304.,    nan,    nan, ...,    nan,    nan, 98304.],
         [98304.,    nan,    nan, ...,    nan,    nan, 98304.],
         ...,
         [98304.,    nan,    nan, ...,    nan,    nan, 98304.],
         [98304.,    nan,    nan, ...,    nan,    nan, 98304.],
         [65536.,    nan,    nan, ...,    nan, 98304., 65536.]],

        [[65536.,    nan,    nan, ...,    nan,    nan, 65536.],
         [98304.,    nan,    nan, ...,    nan,    nan, 98304.],
         [98304.,    nan,    nan, ...,    nan,    nan, 98304.],
         ...,
         [98304.,    nan,    nan, ...,    nan,    nan, 98304.],
         [98304.,    nan,    nan, ...,    nan,    nan, 98304.],
         [65536.,    nan,    nan, ...,    nan, 98304., 65536.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[65536.,    inf,    inf, ...,    inf,    inf, 65536.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         ...,
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [65536.,    inf,    inf, ...,    inf, 98304., 65536.]],

        [[65536.,    inf,    inf, ...,    inf,    inf, 65536.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         ...,
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [65536.,    inf,    inf, ...,    inf, 98304., 65536.]],

        [[65536.,    inf,    inf, ...,    inf,    inf, 65536.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         ...,
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [65536.,    inf,    inf, ...,    inf, 98304., 65536.]],

        ...,

        [[65536.,    inf,    inf, ...,    inf,    inf, 65536.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         ...,
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [65536.,    inf,    inf, ...,    inf, 98304., 65536.]],

        [[65536.,    inf,    inf, ...,    inf,    inf, 65536.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         ...,
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [65536.,    inf,    inf, ...,    inf, 98304., 65536.]],

        [[65536.,    inf,    inf, ...,    inf,    inf, 65536.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         ...,
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [65536.,    inf,    inf, ...,    inf, 98304., 65536.]]]],
      dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[65536.,    inf,    inf, ...,    inf,    inf, 65536.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         ...,
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [65536.,    inf,    inf, ...,    inf, 98304., 65536.]],

        [[65536.,    inf,    inf, ...,    inf,    inf, 65536.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         ...,
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [65536.,    inf,    inf, ...,    inf, 98304., 65536.]],

        [[65536.,    inf,    inf, ...,    inf,    inf, 65536.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         ...,
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [65536.,    inf,    inf, ...,    inf, 98304., 65536.]],

        ...,

        [[65536.,    inf,    inf, ...,    inf,    inf, 65536.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         ...,
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [65536.,    inf,    inf, ...,    inf, 98304., 65536.]],

        [[65536.,    inf,    inf, ...,    inf,    inf, 65536.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         ...,
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [65536.,    inf,    inf, ...,    inf, 98304., 65536.]],

        [[65536.,    inf,    inf, ...,    inf,    inf, 65536.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         ...,
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [98304.,    inf,    inf, ...,    inf,    inf, 98304.],
         [65536.,    inf,    inf, ...,    inf, 98304., 65536.]]]],
      dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [9], 'to': []}

generate models:305

analyse output arrays in iter:316

pre layer res:
16:add
{'name': 'add', 'output': array([[[[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        ...,

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 4.454347 , 5.420535 ,
          5.5412636],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf, 3.3672957,
          4.7361984]],

        [[5.288267 , 5.5412636, 5.5412636, ..., 3.3672957,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [11, 19], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [16], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [16], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [16], 'to': []}

pre layer res:
22:transpose
{'name': 'transpose', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [23], 'to': [24]}
tf node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [22], 'to': [2]}
ms node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [22], 'to': [2]}
torch node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [22], 'to': [2]}

generate models:308

analyse output arrays in iter:338

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf, 7.5323276e+18],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf, 4.2243750e+03],
         [          inf,           inf,           inf, ...,
                    inf,           inf, 4.2242822e+03],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf, 7.5323276e+18],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf, 4.2243750e+03],
         [          inf,           inf,           inf, ...,
                    inf,           inf, 4.2242822e+03],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf, 7.5323276e+18],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf, 4.2243750e+03],
         [          inf,           inf,           inf, ...,
                    inf,           inf, 4.2242822e+03],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]],

        ...,

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf, 7.5323276e+18],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf, 4.2243750e+03],
         [          inf,           inf,           inf, ...,
                    inf,           inf, 4.2242822e+03],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf, 7.5323276e+18],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf, 4.2243750e+03],
         [          inf,           inf,           inf, ...,
                    inf,           inf, 4.2242822e+03],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf, 7.5323276e+18],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf, 4.2243750e+03],
         [          inf,           inf,           inf, ...,
                    inf,           inf, 4.2242822e+03],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [11], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [9], 'to': []}

pre layer res:
28:reshape
{'name': 'reshape', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 112, 112]), 'from': [27], 'to': [25]}
tf node:
{'name': 'conv2d', 'output': array([[[[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           7.0938855e-05, -5.1099276e-05,  6.9529433e-06],
         [-3.0517578e-05, -4.5776367e-05,  4.5776367e-05, ...,
          -2.1036984e-05, -8.6906708e-05,  8.4392297e-05],
         ...,
         [-6.1035156e-05, -1.2207031e-04,  0.0000000e+00, ...,
           1.1967022e-06,  2.8330829e-05,  1.0686796e-04],
         [-3.0517578e-05, -6.4849854e-05,  3.3909739e-05, ...,
          -2.4304658e-05, -1.2665683e-05,  1.7851897e-05],
         [ 1.9073486e-05,  0.0000000e+00,  7.3537876e-06, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           7.0938855e-05, -5.1099276e-05,  6.9529433e-06],
         [-3.0517578e-05, -4.5776367e-05,  4.5776367e-05, ...,
          -2.1036984e-05, -8.6906708e-05,  8.4392297e-05],
         ...,
         [-6.1035156e-05, -1.2207031e-04,  0.0000000e+00, ...,
           1.1967022e-06,  2.8330829e-05,  1.0686796e-04],
         [-3.0517578e-05, -6.4849854e-05,  3.3909739e-05, ...,
          -2.4304658e-05, -1.2665683e-05,  1.7851897e-05],
         [ 1.9073486e-05,  0.0000000e+00,  7.3537876e-06, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           7.0938855e-05, -5.1099276e-05,  6.9529433e-06],
         [-3.0517578e-05, -4.5776367e-05,  4.5776367e-05, ...,
          -2.1036984e-05, -8.6906708e-05,  8.4392297e-05],
         ...,
         [-6.1035156e-05, -1.2207031e-04,  0.0000000e+00, ...,
           1.1967022e-06,  2.8330829e-05,  1.0686796e-04],
         [-3.0517578e-05, -6.4849854e-05,  3.3909739e-05, ...,
          -2.4304658e-05, -1.2665683e-05,  1.7851897e-05],
         [ 1.9073486e-05,  0.0000000e+00,  7.3537876e-06, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        ...,

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           7.0938855e-05, -5.1099276e-05,  6.9529433e-06],
         [-3.0517578e-05, -4.5776367e-05,  4.5776367e-05, ...,
          -2.1036984e-05, -8.6906708e-05,  8.4392297e-05],
         ...,
         [-6.1035156e-05, -1.2207031e-04,  0.0000000e+00, ...,
           1.1967022e-06,  2.8330829e-05,  1.0686796e-04],
         [-3.0517578e-05, -6.4849854e-05,  3.3909739e-05, ...,
          -2.4304658e-05, -1.2665683e-05,  1.7851897e-05],
         [ 1.9073486e-05,  0.0000000e+00,  7.3537876e-06, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           7.0938855e-05, -5.1099276e-05,  6.9529433e-06],
         [-3.0517578e-05, -4.5776367e-05,  4.5776367e-05, ...,
          -2.1036984e-05, -8.6906708e-05,  8.4392297e-05],
         ...,
         [-6.1035156e-05, -1.2207031e-04,  0.0000000e+00, ...,
           1.1967022e-06,  2.8330829e-05,  1.0686796e-04],
         [-3.0517578e-05, -6.4849854e-05,  3.3909739e-05, ...,
          -2.4304658e-05, -1.2665683e-05,  1.7851897e-05],
         [ 1.9073486e-05,  0.0000000e+00,  7.3537876e-06, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           7.0938855e-05, -5.1099276e-05,  6.9529433e-06],
         [-3.0517578e-05, -4.5776367e-05,  4.5776367e-05, ...,
          -2.1036984e-05, -8.6906708e-05,  8.4392297e-05],
         ...,
         [-6.1035156e-05, -1.2207031e-04,  0.0000000e+00, ...,
           1.1967022e-06,  2.8330829e-05,  1.0686796e-04],
         [-3.0517578e-05, -6.4849854e-05,  3.3909739e-05, ...,
          -2.4304658e-05, -1.2665683e-05,  1.7851897e-05],
         [ 1.9073486e-05,  0.0000000e+00,  7.3537876e-06, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]]]],
      dtype=float32), 'output_shape': TensorShape([1, 16, 112, 112]), 'from': [28], 'to': [29]}
ms node:
{'name': 'conv2d', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': (1, 16, 112, 112), 'from': [28], 'to': [29]}
torch node:
{'name': 'conv2d', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': torch.Size([1, 16, 112, 112]), 'from': [28], 'to': [29]}

generate models:328

analyse output arrays in iter:342

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [8], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [9], 'to': []}

generate models:331

analyse output arrays in iter:352

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [8], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [9], 'to': []}

generate models:341

analyse output arrays in iter:358

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [8], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [9], 'to': []}

generate models:346

analyse output arrays in iter:383

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[ 589.7146 ,  589.7146 ,  505.1779 , ...,  506.24078,
           584.1454 ,  589.7146 ],
         [ 589.7146 ,  589.7146 ,  505.1779 , ...,  506.24078,
           584.1454 ,  589.7146 ],
         [ 589.7146 ,  896.12683, 1027.27   , ...,  920.6346 ,
           623.1274 , 1204.2416 ],
         ...,
         [ 589.7146 ,  957.2565 ,  888.3553 , ..., 1052.3037 ,
           584.1454 ,  589.7146 ],
         [ 589.7146 ,  589.7146 ,  505.1779 , ...,  506.24078,
           584.1454 ,  589.7146 ],
         [ 589.7146 ,  589.7146 ,  505.1779 , ...,  506.24078,
           584.1454 ,  589.7146 ]],

        [[ 589.7146 ,  589.7146 ,  505.1779 , ...,  506.24078,
           584.1454 ,  589.7146 ],
         [ 589.7146 ,  589.7146 ,  505.1779 , ...,  506.24078,
           584.1454 ,  589.7146 ],
         [ 589.7146 ,  896.12683, 1027.27   , ...,  920.6346 ,
           623.1274 , 1204.2416 ],
         ...,
         [ 589.7146 ,  957.2565 ,  888.3553 , ..., 1052.3037 ,
           584.1454 ,  589.7146 ],
         [ 589.7146 ,  589.7146 ,  505.1779 , ...,  506.24078,
           584.1454 ,  589.7146 ],
         [ 589.7146 ,  589.7146 ,  505.1779 , ...,  506.24078,
           584.1454 ,  589.7146 ]],

        [[ 589.7146 ,  589.7146 ,  505.1779 , ...,  506.24078,
           584.1454 ,  589.7146 ],
         [ 589.7146 ,  589.7146 ,  505.1779 , ...,  506.24078,
           584.1454 ,  589.7146 ],
         [ 589.7146 ,  896.12683, 1027.27   , ...,  920.6346 ,
           623.1274 , 1204.2416 ],
         ...,
         [ 589.7146 ,  957.2565 ,  888.3553 , ..., 1052.3037 ,
           584.1454 ,  589.7146 ],
         [ 589.7146 ,  589.7146 ,  505.1779 , ...,  506.24078,
           584.1454 ,  589.7146 ],
         [ 589.7146 ,  589.7146 ,  505.1779 , ...,  506.24078,
           584.1454 ,  589.7146 ]],

        ...,

        [[ 589.7146 ,  589.7146 ,  505.1779 , ...,  506.24078,
           584.1454 ,  589.7146 ],
         [ 589.7146 ,  589.7146 ,  505.1779 , ...,  506.24078,
           584.1454 ,  589.7146 ],
         [ 589.7146 ,  896.12683, 1027.27   , ...,  920.6346 ,
           623.1274 , 1204.2416 ],
         ...,
         [ 589.7146 ,  957.2565 ,  888.3553 , ..., 1052.3037 ,
           584.1454 ,  589.7146 ],
         [ 589.7146 ,  589.7146 ,  505.1779 , ...,  506.24078,
           584.1454 ,  589.7146 ],
         [ 589.7146 ,  589.7146 ,  505.1779 , ...,  506.24078,
           584.1454 ,  589.7146 ]],

        [[ 589.7146 ,  589.7146 ,  505.1779 , ...,  506.24078,
           584.1454 ,  589.7146 ],
         [ 589.7146 ,  589.7146 ,  505.1779 , ...,  506.24078,
           584.1454 ,  589.7146 ],
         [ 589.7146 ,  896.12683, 1027.27   , ...,  920.6346 ,
           623.1274 , 1204.2416 ],
         ...,
         [ 589.7146 ,  957.2565 ,  888.3553 , ..., 1052.3037 ,
           584.1454 ,  589.7146 ],
         [ 589.7146 ,  589.7146 ,  505.1779 , ...,  506.24078,
           584.1454 ,  589.7146 ],
         [ 589.7146 ,  589.7146 ,  505.1779 , ...,  506.24078,
           584.1454 ,  589.7146 ]],

        [[ 589.7146 ,  589.7146 ,  505.1779 , ...,  506.24078,
           584.1454 ,  589.7146 ],
         [ 589.7146 ,  589.7146 ,  505.1779 , ...,  506.24078,
           584.1454 ,  589.7146 ],
         [ 589.7146 ,  896.12683, 1027.27   , ...,  920.6346 ,
           623.1274 , 1204.2416 ],
         ...,
         [ 589.7146 ,  957.2565 ,  888.3553 , ..., 1052.3037 ,
           584.1454 ,  589.7146 ],
         [ 589.7146 ,  589.7146 ,  505.1779 , ...,  506.24078,
           584.1454 ,  589.7146 ],
         [ 589.7146 ,  589.7146 ,  505.1779 , ...,  506.24078,
           584.1454 ,  589.7146 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [8], 'to': [11]}
tf node:
{'name': 'sin', 'output': array([[[[-0.78631353, -0.78631353,  0.57983834, ..., -0.42988595,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.78631353,  0.57983834, ..., -0.42988595,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.698232  ,  0.03077333, ..., -0.14739603,
           0.8875662 , -0.8476769 ],
         ...,
         [-0.78631353,  0.801195  ,  0.6559461 , ...,  0.12946361,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.78631353,  0.57983834, ..., -0.42988595,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.78631353,  0.57983834, ..., -0.42988595,
          -0.1896914 , -0.78631353]],

        [[-0.78631353, -0.78631353,  0.57983834, ..., -0.42988595,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.78631353,  0.57983834, ..., -0.42988595,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.698232  ,  0.03077333, ..., -0.14739603,
           0.8875662 , -0.8476769 ],
         ...,
         [-0.78631353,  0.801195  ,  0.6559461 , ...,  0.12946361,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.78631353,  0.57983834, ..., -0.42988595,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.78631353,  0.57983834, ..., -0.42988595,
          -0.1896914 , -0.78631353]],

        [[-0.78631353, -0.78631353,  0.57983834, ..., -0.42988595,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.78631353,  0.57983834, ..., -0.42988595,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.698232  ,  0.03077333, ..., -0.14739603,
           0.8875662 , -0.8476769 ],
         ...,
         [-0.78631353,  0.801195  ,  0.6559461 , ...,  0.12946361,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.78631353,  0.57983834, ..., -0.42988595,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.78631353,  0.57983834, ..., -0.42988595,
          -0.1896914 , -0.78631353]],

        ...,

        [[-0.78631353, -0.78631353,  0.57983834, ..., -0.42988595,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.78631353,  0.57983834, ..., -0.42988595,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.698232  ,  0.03077333, ..., -0.14739603,
           0.8875662 , -0.8476769 ],
         ...,
         [-0.78631353,  0.801195  ,  0.6559461 , ...,  0.12946361,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.78631353,  0.57983834, ..., -0.42988595,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.78631353,  0.57983834, ..., -0.42988595,
          -0.1896914 , -0.78631353]],

        [[-0.78631353, -0.78631353,  0.57983834, ..., -0.42988595,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.78631353,  0.57983834, ..., -0.42988595,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.698232  ,  0.03077333, ..., -0.14739603,
           0.8875662 , -0.8476769 ],
         ...,
         [-0.78631353,  0.801195  ,  0.6559461 , ...,  0.12946361,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.78631353,  0.57983834, ..., -0.42988595,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.78631353,  0.57983834, ..., -0.42988595,
          -0.1896914 , -0.78631353]],

        [[-0.78631353, -0.78631353,  0.57983834, ..., -0.42988595,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.78631353,  0.57983834, ..., -0.42988595,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.698232  ,  0.03077333, ..., -0.14739603,
           0.8875662 , -0.8476769 ],
         ...,
         [-0.78631353,  0.801195  ,  0.6559461 , ...,  0.12946361,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.78631353,  0.57983834, ..., -0.42988595,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.78631353,  0.57983834, ..., -0.42988595,
          -0.1896914 , -0.78631353]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [9], 'to': [10]}
ms node:
{'name': 'sin', 'output': array([[[[-0.78631353, -0.78631353,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.78631353,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.698232  ,  0.03077333, ..., -0.14739601,
           0.8875662 , -0.8476769 ],
         ...,
         [-0.78631353,  0.801195  ,  0.6559461 , ...,  0.12946361,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.78631353,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.78631353,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.78631353]],

        [[-0.78631353, -0.78631353,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.78631353,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.698232  ,  0.03077333, ..., -0.14739601,
           0.8875662 , -0.8476769 ],
         ...,
         [-0.78631353,  0.801195  ,  0.6559461 , ...,  0.12946361,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.78631353,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.78631353,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.78631353]],

        [[-0.78631353, -0.78631353,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.78631353,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.698232  ,  0.03077333, ..., -0.14739601,
           0.8875662 , -0.8476769 ],
         ...,
         [-0.78631353,  0.801195  ,  0.6559461 , ...,  0.12946361,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.78631353,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.78631353,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.78631353]],

        ...,

        [[-0.78631353, -0.78631353,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.78631353,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.698232  ,  0.03077333, ..., -0.14739601,
           0.8875662 , -0.8476769 ],
         ...,
         [-0.78631353,  0.801195  ,  0.6559461 , ...,  0.12946361,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.78631353,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.78631353],
         [-0.78631353, -0.78631353,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.78631353]],

        [[-0.786502  , -0.786502  ,  0.5797389 , ..., -0.42988595,
          -0.1896914 , -0.786502  ],
         [-0.786502  , -0.786502  ,  0.5797389 , ..., -0.42988595,
          -0.1896914 , -0.786502  ],
         [-0.786502  , -0.69853777,  0.0289431 , ..., -0.14570549,
           0.88759434, -0.8476769 ],
         ...,
         [-0.786502  ,  0.801195  ,  0.6559461 , ...,  0.13115802,
          -0.1896914 , -0.786502  ],
         [-0.786502  , -0.786502  ,  0.5797389 , ..., -0.42988595,
          -0.1896914 , -0.786502  ],
         [-0.786502  , -0.786502  ,  0.5797389 , ..., -0.42988595,
          -0.1896914 , -0.786502  ]],

        [[-0.786502  , -0.786502  ,  0.5797389 , ..., -0.42988595,
          -0.1896914 , -0.786502  ],
         [-0.786502  , -0.786502  ,  0.5797389 , ..., -0.42988595,
          -0.1896914 , -0.786502  ],
         [-0.786502  , -0.69853777,  0.0289431 , ..., -0.14570549,
           0.88759434, -0.8476769 ],
         ...,
         [-0.786502  ,  0.801195  ,  0.6559461 , ...,  0.13115802,
          -0.1896914 , -0.786502  ],
         [-0.786502  , -0.786502  ,  0.5797389 , ..., -0.42988595,
          -0.1896914 , -0.786502  ],
         [-0.786502  , -0.786502  ,  0.5797389 , ..., -0.42988595,
          -0.1896914 , -0.786502  ]]]], dtype=float32), 'output_shape': (1, 128, 7, 7), 'from': [9], 'to': [10]}
torch node:
{'name': 'sin', 'output': array([[[[-0.7863135 , -0.7863135 ,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.7863135 ],
         [-0.7863135 , -0.7863135 ,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.7863135 ],
         [-0.7863135 , -0.698232  ,  0.03077333, ..., -0.14739603,
           0.8875662 , -0.8476769 ],
         ...,
         [-0.7863135 ,  0.801195  ,  0.6559461 , ...,  0.12946361,
          -0.1896914 , -0.7863135 ],
         [-0.7863135 , -0.7863135 ,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.7863135 ],
         [-0.7863135 , -0.7863135 ,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.7863135 ]],

        [[-0.7863135 , -0.7863135 ,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.7863135 ],
         [-0.7863135 , -0.7863135 ,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.7863135 ],
         [-0.7863135 , -0.698232  ,  0.03077333, ..., -0.14739603,
           0.8875662 , -0.8476769 ],
         ...,
         [-0.7863135 ,  0.801195  ,  0.6559461 , ...,  0.12946361,
          -0.1896914 , -0.7863135 ],
         [-0.7863135 , -0.7863135 ,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.7863135 ],
         [-0.7863135 , -0.7863135 ,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.7863135 ]],

        [[-0.7863135 , -0.7863135 ,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.7863135 ],
         [-0.7863135 , -0.7863135 ,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.7863135 ],
         [-0.7863135 , -0.698232  ,  0.03077333, ..., -0.14739603,
           0.8875662 , -0.8476769 ],
         ...,
         [-0.7863135 ,  0.801195  ,  0.6559461 , ...,  0.12946361,
          -0.1896914 , -0.7863135 ],
         [-0.7863135 , -0.7863135 ,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.7863135 ],
         [-0.7863135 , -0.7863135 ,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.7863135 ]],

        ...,

        [[-0.7863135 , -0.7863135 ,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.7863135 ],
         [-0.7863135 , -0.7863135 ,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.7863135 ],
         [-0.7863135 , -0.698232  ,  0.03077333, ..., -0.14739603,
           0.8875662 , -0.8476769 ],
         ...,
         [-0.7863135 ,  0.801195  ,  0.6559461 , ...,  0.12946361,
          -0.1896914 , -0.7863135 ],
         [-0.7863135 , -0.7863135 ,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.7863135 ],
         [-0.7863135 , -0.7863135 ,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.7863135 ]],

        [[-0.7863135 , -0.7863135 ,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.7863135 ],
         [-0.7863135 , -0.7863135 ,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.7863135 ],
         [-0.7863135 , -0.698232  ,  0.03077333, ..., -0.14739603,
           0.8875662 , -0.8476769 ],
         ...,
         [-0.7863135 ,  0.801195  ,  0.6559461 , ...,  0.12946361,
          -0.1896914 , -0.7863135 ],
         [-0.7863135 , -0.7863135 ,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.7863135 ],
         [-0.7863135 , -0.7863135 ,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.7863135 ]],

        [[-0.7863135 , -0.7863135 ,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.7863135 ],
         [-0.7863135 , -0.7863135 ,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.7863135 ],
         [-0.7863135 , -0.698232  ,  0.03077333, ..., -0.14739603,
           0.8875662 , -0.8476769 ],
         ...,
         [-0.7863135 ,  0.801195  ,  0.6559461 , ...,  0.12946361,
          -0.1896914 , -0.7863135 ],
         [-0.7863135 , -0.7863135 ,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.7863135 ],
         [-0.7863135 , -0.7863135 ,  0.5798135 , ..., -0.42988595,
          -0.1896914 , -0.7863135 ]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 7, 7]), 'from': [9], 'to': [10]}

generate models:369

analyse output arrays in iter:385

pre layer res:
20:reshape
{'name': 'reshape', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 112, 112]), 'from': [19], 'to': [17]}
tf node:
{'name': 'conv2d', 'output': array([[[[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           1.5412488e-07, -1.9746032e-07,  1.4630635e-07],
         [ 0.0000000e+00,  0.0000000e+00,  2.3841858e-07, ...,
           3.9254346e-07,  1.6998945e-07,  4.3084393e-07],
         [ 2.3841858e-07, -3.2782555e-07,  0.0000000e+00, ...,
           1.2644054e-07,  5.0946880e-07, -1.3723206e-07],
         ...,
         [ 2.3841858e-07,  2.3841858e-07,  4.7683716e-07, ...,
          -2.0742880e-07,  3.7792361e-08, -5.4941779e-08],
         [-2.3841858e-07,  9.5367432e-07, -2.3841858e-07, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           1.5412488e-07, -1.9746032e-07,  1.4630635e-07],
         [ 0.0000000e+00,  0.0000000e+00,  2.3841858e-07, ...,
           3.9254346e-07,  1.6998945e-07,  4.3084393e-07],
         [ 2.3841858e-07, -3.2782555e-07,  0.0000000e+00, ...,
           1.2644054e-07,  5.0946880e-07, -1.3723206e-07],
         ...,
         [ 2.3841858e-07,  2.3841858e-07,  4.7683716e-07, ...,
          -2.0742880e-07,  3.7792361e-08, -5.4941779e-08],
         [-2.3841858e-07,  9.5367432e-07, -2.3841858e-07, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           1.5412488e-07, -1.9746032e-07,  1.4630635e-07],
         [ 0.0000000e+00,  0.0000000e+00,  2.3841858e-07, ...,
           3.9254346e-07,  1.6998945e-07,  4.3084393e-07],
         [ 2.3841858e-07, -3.2782555e-07,  0.0000000e+00, ...,
           1.2644054e-07,  5.0946880e-07, -1.3723206e-07],
         ...,
         [ 2.3841858e-07,  2.3841858e-07,  4.7683716e-07, ...,
          -2.0742880e-07,  3.7792361e-08, -5.4941779e-08],
         [-2.3841858e-07,  9.5367432e-07, -2.3841858e-07, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        ...,

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           1.5412488e-07, -1.9746032e-07,  1.4630635e-07],
         [ 0.0000000e+00,  0.0000000e+00,  2.3841858e-07, ...,
           3.9254346e-07,  1.6998945e-07,  4.3084393e-07],
         [ 2.3841858e-07, -3.2782555e-07,  0.0000000e+00, ...,
           1.2644054e-07,  5.0946880e-07, -1.3723206e-07],
         ...,
         [ 2.3841858e-07,  2.3841858e-07,  4.7683716e-07, ...,
          -2.0742880e-07,  3.7792361e-08, -5.4941779e-08],
         [-2.3841858e-07,  9.5367432e-07, -2.3841858e-07, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           1.5412488e-07, -1.9746032e-07,  1.4630635e-07],
         [ 0.0000000e+00,  0.0000000e+00,  2.3841858e-07, ...,
           3.9254346e-07,  1.6998945e-07,  4.3084393e-07],
         [ 2.3841858e-07, -3.2782555e-07,  0.0000000e+00, ...,
           1.2644054e-07,  5.0946880e-07, -1.3723206e-07],
         ...,
         [ 2.3841858e-07,  2.3841858e-07,  4.7683716e-07, ...,
          -2.0742880e-07,  3.7792361e-08, -5.4941779e-08],
         [-2.3841858e-07,  9.5367432e-07, -2.3841858e-07, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           1.5412488e-07, -1.9746032e-07,  1.4630635e-07],
         [ 0.0000000e+00,  0.0000000e+00,  2.3841858e-07, ...,
           3.9254346e-07,  1.6998945e-07,  4.3084393e-07],
         [ 2.3841858e-07, -3.2782555e-07,  0.0000000e+00, ...,
           1.2644054e-07,  5.0946880e-07, -1.3723206e-07],
         ...,
         [ 2.3841858e-07,  2.3841858e-07,  4.7683716e-07, ...,
          -2.0742880e-07,  3.7792361e-08, -5.4941779e-08],
         [-2.3841858e-07,  9.5367432e-07, -2.3841858e-07, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 112, 112]), 'from': [20], 'to': [21]}
ms node:
{'name': 'conv2d', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': (1, 64, 112, 112), 'from': [20], 'to': [21]}
torch node:
{'name': 'conv2d', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 112, 112]), 'from': [20], 'to': [21]}

generate models:371

analyse output arrays in iter:390

pre layer res:
8:empty_seq_operator
{'name': 'empty_seq_operator', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [7], 'to': [16]}
tf node:
{'name': 'cos', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [8], 'to': [9]}
ms node:
{'name': 'cos', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': (1, 128, 14, 14), 'from': [8], 'to': [9]}
torch node:
{'name': 'cos', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 14, 14]), 'from': [8], 'to': [9]}

generate models:376

analyse output arrays in iter:391

pre layer res:
5:empty_seq_operator
{'name': 'empty_seq_operator', 'output': array([[[[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         ...,
         [64., 64., inf, ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         ...,
         [64., 64., inf, ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         ...,
         [64., 64., inf, ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        ...,

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         ...,
         [64., 64., inf, ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         ...,
         [64., 64., inf, ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         ...,
         [64., 64., inf, ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 14, 14]), 'from': [4], 'to': [20]}
tf node:
{'name': 'log', 'output': array([[[[4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         ...,
         [4.158883, 4.158883,      inf, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883]],

        [[4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         ...,
         [4.158883, 4.158883,      inf, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883]],

        [[4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         ...,
         [4.158883, 4.158883,      inf, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883]],

        ...,

        [[4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         ...,
         [4.158883, 4.158883,      inf, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883]],

        [[4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         ...,
         [4.158883, 4.158883,      inf, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883]],

        [[4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         ...,
         [4.158883, 4.158883,      inf, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 14, 14]), 'from': [5], 'to': [17]}
ms node:
{'name': 'log', 'output': array([[[[ 4.1588817,  4.1588817,  4.1588817, ...,  4.1588817,
           4.1588817,  4.1588817],
         [ 4.1588817,  4.1588817,  4.1588817, ...,  4.1588817,
           4.1588817,  4.1588817],
         [ 4.1588817,  4.1588817,  4.1588817, ...,  4.1588817,
           4.1588817,  4.1588817],
         ...,
         [ 4.1588817,  4.1588817, 88.72284  , ...,  4.1588817,
           4.1588817,  4.1588817],
         [ 4.1588817,  4.1588817,  4.1588817, ...,  4.1588817,
           4.1588817,  4.1588817],
         [ 4.1588817,  4.1588817,  4.1588817, ...,  4.1588817,
           4.1588817,  4.1588817]],

        [[ 4.1588817,  4.1588817,  4.1588817, ...,  4.1588817,
           4.1588817,  4.1588817],
         [ 4.1588817,  4.1588817,  4.1588817, ...,  4.1588817,
           4.1588817,  4.1588817],
         [ 4.1588817,  4.1588817,  4.1588817, ...,  4.1588817,
           4.1588817,  4.1588817],
         ...,
         [ 4.1588817,  4.1588817, 88.72284  , ...,  4.1588817,
           4.1588817,  4.1588817],
         [ 4.1588817,  4.1588817,  4.1588817, ...,  4.1588817,
           4.1588817,  4.1588817],
         [ 4.1588817,  4.1588817,  4.1588817, ...,  4.1588817,
           4.1588817,  4.1588817]],

        [[ 4.1588817,  4.1588817,  4.1588817, ...,  4.1588817,
           4.1588817,  4.1588817],
         [ 4.1588817,  4.1588817,  4.1588817, ...,  4.1588817,
           4.1588817,  4.1588817],
         [ 4.1588817,  4.1588817,  4.1588817, ...,  4.1588817,
           4.1588817,  4.1588817],
         ...,
         [ 4.1588817,  4.1588817, 88.72284  , ...,  4.1588817,
           4.1588817,  4.1588817],
         [ 4.1588817,  4.1588817,  4.1588817, ...,  4.1588817,
           4.1588817,  4.1588817],
         [ 4.1588817,  4.1588817,  4.1588817, ...,  4.1588817,
           4.1588817,  4.1588817]],

        ...,

        [[ 4.1588817,  4.1588817,  4.1588817, ...,  4.1588817,
           4.1588817,  4.1588817],
         [ 4.1588817,  4.1588817,  4.1588817, ...,  4.1588817,
           4.1588817,  4.1588817],
         [ 4.1588817,  4.1588817,  4.1588817, ...,  4.1588817,
           4.1588817,  4.1588817],
         ...,
         [ 4.1588817,  4.1588817, 88.72284  , ...,  4.1588817,
           4.1588817,  4.1588817],
         [ 4.1588817,  4.1588817,  4.1588817, ...,  4.1588817,
           4.1588817,  4.1588817],
         [ 4.1588817,  4.1588817,  4.1588817, ...,  4.1588817,
           4.1588817,  4.1588817]],

        [[ 4.1588817,  4.1588817,  4.1588817, ...,  4.1588817,
           4.1588817,  4.1588817],
         [ 4.1588817,  4.1588817,  4.1588817, ...,  4.1588817,
           4.1588817,  4.1588817],
         [ 4.1588817,  4.1588817,  4.1588817, ...,  4.1588817,
           4.1588817,  4.1588817],
         ...,
         [ 4.1588817,  4.1588817, 88.72284  , ...,  4.1588817,
           4.1588817,  4.1588817],
         [ 4.1588817,  4.1588817,  4.1588817, ...,  4.1588817,
           4.1588817,  4.1588817],
         [ 4.1588817,  4.1588817,  4.1588817, ...,  4.1588817,
           4.1588817,  4.1588817]],

        [[ 4.1588817,  4.1588817,  4.1588817, ...,  4.1588817,
           4.1588817,  4.1588817],
         [ 4.1588817,  4.1588817,  4.1588817, ...,  4.1588817,
           4.1588817,  4.1588817],
         [ 4.1588817,  4.1588817,  4.1588817, ...,  4.1588817,
           4.1588817,  4.1588817],
         ...,
         [ 4.1588817,  4.1588817, 88.72284  , ...,  4.1588817,
           4.1588817,  4.1588817],
         [ 4.1588817,  4.1588817,  4.1588817, ...,  4.1588817,
           4.1588817,  4.1588817],
         [ 4.1588817,  4.1588817,  4.1588817, ...,  4.1588817,
           4.1588817,  4.1588817]]]], dtype=float32), 'output_shape': (1, 64, 14, 14), 'from': [5], 'to': [17]}
torch node:
{'name': 'log', 'output': array([[[[4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         ...,
         [4.158883, 4.158883,      inf, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883]],

        [[4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         ...,
         [4.158883, 4.158883,      inf, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883]],

        [[4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         ...,
         [4.158883, 4.158883,      inf, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883]],

        ...,

        [[4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         ...,
         [4.158883, 4.158883,      inf, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883]],

        [[4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         ...,
         [4.158883, 4.158883,      inf, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883]],

        [[4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         ...,
         [4.158883, 4.158883,      inf, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 14, 14]), 'from': [5], 'to': [17]}

generate models:377

analyse the exceptions in iter:397
torch exception:
{'id': 26, 'name': 'flatten', 'frame_work': 'torch', 'input_datas': [tensor([1052352.,       0.,       0.,  ...,       0.,       0.,       0.],
       grad_fn=<ConstantPadNdBackward0>)]}
Dimension out of range (expected to be in range of [-1, 0], but got 1)

generate models:383

analyse output arrays in iter:405

pre layer res:
11:log
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [13], 'to': [9]}
tf node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        ...,

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [11], 'to': [10]}
ms node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        ...,

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': (1, 128, 7, 7), 'from': [11], 'to': [10]}
torch node:
{'name': 'maxpool2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 7, 7]), 'from': [11], 'to': [10]}

generate models:391

analyse output arrays in iter:406

pre layer res:
29:log
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [21], 'to': [11]}
tf node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [29], 'to': [4]}
ms node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [29], 'to': [4]}
torch node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [29], 'to': [4]}

generate models:392

analyse output arrays in iter:415

pre layer res:
17:log
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [8], 'to': [9]}
tf node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        ...,

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [17], 'to': [10]}
ms node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        ...,

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': (1, 128, 7, 7), 'from': [17], 'to': [10]}
torch node:
{'name': 'maxpool2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 7, 7]), 'from': [17], 'to': [10]}

generate models:399

analyse output arrays in iter:419

pre layer res:
11:empty_merge_operator
{'name': 'empty_merge_operator', 'output': array([[[[inf,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[inf,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[inf,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        ...,

        [[inf,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[inf,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[inf,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [9, 14], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan,  0., ...,  0.,  0.,  0.],
         [nan, nan,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[nan, nan,  0., ...,  0.,  0.,  0.],
         [nan, nan,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[nan, nan,  0., ...,  0.,  0.,  0.],
         [nan, nan,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        ...,

        [[nan, nan,  0., ...,  0.,  0.,  0.],
         [nan, nan,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[nan, nan,  0., ...,  0.,  0.,  0.],
         [nan, nan,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[nan, nan,  0., ...,  0.,  0.,  0.],
         [nan, nan,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [11], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf,  0., ...,  0.,  0.,  0.],
         [inf, inf,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[inf, inf,  0., ...,  0.,  0.,  0.],
         [inf, inf,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[inf, inf,  0., ...,  0.,  0.,  0.],
         [inf, inf,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        ...,

        [[inf, inf,  0., ...,  0.,  0.,  0.],
         [inf, inf,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[inf, inf,  0., ...,  0.,  0.,  0.],
         [inf, inf,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[inf, inf,  0., ...,  0.,  0.,  0.],
         [inf, inf,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [11], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf,  0., ...,  0.,  0.,  0.],
         [inf, inf,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[inf, inf,  0., ...,  0.,  0.,  0.],
         [inf, inf,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[inf, inf,  0., ...,  0.,  0.,  0.],
         [inf, inf,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        ...,

        [[inf, inf,  0., ...,  0.,  0.,  0.],
         [inf, inf,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[inf, inf,  0., ...,  0.,  0.,  0.],
         [inf, inf,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[inf, inf,  0., ...,  0.,  0.,  0.],
         [inf, inf,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [11], 'to': []}

generate models:403

analyse output arrays in iter:423

pre layer res:
15:log
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [12], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [15], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [15], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [15], 'to': []}

generate models:407

analyse output arrays in iter:438

pre layer res:
30:reshape
{'name': 'reshape', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        ...,

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 112, 112]), 'from': [29], 'to': [27]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 112, 112]), 'from': [30], 'to': [31]}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]]]], dtype=float32), 'output_shape': (1, 64, 112, 112), 'from': [30], 'to': [31]}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 112, 112]), 'from': [30], 'to': [31]}

generate models:421

analyse output arrays in iter:442

pre layer res:
20:log
{'name': 'log', 'output': array([[[[-0.6580705, -0.6580705, -0.6580705, ..., -0.6580705,
          -0.6580705, -0.6580705],
         [-0.6580705, -0.6580705, -0.6580705, ..., -0.6580705,
          -0.6580705, -0.6580705],
         [-0.6580705, -0.6580705, -0.6580705, ..., -0.6580705,
          -0.6580705, -0.6580705],
         ...,
         [-0.6580705, -0.6580705, -0.6580705, ..., -0.6580705,
          -0.6580705, -0.6580705],
         [-0.6580705, -0.6580705, -0.6580705, ..., -0.6580705,
          -0.6580705, -0.6580705],
         [-0.6580705, -0.6580705, -0.6580705, ..., -0.6580705,
          -0.6580705, -0.6580705]],

        [[-0.6580705, -0.6580705, -0.6580705, ..., -0.6580705,
          -0.6580705, -0.6580705],
         [-0.6580705, -0.6580705, -0.6580705, ..., -0.6580705,
          -0.6580705, -0.6580705],
         [-0.6580705, -0.6580705, -0.6580705, ..., -0.6580705,
          -0.6580705, -0.6580705],
         ...,
         [-0.6580705, -0.6580705, -0.6580705, ..., -0.6580705,
          -0.6580705, -0.6580705],
         [-0.6580705, -0.6580705, -0.6580705, ..., -0.6580705,
          -0.6580705, -0.6580705],
         [-0.6580705, -0.6580705, -0.6580705, ..., -0.6580705,
          -0.6580705, -0.6580705]],

        [[-0.6580705, -0.6580705, -0.6580705, ..., -0.6580705,
          -0.6580705, -0.6580705],
         [-0.6580705, -0.6580705, -0.6580705, ..., -0.6580705,
          -0.6580705, -0.6580705],
         [-0.6580705, -0.6580705, -0.6580705, ..., -0.6580705,
          -0.6580705, -0.6580705],
         ...,
         [-0.6580705, -0.6580705, -0.6580705, ..., -0.6580705,
          -0.6580705, -0.6580705],
         [-0.6580705, -0.6580705, -0.6580705, ..., -0.6580705,
          -0.6580705, -0.6580705],
         [-0.6580705, -0.6580705, -0.6580705, ..., -0.6580705,
          -0.6580705, -0.6580705]],

        ...,

        [[      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [13], 'to': [14]}
tf node:
{'name': 'sin', 'output': array([[[[-0.61159146, -0.61159146, -0.61159146, ..., -0.61159146,
          -0.61159146, -0.61159146],
         [-0.61159146, -0.61159146, -0.61159146, ..., -0.61159146,
          -0.61159146, -0.61159146],
         [-0.61159146, -0.61159146, -0.61159146, ..., -0.61159146,
          -0.61159146, -0.61159146],
         ...,
         [-0.61159146, -0.61159146, -0.61159146, ..., -0.61159146,
          -0.61159146, -0.61159146],
         [-0.61159146, -0.61159146, -0.61159146, ..., -0.61159146,
          -0.61159146, -0.61159146],
         [-0.61159146, -0.61159146, -0.61159146, ..., -0.61159146,
          -0.61159146, -0.61159146]],

        [[-0.61159146, -0.61159146, -0.61159146, ..., -0.61159146,
          -0.61159146, -0.61159146],
         [-0.61159146, -0.61159146, -0.61159146, ..., -0.61159146,
          -0.61159146, -0.61159146],
         [-0.61159146, -0.61159146, -0.61159146, ..., -0.61159146,
          -0.61159146, -0.61159146],
         ...,
         [-0.61159146, -0.61159146, -0.61159146, ..., -0.61159146,
          -0.61159146, -0.61159146],
         [-0.61159146, -0.61159146, -0.61159146, ..., -0.61159146,
          -0.61159146, -0.61159146],
         [-0.61159146, -0.61159146, -0.61159146, ..., -0.61159146,
          -0.61159146, -0.61159146]],

        [[-0.61159146, -0.61159146, -0.61159146, ..., -0.61159146,
          -0.61159146, -0.61159146],
         [-0.61159146, -0.61159146, -0.61159146, ..., -0.61159146,
          -0.61159146, -0.61159146],
         [-0.61159146, -0.61159146, -0.61159146, ..., -0.61159146,
          -0.61159146, -0.61159146],
         ...,
         [-0.61159146, -0.61159146, -0.61159146, ..., -0.61159146,
          -0.61159146, -0.61159146],
         [-0.61159146, -0.61159146, -0.61159146, ..., -0.61159146,
          -0.61159146, -0.61159146],
         [-0.61159146, -0.61159146, -0.61159146, ..., -0.61159146,
          -0.61159146, -0.61159146]],

        ...,

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [20], 'to': [6]}
ms node:
{'name': 'sin', 'output': array([[[[-0.6115887, -0.6115887, -0.6115887, ..., -0.6115887,
          -0.6115887, -0.6115887],
         [-0.6115887, -0.6115887, -0.6115887, ..., -0.6115887,
          -0.6115887, -0.6115887],
         [-0.6115887, -0.6115887, -0.6115887, ..., -0.6115887,
          -0.6115887, -0.6115887],
         ...,
         [-0.6115887, -0.6115887, -0.6115887, ..., -0.6115887,
          -0.6115887, -0.6115887],
         [-0.6115887, -0.6115887, -0.6115887, ..., -0.6115887,
          -0.6115887, -0.6115887],
         [-0.6115887, -0.6115887, -0.6115887, ..., -0.6115887,
          -0.6115887, -0.6115887]],

        [[-0.6115887, -0.6115887, -0.6115887, ..., -0.6115887,
          -0.6115887, -0.6115887],
         [-0.6115887, -0.6115887, -0.6115887, ..., -0.6115887,
          -0.6115887, -0.6115887],
         [-0.6115887, -0.6115887, -0.6115887, ..., -0.6115887,
          -0.6115887, -0.6115887],
         ...,
         [-0.6115887, -0.6115887, -0.6115887, ..., -0.6115887,
          -0.6115887, -0.6115887],
         [-0.6115887, -0.6115887, -0.6115887, ..., -0.6115887,
          -0.6115887, -0.6115887],
         [-0.6115887, -0.6115887, -0.6115887, ..., -0.6115887,
          -0.6115887, -0.6115887]],

        [[-0.6115887, -0.6115887, -0.6115887, ..., -0.6115887,
          -0.6115887, -0.6115887],
         [-0.6115887, -0.6115887, -0.6115887, ..., -0.6115887,
          -0.6115887, -0.6115887],
         [-0.6115887, -0.6115887, -0.6115887, ..., -0.6115887,
          -0.6115887, -0.6115887],
         ...,
         [-0.6115887, -0.6115887, -0.6115887, ..., -0.6115887,
          -0.6115887, -0.6115887],
         [-0.6115887, -0.6115887, -0.6115887, ..., -0.6115887,
          -0.6115887, -0.6115887],
         [-0.6115887, -0.6115887, -0.6115887, ..., -0.6115887,
          -0.6115887, -0.6115887]],

        ...,

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]]]], dtype=float32), 'output_shape': (1, 128, 14, 14), 'from': [20], 'to': [6]}
torch node:
{'name': 'sin', 'output': array([[[[-0.6115914, -0.6115914, -0.6115914, ..., -0.6115914,
          -0.6115914, -0.6115914],
         [-0.6115914, -0.6115914, -0.6115914, ..., -0.6115914,
          -0.6115914, -0.6115914],
         [-0.6115914, -0.6115914, -0.6115914, ..., -0.6115914,
          -0.6115914, -0.6115914],
         ...,
         [-0.6115914, -0.6115914, -0.6115914, ..., -0.6115914,
          -0.6115914, -0.6115914],
         [-0.6115914, -0.6115914, -0.6115914, ..., -0.6115914,
          -0.6115914, -0.6115914],
         [-0.6115914, -0.6115914, -0.6115914, ..., -0.6115914,
          -0.6115914, -0.6115914]],

        [[-0.6115914, -0.6115914, -0.6115914, ..., -0.6115914,
          -0.6115914, -0.6115914],
         [-0.6115914, -0.6115914, -0.6115914, ..., -0.6115914,
          -0.6115914, -0.6115914],
         [-0.6115914, -0.6115914, -0.6115914, ..., -0.6115914,
          -0.6115914, -0.6115914],
         ...,
         [-0.6115914, -0.6115914, -0.6115914, ..., -0.6115914,
          -0.6115914, -0.6115914],
         [-0.6115914, -0.6115914, -0.6115914, ..., -0.6115914,
          -0.6115914, -0.6115914],
         [-0.6115914, -0.6115914, -0.6115914, ..., -0.6115914,
          -0.6115914, -0.6115914]],

        [[-0.6115914, -0.6115914, -0.6115914, ..., -0.6115914,
          -0.6115914, -0.6115914],
         [-0.6115914, -0.6115914, -0.6115914, ..., -0.6115914,
          -0.6115914, -0.6115914],
         [-0.6115914, -0.6115914, -0.6115914, ..., -0.6115914,
          -0.6115914, -0.6115914],
         ...,
         [-0.6115914, -0.6115914, -0.6115914, ..., -0.6115914,
          -0.6115914, -0.6115914],
         [-0.6115914, -0.6115914, -0.6115914, ..., -0.6115914,
          -0.6115914, -0.6115914],
         [-0.6115914, -0.6115914, -0.6115914, ..., -0.6115914,
          -0.6115914, -0.6115914]],

        ...,

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 14, 14]), 'from': [20], 'to': [6]}

generate models:425

analyse output arrays in iter:449

pre layer res:
12:log
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [11], 'to': [13]}
tf node:
{'name': 'log', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [12], 'to': [1, 22]}
ms node:
{'name': 'log', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [12], 'to': [1, 22]}
torch node:
{'name': 'log', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [12], 'to': [1, 22]}

generate models:432

analyse output arrays in iter:451

pre layer res:
18:add
{'name': 'add', 'output': array([[[[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]],

        [[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]],

        [[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [6.71431351e+01, 7.72904587e+01, 7.72904587e+01, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]],

        ...,

        [[          -inf,           -inf,           -inf, ...,
          6.61271362e+01, 1.46955826e+02,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf, 1.32644936e+08, ...,
          7.52626801e+01, 7.62766647e+01, 7.52626801e+01],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]],

        [[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]],

        [[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [13, 23], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [18], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [18], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [18], 'to': []}

generate models:434

analyse output arrays in iter:452

pre layer res:
7:conv2d
{'name': 'conv2d', 'output': array([[[[ 524387.75,  524387.75,  524387.75, ..., 1474659.9 ,
          1351779.9 , 1433699.9 ],
         [1560675.9 , 1556579.9 , 1603683.9 , ...,  524387.75,
           524387.75,  524387.75],
         [ 524387.75,  524387.75,  524387.75, ...,  692323.8 ,
           733283.8 ,  565347.75],
         ...,
         [1339491.9 , 1251427.9 , 1253475.9 , ...,  524387.75,
           524387.75,  524387.75],
         [ 524387.75,  524387.75,  524387.75, ..., 1747043.9 ,
          1874020.  , 1869924.  ],
         [1917028.  , 2076772.  , 1876068.  , ...,  524387.75,
           524387.75,  524387.75]],

        [[ 524387.75,  524387.75,  524387.75, ..., 1474659.9 ,
          1351779.9 , 1433699.9 ],
         [1560675.9 , 1556579.9 , 1603683.9 , ...,  524387.75,
           524387.75,  524387.75],
         [ 524387.75,  524387.75,  524387.75, ...,  692323.8 ,
           733283.8 ,  565347.75],
         ...,
         [1339491.9 , 1251427.9 , 1253475.9 , ...,  524387.75,
           524387.75,  524387.75],
         [ 524387.75,  524387.75,  524387.75, ..., 1747043.9 ,
          1874020.  , 1869924.  ],
         [1917028.  , 2076772.  , 1876068.  , ...,  524387.75,
           524387.75,  524387.75]],

        [[ 524387.75,  524387.75,  524387.75, ..., 1474659.9 ,
          1351779.9 , 1433699.9 ],
         [1560675.9 , 1556579.9 , 1603683.9 , ...,  524387.75,
           524387.75,  524387.75],
         [ 524387.75,  524387.75,  524387.75, ...,  692323.8 ,
           733283.8 ,  565347.75],
         ...,
         [1339491.9 , 1251427.9 , 1253475.9 , ...,  524387.75,
           524387.75,  524387.75],
         [ 524387.75,  524387.75,  524387.75, ..., 1747043.9 ,
          1874020.  , 1869924.  ],
         [1917028.  , 2076772.  , 1876068.  , ...,  524387.75,
           524387.75,  524387.75]],

        ...,

        [[ 524387.75,  524387.75,  524387.75, ..., 1474659.9 ,
          1351779.9 , 1433699.9 ],
         [1560675.9 , 1556579.9 , 1603683.9 , ...,  524387.75,
           524387.75,  524387.75],
         [ 524387.75,  524387.75,  524387.75, ...,  692323.8 ,
           733283.8 ,  565347.75],
         ...,
         [1339491.9 , 1251427.9 , 1253475.9 , ...,  524387.75,
           524387.75,  524387.75],
         [ 524387.75,  524387.75,  524387.75, ..., 1747043.9 ,
          1874020.  , 1869924.  ],
         [1917028.  , 2076772.  , 1876068.  , ...,  524387.75,
           524387.75,  524387.75]],

        [[ 524387.75,  524387.75,  524387.75, ..., 1474659.9 ,
          1351779.9 , 1433699.9 ],
         [1560675.9 , 1556579.9 , 1603683.9 , ...,  524387.75,
           524387.75,  524387.75],
         [ 524387.75,  524387.75,  524387.75, ...,  692323.8 ,
           733283.8 ,  565347.75],
         ...,
         [1339491.9 , 1251427.9 , 1253475.9 , ...,  524387.75,
           524387.75,  524387.75],
         [ 524387.75,  524387.75,  524387.75, ..., 1747043.9 ,
          1874020.  , 1869924.  ],
         [1917028.  , 2076772.  , 1876068.  , ...,  524387.75,
           524387.75,  524387.75]],

        [[ 524387.75,  524387.75,  524387.75, ..., 1474659.9 ,
          1351779.9 , 1433699.9 ],
         [1560675.9 , 1556579.9 , 1603683.9 , ...,  524387.75,
           524387.75,  524387.75],
         [ 524387.75,  524387.75,  524387.75, ...,  692323.8 ,
           733283.8 ,  565347.75],
         ...,
         [1339491.9 , 1251427.9 , 1253475.9 , ...,  524387.75,
           524387.75,  524387.75],
         [ 524387.75,  524387.75,  524387.75, ..., 1747043.9 ,
          1874020.  , 1869924.  ],
         [1917028.  , 2076772.  , 1876068.  , ...,  524387.75,
           524387.75,  524387.75]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [12], 'to': [21]}
tf node:
{'name': 'cos', 'output': array([[[[ 0.8181835 ,  0.8181835 ,  0.8181835 , ..., -0.839191  ,
          -0.9492512 , -0.88233995],
         [-0.18781653, -0.73506254,  0.21284816, ...,  0.8181835 ,
           0.8181835 ,  0.8181835 ],
         [ 0.8181835 ,  0.8181835 ,  0.8181835 , ...,  0.04384007,
          -0.04115175,  0.76640576],
         ...,
         [ 0.01971336,  0.9107019 ,  0.73561215, ...,  0.8181835 ,
           0.8181835 ,  0.8181835 ],
         [ 0.8181835 ,  0.8181835 ,  0.8181835 , ..., -0.4899656 ,
          -0.9577065 , -0.59888077],
         [-0.99378425, -0.9829002 , -0.9996479 , ...,  0.8181835 ,
           0.8181835 ,  0.8181835 ]],

        [[ 0.8181835 ,  0.8181835 ,  0.8181835 , ..., -0.839191  ,
          -0.9492512 , -0.88233995],
         [-0.18781653, -0.73506254,  0.21284816, ...,  0.8181835 ,
           0.8181835 ,  0.8181835 ],
         [ 0.8181835 ,  0.8181835 ,  0.8181835 , ...,  0.04384007,
          -0.04115175,  0.76640576],
         ...,
         [ 0.01971336,  0.9107019 ,  0.73561215, ...,  0.8181835 ,
           0.8181835 ,  0.8181835 ],
         [ 0.8181835 ,  0.8181835 ,  0.8181835 , ..., -0.4899656 ,
          -0.9577065 , -0.59888077],
         [-0.99378425, -0.9829002 , -0.9996479 , ...,  0.8181835 ,
           0.8181835 ,  0.8181835 ]],

        [[ 0.8181835 ,  0.8181835 ,  0.8181835 , ..., -0.839191  ,
          -0.9492512 , -0.88233995],
         [-0.18781653, -0.73506254,  0.21284816, ...,  0.8181835 ,
           0.8181835 ,  0.8181835 ],
         [ 0.8181835 ,  0.8181835 ,  0.8181835 , ...,  0.04384007,
          -0.04115175,  0.76640576],
         ...,
         [ 0.01971336,  0.9107019 ,  0.73561215, ...,  0.8181835 ,
           0.8181835 ,  0.8181835 ],
         [ 0.8181835 ,  0.8181835 ,  0.8181835 , ..., -0.4899656 ,
          -0.9577065 , -0.59888077],
         [-0.99378425, -0.9829002 , -0.9996479 , ...,  0.8181835 ,
           0.8181835 ,  0.8181835 ]],

        ...,

        [[ 0.8181835 ,  0.8181835 ,  0.8181835 , ..., -0.839191  ,
          -0.9492512 , -0.88233995],
         [-0.18781653, -0.73506254,  0.21284816, ...,  0.8181835 ,
           0.8181835 ,  0.8181835 ],
         [ 0.8181835 ,  0.8181835 ,  0.8181835 , ...,  0.04384007,
          -0.04115175,  0.76640576],
         ...,
         [ 0.01971336,  0.9107019 ,  0.73561215, ...,  0.8181835 ,
           0.8181835 ,  0.8181835 ],
         [ 0.8181835 ,  0.8181835 ,  0.8181835 , ..., -0.4899656 ,
          -0.9577065 , -0.59888077],
         [-0.99378425, -0.9829002 , -0.9996479 , ...,  0.8181835 ,
           0.8181835 ,  0.8181835 ]],

        [[ 0.8181835 ,  0.8181835 ,  0.8181835 , ..., -0.839191  ,
          -0.9492512 , -0.88233995],
         [-0.18781653, -0.73506254,  0.21284816, ...,  0.8181835 ,
           0.8181835 ,  0.8181835 ],
         [ 0.8181835 ,  0.8181835 ,  0.8181835 , ...,  0.04384007,
          -0.04115175,  0.76640576],
         ...,
         [ 0.01971336,  0.9107019 ,  0.73561215, ...,  0.8181835 ,
           0.8181835 ,  0.8181835 ],
         [ 0.8181835 ,  0.8181835 ,  0.8181835 , ..., -0.4899656 ,
          -0.9577065 , -0.59888077],
         [-0.99378425, -0.9829002 , -0.9996479 , ...,  0.8181835 ,
           0.8181835 ,  0.8181835 ]],

        [[ 0.8181835 ,  0.8181835 ,  0.8181835 , ..., -0.839191  ,
          -0.9492512 , -0.88233995],
         [-0.18781653, -0.73506254,  0.21284816, ...,  0.8181835 ,
           0.8181835 ,  0.8181835 ],
         [ 0.8181835 ,  0.8181835 ,  0.8181835 , ...,  0.04384007,
          -0.04115175,  0.76640576],
         ...,
         [ 0.01971336,  0.9107019 ,  0.73561215, ...,  0.8181835 ,
           0.8181835 ,  0.8181835 ],
         [ 0.8181835 ,  0.8181835 ,  0.8181835 , ..., -0.4899656 ,
          -0.9577065 , -0.59888077],
         [-0.99378425, -0.9829002 , -0.9996479 , ...,  0.8181835 ,
           0.8181835 ,  0.8181835 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [7], 'to': [8]}
ms node:
{'name': 'cos', 'output': array([[[[ 0.8181834 ,  0.8181834 ,  0.8181834 , ..., -0.839191  ,
          -0.9492512 , -0.88233995],
         [-0.18781653, -0.73506254,  0.21284817, ...,  0.8181834 ,
           0.8181834 ,  0.8181834 ],
         [ 0.8181834 ,  0.8181834 ,  0.8181834 , ...,  0.04384007,
          -0.04115175,  0.76640576],
         ...,
         [ 0.01971336,  0.9107019 ,  0.73561215, ...,  0.8181834 ,
           0.8181834 ,  0.8181834 ],
         [ 0.8181834 ,  0.8181834 ,  0.8181834 , ..., -0.4899656 ,
          -0.9577065 , -0.59888077],
         [-0.99378425, -0.9829002 , -0.9996479 , ...,  0.65050143,
           0.65050143,  0.65050143]],

        [[ 0.8181834 ,  0.8181834 ,  0.8181834 , ..., -0.839191  ,
          -0.9492512 , -0.88233995],
         [-0.18781653, -0.73506254,  0.21284817, ...,  0.8181834 ,
           0.8181834 ,  0.8181834 ],
         [ 0.8181834 ,  0.8181834 ,  0.8181834 , ...,  0.04384007,
          -0.04115175,  0.76640576],
         ...,
         [ 0.01971336,  0.9107019 ,  0.73561215, ...,  0.8181834 ,
           0.8181834 ,  0.8181834 ],
         [ 0.8181834 ,  0.8181834 ,  0.8181834 , ..., -0.4899656 ,
          -0.9577065 , -0.59888077],
         [-0.99378425, -0.9829002 , -0.9996479 , ...,  0.65050143,
           0.65050143,  0.65050143]],

        [[ 0.8181834 ,  0.8181834 ,  0.8181834 , ..., -0.839191  ,
          -0.9492512 , -0.88233995],
         [-0.18781653, -0.73506254,  0.21284817, ...,  0.8181834 ,
           0.8181834 ,  0.8181834 ],
         [ 0.8181834 ,  0.8181834 ,  0.8181834 , ...,  0.04384007,
          -0.04115175,  0.76640576],
         ...,
         [ 0.01971336,  0.9107019 ,  0.73561215, ...,  0.8181834 ,
           0.8181834 ,  0.8181834 ],
         [ 0.8181834 ,  0.8181834 ,  0.8181834 , ..., -0.4899656 ,
          -0.9577065 , -0.59888077],
         [-0.99378425, -0.9829002 , -0.9996479 , ...,  0.65050143,
           0.65050143,  0.65050143]],

        ...,

        [[ 0.8181834 ,  0.8181834 ,  0.8181834 , ..., -0.839191  ,
          -0.9492512 , -0.88233995],
         [-0.18781653, -0.73506254,  0.21284817, ...,  0.8181834 ,
           0.8181834 ,  0.8181834 ],
         [ 0.8181834 ,  0.8181834 ,  0.8181834 , ...,  0.04384007,
          -0.04115175,  0.76640576],
         ...,
         [ 0.01971336,  0.9107019 ,  0.73561215, ...,  0.8181834 ,
           0.8181834 ,  0.8181834 ],
         [ 0.8181834 ,  0.8181834 ,  0.8181834 , ..., -0.4899656 ,
          -0.9577065 , -0.59888077],
         [-0.99378425, -0.9829002 , -0.9996479 , ...,  0.65050143,
           0.65050143,  0.65050143]],

        [[ 0.65050143,  0.65050143,  0.65050143, ..., -0.76484066,
          -0.90263224, -0.8167822 ],
         [-0.06389508, -0.644798  ,  0.3330053 , ...,  0.65050143,
           0.65050143,  0.65050143],
         [ 0.65050143,  0.65050143,  0.65050143, ..., -0.14315237,
          -0.2266759 ,  0.6332358 ],
         ...,
         [-0.10509096,  0.8520976 ,  0.64541763, ...,  0.65050143,
           0.65050143,  0.65050143],
         [ 0.65050143,  0.65050143,  0.65050143, ..., -0.5948269 ,
          -0.98610896, -0.6940524 ],
         [-0.9721512 , -0.9981888 , -0.98854023, ...,  0.65050143,
           0.65050143,  0.65050143]],

        [[ 0.65050143,  0.65050143,  0.65050143, ..., -0.76484066,
          -0.90263224, -0.8167822 ],
         [-0.06389508, -0.644798  ,  0.3330053 , ...,  0.65050143,
           0.65050143,  0.65050143],
         [ 0.65050143,  0.65050143,  0.65050143, ..., -0.14315237,
          -0.2266759 ,  0.6332358 ],
         ...,
         [-0.10509096,  0.8520976 ,  0.64541763, ...,  0.65050143,
           0.65050143,  0.65050143],
         [ 0.65050143,  0.65050143,  0.65050143, ..., -0.5948269 ,
          -0.98610896, -0.6940524 ],
         [-0.9721512 , -0.9981888 , -0.98854023, ...,  0.65050143,
           0.65050143,  0.65050143]]]], dtype=float32), 'output_shape': (1, 128, 14, 14), 'from': [7], 'to': [8]}
torch node:
{'name': 'cos', 'output': array([[[[ 0.8181834 ,  0.8181834 ,  0.8181834 , ..., -0.839191  ,
          -0.9492512 , -0.88233995],
         [-0.18781653, -0.73506254,  0.21284817, ...,  0.8181834 ,
           0.8181834 ,  0.8181834 ],
         [ 0.8181834 ,  0.8181834 ,  0.8181834 , ...,  0.04384007,
          -0.04115175,  0.76640576],
         ...,
         [ 0.01971336,  0.9107019 ,  0.73561215, ...,  0.8181834 ,
           0.8181834 ,  0.8181834 ],
         [ 0.8181834 ,  0.8181834 ,  0.8181834 , ..., -0.4899656 ,
          -0.9577065 , -0.59888077],
         [-0.99378425, -0.9829002 , -0.9996479 , ...,  0.8181834 ,
           0.8181834 ,  0.8181834 ]],

        [[ 0.8181834 ,  0.8181834 ,  0.8181834 , ..., -0.839191  ,
          -0.9492512 , -0.88233995],
         [-0.18781653, -0.73506254,  0.21284817, ...,  0.8181834 ,
           0.8181834 ,  0.8181834 ],
         [ 0.8181834 ,  0.8181834 ,  0.8181834 , ...,  0.04384007,
          -0.04115175,  0.76640576],
         ...,
         [ 0.01971336,  0.9107019 ,  0.73561215, ...,  0.8181834 ,
           0.8181834 ,  0.8181834 ],
         [ 0.8181834 ,  0.8181834 ,  0.8181834 , ..., -0.4899656 ,
          -0.9577065 , -0.59888077],
         [-0.99378425, -0.9829002 , -0.9996479 , ...,  0.8181834 ,
           0.8181834 ,  0.8181834 ]],

        [[ 0.8181834 ,  0.8181834 ,  0.8181834 , ..., -0.839191  ,
          -0.9492512 , -0.88233995],
         [-0.18781653, -0.73506254,  0.21284817, ...,  0.8181834 ,
           0.8181834 ,  0.8181834 ],
         [ 0.8181834 ,  0.8181834 ,  0.8181834 , ...,  0.04384007,
          -0.04115175,  0.76640576],
         ...,
         [ 0.01971336,  0.9107019 ,  0.73561215, ...,  0.8181834 ,
           0.8181834 ,  0.8181834 ],
         [ 0.8181834 ,  0.8181834 ,  0.8181834 , ..., -0.4899656 ,
          -0.9577065 , -0.59888077],
         [-0.99378425, -0.9829002 , -0.9996479 , ...,  0.8181834 ,
           0.8181834 ,  0.8181834 ]],

        ...,

        [[ 0.8181834 ,  0.8181834 ,  0.8181834 , ..., -0.839191  ,
          -0.9492512 , -0.88233995],
         [-0.18781653, -0.73506254,  0.21284817, ...,  0.8181834 ,
           0.8181834 ,  0.8181834 ],
         [ 0.8181834 ,  0.8181834 ,  0.8181834 , ...,  0.04384007,
          -0.04115175,  0.76640576],
         ...,
         [ 0.01971336,  0.9107019 ,  0.73561215, ...,  0.8181834 ,
           0.8181834 ,  0.8181834 ],
         [ 0.8181834 ,  0.8181834 ,  0.8181834 , ..., -0.4899656 ,
          -0.9577065 , -0.59888077],
         [-0.99378425, -0.9829002 , -0.9996479 , ...,  0.8181834 ,
           0.8181834 ,  0.8181834 ]],

        [[ 0.8181834 ,  0.8181834 ,  0.8181834 , ..., -0.839191  ,
          -0.9492512 , -0.88233995],
         [-0.18781653, -0.73506254,  0.21284817, ...,  0.8181834 ,
           0.8181834 ,  0.8181834 ],
         [ 0.8181834 ,  0.8181834 ,  0.8181834 , ...,  0.04384007,
          -0.04115175,  0.76640576],
         ...,
         [ 0.01971336,  0.9107019 ,  0.73561215, ...,  0.8181834 ,
           0.8181834 ,  0.8181834 ],
         [ 0.8181834 ,  0.8181834 ,  0.8181834 , ..., -0.4899656 ,
          -0.9577065 , -0.59888077],
         [-0.99378425, -0.9829002 , -0.9996479 , ...,  0.8181834 ,
           0.8181834 ,  0.8181834 ]],

        [[ 0.8181834 ,  0.8181834 ,  0.8181834 , ..., -0.839191  ,
          -0.9492512 , -0.88233995],
         [-0.18781653, -0.73506254,  0.21284817, ...,  0.8181834 ,
           0.8181834 ,  0.8181834 ],
         [ 0.8181834 ,  0.8181834 ,  0.8181834 , ...,  0.04384007,
          -0.04115175,  0.76640576],
         ...,
         [ 0.01971336,  0.9107019 ,  0.73561215, ...,  0.8181834 ,
           0.8181834 ,  0.8181834 ],
         [ 0.8181834 ,  0.8181834 ,  0.8181834 , ..., -0.4899656 ,
          -0.9577065 , -0.59888077],
         [-0.99378425, -0.9829002 , -0.9996479 , ...,  0.8181834 ,
           0.8181834 ,  0.8181834 ]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 14, 14]), 'from': [7], 'to': [8]}

generate models:435

analyse output arrays in iter:468

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[ 2.,  2., inf, ...,  2.,  2.,  2.],
         [ 2.,  2., inf, ..., inf,  2.,  2.],
         [ 2.,  2., inf, ...,  2.,  2.,  2.],
         ...,
         [ 2.,  2., inf, ..., inf, inf, inf],
         [ 2.,  2., inf, ..., inf, inf,  2.],
         [ 2.,  2.,  2., ...,  2.,  2.,  2.]],

        [[ 2.,  2., inf, ...,  2.,  2.,  2.],
         [ 2.,  2., inf, ..., inf,  2.,  2.],
         [ 2.,  2., inf, ...,  2.,  2.,  2.],
         ...,
         [ 2.,  2., inf, ..., inf, inf, inf],
         [ 2.,  2., inf, ..., inf, inf,  2.],
         [ 2.,  2.,  2., ...,  2.,  2.,  2.]],

        [[ 2.,  2., inf, ...,  2.,  2.,  2.],
         [ 2.,  2., inf, ..., inf,  2.,  2.],
         [ 2.,  2., inf, ...,  2.,  2.,  2.],
         ...,
         [ 2.,  2., inf, ..., inf, inf, inf],
         [ 2.,  2., inf, ..., inf, inf,  2.],
         [ 2.,  2.,  2., ...,  2.,  2.,  2.]],

        ...,

        [[ 2.,  2., inf, ...,  2.,  2.,  2.],
         [ 2.,  2., inf, ..., inf,  2.,  2.],
         [ 2.,  2., inf, ...,  2.,  2.,  2.],
         ...,
         [ 2.,  2., inf, ..., inf, inf, inf],
         [ 2.,  2., inf, ..., inf, inf,  2.],
         [ 2.,  2.,  2., ...,  2.,  2.,  2.]],

        [[ 2.,  2., inf, ...,  2.,  2.,  2.],
         [ 2.,  2., inf, ..., inf,  2.,  2.],
         [ 2.,  2., inf, ...,  2.,  2.,  2.],
         ...,
         [ 2.,  2., inf, ..., inf, inf, inf],
         [ 2.,  2., inf, ..., inf, inf,  2.],
         [ 2.,  2.,  2., ...,  2.,  2.,  2.]],

        [[ 2.,  2., inf, ...,  2.,  2.,  2.],
         [ 2.,  2., inf, ..., inf,  2.,  2.],
         [ 2.,  2., inf, ...,  2.,  2.,  2.],
         ...,
         [ 2.,  2., inf, ..., inf, inf, inf],
         [ 2.,  2., inf, ..., inf, inf,  2.],
         [ 2.,  2.,  2., ...,  2.,  2.,  2.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [11], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[1024.,   nan,   nan, ...,   nan,   nan, 1024.],
         [1536.,   nan,   nan, ...,   nan,   nan, 1536.],
         [1536.,   nan,   nan, ...,   nan,   nan,   nan],
         ...,
         [1536.,   nan,   nan, ...,   nan,   nan,   nan],
         [1536.,   nan,   nan, ...,   nan,   nan,   nan],
         [1024.,   inf,   nan, ...,   nan,   nan,   inf]],

        [[1024.,   nan,   nan, ...,   nan,   nan, 1024.],
         [1536.,   nan,   nan, ...,   nan,   nan, 1536.],
         [1536.,   nan,   nan, ...,   nan,   nan,   nan],
         ...,
         [1536.,   nan,   nan, ...,   nan,   nan,   nan],
         [1536.,   nan,   nan, ...,   nan,   nan,   nan],
         [1024.,   inf,   nan, ...,   nan,   nan,   inf]],

        [[1024.,   nan,   nan, ...,   nan,   nan, 1024.],
         [1536.,   nan,   nan, ...,   nan,   nan, 1536.],
         [1536.,   nan,   nan, ...,   nan,   nan,   nan],
         ...,
         [1536.,   nan,   nan, ...,   nan,   nan,   nan],
         [1536.,   nan,   nan, ...,   nan,   nan,   nan],
         [1024.,   inf,   nan, ...,   nan,   nan,   inf]],

        ...,

        [[1024.,   nan,   nan, ...,   nan,   nan, 1024.],
         [1536.,   nan,   nan, ...,   nan,   nan, 1536.],
         [1536.,   nan,   nan, ...,   nan,   nan,   nan],
         ...,
         [1536.,   nan,   nan, ...,   nan,   nan,   nan],
         [1536.,   nan,   nan, ...,   nan,   nan,   nan],
         [1024.,   inf,   nan, ...,   nan,   nan,   inf]],

        [[1024.,   nan,   nan, ...,   nan,   nan, 1024.],
         [1536.,   nan,   nan, ...,   nan,   nan, 1536.],
         [1536.,   nan,   nan, ...,   nan,   nan,   nan],
         ...,
         [1536.,   nan,   nan, ...,   nan,   nan,   nan],
         [1536.,   nan,   nan, ...,   nan,   nan,   nan],
         [1024.,   inf,   nan, ...,   nan,   nan,   inf]],

        [[1024.,   nan,   nan, ...,   nan,   nan, 1024.],
         [1536.,   nan,   nan, ...,   nan,   nan, 1536.],
         [1536.,   nan,   nan, ...,   nan,   nan,   nan],
         ...,
         [1536.,   nan,   nan, ...,   nan,   nan,   nan],
         [1536.,   nan,   nan, ...,   nan,   nan,   nan],
         [1024.,   inf,   nan, ...,   nan,   nan,   inf]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[1024.,   inf,   inf, ...,   inf,   inf, 1024.],
         [1536.,   inf,   inf, ...,   inf,   inf, 1536.],
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         ...,
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         [1024.,   inf,   inf, ...,   inf,   inf,   inf]],

        [[1024.,   inf,   inf, ...,   inf,   inf, 1024.],
         [1536.,   inf,   inf, ...,   inf,   inf, 1536.],
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         ...,
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         [1024.,   inf,   inf, ...,   inf,   inf,   inf]],

        [[1024.,   inf,   inf, ...,   inf,   inf, 1024.],
         [1536.,   inf,   inf, ...,   inf,   inf, 1536.],
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         ...,
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         [1024.,   inf,   inf, ...,   inf,   inf,   inf]],

        ...,

        [[1024.,   inf,   inf, ...,   inf,   inf, 1024.],
         [1536.,   inf,   inf, ...,   inf,   inf, 1536.],
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         ...,
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         [1024.,   inf,   inf, ...,   inf,   inf,   inf]],

        [[1024.,   inf,   inf, ...,   inf,   inf, 1024.],
         [1536.,   inf,   inf, ...,   inf,   inf, 1536.],
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         ...,
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         [1024.,   inf,   inf, ...,   inf,   inf,   inf]],

        [[1024.,   inf,   inf, ...,   inf,   inf, 1024.],
         [1536.,   inf,   inf, ...,   inf,   inf, 1536.],
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         ...,
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         [1024.,   inf,   inf, ...,   inf,   inf,   inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[1024.,   inf,   inf, ...,   inf,   inf, 1024.],
         [1536.,   inf,   inf, ...,   inf,   inf, 1536.],
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         ...,
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         [1024.,   inf,   inf, ...,   inf,   inf,   inf]],

        [[1024.,   inf,   inf, ...,   inf,   inf, 1024.],
         [1536.,   inf,   inf, ...,   inf,   inf, 1536.],
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         ...,
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         [1024.,   inf,   inf, ...,   inf,   inf,   inf]],

        [[1024.,   inf,   inf, ...,   inf,   inf, 1024.],
         [1536.,   inf,   inf, ...,   inf,   inf, 1536.],
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         ...,
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         [1024.,   inf,   inf, ...,   inf,   inf,   inf]],

        ...,

        [[1024.,   inf,   inf, ...,   inf,   inf, 1024.],
         [1536.,   inf,   inf, ...,   inf,   inf, 1536.],
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         ...,
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         [1024.,   inf,   inf, ...,   inf,   inf,   inf]],

        [[1024.,   inf,   inf, ...,   inf,   inf, 1024.],
         [1536.,   inf,   inf, ...,   inf,   inf, 1536.],
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         ...,
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         [1024.,   inf,   inf, ...,   inf,   inf,   inf]],

        [[1024.,   inf,   inf, ...,   inf,   inf, 1024.],
         [1536.,   inf,   inf, ...,   inf,   inf, 1536.],
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         ...,
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         [1536.,   inf,   inf, ...,   inf,   inf,   inf],
         [1024.,   inf,   inf, ...,   inf,   inf,   inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [9], 'to': []}

pre layer res:
0:conv2d
{'name': 'conv2d', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [], 'to': [18]}
tf node:
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [0], 'to': [19]}
ms node:
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [0], 'to': [19]}
torch node:
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [0], 'to': [19]}

generate models:450

analyse output arrays in iter:474

pre layer res:
8:relu
{'name': 'relu', 'output': array([[[[  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ],
         [  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ],
         [  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ],
         ...,
         [  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ],
         [  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ],
         [  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ]],

        [[  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ],
         [  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ],
         [  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ],
         ...,
         [  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ],
         [  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ],
         [  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ]],

        [[  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ],
         [  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ],
         [  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ],
         ...,
         [  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ],
         [  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ],
         [  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ]],

        ...,

        [[  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ],
         [  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ],
         [  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ],
         ...,
         [  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ],
         [  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ],
         [  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ]],

        [[  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ],
         [  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ],
         [  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ],
         ...,
         [  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ],
         [  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ],
         [  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ]],

        [[  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ],
         [  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ],
         [  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ],
         ...,
         [  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ],
         [  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ],
         [  0.   ,   0.   ,   0.   , ..., 201.062,   0.   ,   0.   ]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [7], 'to': [14]}
tf node:
{'name': 'sin', 'output': array([[[[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00]],

        ...,

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [8], 'to': [9]}
ms node:
{'name': 'sin', 'output': array([[[[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           6.6630215e-05,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           6.6630215e-05,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           6.6630215e-05,  0.0000000e+00,  0.0000000e+00],
         ...,
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           6.6630215e-05,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           6.6630215e-05,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
          -1.7751040e-04,  0.0000000e+00,  0.0000000e+00]],

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           6.6630215e-05,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           6.6630215e-05,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           6.6630215e-05,  0.0000000e+00,  0.0000000e+00],
         ...,
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           6.6630215e-05,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           6.6630215e-05,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
          -1.7751040e-04,  0.0000000e+00,  0.0000000e+00]],

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           6.6630215e-05,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           6.6630215e-05,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           6.6630215e-05,  0.0000000e+00,  0.0000000e+00],
         ...,
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           6.6630215e-05,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           6.6630215e-05,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
          -1.7751040e-04,  0.0000000e+00,  0.0000000e+00]],

        ...,

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           6.6630215e-05,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           6.6630215e-05,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           6.6630215e-05,  0.0000000e+00,  0.0000000e+00],
         ...,
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           6.6630215e-05,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           6.6630215e-05,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
          -1.7751040e-04,  0.0000000e+00,  0.0000000e+00]],

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
          -1.6225161e-04,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
          -1.6225161e-04,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
          -1.6225161e-04,  0.0000000e+00,  0.0000000e+00],
         ...,
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
          -1.7751040e-04,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
          -1.7751040e-04,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
          -1.7751040e-04,  0.0000000e+00,  0.0000000e+00]],

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
          -1.6225161e-04,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
          -1.6225161e-04,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
          -1.6225161e-04,  0.0000000e+00,  0.0000000e+00],
         ...,
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
          -1.7751040e-04,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
          -1.7751040e-04,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
          -1.7751040e-04,  0.0000000e+00,  0.0000000e+00]]]],
      dtype=float32), 'output_shape': (1, 128, 14, 14), 'from': [8], 'to': [9]}
torch node:
{'name': 'sin', 'output': array([[[[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00]],

        ...,

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          6.6630215e-05, 0.0000000e+00, 0.0000000e+00]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 14, 14]), 'from': [8], 'to': [9]}

generate models:456

analyse output arrays in iter:475

pre layer res:
12:exp
{'name': 'exp', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [5], 'to': [19]}
tf node:
{'name': 'sin', 'output': array([[[[0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         ...,
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471]],

        [[0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         ...,
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471]],

        [[0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         ...,
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471]],

        ...,

        [[0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         ...,
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471]],

        [[0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         ...,
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471]],

        [[0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         ...,
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [12], 'to': [6]}
ms node:
{'name': 'sin', 'output': array([[[[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        ...,

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]]]], dtype=float32), 'output_shape': (1, 128, 14, 14), 'from': [12], 'to': [6]}
torch node:
{'name': 'sin', 'output': array([[[[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        ...,

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 14, 14]), 'from': [12], 'to': [6]}

generate models:457

analyse the exceptions in iter:479
torch exception:
{'id': 33, 'name': 'flatten', 'frame_work': 'torch', 'input_datas': [tensor([2383.5103,    0.0000,    0.0000,  ...,    0.0000,    0.0000,
           0.0000], grad_fn=<ConstantPadNdBackward0>)]}
Dimension out of range (expected to be in range of [-1, 0], but got 1)

generate models:461

analyse output arrays in iter:484

pre layer res:
13:pad
{'name': 'pad', 'output': array([[3.2337976e+09, 3.1042086e+09, 3.1754445e+09, ..., 0.0000000e+00,
        0.0000000e+00, 0.0000000e+00]], dtype=float32), 'output_shape': TensorShape([1, 25088]), 'from': [12], 'to': [27]}
tf node:
{'name': 'sin', 'output': array([[ 0.54463494,  0.34127983, -0.03689388, ...,  0.        ,
         0.        ,  0.        ]], dtype=float32), 'output_shape': TensorShape([1, 25088]), 'from': [13], 'to': [14]}
ms node:
{'name': 'sin', 'output': array([[ 0.544635 ,  0.3412798, -0.9970597, ...,  0.       ,  0.       ,
         0.       ]], dtype=float32), 'output_shape': (1, 25088), 'from': [13], 'to': [14]}
torch node:
{'name': 'sin', 'output': array([[-0.8596805 , -0.9527971 , -0.03689388, ...,  0.        ,
         0.        ,  0.        ]], dtype=float32), 'output_shape': torch.Size([1, 25088]), 'from': [13], 'to': [14]}

generate models:466

analyse output arrays in iter:493

pre layer res:
16:exp
{'name': 'exp', 'output': array([[[[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1., inf, ..., inf, inf,  1.],
         [ 1.,  1.,  1., ..., inf, inf,  1.],
         ...,
         [inf, inf, inf, ..., inf, inf,  1.],
         [inf, inf, inf, ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]],

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1., inf, ..., inf, inf,  1.],
         [ 1.,  1.,  1., ..., inf, inf,  1.],
         ...,
         [inf, inf, inf, ..., inf, inf,  1.],
         [inf, inf, inf, ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]],

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1., inf, ..., inf, inf,  1.],
         [ 1.,  1.,  1., ..., inf, inf,  1.],
         ...,
         [inf, inf, inf, ..., inf, inf,  1.],
         [inf, inf, inf, ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]],

        ...,

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1., inf, ..., inf, inf,  1.],
         [ 1.,  1.,  1., ..., inf, inf,  1.],
         ...,
         [inf, inf, inf, ..., inf, inf,  1.],
         [inf, inf, inf, ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]],

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1., inf, ..., inf, inf,  1.],
         [ 1.,  1.,  1., ..., inf, inf,  1.],
         ...,
         [inf, inf, inf, ..., inf, inf,  1.],
         [inf, inf, inf, ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]],

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1., inf, ..., inf, inf,  1.],
         [ 1.,  1.,  1., ..., inf, inf,  1.],
         ...,
         [inf, inf, inf, ..., inf, inf,  1.],
         [inf, inf, inf, ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [9], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[512.,  nan,  nan, ...,  nan,  nan,  nan],
         [768.,  nan,  nan, ...,  nan,  nan,  nan],
         [768.,  nan,  nan, ...,  nan,  nan,  nan],
         ...,
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  inf, 768., 512.]],

        [[512.,  nan,  nan, ...,  nan,  nan,  nan],
         [768.,  nan,  nan, ...,  nan,  nan,  nan],
         [768.,  nan,  nan, ...,  nan,  nan,  nan],
         ...,
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  inf, 768., 512.]],

        [[512.,  nan,  nan, ...,  nan,  nan,  nan],
         [768.,  nan,  nan, ...,  nan,  nan,  nan],
         [768.,  nan,  nan, ...,  nan,  nan,  nan],
         ...,
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  inf, 768., 512.]],

        ...,

        [[512.,  nan,  nan, ...,  nan,  nan,  nan],
         [768.,  nan,  nan, ...,  nan,  nan,  nan],
         [768.,  nan,  nan, ...,  nan,  nan,  nan],
         ...,
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  inf, 768., 512.]],

        [[512.,  nan,  nan, ...,  nan,  nan,  nan],
         [768.,  nan,  nan, ...,  nan,  nan,  nan],
         [768.,  nan,  nan, ...,  nan,  nan,  nan],
         ...,
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  inf, 768., 512.]],

        [[512.,  nan,  nan, ...,  nan,  nan,  nan],
         [768.,  nan,  nan, ...,  nan,  nan,  nan],
         [768.,  nan,  nan, ...,  nan,  nan,  nan],
         ...,
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  nan,  nan,  nan],
         [ nan,  nan,  nan, ...,  inf, 768., 512.]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [16], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[512.,  inf,  inf, ...,  inf,  inf,  inf],
         [768.,  inf,  inf, ...,  inf,  inf,  inf],
         [768.,  inf,  inf, ...,  inf,  inf,  inf],
         ...,
         [ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [ inf,  inf,  inf, ...,  inf, 768., 512.]],

        [[512.,  inf,  inf, ...,  inf,  inf,  inf],
         [768.,  inf,  inf, ...,  inf,  inf,  inf],
         [768.,  inf,  inf, ...,  inf,  inf,  inf],
         ...,
         [ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [ inf,  inf,  inf, ...,  inf, 768., 512.]],

        [[512.,  inf,  inf, ...,  inf,  inf,  inf],
         [768.,  inf,  inf, ...,  inf,  inf,  inf],
         [768.,  inf,  inf, ...,  inf,  inf,  inf],
         ...,
         [ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [ inf,  inf,  inf, ...,  inf, 768., 512.]],

        ...,

        [[512.,  inf,  inf, ...,  inf,  inf,  inf],
         [768.,  inf,  inf, ...,  inf,  inf,  inf],
         [768.,  inf,  inf, ...,  inf,  inf,  inf],
         ...,
         [ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [ inf,  inf,  inf, ...,  inf, 768., 512.]],

        [[512.,  inf,  inf, ...,  inf,  inf,  inf],
         [768.,  inf,  inf, ...,  inf,  inf,  inf],
         [768.,  inf,  inf, ...,  inf,  inf,  inf],
         ...,
         [ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [ inf,  inf,  inf, ...,  inf, 768., 512.]],

        [[512.,  inf,  inf, ...,  inf,  inf,  inf],
         [768.,  inf,  inf, ...,  inf,  inf,  inf],
         [768.,  inf,  inf, ...,  inf,  inf,  inf],
         ...,
         [ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [ inf,  inf,  inf, ...,  inf, 768., 512.]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [16], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[512.,  inf,  inf, ...,  inf,  inf,  inf],
         [768.,  inf,  inf, ...,  inf,  inf,  inf],
         [768.,  inf,  inf, ...,  inf,  inf,  inf],
         ...,
         [ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [ inf,  inf,  inf, ...,  inf, 768., 512.]],

        [[512.,  inf,  inf, ...,  inf,  inf,  inf],
         [768.,  inf,  inf, ...,  inf,  inf,  inf],
         [768.,  inf,  inf, ...,  inf,  inf,  inf],
         ...,
         [ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [ inf,  inf,  inf, ...,  inf, 768., 512.]],

        [[512.,  inf,  inf, ...,  inf,  inf,  inf],
         [768.,  inf,  inf, ...,  inf,  inf,  inf],
         [768.,  inf,  inf, ...,  inf,  inf,  inf],
         ...,
         [ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [ inf,  inf,  inf, ...,  inf, 768., 512.]],

        ...,

        [[512.,  inf,  inf, ...,  inf,  inf,  inf],
         [768.,  inf,  inf, ...,  inf,  inf,  inf],
         [768.,  inf,  inf, ...,  inf,  inf,  inf],
         ...,
         [ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [ inf,  inf,  inf, ...,  inf, 768., 512.]],

        [[512.,  inf,  inf, ...,  inf,  inf,  inf],
         [768.,  inf,  inf, ...,  inf,  inf,  inf],
         [768.,  inf,  inf, ...,  inf,  inf,  inf],
         ...,
         [ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [ inf,  inf,  inf, ...,  inf, 768., 512.]],

        [[512.,  inf,  inf, ...,  inf,  inf,  inf],
         [768.,  inf,  inf, ...,  inf,  inf,  inf],
         [768.,  inf,  inf, ...,  inf,  inf,  inf],
         ...,
         [ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [ inf,  inf,  inf, ...,  inf,  inf,  inf],
         [ inf,  inf,  inf, ...,  inf, 768., 512.]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [16], 'to': []}

generate models:474

analyse output arrays in iter:495

pre layer res:
16:log
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [9], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [16], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [16], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [16], 'to': []}

generate models:476

final statics:
total operators:28
tensorflow --> nums:56,distinct_bugs:5
mindspore --> nums:34,distinct_bugs:4
torch --> nums:27,distinct_bugs:6
tensorflow --> 
conv2d:36
log:4
sin:10
softmax:3
cos:3
mindspore --> 
log:13
sin:11
softmax:3
cos:7
torch --> 
log:4
sin:10
softmax:3
cos:3
flatten:3
maxpool2d:4

generate models:480
