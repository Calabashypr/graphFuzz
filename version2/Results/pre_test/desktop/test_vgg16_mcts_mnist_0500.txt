
analyse output arrays in iter:5

pre layer res:
12:reshape
{'name': 'reshape', 'output': array([[[[28., 28., 28., ..., 28., 28., 28.],
         [28., 28., 28., ..., 28., 28., 28.],
         [28., 28., 28., ..., 28., 28., 28.],
         ...,
         [28., 28., 28., ..., 28., 28., 28.],
         [28., 28., 28., ..., 28., 28., 28.],
         [28., 28., 28., ..., 28., 28., 28.]],

        [[28., 28., 28., ..., 28., 28., 28.],
         [28., 28., 28., ..., 28., 28., 28.],
         [28., 28., 28., ..., 28., 28., 28.],
         ...,
         [28., 28., 28., ..., 28., 28., 28.],
         [28., 28., 28., ..., 28., 28., 28.],
         [28., 28., 28., ..., 28., 28., 28.]],

        [[28., 28., 28., ..., 28., 28., 28.],
         [28., 28., 28., ..., 28., 28., 28.],
         [28., 28., 28., ..., 28., 28., 28.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        ...,

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [11], 'to': [2]}
tf node:
{'name': 'conv2d', 'output': array([[[[336., 504., 504., ..., 504., 504., 336.],
         [504., 756., 756., ..., 756., 756., 504.],
         [504., 756., 756., ..., 756., 756., 504.],
         ...,
         [336., 504., 504., ..., 504., 504., 336.],
         [336., 504., 504., ..., 504., 504., 336.],
         [224., 336., 336., ..., 336., 336., 224.]],

        [[336., 504., 504., ..., 504., 504., 336.],
         [504., 756., 756., ..., 756., 756., 504.],
         [504., 756., 756., ..., 756., 756., 504.],
         ...,
         [336., 504., 504., ..., 504., 504., 336.],
         [336., 504., 504., ..., 504., 504., 336.],
         [224., 336., 336., ..., 336., 336., 224.]],

        [[336., 504., 504., ..., 504., 504., 336.],
         [504., 756., 756., ..., 756., 756., 504.],
         [504., 756., 756., ..., 756., 756., 504.],
         ...,
         [336., 504., 504., ..., 504., 504., 336.],
         [336., 504., 504., ..., 504., 504., 336.],
         [224., 336., 336., ..., 336., 336., 224.]],

        ...,

        [[336., 504., 504., ..., 504., 504., 336.],
         [504., 756., 756., ..., 756., 756., 504.],
         [504., 756., 756., ..., 756., 756., 504.],
         ...,
         [336., 504., 504., ..., 504., 504., 336.],
         [336., 504., 504., ..., 504., 504., 336.],
         [224., 336., 336., ..., 336., 336., 224.]],

        [[336., 504., 504., ..., 504., 504., 336.],
         [504., 756., 756., ..., 756., 756., 504.],
         [504., 756., 756., ..., 756., 756., 504.],
         ...,
         [336., 504., 504., ..., 504., 504., 336.],
         [336., 504., 504., ..., 504., 504., 336.],
         [224., 336., 336., ..., 336., 336., 224.]],

        [[336., 504., 504., ..., 504., 504., 336.],
         [504., 756., 756., ..., 756., 756., 504.],
         [504., 756., 756., ..., 756., 756., 504.],
         ...,
         [336., 504., 504., ..., 504., 504., 336.],
         [336., 504., 504., ..., 504., 504., 336.],
         [224., 336., 336., ..., 336., 336., 224.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [12], 'to': [7, 7]}
ms node:
{'name': 'conv2d', 'output': array([[[[336., 504., 504., ..., 504., 504., 336.],
         [504., 756., 756., ..., 756., 756., 504.],
         [504., 756., 756., ..., 756., 756., 504.],
         ...,
         [336., 504., 504., ..., 504., 504., 336.],
         [336., 504., 504., ..., 504., 504., 336.],
         [224., 336., 336., ..., 336., 336., 224.]],

        [[336., 504., 504., ..., 504., 504., 336.],
         [504., 756., 756., ..., 756., 756., 504.],
         [504., 756., 756., ..., 756., 756., 504.],
         ...,
         [336., 504., 504., ..., 504., 504., 336.],
         [336., 504., 504., ..., 504., 504., 336.],
         [224., 336., 336., ..., 336., 336., 224.]],

        [[336., 504., 504., ..., 504., 504., 336.],
         [504., 756., 756., ..., 756., 756., 504.],
         [504., 756., 756., ..., 756., 756., 504.],
         ...,
         [336., 504., 504., ..., 504., 504., 336.],
         [336., 504., 504., ..., 504., 504., 336.],
         [224., 336., 336., ..., 336., 336., 224.]],

        ...,

        [[336., 504., 504., ..., 504., 504., 336.],
         [504., 756., 756., ..., 756., 756., 504.],
         [504., 756., 756., ..., 756., 756., 504.],
         ...,
         [336., 504., 504., ..., 504., 504., 336.],
         [336., 504., 504., ..., 504., 504., 336.],
         [224., 336., 336., ..., 336., 336., 224.]],

        [[336., 504., 504., ..., 504., 504., 336.],
         [504., 756., 756., ..., 756., 756., 504.],
         [504., 756., 756., ..., 756., 756., 504.],
         ...,
         [336., 504., 504., ..., 504., 504., 336.],
         [336., 504., 504., ..., 504., 504., 336.],
         [224., 336., 336., ..., 336., 336., 224.]],

        [[336., 504., 504., ..., 504., 504., 336.],
         [504., 756., 756., ..., 756., 756., 504.],
         [504., 756., 756., ..., 756., 756., 504.],
         ...,
         [336., 504., 504., ..., 504., 504., 336.],
         [336., 504., 504., ..., 504., 504., 336.],
         [224., 336., 336., ..., 336., 336., 224.]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [12], 'to': [7, 7]}
torch node:
{'name': 'conv2d', 'output': array([[[[336., 504., 504., ..., 504., 504., 336.],
         [504., 756., 756., ..., 756., 756., 504.],
         [504., 756., 756., ..., 756., 756., 504.],
         ...,
         [336., 504., 504., ..., 504., 504., 336.],
         [336., 504., 504., ..., 504., 504., 336.],
         [224., 336., 336., ..., 336., 336., 224.]],

        [[336., 504., 504., ..., 504., 504., 336.],
         [504., 756., 756., ..., 756., 756., 504.],
         [504., 756., 756., ..., 756., 756., 504.],
         ...,
         [336., 504., 504., ..., 504., 504., 336.],
         [336., 504., 504., ..., 504., 504., 336.],
         [224., 336., 336., ..., 336., 336., 224.]],

        [[336., 504., 504., ..., 504., 504., 336.],
         [504., 756., 756., ..., 756., 756., 504.],
         [504., 756., 756., ..., 756., 756., 504.],
         ...,
         [336., 504., 504., ..., 504., 504., 336.],
         [336., 504., 504., ..., 504., 504., 336.],
         [224., 336., 336., ..., 336., 336., 224.]],

        ...,

        [[336., 504., 504., ..., 504., 504., 336.],
         [504., 756., 756., ..., 756., 756., 504.],
         [504., 756., 756., ..., 756., 756., 504.],
         ...,
         [336., 504., 504., ..., 504., 504., 336.],
         [336., 504., 504., ..., 504., 504., 336.],
         [224., 336., 336., ..., 336., 336., 224.]],

        [[336., 504., 504., ..., 504., 504., 336.],
         [504., 756., 756., ..., 756., 756., 504.],
         [504., 756., 756., ..., 756., 756., 504.],
         ...,
         [336., 504., 504., ..., 504., 504., 336.],
         [336., 504., 504., ..., 504., 504., 336.],
         [224., 336., 336., ..., 336., 336., 224.]],

        [[336., 504., 504., ..., 504., 504., 336.],
         [504., 756., 756., ..., 756., 756., 504.],
         [504., 756., 756., ..., 756., 756., 504.],
         ...,
         [336., 504., 504., ..., 504., 504., 336.],
         [336., 504., 504., ..., 504., 504., 336.],
         [224., 336., 336., ..., 336., 336., 224.]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [12], 'to': [7, 7]}

generate models:6

final statics:
total operators:28
tensorflow --> nums:1,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:1
mindspore --> 
torch --> 

generate models:10

analyse output arrays in iter:10

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [17], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [9], 'to': []}

generate models:11

analyse output arrays in iter:20

pre layer res:
19:slice
{'name': 'slice', 'output': array([[-inf, -inf, -inf, ..., -inf, -inf, -inf]], dtype=float32), 'output_shape': TensorShape([1, 25088]), 'from': [23], 'to': [21]}
tf node:
{'name': 'softmax', 'output': array([[nan, nan, nan, ..., nan, nan, nan]], dtype=float32), 'output_shape': TensorShape([1, 25088]), 'from': [19], 'to': [20]}
ms node:
{'name': 'softmax', 'output': array([[nan, nan, nan, ..., nan, nan, nan]], dtype=float32), 'output_shape': (1, 25088), 'from': [19], 'to': [20]}
torch node:
{'name': 'softmax', 'output': array([[nan, nan, nan, ..., nan, nan, nan]], dtype=float32), 'output_shape': torch.Size([1, 25088]), 'from': [19], 'to': [20]}

generate models:21

analyse output arrays in iter:35

pre layer res:
6:relu
{'name': 'relu', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [5], 'to': [7]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [6], 'to': [8]}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 128, 14, 14), 'from': [6], 'to': [8]}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 14, 14]), 'from': [6], 'to': [8]}

generate models:36

analyse output arrays in iter:41

pre layer res:
11:exp
{'name': 'exp', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [9], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [11], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [11], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [11], 'to': []}

generate models:42

analyse output arrays in iter:45

pre layer res:
24:flatten
{'name': 'flatten', 'output': array([[55218.285,     0.   ,     0.   , ...,     0.   ,     0.   ,
            0.   ]], dtype=float32), 'output_shape': TensorShape([1, 1792]), 'from': [23], 'to': [29]}
tf node:
{'name': 'sin', 'output': array([[0.9966497, 0.       , 0.       , ..., 0.       , 0.       ,
        0.       ]], dtype=float32), 'output_shape': TensorShape([1, 1792]), 'from': [24], 'to': [25]}
ms node:
{'name': 'sin', 'output': array([[0.9948317, 0.       , 0.       , ..., 0.       , 0.       ,
        0.       ]], dtype=float32), 'output_shape': (1, 1792), 'from': [24], 'to': [25]}
torch node:
{'name': 'sin', 'output': array([[0.99696153, 0.        , 0.        , ..., 0.        , 0.        ,
        0.        ]], dtype=float32), 'output_shape': torch.Size([1, 1792]), 'from': [24], 'to': [25]}

generate models:46

final statics:
total operators:28
tensorflow --> nums:5,distinct_bugs:2
mindspore --> nums:2,distinct_bugs:2
torch --> nums:1,distinct_bugs:1
tensorflow --> 
conv2d:4
softmax:1
mindspore --> 
softmax:1
sin:1
torch --> 
softmax:1

generate models:50

analyse output arrays in iter:51

pre layer res:
21:reshape
{'name': 'reshape', 'output': array([[[[  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         ...,
         [  inf, 8320.,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf]],

        [[  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         ...,
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf]],

        [[  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf, 8320.,   inf, ...,   inf,   inf,   inf],
         ...,
         [  inf, 8320.,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf]],

        ...,

        [[  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         ...,
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf]],

        [[  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf, 8320.,   inf, ...,   inf,   inf,   inf],
         ...,
         [  inf, 8320.,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf]],

        [[  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         ...,
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [20], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [21], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [21], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [21], 'to': []}

generate models:52

analyse output arrays in iter:53

pre layer res:
11:add
{'name': 'add', 'output': array([[[[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf, 276483.75, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
          185347.14],
         ...,
         [ 47107.18, 247813.48, 230405.42, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 376837.53, 425989.1 ,
          192516.44],
         [141316.92, 260101.53, 192517.23, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ..., 491525.53, 439301.53,
          268293.53],
         [260101.53, 260101.53, 276485.44, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 288772.38, 194564.88,
          185349.06],
         ...,
         [ 47107.09,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 376836.75, 425989.53,
          192516.64],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        ...,

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf, 276483.75, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
          185347.14],
         ...,
         [ 47107.18, 247813.48, 230405.42, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 376837.53, 425989.1 ,
          192516.44],
         [141316.92, 260101.53, 192517.23, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ..., 491525.53, 439301.53,
          268293.53],
         [260101.53, 260101.53, 276485.44, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 288772.38, 194564.88,
          185349.06],
         ...,
         [ 47107.09,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 376836.75, 425989.53,
          192516.64],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ..., 491525.4 , 439301.16,
          268290.1 ],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 288773.3 , 194564.08,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [14, 15], 'to': [9]}
tf node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38,  3.2256509e+05,  4.1267753e+05, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [ 2.9491553e+05,  4.9050153e+05,  3.4509272e+05, ...,
           8.7044445e+04, -3.4028235e+38,  1.8534714e+05],
         [ 4.9050141e+05,  2.6112555e+05,  1.3314565e+04, ...,
           1.6998855e+05, -3.4028235e+38,  3.2461325e+05],
         ...,
         [ 1.4438714e+05,  2.6010153e+05, -3.4028235e+38, ...,
           7.8852344e+04,  1.3517288e+05,  4.6899731e+05],
         [ 2.4781348e+05,  2.3040542e+05, -3.4028235e+38, ...,
           1.1776179e+05,  2.7238953e+05,  4.1472538e+05],
         [ 2.6010153e+05,  1.9251723e+05, -3.4028235e+38, ...,
           7.7828328e+04,  3.7683753e+05,  4.2598909e+05]],

        [[ 2.6010153e+05,  3.2256503e+05,  4.1267703e+05, ...,
           7.6804320e+04,  4.9152553e+05,  4.3930153e+05],
         [ 2.9491753e+05,  4.9050141e+05,  3.4509341e+05, ...,
           3.9939664e+04,  2.8877238e+05,  1.9456488e+05],
         [ 4.9050153e+05, -3.4028235e+38, -3.4028235e+38, ...,
           1.6998827e+05, -3.4028235e+38,  3.2461284e+05],
         ...,
         [ 1.4438877e+05, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.6899753e+05],
         [ 4.7107090e+04, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38,  2.7238650e+05,  4.1472525e+05],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38,  3.7683675e+05,  4.2598953e+05]],

        ...,

        [[-3.4028235e+38,  3.2256509e+05,  4.1267753e+05, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [ 2.9491553e+05,  4.9050153e+05,  3.4509272e+05, ...,
           8.7044445e+04, -3.4028235e+38,  1.8534714e+05],
         [ 4.9050141e+05,  2.6112555e+05,  1.3314565e+04, ...,
           1.6998855e+05, -3.4028235e+38,  3.2461325e+05],
         ...,
         [ 1.4438714e+05,  2.6010153e+05, -3.4028235e+38, ...,
           7.8852344e+04,  1.3517288e+05,  4.6899731e+05],
         [ 2.4781348e+05,  2.3040542e+05, -3.4028235e+38, ...,
           1.1776179e+05,  2.7238953e+05,  4.1472538e+05],
         [ 2.6010153e+05,  1.9251723e+05, -3.4028235e+38, ...,
           7.7828328e+04,  3.7683753e+05,  4.2598909e+05]],

        [[ 2.6010153e+05,  3.2256503e+05,  4.1267703e+05, ...,
           7.6804320e+04,  4.9152553e+05,  4.3930153e+05],
         [ 2.9491753e+05,  4.9050141e+05,  3.4509341e+05, ...,
           3.9939664e+04,  2.8877238e+05,  1.9456488e+05],
         [ 4.9050153e+05, -3.4028235e+38, -3.4028235e+38, ...,
           1.6998827e+05, -3.4028235e+38,  3.2461284e+05],
         ...,
         [ 1.4438877e+05, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.6899753e+05],
         [ 4.7107090e+04, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38,  2.7238650e+05,  4.1472525e+05],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38,  3.7683675e+05,  4.2598953e+05]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38,  4.9152541e+05,  4.3930116e+05],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38,  2.8877331e+05,  1.9456408e+05],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
           2.6627258e+04,  2.4781348e+05, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
           2.3859745e+05,  7.5780172e+04, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
           1.7818116e+05, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [11], 'to': [17]}
ms node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38,  3.2256509e+05,  4.1267753e+05, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [ 2.9491553e+05,  4.9050153e+05,  3.4509272e+05, ...,
           8.7044445e+04, -3.4028235e+38,  1.8534714e+05],
         [ 4.9050141e+05,  2.6112555e+05,  1.3314565e+04, ...,
           1.6998855e+05, -3.4028235e+38,  3.2461325e+05],
         ...,
         [ 1.4438714e+05,  2.6010153e+05, -3.4028235e+38, ...,
           7.8852344e+04,  1.3517288e+05,  4.6899731e+05],
         [ 2.4781348e+05,  2.3040542e+05, -3.4028235e+38, ...,
           1.1776179e+05,  2.7238953e+05,  4.1472538e+05],
         [ 2.6010153e+05,  1.9251723e+05, -3.4028235e+38, ...,
           7.7828328e+04,  3.7683753e+05,  4.2598909e+05]],

        [[ 2.6010153e+05,  3.2256503e+05,  4.1267703e+05, ...,
           7.6804320e+04,  4.9152553e+05,  4.3930153e+05],
         [ 2.9491753e+05,  4.9050141e+05,  3.4509341e+05, ...,
           3.9939664e+04,  2.8877238e+05,  1.9456488e+05],
         [ 4.9050153e+05, -3.4028235e+38, -3.4028235e+38, ...,
           1.6998827e+05, -3.4028235e+38,  3.2461284e+05],
         ...,
         [ 1.4438877e+05, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.6899753e+05],
         [ 4.7107090e+04, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38,  2.7238650e+05,  4.1472525e+05],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38,  3.7683675e+05,  4.2598953e+05]],

        ...,

        [[-3.4028235e+38,  3.2256509e+05,  4.1267753e+05, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [ 2.9491553e+05,  4.9050153e+05,  3.4509272e+05, ...,
           8.7044445e+04, -3.4028235e+38,  1.8534714e+05],
         [ 4.9050141e+05,  2.6112555e+05,  1.3314565e+04, ...,
           1.6998855e+05, -3.4028235e+38,  3.2461325e+05],
         ...,
         [ 1.4438714e+05,  2.6010153e+05, -3.4028235e+38, ...,
           7.8852344e+04,  1.3517288e+05,  4.6899731e+05],
         [ 2.4781348e+05,  2.3040542e+05, -3.4028235e+38, ...,
           1.1776179e+05,  2.7238953e+05,  4.1472538e+05],
         [ 2.6010153e+05,  1.9251723e+05, -3.4028235e+38, ...,
           7.7828328e+04,  3.7683753e+05,  4.2598909e+05]],

        [[ 2.6010153e+05,  3.2256503e+05,  4.1267703e+05, ...,
           7.6804320e+04,  4.9152553e+05,  4.3930153e+05],
         [ 2.9491753e+05,  4.9050141e+05,  3.4509341e+05, ...,
           3.9939664e+04,  2.8877238e+05,  1.9456488e+05],
         [ 4.9050153e+05, -3.4028235e+38, -3.4028235e+38, ...,
           1.6998827e+05, -3.4028235e+38,  3.2461284e+05],
         ...,
         [ 1.4438877e+05, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.6899753e+05],
         [ 4.7107090e+04, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38,  2.7238650e+05,  4.1472525e+05],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38,  3.7683675e+05,  4.2598953e+05]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38,  4.9152541e+05,  4.3930116e+05],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38,  2.8877331e+05,  1.9456408e+05],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
           2.6627258e+04,  2.4781348e+05, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
           2.3859745e+05,  7.5780172e+04, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
           1.7818116e+05, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': (1, 128, 7, 7), 'from': [11], 'to': [17]}
torch node:
{'name': 'maxpool2d', 'output': array([[[[      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[      -inf, 322565.1  , 412677.53 , ...,       -inf,
                -inf,       -inf],
         [294915.53 , 490501.53 , 345092.72 , ...,  87044.445,
                -inf, 185347.14 ],
         [490501.4  , 261125.55 ,  13314.565, ..., 169988.55 ,
                -inf, 324613.25 ],
         ...,
         [144387.14 , 260101.53 ,       -inf, ...,  78852.34 ,
          135172.88 , 468997.3  ],
         [247813.48 , 230405.42 ,       -inf, ..., 117761.79 ,
          272389.53 , 414725.38 ],
         [260101.53 , 192517.23 ,       -inf, ...,  77828.33 ,
          376837.53 , 425989.1  ]],

        [[260101.53 , 322565.03 , 412677.03 , ...,  76804.32 ,
          491525.53 , 439301.53 ],
         [294917.53 , 490501.4  , 345093.4  , ...,  39939.664,
          288772.38 , 194564.88 ],
         [490501.53 ,       -inf,       -inf, ..., 169988.27 ,
                -inf, 324612.84 ],
         ...,
         [144388.77 ,       -inf,       -inf, ...,       -inf,
                -inf, 468997.53 ],
         [ 47107.09 ,       -inf,       -inf, ...,       -inf,
          272386.5  , 414725.25 ],
         [      -inf,       -inf,       -inf, ...,       -inf,
          376836.75 , 425989.53 ]],

        ...,

        [[      -inf, 322565.1  , 412677.53 , ...,       -inf,
                -inf,       -inf],
         [294915.53 , 490501.53 , 345092.72 , ...,  87044.445,
                -inf, 185347.14 ],
         [490501.4  , 261125.55 ,  13314.565, ..., 169988.55 ,
                -inf, 324613.25 ],
         ...,
         [144387.14 , 260101.53 ,       -inf, ...,  78852.34 ,
          135172.88 , 468997.3  ],
         [247813.48 , 230405.42 ,       -inf, ..., 117761.79 ,
          272389.53 , 414725.38 ],
         [260101.53 , 192517.23 ,       -inf, ...,  77828.33 ,
          376837.53 , 425989.1  ]],

        [[260101.53 , 322565.03 , 412677.03 , ...,  76804.32 ,
          491525.53 , 439301.53 ],
         [294917.53 , 490501.4  , 345093.4  , ...,  39939.664,
          288772.38 , 194564.88 ],
         [490501.53 ,       -inf,       -inf, ..., 169988.27 ,
                -inf, 324612.84 ],
         ...,
         [144388.77 ,       -inf,       -inf, ...,       -inf,
                -inf, 468997.53 ],
         [ 47107.09 ,       -inf,       -inf, ...,       -inf,
          272386.5  , 414725.25 ],
         [      -inf,       -inf,       -inf, ...,       -inf,
          376836.75 , 425989.53 ]],

        [[      -inf,       -inf,       -inf, ...,       -inf,
          491525.4  , 439301.16 ],
         [      -inf,       -inf,       -inf, ...,       -inf,
          288773.3  , 194564.08 ],
         [      -inf,       -inf,       -inf, ...,  26627.258,
          247813.48 ,       -inf],
         ...,
         [      -inf,       -inf,       -inf, ..., 238597.45 ,
           75780.17 ,       -inf],
         [      -inf,       -inf,       -inf, ..., 178181.16 ,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 7, 7]), 'from': [11], 'to': [17]}

generate models:54

analyse output arrays in iter:63

pre layer res:
8:empty_seq_operator
{'name': 'empty_seq_operator', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [17], 'to': [9]}
tf node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        ...,

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [8], 'to': [12]}
ms node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        ...,

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': (1, 128, 7, 7), 'from': [8], 'to': [12]}
torch node:
{'name': 'maxpool2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 7, 7]), 'from': [8], 'to': [12]}

generate models:64

analyse output arrays in iter:64

pre layer res:
18:log
{'name': 'log', 'output': array([[[[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf, 14.42256 , ...,      -inf, 14.656106,
               -inf],
         [     -inf,      -inf, 14.716389, ..., 13.453565, 14.656106,
               -inf],
         ...,
         [     -inf, 14.687231, 14.685054, ..., 14.768768, 12.697056,
               -inf],
         [     -inf, 12.229789, 13.790037, ..., 14.656106,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 14.768768,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf, 14.42256 , ...,      -inf, 14.656106,
               -inf],
         [     -inf,      -inf, 14.716389, ..., 13.453565, 14.656106,
               -inf],
         ...,
         [     -inf, 14.687231, 14.685054, ..., 14.768768, 12.697056,
               -inf],
         [     -inf, 12.229789, 13.790037, ..., 14.656106,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 14.768768,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf, 14.42256 , ...,      -inf, 14.656106,
               -inf],
         [     -inf,      -inf, 14.716389, ..., 13.453565, 14.656106,
               -inf],
         ...,
         [     -inf, 14.687231, 14.685054, ..., 14.768768, 12.697056,
               -inf],
         [     -inf, 12.229789, 13.790037, ..., 14.656106,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 14.768768,      -inf,
               -inf]],

        ...,

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf, 14.42256 , ...,      -inf, 14.656106,
               -inf],
         [     -inf,      -inf, 14.716389, ..., 13.453565, 14.656106,
               -inf],
         ...,
         [     -inf, 14.687231, 14.685054, ..., 14.768768, 12.697056,
               -inf],
         [     -inf, 12.229789, 13.790037, ..., 14.656106,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 14.768768,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf, 14.42256 , ...,      -inf, 14.656106,
               -inf],
         [     -inf,      -inf, 14.716389, ..., 13.453565, 14.656106,
               -inf],
         ...,
         [     -inf, 14.687231, 14.685054, ..., 14.768768, 12.697056,
               -inf],
         [     -inf, 12.229789, 13.790037, ..., 14.656106,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 14.768768,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf, 14.42256 , ...,      -inf, 14.656106,
               -inf],
         [     -inf,      -inf, 14.716389, ..., 13.453565, 14.656106,
               -inf],
         ...,
         [     -inf, 14.687231, 14.685054, ..., 14.768768, 12.697056,
               -inf],
         [     -inf, 12.229789, 13.790037, ..., 14.656106,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 14.768768,      -inf,
               -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [9], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [18], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [18], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [18], 'to': []}

generate models:65

analyse output arrays in iter:67

pre layer res:
13:add
{'name': 'add', 'output': array([[[[1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 2.9386339e+18, 1.0000000e+00, ...,
          2.9917416e+20, 5.7206499e+20, 3.3988255e+20],
         ...,
         [1.0000000e+00, 3.3382735e+20, 5.7206499e+20, ...,
          1.6078414e+19, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00]],

        [[1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 2.9386339e+18, 1.0000000e+00, ...,
          2.9917416e+20, 5.7206499e+20, 3.3988255e+20],
         ...,
         [1.0000000e+00,           inf,           inf, ...,
                    inf,           inf, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00,           inf, ...,
          1.0000000e+00,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 1.0000000e+00, 1.0000000e+00]],

        [[1.0000000e+00, 1.0000000e+00,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 2.9386339e+18,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [1.0000000e+00, 3.3382735e+20,           inf, ...,
                    inf,           inf, 1.0000000e+00],
         [1.0000000e+00,           inf,           inf, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00]],

        ...,

        [[1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 2.9386339e+18, 1.0000000e+00, ...,
          2.9917416e+20, 5.7206499e+20, 3.3988255e+20],
         ...,
         [1.0000000e+00,           inf,           inf, ...,
                    inf,           inf, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00,           inf, ...,
          1.0000000e+00,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 1.0000000e+00, 1.0000000e+00]],

        [[1.0000000e+00, 1.0000000e+00,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 2.9386339e+18,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [1.0000000e+00, 3.3382735e+20,           inf, ...,
                    inf,           inf, 1.0000000e+00],
         [1.0000000e+00,           inf,           inf, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00]],

        [[1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 2.9386339e+18, 1.0000000e+00, ...,
          2.9917416e+20, 5.7206499e+20, 3.3988255e+20],
         ...,
         [1.0000000e+00, 3.3382735e+20, 5.7206499e+20, ...,
          1.6078414e+19, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [9, 16], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [13], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [13], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [13], 'to': []}

generate models:68

analyse output arrays in iter:72

pre layer res:
21:transpose
{'name': 'transpose', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 14, 14]), 'from': [4], 'to': [19]}
tf node:
{'name': 'cos', 'output': array([[[[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        ...,

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 14, 14]), 'from': [21], 'to': [5]}
ms node:
{'name': 'cos', 'output': array([[[[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        ...,

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]]]], dtype=float32), 'output_shape': (1, 64, 14, 14), 'from': [21], 'to': [5]}
torch node:
{'name': 'cos', 'output': array([[[[0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         ...,
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234]],

        [[0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         ...,
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234]],

        [[0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         ...,
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234]],

        ...,

        [[0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         ...,
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234]],

        [[0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         ...,
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234]],

        [[0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         ...,
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 14, 14]), 'from': [21], 'to': [5]}

generate models:73

analyse output arrays in iter:77

pre layer res:
21:add
{'name': 'add', 'output': array([[[[16553.281, 16583.275, 16583.275, ..., 16583.275, 16577.28 ,
          16577.28 ],
         [16553.281, 16583.275, 16583.275, ..., 16583.275, 16577.28 ,
          16577.28 ],
         [11035.537, 11055.512, 11055.512, ..., 11055.512, 11051.535,
          11051.535],
         ...,
         [11035.537, 11055.512, 11055.512, ..., 11055.512, 11051.535,
          11051.535],
         [11035.537, 11055.512, 11055.512, ..., 11055.512, 11051.535,
          11051.535],
         [11035.537, 11055.512, 11055.512, ..., 11055.512, 11051.535,
          11051.535]],

        [[16553.281, 16583.275, 16583.275, ..., 16583.275, 16577.28 ,
          16577.28 ],
         [16553.281, 16583.275, 16583.275, ..., 16583.275, 16577.28 ,
          16577.28 ],
         [11035.537, 11055.512, 11055.512, ..., 11055.512, 11051.535,
          11051.535],
         ...,
         [11035.537, 11055.512, 11055.512, ..., 11055.512, 11051.535,
          11051.535],
         [11035.537, 11055.512, 11055.512, ..., 11055.512, 11051.535,
          11051.535],
         [11035.537, 11055.512, 11055.512, ..., 11055.512, 11051.535,
          11051.535]],

        [[16553.281, 16583.275, 16583.275, ..., 16583.275, 16577.28 ,
          16577.28 ],
         [16553.281, 16583.275, 16583.275, ..., 16583.275, 16577.28 ,
          16577.28 ],
         [11035.537, 11055.512, 11055.512, ..., 11055.512, 11051.535,
          11051.535],
         ...,
         [11035.537, 11055.512, 11055.512, ..., 11055.512, 11051.535,
          11051.535],
         [11035.537, 11055.512, 11055.512, ..., 11055.512, 11051.535,
          11051.535],
         [11035.537, 11055.512, 11055.512, ..., 11055.512, 11051.535,
          11051.535]],

        ...,

        [[16553.281, 16583.275, 16583.275, ..., 16583.275, 16577.28 ,
          16577.28 ],
         [16553.281, 16583.275, 16583.275, ..., 16583.275, 16577.28 ,
          16577.28 ],
         [11035.537, 11055.512, 11235.512, ..., 11306.512, 11086.535,
          11051.535],
         ...,
         [11035.537, 11055.512, 11055.512, ..., 11055.512, 11051.535,
          11051.535],
         [11035.537, 11055.512, 11055.512, ..., 11055.512, 11051.535,
          11051.535],
         [11035.537, 11055.512, 11235.512, ..., 11306.512, 11086.535,
          11051.535]],

        [[16553.281, 16583.275, 16583.275, ..., 16583.275, 16577.28 ,
          16577.28 ],
         [16553.281, 16583.275, 16583.275, ..., 16583.275, 16577.28 ,
          16577.28 ],
         [11035.537, 11055.512, 11055.512, ..., 11055.512, 11051.535,
          11051.535],
         ...,
         [11035.537, 11055.512, 11055.512, ..., 11055.512, 11051.535,
          11051.535],
         [11035.537, 11055.512, 11055.512, ..., 11055.512, 11051.535,
          11051.535],
         [11035.537, 11055.512, 11055.512, ..., 11055.512, 11051.535,
          11051.535]],

        [[16553.281, 16583.275, 16583.275, ..., 16583.275, 16577.28 ,
          16577.28 ],
         [16553.281, 16583.275, 16583.275, ..., 16583.275, 16577.28 ,
          16577.28 ],
         [11035.537, 11055.512, 11055.512, ..., 11055.512, 11051.535,
          11051.535],
         ...,
         [11035.537, 11055.512, 11055.512, ..., 11055.512, 11051.535,
          11051.535],
         [11035.537, 11055.512, 11055.512, ..., 11055.512, 11051.535,
          11051.535],
         [11035.537, 11055.512, 11055.512, ..., 11055.512, 11051.535,
          11051.535]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [9, 24], 'to': [11]}
tf node:
{'name': 'sin', 'output': array([[[[-0.22754736,  0.9291946 ,  0.9291946 , ...,  0.9291946 ,
           0.7865093 ,  0.7865093 ],
         [-0.22754736,  0.9291946 ,  0.9291946 , ...,  0.9291946 ,
           0.7865093 ,  0.7865093 ],
         [ 0.76938814, -0.24466169, -0.24466169, ..., -0.24466169,
          -0.55453086, -0.55453086],
         ...,
         [ 0.76938814, -0.24466169, -0.24466169, ..., -0.24466169,
          -0.55453086, -0.55453086],
         [ 0.76938814, -0.24466169, -0.24466169, ..., -0.24466169,
          -0.55453086, -0.55453086],
         [ 0.76938814, -0.24466169, -0.24466169, ..., -0.24466169,
          -0.55453086, -0.55453086]],

        [[-0.22754736,  0.9291946 ,  0.9291946 , ...,  0.9291946 ,
           0.7865093 ,  0.7865093 ],
         [-0.22754736,  0.9291946 ,  0.9291946 , ...,  0.9291946 ,
           0.7865093 ,  0.7865093 ],
         [ 0.76938814, -0.24466169, -0.24466169, ..., -0.24466169,
          -0.55453086, -0.55453086],
         ...,
         [ 0.76938814, -0.24466169, -0.24466169, ..., -0.24466169,
          -0.55453086, -0.55453086],
         [ 0.76938814, -0.24466169, -0.24466169, ..., -0.24466169,
          -0.55453086, -0.55453086],
         [ 0.76938814, -0.24466169, -0.24466169, ..., -0.24466169,
          -0.55453086, -0.55453086]],

        [[-0.22754736,  0.9291946 ,  0.9291946 , ...,  0.9291946 ,
           0.7865093 ,  0.7865093 ],
         [-0.22754736,  0.9291946 ,  0.9291946 , ...,  0.9291946 ,
           0.7865093 ,  0.7865093 ],
         [ 0.76938814, -0.24466169, -0.24466169, ..., -0.24466169,
          -0.55453086, -0.55453086],
         ...,
         [ 0.76938814, -0.24466169, -0.24466169, ..., -0.24466169,
          -0.55453086, -0.55453086],
         [ 0.76938814, -0.24466169, -0.24466169, ..., -0.24466169,
          -0.55453086, -0.55453086],
         [ 0.76938814, -0.24466169, -0.24466169, ..., -0.24466169,
          -0.55453086, -0.55453086]],

        ...,

        [[-0.22754736,  0.9291946 ,  0.9291946 , ...,  0.9291946 ,
           0.7865093 ,  0.7865093 ],
         [-0.22754736,  0.9291946 ,  0.9291946 , ...,  0.9291946 ,
           0.7865093 ,  0.7865093 ],
         [ 0.76938814, -0.24466169,  0.9232247 , ...,  0.08015543,
           0.14480735, -0.55453086],
         ...,
         [ 0.76938814, -0.24466169, -0.24466169, ..., -0.24466169,
          -0.55453086, -0.55453086],
         [ 0.76938814, -0.24466169, -0.24466169, ..., -0.24466169,
          -0.55453086, -0.55453086],
         [ 0.76938814, -0.24466169,  0.9232247 , ...,  0.08015543,
           0.14480735, -0.55453086]],

        [[-0.22754736,  0.9291946 ,  0.9291946 , ...,  0.9291946 ,
           0.7865093 ,  0.7865093 ],
         [-0.22754736,  0.9291946 ,  0.9291946 , ...,  0.9291946 ,
           0.7865093 ,  0.7865093 ],
         [ 0.76938814, -0.24466169, -0.24466169, ..., -0.24466169,
          -0.55453086, -0.55453086],
         ...,
         [ 0.76938814, -0.24466169, -0.24466169, ..., -0.24466169,
          -0.55453086, -0.55453086],
         [ 0.76938814, -0.24466169, -0.24466169, ..., -0.24466169,
          -0.55453086, -0.55453086],
         [ 0.76938814, -0.24466169, -0.24466169, ..., -0.24466169,
          -0.55453086, -0.55453086]],

        [[-0.22754736,  0.9291946 ,  0.9291946 , ...,  0.9291946 ,
           0.7865093 ,  0.7865093 ],
         [-0.22754736,  0.9291946 ,  0.9291946 , ...,  0.9291946 ,
           0.7865093 ,  0.7865093 ],
         [ 0.76938814, -0.24466169, -0.24466169, ..., -0.24466169,
          -0.55453086, -0.55453086],
         ...,
         [ 0.76938814, -0.24466169, -0.24466169, ..., -0.24466169,
          -0.55453086, -0.55453086],
         [ 0.76938814, -0.24466169, -0.24466169, ..., -0.24466169,
          -0.55453086, -0.55453086],
         [ 0.76938814, -0.24466169, -0.24466169, ..., -0.24466169,
          -0.55453086, -0.55453086]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [21], 'to': [10]}
ms node:
{'name': 'sin', 'output': array([[[[-0.22754738,  0.9291946 ,  0.9291946 , ...,  0.9291946 ,
           0.7865092 ,  0.7865092 ],
         [-0.22754738,  0.9291946 ,  0.9291946 , ...,  0.9291946 ,
           0.7865092 ,  0.7865092 ],
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055],
         ...,
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055],
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055],
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.56424445, -0.56424445]],

        [[-0.22754738,  0.9291946 ,  0.9291946 , ...,  0.9291946 ,
           0.7865092 ,  0.7865092 ],
         [-0.22754738,  0.9291946 ,  0.9291946 , ...,  0.9291946 ,
           0.7865092 ,  0.7865092 ],
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055],
         ...,
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055],
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055],
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.56424445, -0.56424445]],

        [[-0.22754738,  0.9291946 ,  0.9291946 , ...,  0.9291946 ,
           0.7865092 ,  0.7865092 ],
         [-0.22754738,  0.9291946 ,  0.9291946 , ...,  0.9291946 ,
           0.7865092 ,  0.7865092 ],
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055],
         ...,
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055],
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055],
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.56424445, -0.56424445]],

        ...,

        [[-0.22754738,  0.9291946 ,  0.9291946 , ...,  0.9291946 ,
           0.7865092 ,  0.7865092 ],
         [-0.22754738,  0.9291946 ,  0.9291946 , ...,  0.9291946 ,
           0.7865092 ,  0.7865092 ],
         [ 0.7693881 , -0.24466169,  0.9232247 , ...,  0.08015544,
           0.16795592, -0.57388055],
         ...,
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055],
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055],
         [ 0.7693881 , -0.24466169,  0.9232247 , ...,  0.08015544,
           0.15639238, -0.56424445]],

        [[-0.25597396,  0.919512  ,  0.919512  , ...,  0.919512  ,
           0.7680812 ,  0.7680812 ],
         [-0.25597396,  0.919512  ,  0.919512  , ...,  0.919512  ,
           0.7680812 ,  0.7680812 ],
         [ 0.7650035 , -0.2550631 , -0.2550631 , ..., -0.2550631 ,
          -0.56424445, -0.56424445],
         ...,
         [ 0.7650035 , -0.2550631 , -0.2550631 , ..., -0.2550631 ,
          -0.56424445, -0.56424445],
         [ 0.7650035 , -0.2550631 , -0.2550631 , ..., -0.2550631 ,
          -0.56424445, -0.56424445],
         [ 0.7650035 , -0.2550631 , -0.2550631 , ..., -0.2550631 ,
          -0.56424445, -0.56424445]],

        [[-0.25597396,  0.919512  ,  0.919512  , ...,  0.919512  ,
           0.7680812 ,  0.7680812 ],
         [-0.25597396,  0.919512  ,  0.919512  , ...,  0.919512  ,
           0.7680812 ,  0.7680812 ],
         [ 0.7650035 , -0.2550631 , -0.2550631 , ..., -0.2550631 ,
          -0.56424445, -0.56424445],
         ...,
         [ 0.7650035 , -0.2550631 , -0.2550631 , ..., -0.2550631 ,
          -0.56424445, -0.56424445],
         [ 0.7650035 , -0.2550631 , -0.2550631 , ..., -0.2550631 ,
          -0.56424445, -0.56424445],
         [ 0.7650035 , -0.2550631 , -0.2550631 , ..., -0.2550631 ,
          -0.56424445, -0.56424445]]]], dtype=float32), 'output_shape': (1, 128, 7, 7), 'from': [21], 'to': [10]}
torch node:
{'name': 'sin', 'output': array([[[[-0.22754738,  0.9291946 ,  0.9291946 , ...,  0.9291946 ,
           0.7865092 ,  0.7865092 ],
         [-0.22754738,  0.9291946 ,  0.9291946 , ...,  0.9291946 ,
           0.7865092 ,  0.7865092 ],
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055],
         ...,
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055],
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055],
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055]],

        [[-0.22754738,  0.9291946 ,  0.9291946 , ...,  0.9291946 ,
           0.7865092 ,  0.7865092 ],
         [-0.22754738,  0.9291946 ,  0.9291946 , ...,  0.9291946 ,
           0.7865092 ,  0.7865092 ],
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055],
         ...,
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055],
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055],
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055]],

        [[-0.22754738,  0.9291946 ,  0.9291946 , ...,  0.9291946 ,
           0.7865092 ,  0.7865092 ],
         [-0.22754738,  0.9291946 ,  0.9291946 , ...,  0.9291946 ,
           0.7865092 ,  0.7865092 ],
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055],
         ...,
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055],
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055],
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055]],

        ...,

        [[-0.22754738,  0.9291946 ,  0.9291946 , ...,  0.9291946 ,
           0.7865092 ,  0.7865092 ],
         [-0.22754738,  0.9291946 ,  0.9291946 , ...,  0.9291946 ,
           0.7865092 ,  0.7865092 ],
         [ 0.7693881 , -0.24466169,  0.9232247 , ...,  0.08015544,
           0.16795592, -0.57388055],
         ...,
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055],
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055],
         [ 0.7693881 , -0.24466169,  0.9232247 , ...,  0.08015544,
           0.16795592, -0.57388055]],

        [[-0.22754738,  0.9291946 ,  0.9291946 , ...,  0.9291946 ,
           0.7865092 ,  0.7865092 ],
         [-0.22754738,  0.9291946 ,  0.9291946 , ...,  0.9291946 ,
           0.7865092 ,  0.7865092 ],
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055],
         ...,
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055],
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055],
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055]],

        [[-0.22754738,  0.9291946 ,  0.9291946 , ...,  0.9291946 ,
           0.7865092 ,  0.7865092 ],
         [-0.22754738,  0.9291946 ,  0.9291946 , ...,  0.9291946 ,
           0.7865092 ,  0.7865092 ],
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055],
         ...,
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055],
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055],
         [ 0.7693881 , -0.24466169, -0.24466169, ..., -0.24466169,
          -0.57388055, -0.57388055]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 7, 7]), 'from': [21], 'to': [10]}

generate models:78

analyse the exceptions in iter:93
torch exception:
{'id': 25, 'name': 'flatten', 'frame_work': 'torch', 'input_datas': [tensor([938368.,      0.,      0.,  ...,      0.,      0.,      0.],
       grad_fn=<ConstantPadNdBackward0>)]}
Dimension out of range (expected to be in range of [-1, 0], but got 1)

generate models:94

analyse output arrays in iter:95

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf, 1.0409167e+08,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf, 1.0409167e+08,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf, 1.0409167e+08,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]],

        ...,

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf, 1.0409167e+08,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf, 1.0409167e+08,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf, 1.0409167e+08,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [16], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [9], 'to': []}

generate models:96

analyse output arrays in iter:99

pre layer res:
20:add
{'name': 'add', 'output': array([[[[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        ...,

        [[0.       , 2.2548163, 2.2548163, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [2.3745582, 2.2548163, 2.3911567, ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 2.2548163, 2.3890665, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [2.2548163, 2.2548163, 0.       , ..., 0.       , 0.       ,
          0.       ]],

        [[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [2.2548163, 2.3981028, 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 2.403302 ,
          2.2548163],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 2.2548163,
          0.       ]],

        [[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 2.4020317, 2.3997564,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [23, 27], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [20], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [20], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [20], 'to': []}

generate models:100

final statics:
total operators:28
tensorflow --> nums:12,distinct_bugs:4
mindspore --> nums:4,distinct_bugs:3
torch --> nums:6,distinct_bugs:5
tensorflow --> 
conv2d:9
softmax:1
cos:1
sin:1
mindspore --> 
softmax:1
sin:2
cos:1
torch --> 
softmax:1
maxpool2d:2
cos:1
sin:1
flatten:1

generate models:100

analyse output arrays in iter:103

pre layer res:
7:conv2d
{'name': 'conv2d', 'output': array([[[[128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         ...,
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.]],

        [[128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         ...,
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.]],

        [[128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         ...,
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.]],

        ...,

        [[128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         ...,
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.]],

        [[128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         ...,
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.]],

        [[128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         ...,
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [6], 'to': [17]}
tf node:
{'name': 'softmax', 'output': array([[[[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857]],

        [[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857]],

        [[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857]],

        ...,

        [[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857]],

        [[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857]],

        [[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [7], 'to': [8]}
ms node:
{'name': 'softmax', 'output': array([[[[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857]],

        [[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857]],

        [[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857]],

        ...,

        [[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857]],

        [[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857]],

        [[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857]]]], dtype=float32), 'output_shape': (1, 128, 14, 14), 'from': [7], 'to': [8]}
torch node:
{'name': 'softmax', 'output': array([[[[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857]],

        [[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857]],

        [[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857]],

        ...,

        [[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857]],

        [[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857]],

        [[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 14, 14]), 'from': [7], 'to': [8]}

generate models:104

analyse output arrays in iter:111

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[1.2680800e+06, 1.5426560e+06, 1.5908640e+06, ...,
          1.0605760e+06, 1.0605760e+06, 1.0605760e+06],
         [1.5510400e+06, 1.3527211e+08, 1.3527211e+08, ...,
          1.3526824e+08, 1.3420954e+08, 1.1926240e+06],
         [1.1611840e+06, 1.3387186e+08, 1.3447563e+08, ...,
          1.3510018e+08, 1.3514842e+08, 1.0500960e+06],
         ...,
         [0.0000000e+00, 2.1135360e+07, 1.2945408e+08, ...,
          1.3397246e+08, 1.3368115e+08, 1.8654400e+05],
         [1.0438297e+08, 1.3425126e+08, 1.3474179e+08, ...,
          1.3386766e+08, 1.3370418e+08, 0.0000000e+00],
         [3.1703040e+06, 1.1363403e+08, 1.3385090e+08, ...,
          9.4859512e+07, 1.0144640e+06, 1.0144640e+06]],

        [[1.2680800e+06, 1.5426560e+06, 1.5908640e+06, ...,
          1.0605760e+06, 1.0605760e+06, 1.0605760e+06],
         [1.5510400e+06, 1.3527211e+08, 1.3527211e+08, ...,
          1.3526824e+08, 1.3420954e+08, 1.1926240e+06],
         [1.1611840e+06, 1.3387186e+08, 1.3447563e+08, ...,
          1.3510018e+08, 1.3514842e+08, 1.0500960e+06],
         ...,
         [0.0000000e+00, 2.1135360e+07, 1.2945408e+08, ...,
          1.3397246e+08, 1.3368115e+08, 1.8654400e+05],
         [1.0438297e+08, 1.3425126e+08, 1.3474179e+08, ...,
          1.3386766e+08, 1.3370418e+08, 0.0000000e+00],
         [3.1703040e+06, 1.1363403e+08, 1.3385090e+08, ...,
          9.4859512e+07, 1.0144640e+06, 1.0144640e+06]],

        [[1.2680800e+06, 1.5426560e+06, 1.5908640e+06, ...,
          1.0605760e+06, 1.0605760e+06, 1.0605760e+06],
         [1.5510400e+06, 1.3527211e+08, 1.3527211e+08, ...,
          1.3526824e+08, 1.3420954e+08, 1.1926240e+06],
         [1.1611840e+06, 1.3387186e+08, 1.3447563e+08, ...,
          1.3510018e+08, 1.3514842e+08, 1.0500960e+06],
         ...,
         [0.0000000e+00, 2.1135360e+07, 1.2945408e+08, ...,
          1.3397246e+08, 1.3368115e+08, 1.8654400e+05],
         [1.0438297e+08, 1.3425126e+08, 1.3474179e+08, ...,
          1.3386766e+08, 1.3370418e+08, 0.0000000e+00],
         [3.1703040e+06, 1.1363403e+08, 1.3385090e+08, ...,
          9.4859512e+07, 1.0144640e+06, 1.0144640e+06]],

        ...,

        [[1.2680800e+06, 1.5426560e+06, 1.5908640e+06, ...,
          1.0605760e+06, 1.0605760e+06, 1.0605760e+06],
         [1.5510400e+06, 1.3527211e+08, 1.3527211e+08, ...,
          1.3526824e+08, 1.3420954e+08, 1.1926240e+06],
         [1.1611840e+06, 1.3387186e+08, 1.3447563e+08, ...,
          1.3510018e+08, 1.3514842e+08, 1.0500960e+06],
         ...,
         [0.0000000e+00, 2.1135360e+07, 1.2945408e+08, ...,
          1.3397246e+08, 1.3368115e+08, 1.8654400e+05],
         [1.0438297e+08, 1.3425126e+08, 1.3474179e+08, ...,
          1.3386766e+08, 1.3370418e+08, 0.0000000e+00],
         [3.1703040e+06, 1.1363403e+08, 1.3385090e+08, ...,
          9.4859512e+07, 1.0144640e+06, 1.0144640e+06]],

        [[1.2680800e+06, 1.5426560e+06, 1.5908640e+06, ...,
          1.0605760e+06, 1.0605760e+06, 1.0605760e+06],
         [1.5510400e+06, 1.3527211e+08, 1.3527211e+08, ...,
          1.3526824e+08, 1.3420954e+08, 1.1926240e+06],
         [1.1611840e+06, 1.3387186e+08, 1.3447563e+08, ...,
          1.3510018e+08, 1.3514842e+08, 1.0500960e+06],
         ...,
         [0.0000000e+00, 2.1135360e+07, 1.2945408e+08, ...,
          1.3397246e+08, 1.3368115e+08, 1.8654400e+05],
         [1.0438297e+08, 1.3425126e+08, 1.3474179e+08, ...,
          1.3386766e+08, 1.3370418e+08, 0.0000000e+00],
         [3.1703040e+06, 1.1363403e+08, 1.3385090e+08, ...,
          9.4859512e+07, 1.0144640e+06, 1.0144640e+06]],

        [[1.2680800e+06, 1.5426560e+06, 1.5908640e+06, ...,
          1.0605760e+06, 1.0605760e+06, 1.0605760e+06],
         [1.5510400e+06, 1.3527211e+08, 1.3527211e+08, ...,
          1.3526824e+08, 1.3420954e+08, 1.1926240e+06],
         [1.1611840e+06, 1.3387186e+08, 1.3447563e+08, ...,
          1.3510018e+08, 1.3514842e+08, 1.0500960e+06],
         ...,
         [0.0000000e+00, 2.1135360e+07, 1.2945408e+08, ...,
          1.3397246e+08, 1.3368115e+08, 1.8654400e+05],
         [1.0438297e+08, 1.3425126e+08, 1.3474179e+08, ...,
          1.3386766e+08, 1.3370418e+08, 0.0000000e+00],
         [3.1703040e+06, 1.1363403e+08, 1.3385090e+08, ...,
          9.4859512e+07, 1.0144640e+06, 1.0144640e+06]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [8], 'to': [11]}
tf node:
{'name': 'sin', 'output': array([[[[ 0.95151365,  0.88261527, -0.7316001 , ..., -0.5202218 ,
          -0.5202218 , -0.5202218 ],
         [-0.9125201 ,  0.972691  ,  0.972691  , ...,  0.24467626,
           0.3940876 ,  0.03046891],
         [ 0.8865116 , -0.69945264, -0.35762477, ..., -0.8966826 ,
           0.26423788, -0.19280335],
         ...,
         [ 0.        ,  0.11302321, -0.9958032 , ..., -0.666944  ,
           0.76656973,  0.5892882 ],
         [ 0.87079257,  0.97993654,  0.99709225, ...,  0.33421174,
          -0.14045805,  0.        ],
         [-0.32512987, -0.60661936, -0.9959545 , ...,  0.9950045 ,
          -0.24754086, -0.24754086]],

        [[ 0.95151365,  0.88261527, -0.7316001 , ..., -0.5202218 ,
          -0.5202218 , -0.5202218 ],
         [-0.9125201 ,  0.972691  ,  0.972691  , ...,  0.24467626,
           0.3940876 ,  0.03046891],
         [ 0.8865116 , -0.69945264, -0.35762477, ..., -0.8966826 ,
           0.26423788, -0.19280335],
         ...,
         [ 0.        ,  0.11302321, -0.9958032 , ..., -0.666944  ,
           0.76656973,  0.5892882 ],
         [ 0.87079257,  0.97993654,  0.99709225, ...,  0.33421174,
          -0.14045805,  0.        ],
         [-0.32512987, -0.60661936, -0.9959545 , ...,  0.9950045 ,
          -0.24754086, -0.24754086]],

        [[ 0.95151365,  0.88261527, -0.7316001 , ..., -0.5202218 ,
          -0.5202218 , -0.5202218 ],
         [-0.9125201 ,  0.972691  ,  0.972691  , ...,  0.24467626,
           0.3940876 ,  0.03046891],
         [ 0.8865116 , -0.69945264, -0.35762477, ..., -0.8966826 ,
           0.26423788, -0.19280335],
         ...,
         [ 0.        ,  0.11302321, -0.9958032 , ..., -0.666944  ,
           0.76656973,  0.5892882 ],
         [ 0.87079257,  0.97993654,  0.99709225, ...,  0.33421174,
          -0.14045805,  0.        ],
         [-0.32512987, -0.60661936, -0.9959545 , ...,  0.9950045 ,
          -0.24754086, -0.24754086]],

        ...,

        [[ 0.95151365,  0.88261527, -0.7316001 , ..., -0.5202218 ,
          -0.5202218 , -0.5202218 ],
         [-0.9125201 ,  0.972691  ,  0.972691  , ...,  0.24467626,
           0.3940876 ,  0.03046891],
         [ 0.8865116 , -0.69945264, -0.35762477, ..., -0.8966826 ,
           0.26423788, -0.19280335],
         ...,
         [ 0.        ,  0.11302321, -0.9958032 , ..., -0.666944  ,
           0.76656973,  0.5892882 ],
         [ 0.87079257,  0.97993654,  0.99709225, ...,  0.33421174,
          -0.14045805,  0.        ],
         [-0.32512987, -0.60661936, -0.9959545 , ...,  0.9950045 ,
          -0.24754086, -0.24754086]],

        [[ 0.95151365,  0.88261527, -0.7316001 , ..., -0.5202218 ,
          -0.5202218 , -0.5202218 ],
         [-0.9125201 ,  0.972691  ,  0.972691  , ...,  0.24467626,
           0.3940876 ,  0.03046891],
         [ 0.8865116 , -0.69945264, -0.35762477, ..., -0.8966826 ,
           0.26423788, -0.19280335],
         ...,
         [ 0.        ,  0.11302321, -0.9958032 , ..., -0.666944  ,
           0.76656973,  0.5892882 ],
         [ 0.87079257,  0.97993654,  0.99709225, ...,  0.33421174,
          -0.14045805,  0.        ],
         [-0.32512987, -0.60661936, -0.9959545 , ...,  0.9950045 ,
          -0.24754086, -0.24754086]],

        [[ 0.95151365,  0.88261527, -0.7316001 , ..., -0.5202218 ,
          -0.5202218 , -0.5202218 ],
         [-0.9125201 ,  0.972691  ,  0.972691  , ...,  0.24467626,
           0.3940876 ,  0.03046891],
         [ 0.8865116 , -0.69945264, -0.35762477, ..., -0.8966826 ,
           0.26423788, -0.19280335],
         ...,
         [ 0.        ,  0.11302321, -0.9958032 , ..., -0.666944  ,
           0.76656973,  0.5892882 ],
         [ 0.87079257,  0.97993654,  0.99709225, ...,  0.33421174,
          -0.14045805,  0.        ],
         [-0.32512987, -0.60661936, -0.9959545 , ...,  0.9950045 ,
          -0.24754086, -0.24754086]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [9], 'to': [10]}
ms node:
{'name': 'sin', 'output': array([[[[ 0.95151365,  0.88261527, -0.73160005, ..., -0.5202218 ,
          -0.5202218 , -0.5202218 ],
         [-0.9125201 ,  0.97269094,  0.97269094, ...,  0.24467626,
           0.39408764,  0.03046891],
         [ 0.8865116 , -0.69945264, -0.3576248 , ..., -0.8966826 ,
           0.26423788, -0.19280335],
         ...,
         [ 0.        ,  0.11302321, -0.9958032 , ..., -0.666944  ,
           0.76656973,  0.5892882 ],
         [ 0.87079257,  0.97993654,  0.99709225, ...,  0.33421177,
          -0.14045806,  0.        ],
         [-0.32512987, -0.60661936, -0.9959545 , ...,  0.9950045 ,
          -0.24754086, -0.24754086]],

        [[ 0.95151365,  0.88261527, -0.73160005, ..., -0.5202218 ,
          -0.5202218 , -0.5202218 ],
         [-0.9125201 ,  0.97269094,  0.97269094, ...,  0.24467626,
           0.39408764,  0.03046891],
         [ 0.8865116 , -0.69945264, -0.3576248 , ..., -0.8966826 ,
           0.26423788, -0.19280335],
         ...,
         [ 0.        ,  0.11302321, -0.9958032 , ..., -0.666944  ,
           0.76656973,  0.5892882 ],
         [ 0.87079257,  0.97993654,  0.99709225, ...,  0.33421177,
          -0.14045806,  0.        ],
         [-0.32512987, -0.60661936, -0.9959545 , ...,  0.9950045 ,
          -0.24754086, -0.24754086]],

        [[ 0.95151365,  0.88261527, -0.73160005, ..., -0.5202218 ,
          -0.5202218 , -0.5202218 ],
         [-0.9125201 ,  0.97269094,  0.97269094, ...,  0.24467626,
           0.39408764,  0.03046891],
         [ 0.8865116 , -0.69945264, -0.3576248 , ..., -0.8966826 ,
           0.26423788, -0.19280335],
         ...,
         [ 0.        ,  0.11302321, -0.9958032 , ..., -0.666944  ,
           0.76656973,  0.5892882 ],
         [ 0.87079257,  0.97993654,  0.99709225, ...,  0.33421177,
          -0.14045806,  0.        ],
         [-0.32512987, -0.60661936, -0.9959545 , ...,  0.9950045 ,
          -0.24754086, -0.24754086]],

        ...,

        [[ 0.95151365,  0.88261527, -0.73160005, ..., -0.5202218 ,
          -0.5202218 , -0.5202218 ],
         [-0.9125201 ,  0.97269094,  0.97269094, ...,  0.24467626,
           0.39408764,  0.03046891],
         [ 0.8865116 , -0.69945264, -0.3576248 , ..., -0.8966826 ,
           0.26423788, -0.19280335],
         ...,
         [ 0.        ,  0.11302321, -0.9958032 , ..., -0.666944  ,
           0.76656973,  0.5892882 ],
         [ 0.87079257,  0.97993654,  0.99709225, ...,  0.33421177,
          -0.14045806,  0.        ],
         [-0.32512987, -0.60661936, -0.9959545 , ...,  0.9950045 ,
          -0.24754086, -0.24754086]],

        [[ 0.95151365,  0.88261527, -0.73160005, ..., -0.5202218 ,
          -0.5202218 , -0.5202218 ],
         [-0.9125201 ,  0.73338914,  0.73338914, ...,  0.5882753 ,
           0.39408764,  0.03046891],
         [ 0.8865116 ,  0.9968061 , -0.77009195, ...,  0.91409266,
           0.9908696 , -0.19280335],
         ...,
         [ 0.        ,  0.11302321, -0.9958032 , ...,  0.8532243 ,
           0.76656973,  0.5892882 ],
         [-0.94710004,  0.97993654, -0.25485906, ..., -0.04871275,
           0.8505521 ,  0.        ],
         [-0.32512987,  0.8098157 ,  0.9796559 , ...,  0.5124644 ,
          -0.24754086, -0.24754086]],

        [[ 0.95151365,  0.88261527, -0.73160005, ..., -0.5202218 ,
          -0.5202218 , -0.5202218 ],
         [-0.9125201 ,  0.73338914,  0.73338914, ...,  0.5882753 ,
           0.39408764,  0.03046891],
         [ 0.8865116 ,  0.9968061 , -0.77009195, ...,  0.91409266,
           0.9908696 , -0.19280335],
         ...,
         [ 0.        ,  0.11302321, -0.9958032 , ...,  0.8532243 ,
           0.76656973,  0.5892882 ],
         [-0.94710004,  0.97993654, -0.25485906, ..., -0.04871275,
           0.8505521 ,  0.        ],
         [-0.32512987,  0.8098157 ,  0.9796559 , ...,  0.5124644 ,
          -0.24754086, -0.24754086]]]], dtype=float32), 'output_shape': (1, 128, 7, 7), 'from': [9], 'to': [10]}
torch node:
{'name': 'sin', 'output': array([[[[ 0.95151365,  0.88261527, -0.73160005, ..., -0.5202218 ,
          -0.5202218 , -0.5202218 ],
         [-0.9125201 ,  0.97269094,  0.97269094, ...,  0.24467626,
           0.39408764,  0.03046891],
         [ 0.8865116 , -0.69945264, -0.3576248 , ..., -0.8966826 ,
           0.26423788, -0.19280335],
         ...,
         [ 0.        ,  0.11302321, -0.9958032 , ..., -0.666944  ,
           0.76656973,  0.5892882 ],
         [ 0.87079257,  0.97993654,  0.99709225, ...,  0.33421177,
          -0.14045806,  0.        ],
         [-0.32512987, -0.60661936, -0.9959545 , ...,  0.9950045 ,
          -0.24754086, -0.24754086]],

        [[ 0.95151365,  0.88261527, -0.73160005, ..., -0.5202218 ,
          -0.5202218 , -0.5202218 ],
         [-0.9125201 ,  0.97269094,  0.97269094, ...,  0.24467626,
           0.39408764,  0.03046891],
         [ 0.8865116 , -0.69945264, -0.3576248 , ..., -0.8966826 ,
           0.26423788, -0.19280335],
         ...,
         [ 0.        ,  0.11302321, -0.9958032 , ..., -0.666944  ,
           0.76656973,  0.5892882 ],
         [ 0.87079257,  0.97993654,  0.99709225, ...,  0.33421177,
          -0.14045806,  0.        ],
         [-0.32512987, -0.60661936, -0.9959545 , ...,  0.9950045 ,
          -0.24754086, -0.24754086]],

        [[ 0.95151365,  0.88261527, -0.73160005, ..., -0.5202218 ,
          -0.5202218 , -0.5202218 ],
         [-0.9125201 ,  0.97269094,  0.97269094, ...,  0.24467626,
           0.39408764,  0.03046891],
         [ 0.8865116 , -0.69945264, -0.3576248 , ..., -0.8966826 ,
           0.26423788, -0.19280335],
         ...,
         [ 0.        ,  0.11302321, -0.9958032 , ..., -0.666944  ,
           0.76656973,  0.5892882 ],
         [ 0.87079257,  0.97993654,  0.99709225, ...,  0.33421177,
          -0.14045806,  0.        ],
         [-0.32512987, -0.60661936, -0.9959545 , ...,  0.9950045 ,
          -0.24754086, -0.24754086]],

        ...,

        [[ 0.95151365,  0.88261527, -0.73160005, ..., -0.5202218 ,
          -0.5202218 , -0.5202218 ],
         [-0.9125201 ,  0.97269094,  0.97269094, ...,  0.24467626,
           0.39408764,  0.03046891],
         [ 0.8865116 , -0.69945264, -0.3576248 , ..., -0.8966826 ,
           0.26423788, -0.19280335],
         ...,
         [ 0.        ,  0.11302321, -0.9958032 , ..., -0.666944  ,
           0.76656973,  0.5892882 ],
         [ 0.87079257,  0.97993654,  0.99709225, ...,  0.33421177,
          -0.14045806,  0.        ],
         [-0.32512987, -0.60661936, -0.9959545 , ...,  0.9950045 ,
          -0.24754086, -0.24754086]],

        [[ 0.95151365,  0.88261527, -0.73160005, ..., -0.5202218 ,
          -0.5202218 , -0.5202218 ],
         [-0.9125201 ,  0.97269094,  0.97269094, ...,  0.24467626,
           0.39408764,  0.03046891],
         [ 0.8865116 , -0.69945264, -0.3576248 , ..., -0.8966826 ,
           0.26423788, -0.19280335],
         ...,
         [ 0.        ,  0.11302321, -0.9958032 , ..., -0.666944  ,
           0.76656973,  0.5892882 ],
         [ 0.87079257,  0.97993654,  0.99709225, ...,  0.33421177,
          -0.14045806,  0.        ],
         [-0.32512987, -0.60661936, -0.9959545 , ...,  0.9950045 ,
          -0.24754086, -0.24754086]],

        [[ 0.95151365,  0.88261527, -0.73160005, ..., -0.5202218 ,
          -0.5202218 , -0.5202218 ],
         [-0.9125201 ,  0.97269094,  0.97269094, ...,  0.24467626,
           0.39408764,  0.03046891],
         [ 0.8865116 , -0.69945264, -0.3576248 , ..., -0.8966826 ,
           0.26423788, -0.19280335],
         ...,
         [ 0.        ,  0.11302321, -0.9958032 , ..., -0.666944  ,
           0.76656973,  0.5892882 ],
         [ 0.87079257,  0.97993654,  0.99709225, ...,  0.33421177,
          -0.14045806,  0.        ],
         [-0.32512987, -0.60661936, -0.9959545 , ...,  0.9950045 ,
          -0.24754086, -0.24754086]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 7, 7]), 'from': [9], 'to': [10]}

generate models:112

analyse output arrays in iter:112

pre layer res:
11:add
{'name': 'add', 'output': array([[[[1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         ...,
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00]],

        [[1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         ...,
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00]],

        [[1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         ...,
         [1.0000000e+00, 1.5455389e+25,           inf, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00]],

        ...,

        [[1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00,           inf],
         ...,
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00]],

        [[1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         ...,
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00]],

        [[1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         ...,
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [9, 14], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[          nan,           nan,           nan, ...,
          6.0471850e+11,           nan,           nan],
         [          nan,           nan,           nan, ...,
          6.0471856e+11,           nan,           nan],
         [          nan,           nan,           nan, ...,
          6.0471856e+11,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
          2.8679297e+10,           nan,           nan],
         [          nan,           nan,           nan, ...,
          1.3046843e+03,           nan,           nan],
         [          nan,           nan,           nan, ...,
          9.2068433e+02,           nan,           nan]],

        [[          nan,           nan,           nan, ...,
          6.0471850e+11,           nan,           nan],
         [          nan,           nan,           nan, ...,
          6.0471856e+11,           nan,           nan],
         [          nan,           nan,           nan, ...,
          6.0471856e+11,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
          2.8679297e+10,           nan,           nan],
         [          nan,           nan,           nan, ...,
          1.3046843e+03,           nan,           nan],
         [          nan,           nan,           nan, ...,
          9.2068433e+02,           nan,           nan]],

        [[          nan,           nan,           nan, ...,
          6.0471850e+11,           nan,           nan],
         [          nan,           nan,           nan, ...,
          6.0471856e+11,           nan,           nan],
         [          nan,           nan,           nan, ...,
          6.0471856e+11,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
          2.8679297e+10,           nan,           nan],
         [          nan,           nan,           nan, ...,
          1.3046843e+03,           nan,           nan],
         [          nan,           nan,           nan, ...,
          9.2068433e+02,           nan,           nan]],

        ...,

        [[          nan,           nan,           nan, ...,
          6.0471850e+11,           nan,           nan],
         [          nan,           nan,           nan, ...,
          6.0471856e+11,           nan,           nan],
         [          nan,           nan,           nan, ...,
          6.0471856e+11,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
          2.8679297e+10,           nan,           nan],
         [          nan,           nan,           nan, ...,
          1.3046843e+03,           nan,           nan],
         [          nan,           nan,           nan, ...,
          9.2068433e+02,           nan,           nan]],

        [[          nan,           nan,           nan, ...,
          6.0471850e+11,           nan,           nan],
         [          nan,           nan,           nan, ...,
          6.0471856e+11,           nan,           nan],
         [          nan,           nan,           nan, ...,
          6.0471856e+11,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
          2.8679297e+10,           nan,           nan],
         [          nan,           nan,           nan, ...,
          1.3046843e+03,           nan,           nan],
         [          nan,           nan,           nan, ...,
          9.2068433e+02,           nan,           nan]],

        [[          nan,           nan,           nan, ...,
          6.0471850e+11,           nan,           nan],
         [          nan,           nan,           nan, ...,
          6.0471856e+11,           nan,           nan],
         [          nan,           nan,           nan, ...,
          6.0471856e+11,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
          2.8679297e+10,           nan,           nan],
         [          nan,           nan,           nan, ...,
          1.3046843e+03,           nan,           nan],
         [          nan,           nan,           nan, ...,
          9.2068433e+02,           nan,           nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [11], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[          inf,           inf,           inf, ...,
          6.0471850e+11,           inf,           inf],
         [          inf,           inf,           inf, ...,
          6.0471850e+11,           inf,           inf],
         [          inf,           inf,           inf, ...,
          6.0471850e+11,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
          2.8679299e+10,           inf,           inf],
         [          inf,           inf,           inf, ...,
          1.3046843e+03,           inf,           inf],
         [          inf,           inf,           inf, ...,
          9.2068433e+02,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
          6.0471850e+11,           inf,           inf],
         [          inf,           inf,           inf, ...,
          6.0471850e+11,           inf,           inf],
         [          inf,           inf,           inf, ...,
          6.0471850e+11,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
          2.8679299e+10,           inf,           inf],
         [          inf,           inf,           inf, ...,
          1.3046843e+03,           inf,           inf],
         [          inf,           inf,           inf, ...,
          9.2068433e+02,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
          6.0471850e+11,           inf,           inf],
         [          inf,           inf,           inf, ...,
          6.0471850e+11,           inf,           inf],
         [          inf,           inf,           inf, ...,
          6.0471850e+11,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
          2.8679299e+10,           inf,           inf],
         [          inf,           inf,           inf, ...,
          1.3046843e+03,           inf,           inf],
         [          inf,           inf,           inf, ...,
          9.2068433e+02,           inf,           inf]],

        ...,

        [[          inf,           inf,           inf, ...,
          6.0471850e+11,           inf,           inf],
         [          inf,           inf,           inf, ...,
          6.0471850e+11,           inf,           inf],
         [          inf,           inf,           inf, ...,
          6.0471850e+11,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
          2.8679299e+10,           inf,           inf],
         [          inf,           inf,           inf, ...,
          1.3046843e+03,           inf,           inf],
         [          inf,           inf,           inf, ...,
          9.2068433e+02,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
          6.0471843e+11,           inf,           inf],
         [          inf,           inf,           inf, ...,
          6.0471843e+11,           inf,           inf],
         [          inf,           inf,           inf, ...,
          6.0471843e+11,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
          2.8679299e+10,           inf,           inf],
         [          inf,           inf,           inf, ...,
          1.3046843e+03,           inf,           inf],
         [          inf,           inf,           inf, ...,
          9.2068433e+02,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
          6.0471843e+11,           inf,           inf],
         [          inf,           inf,           inf, ...,
          6.0471843e+11,           inf,           inf],
         [          inf,           inf,           inf, ...,
          6.0471843e+11,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
          2.8679299e+10,           inf,           inf],
         [          inf,           inf,           inf, ...,
          1.3046843e+03,           inf,           inf],
         [          inf,           inf,           inf, ...,
          9.2068433e+02,           inf,           inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [11], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[          inf,           inf,           inf, ...,
          6.0471850e+11,           inf,           inf],
         [          inf,           inf,           inf, ...,
          6.0471850e+11,           inf,           inf],
         [          inf,           inf,           inf, ...,
          6.0471850e+11,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
          2.8679303e+10,           inf,           inf],
         [          inf,           inf,           inf, ...,
          1.3046843e+03,           inf,           inf],
         [          inf,           inf,           inf, ...,
          9.2068433e+02,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
          6.0471850e+11,           inf,           inf],
         [          inf,           inf,           inf, ...,
          6.0471850e+11,           inf,           inf],
         [          inf,           inf,           inf, ...,
          6.0471850e+11,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
          2.8679303e+10,           inf,           inf],
         [          inf,           inf,           inf, ...,
          1.3046843e+03,           inf,           inf],
         [          inf,           inf,           inf, ...,
          9.2068433e+02,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
          6.0471850e+11,           inf,           inf],
         [          inf,           inf,           inf, ...,
          6.0471850e+11,           inf,           inf],
         [          inf,           inf,           inf, ...,
          6.0471850e+11,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
          2.8679303e+10,           inf,           inf],
         [          inf,           inf,           inf, ...,
          1.3046843e+03,           inf,           inf],
         [          inf,           inf,           inf, ...,
          9.2068433e+02,           inf,           inf]],

        ...,

        [[          inf,           inf,           inf, ...,
          6.0471850e+11,           inf,           inf],
         [          inf,           inf,           inf, ...,
          6.0471850e+11,           inf,           inf],
         [          inf,           inf,           inf, ...,
          6.0471850e+11,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
          2.8679303e+10,           inf,           inf],
         [          inf,           inf,           inf, ...,
          1.3046843e+03,           inf,           inf],
         [          inf,           inf,           inf, ...,
          9.2068433e+02,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
          6.0471850e+11,           inf,           inf],
         [          inf,           inf,           inf, ...,
          6.0471850e+11,           inf,           inf],
         [          inf,           inf,           inf, ...,
          6.0471850e+11,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
          2.8679303e+10,           inf,           inf],
         [          inf,           inf,           inf, ...,
          1.3046843e+03,           inf,           inf],
         [          inf,           inf,           inf, ...,
          9.2068433e+02,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
          6.0471850e+11,           inf,           inf],
         [          inf,           inf,           inf, ...,
          6.0471850e+11,           inf,           inf],
         [          inf,           inf,           inf, ...,
          6.0471850e+11,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
          2.8679303e+10,           inf,           inf],
         [          inf,           inf,           inf, ...,
          1.3046843e+03,           inf,           inf],
         [          inf,           inf,           inf, ...,
          9.2068433e+02,           inf,           inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [11], 'to': []}

generate models:113

analyse output arrays in iter:123

pre layer res:
16:add
{'name': 'add', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [11, 21], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [16], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [16], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [16], 'to': []}

generate models:124

analyse output arrays in iter:129

pre layer res:
11:add
{'name': 'add', 'output': array([[[[12289.   , 12289.   , 12289.   , ..., 12289.   , 18106.918,
          42970.914],
         [12289.   , 12289.   , 12289.   , ...,       inf, 43975.78 ,
          41651.96 ],
         [12289.   , 12289.   ,       inf, ...,       inf,       inf,
          32753.5  ],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
          12289.   ],
         [      inf,       inf, 12289.   , ..., 12289.   , 12289.   ,
          12289.   ],
         [12289.   , 12289.   , 12289.   , ..., 12289.   , 12289.   ,
          12289.   ]],

        [[41345.125, 42339.75 , 41500.195, ..., 20798.754, 43834.918,
          43098.914],
         [41644.11 , 25560.05 , 16231.411, ...,       inf, 43975.78 ,
          32526.059],
         [14740.791, 12289.   ,       inf, ...,       inf,       inf,
          40945.5  ],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
          32932.547],
         [      inf,       inf, 16530.488, ..., 41779.62 , 44098.99 ,
          43321.92 ],
         [17116.887, 38728.203, 44098.99 , ..., 44320.53 , 43393.008,
          43321.92 ]],

        [[40442.14 , 40240.33 , 34460.195, ..., 30012.826, 43833.816,
          42970.844],
         [29228.111, 15064.05 , 12289.   , ...,       inf, 43549.887,
          33550.06 ],
         [42851.887, 42851.887,       inf, ...,       inf,       inf,
          12289.   ],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
          42275.734],
         [      inf,       inf, 44321.996, ..., 42575.5  , 44098.99 ,
          43193.92 ],
         [44098.99 , 42568.203, 44098.99 , ..., 28960.533, 40705.008,
          43193.92 ]],

        ...,

        [[41345.125, 42339.75 , 41500.195, ..., 20798.754, 43834.918,
          43098.914],
         [41644.11 , 25560.05 , 16231.411, ...,       inf, 43975.78 ,
          32526.059],
         [14740.791, 12289.   ,       inf, ...,       inf,       inf,
          40945.5  ],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
          32932.547],
         [      inf,       inf, 16530.488, ..., 41779.62 , 44098.99 ,
          43321.92 ],
         [17116.887, 38728.203, 44098.99 , ..., 44320.53 , 43393.008,
          43321.92 ]],

        [[40442.14 , 40240.33 , 34460.195, ..., 30014.754, 43834.918,
          42970.914],
         [29228.111, 15064.05 , 12289.   , ...,       inf, 43549.887,
          33550.06 ],
         [42851.887, 42851.887,       inf, ...,       inf,       inf,
          12289.   ],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
          42276.547],
         [      inf,       inf, 44321.996, ..., 42575.5  , 44098.99 ,
          43193.92 ],
         [44098.99 , 42568.203, 44098.99 , ..., 28960.533, 40705.008,
          43193.92 ]],

        [[40442.14 , 42339.75 , 12289.   , ..., 12289.   , 12289.   ,
          12289.   ],
         [13996.111, 19544.05 , 12289.   , ...,       inf, 12289.   ,
          12289.   ],
         [12289.   , 12289.   ,       inf, ...,       inf,       inf,
          12289.   ],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
          12289.   ],
         [      inf,       inf, 12289.   , ..., 12289.   , 12289.   ,
          12289.   ],
         [44098.99 , 42568.203, 12289.   , ..., 12289.   , 12289.   ,
          12289.   ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [9, 14], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[14122842., 19039186., 16264528., ...,       nan,       nan,
          16742420.],
         [19303232.,       inf,       nan, ...,       nan,       nan,
                inf],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       inf, 20813676.,
          14196413.]],

        [[14122842., 19039186., 16264528., ...,       nan,       nan,
          16742420.],
         [19303232.,       inf,       nan, ...,       nan,       nan,
                inf],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       inf, 20813676.,
          14196413.]],

        [[14122842., 19039186., 16264528., ...,       nan,       nan,
          16742420.],
         [19303232.,       inf,       nan, ...,       nan,       nan,
                inf],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       inf, 20813676.,
          14196413.]],

        ...,

        [[14122842., 19039186., 16264528., ...,       nan,       nan,
          16742420.],
         [19303232.,       inf,       nan, ...,       nan,       nan,
                inf],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       inf, 20813676.,
          14196413.]],

        [[14122842., 19039186., 16264528., ...,       nan,       nan,
          16742420.],
         [19303232.,       inf,       nan, ...,       nan,       nan,
                inf],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       inf, 20813676.,
          14196413.]],

        [[14122842., 19039186., 16264528., ...,       nan,       nan,
          16742420.],
         [19303232.,       inf,       nan, ...,       nan,       nan,
                inf],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       inf, 20813676.,
          14196413.]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [11], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[14122845., 19039188., 16264525., ...,       inf,       inf,
          16742431.],
         [19303240.,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf, 20813696.,
          14196412.]],

        [[14122845., 19039188., 16264525., ...,       inf,       inf,
          16742431.],
         [19303240.,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf, 20813696.,
          14196412.]],

        [[14122845., 19039188., 16264525., ...,       inf,       inf,
          16742431.],
         [19303240.,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf, 20813696.,
          14196412.]],

        ...,

        [[14122845., 19039188., 16264525., ...,       inf,       inf,
          16742431.],
         [19303240.,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf, 20813696.,
          14196412.]],

        [[14122847., 19039190., 16264528., ...,       inf,       inf,
          16742432.],
         [19303240.,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf, 20813696.,
          14196412.]],

        [[14122847., 19039190., 16264528., ...,       inf,       inf,
          16742432.],
         [19303240.,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf, 20813696.,
          14196412.]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [11], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[14122845., 19039188., 16264525., ...,       inf,       inf,
          16742431.],
         [19303240.,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf, 20813696.,
          14196412.]],

        [[14122845., 19039188., 16264525., ...,       inf,       inf,
          16742431.],
         [19303240.,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf, 20813696.,
          14196412.]],

        [[14122845., 19039188., 16264525., ...,       inf,       inf,
          16742431.],
         [19303240.,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf, 20813696.,
          14196412.]],

        ...,

        [[14122845., 19039188., 16264525., ...,       inf,       inf,
          16742431.],
         [19303240.,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf, 20813696.,
          14196412.]],

        [[14122845., 19039188., 16264525., ...,       inf,       inf,
          16742431.],
         [19303240.,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf, 20813696.,
          14196412.]],

        [[14122845., 19039188., 16264525., ...,       inf,       inf,
          16742431.],
         [19303240.,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf, 20813696.,
          14196412.]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [11], 'to': []}

generate models:130

analyse the exceptions in iter:140
torch exception:
{'id': 2, 'name': 'conv2d', 'frame_work': 'torch', 'input_datas': [tensor([[[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0.],
          [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
           0., 0., 0., 0., 0.]]]])]}
Given groups=1, weight of size [64, 64, 1, 1], expected input[1, 1, 28, 28] to have 64 channels, but got 1 channels instead
mindspore exception:
{'id': 2, 'name': 'conv2d', 'framework': 'mindspore', 'input_datas': [Tensor(shape=[1, 1, 28, 28], dtype=Float32, value=
[[[[0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   ...
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000]]]])]}
For 'Conv2D', 'C_in' of input 'x' shape divide by parameter 'group' must be equal to 'C_in' of input 'weight' shape: 64, but got 'C_in' of input 'x' shape: 1, and 'group': 1.

----------------------------------------------------
- C++ Call Stack: (For framework developers)
----------------------------------------------------
mindspore\core\ops\conv2d.cc:214 Conv2dInferShape


generate models:141

analyse output arrays in iter:143

pre layer res:
12:empty_seq_operator
{'name': 'empty_seq_operator', 'output': array([[[1872.6653, 2311.3796, 3374.0396, ..., 3799.3525, 2198.3628,
         2740.167 ],
        [1872.6653, 2311.3796, 3374.0396, ..., 3799.3525, 2198.3628,
         2740.167 ],
        [1872.6653, 2311.3796, 3374.0396, ..., 3799.3525, 2198.3628,
         2740.167 ],
        ...,
        [1872.6653, 2311.3796, 3374.0396, ..., 3799.3525, 2198.3628,
         2740.167 ],
        [1872.6653, 2311.3796, 3374.0396, ..., 3799.3525, 2198.3628,
         2740.167 ],
        [1872.6653, 2311.3796, 3374.0396, ..., 3799.3525, 2198.3628,
         2740.167 ]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14]), 'from': [21], 'to': [27]}
tf node:
{'name': 'sin', 'output': array([[[ 0.27256855, -0.7396529 , -0.03095423, ..., -0.9195842 ,
         -0.6831479 ,  0.6428386 ],
        [ 0.27256855, -0.7396529 , -0.03095423, ..., -0.9195842 ,
         -0.6831479 ,  0.6428386 ],
        [ 0.27256855, -0.7396529 , -0.03095423, ..., -0.9195842 ,
         -0.6831479 ,  0.6428386 ],
        ...,
        [ 0.27256855, -0.7396529 , -0.03095423, ..., -0.9195842 ,
         -0.6831479 ,  0.6428386 ],
        [ 0.27256855, -0.7396529 , -0.03095423, ..., -0.9195842 ,
         -0.6831479 ,  0.6428386 ],
        [ 0.27256855, -0.7396529 , -0.03095423, ..., -0.9195842 ,
         -0.6831479 ,  0.6428386 ]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14]), 'from': [12], 'to': [20]}
ms node:
{'name': 'sin', 'output': array([[[ 0.2724511 , -0.7396529 , -0.03144227, ..., -0.9195842 ,
         -0.6833262 ,  0.6424645 ],
        [ 0.2724511 , -0.7396529 , -0.03144227, ..., -0.9195842 ,
         -0.6833262 ,  0.6424645 ],
        [ 0.2724511 , -0.7396529 , -0.03144227, ..., -0.9195842 ,
         -0.6833262 ,  0.6424645 ],
        ...,
        [ 0.2724511 , -0.7396529 , -0.03144227, ..., -0.9195842 ,
         -0.6833262 ,  0.6424645 ],
        [ 0.27256855, -0.7396529 , -0.03095423, ..., -0.91977596,
         -0.6831479 ,  0.64227736],
        [ 0.27256855, -0.7396529 , -0.03095423, ..., -0.91977596,
         -0.6831479 ,  0.64227736]]], dtype=float32), 'output_shape': (1, 128, 14), 'from': [12], 'to': [20]}
torch node:
{'name': 'sin', 'output': array([[[ 0.27256855, -0.7396528 , -0.03046618, ..., -0.9196801 ,
         -0.6831479 ,  0.6428386 ],
        [ 0.27256855, -0.7396528 , -0.03046618, ..., -0.9196801 ,
         -0.6831479 ,  0.6428386 ],
        [ 0.27256855, -0.7396528 , -0.03046618, ..., -0.9196801 ,
         -0.6831479 ,  0.6428386 ],
        ...,
        [ 0.27256855, -0.7396528 , -0.03046618, ..., -0.9196801 ,
         -0.6831479 ,  0.6428386 ],
        [ 0.27256855, -0.7396528 , -0.03046618, ..., -0.9196801 ,
         -0.6831479 ,  0.6428386 ],
        [ 0.27256855, -0.7396528 , -0.03046618, ..., -0.9196801 ,
         -0.6831479 ,  0.6428386 ]]], dtype=float32), 'output_shape': torch.Size([1, 128, 14]), 'from': [12], 'to': [20]}

generate models:144

analyse output arrays in iter:154

pre layer res:
22:reshape
{'name': 'reshape', 'output': array([[[[1.0000e+00, 1.0000e+00, 1.0000e+00, ..., 1.0000e+00,
          1.0000e+00, 1.0000e+00],
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         [       inf,        inf,        inf, ...,        inf,
                 inf, 1.0000e+00],
         ...,
         [1.0000e+00, 1.0000e+00, 1.0000e+00, ..., 1.0000e+00,
          1.0000e+00, 1.0000e+00],
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf]],

        [[       inf, 1.4090e+03, 1.0000e+00, ..., 1.0000e+00,
          1.0000e+00, 1.0000e+00],
         [1.0000e+00, 1.0000e+00, 1.0000e+00, ..., 1.6193e+04,
          1.6193e+04,        inf],
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         ...,
         [       inf, 1.6193e+04, 1.6193e+04, ..., 1.0000e+00,
          1.0000e+00, 1.0000e+00],
         [1.0000e+00, 1.0000e+00, 2.3050e+03, ..., 1.6001e+04,
                 inf,        inf],
         [       inf,        inf,        inf, ..., 1.0000e+00,
          1.0000e+00,        inf]],

        [[       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         [       inf, 1.5937e+04, 1.6065e+04, ..., 1.0000e+00,
          1.0000e+00, 1.0000e+00],
         [1.0000e+00, 1.0000e+00, 1.0000e+00, ..., 1.0000e+00,
                 inf,        inf],
         ...,
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         [9.4090e+03, 1.6193e+04, 1.0890e+03, ..., 1.0000e+00,
          1.0000e+00, 1.0000e+00],
         [1.0000e+00, 1.0000e+00, 1.0000e+00, ..., 1.0000e+00,
                 inf,        inf]],

        ...,

        [[       inf, 1.4090e+03, 1.0000e+00, ..., 1.0000e+00,
          1.0000e+00, 1.0000e+00],
         [1.0000e+00, 1.0000e+00, 1.0000e+00, ..., 1.6193e+04,
          1.6193e+04,        inf],
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         ...,
         [       inf, 1.6193e+04, 1.6193e+04, ..., 1.0000e+00,
          1.0000e+00, 1.0000e+00],
         [1.0000e+00, 1.0000e+00, 2.3050e+03, ..., 1.6001e+04,
                 inf,        inf],
         [       inf,        inf,        inf, ..., 1.0000e+00,
          1.0000e+00,        inf]],

        [[       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         [       inf, 1.5937e+04, 1.6065e+04, ..., 1.0000e+00,
          1.0000e+00, 1.0000e+00],
         [1.0000e+00, 1.0000e+00, 1.0000e+00, ..., 1.0000e+00,
                 inf,        inf],
         ...,
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         [9.4090e+03, 1.6193e+04, 1.0890e+03, ..., 1.0000e+00,
          1.0000e+00, 1.0000e+00],
         [1.0000e+00, 1.0000e+00, 1.0000e+00, ..., 1.0000e+00,
                 inf,        inf]],

        [[       inf,        inf, 1.0000e+00, ...,        inf,
                 inf,        inf],
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         [1.6193e+04, 4.0970e+03, 1.0000e+00, ..., 1.0000e+00,
          1.0000e+00, 1.0000e+00],
         ...,
         [       inf,        inf,        inf, ...,        inf,
                 inf,        inf],
         [       inf,        inf,        inf, ...,        inf,
                 inf, 2.5700e+02],
         [1.0433e+04, 5.3130e+03, 1.0000e+00, ..., 1.0000e+00,
          1.0000e+00, 1.0000e+00]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [21], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [22], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [22], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [22], 'to': []}

generate models:155

analyse output arrays in iter:161

pre layer res:
21:add
{'name': 'add', 'output': array([[[[8.193000e+03, 8.193000e+03, 8.193000e+03, ..., 8.193000e+03,
          8.193000e+03, 8.193000e+03],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         ...,
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [8.193000e+03, 8.193000e+03, 8.193000e+03, ..., 8.193000e+03,
          8.193000e+03, 8.193000e+03]],

        [[8.193000e+03, 8.193000e+03, 8.193000e+03, ..., 8.193000e+03,
          8.193000e+03, 8.193000e+03],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         ...,
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [8.193000e+03, 8.193000e+03, 8.193000e+03, ..., 8.193000e+03,
          8.193000e+03, 8.193000e+03]],

        [[8.193000e+03, 8.193000e+03, 8.193000e+03, ..., 8.193000e+03,
          8.193000e+03, 8.193000e+03],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         ...,
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [8.471724e+30, 8.471724e+30, 8.471724e+30, ..., 8.471724e+30,
          8.471724e+30, 8.471724e+30]],

        ...,

        [[8.193000e+03, 8.193000e+03, 8.193000e+03, ..., 8.193000e+03,
          8.193000e+03, 8.193000e+03],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         ...,
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [8.193000e+03, 8.193000e+03, 8.193000e+03, ..., 8.193000e+03,
          8.193000e+03, 8.193000e+03]],

        [[8.193000e+03, 8.193000e+03, 8.193000e+03, ..., 8.193000e+03,
          8.193000e+03, 8.193000e+03],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         ...,
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [8.193000e+03, 8.193000e+03, 8.193000e+03, ..., 8.193000e+03,
          8.193000e+03, 8.193000e+03]],

        [[8.193000e+03, 8.193000e+03, 8.193000e+03, ..., 8.193000e+03,
          8.193000e+03, 8.193000e+03],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         ...,
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [         inf,          inf,          inf, ...,          inf,
                   inf,          inf],
         [8.193000e+03, 8.193000e+03, 8.193000e+03, ..., 8.193000e+03,
          8.193000e+03, 8.193000e+03]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [9, 24], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [21], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [21], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [21], 'to': []}

generate models:162

analyse output arrays in iter:171

pre layer res:
16:log
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [14], 'to': [9]}
tf node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        ...,

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [16], 'to': [10]}
ms node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        ...,

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': (1, 128, 7, 7), 'from': [16], 'to': [10]}
torch node:
{'name': 'maxpool2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 7, 7]), 'from': [16], 'to': [10]}

generate models:172

analyse output arrays in iter:180

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[5.2428900e+05, 5.2428900e+05, 5.2428900e+05, ...,
          5.2428900e+05, 5.2428900e+05, 5.2428900e+05],
         [5.2428900e+05, 5.2428900e+05, 5.2428900e+05, ...,
          5.2428900e+05, 5.2428900e+05, 5.2428900e+05],
         [5.2428900e+05, 5.2428900e+05, 5.2428900e+05, ...,
          5.9874164e+31,           inf, 5.2428900e+05],
         ...,
         [5.2428900e+05,           inf,           inf, ...,
                    inf,           inf, 5.2428900e+05],
         [5.2428900e+05, 5.2428900e+05, 5.2428900e+05, ...,
          5.2428900e+05, 5.2428900e+05, 5.2428900e+05],
         [5.2428900e+05, 5.2428900e+05, 5.2428900e+05, ...,
          5.2428900e+05, 5.2428900e+05, 5.2428900e+05]],

        [[5.2428900e+05, 5.2428900e+05, 5.2428900e+05, ...,
          5.2428900e+05, 5.2428900e+05, 5.2428900e+05],
         [5.2428900e+05, 5.2428900e+05, 5.2428900e+05, ...,
          5.2428900e+05, 5.2428900e+05, 5.2428900e+05],
         [5.2428900e+05, 5.2428900e+05, 5.2428900e+05, ...,
          5.9874164e+31,           inf, 5.2428900e+05],
         ...,
         [5.2428900e+05,           inf,           inf, ...,
                    inf,           inf, 5.2428900e+05],
         [5.2428900e+05, 5.2428900e+05, 5.2428900e+05, ...,
          5.2428900e+05, 5.2428900e+05, 5.2428900e+05],
         [5.2428900e+05, 5.2428900e+05, 5.2428900e+05, ...,
          5.2428900e+05, 5.2428900e+05, 5.2428900e+05]],

        [[5.2428900e+05, 5.2428900e+05, 5.2428900e+05, ...,
          5.2428900e+05, 5.2428900e+05, 5.2428900e+05],
         [5.2428900e+05, 5.2428900e+05, 5.2428900e+05, ...,
          5.2428900e+05, 5.2428900e+05, 5.2428900e+05],
         [5.2428900e+05, 5.2428900e+05, 5.2428900e+05, ...,
          5.9874164e+31,           inf, 5.2428900e+05],
         ...,
         [5.2428900e+05,           inf,           inf, ...,
                    inf,           inf, 5.2428900e+05],
         [5.2428900e+05, 5.2428900e+05, 5.2428900e+05, ...,
          5.2428900e+05, 5.2428900e+05, 5.2428900e+05],
         [5.2428900e+05, 5.2428900e+05, 5.2428900e+05, ...,
          5.2428900e+05, 5.2428900e+05, 5.2428900e+05]],

        ...,

        [[5.2428900e+05, 5.2428900e+05, 5.2428900e+05, ...,
          5.2428900e+05, 5.2428900e+05, 5.2428900e+05],
         [5.2428900e+05, 5.2428900e+05, 5.2428900e+05, ...,
          5.2428900e+05, 5.2428900e+05, 5.2428900e+05],
         [5.2428900e+05, 5.2428900e+05, 5.2428900e+05, ...,
          5.9874164e+31,           inf, 5.2428900e+05],
         ...,
         [5.2428900e+05,           inf,           inf, ...,
                    inf,           inf, 5.2428900e+05],
         [5.2428900e+05, 5.2428900e+05, 5.2428900e+05, ...,
          5.2428900e+05, 5.2428900e+05, 5.2428900e+05],
         [5.2428900e+05, 5.2428900e+05, 5.2428900e+05, ...,
          5.2428900e+05, 5.2428900e+05, 5.2428900e+05]],

        [[5.2428900e+05, 5.2428900e+05, 5.2428900e+05, ...,
          5.2428900e+05, 5.2428900e+05, 5.2428900e+05],
         [5.2428900e+05, 5.2428900e+05, 5.2428900e+05, ...,
          5.2428900e+05, 5.2428900e+05, 5.2428900e+05],
         [5.2428900e+05, 5.2428900e+05, 5.2428900e+05, ...,
          5.9874164e+31,           inf, 5.2428900e+05],
         ...,
         [5.2428900e+05,           inf,           inf, ...,
                    inf,           inf, 5.2428900e+05],
         [5.2428900e+05, 5.2428900e+05, 5.2428900e+05, ...,
          5.2428900e+05, 5.2428900e+05, 5.2428900e+05],
         [5.2428900e+05, 5.2428900e+05, 5.2428900e+05, ...,
          5.2428900e+05, 5.2428900e+05, 5.2428900e+05]],

        [[5.2428900e+05, 5.2428900e+05, 5.2428900e+05, ...,
          5.2428900e+05, 5.2428900e+05, 5.2428900e+05],
         [5.2428900e+05, 5.2428900e+05, 5.2428900e+05, ...,
          5.2428900e+05, 5.2428900e+05, 5.2428900e+05],
         [5.2428900e+05, 5.2428900e+05, 5.2428900e+05, ...,
          5.9874164e+31,           inf, 5.2428900e+05],
         ...,
         [5.2428900e+05,           inf,           inf, ...,
                    inf,           inf, 5.2428900e+05],
         [5.2428900e+05, 5.2428900e+05, 5.2428900e+05, ...,
          5.2428900e+05, 5.2428900e+05, 5.2428900e+05],
         [5.2428900e+05, 5.2428900e+05, 5.2428900e+05, ...,
          5.2428900e+05, 5.2428900e+05, 5.2428900e+05]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [8], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[2.6843587e+08, 4.0265373e+08, 4.0265373e+08, ...,
          4.0265373e+08, 4.0265373e+08, 2.6843578e+08],
         [4.0265373e+08, 6.0398048e+08, 6.0398048e+08, ...,
                    nan,           nan,           inf],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [2.6843581e+08, 4.0265363e+08, 4.0265363e+08, ...,
          4.0265363e+08, 4.0265363e+08, 2.6843571e+08]],

        [[2.6843587e+08, 4.0265373e+08, 4.0265373e+08, ...,
          4.0265373e+08, 4.0265373e+08, 2.6843578e+08],
         [4.0265373e+08, 6.0398048e+08, 6.0398048e+08, ...,
                    nan,           nan,           inf],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [2.6843581e+08, 4.0265363e+08, 4.0265363e+08, ...,
          4.0265363e+08, 4.0265363e+08, 2.6843571e+08]],

        [[2.6843587e+08, 4.0265373e+08, 4.0265373e+08, ...,
          4.0265373e+08, 4.0265373e+08, 2.6843578e+08],
         [4.0265373e+08, 6.0398048e+08, 6.0398048e+08, ...,
                    nan,           nan,           inf],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [2.6843581e+08, 4.0265363e+08, 4.0265363e+08, ...,
          4.0265363e+08, 4.0265363e+08, 2.6843571e+08]],

        ...,

        [[2.6843587e+08, 4.0265373e+08, 4.0265373e+08, ...,
          4.0265373e+08, 4.0265373e+08, 2.6843578e+08],
         [4.0265373e+08, 6.0398048e+08, 6.0398048e+08, ...,
                    nan,           nan,           inf],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [2.6843581e+08, 4.0265363e+08, 4.0265363e+08, ...,
          4.0265363e+08, 4.0265363e+08, 2.6843571e+08]],

        [[2.6843587e+08, 4.0265373e+08, 4.0265373e+08, ...,
          4.0265373e+08, 4.0265373e+08, 2.6843578e+08],
         [4.0265373e+08, 6.0398048e+08, 6.0398048e+08, ...,
                    nan,           nan,           inf],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [2.6843581e+08, 4.0265363e+08, 4.0265363e+08, ...,
          4.0265363e+08, 4.0265363e+08, 2.6843571e+08]],

        [[2.6843587e+08, 4.0265373e+08, 4.0265373e+08, ...,
          4.0265373e+08, 4.0265373e+08, 2.6843578e+08],
         [4.0265373e+08, 6.0398048e+08, 6.0398048e+08, ...,
                    nan,           nan,           inf],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         ...,
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [          nan,           nan,           nan, ...,
                    nan,           nan,           nan],
         [2.6843581e+08, 4.0265363e+08, 4.0265363e+08, ...,
          4.0265363e+08, 4.0265363e+08, 2.6843571e+08]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[2.6843565e+08, 4.0265338e+08, 4.0265338e+08, ...,
          4.0265338e+08, 4.0265338e+08, 2.6843565e+08],
         [4.0265338e+08, 6.0397997e+08, 6.0397997e+08, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [2.6843565e+08, 4.0265338e+08, 4.0265338e+08, ...,
          4.0265338e+08, 4.0265338e+08, 2.6843584e+08]],

        [[2.6843565e+08, 4.0265338e+08, 4.0265338e+08, ...,
          4.0265338e+08, 4.0265338e+08, 2.6843565e+08],
         [4.0265338e+08, 6.0397997e+08, 6.0397997e+08, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [2.6843565e+08, 4.0265338e+08, 4.0265338e+08, ...,
          4.0265338e+08, 4.0265338e+08, 2.6843584e+08]],

        [[2.6843565e+08, 4.0265338e+08, 4.0265338e+08, ...,
          4.0265338e+08, 4.0265338e+08, 2.6843565e+08],
         [4.0265338e+08, 6.0397997e+08, 6.0397997e+08, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [2.6843565e+08, 4.0265338e+08, 4.0265338e+08, ...,
          4.0265338e+08, 4.0265338e+08, 2.6843584e+08]],

        ...,

        [[2.6843565e+08, 4.0265338e+08, 4.0265338e+08, ...,
          4.0265338e+08, 4.0265338e+08, 2.6843565e+08],
         [4.0265338e+08, 6.0397997e+08, 6.0397997e+08, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [2.6843565e+08, 4.0265338e+08, 4.0265338e+08, ...,
          4.0265338e+08, 4.0265338e+08, 2.6843584e+08]],

        [[2.6843584e+08, 4.0265357e+08, 4.0265357e+08, ...,
          4.0265357e+08, 4.0265357e+08, 2.6843584e+08],
         [4.0265357e+08, 6.0398016e+08, 6.0398016e+08, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [2.6843584e+08, 4.0265357e+08, 4.0265357e+08, ...,
          4.0265357e+08, 4.0265357e+08, 2.6843584e+08]],

        [[2.6843584e+08, 4.0265357e+08, 4.0265357e+08, ...,
          4.0265357e+08, 4.0265357e+08, 2.6843584e+08],
         [4.0265357e+08, 6.0398016e+08, 6.0398016e+08, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [2.6843584e+08, 4.0265357e+08, 4.0265357e+08, ...,
          4.0265357e+08, 4.0265357e+08, 2.6843584e+08]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[2.6843565e+08, 4.0265338e+08, 4.0265338e+08, ...,
          4.0265338e+08, 4.0265338e+08, 2.6843565e+08],
         [4.0265338e+08, 6.0397997e+08, 6.0397997e+08, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [2.6843565e+08, 4.0265338e+08, 4.0265338e+08, ...,
          4.0265338e+08, 4.0265338e+08, 2.6843584e+08]],

        [[2.6843565e+08, 4.0265338e+08, 4.0265338e+08, ...,
          4.0265338e+08, 4.0265338e+08, 2.6843565e+08],
         [4.0265338e+08, 6.0397997e+08, 6.0397997e+08, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [2.6843565e+08, 4.0265338e+08, 4.0265338e+08, ...,
          4.0265338e+08, 4.0265338e+08, 2.6843584e+08]],

        [[2.6843565e+08, 4.0265338e+08, 4.0265338e+08, ...,
          4.0265338e+08, 4.0265338e+08, 2.6843565e+08],
         [4.0265338e+08, 6.0397997e+08, 6.0397997e+08, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [2.6843565e+08, 4.0265338e+08, 4.0265338e+08, ...,
          4.0265338e+08, 4.0265338e+08, 2.6843584e+08]],

        ...,

        [[2.6843565e+08, 4.0265338e+08, 4.0265338e+08, ...,
          4.0265338e+08, 4.0265338e+08, 2.6843565e+08],
         [4.0265338e+08, 6.0397997e+08, 6.0397997e+08, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [2.6843565e+08, 4.0265338e+08, 4.0265338e+08, ...,
          4.0265338e+08, 4.0265338e+08, 2.6843584e+08]],

        [[2.6843565e+08, 4.0265338e+08, 4.0265338e+08, ...,
          4.0265338e+08, 4.0265338e+08, 2.6843565e+08],
         [4.0265338e+08, 6.0397997e+08, 6.0397997e+08, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [2.6843565e+08, 4.0265338e+08, 4.0265338e+08, ...,
          4.0265338e+08, 4.0265338e+08, 2.6843584e+08]],

        [[2.6843565e+08, 4.0265338e+08, 4.0265338e+08, ...,
          4.0265338e+08, 4.0265338e+08, 2.6843565e+08],
         [4.0265338e+08, 6.0397997e+08, 6.0397997e+08, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [2.6843565e+08, 4.0265338e+08, 4.0265338e+08, ...,
          4.0265338e+08, 4.0265338e+08, 2.6843584e+08]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [9], 'to': []}

generate models:181

analyse output arrays in iter:189

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[8193., 8193., 8193., ..., 8193., 8193., 8193.],
         [8193., 8193.,   inf, ...,   inf,   inf, 8193.],
         [8193.,   inf,   inf, ...,   inf,   inf, 8193.],
         ...,
         [8193.,   inf,   inf, ...,   inf,   inf, 8193.],
         [8193., 8193., 8193., ...,   inf,   inf, 8193.],
         [8193., 8193., 8193., ...,   inf, 8193., 8193.]],

        [[8193., 8193., 8193., ..., 8193., 8193., 8193.],
         [8193., 8193.,   inf, ...,   inf,   inf, 8193.],
         [8193.,   inf,   inf, ...,   inf,   inf, 8193.],
         ...,
         [8193.,   inf,   inf, ...,   inf,   inf, 8193.],
         [8193., 8193., 8193., ...,   inf,   inf, 8193.],
         [8193., 8193., 8193., ...,   inf, 8193., 8193.]],

        [[8193., 8193., 8193., ..., 8193., 8193., 8193.],
         [8193., 8193.,   inf, ...,   inf,   inf, 8193.],
         [8193.,   inf,   inf, ...,   inf,   inf, 8193.],
         ...,
         [8193.,   inf,   inf, ...,   inf,   inf, 8193.],
         [8193., 8193., 8193., ...,   inf,   inf, 8193.],
         [8193., 8193., 8193., ...,   inf, 8193., 8193.]],

        ...,

        [[8192., 8192., 8192., ..., 8192., 8192., 8192.],
         [8192., 8192.,   inf, ...,   inf,   inf, 8192.],
         [8192.,   inf,   inf, ...,   inf,   inf, 8192.],
         ...,
         [8192.,   inf,   inf, ...,   inf,   inf, 8192.],
         [8192., 8192., 8192., ...,   inf,   inf, 8192.],
         [8192., 8192., 8192., ...,   inf, 8192., 8192.]],

        [[8192., 8192., 8192., ..., 8192., 8192., 8192.],
         [8192., 8192.,   inf, ...,   inf,   inf, 8192.],
         [8192.,   inf,   inf, ...,   inf,   inf, 8192.],
         ...,
         [8192.,   inf,   inf, ...,   inf,   inf, 8192.],
         [8192., 8192., 8192., ...,   inf,   inf, 8192.],
         [8192., 8192., 8192., ...,   inf, 8192., 8192.]],

        [[8192., 8192., 8192., ..., 8192., 8192., 8192.],
         [8192., 8192.,   inf, ...,   inf,   inf, 8192.],
         [8192.,   inf,   inf, ...,   inf,   inf, 8192.],
         ...,
         [8192.,   inf,   inf, ...,   inf,   inf, 8192.],
         [8192., 8192., 8192., ...,   inf,   inf, 8192.],
         [8192., 8192., 8192., ...,   inf, 8192., 8192.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [8], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[4194560.,      nan,      nan, ...,      nan,      nan,
               nan],
         [     nan,      nan,      nan, ...,      nan,      nan,
               nan],
         [     nan,      nan,      nan, ...,      nan,      nan,
               nan],
         ...,
         [     nan,      nan,      nan, ...,      nan,      nan,
               nan],
         [     nan,      nan,      nan, ...,      nan,      nan,
               nan],
         [4194560., 6291840., 6291840., ...,      nan,      nan,
               inf]],

        [[4194560.,      nan,      nan, ...,      nan,      nan,
               nan],
         [     nan,      nan,      nan, ...,      nan,      nan,
               nan],
         [     nan,      nan,      nan, ...,      nan,      nan,
               nan],
         ...,
         [     nan,      nan,      nan, ...,      nan,      nan,
               nan],
         [     nan,      nan,      nan, ...,      nan,      nan,
               nan],
         [4194560., 6291840., 6291840., ...,      nan,      nan,
               inf]],

        [[4194560.,      nan,      nan, ...,      nan,      nan,
               nan],
         [     nan,      nan,      nan, ...,      nan,      nan,
               nan],
         [     nan,      nan,      nan, ...,      nan,      nan,
               nan],
         ...,
         [     nan,      nan,      nan, ...,      nan,      nan,
               nan],
         [     nan,      nan,      nan, ...,      nan,      nan,
               nan],
         [4194560., 6291840., 6291840., ...,      nan,      nan,
               inf]],

        ...,

        [[4194560.,      nan,      nan, ...,      nan,      nan,
               nan],
         [     nan,      nan,      nan, ...,      nan,      nan,
               nan],
         [     nan,      nan,      nan, ...,      nan,      nan,
               nan],
         ...,
         [     nan,      nan,      nan, ...,      nan,      nan,
               nan],
         [     nan,      nan,      nan, ...,      nan,      nan,
               nan],
         [4194560., 6291840., 6291840., ...,      nan,      nan,
               inf]],

        [[4194560.,      nan,      nan, ...,      nan,      nan,
               nan],
         [     nan,      nan,      nan, ...,      nan,      nan,
               nan],
         [     nan,      nan,      nan, ...,      nan,      nan,
               nan],
         ...,
         [     nan,      nan,      nan, ...,      nan,      nan,
               nan],
         [     nan,      nan,      nan, ...,      nan,      nan,
               nan],
         [4194560., 6291840., 6291840., ...,      nan,      nan,
               inf]],

        [[4194560.,      nan,      nan, ...,      nan,      nan,
               nan],
         [     nan,      nan,      nan, ...,      nan,      nan,
               nan],
         [     nan,      nan,      nan, ...,      nan,      nan,
               nan],
         ...,
         [     nan,      nan,      nan, ...,      nan,      nan,
               nan],
         [     nan,      nan,      nan, ...,      nan,      nan,
               nan],
         [4194560., 6291840., 6291840., ...,      nan,      nan,
               inf]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[4194560.,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         ...,
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [4194560., 6291840., 6291840., ...,      inf,      inf,
               inf]],

        [[4194560.,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         ...,
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [4194560., 6291840., 6291840., ...,      inf,      inf,
               inf]],

        [[4194560.,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         ...,
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [4194560., 6291840., 6291840., ...,      inf,      inf,
               inf]],

        ...,

        [[4194560.,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         ...,
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [4194560., 6291840., 6291840., ...,      inf,      inf,
               inf]],

        [[4194560.,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         ...,
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [4194560., 6291840., 6291840., ...,      inf,      inf,
               inf]],

        [[4194560.,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         ...,
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [4194560., 6291840., 6291840., ...,      inf,      inf,
               inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[4194560.,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         ...,
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [4194560., 6291840., 6291840., ...,      inf,      inf,
               inf]],

        [[4194560.,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         ...,
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [4194560., 6291840., 6291840., ...,      inf,      inf,
               inf]],

        [[4194560.,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         ...,
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [4194560., 6291840., 6291840., ...,      inf,      inf,
               inf]],

        ...,

        [[4194560.,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         ...,
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [4194560., 6291840., 6291840., ...,      inf,      inf,
               inf]],

        [[4194560.,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         ...,
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [4194560., 6291840., 6291840., ...,      inf,      inf,
               inf]],

        [[4194560.,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         ...,
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf,      inf,
               inf],
         [4194560., 6291840., 6291840., ...,      inf,      inf,
               inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [9], 'to': []}

generate models:190

analyse output arrays in iter:196

pre layer res:
8:relu
{'name': 'relu', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [7], 'to': [17]}
tf node:
{'name': 'softmax', 'output': array([[[[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        ...,

        [[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [8], 'to': [9]}
ms node:
{'name': 'softmax', 'output': array([[[[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        ...,

        [[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]]]], dtype=float32), 'output_shape': (1, 128, 14, 14), 'from': [8], 'to': [9]}
torch node:
{'name': 'softmax', 'output': array([[[[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        ...,

        [[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         [0.07142857, 0.07142857, 0.07142857, ..., 0.07142857,
          0.07142857, 0.07142857],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 14, 14]), 'from': [8], 'to': [9]}

generate models:197

analyse the exceptions in iter:199
torch exception:
{'id': 7, 'name': 'conv2d', 'frame_work': 'torch', 'input_datas': [tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         ...,

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])]}
Given groups=1, weight of size [128, 128, 1, 1], expected input[1, 64, 14, 14] to have 128 channels, but got 64 channels instead
mindspore exception:
{'id': 7, 'name': 'conv2d', 'framework': 'mindspore', 'input_datas': [Tensor(shape=[1, 64, 14, 14], dtype=Float32, value=
[[[[0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   ...
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000]],
  [[0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   ...
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000]],
  [[0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   ...
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000]],
  ...
  [[0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   ...
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000]],
  [[0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   ...
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000]],
  [[0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   ...
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000]]]])]}
For 'Conv2D', 'C_in' of input 'x' shape divide by parameter 'group' must be equal to 'C_in' of input 'weight' shape: 128, but got 'C_in' of input 'x' shape: 64, and 'group': 1.

----------------------------------------------------
- C++ Call Stack: (For framework developers)
----------------------------------------------------
mindspore\core\ops\conv2d.cc:214 Conv2dInferShape


generate models:200

analyse output arrays in iter:202

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [16], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [9], 'to': []}

generate models:203

analyse output arrays in iter:236

pre layer res:
23:square
{'name': 'square', 'output': array([[[[4096., 4096., 4096., ..., 4096., 4096., 4096.],
         [4096., 4096., 4096., ...,   inf,   inf, 4096.],
         [4096., 4096., 4096., ..., 4096., 4096., 4096.],
         ...,
         [4096., 4096., 4096., ..., 4096., 4096., 4096.],
         [4096., 4096., 4096., ..., 4096., 4096., 4096.],
         [4096., 4096., 4096., ..., 4096., 4096., 4096.]],

        [[4096., 4096., 4096., ..., 4096., 4096., 4096.],
         [4096., 4096., 4096., ...,   inf,   inf, 4096.],
         [4096., 4096., 4096., ..., 4096., 4096., 4096.],
         ...,
         [4096., 4096., 4096., ..., 4096., 4096., 4096.],
         [4096., 4096., 4096., ..., 4096., 4096., 4096.],
         [4096., 4096., 4096., ..., 4096., 4096., 4096.]],

        [[4096., 4096., 4096., ..., 4096., 4096., 4096.],
         [4096., 4096., 4096., ...,   inf,   inf, 4096.],
         [4096., 4096., 4096., ..., 4096., 4096., 4096.],
         ...,
         [4096., 4096., 4096., ..., 4096., 4096., 4096.],
         [4096., 4096., 4096., ..., 4096., 4096., 4096.],
         [4096., 4096., 4096., ..., 4096., 4096., 4096.]],

        ...,

        [[4096., 4096., 4096., ..., 4096., 4096., 4096.],
         [4096., 4096., 4096., ...,   inf,   inf, 4096.],
         [4096., 4096., 4096., ..., 4096., 4096., 4096.],
         ...,
         [4096., 4096., 4096., ..., 4096., 4096., 4096.],
         [4096., 4096., 4096., ..., 4096., 4096., 4096.],
         [4096., 4096., 4096., ..., 4096., 4096., 4096.]],

        [[4096., 4096., 4096., ..., 4096., 4096., 4096.],
         [4096., 4096., 4096., ...,   inf,   inf, 4096.],
         [4096., 4096., 4096., ..., 4096., 4096., 4096.],
         ...,
         [4096., 4096., 4096., ..., 4096., 4096., 4096.],
         [4096., 4096., 4096., ..., 4096., 4096., 4096.],
         [4096., 4096., 4096., ..., 4096., 4096., 4096.]],

        [[4096., 4096., 4096., ..., 4096., 4096., 4096.],
         [4096., 4096., 4096., ...,   inf,   inf, 4096.],
         [4096., 4096., 4096., ..., 4096., 4096., 4096.],
         ...,
         [4096., 4096., 4096., ..., 4096., 4096., 4096.],
         [4096., 4096., 4096., ..., 4096., 4096., 4096.],
         [4096., 4096., 4096., ..., 4096., 4096., 4096.]]]], dtype=float32), 'output_shape': TensorShape([1, 16, 28, 28]), 'from': [14], 'to': [24]}
tf node:
{'name': 'softmax', 'output': array([[[[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        ...,

        [[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]]]], dtype=float32), 'output_shape': TensorShape([1, 16, 28, 28]), 'from': [23], 'to': [11]}
ms node:
{'name': 'softmax', 'output': array([[[[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.        , 0.        , 0.        , ...,        nan,
                 nan, 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.        , 0.        , 0.        , ...,        nan,
                 nan, 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.        , 0.        , 0.        , ...,        nan,
                 nan, 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        ...,

        [[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.        , 0.        , 0.        , ...,        nan,
                 nan, 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.        , 0.        , 0.        , ...,        nan,
                 nan, 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.        , 0.        , 0.        , ...,        nan,
                 nan, 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]]]], dtype=float32), 'output_shape': (1, 16, 28, 28), 'from': [23], 'to': [11]}
torch node:
{'name': 'softmax', 'output': array([[[[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        ...,

        [[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]]]], dtype=float32), 'output_shape': torch.Size([1, 16, 28, 28]), 'from': [23], 'to': [11]}

generate models:237

analyse output arrays in iter:239

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ..., inf, inf,  1.],
         [ 1.,  1., inf, ..., inf, inf,  1.],
         ...,
         [ 1., inf, inf, ..., inf,  1.,  1.],
         [ 1., inf, inf, ..., inf,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]],

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ..., inf, inf,  1.],
         [ 1.,  1., inf, ..., inf, inf,  1.],
         ...,
         [ 1., inf, inf, ..., inf,  1.,  1.],
         [ 1., inf, inf, ..., inf,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]],

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ..., inf, inf,  1.],
         [ 1.,  1., inf, ..., inf, inf,  1.],
         ...,
         [ 1., inf, inf, ..., inf,  1.,  1.],
         [ 1., inf, inf, ..., inf,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]],

        ...,

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ..., inf, inf,  1.],
         [ 1.,  1., inf, ..., inf, inf,  1.],
         ...,
         [ 1., inf, inf, ..., inf,  1.,  1.],
         [ 1., inf, inf, ..., inf,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]],

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ..., inf, inf,  1.],
         [ 1.,  1., inf, ..., inf, inf,  1.],
         ...,
         [ 1., inf, inf, ..., inf,  1.,  1.],
         [ 1., inf, inf, ..., inf,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]],

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ..., inf, inf,  1.],
         [ 1.,  1., inf, ..., inf, inf,  1.],
         ...,
         [ 1., inf, inf, ..., inf,  1.,  1.],
         [ 1., inf, inf, ..., inf,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [15], 'to': [20]}
23:reshape
{'name': 'reshape', 'output': array([[[[      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[ 9.930325 , 10.313742 , 10.117308 , ..., 10.790885 ,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf, 10.373491 ],
         [10.389364 , 10.38542  , 10.38542  , ..., 10.298768 ,
                -inf,       -inf],
         ...,
         [10.227308 ,  9.945781 ,  8.946375 , ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
          10.38542  , 10.38542  ],
         [10.389364 , 10.213323 ,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[      -inf,       -inf,       -inf, ...,       -inf,
           7.1546154,  9.734832 ],
         [10.389364 , 10.393293 , 10.389364 , ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf, 10.389364 , ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf, 10.303069 , ..., 10.315862 ,
           7.336937 ,       -inf],
         [ 8.702178 , 10.38542  , 10.38542  , ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ..., 10.38542  ,
          10.38542  , 10.38542  ]],

        ...,

        [[ 9.930325 , 10.313742 , 10.117308 , ..., 10.790885 ,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf, 10.373491 ],
         [10.389364 , 10.38542  , 10.38542  , ..., 10.298768 ,
                -inf,       -inf],
         ...,
         [10.227308 ,  9.945781 ,  8.946375 , ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
          10.38542  , 10.38542  ],
         [10.389364 , 10.213323 ,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[      -inf,       -inf,       -inf, ...,       -inf,
           7.1546154,  9.734832 ],
         [10.389364 , 10.393293 , 10.389364 , ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf, 10.389364 , ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf, 10.303069 , ..., 10.315862 ,
           7.336937 ,       -inf],
         [ 8.702178 , 10.38542  , 10.38542  , ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ..., 10.38542  ,
          10.38542  , 10.38542  ]],

        [[10.389364 , 10.38542  ,  9.128696 , ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,  8.147867 ,
           9.901886 ,  9.901886 ],
         [ 8.435549 ,  8.286017 ,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [22], 'to': [20]}
tf node:
{'name': 'add', 'output': array([[[[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,       nan,       nan,
               -inf],
         [     -inf,      -inf,       nan, ...,       nan,       nan,
               -inf],
         ...,
         [     -inf,       nan,       nan, ...,       nan,      -inf,
               -inf],
         [     -inf,       nan,       nan, ...,       nan,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[10.930325, 11.313742, 11.117308, ..., 11.790885,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,       nan,       nan,
          11.373491],
         [11.389364, 11.38542 ,       inf, ...,       inf,       nan,
               -inf],
         ...,
         [11.227308,       inf,       inf, ...,       nan,      -inf,
               -inf],
         [     -inf,       nan,       nan, ...,       nan, 11.38542 ,
          11.38542 ],
         [11.389364, 11.213323,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,  8.154615,
          10.734832],
         [11.389364, 11.393293, 11.389364, ...,       nan,       nan,
               -inf],
         [     -inf,      -inf,       inf, ...,       nan,       nan,
               -inf],
         ...,
         [     -inf,       nan,       inf, ...,       inf,  8.336937,
               -inf],
         [ 9.702178,       inf,       inf, ...,       nan,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 11.38542 , 11.38542 ,
          11.38542 ]],

        ...,

        [[10.930325, 11.313742, 11.117308, ..., 11.790885,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,       nan,       nan,
          11.373491],
         [11.389364, 11.38542 ,       inf, ...,       inf,       nan,
               -inf],
         ...,
         [11.227308,       inf,       inf, ...,       nan,      -inf,
               -inf],
         [     -inf,       nan,       nan, ...,       nan, 11.38542 ,
          11.38542 ],
         [11.389364, 11.213323,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,  8.154615,
          10.734832],
         [11.389364, 11.393293, 11.389364, ...,       nan,       nan,
               -inf],
         [     -inf,      -inf,       inf, ...,       nan,       nan,
               -inf],
         ...,
         [     -inf,       nan,       inf, ...,       inf,  8.336937,
               -inf],
         [ 9.702178,       inf,       inf, ...,       nan,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 11.38542 , 11.38542 ,
          11.38542 ]],

        [[11.389364, 11.38542 , 10.128696, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,       inf,       inf,
          10.901886],
         [ 9.435549,  9.286017,       nan, ...,       nan,       nan,
               -inf],
         ...,
         [     -inf,       nan,       nan, ...,       nan,      -inf,
               -inf],
         [     -inf,       nan,       nan, ...,       nan,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [9, 23], 'to': [10]}
ms node:
{'name': 'add', 'output': array([[[[      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,        nan,
                 nan,       -inf],
         [      -inf,       -inf,        nan, ...,        nan,
                 nan,       -inf],
         ...,
         [      -inf,        nan,        nan, ...,        nan,
                -inf,       -inf],
         [      -inf,        nan,        nan, ...,        nan,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[10.930327 , 11.31374  , 11.117306 , ..., 11.790885 ,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,        nan,
                 nan, 11.373489 ],
         [11.389363 , 11.385418 ,        inf, ...,        inf,
                 nan,       -inf],
         ...,
         [11.227305 ,        inf,        inf, ...,        nan,
                -inf,       -inf],
         [      -inf,        nan,        nan, ...,        nan,
          11.385418 , 11.385418 ],
         [11.389363 , 11.213319 ,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[      -inf,       -inf,       -inf, ...,       -inf,
           8.154618 , 10.734836 ],
         [11.389363 , 11.393292 , 11.389363 , ...,        nan,
                 nan,       -inf],
         [      -inf,       -inf,        inf, ...,        nan,
                 nan,       -inf],
         ...,
         [      -inf,        nan,        inf, ...,        inf,
           8.336935 ,       -inf],
         [ 9.702177 ,        inf,        inf, ...,        nan,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ..., 11.385418 ,
          11.385418 , 11.385418 ]],

        ...,

        [[10.930327 , 11.31374  , 11.117306 , ..., 11.790885 ,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,        nan,
                 nan, 11.373489 ],
         [11.389363 , 11.385418 ,        inf, ...,        inf,
                 nan,       -inf],
         ...,
         [11.227305 ,        inf,        inf, ...,        nan,
                -inf,       -inf],
         [      -inf,        nan,        nan, ...,        nan,
          11.385418 , 11.385418 ],
         [11.389363 , 11.213319 ,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[      -inf,       -inf,       -inf, ...,       -inf,
           8.154618 , 10.734836 ],
         [11.389363 , 11.393292 , 11.389363 , ...,        nan,
                 nan,       -inf],
         [      -inf,       -inf,        inf, ...,        nan,
                 nan,       -inf],
         ...,
         [      -inf,        nan,        inf, ...,        inf,
           8.336935 ,       -inf],
         [ 9.702177 ,        inf,        inf, ...,        nan,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ..., 11.385418 ,
          11.385418 , 11.385418 ]],

        [[11.389363 , 11.385418 , 10.128694 , ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,        inf,
                 inf, 10.901888 ],
         [ 9.435546 ,  9.2860155,        nan, ...,        nan,
                 nan,       -inf],
         ...,
         [      -inf,        nan,        nan, ...,        nan,
                -inf,       -inf],
         [      -inf,        nan,        nan, ...,        nan,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]]]], dtype=float32), 'output_shape': (1, 128, 7, 7), 'from': [9, 23], 'to': [10]}
torch node:
{'name': 'add', 'output': array([[[[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,       nan,       nan,
               -inf],
         [     -inf,      -inf,       nan, ...,       nan,       nan,
               -inf],
         ...,
         [     -inf,       nan,       nan, ...,       nan,      -inf,
               -inf],
         [     -inf,       nan,       nan, ...,       nan,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[10.930325, 11.313741, 11.117308, ..., 11.790885,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,       nan,       nan,
          11.373491],
         [11.389364, 11.38542 ,       inf, ...,       inf,       nan,
               -inf],
         ...,
         [11.227308,       inf,       inf, ...,       nan,      -inf,
               -inf],
         [     -inf,       nan,       nan, ...,       nan, 11.38542 ,
          11.38542 ],
         [11.389364, 11.213323,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,  8.154615,
          10.734832],
         [11.389364, 11.393293, 11.389364, ...,       nan,       nan,
               -inf],
         [     -inf,      -inf,       inf, ...,       nan,       nan,
               -inf],
         ...,
         [     -inf,       nan,       inf, ...,       inf,  8.336937,
               -inf],
         [ 9.702178,       inf,       inf, ...,       nan,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 11.38542 , 11.38542 ,
          11.38542 ]],

        ...,

        [[10.930325, 11.313741, 11.117308, ..., 11.790885,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,       nan,       nan,
          11.373491],
         [11.389364, 11.38542 ,       inf, ...,       inf,       nan,
               -inf],
         ...,
         [11.227308,       inf,       inf, ...,       nan,      -inf,
               -inf],
         [     -inf,       nan,       nan, ...,       nan, 11.38542 ,
          11.38542 ],
         [11.389364, 11.213323,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,  8.154615,
          10.734832],
         [11.389364, 11.393293, 11.389364, ...,       nan,       nan,
               -inf],
         [     -inf,      -inf,       inf, ...,       nan,       nan,
               -inf],
         ...,
         [     -inf,       nan,       inf, ...,       inf,  8.336937,
               -inf],
         [ 9.702178,       inf,       inf, ...,       nan,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 11.38542 , 11.38542 ,
          11.38542 ]],

        [[11.389364, 11.38542 , 10.128696, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,       inf,       inf,
          10.901886],
         [ 9.435549,  9.286017,       nan, ...,       nan,       nan,
               -inf],
         ...,
         [     -inf,       nan,       nan, ...,       nan,      -inf,
               -inf],
         [     -inf,       nan,       nan, ...,       nan,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 7, 7]), 'from': [9, 23], 'to': [10]}

generate models:240

analyse output arrays in iter:251

pre layer res:
16:log
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [8], 'to': [9]}
tf node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        ...,

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [16], 'to': [10]}
ms node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        ...,

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': (1, 128, 7, 7), 'from': [16], 'to': [10]}
torch node:
{'name': 'maxpool2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 7, 7]), 'from': [16], 'to': [10]}

generate models:251

analyse output arrays in iter:258

pre layer res:
16:add
{'name': 'add', 'output': array([[[[ 28.136284,  23.72603 ,  25.63076 , ...,  25.427896,
           27.642477,  26.225714],
         [ 28.188467,  26.81419 ,  27.386284, ...,  27.792234,
           26.441689,  27.759909],
         [ 26.108295,  25.61495 ,  27.588476, ...,  27.827984,
           22.339767,  26.441689],
         ...,
         [ 27.001244,  27.812174,  24.228657, ...,  26.607822,
           26.425879,  27.479027],
         [ 26.692944,  27.76804 ,  26.225712, ...,  23.555714,
           26.163345,  11.18086 ],
         [ 27.792234,  27.017054,  27.29418 , ...,  26.425879,
           27.425182,  25.61495 ]],

        [[ 28.136284,  23.726028,  25.63076 , ...,  25.427896,
           27.642477,  26.225714],
         [ 28.188467,  26.81419 ,  27.386284, ...,  27.792234,
           26.441689,  27.759909],
         [ 26.108295,  25.61495 ,  27.588478, ...,  27.827984,
           22.339746,  26.441689],
         ...,
         [ 27.001244,  27.812174,  24.228659, ...,  26.607822,
           26.42588 ,  27.479027],
         [ 26.692942,  27.76804 ,  26.225712, ...,  23.555716,
           26.163345,  11.35482 ],
         [ 27.792234,  27.017054,  27.29418 , ...,  26.425879,
           27.425182,  25.61495 ]],

        [[ 28.136284,  23.726032,  25.63076 , ...,  25.427896,
           27.642477,  26.225712],
         [ 28.188467,  26.81419 ,  27.386284, ...,  27.792234,
           26.441689,  27.759909],
         [ 26.108295,  25.61495 ,  27.588476, ...,  27.827984,
           22.339779,  26.44169 ],
         ...,
         [ 27.001244,  27.812174,  24.22866 , ...,  26.607822,
           26.425879,  27.479027],
         [ 26.692942,  27.76804 ,  26.225712, ...,  23.555721,
           26.163345,  11.210739],
         [ 27.792234,  27.017054,  27.29418 , ...,  26.42588 ,
           27.425182,  25.61495 ]],

        ...,

        [[ 28.136284,  23.726027,  25.63076 , ...,  25.427895,
           27.642477,  26.225712],
         [ 28.188467,  26.81419 ,  27.386284, ...,  27.792233,
           26.441689,  27.759909],
         [ 26.108295,  25.614948,  27.588476, ..., 198.82799 ,
          276.33972 , 203.44168 ],
         ...,
         [ 27.001244,  27.812174,  24.228655, ...,  26.607822,
           26.425879,  27.479027],
         [ 26.692942,  27.76804 ,  26.225712, ...,  23.55571 ,
           26.163345,       -inf],
         [ 27.792233,  27.017054,  27.29418 , ..., 280.42587 ,
          281.42517 , 109.614944]],

        [[ 28.136284,  23.726027,  25.63076 , ...,  25.427895,
           27.642477,  26.225712],
         [ 28.188467,  26.81419 ,  27.386284, ...,  27.792233,
           26.441689,  27.759909],
         [ 26.108295,  25.614948,  27.588476, ...,  27.827984,
           22.339731,  26.441689],
         ...,
         [ 27.001244,  27.812174,  24.228655, ...,  26.607822,
           26.425879,  27.479027],
         [ 26.692942,  27.76804 ,  26.225712, ...,  23.55571 ,
           26.163345,       -inf],
         [ 27.792233,  27.017054,  27.29418 , ...,  26.425879,
           27.425182,  25.614948]],

        [[ 28.136284,  23.726027,  25.63076 , ...,  25.427895,
           27.642477,  26.225712],
         [ 28.188467,  26.81419 ,  27.386284, ...,  27.792233,
           26.441689,  27.759909],
         [ 26.108295,  25.614948,  27.588476, ...,  27.827984,
           22.339731,  26.441689],
         ...,
         [ 27.001244,  27.812174,  24.228655, ...,  26.607822,
           26.425879,  27.479027],
         [ 26.692942,  27.76804 ,  26.225712, ...,  23.55571 ,
           26.163345,       -inf],
         [ 27.792233,  27.017054,  27.29418 , ...,  26.425879,
           27.425182,  25.614948]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [19, 20], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[21542.63 , 31952.842, 33134.51 , ..., 33606.188, 33133.1  ,
          21608.895],
         [35955.215, 55632.74 , 57899.9  , ..., 54718.98 , 50699.105,
          32196.912],
         [35030.12 , 55194.188, 59387.86 , ..., 59578.137, 54748.117,
          33886.92 ],
         ...,
         [32012.28 , 48397.72 , 52663.555, ..., 54770.22 ,       nan,
                nan],
         [35250.7  , 53522.5  , 57862.184, ..., 57807.34 ,       nan,
                nan],
         [24434.572, 38917.105, 42981.69 , ..., 44127.582,      -inf,
                nan]],

        [[21542.63 , 31952.842, 33134.51 , ..., 33606.188, 33133.1  ,
          21608.895],
         [35955.215, 55632.74 , 57899.9  , ..., 54718.98 , 50699.105,
          32196.912],
         [35030.12 , 55194.188, 59387.86 , ..., 59578.137, 54748.117,
          33886.92 ],
         ...,
         [32012.28 , 48397.72 , 52663.555, ..., 54770.22 ,       nan,
                nan],
         [35250.7  , 53522.5  , 57862.184, ..., 57807.34 ,       nan,
                nan],
         [24434.572, 38917.105, 42981.69 , ..., 44127.582,      -inf,
                nan]],

        [[21542.63 , 31952.842, 33134.51 , ..., 33606.188, 33133.1  ,
          21608.895],
         [35955.215, 55632.74 , 57899.9  , ..., 54718.98 , 50699.105,
          32196.912],
         [35030.12 , 55194.188, 59387.86 , ..., 59578.137, 54748.117,
          33886.92 ],
         ...,
         [32012.28 , 48397.72 , 52663.555, ..., 54770.22 ,       nan,
                nan],
         [35250.7  , 53522.5  , 57862.184, ..., 57807.34 ,       nan,
                nan],
         [24434.572, 38917.105, 42981.69 , ..., 44127.582,      -inf,
                nan]],

        ...,

        [[21542.63 , 31952.842, 33134.51 , ..., 33606.188, 33133.1  ,
          21608.895],
         [35955.215, 55632.74 , 57899.9  , ..., 54718.98 , 50699.105,
          32196.912],
         [35030.12 , 55194.188, 59387.86 , ..., 59578.137, 54748.117,
          33886.92 ],
         ...,
         [32012.28 , 48397.72 , 52663.555, ..., 54770.22 ,       nan,
                nan],
         [35250.7  , 53522.5  , 57862.184, ..., 57807.34 ,       nan,
                nan],
         [24434.572, 38917.105, 42981.69 , ..., 44127.582,      -inf,
                nan]],

        [[21542.63 , 31952.842, 33134.51 , ..., 33606.188, 33133.1  ,
          21608.895],
         [35955.215, 55632.74 , 57899.9  , ..., 54718.98 , 50699.105,
          32196.912],
         [35030.12 , 55194.188, 59387.86 , ..., 59578.137, 54748.117,
          33886.92 ],
         ...,
         [32012.28 , 48397.72 , 52663.555, ..., 54770.22 ,       nan,
                nan],
         [35250.7  , 53522.5  , 57862.184, ..., 57807.34 ,       nan,
                nan],
         [24434.572, 38917.105, 42981.69 , ..., 44127.582,      -inf,
                nan]],

        [[21542.63 , 31952.842, 33134.51 , ..., 33606.188, 33133.1  ,
          21608.895],
         [35955.215, 55632.74 , 57899.9  , ..., 54718.98 , 50699.105,
          32196.912],
         [35030.12 , 55194.188, 59387.86 , ..., 59578.137, 54748.117,
          33886.92 ],
         ...,
         [32012.28 , 48397.72 , 52663.555, ..., 54770.22 ,       nan,
                nan],
         [35250.7  , 53522.5  , 57862.184, ..., 57807.34 ,       nan,
                nan],
         [24434.572, 38917.105, 42981.69 , ..., 44127.582,      -inf,
                nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [16], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[21542.715, 31952.893, 33134.6  , ..., 33606.223, 33133.113,
          21608.941],
         [35955.28 , 55632.81 , 57899.96 , ..., 54719.023, 50699.11 ,
          32196.979],
         [35030.07 , 55194.133, 59387.773, ..., 59578.117, 54748.066,
          33886.945],
         ...,
         [32012.291, 48397.72 , 52663.61 , ..., 54770.164,      -inf,
               -inf],
         [35250.71 , 53522.484, 57862.2  , ..., 57807.254,      -inf,
               -inf],
         [24434.594, 38917.117, 42981.7  , ..., 44127.65 ,      -inf,
               -inf]],

        [[21542.715, 31952.893, 33134.6  , ..., 33606.223, 33133.113,
          21608.941],
         [35955.28 , 55632.81 , 57899.96 , ..., 54719.023, 50699.11 ,
          32196.979],
         [35030.07 , 55194.133, 59387.773, ..., 59578.117, 54748.066,
          33886.945],
         ...,
         [32012.291, 48397.72 , 52663.61 , ..., 54770.164,      -inf,
               -inf],
         [35250.71 , 53522.484, 57862.2  , ..., 57807.254,      -inf,
               -inf],
         [24434.594, 38917.117, 42981.7  , ..., 44127.65 ,      -inf,
               -inf]],

        [[21542.715, 31952.893, 33134.6  , ..., 33606.223, 33133.113,
          21608.941],
         [35955.28 , 55632.81 , 57899.96 , ..., 54719.023, 50699.11 ,
          32196.979],
         [35030.07 , 55194.133, 59387.773, ..., 59578.117, 54748.066,
          33886.945],
         ...,
         [32012.291, 48397.72 , 52663.61 , ..., 54770.164,      -inf,
               -inf],
         [35250.71 , 53522.484, 57862.2  , ..., 57807.254,      -inf,
               -inf],
         [24434.594, 38917.117, 42981.7  , ..., 44127.65 ,      -inf,
               -inf]],

        ...,

        [[21542.715, 31952.893, 33134.6  , ..., 33606.223, 33133.113,
          21608.941],
         [35955.28 , 55632.81 , 57899.96 , ..., 54719.023, 50699.11 ,
          32196.979],
         [35030.07 , 55194.133, 59387.773, ..., 59578.117, 54748.066,
          33886.945],
         ...,
         [32012.291, 48397.72 , 52663.61 , ..., 54770.164,      -inf,
               -inf],
         [35250.71 , 53522.484, 57862.2  , ..., 57807.254,      -inf,
               -inf],
         [24434.594, 38917.117, 42981.7  , ..., 44127.65 ,      -inf,
               -inf]],

        [[21542.717, 31952.896, 33134.586, ..., 33606.203, 33133.117,
          21608.932],
         [35955.297, 55632.797, 57899.94 , ..., 54719.004, 50699.125,
          32196.957],
         [35030.1  , 55194.145, 59387.766, ..., 59578.09 , 54748.062,
          33886.92 ],
         ...,
         [32012.3  , 48397.758, 52663.66 , ..., 54770.17 ,      -inf,
               -inf],
         [35250.715, 53522.53 , 57862.273, ..., 57807.285,      -inf,
               -inf],
         [24434.598, 38917.15 , 42981.734, ..., 44127.656,      -inf,
               -inf]],

        [[21542.717, 31952.896, 33134.586, ..., 33606.203, 33133.117,
          21608.932],
         [35955.297, 55632.797, 57899.94 , ..., 54719.004, 50699.125,
          32196.957],
         [35030.1  , 55194.145, 59387.766, ..., 59578.09 , 54748.062,
          33886.92 ],
         ...,
         [32012.3  , 48397.758, 52663.66 , ..., 54770.17 ,      -inf,
               -inf],
         [35250.715, 53522.53 , 57862.273, ..., 57807.285,      -inf,
               -inf],
         [24434.598, 38917.15 , 42981.734, ..., 44127.656,      -inf,
               -inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [16], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[21542.719, 31952.893, 33134.6  , ..., 33606.223, 33133.113,
          21608.941],
         [35955.28 , 55632.81 , 57899.96 , ..., 54719.023, 50699.113,
          32196.979],
         [35030.07 , 55194.133, 59387.773, ..., 59578.117, 54748.066,
          33886.945],
         ...,
         [32012.291, 48397.72 , 52663.61 , ..., 54770.164,      -inf,
               -inf],
         [35250.71 , 53522.484, 57862.2  , ..., 57807.254,      -inf,
               -inf],
         [24434.594, 38917.117, 42981.695, ..., 44127.65 ,      -inf,
               -inf]],

        [[21542.719, 31952.893, 33134.6  , ..., 33606.223, 33133.113,
          21608.941],
         [35955.28 , 55632.81 , 57899.96 , ..., 54719.023, 50699.113,
          32196.979],
         [35030.07 , 55194.133, 59387.773, ..., 59578.117, 54748.066,
          33886.945],
         ...,
         [32012.291, 48397.72 , 52663.61 , ..., 54770.164,      -inf,
               -inf],
         [35250.71 , 53522.484, 57862.2  , ..., 57807.254,      -inf,
               -inf],
         [24434.594, 38917.117, 42981.695, ..., 44127.65 ,      -inf,
               -inf]],

        [[21542.719, 31952.893, 33134.6  , ..., 33606.223, 33133.113,
          21608.941],
         [35955.28 , 55632.81 , 57899.96 , ..., 54719.023, 50699.113,
          32196.979],
         [35030.07 , 55194.133, 59387.773, ..., 59578.117, 54748.066,
          33886.945],
         ...,
         [32012.291, 48397.72 , 52663.61 , ..., 54770.164,      -inf,
               -inf],
         [35250.71 , 53522.484, 57862.2  , ..., 57807.254,      -inf,
               -inf],
         [24434.594, 38917.117, 42981.695, ..., 44127.65 ,      -inf,
               -inf]],

        ...,

        [[21542.719, 31952.893, 33134.6  , ..., 33606.223, 33133.113,
          21608.941],
         [35955.28 , 55632.81 , 57899.96 , ..., 54719.023, 50699.113,
          32196.979],
         [35030.07 , 55194.133, 59387.773, ..., 59578.117, 54748.066,
          33886.945],
         ...,
         [32012.291, 48397.72 , 52663.61 , ..., 54770.164,      -inf,
               -inf],
         [35250.71 , 53522.484, 57862.2  , ..., 57807.254,      -inf,
               -inf],
         [24434.594, 38917.117, 42981.695, ..., 44127.65 ,      -inf,
               -inf]],

        [[21542.719, 31952.893, 33134.6  , ..., 33606.223, 33133.113,
          21608.941],
         [35955.28 , 55632.81 , 57899.96 , ..., 54719.023, 50699.113,
          32196.979],
         [35030.07 , 55194.133, 59387.773, ..., 59578.117, 54748.066,
          33886.945],
         ...,
         [32012.291, 48397.72 , 52663.61 , ..., 54770.164,      -inf,
               -inf],
         [35250.71 , 53522.484, 57862.2  , ..., 57807.254,      -inf,
               -inf],
         [24434.594, 38917.117, 42981.695, ..., 44127.65 ,      -inf,
               -inf]],

        [[21542.719, 31952.893, 33134.6  , ..., 33606.223, 33133.113,
          21608.941],
         [35955.28 , 55632.81 , 57899.96 , ..., 54719.023, 50699.113,
          32196.979],
         [35030.07 , 55194.133, 59387.773, ..., 59578.117, 54748.066,
          33886.945],
         ...,
         [32012.291, 48397.72 , 52663.61 , ..., 54770.164,      -inf,
               -inf],
         [35250.71 , 53522.484, 57862.2  , ..., 57807.254,      -inf,
               -inf],
         [24434.594, 38917.117, 42981.695, ..., 44127.65 ,      -inf,
               -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [16], 'to': []}

generate models:258

analyse output arrays in iter:263

pre layer res:
25:exp
{'name': 'exp', 'output': array([[[[ 1., inf,  1., ..., inf, inf, inf],
         [inf, inf, inf, ..., inf,  1., inf],
         [ 1., inf,  1., ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ...,  1.,  1.,  1.],
         [inf,  1., inf, ...,  1., inf, inf],
         [inf, inf, inf, ...,  1., inf,  1.]],

        [[ 1., inf,  1., ..., inf, inf, inf],
         [inf, inf, inf, ..., inf,  1., inf],
         [ 1., inf,  1., ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ...,  1.,  1.,  1.],
         [inf,  1., inf, ...,  1., inf, inf],
         [inf, inf, inf, ...,  1., inf,  1.]],

        [[ 1., inf,  1., ..., inf, inf, inf],
         [inf, inf, inf, ..., inf,  1., inf],
         [ 1., inf,  1., ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ...,  1.,  1.,  1.],
         [inf,  1., inf, ...,  1., inf, inf],
         [inf, inf, inf, ...,  1., inf,  1.]],

        ...,

        [[ 1., inf,  1., ..., inf, inf, inf],
         [inf, inf, inf, ..., inf,  1., inf],
         [ 1., inf,  1., ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ...,  1.,  1.,  1.],
         [inf,  1., inf, ...,  1., inf, inf],
         [inf, inf, inf, ...,  1., inf,  1.]],

        [[ 1., inf,  1., ..., inf, inf, inf],
         [inf, inf, inf, ..., inf,  1., inf],
         [ 1., inf,  1., ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ...,  1.,  1.,  1.],
         [inf,  1., inf, ...,  1., inf, inf],
         [inf, inf, inf, ...,  1., inf,  1.]],

        [[ 1., inf,  1., ..., inf, inf, inf],
         [inf, inf, inf, ..., inf,  1., inf],
         [ 1., inf,  1., ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ...,  1.,  1.,  1.],
         [inf,  1., inf, ...,  1., inf, inf],
         [inf, inf, inf, ...,  1., inf,  1.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [8], 'to': [19]}
tf node:
{'name': 'sin', 'output': array([[[[0.841471,      nan, 0.841471, ...,      nan,      nan,
               nan],
         [     nan,      nan,      nan, ...,      nan, 0.841471,
               nan],
         [0.841471,      nan, 0.841471, ...,      nan,      nan,
               nan],
         ...,
         [     nan,      nan,      nan, ..., 0.841471, 0.841471,
          0.841471],
         [     nan, 0.841471,      nan, ..., 0.841471,      nan,
               nan],
         [     nan,      nan,      nan, ..., 0.841471,      nan,
          0.841471]],

        [[0.841471,      nan, 0.841471, ...,      nan,      nan,
               nan],
         [     nan,      nan,      nan, ...,      nan, 0.841471,
               nan],
         [0.841471,      nan, 0.841471, ...,      nan,      nan,
               nan],
         ...,
         [     nan,      nan,      nan, ..., 0.841471, 0.841471,
          0.841471],
         [     nan, 0.841471,      nan, ..., 0.841471,      nan,
               nan],
         [     nan,      nan,      nan, ..., 0.841471,      nan,
          0.841471]],

        [[0.841471,      nan, 0.841471, ...,      nan,      nan,
               nan],
         [     nan,      nan,      nan, ...,      nan, 0.841471,
               nan],
         [0.841471,      nan, 0.841471, ...,      nan,      nan,
               nan],
         ...,
         [     nan,      nan,      nan, ..., 0.841471, 0.841471,
          0.841471],
         [     nan, 0.841471,      nan, ..., 0.841471,      nan,
               nan],
         [     nan,      nan,      nan, ..., 0.841471,      nan,
          0.841471]],

        ...,

        [[0.841471,      nan, 0.841471, ...,      nan,      nan,
               nan],
         [     nan,      nan,      nan, ...,      nan, 0.841471,
               nan],
         [0.841471,      nan, 0.841471, ...,      nan,      nan,
               nan],
         ...,
         [     nan,      nan,      nan, ..., 0.841471, 0.841471,
          0.841471],
         [     nan, 0.841471,      nan, ..., 0.841471,      nan,
               nan],
         [     nan,      nan,      nan, ..., 0.841471,      nan,
          0.841471]],

        [[0.841471,      nan, 0.841471, ...,      nan,      nan,
               nan],
         [     nan,      nan,      nan, ...,      nan, 0.841471,
               nan],
         [0.841471,      nan, 0.841471, ...,      nan,      nan,
               nan],
         ...,
         [     nan,      nan,      nan, ..., 0.841471, 0.841471,
          0.841471],
         [     nan, 0.841471,      nan, ..., 0.841471,      nan,
               nan],
         [     nan,      nan,      nan, ..., 0.841471,      nan,
          0.841471]],

        [[0.841471,      nan, 0.841471, ...,      nan,      nan,
               nan],
         [     nan,      nan,      nan, ...,      nan, 0.841471,
               nan],
         [0.841471,      nan, 0.841471, ...,      nan,      nan,
               nan],
         ...,
         [     nan,      nan,      nan, ..., 0.841471, 0.841471,
          0.841471],
         [     nan, 0.841471,      nan, ..., 0.841471,      nan,
               nan],
         [     nan,      nan,      nan, ..., 0.841471,      nan,
          0.841471]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [25], 'to': [9]}
ms node:
{'name': 'sin', 'output': array([[[[0.84147096,        nan, 0.84147096, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
          0.84147096,        nan],
         [0.84147096,        nan, 0.84147096, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ..., 0.84147096,
          0.84147096, 0.84147096],
         [       nan, 0.84147096,        nan, ..., 0.84147096,
                 nan,        nan],
         [       nan,        nan,        nan, ..., 0.84147096,
                 nan, 0.84147096]],

        [[0.84147096,        nan, 0.84147096, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
          0.84147096,        nan],
         [0.84147096,        nan, 0.84147096, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ..., 0.84147096,
          0.84147096, 0.84147096],
         [       nan, 0.84147096,        nan, ..., 0.84147096,
                 nan,        nan],
         [       nan,        nan,        nan, ..., 0.84147096,
                 nan, 0.84147096]],

        [[0.84147096,        nan, 0.84147096, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
          0.84147096,        nan],
         [0.84147096,        nan, 0.84147096, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ..., 0.84147096,
          0.84147096, 0.84147096],
         [       nan, 0.84147096,        nan, ..., 0.84147096,
                 nan,        nan],
         [       nan,        nan,        nan, ..., 0.84147096,
                 nan, 0.84147096]],

        ...,

        [[0.84147096,        nan, 0.84147096, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
          0.84147096,        nan],
         [0.84147096,        nan, 0.84147096, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ..., 0.84147096,
          0.84147096, 0.84147096],
         [       nan, 0.84147096,        nan, ..., 0.84147096,
                 nan,        nan],
         [       nan,        nan,        nan, ..., 0.84147096,
                 nan, 0.84147096]],

        [[0.84147096,        nan, 0.84147096, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
          0.84147096,        nan],
         [0.84147096,        nan, 0.84147096, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ..., 0.84147096,
          0.84147096, 0.84147096],
         [       nan, 0.84147096,        nan, ..., 0.84147096,
                 nan,        nan],
         [       nan,        nan,        nan, ..., 0.84147096,
                 nan, 0.84147096]],

        [[0.84147096,        nan, 0.84147096, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
          0.84147096,        nan],
         [0.84147096,        nan, 0.84147096, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ..., 0.84147096,
          0.84147096, 0.84147096],
         [       nan, 0.84147096,        nan, ..., 0.84147096,
                 nan,        nan],
         [       nan,        nan,        nan, ..., 0.84147096,
                 nan, 0.84147096]]]], dtype=float32), 'output_shape': (1, 128, 14, 14), 'from': [25], 'to': [9]}
torch node:
{'name': 'sin', 'output': array([[[[0.84147096,        nan, 0.84147096, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
          0.84147096,        nan],
         [0.84147096,        nan, 0.84147096, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ..., 0.84147096,
          0.84147096, 0.84147096],
         [       nan, 0.84147096,        nan, ..., 0.84147096,
                 nan,        nan],
         [       nan,        nan,        nan, ..., 0.84147096,
                 nan, 0.84147096]],

        [[0.84147096,        nan, 0.84147096, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
          0.84147096,        nan],
         [0.84147096,        nan, 0.84147096, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ..., 0.84147096,
          0.84147096, 0.84147096],
         [       nan, 0.84147096,        nan, ..., 0.84147096,
                 nan,        nan],
         [       nan,        nan,        nan, ..., 0.84147096,
                 nan, 0.84147096]],

        [[0.84147096,        nan, 0.84147096, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
          0.84147096,        nan],
         [0.84147096,        nan, 0.84147096, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ..., 0.84147096,
          0.84147096, 0.84147096],
         [       nan, 0.84147096,        nan, ..., 0.84147096,
                 nan,        nan],
         [       nan,        nan,        nan, ..., 0.84147096,
                 nan, 0.84147096]],

        ...,

        [[0.84147096,        nan, 0.84147096, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
          0.84147096,        nan],
         [0.84147096,        nan, 0.84147096, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ..., 0.84147096,
          0.84147096, 0.84147096],
         [       nan, 0.84147096,        nan, ..., 0.84147096,
                 nan,        nan],
         [       nan,        nan,        nan, ..., 0.84147096,
                 nan, 0.84147096]],

        [[0.84147096,        nan, 0.84147096, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
          0.84147096,        nan],
         [0.84147096,        nan, 0.84147096, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ..., 0.84147096,
          0.84147096, 0.84147096],
         [       nan, 0.84147096,        nan, ..., 0.84147096,
                 nan,        nan],
         [       nan,        nan,        nan, ..., 0.84147096,
                 nan, 0.84147096]],

        [[0.84147096,        nan, 0.84147096, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
          0.84147096,        nan],
         [0.84147096,        nan, 0.84147096, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ..., 0.84147096,
          0.84147096, 0.84147096],
         [       nan, 0.84147096,        nan, ..., 0.84147096,
                 nan,        nan],
         [       nan,        nan,        nan, ..., 0.84147096,
                 nan, 0.84147096]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 14, 14]), 'from': [25], 'to': [9]}

generate models:263

analyse output arrays in iter:265

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         ...,
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]],

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         ...,
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]],

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         ...,
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [13], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [9], 'to': []}

generate models:265

analyse output arrays in iter:302

pre layer res:
1:relu
{'name': 'relu', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [0], 'to': [11]}
tf node:
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [1], 'to': [17, 20]}
ms node:
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [1], 'to': [17, 20]}
torch node:
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [1], 'to': [17, 20]}

generate models:302

analyse output arrays in iter:304

pre layer res:
11:add
{'name': 'add', 'output': array([[[[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., inf, inf, ..., 64., 64., 64.],
         ...,
         [64., inf, inf, ..., inf, inf, inf],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., inf, inf, ..., 64., 64., 64.],
         ...,
         [64., inf, inf, ..., inf, inf, inf],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., inf, inf, ..., 64., 64., 64.],
         ...,
         [64., inf, inf, ..., inf, inf, inf],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        ...,

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., inf, inf, ..., 64., 64., 64.],
         ...,
         [64., inf, inf, ..., inf, inf, inf],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., inf, inf, ..., 64., 64., 64.],
         ...,
         [64., inf, inf, ..., inf, inf, inf],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., inf, inf, ..., 64., 64., 64.],
         ...,
         [64., inf, inf, ..., inf, inf, inf],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [9, 14], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[32768., 49152., 49152., ..., 49152., 49152., 32768.],
         [   nan,    nan,    nan, ...,    inf, 73728., 49152.],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         ...,
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [32768., 49152., 49152., ..., 49152., 49152., 32768.]],

        [[32768., 49152., 49152., ..., 49152., 49152., 32768.],
         [   nan,    nan,    nan, ...,    inf, 73728., 49152.],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         ...,
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [32768., 49152., 49152., ..., 49152., 49152., 32768.]],

        [[32768., 49152., 49152., ..., 49152., 49152., 32768.],
         [   nan,    nan,    nan, ...,    inf, 73728., 49152.],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         ...,
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [32768., 49152., 49152., ..., 49152., 49152., 32768.]],

        ...,

        [[32768., 49152., 49152., ..., 49152., 49152., 32768.],
         [   nan,    nan,    nan, ...,    inf, 73728., 49152.],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         ...,
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [32768., 49152., 49152., ..., 49152., 49152., 32768.]],

        [[32768., 49152., 49152., ..., 49152., 49152., 32768.],
         [   nan,    nan,    nan, ...,    inf, 73728., 49152.],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         ...,
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [32768., 49152., 49152., ..., 49152., 49152., 32768.]],

        [[32768., 49152., 49152., ..., 49152., 49152., 32768.],
         [   nan,    nan,    nan, ...,    inf, 73728., 49152.],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         ...,
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [32768., 49152., 49152., ..., 49152., 49152., 32768.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [11], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[32768., 49152., 49152., ..., 49152., 49152., 32768.],
         [   inf,    inf,    inf, ...,    inf, 73728., 49152.],
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         ...,
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         [32768., 49152., 49152., ..., 49152., 49152., 32768.]],

        [[32768., 49152., 49152., ..., 49152., 49152., 32768.],
         [   inf,    inf,    inf, ...,    inf, 73728., 49152.],
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         ...,
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         [32768., 49152., 49152., ..., 49152., 49152., 32768.]],

        [[32768., 49152., 49152., ..., 49152., 49152., 32768.],
         [   inf,    inf,    inf, ...,    inf, 73728., 49152.],
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         ...,
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         [32768., 49152., 49152., ..., 49152., 49152., 32768.]],

        ...,

        [[32768., 49152., 49152., ..., 49152., 49152., 32768.],
         [   inf,    inf,    inf, ...,    inf, 73728., 49152.],
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         ...,
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         [32768., 49152., 49152., ..., 49152., 49152., 32768.]],

        [[32768., 49152., 49152., ..., 49152., 49152., 32768.],
         [   inf,    inf,    inf, ...,    inf, 73728., 49152.],
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         ...,
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         [32768., 49152., 49152., ..., 49152., 49152., 32768.]],

        [[32768., 49152., 49152., ..., 49152., 49152., 32768.],
         [   inf,    inf,    inf, ...,    inf, 73728., 49152.],
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         ...,
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         [32768., 49152., 49152., ..., 49152., 49152., 32768.]]]],
      dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [11], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[32768., 49152., 49152., ..., 49152., 49152., 32768.],
         [   inf,    inf,    inf, ...,    inf, 73728., 49152.],
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         ...,
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         [32768., 49152., 49152., ..., 49152., 49152., 32768.]],

        [[32768., 49152., 49152., ..., 49152., 49152., 32768.],
         [   inf,    inf,    inf, ...,    inf, 73728., 49152.],
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         ...,
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         [32768., 49152., 49152., ..., 49152., 49152., 32768.]],

        [[32768., 49152., 49152., ..., 49152., 49152., 32768.],
         [   inf,    inf,    inf, ...,    inf, 73728., 49152.],
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         ...,
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         [32768., 49152., 49152., ..., 49152., 49152., 32768.]],

        ...,

        [[32768., 49152., 49152., ..., 49152., 49152., 32768.],
         [   inf,    inf,    inf, ...,    inf, 73728., 49152.],
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         ...,
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         [32768., 49152., 49152., ..., 49152., 49152., 32768.]],

        [[32768., 49152., 49152., ..., 49152., 49152., 32768.],
         [   inf,    inf,    inf, ...,    inf, 73728., 49152.],
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         ...,
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         [32768., 49152., 49152., ..., 49152., 49152., 32768.]],

        [[32768., 49152., 49152., ..., 49152., 49152., 32768.],
         [   inf,    inf,    inf, ...,    inf, 73728., 49152.],
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         ...,
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         [   inf,    inf,    inf, ...,    inf,    inf,    inf],
         [32768., 49152., 49152., ..., 49152., 49152., 32768.]]]],
      dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [11], 'to': []}

generate models:304

analyse output arrays in iter:306

pre layer res:
4:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 14, 14]), 'from': [3], 'to': [22]}
tf node:
{'name': 'cos', 'output': array([[[[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        ...,

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 14, 14]), 'from': [4], 'to': [14]}
ms node:
{'name': 'cos', 'output': array([[[[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        ...,

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]]]], dtype=float32), 'output_shape': (1, 64, 14, 14), 'from': [4], 'to': [14]}
torch node:
{'name': 'cos', 'output': array([[[[0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         ...,
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234]],

        [[0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         ...,
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234]],

        [[0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         ...,
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234]],

        ...,

        [[0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         ...,
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234]],

        [[0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         ...,
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234]],

        [[0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         ...,
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 14, 14]), 'from': [4], 'to': [14]}

generate models:306

analyse output arrays in iter:314

pre layer res:
18:add
{'name': 'add', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [9, 21], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [18], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [18], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [18], 'to': []}

generate models:314

analyse output arrays in iter:318

pre layer res:
26:exp
{'name': 'exp', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [9], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [26], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [26], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [26], 'to': []}

generate models:318

analyse output arrays in iter:326

pre layer res:
19:reshape
{'name': 'reshape', 'output': array([[[[4.0960000e+03, 4.0960000e+03, 4.0960000e+03, ...,
          4.0960000e+03, 4.0960000e+03, 4.0960000e+03],
         [4.0960000e+03, 4.0960000e+03, 4.0960000e+03, ...,
          4.0960000e+03, 4.0960000e+03, 4.0960000e+03],
         [4.0960000e+03, 4.0960000e+03, 4.0960000e+03, ...,
          4.0960000e+03, 4.0960000e+03, 4.0960000e+03],
         ...,
         [4.0960000e+03, 4.0960000e+03, 4.0960000e+03, ...,
          4.0960000e+03, 4.0960000e+03, 4.0960000e+03],
         [          inf,           inf,           inf, ...,
          4.0960000e+03, 4.0960000e+03, 4.0960000e+03],
         [4.0960000e+03, 4.0960000e+03, 4.0960000e+03, ...,
          4.0960000e+03, 1.8121271e+09,           inf]],

        [[          inf,           inf,           inf, ...,
          4.0960000e+03, 4.0960000e+03, 4.0960000e+03],
         [4.0960000e+03, 4.0960000e+03, 4.0960000e+03, ...,
          3.3190264e+07,           inf,           inf],
         [          inf,           inf,           inf, ...,
          4.0960000e+03, 4.0960000e+03, 4.0960000e+03],
         ...,
         [4.0960000e+03, 3.0265615e+04,           inf, ...,
          7.1240731e+21, 4.0960000e+03, 4.0960000e+03],
         [4.0960000e+03, 4.0960000e+03, 4.0960000e+03, ...,
                    inf,           inf, 1.6102759e+16],
         [4.0960000e+03, 4.0960000e+03, 4.0960000e+03, ...,
                    inf, 4.0960000e+03, 4.0960000e+03]],

        [[4.0960000e+03, 4.0960000e+03, 4.0960000e+03, ...,
                    inf,           inf, 4.0960000e+03],
         [4.0960000e+03, 4.0960000e+03, 4.0960000e+03, ...,
          9.8938765e+10, 4.0960000e+03, 4.0960000e+03],
         [4.0960000e+03, 4.0960000e+03, 4.0960000e+03, ...,
                    inf, 4.0960000e+03, 4.0960000e+03],
         ...,
         [4.0960000e+03, 4.0960000e+03, 4.0960000e+03, ...,
                    inf, 4.0960000e+03, 4.0960000e+03],
         [4.0960000e+03,           inf,           inf, ...,
          4.0960000e+03, 4.0960000e+03, 4.0960000e+03],
         [4.0960000e+03, 4.0960000e+03, 4.0960000e+03, ...,
                    inf,           inf,           inf]],

        ...,

        [[          inf,           inf,           inf, ...,
          4.0960000e+03, 4.0960000e+03, 4.0960000e+03],
         [4.0960000e+03, 4.0960000e+03, 4.0960000e+03, ...,
          3.3190264e+07,           inf,           inf],
         [          inf,           inf,           inf, ...,
          4.0960000e+03, 4.0960000e+03, 4.0960000e+03],
         ...,
         [4.0960000e+03, 3.0265615e+04,           inf, ...,
          7.1240731e+21, 4.0960000e+03, 4.0960000e+03],
         [4.0960000e+03, 4.0960000e+03, 4.0960000e+03, ...,
                    inf,           inf, 1.6102759e+16],
         [4.0960000e+03, 4.0960000e+03, 4.0960000e+03, ...,
                    inf, 4.0960000e+03, 4.0960000e+03]],

        [[4.0960000e+03, 4.0960000e+03, 4.0960000e+03, ...,
                    inf,           inf, 4.0960000e+03],
         [4.0960000e+03, 4.0960000e+03, 4.0960000e+03, ...,
          9.8938765e+10, 4.0960000e+03, 4.0960000e+03],
         [4.0960000e+03, 4.0960000e+03, 4.0960000e+03, ...,
                    inf, 4.0960000e+03, 4.0960000e+03],
         ...,
         [4.0960000e+03, 4.0960000e+03, 4.0960000e+03, ...,
                    inf, 4.0960000e+03, 4.0960000e+03],
         [4.0960000e+03,           inf,           inf, ...,
          4.0960000e+03, 4.0960000e+03, 4.0960000e+03],
         [4.0960000e+03, 4.0960000e+03, 4.0960000e+03, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
          4.0960000e+03, 4.0960000e+03, 4.0960000e+03],
         [4.0960000e+03, 4.0960000e+03, 4.0960000e+03, ...,
                    inf,           inf,           inf],
         [          inf,           inf, 4.0960000e+03, ...,
          4.0960000e+03, 4.0960000e+03, 4.0960000e+03],
         ...,
         [4.0960000e+03, 4.0960000e+03, 4.0960000e+03, ...,
          4.0960000e+03, 4.0960000e+03, 4.0960000e+03],
         [4.0960000e+03, 4.0960000e+03, 4.0960000e+03, ...,
          4.0960000e+03, 4.0960000e+03, 4.0960000e+03],
         [4.0960000e+03, 4.0960000e+03, 4.0960000e+03, ...,
          4.0960000e+03, 4.0960000e+03, 4.0960000e+03]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [21], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [19], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [19], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [19], 'to': []}

generate models:325

analyse the exceptions in iter:339
torch exception:
{'id': 31, 'name': 'flatten', 'frame_work': 'torch', 'input_datas': [tensor([2.5041e+10, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
        0.0000e+00], grad_fn=<ConstantPadNdBackward0>)]}
Dimension out of range (expected to be in range of [-1, 0], but got 1)

generate models:337

analyse output arrays in iter:357

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         ...,
         [  inf,   inf,   inf, ..., 4224., 4224.,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf]],

        [[  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         ...,
         [  inf,   inf,   inf, ..., 4224., 4224.,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf]],

        [[  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         ...,
         [  inf,   inf,   inf, ..., 4224., 4224.,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf]],

        ...,

        [[  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         ...,
         [  inf,   inf,   inf, ..., 4224., 4224.,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf]],

        [[  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         ...,
         [  inf,   inf,   inf, ..., 4224., 4224.,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf]],

        [[  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         ...,
         [  inf,   inf,   inf, ..., 4224., 4224.,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf],
         [  inf,   inf,   inf, ...,   inf,   inf,   inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [8], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [9], 'to': []}

generate models:354

analyse output arrays in iter:359

pre layer res:
19:log
{'name': 'log', 'output': array([[[[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 20.093548, 20.093548,
               -inf],
         [     -inf,      -inf, 20.093548, ..., 20.093548, 20.093548,
               -inf],
         ...,
         [     -inf, 20.093548, 20.093548, ..., 20.089602, 20.093548,
               -inf],
         [     -inf, 19.553425, 20.093548, ..., 20.093548, 19.599638,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 20.093548, 20.093548,
               -inf],
         [     -inf,      -inf, 20.093548, ..., 20.093548, 20.093548,
               -inf],
         ...,
         [     -inf, 20.093548, 20.093548, ..., 20.089602, 20.093548,
               -inf],
         [     -inf, 19.553425, 20.093548, ..., 20.093548, 19.599638,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 20.093548, 20.093548,
               -inf],
         [     -inf,      -inf, 20.093548, ..., 20.093548, 20.093548,
               -inf],
         ...,
         [     -inf, 20.093548, 20.093548, ..., 20.089602, 20.093548,
               -inf],
         [     -inf, 19.553425, 20.093548, ..., 20.093548, 19.599638,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        ...,

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 20.093426, 20.093426,
               -inf],
         [     -inf,      -inf, 20.093426, ..., 20.093426, 20.093426,
               -inf],
         ...,
         [     -inf, 20.093426, 20.093426, ..., 20.08948 , 20.093426,
               -inf],
         [     -inf, 19.553303, 20.093426, ..., 20.093426, 19.599516,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 20.093426, 20.093426,
               -inf],
         [     -inf,      -inf, 20.093426, ..., 20.093426, 20.093426,
               -inf],
         ...,
         [     -inf, 20.093426, 20.093426, ..., 20.08948 , 20.093426,
               -inf],
         [     -inf, 19.553303, 20.093426, ..., 20.093426, 19.599516,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 20.093426, 20.093426,
               -inf],
         [     -inf,      -inf, 20.093426, ..., 20.093426, 20.093426,
               -inf],
         ...,
         [     -inf, 20.093426, 20.093426, ..., 20.08948 , 20.093426,
               -inf],
         [     -inf, 19.553303, 20.093426, ..., 20.093426, 19.599516,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [9], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [19], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [19], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [19], 'to': []}

generate models:356

analyse output arrays in iter:360

pre layer res:
7:conv2d
{'name': 'conv2d', 'output': array([[[[128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         ...,
         [128., 128., 128., ...,  inf, 128., 128.],
         [128., 128., 128., ...,  inf, 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.]],

        [[128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         ...,
         [128., 128., 128., ...,  inf, 128., 128.],
         [128., 128., 128., ...,  inf, 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.]],

        [[128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         ...,
         [128., 128., 128., ...,  inf, 128., 128.],
         [128., 128., 128., ...,  inf, 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.]],

        ...,

        [[128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         ...,
         [128., 128., 128., ...,  inf, 128., 128.],
         [128., 128., 128., ...,  inf, 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.]],

        [[128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         ...,
         [128., 128., 128., ...,  inf, 128., 128.],
         [128., 128., 128., ...,  inf, 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.]],

        [[128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         ...,
         [128., 128., 128., ...,  inf, 128., 128.],
         [128., 128., 128., ...,  inf, 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [13], 'to': [18]}
tf node:
{'name': 'cos', 'output': array([[[[-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         ...,
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958]],

        [[-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         ...,
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958]],

        [[-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         ...,
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958]],

        ...,

        [[-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         ...,
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958]],

        [[-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         ...,
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958]],

        [[-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         ...,
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [7], 'to': [15]}
ms node:
{'name': 'cos', 'output': array([[[[-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         ...,
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958]],

        [[-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         ...,
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958]],

        [[-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         ...,
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958]],

        ...,

        [[-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         ...,
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958]],

        [[-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         ...,
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958]],

        [[-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         ...,
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958]]]], dtype=float32), 'output_shape': (1, 128, 14, 14), 'from': [7], 'to': [15]}
torch node:
{'name': 'cos', 'output': array([[[[-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         ...,
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958]],

        [[-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         ...,
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958]],

        [[-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         ...,
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958]],

        ...,

        [[-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         ...,
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958]],

        [[-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         ...,
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958]],

        [[-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958],
         ...,
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ...,        nan,
          -0.6928958, -0.6928958],
         [-0.6928958, -0.6928958, -0.6928958, ..., -0.6928958,
          -0.6928958, -0.6928958]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 14, 14]), 'from': [7], 'to': [15]}

generate models:357

analyse output arrays in iter:365

pre layer res:
25:reshape
{'name': 'reshape', 'output': array([[[[8192.462, 8192.462,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf, 8192.462,
          8192.462],
         [8192.462, 8192.462,      inf, ...,      inf,      inf,
               inf],
         ...,
         [8192.462, 8192.462,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf, 8192.462,
          8192.462],
         [8192.462, 8192.462,      inf, ...,      inf,      inf,
               inf]],

        [[     inf,      inf,      inf, ...,      inf, 8192.462,
          8192.462],
         [8192.462, 8192.462,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf, 8192.462,
          8192.462],
         ...,
         [     inf,      inf,      inf, ...,      inf, 8192.462,
          8192.462],
         [8192.462, 8192.462,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf, 8192.462,
          8192.462]],

        [[8192.462, 8192.462,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf, 8192.462,
          8192.462],
         [8192.462, 8192.462,      inf, ...,      inf,      inf,
               inf],
         ...,
         [8192.762, 8192.762,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf, 8192.462,
          8192.462],
         [8192.462, 8192.462,      inf, ...,      inf,      inf,
               inf]],

        ...,

        [[     inf,      inf,      inf, ...,      inf, 8192.462,
          8192.462],
         [8192.462, 8192.462,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf, 8192.462,
          8192.462],
         ...,
         [     inf,      inf,      inf, ...,      inf, 8192.462,
          8192.462],
         [8192.462, 8192.462,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf, 8192.462,
          8192.462]],

        [[8192.462, 8192.462,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf, 8192.462,
          8192.462],
         [8192.462, 8192.462,      inf, ...,      inf,      inf,
               inf],
         ...,
         [8192.462, 8192.462,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf, 8192.462,
          8192.462],
         [8192.462, 8192.462,      inf, ...,      inf,      inf,
               inf]],

        [[     inf,      inf,      inf, ...,      inf, 8192.462,
          8192.462],
         [8192.462, 8192.462,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf, 8192.462,
          8192.462],
         ...,
         [     inf,      inf,      inf, ...,      inf, 8192.462,
          8192.462],
         [8192.462, 8192.462,      inf, ...,      inf,      inf,
               inf],
         [     inf,      inf,      inf, ...,      inf, 8192.462,
          8192.462]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [24], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [25], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [25], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [25], 'to': []}

generate models:362

analyse output arrays in iter:383

pre layer res:
6:relu
{'name': 'relu', 'output': array([[[[1024., 1024., 1024., ..., 1024., 1024., 1024.],
         [1024., 1024., 1024., ..., 1024., 1024., 1024.],
         [1024., 1024., 1024., ..., 1024., 1024., 1024.],
         ...,
         [1024., 1024., 1024., ..., 1024., 1024., 1024.],
         [1024., 1024., 1024., ..., 1024., 1024., 1024.],
         [1024., 1024., 1024., ..., 1024., 1024., 1024.]],

        [[1024., 1024., 1024., ..., 1024., 1024., 1024.],
         [1024., 1024., 1024., ..., 1024., 1024., 1024.],
         [1024., 1024., 1024., ..., 1024., 1024., 1024.],
         ...,
         [1024., 1024., 1024., ..., 1024., 1024., 1024.],
         [1024., 1024., 1024., ..., 1024., 1024., 1024.],
         [1024., 1024., 1024., ..., 1024., 1024., 1024.]],

        [[1024., 1024., 1024., ..., 1024., 1024., 1024.],
         [1024., 1024., 1024., ..., 1024., 1024., 1024.],
         [1024., 1024., 1024., ..., 1024., 1024., 1024.],
         ...,
         [1024., 1024., 1024., ..., 1024., 1024., 1024.],
         [1024., 1024., 1024., ..., 1024., 1024., 1024.],
         [1024., 1024., 1024., ..., 1024., 1024., 1024.]],

        ...,

        [[1024., 1024., 1024., ..., 1024., 1024., 1024.],
         [1024., 1024., 1024., ..., 1024., 1024., 1024.],
         [1024., 1024., 1024., ..., 1024., 1024., 1024.],
         ...,
         [1024., 1024., 1024., ..., 1024., 1024., 1024.],
         [1024., 1024., 1024., ..., 1024., 1024., 1024.],
         [1024., 1024., 1024., ..., 1024., 1024., 1024.]],

        [[1024., 1024., 1024., ..., 1024., 1024., 1024.],
         [1024., 1024., 1024., ..., 1024., 1024., 1024.],
         [1024., 1024., 1024., ..., 1024., 1024., 1024.],
         ...,
         [1024., 1024., 1024., ..., 1024., 1024., 1024.],
         [1024., 1024., 1024., ..., 1024., 1024., 1024.],
         [1024., 1024., 1024., ..., 1024., 1024., 1024.]],

        [[1024., 1024., 1024., ..., 1024., 1024., 1024.],
         [1024., 1024., 1024., ..., 1024., 1024., 1024.],
         [1024., 1024., 1024., ..., 1024., 1024., 1024.],
         ...,
         [1024., 1024., 1024., ..., 1024., 1024., 1024.],
         [1024., 1024., 1024., ..., 1024., 1024., 1024.],
         [1024., 1024., 1024., ..., 1024., 1024., 1024.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [5], 'to': [13]}
tf node:
{'name': 'sin', 'output': array([[[[-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         ...,
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338]],

        [[-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         ...,
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338]],

        [[-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         ...,
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338]],

        ...,

        [[-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         ...,
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338]],

        [[-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         ...,
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338]],

        [[-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         ...,
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [6], 'to': [22]}
ms node:
{'name': 'sin', 'output': array([[[[-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         ...,
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338]],

        [[-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         ...,
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338]],

        [[-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         ...,
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338]],

        ...,

        [[-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         ...,
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338]],

        [[-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         ...,
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338]],

        [[-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         ...,
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338]]]], dtype=float32), 'output_shape': (1, 128, 14, 14), 'from': [6], 'to': [22]}
torch node:
{'name': 'sin', 'output': array([[[[-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         ...,
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338]],

        [[-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         ...,
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338]],

        [[-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         ...,
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338]],

        ...,

        [[-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         ...,
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338]],

        [[-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         ...,
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338]],

        [[-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         ...,
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338],
         [-0.15853338, -0.15853338, -0.15853338, ..., -0.15853338,
          -0.15853338, -0.15853338]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 14, 14]), 'from': [6], 'to': [22]}

generate models:379

analyse output arrays in iter:387

pre layer res:
8:relu
{'name': 'relu', 'output': array([[[[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ]],

        [[0.       , 0.       , 0.       , ..., 5.5333896, 5.5333896,
          5.5333896],
         [5.5412636, 4.8441873, 4.7957907, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 5.529429 , 5.273    ,
          5.529429 ],
         ...,
         [0.       , 0.       , 2.9957323, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 5.220356 , ..., 0.       , 0.       ,
          0.       ]],

        [[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 2.4849067, 5.433722 , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [5.5333896, 5.3565865, 3.4011974, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 4.1743875, 5.463832 ,
          5.529429 ],
         [5.370638 , 3.3672957, 0.       , ..., 0.       , 0.       ,
          0.       ]],

        ...,

        [[0.       , 0.       , 0.       , ..., 5.5333896, 5.5333896,
          5.5333896],
         [5.5412636, 4.8441873, 4.7957907, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 5.529429 , 5.273    ,
          5.529429 ],
         ...,
         [0.       , 0.       , 2.9957323, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 5.220356 , ..., 0.       , 0.       ,
          0.       ]],

        [[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 2.4849067, 5.433722 , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [5.5333896, 5.3565865, 3.4011974, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 4.1743875, 5.463832 ,
          5.529429 ],
         [5.370638 , 3.3672957, 0.       , ..., 0.       , 0.       ,
          0.       ]],

        [[0.       , 0.       , 0.       , ..., 5.214936 , 5.529429 ,
          5.529429 ],
         [4.59512  , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 5.529429 , 5.5174527,
          4.8520303],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [12], 'to': [13]}
tf node:
{'name': 'sin', 'output': array([[[[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ]],

        [[ 0.        ,  0.        ,  0.        , ..., -0.6814893 ,
          -0.6814893 , -0.6814893 ],
         [-0.6757058 , -0.99132717, -0.9965241 , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ..., -0.68438244,
          -0.84693056, -0.68438244],
         ...,
         [ 0.        ,  0.        ,  0.14534369, ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        , -0.8737352 , ...,  0.        ,
           0.        ,  0.        ]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.61049545, -0.75092614, ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [-0.6814893 , -0.799582  , -0.2566986 , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ..., -0.8587345 ,
          -0.73070455, -0.68438244],
         [-0.7910647 , -0.22379167,  0.        , ...,  0.        ,
           0.        ,  0.        ]],

        ...,

        [[ 0.        ,  0.        ,  0.        , ..., -0.6814893 ,
          -0.6814893 , -0.6814893 ],
         [-0.6757058 , -0.99132717, -0.9965241 , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ..., -0.68438244,
          -0.84693056, -0.68438244],
         ...,
         [ 0.        ,  0.        ,  0.14534369, ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        , -0.8737352 , ...,  0.        ,
           0.        ,  0.        ]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.61049545, -0.75092614, ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [-0.6814893 , -0.799582  , -0.2566986 , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ..., -0.8587345 ,
          -0.73070455, -0.68438244],
         [-0.7910647 , -0.22379167,  0.        , ...,  0.        ,
           0.        ,  0.        ]],

        [[ 0.        ,  0.        ,  0.        , ..., -0.87635875,
          -0.68438244, -0.68438244],
         [-0.9931319 ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ..., -0.68438244,
          -0.6930653 , -0.99026597],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [8], 'to': [9]}
ms node:
{'name': 'sin', 'output': array([[[[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ]],

        [[ 0.        ,  0.        ,  0.        , ..., -0.68149036,
          -0.68149036, -0.68149036],
         [-0.67570686, -0.99132735, -0.9965241 , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ..., -0.68438345,
          -0.84693176, -0.68438345],
         ...,
         [ 0.        ,  0.        ,  0.14534086, ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        , -0.8737352 , ...,  0.        ,
           0.        ,  0.        ]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.6104971 , -0.75092673, ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [-0.68149036, -0.799584  , -0.2566986 , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ..., -0.8587337 ,
          -0.73070455, -0.68438345],
         [-0.7910667 , -0.22379075,  0.        , ...,  0.        ,
           0.        ,  0.        ]],

        ...,

        [[ 0.        ,  0.        ,  0.        , ..., -0.68149036,
          -0.68149036, -0.68149036],
         [-0.67570686, -0.99132735, -0.9965241 , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ..., -0.68438345,
          -0.84693176, -0.68438345],
         ...,
         [ 0.        ,  0.        ,  0.14534086, ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        , -0.8737352 , ...,  0.        ,
           0.        ,  0.        ]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.6104971 , -0.75092673, ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [-0.68149036, -0.799584  , -0.2566986 , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ..., -0.8587337 ,
          -0.73070455, -0.68438345],
         [-0.7910667 , -0.22379075,  0.        , ...,  0.        ,
           0.        ,  0.        ]],

        [[ 0.        ,  0.        ,  0.        , ..., -0.8763587 ,
          -0.68438345, -0.68438345],
         [-0.9931316 ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ..., -0.68438345,
          -0.6930663 , -0.9902662 ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ]]]], dtype=float32), 'output_shape': (1, 128, 14, 14), 'from': [8], 'to': [9]}
torch node:
{'name': 'sin', 'output': array([[[[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ]],

        [[ 0.        ,  0.        ,  0.        , ..., -0.6814893 ,
          -0.6814893 , -0.6814893 ],
         [-0.6757058 , -0.99132717, -0.9965241 , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ..., -0.68438244,
          -0.8469305 , -0.68438244],
         ...,
         [ 0.        ,  0.        ,  0.14534369, ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        , -0.8737352 , ...,  0.        ,
           0.        ,  0.        ]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.61049545, -0.7509261 , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [-0.6814893 , -0.799582  , -0.2566986 , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ..., -0.8587344 ,
          -0.73070455, -0.68438244],
         [-0.7910646 , -0.22379167,  0.        , ...,  0.        ,
           0.        ,  0.        ]],

        ...,

        [[ 0.        ,  0.        ,  0.        , ..., -0.6814893 ,
          -0.6814893 , -0.6814893 ],
         [-0.6757058 , -0.99132717, -0.9965241 , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ..., -0.68438244,
          -0.8469305 , -0.68438244],
         ...,
         [ 0.        ,  0.        ,  0.14534369, ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        , -0.8737352 , ...,  0.        ,
           0.        ,  0.        ]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.61049545, -0.7509261 , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [-0.6814893 , -0.799582  , -0.2566986 , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ..., -0.8587344 ,
          -0.73070455, -0.68438244],
         [-0.7910646 , -0.22379167,  0.        , ...,  0.        ,
           0.        ,  0.        ]],

        [[ 0.        ,  0.        ,  0.        , ..., -0.8763587 ,
          -0.68438244, -0.68438244],
         [-0.9931319 ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ..., -0.68438244,
          -0.6930653 , -0.99026597],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 14, 14]), 'from': [8], 'to': [9]}

pre layer res:
11:transpose
{'name': 'transpose', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [2], 'to': [15]}
tf node:
{'name': 'sin', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [11], 'to': [16]}
ms node:
{'name': 'sin', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [11], 'to': [16]}
torch node:
{'name': 'sin', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [11], 'to': [16]}

generate models:383

analyse output arrays in iter:392

pre layer res:
16:add
{'name': 'add', 'output': array([[[[           inf,            inf,            inf, ...,
                     inf,            inf,            inf],
         [           inf,            inf,            inf, ...,
                     inf,            inf,            inf],
         [           inf,            inf,            inf, ...,
                     inf,            inf,            inf],
         ...,
         [           inf,            inf,            inf, ...,
                     inf,            inf,            inf],
         [           inf,            inf,            inf, ...,
                     inf,            inf,            inf],
         [           inf,            inf,            inf, ...,
                     inf,            inf,            inf]],

        [[           inf,            inf,            inf, ...,
                     inf,            inf,            inf],
         [           inf,            inf,            inf, ...,
                     inf,            inf,            inf],
         [           inf,            inf,            inf, ...,
                     inf,            inf,            inf],
         ...,
         [           inf,            inf,            inf, ...,
                     inf,            inf,            inf],
         [           inf,            inf,            inf, ...,
                     inf,            inf,            inf],
         [           inf,            inf,            inf, ...,
                     inf,            inf,            inf]],

        [[           inf,            inf,            inf, ...,
                     inf,            inf,            inf],
         [           inf,            inf,            inf, ...,
                     inf,            inf,            inf],
         [           inf,            inf,            inf, ...,
                     inf,            inf,            inf],
         ...,
         [           inf,            inf,            inf, ...,
                     inf,            inf,            inf],
         [           inf,            inf,            inf, ...,
                     inf,            inf,            inf],
         [           inf,            inf,            inf, ...,
                     inf,            inf,            inf]],

        ...,

        [[1.04872346e+09, 1.03220838e+09, 1.10166016e+08, ...,
          1.00000000e+00, 1.00000000e+00, 1.00000000e+00],
         [1.00000000e+00, 3.61922560e+07, 1.04872346e+09, ...,
          1.00000000e+00, 1.00000000e+00, 1.00000000e+00],
         [1.00000000e+00, 1.04872346e+09, 2.72646144e+08, ...,
          1.00000000e+00, 1.00000000e+00, 1.00000000e+00],
         ...,
         [3.93379840e+07, 1.04872346e+09, 2.72646144e+08, ...,
          1.00000000e+00, 1.00000000e+00, 1.00000000e+00],
         [1.00000000e+00, 1.00000000e+00, 1.00000000e+00, ...,
          1.00000000e+00, 1.47457000e+05, 3.46685440e+07],
         [1.04872346e+09, 1.04872346e+09, 4.95616000e+07, ...,
          1.00000000e+00, 1.00000000e+00, 1.00000000e+00]],

        [[1.00000000e+00, 1.00000000e+00, 1.00000000e+00, ...,
          2.76889700e+06, 1.04872346e+09, 1.04872346e+09],
         [1.04872346e+09, 1.04872346e+09, 1.04872346e+09, ...,
          1.00000000e+00, 1.00000000e+00, 1.00000000e+00],
         [1.00000000e+00, 1.00000000e+00, 1.00000000e+00, ...,
          1.63850000e+04, 7.36362496e+08, 7.36362496e+08],
         ...,
         [1.00000000e+00, 1.00000000e+00, 1.00000000e+00, ...,
          1.00000000e+00, 1.00000000e+00, 1.00000000e+00],
         [1.00000000e+00, 1.00000000e+00, 8.66713600e+08, ...,
          1.00000000e+00, 1.00000000e+00, 1.00000000e+00],
         [1.00000000e+00, 1.00000000e+00, 1.00000000e+00, ...,
          7.22534400e+08, 8.51705856e+08, 1.00000000e+00]],

        [[4.43023360e+07, 1.04872346e+09, 1.04872346e+09, ...,
          1.00000000e+00, 1.00000000e+00, 1.00000000e+00],
         [1.00000000e+00, 1.00000000e+00, 1.00000000e+00, ...,
          1.04872346e+09, 1.04872346e+09, 1.04872346e+09],
         [1.04872346e+09, 1.04872346e+09, 9.43718400e+08, ...,
          1.00000000e+00, 1.00000000e+00, 1.00000000e+00],
         ...,
         [3.63741184e+08, 7.92985700e+06, 1.00000000e+00, ...,
          1.00000000e+00, 1.00000000e+00, 1.00000000e+00],
         [1.00000000e+00, 1.00000000e+00, 1.00000000e+00, ...,
          1.00000000e+00, 1.00000000e+00, 1.00000000e+00],
         [1.00000000e+00, 1.00000000e+00, 1.00000000e+00, ...,
          1.00000000e+00, 1.00000000e+00, 1.00000000e+00]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [15, 19], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [16], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [16], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [16], 'to': []}

generate models:388

analyse output arrays in iter:400

pre layer res:
6:relu
{'name': 'relu', 'output': array([[[[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., inf, ..., 64., 64., 64.],
         ...,
         [64., 64., 64., ..., inf, 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., inf, ..., 64., 64., 64.],
         ...,
         [64., 64., 64., ..., inf, 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., inf, ..., 64., 64., 64.],
         ...,
         [64., 64., 64., ..., inf, 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        ...,

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., inf, ..., 64., 64., 64.],
         ...,
         [64., 64., 64., ..., inf, 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., inf, ..., 64., 64., 64.],
         ...,
         [64., 64., 64., ..., inf, 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., inf, ..., 64., 64., 64.],
         ...,
         [64., 64., 64., ..., inf, 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [5], 'to': [14]}
tf node:
{'name': 'cos', 'output': array([[[[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724,        nan, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ...,        nan,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]],

        [[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724,        nan, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ...,        nan,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]],

        [[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724,        nan, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ...,        nan,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]],

        ...,

        [[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724,        nan, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ...,        nan,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]],

        [[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724,        nan, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ...,        nan,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]],

        [[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724,        nan, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ...,        nan,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [6], 'to': [11]}
ms node:
{'name': 'cos', 'output': array([[[[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724,        nan, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ...,        nan,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]],

        [[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724,        nan, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ...,        nan,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]],

        [[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724,        nan, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ...,        nan,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]],

        ...,

        [[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724,        nan, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ...,        nan,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]],

        [[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724,        nan, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ...,        nan,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]],

        [[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724,        nan, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ...,        nan,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]]]], dtype=float32), 'output_shape': (1, 128, 14, 14), 'from': [6], 'to': [11]}
torch node:
{'name': 'cos', 'output': array([[[[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724,        nan, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ...,        nan,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]],

        [[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724,        nan, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ...,        nan,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]],

        [[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724,        nan, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ...,        nan,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]],

        ...,

        [[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724,        nan, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ...,        nan,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]],

        [[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724,        nan, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ...,        nan,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]],

        [[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724,        nan, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ...,        nan,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 14, 14]), 'from': [6], 'to': [11]}

generate models:396

analyse output arrays in iter:409

pre layer res:
17:log
{'name': 'log', 'output': array([[[[     -inf,      -inf, 10.715661, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf, 13.693045, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf, 13.855101, ..., 13.348204, 13.855101,
          13.855101],
         ...,
         [     -inf, 13.855101, 13.855101, ..., 13.855101,      -inf,
               -inf],
         [     -inf, 10.802673, 10.802673, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf, 10.715661, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf, 13.693045, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf, 13.855101, ..., 13.348204, 13.855101,
          13.855101],
         ...,
         [     -inf, 13.855101, 13.855101, ..., 13.855101,      -inf,
               -inf],
         [     -inf, 10.802673, 10.802673, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf, 10.715661, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf, 13.693045, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf, 13.855101, ..., 13.348204, 13.855101,
          13.855101],
         ...,
         [     -inf, 13.855101, 13.855101, ..., 13.855101,      -inf,
               -inf],
         [     -inf, 10.802673, 10.802673, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        ...,

        [[     -inf,      -inf, 10.715661, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf, 13.693045, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf, 13.855101, ..., 13.348204, 13.855101,
          13.855101],
         ...,
         [     -inf, 13.855101, 13.855101, ..., 13.855101,      -inf,
               -inf],
         [     -inf, 10.802673, 10.802673, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf, 10.715661, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf, 13.693045, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf, 13.855101, ..., 13.348204, 13.855101,
          13.855101],
         ...,
         [     -inf, 13.855101, 13.855101, ..., 13.855101,      -inf,
               -inf],
         [     -inf, 10.802673, 10.802673, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf, 10.715661, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf, 13.693045, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf, 13.855101, ..., 13.348204, 13.855101,
          13.855101],
         ...,
         [     -inf, 13.855101, 13.855101, ..., 13.855101,      -inf,
               -inf],
         [     -inf, 10.802673, 10.802673, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [9], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan, 14786.894, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan]],

        [[      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan, 14786.894, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan]],

        [[      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan, 14786.894, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan]],

        ...,

        [[      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan, 14786.894, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan]],

        [[      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan, 14786.894, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan]],

        [[      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan, 14786.894, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [17], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf, 14786.885 , ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf, 14786.885 , ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf, 14786.885 , ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        ...,

        [[      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf, 14786.885 , ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf, 14786.8955, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf, 14786.8955, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [17], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf, 14786.885, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf, 14786.885, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf, 14786.885, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        ...,

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf, 14786.885, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf, 14786.885, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf, 14786.885, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [17], 'to': []}

generate models:404

analyse output arrays in iter:419

pre layer res:
12:transpose
{'name': 'transpose', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [9], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [12], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [12], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [12], 'to': []}

generate models:414

analyse output arrays in iter:435

pre layer res:
12:add
{'name': 'add', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [15, 26], 'to': [9]}
tf node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        ...,

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [12], 'to': [25]}
ms node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        ...,

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': (1, 128, 7, 7), 'from': [12], 'to': [25]}
torch node:
{'name': 'maxpool2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 7, 7]), 'from': [12], 'to': [25]}

generate models:430

analyse output arrays in iter:446

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[2.54052125e+05, 1.01117394e+06, 7.07493125e+05, ...,
          7.78213375e+05, 1.66692203e+05, 1.33412234e+05],
         [7.50880000e+05, 1.04000000e+06, 9.75520000e+05, ...,
          1.05277400e+06, 2.54052125e+05, 5.14052094e+05],
         [7.19680000e+05, 4.47200000e+05, 1.05871975e+06, ...,
          1.05871975e+06, 5.26240000e+05, 5.15840000e+05],
         ...,
         [5.30400000e+05, 2.84960000e+05, 8.70457938e+05, ...,
          9.44320000e+05, 2.22560000e+05, 1.64320000e+05],
         [2.51972141e+05, 5.18212094e+05, 6.15972625e+05, ...,
          5.26240000e+05, 1.66400000e+05, 2.78720000e+05],
         [2.92447021e+02, 5.26532125e+05, 5.26532125e+05, ...,
          5.26532125e+05, 1.66692188e+05, 2.92447021e+02]],

        [[2.54052125e+05, 1.01117394e+06, 7.07493125e+05, ...,
          7.78213375e+05, 1.66692203e+05, 1.33412234e+05],
         [7.50880000e+05, 1.04000000e+06, 9.75520000e+05, ...,
          1.05277400e+06, 2.54052125e+05, 5.14052094e+05],
         [7.19680000e+05, 4.47200000e+05, 1.05871975e+06, ...,
          1.05871975e+06, 5.26240000e+05, 5.15840000e+05],
         ...,
         [5.30400000e+05, 2.84960000e+05, 8.70457938e+05, ...,
          9.44320000e+05, 2.22560000e+05, 1.64320000e+05],
         [2.51972141e+05, 5.18212094e+05, 6.15972625e+05, ...,
          5.26240000e+05, 1.66400000e+05, 2.78720000e+05],
         [2.92447021e+02, 5.26532125e+05, 5.26532125e+05, ...,
          5.26532125e+05, 1.66692188e+05, 2.92447021e+02]],

        [[2.54052125e+05, 1.01117394e+06, 7.07493125e+05, ...,
          7.78213375e+05, 1.66692203e+05, 1.33412234e+05],
         [7.50880000e+05, 1.04000000e+06, 9.75520000e+05, ...,
          1.05277400e+06, 2.54052125e+05, 5.14052094e+05],
         [7.19680000e+05, 4.47200000e+05, 1.05871975e+06, ...,
          1.05871975e+06, 5.26240000e+05, 5.15840000e+05],
         ...,
         [5.30400000e+05, 2.84960000e+05, 8.70457938e+05, ...,
          9.44320000e+05, 2.22560000e+05, 1.64320000e+05],
         [2.51972141e+05, 5.18212094e+05, 6.15972625e+05, ...,
          5.26240000e+05, 1.66400000e+05, 2.78720000e+05],
         [2.92447021e+02, 5.26532125e+05, 5.26532125e+05, ...,
          5.26532125e+05, 1.66692188e+05, 2.92447021e+02]],

        ...,

        [[2.54052125e+05, 1.01117394e+06, 7.07493125e+05, ...,
          7.78213375e+05, 1.66692203e+05, 1.33412234e+05],
         [7.50880000e+05, 1.04000000e+06, 9.75520000e+05, ...,
          1.05277400e+06, 2.54052125e+05, 5.14052094e+05],
         [7.19680000e+05, 4.47200000e+05, 1.05871975e+06, ...,
          1.05871975e+06, 5.26240000e+05, 5.15840000e+05],
         ...,
         [5.30400000e+05, 2.84960000e+05, 8.70457938e+05, ...,
          9.44320000e+05, 2.22560000e+05, 1.64320000e+05],
         [2.51972141e+05, 5.18212094e+05, 6.15972625e+05, ...,
          5.26240000e+05, 1.66400000e+05, 2.78720000e+05],
         [2.92447021e+02, 5.26532125e+05, 5.26532125e+05, ...,
          5.26532125e+05, 1.66692188e+05, 2.92447021e+02]],

        [[2.54052125e+05, 1.01117394e+06, 7.07493125e+05, ...,
          7.78213375e+05, 1.66692203e+05, 1.33412234e+05],
         [7.50880000e+05, 1.04000000e+06, 9.75520000e+05, ...,
          1.05277400e+06, 2.54052125e+05, 5.14052094e+05],
         [7.19680000e+05, 4.47200000e+05, 1.05871975e+06, ...,
          1.05871975e+06, 5.26240000e+05, 5.15840000e+05],
         ...,
         [5.30400000e+05, 2.84960000e+05, 8.70457938e+05, ...,
          9.44320000e+05, 2.22560000e+05, 1.64320000e+05],
         [2.51972141e+05, 5.18212094e+05, 6.15972625e+05, ...,
          5.26240000e+05, 1.66400000e+05, 2.78720000e+05],
         [2.92447021e+02, 5.26532125e+05, 5.26532125e+05, ...,
          5.26532125e+05, 1.66692188e+05, 2.92447021e+02]],

        [[2.54052125e+05, 1.01117394e+06, 7.07493125e+05, ...,
          7.78213375e+05, 1.66692203e+05, 1.33412234e+05],
         [7.50880000e+05, 1.04000000e+06, 9.75520000e+05, ...,
          1.05277400e+06, 2.54052125e+05, 5.14052094e+05],
         [7.19680000e+05, 4.47200000e+05, 1.05871975e+06, ...,
          1.05871975e+06, 5.26240000e+05, 5.15840000e+05],
         ...,
         [5.30400000e+05, 2.84960000e+05, 8.70457938e+05, ...,
          9.44320000e+05, 2.22560000e+05, 1.64320000e+05],
         [2.51972141e+05, 5.18212094e+05, 6.15972625e+05, ...,
          5.26240000e+05, 1.66400000e+05, 2.78720000e+05],
         [2.92447021e+02, 5.26532125e+05, 5.26532125e+05, ...,
          5.26532125e+05, 1.66692188e+05, 2.92447021e+02]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [8], 'to': [12]}
tf node:
{'name': 'cos', 'output': array([[[[-0.5801511 , -0.48438787,  0.98451227, ..., -0.999422  ,
           0.762858  ,  0.20850751],
         [-0.08577833,  0.63346726,  0.48222163, ...,  0.39103463,
          -0.5801511 ,  0.90939397],
         [-0.68708783,  0.84246886, -0.9932966 , ..., -0.9932966 ,
          -0.3253872 , -0.9960473 ],
         ...,
         [ 0.19857667,  0.26437885, -0.40574127, ...,  0.33364573,
          -0.9885244 , -0.5371464 ],
         [-0.76365304,  0.9947663 ,  0.85073686, ..., -0.3253872 ,
          -0.73976004, -0.5050416 ],
         [-0.96135753,  0.36584258,  0.36584258, ...,  0.36584258,
           0.75266266, -0.96135753]],

        [[-0.5801511 , -0.48438787,  0.98451227, ..., -0.999422  ,
           0.762858  ,  0.20850751],
         [-0.08577833,  0.63346726,  0.48222163, ...,  0.39103463,
          -0.5801511 ,  0.90939397],
         [-0.68708783,  0.84246886, -0.9932966 , ..., -0.9932966 ,
          -0.3253872 , -0.9960473 ],
         ...,
         [ 0.19857667,  0.26437885, -0.40574127, ...,  0.33364573,
          -0.9885244 , -0.5371464 ],
         [-0.76365304,  0.9947663 ,  0.85073686, ..., -0.3253872 ,
          -0.73976004, -0.5050416 ],
         [-0.96135753,  0.36584258,  0.36584258, ...,  0.36584258,
           0.75266266, -0.96135753]],

        [[-0.5801511 , -0.48438787,  0.98451227, ..., -0.999422  ,
           0.762858  ,  0.20850751],
         [-0.08577833,  0.63346726,  0.48222163, ...,  0.39103463,
          -0.5801511 ,  0.90939397],
         [-0.68708783,  0.84246886, -0.9932966 , ..., -0.9932966 ,
          -0.3253872 , -0.9960473 ],
         ...,
         [ 0.19857667,  0.26437885, -0.40574127, ...,  0.33364573,
          -0.9885244 , -0.5371464 ],
         [-0.76365304,  0.9947663 ,  0.85073686, ..., -0.3253872 ,
          -0.73976004, -0.5050416 ],
         [-0.96135753,  0.36584258,  0.36584258, ...,  0.36584258,
           0.75266266, -0.96135753]],

        ...,

        [[-0.5801511 , -0.48438787,  0.98451227, ..., -0.999422  ,
           0.762858  ,  0.20850751],
         [-0.08577833,  0.63346726,  0.48222163, ...,  0.39103463,
          -0.5801511 ,  0.90939397],
         [-0.68708783,  0.84246886, -0.9932966 , ..., -0.9932966 ,
          -0.3253872 , -0.9960473 ],
         ...,
         [ 0.19857667,  0.26437885, -0.40574127, ...,  0.33364573,
          -0.9885244 , -0.5371464 ],
         [-0.76365304,  0.9947663 ,  0.85073686, ..., -0.3253872 ,
          -0.73976004, -0.5050416 ],
         [-0.96135753,  0.36584258,  0.36584258, ...,  0.36584258,
           0.75266266, -0.96135753]],

        [[-0.5801511 , -0.48438787,  0.98451227, ..., -0.999422  ,
           0.762858  ,  0.20850751],
         [-0.08577833,  0.63346726,  0.48222163, ...,  0.39103463,
          -0.5801511 ,  0.90939397],
         [-0.68708783,  0.84246886, -0.9932966 , ..., -0.9932966 ,
          -0.3253872 , -0.9960473 ],
         ...,
         [ 0.19857667,  0.26437885, -0.40574127, ...,  0.33364573,
          -0.9885244 , -0.5371464 ],
         [-0.76365304,  0.9947663 ,  0.85073686, ..., -0.3253872 ,
          -0.73976004, -0.5050416 ],
         [-0.96135753,  0.36584258,  0.36584258, ...,  0.36584258,
           0.75266266, -0.96135753]],

        [[-0.5801511 , -0.48438787,  0.98451227, ..., -0.999422  ,
           0.762858  ,  0.20850751],
         [-0.08577833,  0.63346726,  0.48222163, ...,  0.39103463,
          -0.5801511 ,  0.90939397],
         [-0.68708783,  0.84246886, -0.9932966 , ..., -0.9932966 ,
          -0.3253872 , -0.9960473 ],
         ...,
         [ 0.19857667,  0.26437885, -0.40574127, ...,  0.33364573,
          -0.9885244 , -0.5371464 ],
         [-0.76365304,  0.9947663 ,  0.85073686, ..., -0.3253872 ,
          -0.73976004, -0.5050416 ],
         [-0.96135753,  0.36584258,  0.36584258, ...,  0.36584258,
           0.75266266, -0.96135753]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [9], 'to': [22]}
ms node:
{'name': 'cos', 'output': array([[[[-0.5801511 , -0.48438787,  0.98451227, ..., -0.999422  ,
           0.762858  ,  0.20850751],
         [-0.08577833,  0.63346726,  0.48222163, ...,  0.39103466,
          -0.5801511 ,  0.90939397],
         [-0.68708783,  0.84246886, -0.9932966 , ..., -0.9932966 ,
          -0.3253872 , -0.9960473 ],
         ...,
         [ 0.19857667,  0.26437888, -0.40574127, ...,  0.33364573,
          -0.98852444, -0.5371464 ],
         [-0.76365304,  0.9947663 ,  0.85073686, ..., -0.3253872 ,
          -0.73976004, -0.5050416 ],
         [-0.96135753,  0.36584258,  0.36584258, ...,  0.36584258,
           0.75266266, -0.9612987 ]],

        [[-0.5801511 , -0.48438787,  0.98451227, ..., -0.999422  ,
           0.762858  ,  0.20850751],
         [-0.08577833,  0.63346726,  0.48222163, ...,  0.39103466,
          -0.5801511 ,  0.90939397],
         [-0.68708783,  0.84246886, -0.9932966 , ..., -0.9932966 ,
          -0.3253872 , -0.9960473 ],
         ...,
         [ 0.19857667,  0.26437888, -0.40574127, ...,  0.33364573,
          -0.98852444, -0.5371464 ],
         [-0.76365304,  0.9947663 ,  0.85073686, ..., -0.3253872 ,
          -0.73976004, -0.5050416 ],
         [-0.96135753,  0.36584258,  0.36584258, ...,  0.36584258,
           0.75266266, -0.9612987 ]],

        [[-0.5801511 , -0.48438787,  0.98451227, ..., -0.999422  ,
           0.762858  ,  0.20850751],
         [-0.08577833,  0.63346726,  0.48222163, ...,  0.39103466,
          -0.5801511 ,  0.90939397],
         [-0.68708783,  0.84246886, -0.9932966 , ..., -0.9932966 ,
          -0.3253872 , -0.9960473 ],
         ...,
         [ 0.19857667,  0.26437888, -0.40574127, ...,  0.33364573,
          -0.98852444, -0.5371464 ],
         [-0.76365304,  0.9947663 ,  0.85073686, ..., -0.3253872 ,
          -0.73976004, -0.5050416 ],
         [-0.96135753,  0.36584258,  0.36584258, ...,  0.36584258,
           0.75266266, -0.9612987 ]],

        ...,

        [[-0.5801511 , -0.48438787,  0.98451227, ..., -0.999422  ,
           0.762858  ,  0.20850751],
         [-0.08577833,  0.63346726,  0.48222163, ...,  0.39103466,
          -0.5801511 ,  0.90939397],
         [-0.68708783,  0.84246886, -0.9932966 , ..., -0.9932966 ,
          -0.3253872 , -0.9960473 ],
         ...,
         [ 0.19857667,  0.26437888, -0.40574127, ...,  0.33364573,
          -0.98852444, -0.5371464 ],
         [-0.76365304,  0.9947663 ,  0.85073686, ..., -0.3253872 ,
          -0.73976004, -0.5050416 ],
         [-0.96135753,  0.36584258,  0.36584258, ...,  0.36584258,
           0.75266266, -0.9612987 ]],

        [[-0.44633377,  0.18083626,  0.6794572 , ..., -0.3474006 ,
           0.82887673,  0.1005037 ],
         [-0.08577833,  0.63346726,  0.48222163, ...,  0.7609896 ,
          -0.44633377,  0.96304137],
         [-0.68708783,  0.84246886, -0.8162813 , ..., -0.8162813 ,
          -0.3253872 , -0.9960473 ],
         ...,
         [ 0.19857667,  0.26437888,  0.6009669 , ...,  0.33364573,
          -0.98852444, -0.5371464 ],
         [-0.6656224 ,  0.95828533,  0.9932899 , ..., -0.3253872 ,
          -0.73976004, -0.5050416 ],
         [-0.9612987 ,  0.18594936,  0.18594936, ...,  0.18594936,
           0.82887673, -0.9612987 ]],

        [[-0.44633377,  0.18083626,  0.6794572 , ..., -0.3474006 ,
           0.82887673,  0.1005037 ],
         [-0.08577833,  0.63346726,  0.48222163, ...,  0.7609896 ,
          -0.44633377,  0.96304137],
         [-0.68708783,  0.84246886, -0.8162813 , ..., -0.8162813 ,
          -0.3253872 , -0.9960473 ],
         ...,
         [ 0.19857667,  0.26437888,  0.6009669 , ...,  0.33364573,
          -0.98852444, -0.5371464 ],
         [-0.6656224 ,  0.95828533,  0.9932899 , ..., -0.3253872 ,
          -0.73976004, -0.5050416 ],
         [-0.9612987 ,  0.18594936,  0.18594936, ...,  0.18594936,
           0.82887673, -0.9612987 ]]]], dtype=float32), 'output_shape': (1, 128, 7, 7), 'from': [9], 'to': [22]}
torch node:
{'name': 'cos', 'output': array([[[[-0.5801511 , -0.48438787,  0.98451227, ..., -0.999422  ,
           0.762858  ,  0.20850751],
         [-0.08577833,  0.63346726,  0.48222166, ...,  0.39103466,
          -0.5801511 ,  0.90939397],
         [-0.68708783,  0.84246886, -0.9932966 , ..., -0.9932966 ,
          -0.3253872 , -0.9960473 ],
         ...,
         [ 0.19857667,  0.26437888, -0.40574127, ...,  0.33364573,
          -0.98852444, -0.5371464 ],
         [-0.76365304,  0.9947663 ,  0.85073686, ..., -0.3253872 ,
          -0.73976004, -0.5050416 ],
         [-0.96135753,  0.36584258,  0.36584258, ...,  0.36584258,
           0.75266266, -0.96135753]],

        [[-0.5801511 , -0.48438787,  0.98451227, ..., -0.999422  ,
           0.762858  ,  0.20850751],
         [-0.08577833,  0.63346726,  0.48222166, ...,  0.39103466,
          -0.5801511 ,  0.90939397],
         [-0.68708783,  0.84246886, -0.9932966 , ..., -0.9932966 ,
          -0.3253872 , -0.9960473 ],
         ...,
         [ 0.19857667,  0.26437888, -0.40574127, ...,  0.33364573,
          -0.98852444, -0.5371464 ],
         [-0.76365304,  0.9947663 ,  0.85073686, ..., -0.3253872 ,
          -0.73976004, -0.5050416 ],
         [-0.96135753,  0.36584258,  0.36584258, ...,  0.36584258,
           0.75266266, -0.96135753]],

        [[-0.5801511 , -0.48438787,  0.98451227, ..., -0.999422  ,
           0.762858  ,  0.20850751],
         [-0.08577833,  0.63346726,  0.48222166, ...,  0.39103466,
          -0.5801511 ,  0.90939397],
         [-0.68708783,  0.84246886, -0.9932966 , ..., -0.9932966 ,
          -0.3253872 , -0.9960473 ],
         ...,
         [ 0.19857667,  0.26437888, -0.40574127, ...,  0.33364573,
          -0.98852444, -0.5371464 ],
         [-0.76365304,  0.9947663 ,  0.85073686, ..., -0.3253872 ,
          -0.73976004, -0.5050416 ],
         [-0.96135753,  0.36584258,  0.36584258, ...,  0.36584258,
           0.75266266, -0.96135753]],

        ...,

        [[-0.5801511 , -0.48438787,  0.98451227, ..., -0.999422  ,
           0.762858  ,  0.20850751],
         [-0.08577833,  0.63346726,  0.48222166, ...,  0.39103466,
          -0.5801511 ,  0.90939397],
         [-0.68708783,  0.84246886, -0.9932966 , ..., -0.9932966 ,
          -0.3253872 , -0.9960473 ],
         ...,
         [ 0.19857667,  0.26437888, -0.40574127, ...,  0.33364573,
          -0.98852444, -0.5371464 ],
         [-0.76365304,  0.9947663 ,  0.85073686, ..., -0.3253872 ,
          -0.73976004, -0.5050416 ],
         [-0.96135753,  0.36584258,  0.36584258, ...,  0.36584258,
           0.75266266, -0.96135753]],

        [[-0.5801511 , -0.48438787,  0.98451227, ..., -0.999422  ,
           0.762858  ,  0.20850751],
         [-0.08577833,  0.63346726,  0.48222166, ...,  0.39103466,
          -0.5801511 ,  0.90939397],
         [-0.68708783,  0.84246886, -0.9932966 , ..., -0.9932966 ,
          -0.3253872 , -0.9960473 ],
         ...,
         [ 0.19857667,  0.26437888, -0.40574127, ...,  0.33364573,
          -0.98852444, -0.5371464 ],
         [-0.76365304,  0.9947663 ,  0.85073686, ..., -0.3253872 ,
          -0.73976004, -0.5050416 ],
         [-0.96135753,  0.36584258,  0.36584258, ...,  0.36584258,
           0.75266266, -0.96135753]],

        [[-0.5801511 , -0.48438787,  0.98451227, ..., -0.999422  ,
           0.762858  ,  0.20850751],
         [-0.08577833,  0.63346726,  0.48222166, ...,  0.39103466,
          -0.5801511 ,  0.90939397],
         [-0.68708783,  0.84246886, -0.9932966 , ..., -0.9932966 ,
          -0.3253872 , -0.9960473 ],
         ...,
         [ 0.19857667,  0.26437888, -0.40574127, ...,  0.33364573,
          -0.98852444, -0.5371464 ],
         [-0.76365304,  0.9947663 ,  0.85073686, ..., -0.3253872 ,
          -0.73976004, -0.5050416 ],
         [-0.96135753,  0.36584258,  0.36584258, ...,  0.36584258,
           0.75266266, -0.96135753]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 7, 7]), 'from': [9], 'to': [22]}

generate models:441

analyse output arrays in iter:457

pre layer res:
25:reshape
{'name': 'reshape', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [24], 'to': [18]}
tf node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [25], 'to': [4]}
ms node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [25], 'to': [4]}
torch node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [25], 'to': [4]}

generate models:452

analyse output arrays in iter:458

pre layer res:
11:log
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [8], 'to': [27]}
tf node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [11], 'to': [9]}
ms node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 128, 14, 14), 'from': [11], 'to': [9]}
torch node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 14, 14]), 'from': [11], 'to': [9]}

generate models:453

analyse output arrays in iter:460

pre layer res:
16:relu
{'name': 'relu', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [9], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [16], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [16], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [16], 'to': []}

generate models:455

analyse output arrays in iter:466

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[173.97, 173.97, 173.97, ..., 173.97, 173.97, 173.97],
         [173.97, 173.97, 173.97, ...,    inf, 173.97, 173.97],
         [173.97, 173.97, 173.97, ...,    inf, 173.97, 173.97],
         ...,
         [173.97, 173.97,    inf, ..., 173.97, 173.97, 173.97],
         [173.97, 173.97,    inf, ..., 173.97, 173.97, 173.97],
         [173.97, 173.97, 173.97, ..., 173.97, 173.97, 173.97]],

        [[173.97, 173.97, 173.97, ..., 173.97, 173.97, 173.97],
         [173.97, 173.97, 173.97, ...,    inf, 173.97, 173.97],
         [173.97, 173.97, 173.97, ...,    inf, 173.97, 173.97],
         ...,
         [173.97, 173.97,    inf, ..., 173.97, 173.97, 173.97],
         [173.97, 173.97,    inf, ..., 173.97, 173.97, 173.97],
         [173.97, 173.97, 173.97, ..., 173.97, 173.97, 173.97]],

        [[173.97, 173.97, 173.97, ..., 173.97, 173.97, 173.97],
         [173.97, 173.97, 173.97, ...,    inf, 173.97, 173.97],
         [173.97, 173.97, 173.97, ...,    inf, 173.97, 173.97],
         ...,
         [173.97, 173.97,    inf, ..., 173.97, 173.97, 173.97],
         [173.97, 173.97,    inf, ..., 173.97, 173.97, 173.97],
         [173.97, 173.97, 173.97, ..., 173.97, 173.97, 173.97]],

        ...,

        [[  0.  ,   0.  ,   0.  , ...,   0.  ,   0.  ,   0.  ],
         [  0.  ,   0.  ,   0.  , ...,   0.  ,   0.  ,   0.  ],
         [  0.  ,   0.  ,   0.  , ...,   0.  ,   0.  ,   0.  ],
         ...,
         [  0.  ,   0.  ,   0.  , ...,   0.  ,   0.  ,   0.  ],
         [  0.  ,   0.  ,   0.  , ...,   0.  ,   0.  ,   0.  ],
         [  0.  ,   0.  ,   0.  , ...,   0.  ,   0.  ,   0.  ]],

        [[  0.  ,   0.  ,   0.  , ...,   0.  ,   0.  ,   0.  ],
         [  0.  ,   0.  ,   0.  , ...,   0.  ,   0.  ,   0.  ],
         [  0.  ,   0.  ,   0.  , ...,   0.  ,   0.  ,   0.  ],
         ...,
         [  0.  ,   0.  ,   0.  , ...,   0.  ,   0.  ,   0.  ],
         [  0.  ,   0.  ,   0.  , ...,   0.  ,   0.  ,   0.  ],
         [  0.  ,   0.  ,   0.  , ...,   0.  ,   0.  ,   0.  ]],

        [[  0.  ,   0.  ,   0.  , ...,   0.  ,   0.  ,   0.  ],
         [  0.  ,   0.  ,   0.  , ...,   0.  ,   0.  ,   0.  ],
         [  0.  ,   0.  ,   0.  , ...,   0.  ,   0.  ,   0.  ],
         ...,
         [  0.  ,   0.  ,   0.  , ...,   0.  ,   0.  ,   0.  ],
         [  0.  ,   0.  ,   0.  , ...,   0.  ,   0.  ,   0.  ],
         [  0.  ,   0.  ,   0.  , ...,   0.  ,   0.  ,   0.  ]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [24], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[ 58453.758,  87680.734,  87680.734, ...,        nan,
                 nan,  58453.855],
         [ 87680.734, 131521.19 ,        nan, ...,        nan,
                 nan,  87680.82 ],
         [ 87680.734, 131521.19 ,        nan, ...,        nan,
                 nan,  87680.82 ],
         ...,
         [ 87332.805,        nan,        nan, ...,        nan,
                 nan,  86984.94 ],
         [ 86984.87 ,        nan,        nan, ...,        nan,
          129955.46 ,  86637.   ],
         [ 57757.977,        inf,        nan, ...,        inf,
           86637.   ,  57758.01 ]],

        [[ 58453.758,  87680.734,  87680.734, ...,        nan,
                 nan,  58453.855],
         [ 87680.734, 131521.19 ,        nan, ...,        nan,
                 nan,  87680.82 ],
         [ 87680.734, 131521.19 ,        nan, ...,        nan,
                 nan,  87680.82 ],
         ...,
         [ 87332.805,        nan,        nan, ...,        nan,
                 nan,  86984.94 ],
         [ 86984.87 ,        nan,        nan, ...,        nan,
          129955.46 ,  86637.   ],
         [ 57757.977,        inf,        nan, ...,        inf,
           86637.   ,  57758.01 ]],

        [[ 58453.758,  87680.734,  87680.734, ...,        nan,
                 nan,  58453.855],
         [ 87680.734, 131521.19 ,        nan, ...,        nan,
                 nan,  87680.82 ],
         [ 87680.734, 131521.19 ,        nan, ...,        nan,
                 nan,  87680.82 ],
         ...,
         [ 87332.805,        nan,        nan, ...,        nan,
                 nan,  86984.94 ],
         [ 86984.87 ,        nan,        nan, ...,        nan,
          129955.46 ,  86637.   ],
         [ 57757.977,        inf,        nan, ...,        inf,
           86637.   ,  57758.01 ]],

        ...,

        [[ 58453.758,  87680.734,  87680.734, ...,        nan,
                 nan,  58453.855],
         [ 87680.734, 131521.19 ,        nan, ...,        nan,
                 nan,  87680.82 ],
         [ 87680.734, 131521.19 ,        nan, ...,        nan,
                 nan,  87680.82 ],
         ...,
         [ 87332.805,        nan,        nan, ...,        nan,
                 nan,  86984.94 ],
         [ 86984.87 ,        nan,        nan, ...,        nan,
          129955.46 ,  86637.   ],
         [ 57757.977,        inf,        nan, ...,        inf,
           86637.   ,  57758.01 ]],

        [[ 58453.758,  87680.734,  87680.734, ...,        nan,
                 nan,  58453.855],
         [ 87680.734, 131521.19 ,        nan, ...,        nan,
                 nan,  87680.82 ],
         [ 87680.734, 131521.19 ,        nan, ...,        nan,
                 nan,  87680.82 ],
         ...,
         [ 87332.805,        nan,        nan, ...,        nan,
                 nan,  86984.94 ],
         [ 86984.87 ,        nan,        nan, ...,        nan,
          129955.46 ,  86637.   ],
         [ 57757.977,        inf,        nan, ...,        inf,
           86637.   ,  57758.01 ]],

        [[ 58453.758,  87680.734,  87680.734, ...,        nan,
                 nan,  58453.855],
         [ 87680.734, 131521.19 ,        nan, ...,        nan,
                 nan,  87680.82 ],
         [ 87680.734, 131521.19 ,        nan, ...,        nan,
                 nan,  87680.82 ],
         ...,
         [ 87332.805,        nan,        nan, ...,        nan,
                 nan,  86984.94 ],
         [ 86984.87 ,        nan,        nan, ...,        nan,
          129955.46 ,  86637.   ],
         [ 57757.977,        inf,        nan, ...,        inf,
           86637.   ,  57758.01 ]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 7, 7]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[ 58453.914,  87680.94 ,  87680.94 , ...,        inf,
                 inf,  58453.914],
         [ 87680.94 , 131521.42 ,        inf, ...,        inf,
                 inf,  87680.94 ],
         [ 87680.94 , 131521.42 ,        inf, ...,        inf,
                 inf,  87680.94 ],
         ...,
         [ 87332.99 ,        inf,        inf, ...,        inf,
                 inf,  86985.06 ],
         [ 86985.05 ,        inf,        inf, ...,        inf,
          129955.68 ,  86637.12 ],
         [ 57758.04 ,        inf,        inf, ...,        inf,
           86637.12 ,  57758.062]],

        [[ 58453.914,  87680.94 ,  87680.94 , ...,        inf,
                 inf,  58453.914],
         [ 87680.94 , 131521.42 ,        inf, ...,        inf,
                 inf,  87680.94 ],
         [ 87680.94 , 131521.42 ,        inf, ...,        inf,
                 inf,  87680.94 ],
         ...,
         [ 87332.99 ,        inf,        inf, ...,        inf,
                 inf,  86985.06 ],
         [ 86985.05 ,        inf,        inf, ...,        inf,
          129955.68 ,  86637.12 ],
         [ 57758.04 ,        inf,        inf, ...,        inf,
           86637.12 ,  57758.062]],

        [[ 58453.914,  87680.94 ,  87680.94 , ...,        inf,
                 inf,  58453.914],
         [ 87680.94 , 131521.42 ,        inf, ...,        inf,
                 inf,  87680.94 ],
         [ 87680.94 , 131521.42 ,        inf, ...,        inf,
                 inf,  87680.94 ],
         ...,
         [ 87332.99 ,        inf,        inf, ...,        inf,
                 inf,  86985.06 ],
         [ 86985.05 ,        inf,        inf, ...,        inf,
          129955.68 ,  86637.12 ],
         [ 57758.04 ,        inf,        inf, ...,        inf,
           86637.12 ,  57758.062]],

        ...,

        [[ 58453.914,  87680.94 ,  87680.94 , ...,        inf,
                 inf,  58453.914],
         [ 87680.94 , 131521.42 ,        inf, ...,        inf,
                 inf,  87680.94 ],
         [ 87680.94 , 131521.42 ,        inf, ...,        inf,
                 inf,  87680.94 ],
         ...,
         [ 87332.99 ,        inf,        inf, ...,        inf,
                 inf,  86985.06 ],
         [ 86985.05 ,        inf,        inf, ...,        inf,
          129955.68 ,  86637.12 ],
         [ 57758.04 ,        inf,        inf, ...,        inf,
           86637.12 ,  57758.062]],

        [[ 58453.94 ,  87680.89 ,  87680.89 , ...,        inf,
                 inf,  58453.938],
         [ 87680.89 , 131521.31 ,        inf, ...,        inf,
                 inf,  87680.89 ],
         [ 87680.89 , 131521.31 ,        inf, ...,        inf,
                 inf,  87680.89 ],
         ...,
         [ 87332.945,        inf,        inf, ...,        inf,
                 inf,  86985.01 ],
         [ 86985.01 ,        inf,        inf, ...,        inf,
          129955.59 ,  86637.07 ],
         [ 57758.062,        inf,        inf, ...,        inf,
           86637.07 ,  57758.062]],

        [[ 58453.94 ,  87680.89 ,  87680.89 , ...,        inf,
                 inf,  58453.938],
         [ 87680.89 , 131521.31 ,        inf, ...,        inf,
                 inf,  87680.89 ],
         [ 87680.89 , 131521.31 ,        inf, ...,        inf,
                 inf,  87680.89 ],
         ...,
         [ 87332.945,        inf,        inf, ...,        inf,
                 inf,  86985.01 ],
         [ 86985.01 ,        inf,        inf, ...,        inf,
          129955.59 ,  86637.07 ],
         [ 57758.062,        inf,        inf, ...,        inf,
           86637.07 ,  57758.062]]]], dtype=float32), 'output_shape': (1, 256, 7, 7), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[ 58453.914,  87680.94 ,  87680.94 , ...,        inf,
                 inf,  58453.914],
         [ 87680.94 , 131521.42 ,        inf, ...,        inf,
                 inf,  87680.94 ],
         [ 87680.94 , 131521.42 ,        inf, ...,        inf,
                 inf,  87680.94 ],
         ...,
         [ 87332.99 ,        inf,        inf, ...,        inf,
                 inf,  86985.06 ],
         [ 86985.05 ,        inf,        inf, ...,        inf,
          129955.68 ,  86637.12 ],
         [ 57758.04 ,        inf,        inf, ...,        inf,
           86637.12 ,  57758.062]],

        [[ 58453.914,  87680.94 ,  87680.94 , ...,        inf,
                 inf,  58453.914],
         [ 87680.94 , 131521.42 ,        inf, ...,        inf,
                 inf,  87680.94 ],
         [ 87680.94 , 131521.42 ,        inf, ...,        inf,
                 inf,  87680.94 ],
         ...,
         [ 87332.99 ,        inf,        inf, ...,        inf,
                 inf,  86985.06 ],
         [ 86985.05 ,        inf,        inf, ...,        inf,
          129955.68 ,  86637.12 ],
         [ 57758.04 ,        inf,        inf, ...,        inf,
           86637.12 ,  57758.062]],

        [[ 58453.914,  87680.94 ,  87680.94 , ...,        inf,
                 inf,  58453.914],
         [ 87680.94 , 131521.42 ,        inf, ...,        inf,
                 inf,  87680.94 ],
         [ 87680.94 , 131521.42 ,        inf, ...,        inf,
                 inf,  87680.94 ],
         ...,
         [ 87332.99 ,        inf,        inf, ...,        inf,
                 inf,  86985.06 ],
         [ 86985.05 ,        inf,        inf, ...,        inf,
          129955.68 ,  86637.12 ],
         [ 57758.04 ,        inf,        inf, ...,        inf,
           86637.12 ,  57758.062]],

        ...,

        [[ 58453.914,  87680.94 ,  87680.94 , ...,        inf,
                 inf,  58453.914],
         [ 87680.94 , 131521.42 ,        inf, ...,        inf,
                 inf,  87680.94 ],
         [ 87680.94 , 131521.42 ,        inf, ...,        inf,
                 inf,  87680.94 ],
         ...,
         [ 87332.99 ,        inf,        inf, ...,        inf,
                 inf,  86985.06 ],
         [ 86985.05 ,        inf,        inf, ...,        inf,
          129955.68 ,  86637.12 ],
         [ 57758.04 ,        inf,        inf, ...,        inf,
           86637.12 ,  57758.062]],

        [[ 58453.914,  87680.94 ,  87680.94 , ...,        inf,
                 inf,  58453.914],
         [ 87680.94 , 131521.42 ,        inf, ...,        inf,
                 inf,  87680.94 ],
         [ 87680.94 , 131521.42 ,        inf, ...,        inf,
                 inf,  87680.94 ],
         ...,
         [ 87332.99 ,        inf,        inf, ...,        inf,
                 inf,  86985.06 ],
         [ 86985.05 ,        inf,        inf, ...,        inf,
          129955.68 ,  86637.12 ],
         [ 57758.04 ,        inf,        inf, ...,        inf,
           86637.12 ,  57758.062]],

        [[ 58453.914,  87680.94 ,  87680.94 , ...,        inf,
                 inf,  58453.914],
         [ 87680.94 , 131521.42 ,        inf, ...,        inf,
                 inf,  87680.94 ],
         [ 87680.94 , 131521.42 ,        inf, ...,        inf,
                 inf,  87680.94 ],
         ...,
         [ 87332.99 ,        inf,        inf, ...,        inf,
                 inf,  86985.06 ],
         [ 86985.05 ,        inf,        inf, ...,        inf,
          129955.68 ,  86637.12 ],
         [ 57758.04 ,        inf,        inf, ...,        inf,
           86637.12 ,  57758.062]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 7, 7]), 'from': [9], 'to': []}

generate models:460

analyse output arrays in iter:471

pre layer res:
14:add
{'name': 'add', 'output': array([[[[8193., 8193., 8193., ..., 8193., 8193., 8193.],
         [8193., 8193., 8193., ..., 8193., 8193., 8193.],
         [8193., 8193., 8193., ..., 8193., 8193., 8193.],
         ...,
         [8193., 8193., 8193., ..., 8193., 8193., 8193.],
         [8193., 8193., 8193., ..., 8193., 8193., 8193.],
         [8193., 8193., 8193., ..., 8193., 8193., 8193.]],

        [[8193., 8193., 8193., ..., 8193., 8193., 8193.],
         [8193., 8193., 8193., ..., 8193., 8193., 8193.],
         [8193., 8193., 8193., ..., 8193., 8193., 8193.],
         ...,
         [8193., 8193., 8193., ..., 8193., 8193., 8193.],
         [8193., 8193., 8193., ..., 8193., 8193., 8193.],
         [8193., 8193., 8193., ..., 8193., 8193., 8193.]],

        [[8193., 8193., 8193., ..., 8193., 8193., 8193.],
         [8193., 8193., 8193., ..., 8193., 8193., 8193.],
         [8193., 8193., 8193., ..., 8193., 8193., 8193.],
         ...,
         [8193., 8193., 8193., ..., 8193., 8193., 8193.],
         [8193., 8193., 8193., ..., 8193., 8193., 8193.],
         [8193., 8193., 8193., ..., 8193., 8193., 8193.]],

        ...,

        [[8192., 8192., 8192., ..., 8192., 8192., 8192.],
         [8192., 8192., 8192., ..., 8192., 8192., 8192.],
         [8192., 8192., 8192., ..., 8192., 8192., 8192.],
         ...,
         [8192., 8192., 8192., ..., 8192., 8192., 8192.],
         [8192., 8192., 8192., ..., 8192., 8192., 8192.],
         [8192., 8192., 8192., ..., 8192., 8192., 8192.]],

        [[8192., 8192., 8192., ..., 8192., 8192., 8192.],
         [8192., 8192., 8192., ..., 8192., 8192., 8192.],
         [8192., 8192., 8192., ..., 8192., 8192., 8192.],
         ...,
         [8192., 8192., 8192., ..., 8192., 8192., 8192.],
         [8192., 8192., 8192., ..., 8192., 8192., 8192.],
         [8192., 8192., 8192., ..., 8192., 8192., 8192.]],

        [[8192., 8192., 8192., ..., 8192., 8192., 8192.],
         [8192., 8192., 8192., ..., 8192., 8192., 8192.],
         [8192., 8192., 8192., ..., 8192., 8192., 8192.],
         ...,
         [8192., 8192., 8192., ..., 8192., 8192., 8192.],
         [8192., 8192., 8192., ..., 8192., 8192., 8192.],
         [8192., 8192., 8192., ..., 8192., 8192., 8192.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [8, 17], 'to': [19]}
tf node:
{'name': 'log', 'output': array([[[[9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035],
         [9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035],
         [9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035],
         ...,
         [9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035],
         [9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035],
         [9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035]],

        [[9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035],
         [9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035],
         [9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035],
         ...,
         [9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035],
         [9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035],
         [9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035]],

        [[9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035],
         [9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035],
         [9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035],
         ...,
         [9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035],
         [9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035],
         [9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035]],

        ...,

        [[9.010914, 9.010914, 9.010914, ..., 9.010914, 9.010914,
          9.010914],
         [9.010914, 9.010914, 9.010914, ..., 9.010914, 9.010914,
          9.010914],
         [9.010914, 9.010914, 9.010914, ..., 9.010914, 9.010914,
          9.010914],
         ...,
         [9.010914, 9.010914, 9.010914, ..., 9.010914, 9.010914,
          9.010914],
         [9.010914, 9.010914, 9.010914, ..., 9.010914, 9.010914,
          9.010914],
         [9.010914, 9.010914, 9.010914, ..., 9.010914, 9.010914,
          9.010914]],

        [[9.010914, 9.010914, 9.010914, ..., 9.010914, 9.010914,
          9.010914],
         [9.010914, 9.010914, 9.010914, ..., 9.010914, 9.010914,
          9.010914],
         [9.010914, 9.010914, 9.010914, ..., 9.010914, 9.010914,
          9.010914],
         ...,
         [9.010914, 9.010914, 9.010914, ..., 9.010914, 9.010914,
          9.010914],
         [9.010914, 9.010914, 9.010914, ..., 9.010914, 9.010914,
          9.010914],
         [9.010914, 9.010914, 9.010914, ..., 9.010914, 9.010914,
          9.010914]],

        [[9.010914, 9.010914, 9.010914, ..., 9.010914, 9.010914,
          9.010914],
         [9.010914, 9.010914, 9.010914, ..., 9.010914, 9.010914,
          9.010914],
         [9.010914, 9.010914, 9.010914, ..., 9.010914, 9.010914,
          9.010914],
         ...,
         [9.010914, 9.010914, 9.010914, ..., 9.010914, 9.010914,
          9.010914],
         [9.010914, 9.010914, 9.010914, ..., 9.010914, 9.010914,
          9.010914],
         [9.010914, 9.010914, 9.010914, ..., 9.010914, 9.010914,
          9.010914]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [14], 'to': [9]}
ms node:
{'name': 'log', 'output': array([[[[9.011034, 9.011034, 9.011034, ..., 9.011034, 9.011034,
          9.011034],
         [9.011034, 9.011034, 9.011034, ..., 9.011034, 9.011034,
          9.011034],
         [9.011034, 9.011034, 9.011034, ..., 9.011034, 9.011034,
          9.011034],
         ...,
         [9.011034, 9.011034, 9.011034, ..., 9.011034, 9.011034,
          9.011034],
         [9.011034, 9.011034, 9.011034, ..., 9.011034, 9.011034,
          9.011034],
         [9.011034, 9.011034, 9.011034, ..., 9.011034, 9.011034,
          9.011034]],

        [[9.011034, 9.011034, 9.011034, ..., 9.011034, 9.011034,
          9.011034],
         [9.011034, 9.011034, 9.011034, ..., 9.011034, 9.011034,
          9.011034],
         [9.011034, 9.011034, 9.011034, ..., 9.011034, 9.011034,
          9.011034],
         ...,
         [9.011034, 9.011034, 9.011034, ..., 9.011034, 9.011034,
          9.011034],
         [9.011034, 9.011034, 9.011034, ..., 9.011034, 9.011034,
          9.011034],
         [9.011034, 9.011034, 9.011034, ..., 9.011034, 9.011034,
          9.011034]],

        [[9.011034, 9.011034, 9.011034, ..., 9.011034, 9.011034,
          9.011034],
         [9.011034, 9.011034, 9.011034, ..., 9.011034, 9.011034,
          9.011034],
         [9.011034, 9.011034, 9.011034, ..., 9.011034, 9.011034,
          9.011034],
         ...,
         [9.011034, 9.011034, 9.011034, ..., 9.011034, 9.011034,
          9.011034],
         [9.011034, 9.011034, 9.011034, ..., 9.011034, 9.011034,
          9.011034],
         [9.011034, 9.011034, 9.011034, ..., 9.011034, 9.011034,
          9.011034]],

        ...,

        [[9.010912, 9.010912, 9.010912, ..., 9.010912, 9.010912,
          9.010912],
         [9.010912, 9.010912, 9.010912, ..., 9.010912, 9.010912,
          9.010912],
         [9.010912, 9.010912, 9.010912, ..., 9.010912, 9.010912,
          9.010912],
         ...,
         [9.010912, 9.010912, 9.010912, ..., 9.010912, 9.010912,
          9.010912],
         [9.010912, 9.010912, 9.010912, ..., 9.010912, 9.010912,
          9.010912],
         [9.010912, 9.010912, 9.010912, ..., 9.010912, 9.010912,
          9.010912]],

        [[9.010912, 9.010912, 9.010912, ..., 9.010912, 9.010912,
          9.010912],
         [9.010912, 9.010912, 9.010912, ..., 9.010912, 9.010912,
          9.010912],
         [9.010912, 9.010912, 9.010912, ..., 9.010912, 9.010912,
          9.010912],
         ...,
         [9.010912, 9.010912, 9.010912, ..., 9.010912, 9.010912,
          9.010912],
         [9.010912, 9.010912, 9.010912, ..., 9.010912, 9.010912,
          9.010912],
         [9.010912, 9.010912, 9.010912, ..., 9.010912, 9.010912,
          9.010912]],

        [[9.010912, 9.010912, 9.010912, ..., 9.010912, 9.010912,
          9.010912],
         [9.010912, 9.010912, 9.010912, ..., 9.010912, 9.010912,
          9.010912],
         [9.010912, 9.010912, 9.010912, ..., 9.010912, 9.010912,
          9.010912],
         ...,
         [9.010912, 9.010912, 9.010912, ..., 9.010912, 9.010912,
          9.010912],
         [9.010912, 9.010912, 9.010912, ..., 9.010912, 9.010912,
          9.010912],
         [9.010912, 9.010912, 9.010912, ..., 9.010912, 9.010912,
          9.010912]]]], dtype=float32), 'output_shape': (1, 128, 14, 14), 'from': [14], 'to': [9]}
torch node:
{'name': 'log', 'output': array([[[[9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035],
         [9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035],
         [9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035],
         ...,
         [9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035],
         [9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035],
         [9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035]],

        [[9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035],
         [9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035],
         [9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035],
         ...,
         [9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035],
         [9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035],
         [9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035]],

        [[9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035],
         [9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035],
         [9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035],
         ...,
         [9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035],
         [9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035],
         [9.011035, 9.011035, 9.011035, ..., 9.011035, 9.011035,
          9.011035]],

        ...,

        [[9.010913, 9.010913, 9.010913, ..., 9.010913, 9.010913,
          9.010913],
         [9.010913, 9.010913, 9.010913, ..., 9.010913, 9.010913,
          9.010913],
         [9.010913, 9.010913, 9.010913, ..., 9.010913, 9.010913,
          9.010913],
         ...,
         [9.010913, 9.010913, 9.010913, ..., 9.010913, 9.010913,
          9.010913],
         [9.010913, 9.010913, 9.010913, ..., 9.010913, 9.010913,
          9.010913],
         [9.010913, 9.010913, 9.010913, ..., 9.010913, 9.010913,
          9.010913]],

        [[9.010913, 9.010913, 9.010913, ..., 9.010913, 9.010913,
          9.010913],
         [9.010913, 9.010913, 9.010913, ..., 9.010913, 9.010913,
          9.010913],
         [9.010913, 9.010913, 9.010913, ..., 9.010913, 9.010913,
          9.010913],
         ...,
         [9.010913, 9.010913, 9.010913, ..., 9.010913, 9.010913,
          9.010913],
         [9.010913, 9.010913, 9.010913, ..., 9.010913, 9.010913,
          9.010913],
         [9.010913, 9.010913, 9.010913, ..., 9.010913, 9.010913,
          9.010913]],

        [[9.010913, 9.010913, 9.010913, ..., 9.010913, 9.010913,
          9.010913],
         [9.010913, 9.010913, 9.010913, ..., 9.010913, 9.010913,
          9.010913],
         [9.010913, 9.010913, 9.010913, ..., 9.010913, 9.010913,
          9.010913],
         ...,
         [9.010913, 9.010913, 9.010913, ..., 9.010913, 9.010913,
          9.010913],
         [9.010913, 9.010913, 9.010913, ..., 9.010913, 9.010913,
          9.010913],
         [9.010913, 9.010913, 9.010913, ..., 9.010913, 9.010913,
          9.010913]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 14, 14]), 'from': [14], 'to': [9]}

generate models:465

analyse the exceptions in iter:472
torch exception:
{'id': 30, 'name': 'flatten', 'frame_work': 'torch', 'input_datas': [tensor([12.2130], grad_fn=<MeanBackward1>)]}
Dimension out of range (expected to be in range of [-1, 0], but got 1)

generate models:466

analyse output arrays in iter:496

pre layer res:
17:log
{'name': 'log', 'output': array([[[[    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ..., 16.26084,     -inf,
              -inf],
         ...,
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf]],

        [[    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ..., 16.26084,     -inf,
              -inf],
         ...,
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf]],

        [[    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ..., 16.26084,     -inf,
              -inf],
         ...,
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf]],

        ...,

        [[    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ..., 16.26084,     -inf,
              -inf],
         ...,
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf]],

        [[    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ..., 16.26084,     -inf,
              -inf],
         ...,
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf]],

        [[    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ..., 16.26084,     -inf,
              -inf],
         ...,
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 14, 14]), 'from': [8], 'to': [9]}
tf node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
           1.9396334e+01,  1.9404207e+01, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38,  1.9400278e+01, ...,
           1.9396334e+01, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38,  1.9292290e+01, ...,
           1.9400278e+01, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38,  1.8607876e+01,  1.9400278e+01, ...,
           1.9396334e+01, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
           1.9396334e+01,  1.9404207e+01, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38,  1.9400278e+01, ...,
           1.9396334e+01, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38,  1.9292290e+01, ...,
           1.9400278e+01, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38,  1.8607876e+01,  1.9400278e+01, ...,
           1.9396334e+01, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
           1.9396334e+01,  1.9404207e+01, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38,  1.9400278e+01, ...,
           1.9396334e+01, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38,  1.9292290e+01, ...,
           1.9400278e+01, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38,  1.8607876e+01,  1.9400278e+01, ...,
           1.9396334e+01, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        ...,

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
           1.9396334e+01,  1.9404207e+01, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38,  1.9400278e+01, ...,
           1.9396334e+01, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38,  1.9292290e+01, ...,
           1.9400278e+01, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38,  1.8607876e+01,  1.9400278e+01, ...,
           1.9396334e+01, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
           1.9396334e+01,  1.9404207e+01, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38,  1.9400278e+01, ...,
           1.9396334e+01, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38,  1.9292290e+01, ...,
           1.9400278e+01, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38,  1.8607876e+01,  1.9400278e+01, ...,
           1.9396334e+01, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
           1.9396334e+01,  1.9404207e+01, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38,  1.9400278e+01, ...,
           1.9396334e+01, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38,  1.9292290e+01, ...,
           1.9400278e+01, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38,  1.8607876e+01,  1.9400278e+01, ...,
           1.9396334e+01, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 7, 7]), 'from': [17], 'to': [11]}
ms node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
           1.9396332e+01,  1.9404205e+01, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38,  1.9400276e+01, ...,
           1.9396332e+01, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38,  1.9292288e+01, ...,
           1.9400276e+01, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38,  1.8607876e+01,  1.9400276e+01, ...,
           1.9396332e+01, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
           1.9396332e+01,  1.9404205e+01, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38,  1.9400276e+01, ...,
           1.9396332e+01, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38,  1.9292288e+01, ...,
           1.9400276e+01, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38,  1.8607876e+01,  1.9400276e+01, ...,
           1.9396332e+01, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
           1.9396332e+01,  1.9404205e+01, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38,  1.9400276e+01, ...,
           1.9396332e+01, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38,  1.9292288e+01, ...,
           1.9400276e+01, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38,  1.8607876e+01,  1.9400276e+01, ...,
           1.9396332e+01, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        ...,

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
           1.9396332e+01,  1.9404205e+01, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38,  1.9400276e+01, ...,
           1.9396332e+01, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38,  1.9292288e+01, ...,
           1.9400276e+01, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38,  1.8607876e+01,  1.9400276e+01, ...,
           1.9396332e+01, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
           1.9396332e+01,  1.9404205e+01, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38,  1.9400276e+01, ...,
           1.9396332e+01, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38,  1.9292288e+01, ...,
           1.9400276e+01, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38,  1.8607876e+01,  1.9400276e+01, ...,
           1.9396332e+01, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
           1.9396332e+01,  1.9404205e+01, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38,  1.9400276e+01, ...,
           1.9396332e+01, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38,  1.9292288e+01, ...,
           1.9400276e+01, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38,  1.8607876e+01,  1.9400276e+01, ...,
           1.9396332e+01, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': (1, 128, 7, 7), 'from': [17], 'to': [11]}
torch node:
{'name': 'maxpool2d', 'output': array([[[[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 19.396334, 19.404207,
               -inf],
         [     -inf,      -inf, 19.400278, ..., 19.396334,      -inf,
               -inf],
         ...,
         [     -inf,      -inf, 19.29229 , ..., 19.400278,      -inf,
               -inf],
         [     -inf, 18.607876, 19.400278, ..., 19.396334,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 19.396334, 19.404207,
               -inf],
         [     -inf,      -inf, 19.400278, ..., 19.396334,      -inf,
               -inf],
         ...,
         [     -inf,      -inf, 19.29229 , ..., 19.400278,      -inf,
               -inf],
         [     -inf, 18.607876, 19.400278, ..., 19.396334,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 19.396334, 19.404207,
               -inf],
         [     -inf,      -inf, 19.400278, ..., 19.396334,      -inf,
               -inf],
         ...,
         [     -inf,      -inf, 19.29229 , ..., 19.400278,      -inf,
               -inf],
         [     -inf, 18.607876, 19.400278, ..., 19.396334,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        ...,

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 19.396334, 19.404207,
               -inf],
         [     -inf,      -inf, 19.400278, ..., 19.396334,      -inf,
               -inf],
         ...,
         [     -inf,      -inf, 19.29229 , ..., 19.400278,      -inf,
               -inf],
         [     -inf, 18.607876, 19.400278, ..., 19.396334,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 19.396334, 19.404207,
               -inf],
         [     -inf,      -inf, 19.400278, ..., 19.396334,      -inf,
               -inf],
         ...,
         [     -inf,      -inf, 19.29229 , ..., 19.400278,      -inf,
               -inf],
         [     -inf, 18.607876, 19.400278, ..., 19.396334,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ..., 19.396334, 19.404207,
               -inf],
         [     -inf,      -inf, 19.400278, ..., 19.396334,      -inf,
               -inf],
         ...,
         [     -inf,      -inf, 19.29229 , ..., 19.400278,      -inf,
               -inf],
         [     -inf, 18.607876, 19.400278, ..., 19.396334,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 7, 7]), 'from': [17], 'to': [11]}

generate models:489

final statics:
total operators:28
tensorflow --> nums:46,distinct_bugs:5
mindspore --> nums:24,distinct_bugs:6
torch --> nums:26,distinct_bugs:7
tensorflow --> 
conv2d:31
softmax:5
cos:4
sin:5
add:1
mindspore --> 
softmax:6
sin:8
cos:5
conv2d:2
add:1
log:2
torch --> 
softmax:5
maxpool2d:6
cos:4
sin:5
flatten:3
conv2d:2
add:1

generate models:492
