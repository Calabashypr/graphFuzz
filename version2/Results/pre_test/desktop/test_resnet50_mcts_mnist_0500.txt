
analyse output arrays in iter:1

pre layer res:
5:reshape
{'name': 'reshape', 'output': array([[[[   0.,    0.,    0.,    0.,  672., 1279., 1573., 1964.,
          2381., 2129., 1744., 1651., 1495., 1324., 1345., 1339.,
          1185., 1246., 1120., 1331., 1996., 2367., 1866., 1088.,
             0.,    0.,    0.,    0.],
         [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.],
         [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.],
         [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.],
         [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.],
         [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.],
         [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.],
         [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.],
         [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.],
         [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.],
         [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.],
         [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.],
         [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.],
         [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.],
         [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.],
         [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.],
         [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.],
         [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.],
         [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.],
         [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.],
         [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.],
         [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.],
         [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.],
         [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.],
         [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.],
         [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.],
         [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.],
         [   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
             0.,    0.,    0.,    0.]]]], dtype=float32), 'output_shape': TensorShape([1, 1, 28, 28]), 'from': [4], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[ 672., 3524., 7869., ..., 7317., 2954.,    0.],
         [ 672., 3524., 7869., ..., 7317., 2954.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[ 672., 3524., 7869., ..., 7317., 2954.,    0.],
         [ 672., 3524., 7869., ..., 7317., 2954.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[ 672., 3524., 7869., ..., 7317., 2954.,    0.],
         [ 672., 3524., 7869., ..., 7317., 2954.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        ...,

        [[ 672., 3524., 7869., ..., 7317., 2954.,    0.],
         [ 672., 3524., 7869., ..., 7317., 2954.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[ 672., 3524., 7869., ..., 7317., 2954.,    0.],
         [ 672., 3524., 7869., ..., 7317., 2954.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[ 672., 3524., 7869., ..., 7317., 2954.,    0.],
         [ 672., 3524., 7869., ..., 7317., 2954.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 14, 14]), 'from': [5], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[   0., 1951., 5488., ..., 8648., 5321., 1088.],
         [   0., 1951., 5488., ..., 8648., 5321., 1088.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0., 1951., 5488., ..., 8648., 5321., 1088.],
         [   0., 1951., 5488., ..., 8648., 5321., 1088.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0., 1951., 5488., ..., 8648., 5321., 1088.],
         [   0., 1951., 5488., ..., 8648., 5321., 1088.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        ...,

        [[   0., 1951., 5488., ..., 8648., 5321., 1088.],
         [   0., 1951., 5488., ..., 8648., 5321., 1088.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0., 1951., 5488., ..., 8648., 5321., 1088.],
         [   0., 1951., 5488., ..., 8648., 5321., 1088.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0., 1951., 5488., ..., 8648., 5321., 1088.],
         [   0., 1951., 5488., ..., 8648., 5321., 1088.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]]]], dtype=float32), 'output_shape': (1, 64, 14, 14), 'from': [5], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[   0., 1951., 5488., ..., 8648., 5321., 1088.],
         [   0., 1951., 5488., ..., 8648., 5321., 1088.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0., 1951., 5488., ..., 8648., 5321., 1088.],
         [   0., 1951., 5488., ..., 8648., 5321., 1088.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0., 1951., 5488., ..., 8648., 5321., 1088.],
         [   0., 1951., 5488., ..., 8648., 5321., 1088.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        ...,

        [[   0., 1951., 5488., ..., 8648., 5321., 1088.],
         [   0., 1951., 5488., ..., 8648., 5321., 1088.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0., 1951., 5488., ..., 8648., 5321., 1088.],
         [   0., 1951., 5488., ..., 8648., 5321., 1088.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0., 1951., 5488., ..., 8648., 5321., 1088.],
         [   0., 1951., 5488., ..., 8648., 5321., 1088.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 14, 14]), 'from': [5], 'to': []}

generate models:2

analyse output arrays in iter:2

pre layer res:
3:transpose
{'name': 'transpose', 'output': array([[[[  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
           46., 120., 159., 159., 159., 150.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,  62., 126., 220., 222.,
          245., 254., 254., 254., 254., 253., 119.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,  81., 163., 163., 163.,
          163., 163., 120.,  67.,  85., 237., 177.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0., 207., 177.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0., 207., 177.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0., 207., 177.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,  47., 253., 177.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,  49., 254.,  98.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0., 116., 250.,  56.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0., 144., 240.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0., 150., 198.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0., 241., 143.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,  14., 243.,  91.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,  86., 234.,  28.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0., 178., 179.,   5., 102., 169., 169., 169.,
          169., 169., 169., 169.,  96.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,  23., 163., 248., 241., 233., 254., 254., 254., 254.,
          255., 254., 254., 255., 254.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   2.,  27., 183.,
          198., 231., 254., 254., 252., 250., 220., 137.,  57.,  57.,
           94.,  96., 153., 153., 153.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,  67., 120., 153., 254., 254.,
          254., 254., 216.,  91.,  40.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0., 232., 180., 210., 162., 125.,
           56.,  29.,  16.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,  39.,  39.,  40.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 1, 28, 28]), 'from': [0], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[   0.,   62.,  408., ...,    0.,    0.,    0.],
         [   0.,  143.,  815., ...,    0.,    0.,    0.],
         [   0.,  143.,  815., ...,    0.,    0.,    0.],
         ...,
         [   0.,  677., 1496., ...,    0.,    0.,    0.],
         [   0.,   78.,  118., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,   62.,  408., ...,    0.,    0.,    0.],
         [   0.,  143.,  815., ...,    0.,    0.,    0.],
         [   0.,  143.,  815., ...,    0.,    0.,    0.],
         ...,
         [   0.,  677., 1496., ...,    0.,    0.,    0.],
         [   0.,   78.,  118., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,   62.,  408., ...,    0.,    0.,    0.],
         [   0.,  143.,  815., ...,    0.,    0.,    0.],
         [   0.,  143.,  815., ...,    0.,    0.,    0.],
         ...,
         [   0.,  677., 1496., ...,    0.,    0.,    0.],
         [   0.,   78.,  118., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        ...,

        [[   0.,   62.,  408., ...,    0.,    0.,    0.],
         [   0.,  143.,  815., ...,    0.,    0.,    0.],
         [   0.,  143.,  815., ...,    0.,    0.,    0.],
         ...,
         [   0.,  677., 1496., ...,    0.,    0.,    0.],
         [   0.,   78.,  118., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,   62.,  408., ...,    0.,    0.,    0.],
         [   0.,  143.,  815., ...,    0.,    0.,    0.],
         [   0.,  143.,  815., ...,    0.,    0.,    0.],
         ...,
         [   0.,  677., 1496., ...,    0.,    0.,    0.],
         [   0.,   78.,  118., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,   62.,  408., ...,    0.,    0.,    0.],
         [   0.,  143.,  815., ...,    0.,    0.,    0.],
         [   0.,  143.,  815., ...,    0.,    0.,    0.],
         ...,
         [   0.,  677., 1496., ...,    0.,    0.,    0.],
         [   0.,   78.,  118., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 14, 14]), 'from': [3], 'to': [2]}
ms node:
{'name': 'conv2d', 'output': array([[[[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,  432., ...,    0.,    0.,    0.],
         [   0.,    0.,  432., ...,    0.,    0.,    0.],
         ...,
         [   0.,  338., 1082., ...,  706.,  555.,  306.],
         [   0.,  271.,  740., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,  432., ...,    0.,    0.,    0.],
         [   0.,    0.,  432., ...,    0.,    0.,    0.],
         ...,
         [   0.,  338., 1082., ...,  706.,  555.,  306.],
         [   0.,  271.,  740., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,  432., ...,    0.,    0.,    0.],
         [   0.,    0.,  432., ...,    0.,    0.,    0.],
         ...,
         [   0.,  338., 1082., ...,  706.,  555.,  306.],
         [   0.,  271.,  740., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        ...,

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,  432., ...,    0.,    0.,    0.],
         [   0.,    0.,  432., ...,    0.,    0.,    0.],
         ...,
         [   0.,  338., 1082., ...,  706.,  555.,  306.],
         [   0.,  271.,  740., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,  432., ...,    0.,    0.,    0.],
         [   0.,    0.,  432., ...,    0.,    0.,    0.],
         ...,
         [   0.,  338., 1082., ...,  706.,  555.,  306.],
         [   0.,  271.,  740., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,  432., ...,    0.,    0.,    0.],
         [   0.,    0.,  432., ...,    0.,    0.,    0.],
         ...,
         [   0.,  338., 1082., ...,  706.,  555.,  306.],
         [   0.,  271.,  740., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]]]], dtype=float32), 'output_shape': (1, 64, 14, 14), 'from': [3], 'to': [2]}
torch node:
{'name': 'conv2d', 'output': array([[[[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,  432., ...,    0.,    0.,    0.],
         [   0.,    0.,  432., ...,    0.,    0.,    0.],
         ...,
         [   0.,  338., 1082., ...,  706.,  555.,  306.],
         [   0.,  271.,  740., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,  432., ...,    0.,    0.,    0.],
         [   0.,    0.,  432., ...,    0.,    0.,    0.],
         ...,
         [   0.,  338., 1082., ...,  706.,  555.,  306.],
         [   0.,  271.,  740., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,  432., ...,    0.,    0.,    0.],
         [   0.,    0.,  432., ...,    0.,    0.,    0.],
         ...,
         [   0.,  338., 1082., ...,  706.,  555.,  306.],
         [   0.,  271.,  740., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        ...,

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,  432., ...,    0.,    0.,    0.],
         [   0.,    0.,  432., ...,    0.,    0.,    0.],
         ...,
         [   0.,  338., 1082., ...,  706.,  555.,  306.],
         [   0.,  271.,  740., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,  432., ...,    0.,    0.,    0.],
         [   0.,    0.,  432., ...,    0.,    0.,    0.],
         ...,
         [   0.,  338., 1082., ...,  706.,  555.,  306.],
         [   0.,  271.,  740., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,  432., ...,    0.,    0.,    0.],
         [   0.,    0.,  432., ...,    0.,    0.,    0.],
         ...,
         [   0.,  338., 1082., ...,  706.,  555.,  306.],
         [   0.,  271.,  740., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 14, 14]), 'from': [3], 'to': [2]}

generate models:3

final statics:
total operators:28
tensorflow --> nums:2,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:2
mindspore --> 
torch --> 

generate models:10

analyse output arrays in iter:13

pre layer res:
10:add
{'name': 'add', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [9, 6], 'to': [4]}
tf node:
{'name': 'log', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [10], 'to': [11]}
ms node:
{'name': 'log', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 256, 28, 28), 'from': [10], 'to': [11]}
torch node:
{'name': 'log', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 28, 28]), 'from': [10], 'to': [11]}

generate models:14

analyse the exceptions in iter:15
torch exception:
{'id': 27, 'name': 'flatten', 'frame_work': 'torch', 'input_datas': [tensor([65.4796], grad_fn=<MeanBackward1>)]}
Dimension out of range (expected to be in range of [-1, 0], but got 1)

generate models:16

analyse output arrays in iter:16

pre layer res:
2:relu
{'name': 'relu', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [1], 'to': [5]}
tf node:
{'name': 'sin', 'output': array([[[[0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         ...,
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471]],

        [[0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         ...,
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471]],

        [[0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         ...,
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471]],

        ...,

        [[0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         ...,
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471]],

        [[0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         ...,
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471]],

        [[0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         ...,
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [2], 'to': [3]}
ms node:
{'name': 'sin', 'output': array([[[[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        ...,

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [2], 'to': [3]}
torch node:
{'name': 'sin', 'output': array([[[[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        ...,

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [2], 'to': [3]}

generate models:17

analyse output arrays in iter:22

pre layer res:
17:add
{'name': 'add', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [13, 20], 'to': [14]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 26, 26]), 'from': [17], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 64, 26, 26), 'from': [17], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 26, 26]), 'from': [17], 'to': []}

generate models:22

analyse output arrays in iter:27

pre layer res:
9:conv2d
{'name': 'conv2d', 'output': array([[[[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         ...,
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         ...,
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         ...,
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        ...,

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         ...,
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         ...,
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         ...,
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [24], 'to': [10, 4]}
tf node:
{'name': 'cos', 'output': array([[[[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]],

        [[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]],

        [[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]],

        ...,

        [[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]],

        [[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]],

        [[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [9], 'to': [8]}
ms node:
{'name': 'cos', 'output': array([[[[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]],

        [[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]],

        [[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]],

        ...,

        [[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]],

        [[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]],

        [[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]]]], dtype=float32), 'output_shape': (1, 256, 28, 28), 'from': [9], 'to': [8]}
torch node:
{'name': 'cos', 'output': array([[[[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]],

        [[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]],

        [[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]],

        ...,

        [[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]],

        [[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]],

        [[0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         ...,
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724],
         [0.39185724, 0.39185724, 0.39185724, ..., 0.39185724,
          0.39185724, 0.39185724]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 28, 28]), 'from': [9], 'to': [8]}

generate models:27

final statics:
total operators:28
tensorflow --> nums:6,distinct_bugs:4
mindspore --> nums:3,distinct_bugs:3
torch --> nums:4,distinct_bugs:4
tensorflow --> 
conv2d:3
log:1
sin:1
cos:1
mindspore --> 
log:1
sin:1
cos:1
torch --> 
log:1
flatten:1
sin:1
cos:1

generate models:46

analyse output arrays in iter:56

pre layer res:
12:conv2d
{'name': 'conv2d', 'output': array([[[[7.971939e-05, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00],
         [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00],
         [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00],
         ...,
         [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00],
         [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00],
         [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00]],

        [[7.971939e-05, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00],
         [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00],
         [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00],
         ...,
         [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00],
         [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00],
         [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00]],

        [[7.971939e-05, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00],
         [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00],
         [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00],
         ...,
         [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00],
         [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00],
         [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00]],

        ...,

        [[7.971939e-05, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00],
         [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00],
         [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00],
         ...,
         [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00],
         [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00],
         [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00]],

        [[7.971939e-05, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00],
         [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00],
         [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00],
         ...,
         [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00],
         [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00],
         [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00]],

        [[7.971939e-05, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00],
         [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00],
         [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00],
         ...,
         [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00],
         [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00],
         [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
          0.000000e+00, 0.000000e+00]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [4], 'to': [27]}
tf node:
{'name': 'cos', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [12], 'to': [13]}
ms node:
{'name': 'cos', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [12], 'to': [13]}
torch node:
{'name': 'cos', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [12], 'to': [13]}

generate models:51

analyse output arrays in iter:69

pre layer res:
18:sin
{'name': 'sin', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [4], 'to': [15]}
tf node:
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [18], 'to': [5]}
ms node:
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [18], 'to': [5]}
torch node:
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [18], 'to': [5]}

generate models:63

analyse output arrays in iter:71

pre layer res:
24:reshape
{'name': 'reshape', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [23], 'to': [6]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [24], 'to': [7]}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [24], 'to': [7]}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [24], 'to': [7]}

generate models:65

analyse output arrays in iter:79

pre layer res:
10:add
{'name': 'add', 'output': array([[[[     0.   ,      0.   ,      0.   , ..., 145776.56 ,
           97184.37 ,  48592.242],
         [     0.   ,      0.   ,      0.   , ..., 218664.92 ,
          145776.44 ,  72888.28 ],
         [     0.   ,      0.   ,      0.   , ..., 218664.92 ,
          145776.44 ,  72888.28 ],
         ...,
         [     0.   ,      0.   ,      0.   , ..., 145776.42 ,
           97184.336,  48592.168],
         [     0.   ,      0.   ,      0.   , ..., 145776.42 ,
           97184.336,  48592.168],
         [     0.   ,      0.   ,      0.   , ...,  97184.17 ,
           64789.504,  32394.744]],

        [[     0.   ,      0.   ,      0.   , ..., 145776.56 ,
           97184.37 ,  48592.242],
         [     0.   ,      0.   ,      0.   , ..., 218664.92 ,
          145776.44 ,  72888.28 ],
         [     0.   ,      0.   ,      0.   , ..., 218664.92 ,
          145776.44 ,  72888.28 ],
         ...,
         [     0.   ,      0.   ,      0.   , ..., 145776.42 ,
           97184.336,  48592.168],
         [     0.   ,      0.   ,      0.   , ..., 145776.42 ,
           97184.336,  48592.168],
         [     0.   ,      0.   ,      0.   , ...,  97184.17 ,
           64789.504,  32394.744]],

        [[     0.   ,      0.   ,      0.   , ..., 145776.56 ,
           97184.37 ,  48592.242],
         [     0.   ,      0.   ,      0.   , ..., 218664.92 ,
          145776.44 ,  72888.28 ],
         [     0.   ,      0.   ,      0.   , ..., 218664.92 ,
          145776.44 ,  72888.28 ],
         ...,
         [     0.   ,      0.   ,      0.   , ..., 145776.42 ,
           97184.336,  48592.168],
         [     0.   ,      0.   ,      0.   , ..., 145776.42 ,
           97184.336,  48592.168],
         [     0.   ,      0.   ,      0.   , ...,  97184.17 ,
           64789.504,  32394.744]],

        ...,

        [[     0.   ,      0.   ,      0.   , ..., 145776.56 ,
           97184.37 ,  48592.242],
         [     0.   ,      0.   ,      0.   , ..., 218664.92 ,
          145776.44 ,  72888.28 ],
         [     0.   ,      0.   ,      0.   , ..., 218664.92 ,
          145776.44 ,  72888.28 ],
         ...,
         [     0.   ,      0.   ,      0.   , ..., 145776.42 ,
           97184.336,  48592.168],
         [     0.   ,      0.   ,      0.   , ..., 145776.42 ,
           97184.336,  48592.168],
         [     0.   ,      0.   ,      0.   , ...,  97184.17 ,
           64789.504,  32394.744]],

        [[     0.   ,      0.   ,      0.   , ..., 145776.56 ,
           97184.37 ,  48592.242],
         [     0.   ,      0.   ,      0.   , ..., 218664.92 ,
          145776.44 ,  72888.28 ],
         [     0.   ,      0.   ,      0.   , ..., 218664.92 ,
          145776.44 ,  72888.28 ],
         ...,
         [     0.   ,      0.   ,      0.   , ..., 145776.42 ,
           97184.336,  48592.168],
         [     0.   ,      0.   ,      0.   , ..., 145776.42 ,
           97184.336,  48592.168],
         [     0.   ,      0.   ,      0.   , ...,  97184.17 ,
           64789.504,  32394.744]],

        [[     0.   ,      0.   ,      0.   , ..., 145776.56 ,
           97184.37 ,  48592.242],
         [     0.   ,      0.   ,      0.   , ..., 218664.92 ,
          145776.44 ,  72888.28 ],
         [     0.   ,      0.   ,      0.   , ..., 218664.92 ,
          145776.44 ,  72888.28 ],
         ...,
         [     0.   ,      0.   ,      0.   , ..., 145776.42 ,
           97184.336,  48592.168],
         [     0.   ,      0.   ,      0.   , ..., 145776.42 ,
           97184.336,  48592.168],
         [     0.   ,      0.   ,      0.   , ...,  97184.17 ,
           64789.504,  32394.744]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [8, 8], 'to': [17]}
tf node:
{'name': 'sin', 'output': array([[[[ 0.        ,  0.        ,  0.        , ...,  0.37109518,
           0.718436  , -0.94202477],
         [ 0.        ,  0.        ,  0.        , ..., -0.6039176 ,
           0.25242746, -0.18895127],
         [ 0.        ,  0.        ,  0.        , ..., -0.6039176 ,
           0.25242746, -0.18895127],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.23727825,
           0.739819  , -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.23727825,
           0.739819  , -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.83977234,
          -0.4246826 , -0.9777186 ]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.37109518,
           0.718436  , -0.94202477],
         [ 0.        ,  0.        ,  0.        , ..., -0.6039176 ,
           0.25242746, -0.18895127],
         [ 0.        ,  0.        ,  0.        , ..., -0.6039176 ,
           0.25242746, -0.18895127],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.23727825,
           0.739819  , -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.23727825,
           0.739819  , -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.83977234,
          -0.4246826 , -0.9777186 ]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.37109518,
           0.718436  , -0.94202477],
         [ 0.        ,  0.        ,  0.        , ..., -0.6039176 ,
           0.25242746, -0.18895127],
         [ 0.        ,  0.        ,  0.        , ..., -0.6039176 ,
           0.25242746, -0.18895127],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.23727825,
           0.739819  , -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.23727825,
           0.739819  , -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.83977234,
          -0.4246826 , -0.9777186 ]],

        ...,

        [[ 0.        ,  0.        ,  0.        , ...,  0.37109518,
           0.718436  , -0.94202477],
         [ 0.        ,  0.        ,  0.        , ..., -0.6039176 ,
           0.25242746, -0.18895127],
         [ 0.        ,  0.        ,  0.        , ..., -0.6039176 ,
           0.25242746, -0.18895127],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.23727825,
           0.739819  , -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.23727825,
           0.739819  , -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.83977234,
          -0.4246826 , -0.9777186 ]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.37109518,
           0.718436  , -0.94202477],
         [ 0.        ,  0.        ,  0.        , ..., -0.6039176 ,
           0.25242746, -0.18895127],
         [ 0.        ,  0.        ,  0.        , ..., -0.6039176 ,
           0.25242746, -0.18895127],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.23727825,
           0.739819  , -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.23727825,
           0.739819  , -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.83977234,
          -0.4246826 , -0.9777186 ]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.37109518,
           0.718436  , -0.94202477],
         [ 0.        ,  0.        ,  0.        , ..., -0.6039176 ,
           0.25242746, -0.18895127],
         [ 0.        ,  0.        ,  0.        , ..., -0.6039176 ,
           0.25242746, -0.18895127],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.23727825,
           0.739819  , -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.23727825,
           0.739819  , -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.83977234,
          -0.4246826 , -0.9777186 ]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [10], 'to': [9]}
ms node:
{'name': 'sin', 'output': array([[[[ 0.        ,  0.        ,  0.        , ...,  0.23727825,
           0.72384834, -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.00778211,
           0.23727825, -0.14272995],
         [ 0.        ,  0.        ,  0.        , ..., -0.00778211,
           0.23727825, -0.14272995],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.6505536 ,
           0.718436  , -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.6505536 ,
           0.718436  , -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.718436  ,
          -0.4246826 , -0.97604877]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.23727825,
           0.72384834, -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.00778211,
           0.23727825, -0.14272995],
         [ 0.        ,  0.        ,  0.        , ..., -0.00778211,
           0.23727825, -0.14272995],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.6505536 ,
           0.718436  , -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.6505536 ,
           0.718436  , -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.718436  ,
          -0.4246826 , -0.97604877]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.23727825,
           0.72384834, -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.00778211,
           0.23727825, -0.14272995],
         [ 0.        ,  0.        ,  0.        , ..., -0.00778211,
           0.23727825, -0.14272995],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.6505536 ,
           0.718436  , -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.6505536 ,
           0.718436  , -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.718436  ,
          -0.4246826 , -0.97604877]],

        ...,

        [[ 0.        ,  0.        ,  0.        , ...,  0.23727825,
           0.72384834, -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.00778211,
           0.23727825, -0.14272995],
         [ 0.        ,  0.        ,  0.        , ..., -0.00778211,
           0.23727825, -0.14272995],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.6505536 ,
           0.718436  , -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.6505536 ,
           0.718436  , -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.718436  ,
          -0.4246826 , -0.97604877]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.23727825,
           0.72384834, -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.00778211,
           0.23727825, -0.14272995],
         [ 0.        ,  0.        ,  0.        , ..., -0.00778211,
           0.23727825, -0.14272995],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.6505536 ,
           0.718436  , -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.6505536 ,
           0.718436  , -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.718436  ,
          -0.4246826 , -0.97604877]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.23727825,
           0.72384834, -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ..., -0.00778211,
           0.23727825, -0.14272995],
         [ 0.        ,  0.        ,  0.        , ..., -0.00778211,
           0.23727825, -0.14272995],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.6505536 ,
           0.718436  , -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.6505536 ,
           0.718436  , -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.718436  ,
          -0.4246826 , -0.97604877]]]], dtype=float32), 'output_shape': (1, 256, 28, 28), 'from': [10], 'to': [9]}
torch node:
{'name': 'sin', 'output': array([[[[ 0.        ,  0.        ,  0.        , ..., -0.08844615,
           0.8603349 , -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.20940635,
          -0.08844615, -0.08063143],
         [ 0.        ,  0.        ,  0.        , ...,  0.20940635,
          -0.08844615, -0.08063143],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.6505536 ,
           0.3340657 , -0.94461745],
         [ 0.        ,  0.        ,  0.        , ...,  0.6505536 ,
           0.3340657 , -0.94461745],
         [ 0.        ,  0.        ,  0.        , ...,  0.3340657 ,
          -0.63244456, -0.97604877]],

        [[ 0.        ,  0.        ,  0.        , ..., -0.08844615,
           0.8603349 , -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.20940635,
          -0.08844615, -0.08063143],
         [ 0.        ,  0.        ,  0.        , ...,  0.20940635,
          -0.08844615, -0.08063143],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.6505536 ,
           0.3340657 , -0.94461745],
         [ 0.        ,  0.        ,  0.        , ...,  0.6505536 ,
           0.3340657 , -0.94461745],
         [ 0.        ,  0.        ,  0.        , ...,  0.3340657 ,
          -0.63244456, -0.97604877]],

        [[ 0.        ,  0.        ,  0.        , ..., -0.08844615,
           0.8603349 , -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.20940635,
          -0.08844615, -0.08063143],
         [ 0.        ,  0.        ,  0.        , ...,  0.20940635,
          -0.08844615, -0.08063143],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.6505536 ,
           0.3340657 , -0.94461745],
         [ 0.        ,  0.        ,  0.        , ...,  0.6505536 ,
           0.3340657 , -0.94461745],
         [ 0.        ,  0.        ,  0.        , ...,  0.3340657 ,
          -0.63244456, -0.97604877]],

        ...,

        [[ 0.        ,  0.        ,  0.        , ..., -0.08844615,
           0.8603349 , -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.20940635,
          -0.08844615, -0.08063143],
         [ 0.        ,  0.        ,  0.        , ...,  0.20940635,
          -0.08844615, -0.08063143],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.6505536 ,
           0.3340657 , -0.94461745],
         [ 0.        ,  0.        ,  0.        , ...,  0.6505536 ,
           0.3340657 , -0.94461745],
         [ 0.        ,  0.        ,  0.        , ...,  0.3340657 ,
          -0.63244456, -0.97604877]],

        [[ 0.        ,  0.        ,  0.        , ..., -0.08844615,
           0.8603349 , -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.20940635,
          -0.08844615, -0.08063143],
         [ 0.        ,  0.        ,  0.        , ...,  0.20940635,
          -0.08844615, -0.08063143],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.6505536 ,
           0.3340657 , -0.94461745],
         [ 0.        ,  0.        ,  0.        , ...,  0.6505536 ,
           0.3340657 , -0.94461745],
         [ 0.        ,  0.        ,  0.        , ...,  0.3340657 ,
          -0.63244456, -0.97604877]],

        [[ 0.        ,  0.        ,  0.        , ..., -0.08844615,
           0.8603349 , -0.9145507 ],
         [ 0.        ,  0.        ,  0.        , ...,  0.20940635,
          -0.08844615, -0.08063143],
         [ 0.        ,  0.        ,  0.        , ...,  0.20940635,
          -0.08844615, -0.08063143],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.6505536 ,
           0.3340657 , -0.94461745],
         [ 0.        ,  0.        ,  0.        , ...,  0.6505536 ,
           0.3340657 , -0.94461745],
         [ 0.        ,  0.        ,  0.        , ...,  0.3340657 ,
          -0.63244456, -0.97604877]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 28, 28]), 'from': [10], 'to': [9]}

generate models:72

analyse output arrays in iter:99

pre layer res:
7:relu
{'name': 'relu', 'output': array([[[[ 8192., 12288., 12288., ..., 12288., 12288.,  8192.],
         [12288., 18432., 18432., ..., 18432., 18432., 12288.],
         [12288., 18432., 18432., ..., 18432., 18432., 12288.],
         ...,
         [12288., 18432., 18432., ..., 18432., 18432., 12288.],
         [12288., 18432., 18432., ..., 18432., 18432., 12288.],
         [ 8192., 12288., 12288., ..., 12288., 12288.,  8192.]],

        [[ 8192., 12288., 12288., ..., 12288., 12288.,  8192.],
         [12288., 18432., 18432., ..., 18432., 18432., 12288.],
         [12288., 18432., 18432., ..., 18432., 18432., 12288.],
         ...,
         [12288., 18432., 18432., ..., 18432., 18432., 12288.],
         [12288., 18432., 18432., ..., 18432., 18432., 12288.],
         [ 8192., 12288., 12288., ..., 12288., 12288.,  8192.]],

        [[ 8192., 12288., 12288., ..., 12288., 12288.,  8192.],
         [12288., 18432., 18432., ..., 18432., 18432., 12288.],
         [12288., 18432., 18432., ..., 18432., 18432., 12288.],
         ...,
         [12288., 18432., 18432., ..., 18432., 18432., 12288.],
         [12288., 18432., 18432., ..., 18432., 18432., 12288.],
         [ 8192., 12288., 12288., ..., 12288., 12288.,  8192.]],

        ...,

        [[ 8192., 12288., 12288., ..., 12288., 12288.,  8192.],
         [12288., 18432., 18432., ..., 18432., 18432., 12288.],
         [12288., 18432., 18432., ..., 18432., 18432., 12288.],
         ...,
         [12288., 18432., 18432., ..., 18432., 18432., 12288.],
         [12288., 18432., 18432., ..., 18432., 18432., 12288.],
         [ 8192., 12288., 12288., ..., 12288., 12288.,  8192.]],

        [[ 8192., 12288., 12288., ..., 12288., 12288.,  8192.],
         [12288., 18432., 18432., ..., 18432., 18432., 12288.],
         [12288., 18432., 18432., ..., 18432., 18432., 12288.],
         ...,
         [12288., 18432., 18432., ..., 18432., 18432., 12288.],
         [12288., 18432., 18432., ..., 18432., 18432., 12288.],
         [ 8192., 12288., 12288., ..., 12288., 12288.,  8192.]],

        [[ 8192., 12288., 12288., ..., 12288., 12288.,  8192.],
         [12288., 18432., 18432., ..., 18432., 18432., 12288.],
         [12288., 18432., 18432., ..., 18432., 18432., 12288.],
         ...,
         [12288., 18432., 18432., ..., 18432., 18432., 12288.],
         [12288., 18432., 18432., ..., 18432., 18432., 12288.],
         [ 8192., 12288., 12288., ..., 12288., 12288.,  8192.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [6], 'to': [22]}
tf node:
{'name': 'sin', 'output': array([[[[-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ],
         [-0.9428665 , -0.27241433, -0.27241433, ..., -0.27241433,
          -0.27241433, -0.9428665 ],
         [-0.9428665 , -0.27241433, -0.27241433, ..., -0.27241433,
          -0.27241433, -0.9428665 ],
         ...,
         [-0.9428665 , -0.27241433, -0.27241433, ..., -0.27241433,
          -0.27241433, -0.9428665 ],
         [-0.9428665 , -0.27241433, -0.27241433, ..., -0.27241433,
          -0.27241433, -0.9428665 ],
         [-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ]],

        [[-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ],
         [-0.9428665 , -0.27241433, -0.27241433, ..., -0.27241433,
          -0.27241433, -0.9428665 ],
         [-0.9428665 , -0.27241433, -0.27241433, ..., -0.27241433,
          -0.27241433, -0.9428665 ],
         ...,
         [-0.9428665 , -0.27241433, -0.27241433, ..., -0.27241433,
          -0.27241433, -0.9428665 ],
         [-0.9428665 , -0.27241433, -0.27241433, ..., -0.27241433,
          -0.27241433, -0.9428665 ],
         [-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ]],

        [[-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ],
         [-0.9428665 , -0.27241433, -0.27241433, ..., -0.27241433,
          -0.27241433, -0.9428665 ],
         [-0.9428665 , -0.27241433, -0.27241433, ..., -0.27241433,
          -0.27241433, -0.9428665 ],
         ...,
         [-0.9428665 , -0.27241433, -0.27241433, ..., -0.27241433,
          -0.27241433, -0.9428665 ],
         [-0.9428665 , -0.27241433, -0.27241433, ..., -0.27241433,
          -0.27241433, -0.9428665 ],
         [-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ]],

        ...,

        [[-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ],
         [-0.9428665 , -0.27241433, -0.27241433, ..., -0.27241433,
          -0.27241433, -0.9428665 ],
         [-0.9428665 , -0.27241433, -0.27241433, ..., -0.27241433,
          -0.27241433, -0.9428665 ],
         ...,
         [-0.9428665 , -0.27241433, -0.27241433, ..., -0.27241433,
          -0.27241433, -0.9428665 ],
         [-0.9428665 , -0.27241433, -0.27241433, ..., -0.27241433,
          -0.27241433, -0.9428665 ],
         [-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ]],

        [[-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ],
         [-0.9428665 , -0.27241433, -0.27241433, ..., -0.27241433,
          -0.27241433, -0.9428665 ],
         [-0.9428665 , -0.27241433, -0.27241433, ..., -0.27241433,
          -0.27241433, -0.9428665 ],
         ...,
         [-0.9428665 , -0.27241433, -0.27241433, ..., -0.27241433,
          -0.27241433, -0.9428665 ],
         [-0.9428665 , -0.27241433, -0.27241433, ..., -0.27241433,
          -0.27241433, -0.9428665 ],
         [-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ]],

        [[-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ],
         [-0.9428665 , -0.27241433, -0.27241433, ..., -0.27241433,
          -0.27241433, -0.9428665 ],
         [-0.9428665 , -0.27241433, -0.27241433, ..., -0.27241433,
          -0.27241433, -0.9428665 ],
         ...,
         [-0.9428665 , -0.27241433, -0.27241433, ..., -0.27241433,
          -0.27241433, -0.9428665 ],
         [-0.9428665 , -0.27241433, -0.27241433, ..., -0.27241433,
          -0.27241433, -0.9428665 ],
         [-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [7], 'to': [8]}
ms node:
{'name': 'sin', 'output': array([[[[-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         ...,
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ]],

        [[-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         ...,
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ]],

        [[-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         ...,
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ]],

        ...,

        [[-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         ...,
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ]],

        [[-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         ...,
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ]],

        [[-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         ...,
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [7], 'to': [8]}
torch node:
{'name': 'sin', 'output': array([[[[-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         ...,
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ]],

        [[-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         ...,
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ]],

        [[-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         ...,
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ]],

        ...,

        [[-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         ...,
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ]],

        [[-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         ...,
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ]],

        [[-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         ...,
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9428665 , -0.27241436, -0.27241436, ..., -0.27241436,
          -0.27241436, -0.9428665 ],
         [-0.9561732 , -0.9428665 , -0.9428665 , ..., -0.9428665 ,
          -0.9428665 , -0.9561732 ]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [7], 'to': [8]}

generate models:90

final statics:
total operators:28
tensorflow --> nums:11,distinct_bugs:4
mindspore --> nums:7,distinct_bugs:3
torch --> nums:8,distinct_bugs:4
tensorflow --> 
conv2d:4
log:2
sin:3
cos:2
mindspore --> 
log:2
sin:3
cos:2
torch --> 
log:2
flatten:1
sin:3
cos:2

generate models:90

analyse output arrays in iter:101

pre layer res:
10:add
{'name': 'add', 'output': array([[[[7.7200000e+02, 1.1560000e+03, 1.1560000e+03, ...,
          7.1056934e+02, 6.6045972e+02, 2.9232489e+02],
         [1.1560000e+03, 1.7320000e+03, 1.7320000e+03, ...,
          1.0639182e+03, 9.8946710e+02, 4.3757492e+02],
         [1.1560000e+03, 1.7320000e+03, 1.7320000e+03, ...,
          1.0639182e+03, 9.8946710e+02, 4.3757492e+02],
         ...,
         [7.7100000e+02, 1.1550000e+03, 1.1550000e+03, ...,
          7.0961230e+02, 6.5997827e+02, 2.9204987e+02],
         [7.7100000e+02, 1.1550000e+03, 1.1550000e+03, ...,
          7.0961230e+02, 6.5997827e+02, 2.9204987e+02],
         [5.1500000e+02, 7.7100000e+02, 7.7100000e+02, ...,
          4.7404648e+02, 4.4063931e+02, 1.9521640e+02]],

        [[7.7200000e+02, 1.1560000e+03, 1.1560000e+03, ...,
          7.1056934e+02, 6.6045972e+02, 2.9232489e+02],
         [1.1560000e+03, 1.7320000e+03, 1.7320000e+03, ...,
          1.0639182e+03, 9.8946710e+02, 4.3757492e+02],
         [1.1560000e+03, 1.7320000e+03, 1.7320000e+03, ...,
          1.0639182e+03, 9.8946710e+02, 4.3757492e+02],
         ...,
         [7.7100000e+02, 1.1550000e+03, 1.1550000e+03, ...,
          7.0961230e+02, 6.5997827e+02, 2.9204987e+02],
         [7.7100000e+02, 1.1550000e+03, 1.1550000e+03, ...,
          7.0961230e+02, 6.5997827e+02, 2.9204987e+02],
         [5.1500000e+02, 7.7100000e+02, 7.7100000e+02, ...,
          4.7404648e+02, 4.4063931e+02, 1.9521640e+02]],

        [[7.7200000e+02, 1.1560000e+03, 1.1560000e+03, ...,
          7.1056934e+02, 6.6045972e+02, 2.9232489e+02],
         [1.1560000e+03, 1.7320000e+03, 1.7320000e+03, ...,
          1.0639182e+03, 9.8946710e+02, 4.3757492e+02],
         [1.1560000e+03, 1.7320000e+03, 1.7320000e+03, ...,
          1.0639182e+03, 9.8946710e+02, 4.3757492e+02],
         ...,
         [7.7100000e+02, 1.1550000e+03, 1.1550000e+03, ...,
          7.0961230e+02, 6.5997827e+02, 2.9204987e+02],
         [7.7100000e+02, 1.1550000e+03, 1.1550000e+03, ...,
          7.0961230e+02, 6.5997827e+02, 2.9204987e+02],
         [5.1500000e+02, 7.7100000e+02, 7.7100000e+02, ...,
          4.7404648e+02, 4.4063931e+02, 1.9521640e+02]],

        ...,

        [[1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         ...,
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00]],

        [[1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         ...,
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00]],

        [[1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         ...,
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [14, 23], 'to': [26]}
tf node:
{'name': 'sin', 'output': array([[[[-0.7391401 , -0.10589759, -0.10589759, ...,  0.5391236 ,
           0.6633297 , -0.15613195],
         [-0.10589759, -0.8318584 , -0.8318584 , ...,  0.88275623,
           0.13417792, -0.77929616],
         [-0.10589759, -0.8318584 , -0.8318584 , ...,  0.88275623,
           0.13417792, -0.77929616],
         ...,
         [-0.96613336, -0.8939561 , -0.8939561 , ..., -0.37799996,
           0.2414058 ,  0.11797567],
         [-0.96613336, -0.8939561 , -0.8939561 , ..., -0.37799996,
           0.2414058 ,  0.11797567],
         [-0.21939585, -0.96613336, -0.96613336, ...,  0.32783633,
           0.72864485,  0.42381722]],

        [[-0.7391401 , -0.10589759, -0.10589759, ...,  0.5391236 ,
           0.6633297 , -0.15613195],
         [-0.10589759, -0.8318584 , -0.8318584 , ...,  0.88275623,
           0.13417792, -0.77929616],
         [-0.10589759, -0.8318584 , -0.8318584 , ...,  0.88275623,
           0.13417792, -0.77929616],
         ...,
         [-0.96613336, -0.8939561 , -0.8939561 , ..., -0.37799996,
           0.2414058 ,  0.11797567],
         [-0.96613336, -0.8939561 , -0.8939561 , ..., -0.37799996,
           0.2414058 ,  0.11797567],
         [-0.21939585, -0.96613336, -0.96613336, ...,  0.32783633,
           0.72864485,  0.42381722]],

        [[-0.7391401 , -0.10589759, -0.10589759, ...,  0.5391236 ,
           0.6633297 , -0.15613195],
         [-0.10589759, -0.8318584 , -0.8318584 , ...,  0.88275623,
           0.13417792, -0.77929616],
         [-0.10589759, -0.8318584 , -0.8318584 , ...,  0.88275623,
           0.13417792, -0.77929616],
         ...,
         [-0.96613336, -0.8939561 , -0.8939561 , ..., -0.37799996,
           0.2414058 ,  0.11797567],
         [-0.96613336, -0.8939561 , -0.8939561 , ..., -0.37799996,
           0.2414058 ,  0.11797567],
         [-0.21939585, -0.96613336, -0.96613336, ...,  0.32783633,
           0.72864485,  0.42381722]],

        ...,

        [[ 0.841471  ,  0.841471  ,  0.841471  , ...,  0.841471  ,
           0.841471  ,  0.841471  ],
         [ 0.841471  ,  0.841471  ,  0.841471  , ...,  0.841471  ,
           0.841471  ,  0.841471  ],
         [ 0.841471  ,  0.841471  ,  0.841471  , ...,  0.841471  ,
           0.841471  ,  0.841471  ],
         ...,
         [ 0.841471  ,  0.841471  ,  0.841471  , ...,  0.841471  ,
           0.841471  ,  0.841471  ],
         [ 0.841471  ,  0.841471  ,  0.841471  , ...,  0.841471  ,
           0.841471  ,  0.841471  ],
         [ 0.841471  ,  0.841471  ,  0.841471  , ...,  0.841471  ,
           0.841471  ,  0.841471  ]],

        [[ 0.841471  ,  0.841471  ,  0.841471  , ...,  0.841471  ,
           0.841471  ,  0.841471  ],
         [ 0.841471  ,  0.841471  ,  0.841471  , ...,  0.841471  ,
           0.841471  ,  0.841471  ],
         [ 0.841471  ,  0.841471  ,  0.841471  , ...,  0.841471  ,
           0.841471  ,  0.841471  ],
         ...,
         [ 0.841471  ,  0.841471  ,  0.841471  , ...,  0.841471  ,
           0.841471  ,  0.841471  ],
         [ 0.841471  ,  0.841471  ,  0.841471  , ...,  0.841471  ,
           0.841471  ,  0.841471  ],
         [ 0.841471  ,  0.841471  ,  0.841471  , ...,  0.841471  ,
           0.841471  ,  0.841471  ]],

        [[ 0.841471  ,  0.841471  ,  0.841471  , ...,  0.841471  ,
           0.841471  ,  0.841471  ],
         [ 0.841471  ,  0.841471  ,  0.841471  , ...,  0.841471  ,
           0.841471  ,  0.841471  ],
         [ 0.841471  ,  0.841471  ,  0.841471  , ...,  0.841471  ,
           0.841471  ,  0.841471  ],
         ...,
         [ 0.841471  ,  0.841471  ,  0.841471  , ...,  0.841471  ,
           0.841471  ,  0.841471  ],
         [ 0.841471  ,  0.841471  ,  0.841471  , ...,  0.841471  ,
           0.841471  ,  0.841471  ],
         [ 0.841471  ,  0.841471  ,  0.841471  , ...,  0.841471  ,
           0.841471  ,  0.841471  ]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [10], 'to': [11]}
ms node:
{'name': 'sin', 'output': array([[[[-0.7391401 , -0.10589759, -0.10589759, ...,  0.53912365,
           0.66332966, -0.15610181],
         [-0.10589759, -0.8318584 , -0.8318584 , ...,  0.88275623,
           0.13417792, -0.7791048 ],
         [-0.10589759, -0.8318584 , -0.8318584 , ...,  0.88275623,
           0.13417792, -0.7791048 ],
         ...,
         [-0.96613336, -0.8939561 , -0.8939561 , ..., -0.37799996,
           0.24134657,  0.11797567],
         [-0.96613336, -0.8939561 , -0.8939561 , ..., -0.37799996,
           0.24134657,  0.11797567],
         [-0.21939585, -0.96613336, -0.96613336, ...,  0.32786515,
           0.72858214,  0.4237896 ]],

        [[-0.7391401 , -0.10589759, -0.10589759, ...,  0.53912365,
           0.66332966, -0.15610181],
         [-0.10589759, -0.8318584 , -0.8318584 , ...,  0.88275623,
           0.13417792, -0.7791048 ],
         [-0.10589759, -0.8318584 , -0.8318584 , ...,  0.88275623,
           0.13417792, -0.7791048 ],
         ...,
         [-0.96613336, -0.8939561 , -0.8939561 , ..., -0.37799996,
           0.24134657,  0.11797567],
         [-0.96613336, -0.8939561 , -0.8939561 , ..., -0.37799996,
           0.24134657,  0.11797567],
         [-0.21939585, -0.96613336, -0.96613336, ...,  0.32786515,
           0.72858214,  0.4237896 ]],

        [[-0.7391401 , -0.10589759, -0.10589759, ...,  0.53912365,
           0.66332966, -0.15610181],
         [-0.10589759, -0.8318584 , -0.8318584 , ...,  0.88275623,
           0.13417792, -0.7791048 ],
         [-0.10589759, -0.8318584 , -0.8318584 , ...,  0.88275623,
           0.13417792, -0.7791048 ],
         ...,
         [-0.96613336, -0.8939561 , -0.8939561 , ..., -0.37799996,
           0.24134657,  0.11797567],
         [-0.96613336, -0.8939561 , -0.8939561 , ..., -0.37799996,
           0.24134657,  0.11797567],
         [-0.21939585, -0.96613336, -0.96613336, ...,  0.32786515,
           0.72858214,  0.4237896 ]],

        ...,

        [[ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096],
         [ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096],
         [ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096],
         ...,
         [ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096],
         [ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096],
         [ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096]],

        [[ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096],
         [ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096],
         [ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096],
         ...,
         [ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096],
         [ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096],
         [ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096]],

        [[ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096],
         [ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096],
         [ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096],
         ...,
         [ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096],
         [ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096],
         [ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096]]]], dtype=float32), 'output_shape': (1, 256, 28, 28), 'from': [10], 'to': [11]}
torch node:
{'name': 'sin', 'output': array([[[[-0.7391401 , -0.10589759, -0.10589759, ...,  0.53912365,
           0.66332966, -0.15610181],
         [-0.10589759, -0.8318584 , -0.8318584 , ...,  0.88275623,
           0.13417792, -0.7791048 ],
         [-0.10589759, -0.8318584 , -0.8318584 , ...,  0.88275623,
           0.13417792, -0.7791048 ],
         ...,
         [-0.96613336, -0.8939561 , -0.8939561 , ..., -0.37799996,
           0.24134657,  0.11797567],
         [-0.96613336, -0.8939561 , -0.8939561 , ..., -0.37799996,
           0.24134657,  0.11797567],
         [-0.21939585, -0.96613336, -0.96613336, ...,  0.32786515,
           0.72858214,  0.4237896 ]],

        [[-0.7391401 , -0.10589759, -0.10589759, ...,  0.53912365,
           0.66332966, -0.15610181],
         [-0.10589759, -0.8318584 , -0.8318584 , ...,  0.88275623,
           0.13417792, -0.7791048 ],
         [-0.10589759, -0.8318584 , -0.8318584 , ...,  0.88275623,
           0.13417792, -0.7791048 ],
         ...,
         [-0.96613336, -0.8939561 , -0.8939561 , ..., -0.37799996,
           0.24134657,  0.11797567],
         [-0.96613336, -0.8939561 , -0.8939561 , ..., -0.37799996,
           0.24134657,  0.11797567],
         [-0.21939585, -0.96613336, -0.96613336, ...,  0.32786515,
           0.72858214,  0.4237896 ]],

        [[-0.7391401 , -0.10589759, -0.10589759, ...,  0.53912365,
           0.66332966, -0.15610181],
         [-0.10589759, -0.8318584 , -0.8318584 , ...,  0.88275623,
           0.13417792, -0.7791048 ],
         [-0.10589759, -0.8318584 , -0.8318584 , ...,  0.88275623,
           0.13417792, -0.7791048 ],
         ...,
         [-0.96613336, -0.8939561 , -0.8939561 , ..., -0.37799996,
           0.24134657,  0.11797567],
         [-0.96613336, -0.8939561 , -0.8939561 , ..., -0.37799996,
           0.24134657,  0.11797567],
         [-0.21939585, -0.96613336, -0.96613336, ...,  0.32786515,
           0.72858214,  0.4237896 ]],

        ...,

        [[ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096],
         [ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096],
         [ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096],
         ...,
         [ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096],
         [ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096],
         [ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096]],

        [[ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096],
         [ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096],
         [ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096],
         ...,
         [ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096],
         [ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096],
         [ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096]],

        [[ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096],
         [ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096],
         [ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096],
         ...,
         [ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096],
         [ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096],
         [ 0.84147096,  0.84147096,  0.84147096, ...,  0.84147096,
           0.84147096,  0.84147096]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 28, 28]), 'from': [10], 'to': [11]}

generate models:92

analyse output arrays in iter:104

pre layer res:
13:flatten
{'name': 'flatten', 'output': array([[   0.   ,    0.   , 5812.759, ..., 5812.759,    0.   ,    0.   ]],
      dtype=float32), 'output_shape': TensorShape([1, 7168]), 'from': [12], 'to': [18]}
tf node:
{'name': 'sin', 'output': array([[0.       , 0.       , 0.7259261, ..., 0.7259261, 0.       ,
        0.       ]], dtype=float32), 'output_shape': TensorShape([1, 7168]), 'from': [13], 'to': [14]}
ms node:
{'name': 'sin', 'output': array([[0.       , 0.       , 0.8535853, ..., 0.8535853, 0.       ,
        0.       ]], dtype=float32), 'output_shape': (1, 7168), 'from': [13], 'to': [14]}
torch node:
{'name': 'sin', 'output': array([[0.       , 0.       , 0.7345988, ..., 0.7345988, 0.       ,
        0.       ]], dtype=float32), 'output_shape': torch.Size([1, 7168]), 'from': [13], 'to': [14]}

generate models:95

analyse output arrays in iter:121

pre layer res:
13:exp
{'name': 'exp', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [17], 'to': [19]}
tf node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [13], 'to': [18]}
ms node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 256, 28, 28), 'from': [13], 'to': [18]}
torch node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 28, 28]), 'from': [13], 'to': [18]}

generate models:110

analyse output arrays in iter:134

pre layer res:
19:reshape
{'name': 'reshape', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [18], 'to': [25]}
tf node:
{'name': 'cos', 'output': array([[[[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        ...,

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [19], 'to': [16]}
ms node:
{'name': 'cos', 'output': array([[[[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        ...,

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [19], 'to': [16]}
torch node:
{'name': 'cos', 'output': array([[[[0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         ...,
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234]],

        [[0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         ...,
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234]],

        [[0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         ...,
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234]],

        ...,

        [[0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         ...,
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234]],

        [[0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         ...,
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234]],

        [[0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         ...,
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [19], 'to': [16]}

generate models:122

analyse output arrays in iter:135

pre layer res:
17:log
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [5], 'to': [6]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [17], 'to': [7]}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [17], 'to': [7]}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [17], 'to': [7]}

generate models:123

analyse output arrays in iter:141

pre layer res:
19:exp
{'name': 'exp', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [6], 'to': [9]}
tf node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [19], 'to': [13]}
ms node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [19], 'to': [13]}
torch node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [19], 'to': [13]}

generate models:128

analyse output arrays in iter:144

pre layer res:
9:log
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [14], 'to': [6]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [9], 'to': [7]}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [9], 'to': [7]}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [9], 'to': [7]}

generate models:131

analyse output arrays in iter:159

pre layer res:
10:add
{'name': 'add', 'output': array([[[[7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793],
         [7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793],
         [7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793],
         ...,
         [7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793],
         [7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793],
         [7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793]],

        [[7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793],
         [7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793],
         [7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793],
         ...,
         [7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793],
         [7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793],
         [7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793]],

        [[7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793],
         [7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793],
         [7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793],
         ...,
         [7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793],
         [7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793],
         [7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793]],

        ...,

        [[7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793],
         [7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793],
         [7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793],
         ...,
         [7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793],
         [7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793],
         [7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793]],

        [[7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793],
         [7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793],
         [7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793],
         ...,
         [7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793],
         [7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793],
         [7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793]],

        [[7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793],
         [7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793],
         [7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793],
         ...,
         [7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793],
         [7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793],
         [7435.7793, 7435.7793, 7435.7793, ..., 7435.7793, 7435.7793,
          7435.7793]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [8, 8], 'to': [16]}
tf node:
{'name': 'sin', 'output': array([[[[0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         ...,
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476]],

        [[0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         ...,
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476]],

        [[0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         ...,
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476]],

        ...,

        [[0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         ...,
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476]],

        [[0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         ...,
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476]],

        [[0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         ...,
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [10], 'to': [13]}
ms node:
{'name': 'sin', 'output': array([[[[0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987],
         [0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987],
         [0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987],
         ...,
         [0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987],
         [0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987],
         [0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987]],

        [[0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987],
         [0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987],
         [0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987],
         ...,
         [0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987],
         [0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987],
         [0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987]],

        [[0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987],
         [0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987],
         [0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987],
         ...,
         [0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987],
         [0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987],
         [0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987]],

        ...,

        [[0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987],
         [0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987],
         [0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987],
         ...,
         [0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987],
         [0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987],
         [0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987]],

        [[0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987],
         [0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987],
         [0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987],
         ...,
         [0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987],
         [0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987],
         [0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987]],

        [[0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987],
         [0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987],
         [0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987],
         ...,
         [0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987],
         [0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987],
         [0.36254987, 0.36254987, 0.36254987, ..., 0.36254987,
          0.36254987, 0.36254987]]]], dtype=float32), 'output_shape': (1, 256, 28, 28), 'from': [10], 'to': [13]}
torch node:
{'name': 'sin', 'output': array([[[[0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         ...,
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476]],

        [[0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         ...,
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476]],

        [[0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         ...,
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476]],

        ...,

        [[0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         ...,
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476]],

        [[0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         ...,
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476]],

        [[0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         ...,
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476],
         [0.36209476, 0.36209476, 0.36209476, ..., 0.36209476,
          0.36209476, 0.36209476]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 28, 28]), 'from': [10], 'to': [13]}

generate models:145

analyse output arrays in iter:168

pre layer res:
6:conv2d
{'name': 'conv2d', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [13], 'to': [9]}
tf node:
{'name': 'cos', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [6], 'to': [14]}
ms node:
{'name': 'cos', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [6], 'to': [14]}
torch node:
{'name': 'cos', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [6], 'to': [14]}

pre layer res:
10:add
{'name': 'add', 'output': array([[[[128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         ...,
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.]],

        [[128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         ...,
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.]],

        [[128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         ...,
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.]],

        ...,

        [[128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         ...,
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.]],

        [[128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         ...,
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.]],

        [[128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         ...,
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.],
         [128., 128., 128., ..., 128., 128., 128.]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [8, 8], 'to': [16]}
tf node:
{'name': 'sin', 'output': array([[[[0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775],
         [0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775],
         [0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775],
         ...,
         [0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775],
         [0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775],
         [0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775]],

        [[0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775],
         [0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775],
         [0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775],
         ...,
         [0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775],
         [0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775],
         [0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775]],

        [[0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775],
         [0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775],
         [0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775],
         ...,
         [0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775],
         [0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775],
         [0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775]],

        ...,

        [[0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775],
         [0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775],
         [0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775],
         ...,
         [0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775],
         [0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775],
         [0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775]],

        [[0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775],
         [0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775],
         [0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775],
         ...,
         [0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775],
         [0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775],
         [0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775]],

        [[0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775],
         [0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775],
         [0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775],
         ...,
         [0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775],
         [0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775],
         [0.72103775, 0.72103775, 0.72103775, ..., 0.72103775,
          0.72103775, 0.72103775]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [10], 'to': [11]}
ms node:
{'name': 'sin', 'output': array([[[[0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         ...,
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377]],

        [[0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         ...,
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377]],

        [[0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         ...,
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377]],

        ...,

        [[0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         ...,
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377]],

        [[0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         ...,
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377]],

        [[0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         ...,
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377]]]], dtype=float32), 'output_shape': (1, 256, 28, 28), 'from': [10], 'to': [11]}
torch node:
{'name': 'sin', 'output': array([[[[0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         ...,
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377]],

        [[0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         ...,
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377]],

        [[0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         ...,
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377]],

        ...,

        [[0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         ...,
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377]],

        [[0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         ...,
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377]],

        [[0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         ...,
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377],
         [0.7210377, 0.7210377, 0.7210377, ..., 0.7210377, 0.7210377,
          0.7210377]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 28, 28]), 'from': [10], 'to': [11]}

generate models:154

analyse output arrays in iter:171

pre layer res:
15:add
{'name': 'add', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [7, 18], 'to': [13]}
tf node:
{'name': 'sin', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [15], 'to': [9]}
ms node:
{'name': 'sin', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [15], 'to': [9]}
torch node:
{'name': 'sin', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [15], 'to': [9]}

generate models:157

analyse output arrays in iter:183

pre layer res:
14:conv2d
{'name': 'conv2d', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [21], 'to': [20]}
tf node:
{'name': 'sin', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [14], 'to': [15]}
ms node:
{'name': 'sin', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [14], 'to': [15]}
torch node:
{'name': 'sin', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [14], 'to': [15]}

generate models:169

analyse output arrays in iter:194

pre layer res:
10:add
{'name': 'add', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [9, 9], 'to': [12]}
tf node:
{'name': 'sin', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [10], 'to': [4]}
ms node:
{'name': 'sin', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': (1, 256, 28, 28), 'from': [10], 'to': [4]}
torch node:
{'name': 'sin', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 28, 28]), 'from': [10], 'to': [4]}

generate models:180

analyse output arrays in iter:197

pre layer res:
16:reshape
{'name': 'reshape', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 1., 0., 0.],
         [0., 0., 0., ..., 1., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 1., 0., 0.],
         [0., 0., 0., ..., 1., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 1., 0., 0.],
         [0., 0., 0., ..., 1., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 112, 112]), 'from': [15], 'to': [13]}
tf node:
{'name': 'conv2d', 'output': array([[[[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           3.9999993e+00, -1.5184091e-07,  3.7565064e-07],
         [-2.3841858e-07,  1.1920929e-07,  0.0000000e+00, ...,
           3.9999995e+00,  1.3985225e-08,  3.0709748e-07],
         ...,
         [ 0.0000000e+00,  3.5762787e-07,  1.1920929e-07, ...,
           1.4901161e-07,  8.9325898e-09, -1.7266316e-07],
         [-1.7881393e-07,  0.0000000e+00,  2.8344267e-08, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [-2.3841858e-07,  2.3841858e-07, -1.0471924e-07, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           3.9999993e+00, -1.5184091e-07,  3.7565064e-07],
         [-2.3841858e-07,  1.1920929e-07,  0.0000000e+00, ...,
           3.9999995e+00,  1.3985225e-08,  3.0709748e-07],
         ...,
         [ 0.0000000e+00,  3.5762787e-07,  1.1920929e-07, ...,
           1.4901161e-07,  8.9325898e-09, -1.7266316e-07],
         [-1.7881393e-07,  0.0000000e+00,  2.8344267e-08, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [-2.3841858e-07,  2.3841858e-07, -1.0471924e-07, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           3.9999993e+00, -1.5184091e-07,  3.7565064e-07],
         [-2.3841858e-07,  1.1920929e-07,  0.0000000e+00, ...,
           3.9999995e+00,  1.3985225e-08,  3.0709748e-07],
         ...,
         [ 0.0000000e+00,  3.5762787e-07,  1.1920929e-07, ...,
           1.4901161e-07,  8.9325898e-09, -1.7266316e-07],
         [-1.7881393e-07,  0.0000000e+00,  2.8344267e-08, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [-2.3841858e-07,  2.3841858e-07, -1.0471924e-07, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        ...,

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           3.9999993e+00, -1.5184091e-07,  3.7565064e-07],
         [-2.3841858e-07,  1.1920929e-07,  0.0000000e+00, ...,
           3.9999995e+00,  1.3985225e-08,  3.0709748e-07],
         ...,
         [ 0.0000000e+00,  3.5762787e-07,  1.1920929e-07, ...,
           1.4901161e-07,  8.9325898e-09, -1.7266316e-07],
         [-1.7881393e-07,  0.0000000e+00,  2.8344267e-08, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [-2.3841858e-07,  2.3841858e-07, -1.0471924e-07, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           3.9999993e+00, -1.5184091e-07,  3.7565064e-07],
         [-2.3841858e-07,  1.1920929e-07,  0.0000000e+00, ...,
           3.9999995e+00,  1.3985225e-08,  3.0709748e-07],
         ...,
         [ 0.0000000e+00,  3.5762787e-07,  1.1920929e-07, ...,
           1.4901161e-07,  8.9325898e-09, -1.7266316e-07],
         [-1.7881393e-07,  0.0000000e+00,  2.8344267e-08, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [-2.3841858e-07,  2.3841858e-07, -1.0471924e-07, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           3.9999993e+00, -1.5184091e-07,  3.7565064e-07],
         [-2.3841858e-07,  1.1920929e-07,  0.0000000e+00, ...,
           3.9999995e+00,  1.3985225e-08,  3.0709748e-07],
         ...,
         [ 0.0000000e+00,  3.5762787e-07,  1.1920929e-07, ...,
           1.4901161e-07,  8.9325898e-09, -1.7266316e-07],
         [-1.7881393e-07,  0.0000000e+00,  2.8344267e-08, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [-2.3841858e-07,  2.3841858e-07, -1.0471924e-07, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 112, 112]), 'from': [16], 'to': [21]}
ms node:
{'name': 'conv2d', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 4., 0., 0.],
         [0., 0., 0., ..., 4., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 4., 0., 0.],
         [0., 0., 0., ..., 4., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 4., 0., 0.],
         [0., 0., 0., ..., 4., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 4., 0., 0.],
         [0., 0., 0., ..., 4., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 4., 0., 0.],
         [0., 0., 0., ..., 4., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 4., 0., 0.],
         [0., 0., 0., ..., 4., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': (1, 64, 112, 112), 'from': [16], 'to': [21]}
torch node:
{'name': 'conv2d', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 4., 0., 0.],
         [0., 0., 0., ..., 4., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 4., 0., 0.],
         [0., 0., 0., ..., 4., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 4., 0., 0.],
         [0., 0., 0., ..., 4., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 4., 0., 0.],
         [0., 0., 0., ..., 4., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 4., 0., 0.],
         [0., 0., 0., ..., 4., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 4., 0., 0.],
         [0., 0., 0., ..., 4., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 112, 112]), 'from': [16], 'to': [21]}

generate models:183

analyse output arrays in iter:214

pre layer res:
24:empty_merge_operator
{'name': 'empty_merge_operator', 'output': array([[[[384., 384., 384., ..., 384., 384., 384.],
         [384., 384., 384., ..., 384., 384., 384.],
         [384., 384., 384., ..., 384., 384., 384.],
         ...,
         [384., 384., 384., ..., 384., 384., 384.],
         [384., 384., 384., ..., 384., 384., 384.],
         [384., 384., 384., ..., 384., 384., 384.]],

        [[384., 384., 384., ..., 384., 384., 384.],
         [384., 384., 384., ..., 384., 384., 384.],
         [384., 384., 384., ..., 384., 384., 384.],
         ...,
         [384., 384., 384., ..., 384., 384., 384.],
         [384., 384., 384., ..., 384., 384., 384.],
         [384., 384., 384., ..., 384., 384., 384.]],

        [[384., 384., 384., ..., 384., 384., 384.],
         [384., 384., 384., ..., 384., 384., 384.],
         [384., 384., 384., ..., 384., 384., 384.],
         ...,
         [384., 384., 384., ..., 384., 384., 384.],
         [384., 384., 384., ..., 384., 384., 384.],
         [384., 384., 384., ..., 384., 384., 384.]],

        ...,

        [[384., 384., 384., ..., 384., 384., 384.],
         [384., 384., 384., ..., 384., 384., 384.],
         [384., 384., 384., ..., 384., 384., 384.],
         ...,
         [384., 384., 384., ..., 384., 384., 384.],
         [384., 384., 384., ..., 384., 384., 384.],
         [384., 384., 384., ..., 384., 384., 384.]],

        [[384., 384., 384., ..., 384., 384., 384.],
         [384., 384., 384., ..., 384., 384., 384.],
         [384., 384., 384., ..., 384., 384., 384.],
         ...,
         [384., 384., 384., ..., 384., 384., 384.],
         [384., 384., 384., ..., 384., 384., 384.],
         [384., 384., 384., ..., 384., 384., 384.]],

        [[384., 384., 384., ..., 384., 384., 384.],
         [384., 384., 384., ..., 384., 384., 384.],
         [384., 384., 384., ..., 384., 384., 384.],
         ...,
         [384., 384., 384., ..., 384., 384., 384.],
         [384., 384., 384., ..., 384., 384., 384.],
         [384., 384., 384., ..., 384., 384., 384.]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [18, 18], 'to': [8]}
tf node:
{'name': 'sin', 'output': array([[[[0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565],
         [0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565],
         [0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565],
         ...,
         [0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565],
         [0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565],
         [0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565]],

        [[0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565],
         [0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565],
         [0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565],
         ...,
         [0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565],
         [0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565],
         [0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565]],

        [[0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565],
         [0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565],
         [0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565],
         ...,
         [0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565],
         [0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565],
         [0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565]],

        ...,

        [[0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565],
         [0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565],
         [0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565],
         ...,
         [0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565],
         [0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565],
         [0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565]],

        [[0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565],
         [0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565],
         [0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565],
         ...,
         [0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565],
         [0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565],
         [0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565]],

        [[0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565],
         [0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565],
         [0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565],
         ...,
         [0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565],
         [0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565],
         [0.6636565, 0.6636565, 0.6636565, ..., 0.6636565, 0.6636565,
          0.6636565]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [24], 'to': [25]}
ms node:
{'name': 'sin', 'output': array([[[[0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         ...,
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564]],

        [[0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         ...,
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564]],

        [[0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         ...,
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564]],

        ...,

        [[0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         ...,
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564]],

        [[0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         ...,
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564]],

        [[0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         ...,
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564]]]], dtype=float32), 'output_shape': (1, 256, 28, 28), 'from': [24], 'to': [25]}
torch node:
{'name': 'sin', 'output': array([[[[0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         ...,
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564]],

        [[0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         ...,
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564]],

        [[0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         ...,
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564]],

        ...,

        [[0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         ...,
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564]],

        [[0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         ...,
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564]],

        [[0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         ...,
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564],
         [0.6636564, 0.6636564, 0.6636564, ..., 0.6636564, 0.6636564,
          0.6636564]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 28, 28]), 'from': [24], 'to': [25]}

generate models:200

analyse output arrays in iter:218

pre layer res:
18:relu
{'name': 'relu', 'output': array([[[[1.      , 1.      , 0.930353, ..., 1.      , 1.      ,
          1.      ],
         [1.      , 1.      , 0.930353, ..., 1.      , 1.      ,
          1.      ],
         [1.      , 1.      , 0.930353, ..., 1.      , 1.      ,
          1.      ],
         ...,
         [1.      , 1.      , 0.930353, ..., 1.      , 1.      ,
          1.      ],
         [1.      , 1.      , 0.930353, ..., 1.      , 1.      ,
          1.      ],
         [1.      , 1.      , 0.930353, ..., 1.      , 1.      ,
          1.      ]],

        [[1.      , 1.      , 0.930353, ..., 1.      , 1.      ,
          1.      ],
         [1.      , 1.      , 0.930353, ..., 1.      , 1.      ,
          1.      ],
         [1.      , 1.      , 0.930353, ..., 1.      , 1.      ,
          1.      ],
         ...,
         [1.      , 1.      , 0.930353, ..., 1.      , 1.      ,
          1.      ],
         [1.      , 1.      , 0.930353, ..., 1.      , 1.      ,
          1.      ],
         [1.      , 1.      , 0.930353, ..., 1.      , 1.      ,
          1.      ]],

        [[1.      , 1.      , 0.930353, ..., 1.      , 1.      ,
          1.      ],
         [1.      , 1.      , 0.930353, ..., 1.      , 1.      ,
          1.      ],
         [1.      , 1.      , 0.930353, ..., 1.      , 1.      ,
          1.      ],
         ...,
         [1.      , 1.      , 0.930353, ..., 1.      , 1.      ,
          1.      ],
         [1.      , 1.      , 0.930353, ..., 1.      , 1.      ,
          1.      ],
         [1.      , 1.      , 0.930353, ..., 1.      , 1.      ,
          1.      ]],

        ...,

        [[1.      , 1.      , 1.      , ..., 1.      , 1.      ,
          1.      ],
         [1.      , 1.      , 1.      , ..., 1.      , 1.      ,
          1.      ],
         [1.      , 1.      , 1.      , ..., 1.      , 1.      ,
          1.      ],
         ...,
         [1.      , 1.      , 1.      , ..., 1.      , 1.      ,
          1.      ],
         [1.      , 1.      , 1.      , ..., 1.      , 1.      ,
          1.      ],
         [1.      , 1.      , 1.      , ..., 1.      , 1.      ,
          1.      ]],

        [[1.      , 1.      , 1.      , ..., 1.      , 1.      ,
          1.      ],
         [1.      , 1.      , 1.      , ..., 1.      , 1.      ,
          1.      ],
         [1.      , 1.      , 1.      , ..., 1.      , 1.      ,
          1.      ],
         ...,
         [1.      , 1.      , 1.      , ..., 1.      , 1.      ,
          1.      ],
         [1.      , 1.      , 1.      , ..., 1.      , 1.      ,
          1.      ],
         [1.      , 1.      , 1.      , ..., 1.      , 1.      ,
          1.      ]],

        [[1.      , 1.      , 1.      , ..., 1.      , 1.      ,
          1.      ],
         [1.      , 1.      , 1.      , ..., 1.      , 1.      ,
          1.      ],
         [1.      , 1.      , 1.      , ..., 1.      , 1.      ,
          1.      ],
         ...,
         [1.      , 1.      , 1.      , ..., 1.      , 1.      ,
          1.      ],
         [1.      , 1.      , 1.      , ..., 1.      , 1.      ,
          1.      ],
         [1.      , 1.      , 1.      , ..., 1.      , 1.      ,
          1.      ]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [4], 'to': [24, 12]}
13:transpose
{'name': 'transpose', 'output': array([[[[2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ],
         [2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ],
         [1.860706, 1.860706, 1.860706, ..., 1.860706, 1.860706,
          1.860706],
         ...,
         [2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ],
         [2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ],
         [2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ]],

        [[2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ],
         [2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ],
         [1.860706, 1.860706, 1.860706, ..., 1.860706, 1.860706,
          1.860706],
         ...,
         [2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ],
         [2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ],
         [2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ]],

        [[2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ],
         [2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ],
         [1.860706, 1.860706, 1.860706, ..., 1.860706, 1.860706,
          1.860706],
         ...,
         [2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ],
         [2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ],
         [2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ]],

        ...,

        [[2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ],
         [2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ],
         [2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ],
         ...,
         [2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ],
         [2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ],
         [2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ]],

        [[2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ],
         [2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ],
         [2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ],
         ...,
         [2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ],
         [2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ],
         [2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ]],

        [[2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ],
         [2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ],
         [2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ],
         ...,
         [2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ],
         [2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ],
         [2.      , 2.      , 2.      , ..., 2.      , 2.      ,
          2.      ]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [12], 'to': [24]}
tf node:
{'name': 'add', 'output': array([[[[3.       , 3.       , 2.930353 , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 2.930353 , ..., 3.       , 3.       ,
          3.       ],
         [2.8607059, 2.8607059, 2.791059 , ..., 2.8607059, 2.8607059,
          2.8607059],
         ...,
         [3.       , 3.       , 2.930353 , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 2.930353 , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 2.930353 , ..., 3.       , 3.       ,
          3.       ]],

        [[3.       , 3.       , 2.930353 , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 2.930353 , ..., 3.       , 3.       ,
          3.       ],
         [2.8607059, 2.8607059, 2.791059 , ..., 2.8607059, 2.8607059,
          2.8607059],
         ...,
         [3.       , 3.       , 2.930353 , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 2.930353 , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 2.930353 , ..., 3.       , 3.       ,
          3.       ]],

        [[3.       , 3.       , 2.930353 , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 2.930353 , ..., 3.       , 3.       ,
          3.       ],
         [2.8607059, 2.8607059, 2.791059 , ..., 2.8607059, 2.8607059,
          2.8607059],
         ...,
         [3.       , 3.       , 2.930353 , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 2.930353 , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 2.930353 , ..., 3.       , 3.       ,
          3.       ]],

        ...,

        [[3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         ...,
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ]],

        [[3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         ...,
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ]],

        [[3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         ...,
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [18, 13], 'to': [25]}
ms node:
{'name': 'add', 'output': array([[[[3.       , 3.       , 2.9303503, ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 2.9303503, ..., 3.       , 3.       ,
          3.       ],
         [2.8607004, 2.8607004, 2.7910504, ..., 2.8607004, 2.8607004,
          2.8607004],
         ...,
         [3.       , 3.       , 2.9303503, ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 2.9303503, ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 2.9303503, ..., 3.       , 3.       ,
          3.       ]],

        [[3.       , 3.       , 2.9303503, ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 2.9303503, ..., 3.       , 3.       ,
          3.       ],
         [2.8607004, 2.8607004, 2.7910504, ..., 2.8607004, 2.8607004,
          2.8607004],
         ...,
         [3.       , 3.       , 2.9303503, ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 2.9303503, ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 2.9303503, ..., 3.       , 3.       ,
          3.       ]],

        [[3.       , 3.       , 2.9303503, ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 2.9303503, ..., 3.       , 3.       ,
          3.       ],
         [2.8607004, 2.8607004, 2.7910504, ..., 2.8607004, 2.8607004,
          2.8607004],
         ...,
         [3.       , 3.       , 2.9303503, ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 2.9303503, ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 2.9303503, ..., 3.       , 3.       ,
          3.       ]],

        ...,

        [[3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         ...,
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ]],

        [[3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         ...,
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ]],

        [[3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         ...,
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ]]]], dtype=float32), 'output_shape': (1, 256, 28, 28), 'from': [18, 13], 'to': [25]}
torch node:
{'name': 'add', 'output': array([[[[3.       , 3.       , 2.9303558, ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 2.9303558, ..., 3.       , 3.       ,
          3.       ],
         [2.8607116, 2.8607116, 2.7910674, ..., 2.8607116, 2.8607116,
          2.8607116],
         ...,
         [3.       , 3.       , 2.9303558, ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 2.9303558, ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 2.9303558, ..., 3.       , 3.       ,
          3.       ]],

        [[3.       , 3.       , 2.9303558, ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 2.9303558, ..., 3.       , 3.       ,
          3.       ],
         [2.8607116, 2.8607116, 2.7910674, ..., 2.8607116, 2.8607116,
          2.8607116],
         ...,
         [3.       , 3.       , 2.9303558, ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 2.9303558, ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 2.9303558, ..., 3.       , 3.       ,
          3.       ]],

        [[3.       , 3.       , 2.9303558, ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 2.9303558, ..., 3.       , 3.       ,
          3.       ],
         [2.8607116, 2.8607116, 2.7910674, ..., 2.8607116, 2.8607116,
          2.8607116],
         ...,
         [3.       , 3.       , 2.9303558, ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 2.9303558, ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 2.9303558, ..., 3.       , 3.       ,
          3.       ]],

        ...,

        [[3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         ...,
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ]],

        [[3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         ...,
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ]],

        [[3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         ...,
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ],
         [3.       , 3.       , 3.       , ..., 3.       , 3.       ,
          3.       ]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 28, 28]), 'from': [18, 13], 'to': [25]}

generate models:203

analyse output arrays in iter:234

pre layer res:
20:transpose
{'name': 'transpose', 'output': array([[[[57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18],
         [57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18],
         [57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18],
         ...,
         [57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18],
         [57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18],
         [57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18]],

        [[57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18],
         [57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18],
         [57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18],
         ...,
         [57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18],
         [57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18],
         [57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18]],

        [[57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18],
         [57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18],
         [57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18],
         ...,
         [57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18],
         [57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18],
         [57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18]],

        ...,

        [[57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18],
         [57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18],
         [57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18],
         ...,
         [57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18],
         [57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18],
         [57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18]],

        [[57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18],
         [57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18],
         [57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18],
         ...,
         [57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18],
         [57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18],
         [57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18]],

        [[57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18],
         [57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18],
         [57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18],
         ...,
         [57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18],
         [57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18],
         [57930.2 , 57930.2 , 57930.2 , ..., 52137.18, 52137.18,
          52137.18]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [13], 'to': [5]}
tf node:
{'name': 'sin', 'output': array([[[[-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184],
         ...,
         [-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184]],

        [[-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184],
         ...,
         [-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184]],

        [[-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184],
         ...,
         [-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184]],

        ...,

        [[-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184],
         ...,
         [-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184]],

        [[-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184],
         ...,
         [-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184]],

        [[-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184],
         ...,
         [-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.69564223, -0.69564223, -0.69564223, ..., -0.63807184,
          -0.63807184, -0.63807184]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [20], 'to': [14]}
ms node:
{'name': 'sin', 'output': array([[[[-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         ...,
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184]],

        [[-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         ...,
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184]],

        [[-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         ...,
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184]],

        ...,

        [[-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         ...,
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184]],

        [[-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         ...,
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184]],

        [[-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         ...,
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [20], 'to': [14]}
torch node:
{'name': 'sin', 'output': array([[[[-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         ...,
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184]],

        [[-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         ...,
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184]],

        [[-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         ...,
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184]],

        ...,

        [[-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         ...,
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184]],

        [[-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         ...,
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184]],

        [[-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         ...,
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184],
         [-0.6956422 , -0.6956422 , -0.6956422 , ..., -0.63807184,
          -0.63807184, -0.63807184]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [20], 'to': [14]}

generate models:218

analyse output arrays in iter:238

pre layer res:
12:conv2d
{'name': 'conv2d', 'output': array([[[[38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918],
         [38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918],
         [38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918],
         ...,
         [38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918],
         [38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918],
         [38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918]],

        [[38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918],
         [38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918],
         [38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918],
         ...,
         [38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918],
         [38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918],
         [38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918]],

        [[38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918],
         [38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918],
         [38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918],
         ...,
         [38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918],
         [38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918],
         [38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918]],

        ...,

        [[38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918],
         [38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918],
         [38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918],
         ...,
         [38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918],
         [38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918],
         [38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918]],

        [[38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918],
         [38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918],
         [38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918],
         ...,
         [38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918],
         [38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918],
         [38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918]],

        [[38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918],
         [38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918],
         [38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918],
         ...,
         [38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918],
         [38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918],
         [38603.918, 38603.918, 38603.918, ..., 38603.918, 38603.918,
          38603.918]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [11], 'to': [16]}
tf node:
{'name': 'cos', 'output': array([[[[0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         ...,
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354]],

        [[0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         ...,
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354]],

        [[0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         ...,
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354]],

        ...,

        [[0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         ...,
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354]],

        [[0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         ...,
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354]],

        [[0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         ...,
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [12], 'to': [13]}
ms node:
{'name': 'cos', 'output': array([[[[0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         ...,
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354]],

        [[0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         ...,
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354]],

        [[0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         ...,
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354]],

        ...,

        [[0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         ...,
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354],
         [0.99962354, 0.99962354, 0.99962354, ..., 0.99962354,
          0.99962354, 0.99962354]],

        [[0.9987159 , 0.9987159 , 0.9987159 , ..., 0.9987159 ,
          0.9987159 , 0.9987159 ],
         [0.9987159 , 0.9987159 , 0.9987159 , ..., 0.9987159 ,
          0.9987159 , 0.9987159 ],
         [0.9987159 , 0.9987159 , 0.9987159 , ..., 0.9987159 ,
          0.9987159 , 0.9987159 ],
         ...,
         [0.9987159 , 0.9987159 , 0.9987159 , ..., 0.9987159 ,
          0.9987159 , 0.9987159 ],
         [0.9987159 , 0.9987159 , 0.9987159 , ..., 0.9987159 ,
          0.9987159 , 0.9987159 ],
         [0.9987159 , 0.9987159 , 0.9987159 , ..., 0.9987159 ,
          0.9987159 , 0.9987159 ]],

        [[0.9987159 , 0.9987159 , 0.9987159 , ..., 0.9987159 ,
          0.9987159 , 0.9987159 ],
         [0.9987159 , 0.9987159 , 0.9987159 , ..., 0.9987159 ,
          0.9987159 , 0.9987159 ],
         [0.9987159 , 0.9987159 , 0.9987159 , ..., 0.9987159 ,
          0.9987159 , 0.9987159 ],
         ...,
         [0.9987159 , 0.9987159 , 0.9987159 , ..., 0.9987159 ,
          0.9987159 , 0.9987159 ],
         [0.9987159 , 0.9987159 , 0.9987159 , ..., 0.9987159 ,
          0.9987159 , 0.9987159 ],
         [0.9987159 , 0.9987159 , 0.9987159 , ..., 0.9987159 ,
          0.9987159 , 0.9987159 ]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [12], 'to': [13]}
torch node:
{'name': 'cos', 'output': array([[[[0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159],
         [0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159],
         [0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159],
         ...,
         [0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159],
         [0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159],
         [0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159]],

        [[0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159],
         [0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159],
         [0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159],
         ...,
         [0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159],
         [0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159],
         [0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159]],

        [[0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159],
         [0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159],
         [0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159],
         ...,
         [0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159],
         [0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159],
         [0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159]],

        ...,

        [[0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159],
         [0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159],
         [0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159],
         ...,
         [0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159],
         [0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159],
         [0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159]],

        [[0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159],
         [0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159],
         [0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159],
         ...,
         [0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159],
         [0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159],
         [0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159]],

        [[0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159],
         [0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159],
         [0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159],
         ...,
         [0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159],
         [0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159],
         [0.9987159, 0.9987159, 0.9987159, ..., 0.9987159, 0.9987159,
          0.9987159]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [12], 'to': [13]}

generate models:222

analyse output arrays in iter:274

pre layer res:
10:add
{'name': 'add', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [8, 12], 'to': [21]}
tf node:
{'name': 'sin', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [10], 'to': [17]}
ms node:
{'name': 'sin', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': (1, 256, 28, 28), 'from': [10], 'to': [17]}
torch node:
{'name': 'sin', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 28, 28]), 'from': [10], 'to': [17]}

generate models:256

analyse output arrays in iter:289

pre layer res:
9:conv2d
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [19], 'to': [10, 5]}
tf node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [9], 'to': [10]}
ms node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 256, 28, 28), 'from': [9], 'to': [10]}
torch node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 28, 28]), 'from': [9], 'to': [10]}

generate models:270

analyse output arrays in iter:295

pre layer res:
14:conv2d
{'name': 'conv2d', 'output': array([[[[4754318., 4754318., 4754318., ..., 4754318., 4754318.,
          4754318.],
         [4754318., 4754318., 4754318., ..., 4754318., 4754318.,
          4754318.],
         [4754318., 4754318., 4754318., ..., 4754318., 4754318.,
          4754318.],
         ...,
         [4278884., 4278884., 4278884., ..., 4278884., 4278884.,
          4278884.],
         [4278884., 4278884., 4278884., ..., 4278884., 4278884.,
          4278884.],
         [4278884., 4278884., 4278884., ..., 4278884., 4278884.,
          4278884.]],

        [[4754318., 4754318., 4754318., ..., 4754318., 4754318.,
          4754318.],
         [4754318., 4754318., 4754318., ..., 4754318., 4754318.,
          4754318.],
         [4754318., 4754318., 4754318., ..., 4754318., 4754318.,
          4754318.],
         ...,
         [4278884., 4278884., 4278884., ..., 4278884., 4278884.,
          4278884.],
         [4278884., 4278884., 4278884., ..., 4278884., 4278884.,
          4278884.],
         [4278884., 4278884., 4278884., ..., 4278884., 4278884.,
          4278884.]],

        [[4754318., 4754318., 4754318., ..., 4754318., 4754318.,
          4754318.],
         [4754318., 4754318., 4754318., ..., 4754318., 4754318.,
          4754318.],
         [4754318., 4754318., 4754318., ..., 4754318., 4754318.,
          4754318.],
         ...,
         [4278884., 4278884., 4278884., ..., 4278884., 4278884.,
          4278884.],
         [4278884., 4278884., 4278884., ..., 4278884., 4278884.,
          4278884.],
         [4278884., 4278884., 4278884., ..., 4278884., 4278884.,
          4278884.]],

        ...,

        [[4754318., 4754318., 4754318., ..., 4754318., 4754318.,
          4754318.],
         [4754318., 4754318., 4754318., ..., 4754318., 4754318.,
          4754318.],
         [4754318., 4754318., 4754318., ..., 4754318., 4754318.,
          4754318.],
         ...,
         [4278884., 4278884., 4278884., ..., 4278884., 4278884.,
          4278884.],
         [4278884., 4278884., 4278884., ..., 4278884., 4278884.,
          4278884.],
         [4278884., 4278884., 4278884., ..., 4278884., 4278884.,
          4278884.]],

        [[4754318., 4754318., 4754318., ..., 4754318., 4754318.,
          4754318.],
         [4754318., 4754318., 4754318., ..., 4754318., 4754318.,
          4754318.],
         [4754318., 4754318., 4754318., ..., 4754318., 4754318.,
          4754318.],
         ...,
         [4278884., 4278884., 4278884., ..., 4278884., 4278884.,
          4278884.],
         [4278884., 4278884., 4278884., ..., 4278884., 4278884.,
          4278884.],
         [4278884., 4278884., 4278884., ..., 4278884., 4278884.,
          4278884.]],

        [[4754318., 4754318., 4754318., ..., 4754318., 4754318.,
          4754318.],
         [4754318., 4754318., 4754318., ..., 4754318., 4754318.,
          4754318.],
         [4754318., 4754318., 4754318., ..., 4754318., 4754318.,
          4754318.],
         ...,
         [4278884., 4278884., 4278884., ..., 4278884., 4278884.,
          4278884.],
         [4278884., 4278884., 4278884., ..., 4278884., 4278884.,
          4278884.],
         [4278884., 4278884., 4278884., ..., 4278884., 4278884.,
          4278884.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [16], 'to': [17]}
tf node:
{'name': 'cos', 'output': array([[[[ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         [ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         [ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         ...,
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ],
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ],
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ]],

        [[ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         [ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         [ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         ...,
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ],
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ],
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ]],

        [[ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         [ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         [ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         ...,
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ],
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ],
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ]],

        ...,

        [[ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         [ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         [ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         ...,
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ],
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ],
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ]],

        [[ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         [ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         [ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         ...,
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ],
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ],
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ]],

        [[ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         [ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         [ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         ...,
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ],
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ],
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [14], 'to': [22]}
ms node:
{'name': 'cos', 'output': array([[[[ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         [ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         [ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         ...,
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ],
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ],
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ]],

        [[ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         [ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         [ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         ...,
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ],
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ],
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ]],

        [[ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         [ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         [ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         ...,
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ],
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ],
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ]],

        ...,

        [[ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         [ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         [ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         ...,
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ],
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ],
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ]],

        [[-0.9500088 , -0.9500088 , -0.9500088 , ..., -0.9500088 ,
          -0.9500088 , -0.9500088 ],
         [-0.9500088 , -0.9500088 , -0.9500088 , ..., -0.9500088 ,
          -0.9500088 , -0.9500088 ],
         [-0.9500088 , -0.9500088 , -0.9500088 , ..., -0.9500088 ,
          -0.9500088 , -0.9500088 ],
         ...,
         [ 0.8215347 ,  0.8215347 ,  0.8215347 , ...,  0.8215347 ,
           0.8215347 ,  0.8215347 ],
         [ 0.8215347 ,  0.8215347 ,  0.8215347 , ...,  0.8215347 ,
           0.8215347 ,  0.8215347 ],
         [ 0.8215347 ,  0.8215347 ,  0.8215347 , ...,  0.8215347 ,
           0.8215347 ,  0.8215347 ]],

        [[-0.9500088 , -0.9500088 , -0.9500088 , ..., -0.9500088 ,
          -0.9500088 , -0.9500088 ],
         [-0.9500088 , -0.9500088 , -0.9500088 , ..., -0.9500088 ,
          -0.9500088 , -0.9500088 ],
         [-0.9500088 , -0.9500088 , -0.9500088 , ..., -0.9500088 ,
          -0.9500088 , -0.9500088 ],
         ...,
         [ 0.8215347 ,  0.8215347 ,  0.8215347 , ...,  0.8215347 ,
           0.8215347 ,  0.8215347 ],
         [ 0.8215347 ,  0.8215347 ,  0.8215347 , ...,  0.8215347 ,
           0.8215347 ,  0.8215347 ],
         [ 0.8215347 ,  0.8215347 ,  0.8215347 , ...,  0.8215347 ,
           0.8215347 ,  0.8215347 ]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [14], 'to': [22]}
torch node:
{'name': 'cos', 'output': array([[[[ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         [ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         [ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         ...,
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ],
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ],
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ]],

        [[ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         [ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         [ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         ...,
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ],
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ],
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ]],

        [[ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         [ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         [ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         ...,
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ],
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ],
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ]],

        ...,

        [[ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         [ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         [ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         ...,
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ],
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ],
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ]],

        [[ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         [ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         [ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         ...,
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ],
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ],
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ]],

        [[ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         [ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         [ 0.24423994,  0.24423994,  0.24423994, ...,  0.24423994,
           0.24423994,  0.24423994],
         ...,
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ],
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ],
         [-0.9693337 , -0.9693337 , -0.9693337 , ..., -0.9693337 ,
          -0.9693337 , -0.9693337 ]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [14], 'to': [22]}

generate models:276

analyse output arrays in iter:302

pre layer res:
9:cos
{'name': 'cos', 'output': array([[[[ 0.01562301,  0.01676715, -0.89761555, ...,  0.01562301,
           0.01562301,  0.01562301],
         [ 0.01562301,  0.01676715, -0.89761555, ...,  0.01562301,
           0.01562301,  0.01562301],
         [ 0.01562301,  0.01676715, -0.89761555, ...,  0.01562301,
           0.01562301,  0.01562301],
         ...,
         [ 0.01562301,  0.01636762, -0.8974002 , ...,  0.01562301,
           0.01562301,  0.01562301],
         [ 0.01562301,  0.01636762, -0.8974002 , ...,  0.01562301,
           0.01562301,  0.01562301],
         [ 0.01562301,  0.01636762, -0.8974002 , ...,  0.01562301,
           0.01562301,  0.01562301]],

        [[ 0.01562301,  0.01676715, -0.89761555, ...,  0.01562301,
           0.01562301,  0.01562301],
         [ 0.01562301,  0.01676715, -0.89761555, ...,  0.01562301,
           0.01562301,  0.01562301],
         [ 0.01562301,  0.01676715, -0.89761555, ...,  0.01562301,
           0.01562301,  0.01562301],
         ...,
         [ 0.01562301,  0.01636762, -0.8974002 , ...,  0.01562301,
           0.01562301,  0.01562301],
         [ 0.01562301,  0.01636762, -0.8974002 , ...,  0.01562301,
           0.01562301,  0.01562301],
         [ 0.01562301,  0.01636762, -0.8974002 , ...,  0.01562301,
           0.01562301,  0.01562301]],

        [[ 0.01562301,  0.01676715, -0.89761555, ...,  0.01562301,
           0.01562301,  0.01562301],
         [ 0.01562301,  0.01676715, -0.89761555, ...,  0.01562301,
           0.01562301,  0.01562301],
         [ 0.01562301,  0.01676715, -0.89761555, ...,  0.01562301,
           0.01562301,  0.01562301],
         ...,
         [ 0.01562301,  0.01636762,  0.01653198, ...,  0.01562301,
           0.01562301,  0.01562301],
         [ 0.01562301,  0.01636762,  0.01653198, ...,  0.01562301,
           0.01562301,  0.01562301],
         [ 0.01562301,  0.01636762,  0.01653198, ...,  0.01562301,
           0.01562301,  0.01562301]],

        ...,

        [[ 0.01562301,  0.01676715,  0.01702723, ...,  0.01562301,
           0.01562301,  0.01562301],
         [ 0.01562301,  0.01676715,  0.01702723, ...,  0.01562301,
           0.01562301,  0.01562301],
         [ 0.01562301,  0.01676715,  0.01702723, ...,  0.01562301,
           0.01562301,  0.01562301],
         ...,
         [ 0.01562301,  0.01636762,  0.01653198, ...,  0.01562301,
           0.01562301,  0.01562301],
         [ 0.01562301,  0.01636762,  0.01653198, ...,  0.01562301,
           0.01562301,  0.01562301],
         [ 0.01562301,  0.01636762,  0.01653198, ...,  0.01562301,
           0.01562301,  0.01562301]],

        [[ 0.01562301,  0.01676715,  0.01702723, ...,  0.01562301,
           0.01562301,  0.01562301],
         [ 0.01562301,  0.01676715,  0.01702723, ...,  0.01562301,
           0.01562301,  0.01562301],
         [ 0.01562301,  0.01676715,  0.01702723, ...,  0.01562301,
           0.01562301,  0.01562301],
         ...,
         [ 0.01562301,  0.01636762,  0.01653198, ...,  0.01562301,
           0.01562301,  0.01562301],
         [ 0.01562301,  0.01636762,  0.01653198, ...,  0.01562301,
           0.01562301,  0.01562301],
         [ 0.01562301,  0.01636762,  0.01653198, ...,  0.01562301,
           0.01562301,  0.01562301]],

        [[ 0.01562301,  0.01676715,  0.01702723, ...,  0.01562301,
           0.01562301,  0.01562301],
         [ 0.01562301,  0.01676715,  0.01702723, ...,  0.01562301,
           0.01562301,  0.01562301],
         [ 0.01562301,  0.01676715,  0.01702723, ...,  0.01562301,
           0.01562301,  0.01562301],
         ...,
         [ 0.01562301,  0.01636762,  0.01653198, ...,  0.01562301,
           0.01562301,  0.01562301],
         [ 0.01562301,  0.01636762,  0.01653198, ...,  0.01562301,
           0.01562301,  0.01562301],
         [ 0.01562301,  0.01636762,  0.01653198, ...,  0.01562301,
           0.01562301,  0.01562301]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [5], 'to': [6]}
tf node:
{'name': 'conv2d', 'output': array([[[[ 0.9998732,  1.0730973, -1.6541888, ...,  0.9998732,
           0.9998732,  0.9998732],
         [ 0.9998732,  1.0730973, -1.6541888, ...,  0.9998732,
           0.9998732,  0.9998732],
         [ 0.9998732,  1.0730973, -1.6541888, ...,  0.9998732,
           0.9998732,  0.9998732],
         ...,
         [ 0.9998732,  1.0475276, -0.769819 , ...,  0.9998732,
           0.9998732,  0.9998732],
         [ 0.9998732,  1.0475276, -0.769819 , ...,  0.9998732,
           0.9998732,  0.9998732],
         [ 0.9998732,  1.0475276, -0.769819 , ...,  0.9998732,
           0.9998732,  0.9998732]],

        [[ 0.9998732,  1.0730973, -1.6541888, ...,  0.9998732,
           0.9998732,  0.9998732],
         [ 0.9998732,  1.0730973, -1.6541888, ...,  0.9998732,
           0.9998732,  0.9998732],
         [ 0.9998732,  1.0730973, -1.6541888, ...,  0.9998732,
           0.9998732,  0.9998732],
         ...,
         [ 0.9998732,  1.0475276, -0.769819 , ...,  0.9998732,
           0.9998732,  0.9998732],
         [ 0.9998732,  1.0475276, -0.769819 , ...,  0.9998732,
           0.9998732,  0.9998732],
         [ 0.9998732,  1.0475276, -0.769819 , ...,  0.9998732,
           0.9998732,  0.9998732]],

        [[ 0.9998732,  1.0730973, -1.6541888, ...,  0.9998732,
           0.9998732,  0.9998732],
         [ 0.9998732,  1.0730973, -1.6541888, ...,  0.9998732,
           0.9998732,  0.9998732],
         [ 0.9998732,  1.0730973, -1.6541888, ...,  0.9998732,
           0.9998732,  0.9998732],
         ...,
         [ 0.9998732,  1.0475276, -0.769819 , ...,  0.9998732,
           0.9998732,  0.9998732],
         [ 0.9998732,  1.0475276, -0.769819 , ...,  0.9998732,
           0.9998732,  0.9998732],
         [ 0.9998732,  1.0475276, -0.769819 , ...,  0.9998732,
           0.9998732,  0.9998732]],

        ...,

        [[ 0.9998732,  1.0730973, -1.6541888, ...,  0.9998732,
           0.9998732,  0.9998732],
         [ 0.9998732,  1.0730973, -1.6541888, ...,  0.9998732,
           0.9998732,  0.9998732],
         [ 0.9998732,  1.0730973, -1.6541888, ...,  0.9998732,
           0.9998732,  0.9998732],
         ...,
         [ 0.9998732,  1.0475276, -0.769819 , ...,  0.9998732,
           0.9998732,  0.9998732],
         [ 0.9998732,  1.0475276, -0.769819 , ...,  0.9998732,
           0.9998732,  0.9998732],
         [ 0.9998732,  1.0475276, -0.769819 , ...,  0.9998732,
           0.9998732,  0.9998732]],

        [[ 0.9998732,  1.0730973, -1.6541888, ...,  0.9998732,
           0.9998732,  0.9998732],
         [ 0.9998732,  1.0730973, -1.6541888, ...,  0.9998732,
           0.9998732,  0.9998732],
         [ 0.9998732,  1.0730973, -1.6541888, ...,  0.9998732,
           0.9998732,  0.9998732],
         ...,
         [ 0.9998732,  1.0475276, -0.769819 , ...,  0.9998732,
           0.9998732,  0.9998732],
         [ 0.9998732,  1.0475276, -0.769819 , ...,  0.9998732,
           0.9998732,  0.9998732],
         [ 0.9998732,  1.0475276, -0.769819 , ...,  0.9998732,
           0.9998732,  0.9998732]],

        [[ 0.9998732,  1.0730973, -1.6541888, ...,  0.9998732,
           0.9998732,  0.9998732],
         [ 0.9998732,  1.0730973, -1.6541888, ...,  0.9998732,
           0.9998732,  0.9998732],
         [ 0.9998732,  1.0730973, -1.6541888, ...,  0.9998732,
           0.9998732,  0.9998732],
         ...,
         [ 0.9998732,  1.0475276, -0.769819 , ...,  0.9998732,
           0.9998732,  0.9998732],
         [ 0.9998732,  1.0475276, -0.769819 , ...,  0.9998732,
           0.9998732,  0.9998732],
         [ 0.9998732,  1.0475276, -0.769819 , ...,  0.9998732,
           0.9998732,  0.9998732]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [9], 'to': [7]}
ms node:
{'name': 'conv2d', 'output': array([[[[ 0.99988085,  1.0730973 , -1.6541888 , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0730973 , -1.6541888 , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0730973 , -1.6541888 , ...,  0.99988085,
           0.99988085,  0.99988085],
         ...,
         [ 0.99988085,  1.0475273 , -0.769819  , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0475273 , -0.769819  , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0475273 , -0.769819  , ...,  0.99988085,
           0.99988085,  0.99988085]],

        [[ 0.99988085,  1.0730973 , -1.6541888 , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0730973 , -1.6541888 , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0730973 , -1.6541888 , ...,  0.99988085,
           0.99988085,  0.99988085],
         ...,
         [ 0.99988085,  1.0475273 , -0.769819  , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0475273 , -0.769819  , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0475273 , -0.769819  , ...,  0.99988085,
           0.99988085,  0.99988085]],

        [[ 0.99988085,  1.0730973 , -1.6541888 , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0730973 , -1.6541888 , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0730973 , -1.6541888 , ...,  0.99988085,
           0.99988085,  0.99988085],
         ...,
         [ 0.99988085,  1.0475273 , -0.769819  , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0475273 , -0.769819  , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0475273 , -0.769819  , ...,  0.99988085,
           0.99988085,  0.99988085]],

        ...,

        [[ 0.99988085,  1.0730973 , -1.6541888 , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0730973 , -1.6541888 , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0730973 , -1.6541888 , ...,  0.99988085,
           0.99988085,  0.99988085],
         ...,
         [ 0.99988085,  1.0475273 , -0.769819  , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0475273 , -0.769819  , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0475273 , -0.769819  , ...,  0.99988085,
           0.99988085,  0.99988085]],

        [[ 0.99987996,  1.0730973 , -1.6541855 , ...,  0.99987996,
           0.99987996,  0.99987996],
         [ 0.99987996,  1.0730973 , -1.6541855 , ...,  0.99987996,
           0.99987996,  0.99987996],
         [ 0.99987996,  1.0730973 , -1.6541855 , ...,  0.99987996,
           0.99987996,  0.99987996],
         ...,
         [ 0.99987996,  1.0475273 , -0.7698166 , ...,  0.99987996,
           0.99987996,  0.99987996],
         [ 0.99987996,  1.0475273 , -0.7698166 , ...,  0.99987996,
           0.99987996,  0.99987996],
         [ 0.99987996,  1.0475273 , -0.7698166 , ...,  0.99987996,
           0.99987996,  0.99987996]],

        [[ 0.99987996,  1.0730973 , -1.6541855 , ...,  0.99987996,
           0.99987996,  0.99987996],
         [ 0.99987996,  1.0730973 , -1.6541855 , ...,  0.99987996,
           0.99987996,  0.99987996],
         [ 0.99987996,  1.0730973 , -1.6541855 , ...,  0.99987996,
           0.99987996,  0.99987996],
         ...,
         [ 0.99987996,  1.0475273 , -0.7698166 , ...,  0.99987996,
           0.99987996,  0.99987996],
         [ 0.99987996,  1.0475273 , -0.7698166 , ...,  0.99987996,
           0.99987996,  0.99987996],
         [ 0.99987996,  1.0475273 , -0.7698166 , ...,  0.99987996,
           0.99987996,  0.99987996]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [9], 'to': [7]}
torch node:
{'name': 'conv2d', 'output': array([[[[ 0.99988085,  1.0730973 , -1.6541888 , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0730973 , -1.6541888 , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0730973 , -1.6541888 , ...,  0.99988085,
           0.99988085,  0.99988085],
         ...,
         [ 0.99988085,  1.0475273 , -0.769819  , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0475273 , -0.769819  , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0475273 , -0.769819  , ...,  0.99988085,
           0.99988085,  0.99988085]],

        [[ 0.99988085,  1.0730973 , -1.6541888 , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0730973 , -1.6541888 , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0730973 , -1.6541888 , ...,  0.99988085,
           0.99988085,  0.99988085],
         ...,
         [ 0.99988085,  1.0475273 , -0.769819  , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0475273 , -0.769819  , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0475273 , -0.769819  , ...,  0.99988085,
           0.99988085,  0.99988085]],

        [[ 0.99988085,  1.0730973 , -1.6541888 , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0730973 , -1.6541888 , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0730973 , -1.6541888 , ...,  0.99988085,
           0.99988085,  0.99988085],
         ...,
         [ 0.99988085,  1.0475273 , -0.769819  , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0475273 , -0.769819  , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0475273 , -0.769819  , ...,  0.99988085,
           0.99988085,  0.99988085]],

        ...,

        [[ 0.99988085,  1.0730973 , -1.6541888 , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0730973 , -1.6541888 , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0730973 , -1.6541888 , ...,  0.99988085,
           0.99988085,  0.99988085],
         ...,
         [ 0.99988085,  1.0475273 , -0.769819  , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0475273 , -0.769819  , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0475273 , -0.769819  , ...,  0.99988085,
           0.99988085,  0.99988085]],

        [[ 0.99988085,  1.0730973 , -1.6541888 , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0730973 , -1.6541888 , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0730973 , -1.6541888 , ...,  0.99988085,
           0.99988085,  0.99988085],
         ...,
         [ 0.99988085,  1.0475273 , -0.769819  , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0475273 , -0.769819  , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0475273 , -0.769819  , ...,  0.99988085,
           0.99988085,  0.99988085]],

        [[ 0.99988085,  1.0730973 , -1.6541888 , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0730973 , -1.6541888 , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0730973 , -1.6541888 , ...,  0.99988085,
           0.99988085,  0.99988085],
         ...,
         [ 0.99988085,  1.0475273 , -0.769819  , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0475273 , -0.769819  , ...,  0.99988085,
           0.99988085,  0.99988085],
         [ 0.99988085,  1.0475273 , -0.769819  , ...,  0.99988085,
           0.99988085,  0.99988085]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [9], 'to': [7]}

generate models:282

analyse output arrays in iter:312

pre layer res:
27:reshape
{'name': 'reshape', 'output': array([[ 1.,  1.,  1., ..., inf, inf,  1.]], dtype=float32), 'output_shape': TensorShape([1, 1792]), 'from': [26], 'to': [15]}
tf node:
{'name': 'softmax', 'output': array([[nan, nan, nan, ..., nan, nan, nan]], dtype=float32), 'output_shape': TensorShape([1, 1792]), 'from': [27], 'to': [16]}
ms node:
{'name': 'softmax', 'output': array([[ 0.,  0.,  0., ..., nan, nan,  0.]], dtype=float32), 'output_shape': (1, 1792), 'from': [27], 'to': [16]}
torch node:
{'name': 'softmax', 'output': array([[nan, nan, nan, ..., nan, nan, nan]], dtype=float32), 'output_shape': torch.Size([1, 1792]), 'from': [27], 'to': [16]}

generate models:291

analyse output arrays in iter:341

pre layer res:
27:reshape
{'name': 'reshape', 'output': array([[[[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ]],

        [[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 1.9616559,
          1.9616559],
         ...,
         [0.       , 0.       , 1.1507312, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ]],

        [[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 1.9616559, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 1.9616559, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 1.9616559, ..., 0.       , 3.3479502,
          3.3479502],
         [3.3479502, 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ]],

        ...,

        [[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ]],

        [[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ]],

        [[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 112, 112]), 'from': [26], 'to': [24]}
tf node:
{'name': 'conv2d', 'output': array([[[[ 0.0000000e+00, -1.0430813e-07, -1.1591766e-08, ...,
           3.7033573e-08,  2.0186742e-07,  1.6697025e-07],
         [ 3.5762787e-07,  5.6624413e-07,  5.3096056e+00, ...,
           9.2286967e-08,  1.9616557e+00,  1.9616554e+00],
         [ 1.9616559e+00, -2.6822090e-07, -1.6702444e-09, ...,
           1.9838971e-07,  1.9616556e+00,  1.9616554e+00],
         ...,
         [ 7.4505806e-08,  3.5017729e-07,  3.1123869e+00, ...,
          -7.8870258e-08,  1.2607701e-07,  1.5373566e-07],
         [ 7.0780516e-08,  1.3411045e-07,  1.9616557e+00, ...,
           6.6680815e-07,  6.6959000e+00,  6.6958990e+00],
         [ 6.6959000e+00, -2.3841858e-07,  8.8045829e-07, ...,
           1.1507311e+00,  1.1507312e+00,  3.7775760e-07]],

        [[ 0.0000000e+00, -1.0430813e-07, -1.1591766e-08, ...,
           3.7033573e-08,  2.0186742e-07,  1.6697025e-07],
         [ 3.5762787e-07,  5.6624413e-07,  5.3096056e+00, ...,
           9.2286967e-08,  1.9616557e+00,  1.9616554e+00],
         [ 1.9616559e+00, -2.6822090e-07, -1.6702444e-09, ...,
           1.9838971e-07,  1.9616556e+00,  1.9616554e+00],
         ...,
         [ 7.4505806e-08,  3.5017729e-07,  3.1123869e+00, ...,
          -7.8870258e-08,  1.2607701e-07,  1.5373566e-07],
         [ 7.0780516e-08,  1.3411045e-07,  1.9616557e+00, ...,
           6.6680815e-07,  6.6959000e+00,  6.6958990e+00],
         [ 6.6959000e+00, -2.3841858e-07,  8.8045829e-07, ...,
           1.1507311e+00,  1.1507312e+00,  3.7775760e-07]],

        [[ 0.0000000e+00, -1.0430813e-07, -1.1591766e-08, ...,
           3.7033573e-08,  2.0186742e-07,  1.6697025e-07],
         [ 3.5762787e-07,  5.6624413e-07,  5.3096056e+00, ...,
           9.2286967e-08,  1.9616557e+00,  1.9616554e+00],
         [ 1.9616559e+00, -2.6822090e-07, -1.6702444e-09, ...,
           1.9838971e-07,  1.9616556e+00,  1.9616554e+00],
         ...,
         [ 7.4505806e-08,  3.5017729e-07,  3.1123869e+00, ...,
          -7.8870258e-08,  1.2607701e-07,  1.5373566e-07],
         [ 7.0780516e-08,  1.3411045e-07,  1.9616557e+00, ...,
           6.6680815e-07,  6.6959000e+00,  6.6958990e+00],
         [ 6.6959000e+00, -2.3841858e-07,  8.8045829e-07, ...,
           1.1507311e+00,  1.1507312e+00,  3.7775760e-07]],

        ...,

        [[ 0.0000000e+00, -1.0430813e-07, -1.1591766e-08, ...,
           3.7033573e-08,  2.0186742e-07,  1.6697025e-07],
         [ 3.5762787e-07,  5.6624413e-07,  5.3096056e+00, ...,
           9.2286967e-08,  1.9616557e+00,  1.9616554e+00],
         [ 1.9616559e+00, -2.6822090e-07, -1.6702444e-09, ...,
           1.9838971e-07,  1.9616556e+00,  1.9616554e+00],
         ...,
         [ 7.4505806e-08,  3.5017729e-07,  3.1123869e+00, ...,
          -7.8870258e-08,  1.2607701e-07,  1.5373566e-07],
         [ 7.0780516e-08,  1.3411045e-07,  1.9616557e+00, ...,
           6.6680815e-07,  6.6959000e+00,  6.6958990e+00],
         [ 6.6959000e+00, -2.3841858e-07,  8.8045829e-07, ...,
           1.1507311e+00,  1.1507312e+00,  3.7775760e-07]],

        [[ 0.0000000e+00, -1.0430813e-07, -1.1591766e-08, ...,
           3.7033573e-08,  2.0186742e-07,  1.6697025e-07],
         [ 3.5762787e-07,  5.6624413e-07,  5.3096056e+00, ...,
           9.2286967e-08,  1.9616557e+00,  1.9616554e+00],
         [ 1.9616559e+00, -2.6822090e-07, -1.6702444e-09, ...,
           1.9838971e-07,  1.9616556e+00,  1.9616554e+00],
         ...,
         [ 7.4505806e-08,  3.5017729e-07,  3.1123869e+00, ...,
          -7.8870258e-08,  1.2607701e-07,  1.5373566e-07],
         [ 7.0780516e-08,  1.3411045e-07,  1.9616557e+00, ...,
           6.6680815e-07,  6.6959000e+00,  6.6958990e+00],
         [ 6.6959000e+00, -2.3841858e-07,  8.8045829e-07, ...,
           1.1507311e+00,  1.1507312e+00,  3.7775760e-07]],

        [[ 0.0000000e+00, -1.0430813e-07, -1.1591766e-08, ...,
           3.7033573e-08,  2.0186742e-07,  1.6697025e-07],
         [ 3.5762787e-07,  5.6624413e-07,  5.3096056e+00, ...,
           9.2286967e-08,  1.9616557e+00,  1.9616554e+00],
         [ 1.9616559e+00, -2.6822090e-07, -1.6702444e-09, ...,
           1.9838971e-07,  1.9616556e+00,  1.9616554e+00],
         ...,
         [ 7.4505806e-08,  3.5017729e-07,  3.1123869e+00, ...,
          -7.8870258e-08,  1.2607701e-07,  1.5373566e-07],
         [ 7.0780516e-08,  1.3411045e-07,  1.9616557e+00, ...,
           6.6680815e-07,  6.6959000e+00,  6.6958990e+00],
         [ 6.6959000e+00, -2.3841858e-07,  8.8045829e-07, ...,
           1.1507311e+00,  1.1507312e+00,  3.7775760e-07]]]],
      dtype=float32), 'output_shape': TensorShape([1, 256, 112, 112]), 'from': [27], 'to': [28]}
ms node:
{'name': 'conv2d', 'output': array([[[[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 5.309604 , ..., 0.       , 1.9616549,
          1.9616549],
         [1.9616549, 0.       , 0.       , ..., 0.       , 1.9616549,
          1.9616549],
         ...,
         [0.       , 0.       , 3.1123838, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 1.9616549, ..., 0.       , 6.6958985,
          6.6958985],
         [6.6958985, 0.       , 0.       , ..., 1.1507288, 1.1507288,
          0.       ]],

        [[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 5.309604 , ..., 0.       , 1.9616549,
          1.9616549],
         [1.9616549, 0.       , 0.       , ..., 0.       , 1.9616549,
          1.9616549],
         ...,
         [0.       , 0.       , 3.1123838, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 1.9616549, ..., 0.       , 6.6958985,
          6.6958985],
         [6.6958985, 0.       , 0.       , ..., 1.1507288, 1.1507288,
          0.       ]],

        [[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 5.309604 , ..., 0.       , 1.9616549,
          1.9616549],
         [1.9616549, 0.       , 0.       , ..., 0.       , 1.9616549,
          1.9616549],
         ...,
         [0.       , 0.       , 3.1123838, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 1.9616549, ..., 0.       , 6.6958985,
          6.6958985],
         [6.6958985, 0.       , 0.       , ..., 1.1507288, 1.1507288,
          0.       ]],

        ...,

        [[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 5.309604 , ..., 0.       , 1.9616549,
          1.9616549],
         [1.9616549, 0.       , 0.       , ..., 0.       , 1.9616549,
          1.9616549],
         ...,
         [0.       , 0.       , 3.1123838, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 1.9616549, ..., 0.       , 6.6958985,
          6.6958985],
         [6.6958985, 0.       , 0.       , ..., 1.1507288, 1.1507288,
          0.       ]],

        [[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 5.309604 , ..., 0.       , 1.9616549,
          1.9616549],
         [1.9616549, 0.       , 0.       , ..., 0.       , 1.9616549,
          1.9616549],
         ...,
         [0.       , 0.       , 3.1123838, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 1.9616549, ..., 0.       , 6.6958985,
          6.6958985],
         [6.6958985, 0.       , 0.       , ..., 1.1507288, 1.1507288,
          0.       ]],

        [[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 5.309604 , ..., 0.       , 1.9616549,
          1.9616549],
         [1.9616549, 0.       , 0.       , ..., 0.       , 1.9616549,
          1.9616549],
         ...,
         [0.       , 0.       , 3.1123838, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 1.9616549, ..., 0.       , 6.6958985,
          6.6958985],
         [6.6958985, 0.       , 0.       , ..., 1.1507288, 1.1507288,
          0.       ]]]], dtype=float32), 'output_shape': (1, 256, 112, 112), 'from': [27], 'to': [28]}
torch node:
{'name': 'conv2d', 'output': array([[[[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 5.3096085, ..., 0.       , 1.961657 ,
          1.961657 ],
         [1.961657 , 0.       , 0.       , ..., 0.       , 1.961657 ,
          1.961657 ],
         ...,
         [0.       , 0.       , 3.1123848, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 1.961657 , ..., 0.       , 6.695903 ,
          6.695903 ],
         [6.695903 , 0.       , 0.       , ..., 1.1507277, 1.1507277,
          0.       ]],

        [[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 5.3096085, ..., 0.       , 1.961657 ,
          1.961657 ],
         [1.961657 , 0.       , 0.       , ..., 0.       , 1.961657 ,
          1.961657 ],
         ...,
         [0.       , 0.       , 3.1123848, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 1.961657 , ..., 0.       , 6.695903 ,
          6.695903 ],
         [6.695903 , 0.       , 0.       , ..., 1.1507277, 1.1507277,
          0.       ]],

        [[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 5.3096085, ..., 0.       , 1.961657 ,
          1.961657 ],
         [1.961657 , 0.       , 0.       , ..., 0.       , 1.961657 ,
          1.961657 ],
         ...,
         [0.       , 0.       , 3.1123848, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 1.961657 , ..., 0.       , 6.695903 ,
          6.695903 ],
         [6.695903 , 0.       , 0.       , ..., 1.1507277, 1.1507277,
          0.       ]],

        ...,

        [[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 5.3096085, ..., 0.       , 1.961657 ,
          1.961657 ],
         [1.961657 , 0.       , 0.       , ..., 0.       , 1.961657 ,
          1.961657 ],
         ...,
         [0.       , 0.       , 3.1123848, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 1.961657 , ..., 0.       , 6.695903 ,
          6.695903 ],
         [6.695903 , 0.       , 0.       , ..., 1.1507277, 1.1507277,
          0.       ]],

        [[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 5.3096085, ..., 0.       , 1.961657 ,
          1.961657 ],
         [1.961657 , 0.       , 0.       , ..., 0.       , 1.961657 ,
          1.961657 ],
         ...,
         [0.       , 0.       , 3.1123848, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 1.961657 , ..., 0.       , 6.695903 ,
          6.695903 ],
         [6.695903 , 0.       , 0.       , ..., 1.1507277, 1.1507277,
          0.       ]],

        [[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 5.3096085, ..., 0.       , 1.961657 ,
          1.961657 ],
         [1.961657 , 0.       , 0.       , ..., 0.       , 1.961657 ,
          1.961657 ],
         ...,
         [0.       , 0.       , 3.1123848, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 1.961657 , ..., 0.       , 6.695903 ,
          6.695903 ],
         [6.695903 , 0.       , 0.       , ..., 1.1507277, 1.1507277,
          0.       ]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 112, 112]), 'from': [27], 'to': [28]}

generate models:319

analyse output arrays in iter:407

pre layer res:
10:add
{'name': 'add', 'output': array([[[[1086.1287 , 1119.2587 , 1157.0935 , ...,  787.7825 ,
          1076.0784 , 1102.1747 ],
         [1133.8325 , 1151.6354 , 1130.5442 , ..., 1123.1173 ,
          1203.1595 , 1227.8127 ],
         [1242.2626 , 1176.7107 , 1102.5468 , ..., 1142.4019 ,
          1125.8044 , 1059.7968 ],
         ...,
         [1076.0784 , 1101.3721 , 1128.2185 , ...,       -inf,
                -inf,  787.7825 ],
         [1076.0784 , 1101.3721 , 1128.2185 , ..., 1101.211  ,
           888.36633,       -inf],
         [      -inf,       -inf,       -inf, ..., 1113.6356 ,
          1113.9763 , 1108.4142 ]],

        [[1086.1287 , 1119.2587 , 1157.0935 , ...,  787.7825 ,
          1076.0784 , 1102.1747 ],
         [1133.8325 , 1151.6354 , 1130.5442 , ..., 1123.1173 ,
          1203.1595 , 1227.8127 ],
         [1242.2626 , 1176.7107 , 1102.5468 , ..., 1142.4019 ,
          1125.8044 , 1059.7968 ],
         ...,
         [1076.0784 , 1101.3721 , 1128.2185 , ...,       -inf,
                -inf,  787.7825 ],
         [1076.0784 , 1101.3721 , 1128.2185 , ..., 1101.211  ,
           888.36633,       -inf],
         [      -inf,       -inf,       -inf, ..., 1113.6356 ,
          1113.9763 , 1108.4142 ]],

        [[1086.1287 , 1119.2587 , 1157.0935 , ...,  787.7825 ,
          1076.0784 , 1102.1747 ],
         [1133.8325 , 1151.6354 , 1130.5442 , ..., 1123.1173 ,
          1203.1595 , 1227.8127 ],
         [1242.2626 , 1176.7107 , 1102.5468 , ..., 1142.4019 ,
          1125.8044 , 1059.7968 ],
         ...,
         [1076.0784 , 1101.3721 , 1128.2185 , ...,       -inf,
                -inf,  787.7825 ],
         [1076.0784 , 1101.3721 , 1128.2185 , ..., 1101.211  ,
           888.36633,       -inf],
         [      -inf,       -inf,       -inf, ..., 1113.6356 ,
          1113.9763 , 1108.4142 ]],

        ...,

        [[1086.1287 , 1119.2587 , 1157.0935 , ...,  787.7825 ,
          1076.0784 , 1102.1747 ],
         [1133.8325 , 1151.6354 , 1130.5442 , ..., 1123.1173 ,
          1203.1595 , 1227.8127 ],
         [1242.2626 , 1176.7107 , 1102.5468 , ..., 1142.4019 ,
          1125.8044 , 1059.7968 ],
         ...,
         [1076.0784 , 1101.3721 , 1128.2185 , ...,       -inf,
                -inf,  787.7825 ],
         [1076.0784 , 1101.3721 , 1128.2185 , ..., 1101.211  ,
           888.36633,       -inf],
         [      -inf,       -inf,       -inf, ..., 1113.6356 ,
          1113.9763 , 1108.4142 ]],

        [[1086.1287 , 1119.2587 , 1157.0935 , ...,  787.7825 ,
          1076.0784 , 1102.1747 ],
         [1133.8325 , 1151.6354 , 1130.5442 , ..., 1123.1173 ,
          1203.1595 , 1227.8127 ],
         [1242.2626 , 1176.7107 , 1102.5468 , ..., 1142.4019 ,
          1125.8044 , 1059.7968 ],
         ...,
         [1076.0784 , 1101.3721 , 1128.2185 , ...,       -inf,
                -inf,  787.7825 ],
         [1076.0784 , 1101.3721 , 1128.2185 , ..., 1101.211  ,
           888.36633,       -inf],
         [      -inf,       -inf,       -inf, ..., 1113.6356 ,
          1113.9763 , 1108.4142 ]],

        [[1086.1287 , 1119.2587 , 1157.0935 , ...,  787.7825 ,
          1076.0784 , 1102.1747 ],
         [1133.8325 , 1151.6354 , 1130.5442 , ..., 1123.1173 ,
          1203.1595 , 1227.8127 ],
         [1242.2626 , 1176.7107 , 1102.5468 , ..., 1142.4019 ,
          1125.8044 , 1059.7968 ],
         ...,
         [1076.0784 , 1101.3721 , 1128.2185 , ...,       -inf,
                -inf,  787.7825 ],
         [1076.0784 , 1101.3721 , 1128.2185 , ..., 1101.211  ,
           888.36633,       -inf],
         [      -inf,       -inf,       -inf, ..., 1113.6356 ,
          1113.9763 , 1108.4142 ]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [8, 8], 'to': [26]}
tf node:
{'name': 'sin', 'output': array([[[[-0.75940365,  0.75238967,  0.8346017 , ...,  0.6869513 ,
           0.99656695,  0.50064075],
         [ 0.27868867,  0.97094005, -0.41611242, ..., -0.99999785,
           0.07038219,  0.52267313],
         [-0.9719712 ,  0.9830749 ,  0.15168075, ..., -0.90774214,
           0.8975907 , -0.8819713 ],
         ...,
         [ 0.99656695,  0.9704168 , -0.37717417, ...,         nan,
                  nan,  0.6869513 ],
         [ 0.99656695,  0.9704168 , -0.37717417, ...,  0.9965712 ,
           0.6475676 ,         nan],
         [        nan,         nan,         nan, ...,  0.99826145,
           0.96057796,  0.53796583]],

        [[-0.75940365,  0.75238967,  0.8346017 , ...,  0.6869513 ,
           0.99656695,  0.50064075],
         [ 0.27868867,  0.97094005, -0.41611242, ..., -0.99999785,
           0.07038219,  0.52267313],
         [-0.9719712 ,  0.9830749 ,  0.15168075, ..., -0.90774214,
           0.8975907 , -0.8819713 ],
         ...,
         [ 0.99656695,  0.9704168 , -0.37717417, ...,         nan,
                  nan,  0.6869513 ],
         [ 0.99656695,  0.9704168 , -0.37717417, ...,  0.9965712 ,
           0.6475676 ,         nan],
         [        nan,         nan,         nan, ...,  0.99826145,
           0.96057796,  0.53796583]],

        [[-0.75940365,  0.75238967,  0.8346017 , ...,  0.6869513 ,
           0.99656695,  0.50064075],
         [ 0.27868867,  0.97094005, -0.41611242, ..., -0.99999785,
           0.07038219,  0.52267313],
         [-0.9719712 ,  0.9830749 ,  0.15168075, ..., -0.90774214,
           0.8975907 , -0.8819713 ],
         ...,
         [ 0.99656695,  0.9704168 , -0.37717417, ...,         nan,
                  nan,  0.6869513 ],
         [ 0.99656695,  0.9704168 , -0.37717417, ...,  0.9965712 ,
           0.6475676 ,         nan],
         [        nan,         nan,         nan, ...,  0.99826145,
           0.96057796,  0.53796583]],

        ...,

        [[-0.75940365,  0.75238967,  0.8346017 , ...,  0.6869513 ,
           0.99656695,  0.50064075],
         [ 0.27868867,  0.97094005, -0.41611242, ..., -0.99999785,
           0.07038219,  0.52267313],
         [-0.9719712 ,  0.9830749 ,  0.15168075, ..., -0.90774214,
           0.8975907 , -0.8819713 ],
         ...,
         [ 0.99656695,  0.9704168 , -0.37717417, ...,         nan,
                  nan,  0.6869513 ],
         [ 0.99656695,  0.9704168 , -0.37717417, ...,  0.9965712 ,
           0.6475676 ,         nan],
         [        nan,         nan,         nan, ...,  0.99826145,
           0.96057796,  0.53796583]],

        [[-0.75940365,  0.75238967,  0.8346017 , ...,  0.6869513 ,
           0.99656695,  0.50064075],
         [ 0.27868867,  0.97094005, -0.41611242, ..., -0.99999785,
           0.07038219,  0.52267313],
         [-0.9719712 ,  0.9830749 ,  0.15168075, ..., -0.90774214,
           0.8975907 , -0.8819713 ],
         ...,
         [ 0.99656695,  0.9704168 , -0.37717417, ...,         nan,
                  nan,  0.6869513 ],
         [ 0.99656695,  0.9704168 , -0.37717417, ...,  0.9965712 ,
           0.6475676 ,         nan],
         [        nan,         nan,         nan, ...,  0.99826145,
           0.96057796,  0.53796583]],

        [[-0.75940365,  0.75238967,  0.8346017 , ...,  0.6869513 ,
           0.99656695,  0.50064075],
         [ 0.27868867,  0.97094005, -0.41611242, ..., -0.99999785,
           0.07038219,  0.52267313],
         [-0.9719712 ,  0.9830749 ,  0.15168075, ..., -0.90774214,
           0.8975907 , -0.8819713 ],
         ...,
         [ 0.99656695,  0.9704168 , -0.37717417, ...,         nan,
                  nan,  0.6869513 ],
         [ 0.99656695,  0.9704168 , -0.37717417, ...,  0.9965712 ,
           0.6475676 ,         nan],
         [        nan,         nan,         nan, ...,  0.99826145,
           0.96057796,  0.53796583]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [10], 'to': [11]}
ms node:
{'name': 'sin', 'output': array([[[[-0.7595625 ,  0.75238967,  0.8346017 , ...,  0.6869512 ,
           0.99656695,  0.502225  ],
         [ 0.2796264 ,  0.97134763, -0.41622344, ..., -0.99999785,
           0.07038219,  0.5226731 ],
         [-0.9719712 ,  0.9830749 ,  0.15168075, ..., -0.90774214,
           0.8975907 , -0.8819713 ],
         ...,
         [ 0.99656695,  0.97053456, -0.37672192, ...,         nan,
                  nan,  0.6869512 ],
         [ 0.99656695,  0.97053456, -0.37672192, ...,  0.9965712 ,
           0.6475676 ,         nan],
         [        nan,         nan,         nan, ...,  0.99825424,
           0.96057796,  0.53796583]],

        [[-0.7595625 ,  0.75238967,  0.8346017 , ...,  0.6869512 ,
           0.99656695,  0.502225  ],
         [ 0.2796264 ,  0.97134763, -0.41622344, ..., -0.99999785,
           0.07038219,  0.5226731 ],
         [-0.9719712 ,  0.9830749 ,  0.15168075, ..., -0.90774214,
           0.8975907 , -0.8819713 ],
         ...,
         [ 0.99656695,  0.97053456, -0.37672192, ...,         nan,
                  nan,  0.6869512 ],
         [ 0.99656695,  0.97053456, -0.37672192, ...,  0.9965712 ,
           0.6475676 ,         nan],
         [        nan,         nan,         nan, ...,  0.99825424,
           0.96057796,  0.53796583]],

        [[-0.7595625 ,  0.75238967,  0.8346017 , ...,  0.6869512 ,
           0.99656695,  0.502225  ],
         [ 0.2796264 ,  0.97134763, -0.41622344, ..., -0.99999785,
           0.07038219,  0.5226731 ],
         [-0.9719712 ,  0.9830749 ,  0.15168075, ..., -0.90774214,
           0.8975907 , -0.8819713 ],
         ...,
         [ 0.99656695,  0.97053456, -0.37672192, ...,         nan,
                  nan,  0.6869512 ],
         [ 0.99656695,  0.97053456, -0.37672192, ...,  0.9965712 ,
           0.6475676 ,         nan],
         [        nan,         nan,         nan, ...,  0.99825424,
           0.96057796,  0.53796583]],

        ...,

        [[-0.7595625 ,  0.75238967,  0.8346017 , ...,  0.6869512 ,
           0.99656695,  0.502225  ],
         [ 0.2796264 ,  0.97134763, -0.41622344, ..., -0.99999785,
           0.07038219,  0.5226731 ],
         [-0.9719712 ,  0.9830749 ,  0.15168075, ..., -0.90774214,
           0.8975907 , -0.8819713 ],
         ...,
         [ 0.99656695,  0.97053456, -0.37672192, ...,         nan,
                  nan,  0.6869512 ],
         [ 0.99656695,  0.97053456, -0.37672192, ...,  0.9965712 ,
           0.6475676 ,         nan],
         [        nan,         nan,         nan, ...,  0.99825424,
           0.96057796,  0.53796583]],

        [[-0.7595625 ,  0.75238967,  0.8346017 , ...,  0.6869512 ,
           0.99656695,  0.502225  ],
         [ 0.2796264 ,  0.97134763, -0.41622344, ..., -0.99999785,
           0.07038219,  0.5226731 ],
         [-0.9719712 ,  0.9830749 ,  0.15168075, ..., -0.90774214,
           0.8975907 , -0.8819713 ],
         ...,
         [ 0.99656695,  0.97053456, -0.37672192, ...,         nan,
                  nan,  0.6869512 ],
         [ 0.99656695,  0.97053456, -0.37672192, ...,  0.9965712 ,
           0.6475676 ,         nan],
         [        nan,         nan,         nan, ...,  0.99825424,
           0.96057796,  0.53796583]],

        [[-0.7595625 ,  0.75238967,  0.8346017 , ...,  0.6869512 ,
           0.99656695,  0.502225  ],
         [ 0.2796264 ,  0.97134763, -0.41622344, ..., -0.99999785,
           0.07038219,  0.5226731 ],
         [-0.9719712 ,  0.9830749 ,  0.15168075, ..., -0.90774214,
           0.8975907 , -0.8819713 ],
         ...,
         [ 0.99656695,  0.97053456, -0.37672192, ...,         nan,
                  nan,  0.6869512 ],
         [ 0.99656695,  0.97053456, -0.37672192, ...,  0.9965712 ,
           0.6475676 ,         nan],
         [        nan,         nan,         nan, ...,  0.99825424,
           0.96057796,  0.53796583]]]], dtype=float32), 'output_shape': (1, 256, 28, 28), 'from': [10], 'to': [11]}
torch node:
{'name': 'sin', 'output': array([[[[-0.75940365,  0.7523896 ,  0.8346017 , ...,  0.6869512 ,
           0.99656695,  0.50064075],
         [ 0.27868867,  0.97094005, -0.41611242, ..., -0.99999785,
           0.07038219,  0.5226731 ],
         [-0.9719712 ,  0.9830749 ,  0.15168075, ..., -0.90774214,
           0.8975907 , -0.8819713 ],
         ...,
         [ 0.99656695,  0.9704168 , -0.37717417, ...,         nan,
                  nan,  0.6869512 ],
         [ 0.99656695,  0.9704168 , -0.37717417, ...,  0.9965712 ,
           0.6475676 ,         nan],
         [        nan,         nan,         nan, ...,  0.99826145,
           0.96057796,  0.53796583]],

        [[-0.75940365,  0.7523896 ,  0.8346017 , ...,  0.6869512 ,
           0.99656695,  0.50064075],
         [ 0.27868867,  0.97094005, -0.41611242, ..., -0.99999785,
           0.07038219,  0.5226731 ],
         [-0.9719712 ,  0.9830749 ,  0.15168075, ..., -0.90774214,
           0.8975907 , -0.8819713 ],
         ...,
         [ 0.99656695,  0.9704168 , -0.37717417, ...,         nan,
                  nan,  0.6869512 ],
         [ 0.99656695,  0.9704168 , -0.37717417, ...,  0.9965712 ,
           0.6475676 ,         nan],
         [        nan,         nan,         nan, ...,  0.99826145,
           0.96057796,  0.53796583]],

        [[-0.75940365,  0.7523896 ,  0.8346017 , ...,  0.6869512 ,
           0.99656695,  0.50064075],
         [ 0.27868867,  0.97094005, -0.41611242, ..., -0.99999785,
           0.07038219,  0.5226731 ],
         [-0.9719712 ,  0.9830749 ,  0.15168075, ..., -0.90774214,
           0.8975907 , -0.8819713 ],
         ...,
         [ 0.99656695,  0.9704168 , -0.37717417, ...,         nan,
                  nan,  0.6869512 ],
         [ 0.99656695,  0.9704168 , -0.37717417, ...,  0.9965712 ,
           0.6475676 ,         nan],
         [        nan,         nan,         nan, ...,  0.99826145,
           0.96057796,  0.53796583]],

        ...,

        [[-0.75940365,  0.7523896 ,  0.8346017 , ...,  0.6869512 ,
           0.99656695,  0.50064075],
         [ 0.27868867,  0.97094005, -0.41611242, ..., -0.99999785,
           0.07038219,  0.5226731 ],
         [-0.9719712 ,  0.9830749 ,  0.15168075, ..., -0.90774214,
           0.8975907 , -0.8819713 ],
         ...,
         [ 0.99656695,  0.9704168 , -0.37717417, ...,         nan,
                  nan,  0.6869512 ],
         [ 0.99656695,  0.9704168 , -0.37717417, ...,  0.9965712 ,
           0.6475676 ,         nan],
         [        nan,         nan,         nan, ...,  0.99826145,
           0.96057796,  0.53796583]],

        [[-0.75940365,  0.7523896 ,  0.8346017 , ...,  0.6869512 ,
           0.99656695,  0.50064075],
         [ 0.27868867,  0.97094005, -0.41611242, ..., -0.99999785,
           0.07038219,  0.5226731 ],
         [-0.9719712 ,  0.9830749 ,  0.15168075, ..., -0.90774214,
           0.8975907 , -0.8819713 ],
         ...,
         [ 0.99656695,  0.9704168 , -0.37717417, ...,         nan,
                  nan,  0.6869512 ],
         [ 0.99656695,  0.9704168 , -0.37717417, ...,  0.9965712 ,
           0.6475676 ,         nan],
         [        nan,         nan,         nan, ...,  0.99826145,
           0.96057796,  0.53796583]],

        [[-0.75940365,  0.7523896 ,  0.8346017 , ...,  0.6869512 ,
           0.99656695,  0.50064075],
         [ 0.27868867,  0.97094005, -0.41611242, ..., -0.99999785,
           0.07038219,  0.5226731 ],
         [-0.9719712 ,  0.9830749 ,  0.15168075, ..., -0.90774214,
           0.8975907 , -0.8819713 ],
         ...,
         [ 0.99656695,  0.9704168 , -0.37717417, ...,         nan,
                  nan,  0.6869512 ],
         [ 0.99656695,  0.9704168 , -0.37717417, ...,  0.9965712 ,
           0.6475676 ,         nan],
         [        nan,         nan,         nan, ...,  0.99826145,
           0.96057796,  0.53796583]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 28, 28]), 'from': [10], 'to': [11]}

generate models:382

analyse output arrays in iter:423

pre layer res:
1:conv2d
{'name': 'conv2d', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [0], 'to': [17, 18]}
tf node:
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [1], 'to': [4]}
ms node:
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [1], 'to': [4]}
torch node:
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [1], 'to': [4]}

generate models:398

analyse output arrays in iter:424

pre layer res:
5:flatten
{'name': 'flatten', 'output': array([[197.34526, 197.34526,      -inf, ...,      -inf,      -inf,
             -inf]], dtype=float32), 'output_shape': TensorShape([1, 7168]), 'from': [4], 'to': [20]}
tf node:
{'name': 'cos', 'output': array([[-0.83915067, -0.83915067,         nan, ...,         nan,
                nan,         nan]], dtype=float32), 'output_shape': TensorShape([1, 7168]), 'from': [5], 'to': [6]}
ms node:
{'name': 'cos', 'output': array([[-0.83915895, -0.83915895,         nan, ...,         nan,
                nan,         nan]], dtype=float32), 'output_shape': (1, 7168), 'from': [5], 'to': [6]}
torch node:
{'name': 'cos', 'output': array([[-0.83915067, -0.83915067,         nan, ...,         nan,
                nan,         nan]], dtype=float32), 'output_shape': torch.Size([1, 7168]), 'from': [5], 'to': [6]}

generate models:399

analyse the exceptions in iter:434

generate models:407

analyse output arrays in iter:439

pre layer res:
14:conv2d
{'name': 'conv2d', 'output': array([[[[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         ...,
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         ...,
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         ...,
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        ...,

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         ...,
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         ...,
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         ...,
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [19], 'to': [4]}
tf node:
{'name': 'log', 'output': array([[[[4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         ...,
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883]],

        [[4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         ...,
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883]],

        [[4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         ...,
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883]],

        ...,

        [[4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         ...,
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883]],

        [[4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         ...,
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883]],

        [[4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         ...,
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [14], 'to': [15]}
ms node:
{'name': 'log', 'output': array([[[[4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817],
         [4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817],
         [4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817],
         ...,
         [4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817],
         [4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817],
         [4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817]],

        [[4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817],
         [4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817],
         [4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817],
         ...,
         [4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817],
         [4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817],
         [4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817]],

        [[4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817],
         [4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817],
         [4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817],
         ...,
         [4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817],
         [4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817],
         [4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817]],

        ...,

        [[4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817],
         [4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817],
         [4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817],
         ...,
         [4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817],
         [4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817],
         [4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817]],

        [[4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817],
         [4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817],
         [4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817],
         ...,
         [4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817],
         [4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817],
         [4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817]],

        [[4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817],
         [4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817],
         [4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817],
         ...,
         [4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817],
         [4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817],
         [4.1588817, 4.1588817, 4.1588817, ..., 4.1588817, 4.1588817,
          4.1588817]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [14], 'to': [15]}
torch node:
{'name': 'log', 'output': array([[[[4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         ...,
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883]],

        [[4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         ...,
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883]],

        [[4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         ...,
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883]],

        ...,

        [[4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         ...,
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883]],

        [[4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         ...,
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883]],

        [[4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         ...,
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883],
         [4.158883, 4.158883, 4.158883, ..., 4.158883, 4.158883,
          4.158883]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [14], 'to': [15]}

generate models:412

analyse output arrays in iter:447

pre layer res:
28:reshape
{'name': 'reshape', 'output': array([[[[0.16431308, 0.16431308, 0.16431308, ..., 0.16431308,
          0.16431308, 0.16431308],
         [0.16431308, 0.16431308, 0.16431308, ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.16431308,
          0.16431308, 0.16431308],
         [0.16431308, 0.16431308, 0.16431308, ..., 0.16431308,
          0.16431308, 0.16431308]],

        [[0.16431308, 0.16431308, 0.16431308, ..., 0.16431308,
          0.16431308, 0.16431308],
         [0.16431308, 0.16431308, 0.16431308, ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.16431308,
          0.16431308, 0.16431308],
         [0.16431308, 0.16431308, 0.16431308, ..., 0.16431308,
          0.16431308, 0.16431308]],

        [[0.16431308, 0.16431308, 0.16431308, ..., 0.16431308,
          0.16431308, 0.16431308],
         [0.16431308, 0.16431308, 0.16431308, ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.16431308,
          0.16431308, 0.16431308],
         [0.16431308, 0.16431308, 0.16431308, ..., 0.16431308,
          0.16431308, 0.16431308]],

        ...,

        [[0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]]]], dtype=float32), 'output_shape': TensorShape([1, 32, 112, 112]), 'from': [27], 'to': [23]}
tf node:
{'name': 'conv2d', 'output': array([[[[ 2.6290092e+00,  2.6290092e+00,  2.6290092e+00, ...,
           2.6290095e+00,  2.6290097e+00,  2.6290107e+00],
         [ 2.6290097e+00,  2.6290092e+00,  2.6290102e+00, ...,
          -5.0700282e-07, -3.4431241e-07, -1.9824304e-06],
         [-9.5367432e-07,  9.5367432e-07,  4.7683716e-07, ...,
           1.2896085e-06,  1.1746920e-06,  9.9675333e-08],
         ...,
         [-6.1935452e-07, -1.4007092e-06, -1.5978312e-06, ...,
           1.9098300e-06,  8.7576456e-07,  6.3549987e-07],
         [ 2.3841858e-07,  1.1920929e-06,  1.5585435e-06, ...,
           2.6290092e+00,  2.6290092e+00,  2.6290090e+00],
         [ 2.6290092e+00,  2.6290092e+00,  2.6290090e+00, ...,
           2.6290092e+00,  2.6290092e+00,  2.6290090e+00]],

        [[ 2.6290092e+00,  2.6290092e+00,  2.6290092e+00, ...,
           2.6290095e+00,  2.6290097e+00,  2.6290107e+00],
         [ 2.6290097e+00,  2.6290092e+00,  2.6290102e+00, ...,
          -5.0700282e-07, -3.4431241e-07, -1.9824304e-06],
         [-9.5367432e-07,  9.5367432e-07,  4.7683716e-07, ...,
           1.2896085e-06,  1.1746920e-06,  9.9675333e-08],
         ...,
         [-6.1935452e-07, -1.4007092e-06, -1.5978312e-06, ...,
           1.9098300e-06,  8.7576456e-07,  6.3549987e-07],
         [ 2.3841858e-07,  1.1920929e-06,  1.5585435e-06, ...,
           2.6290092e+00,  2.6290092e+00,  2.6290090e+00],
         [ 2.6290092e+00,  2.6290092e+00,  2.6290090e+00, ...,
           2.6290092e+00,  2.6290092e+00,  2.6290090e+00]],

        [[ 2.6290092e+00,  2.6290092e+00,  2.6290092e+00, ...,
           2.6290095e+00,  2.6290097e+00,  2.6290107e+00],
         [ 2.6290097e+00,  2.6290092e+00,  2.6290102e+00, ...,
          -5.0700282e-07, -3.4431241e-07, -1.9824304e-06],
         [-9.5367432e-07,  9.5367432e-07,  4.7683716e-07, ...,
           1.2896085e-06,  1.1746920e-06,  9.9675333e-08],
         ...,
         [-6.1935452e-07, -1.4007092e-06, -1.5978312e-06, ...,
           1.9098300e-06,  8.7576456e-07,  6.3549987e-07],
         [ 2.3841858e-07,  1.1920929e-06,  1.5585435e-06, ...,
           2.6290092e+00,  2.6290092e+00,  2.6290090e+00],
         [ 2.6290092e+00,  2.6290092e+00,  2.6290090e+00, ...,
           2.6290092e+00,  2.6290092e+00,  2.6290090e+00]],

        ...,

        [[ 2.6290092e+00,  2.6290092e+00,  2.6290092e+00, ...,
           2.6290095e+00,  2.6290097e+00,  2.6290107e+00],
         [ 2.6290097e+00,  2.6290092e+00,  2.6290102e+00, ...,
          -5.0700282e-07, -3.4431241e-07, -1.9824304e-06],
         [-9.5367432e-07,  9.5367432e-07,  4.7683716e-07, ...,
           1.2896085e-06,  1.1746920e-06,  9.9675333e-08],
         ...,
         [-6.1935452e-07, -1.4007092e-06, -1.5978312e-06, ...,
           1.9098300e-06,  8.7576456e-07,  6.3549987e-07],
         [ 2.3841858e-07,  1.1920929e-06,  1.5585435e-06, ...,
           2.6290092e+00,  2.6290092e+00,  2.6290090e+00],
         [ 2.6290092e+00,  2.6290092e+00,  2.6290090e+00, ...,
           2.6290092e+00,  2.6290092e+00,  2.6290090e+00]],

        [[ 2.6290092e+00,  2.6290092e+00,  2.6290092e+00, ...,
           2.6290095e+00,  2.6290097e+00,  2.6290107e+00],
         [ 2.6290097e+00,  2.6290092e+00,  2.6290102e+00, ...,
          -5.0700282e-07, -3.4431241e-07, -1.9824304e-06],
         [-9.5367432e-07,  9.5367432e-07,  4.7683716e-07, ...,
           1.2896085e-06,  1.1746920e-06,  9.9675333e-08],
         ...,
         [-6.1935452e-07, -1.4007092e-06, -1.5978312e-06, ...,
           1.9098300e-06,  8.7576456e-07,  6.3549987e-07],
         [ 2.3841858e-07,  1.1920929e-06,  1.5585435e-06, ...,
           2.6290092e+00,  2.6290092e+00,  2.6290090e+00],
         [ 2.6290092e+00,  2.6290092e+00,  2.6290090e+00, ...,
           2.6290092e+00,  2.6290092e+00,  2.6290090e+00]],

        [[ 2.6290092e+00,  2.6290092e+00,  2.6290092e+00, ...,
           2.6290095e+00,  2.6290097e+00,  2.6290107e+00],
         [ 2.6290097e+00,  2.6290092e+00,  2.6290102e+00, ...,
          -5.0700282e-07, -3.4431241e-07, -1.9824304e-06],
         [-9.5367432e-07,  9.5367432e-07,  4.7683716e-07, ...,
           1.2896085e-06,  1.1746920e-06,  9.9675333e-08],
         ...,
         [-6.1935452e-07, -1.4007092e-06, -1.5978312e-06, ...,
           1.9098300e-06,  8.7576456e-07,  6.3549987e-07],
         [ 2.3841858e-07,  1.1920929e-06,  1.5585435e-06, ...,
           2.6290092e+00,  2.6290092e+00,  2.6290090e+00],
         [ 2.6290092e+00,  2.6290092e+00,  2.6290090e+00, ...,
           2.6290092e+00,  2.6290092e+00,  2.6290090e+00]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 112, 112]), 'from': [28], 'to': [29]}
ms node:
{'name': 'conv2d', 'output': array([[[[2.6290095, 2.6290095, 2.6290095, ..., 2.6290095, 2.6290095,
          2.6290095],
         [2.6290095, 2.6290095, 2.6290095, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 2.6290095, 2.6290095,
          2.6290095],
         [2.6290095, 2.6290095, 2.6290095, ..., 2.6290095, 2.6290095,
          2.6290095]],

        [[2.6290095, 2.6290095, 2.6290095, ..., 2.6290095, 2.6290095,
          2.6290095],
         [2.6290095, 2.6290095, 2.6290095, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 2.6290095, 2.6290095,
          2.6290095],
         [2.6290095, 2.6290095, 2.6290095, ..., 2.6290095, 2.6290095,
          2.6290095]],

        [[2.6290095, 2.6290095, 2.6290095, ..., 2.6290095, 2.6290095,
          2.6290095],
         [2.6290095, 2.6290095, 2.6290095, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 2.6290095, 2.6290095,
          2.6290095],
         [2.6290095, 2.6290095, 2.6290095, ..., 2.6290095, 2.6290095,
          2.6290095]],

        ...,

        [[2.6290095, 2.6290095, 2.6290095, ..., 2.6290095, 2.6290095,
          2.6290095],
         [2.6290095, 2.6290095, 2.6290095, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 2.6290095, 2.6290095,
          2.6290095],
         [2.6290095, 2.6290095, 2.6290095, ..., 2.6290095, 2.6290095,
          2.6290095]],

        [[2.6290095, 2.6290095, 2.6290095, ..., 2.6290095, 2.6290095,
          2.6290095],
         [2.6290095, 2.6290095, 2.6290095, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 2.6290095, 2.6290095,
          2.6290095],
         [2.6290095, 2.6290095, 2.6290095, ..., 2.6290095, 2.6290095,
          2.6290095]],

        [[2.6290095, 2.6290095, 2.6290095, ..., 2.6290095, 2.6290095,
          2.6290095],
         [2.6290095, 2.6290095, 2.6290095, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 2.6290095, 2.6290095,
          2.6290095],
         [2.6290095, 2.6290095, 2.6290095, ..., 2.6290095, 2.6290095,
          2.6290095]]]], dtype=float32), 'output_shape': (1, 128, 112, 112), 'from': [28], 'to': [29]}
torch node:
{'name': 'conv2d', 'output': array([[[[2.6290095, 2.6290095, 2.6290095, ..., 2.6290095, 2.6290095,
          2.6290095],
         [2.6290095, 2.6290095, 2.6290095, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 2.6290095, 2.6290095,
          2.6290095],
         [2.6290095, 2.6290095, 2.6290095, ..., 2.6290095, 2.6290095,
          2.6290095]],

        [[2.6290095, 2.6290095, 2.6290095, ..., 2.6290095, 2.6290095,
          2.6290095],
         [2.6290095, 2.6290095, 2.6290095, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 2.6290095, 2.6290095,
          2.6290095],
         [2.6290095, 2.6290095, 2.6290095, ..., 2.6290095, 2.6290095,
          2.6290095]],

        [[2.6290095, 2.6290095, 2.6290095, ..., 2.6290095, 2.6290095,
          2.6290095],
         [2.6290095, 2.6290095, 2.6290095, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 2.6290095, 2.6290095,
          2.6290095],
         [2.6290095, 2.6290095, 2.6290095, ..., 2.6290095, 2.6290095,
          2.6290095]],

        ...,

        [[2.6290095, 2.6290095, 2.6290095, ..., 2.6290095, 2.6290095,
          2.6290095],
         [2.6290095, 2.6290095, 2.6290095, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 2.6290095, 2.6290095,
          2.6290095],
         [2.6290095, 2.6290095, 2.6290095, ..., 2.6290095, 2.6290095,
          2.6290095]],

        [[2.6290095, 2.6290095, 2.6290095, ..., 2.6290095, 2.6290095,
          2.6290095],
         [2.6290095, 2.6290095, 2.6290095, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 2.6290095, 2.6290095,
          2.6290095],
         [2.6290095, 2.6290095, 2.6290095, ..., 2.6290095, 2.6290095,
          2.6290095]],

        [[2.6290095, 2.6290095, 2.6290095, ..., 2.6290095, 2.6290095,
          2.6290095],
         [2.6290095, 2.6290095, 2.6290095, ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 2.6290095, 2.6290095,
          2.6290095],
         [2.6290095, 2.6290095, 2.6290095, ..., 2.6290095, 2.6290095,
          2.6290095]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 112, 112]), 'from': [28], 'to': [29]}

generate models:419

analyse output arrays in iter:458

pre layer res:
19:exp
{'name': 'exp', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [3], 'to': [18]}
tf node:
{'name': 'cos', 'output': array([[[[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        ...,

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [19], 'to': [9]}
ms node:
{'name': 'cos', 'output': array([[[[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        ...,

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]],

        [[0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         ...,
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023],
         [0.5403023, 0.5403023, 0.5403023, ..., 0.5403023, 0.5403023,
          0.5403023]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [19], 'to': [9]}
torch node:
{'name': 'cos', 'output': array([[[[0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         ...,
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234]],

        [[0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         ...,
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234]],

        [[0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         ...,
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234]],

        ...,

        [[0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         ...,
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234]],

        [[0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         ...,
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234]],

        [[0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         ...,
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234],
         [0.54030234, 0.54030234, 0.54030234, ..., 0.54030234,
          0.54030234, 0.54030234]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [19], 'to': [9]}

generate models:430

analyse output arrays in iter:470

pre layer res:
10:add
{'name': 'add', 'output': array([[[[12665859., 12822915., 12582914., ..., 12837618., 12827986.,
          12844033.],
         [12668050., 12837618., 12840530., ..., 12842497., 12582914.,
          12834625.],
         [12659585., 12837618., 12827986., ..., 12822915., 12582914.,
          12652803.],
         ...,
         [12668050., 12837618., 12840530., ..., 12842497., 12582914.,
          12834625.],
         [12659585., 12837618., 12827986., ..., 12822915., 12582914.,
          12652803.],
         [12573313., 12842497., 12582914., ..., 12837618., 12840530.,
          12845058.]],

        [[12665859., 12822915., 12582914., ..., 12837618., 12827986.,
          12844033.],
         [12668050., 12837618., 12840530., ..., 12842497., 12582914.,
          12834625.],
         [12659585., 12837618., 12827986., ..., 12822915., 12582914.,
          12652803.],
         ...,
         [12668050., 12837618., 12840530., ..., 12842497., 12582914.,
          12834625.],
         [12659585., 12837618., 12827986., ..., 12822915., 12582914.,
          12652803.],
         [12573313., 12842497., 12582914., ..., 12837618., 12840530.,
          12845058.]],

        [[12665859., 12822915., 12582914., ..., 12837618., 12827986.,
          12844033.],
         [12668050., 12837618., 12840530., ..., 12842497., 12582914.,
          12834625.],
         [12659585., 12837618., 12827986., ..., 12822915., 12582914.,
          12652803.],
         ...,
         [12668050., 12837618., 12840530., ..., 12842497., 12582914.,
          12834625.],
         [12659585., 12837618., 12827986., ..., 12822915., 12582914.,
          12652803.],
         [12573313., 12842497., 12582914., ..., 12837618., 12840530.,
          12845058.]],

        ...,

        [[12665859., 12822915., 12582914., ..., 12837618., 12827986.,
          12844033.],
         [12668050., 12837618., 12840530., ..., 12842497., 12582914.,
          12834625.],
         [12659585., 12837618., 12827986., ..., 12822915., 12582914.,
          12652803.],
         ...,
         [12668050., 12837618., 12840530., ..., 12842497., 12582914.,
          12834625.],
         [12659585., 12837618., 12827986., ..., 12822915., 12582914.,
          12652803.],
         [12573313., 12842497., 12582914., ..., 12837618., 12840530.,
          12845058.]],

        [[12665859., 12822915., 12582914., ..., 12837618., 12827986.,
          12844033.],
         [12668050., 12837618., 12840530., ..., 12842497., 12582914.,
          12834625.],
         [12659585., 12837618., 12827986., ..., 12822915., 12582914.,
          12652803.],
         ...,
         [12668050., 12837618., 12840530., ..., 12842497., 12582914.,
          12834625.],
         [12659585., 12837618., 12827986., ..., 12822915., 12582914.,
          12652803.],
         [12573313., 12842497., 12582914., ..., 12837618., 12840530.,
          12845058.]],

        [[12665859., 12822915., 12582914., ..., 12837618., 12827986.,
          12844033.],
         [12668050., 12837618., 12840530., ..., 12842497., 12582914.,
          12834625.],
         [12659585., 12837618., 12827986., ..., 12822915., 12582914.,
          12652803.],
         ...,
         [12668050., 12837618., 12840530., ..., 12842497., 12582914.,
          12834625.],
         [12659585., 12837618., 12827986., ..., 12822915., 12582914.,
          12652803.],
         [12573313., 12842497., 12582914., ..., 12837618., 12840530.,
          12845058.]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [8, 30], 'to': [18]}
tf node:
{'name': 'cos', 'output': array([[[[ 0.9091795 , -0.35110632,  0.9710346 , ..., -0.64813554,
          -0.7367218 , -0.54210067],
         [ 0.16781327, -0.64813554,  0.43383393, ...,  0.7254876 ,
           0.9710346 ,  0.99739933],
         [-0.9820012 , -0.64813554, -0.7367218 , ..., -0.35110632,
           0.9710346 ,  0.63053405],
         ...,
         [ 0.16781327, -0.64813554,  0.43383393, ...,  0.7254876 ,
           0.9710346 ,  0.99739933],
         [-0.9820012 , -0.64813554, -0.7367218 , ..., -0.35110632,
           0.9710346 ,  0.63053405],
         [ 0.86071515,  0.7254876 ,  0.9710346 , ..., -0.64813554,
           0.43383393, -0.9876904 ]],

        [[ 0.9091795 , -0.35110632,  0.9710346 , ..., -0.64813554,
          -0.7367218 , -0.54210067],
         [ 0.16781327, -0.64813554,  0.43383393, ...,  0.7254876 ,
           0.9710346 ,  0.99739933],
         [-0.9820012 , -0.64813554, -0.7367218 , ..., -0.35110632,
           0.9710346 ,  0.63053405],
         ...,
         [ 0.16781327, -0.64813554,  0.43383393, ...,  0.7254876 ,
           0.9710346 ,  0.99739933],
         [-0.9820012 , -0.64813554, -0.7367218 , ..., -0.35110632,
           0.9710346 ,  0.63053405],
         [ 0.86071515,  0.7254876 ,  0.9710346 , ..., -0.64813554,
           0.43383393, -0.9876904 ]],

        [[ 0.9091795 , -0.35110632,  0.9710346 , ..., -0.64813554,
          -0.7367218 , -0.54210067],
         [ 0.16781327, -0.64813554,  0.43383393, ...,  0.7254876 ,
           0.9710346 ,  0.99739933],
         [-0.9820012 , -0.64813554, -0.7367218 , ..., -0.35110632,
           0.9710346 ,  0.63053405],
         ...,
         [ 0.16781327, -0.64813554,  0.43383393, ...,  0.7254876 ,
           0.9710346 ,  0.99739933],
         [-0.9820012 , -0.64813554, -0.7367218 , ..., -0.35110632,
           0.9710346 ,  0.63053405],
         [ 0.86071515,  0.7254876 ,  0.9710346 , ..., -0.64813554,
           0.43383393, -0.9876904 ]],

        ...,

        [[ 0.9091795 , -0.35110632,  0.9710346 , ..., -0.64813554,
          -0.7367218 , -0.54210067],
         [ 0.16781327, -0.64813554,  0.43383393, ...,  0.7254876 ,
           0.9710346 ,  0.99739933],
         [-0.9820012 , -0.64813554, -0.7367218 , ..., -0.35110632,
           0.9710346 ,  0.63053405],
         ...,
         [ 0.16781327, -0.64813554,  0.43383393, ...,  0.7254876 ,
           0.9710346 ,  0.99739933],
         [-0.9820012 , -0.64813554, -0.7367218 , ..., -0.35110632,
           0.9710346 ,  0.63053405],
         [ 0.86071515,  0.7254876 ,  0.9710346 , ..., -0.64813554,
           0.43383393, -0.9876904 ]],

        [[ 0.9091795 , -0.35110632,  0.9710346 , ..., -0.64813554,
          -0.7367218 , -0.54210067],
         [ 0.16781327, -0.64813554,  0.43383393, ...,  0.7254876 ,
           0.9710346 ,  0.99739933],
         [-0.9820012 , -0.64813554, -0.7367218 , ..., -0.35110632,
           0.9710346 ,  0.63053405],
         ...,
         [ 0.16781327, -0.64813554,  0.43383393, ...,  0.7254876 ,
           0.9710346 ,  0.99739933],
         [-0.9820012 , -0.64813554, -0.7367218 , ..., -0.35110632,
           0.9710346 ,  0.63053405],
         [ 0.86071515,  0.7254876 ,  0.9710346 , ..., -0.64813554,
           0.43383393, -0.9876904 ]],

        [[ 0.9091795 , -0.35110632,  0.9710346 , ..., -0.64813554,
          -0.7367218 , -0.54210067],
         [ 0.16781327, -0.64813554,  0.43383393, ...,  0.7254876 ,
           0.9710346 ,  0.99739933],
         [-0.9820012 , -0.64813554, -0.7367218 , ..., -0.35110632,
           0.9710346 ,  0.63053405],
         ...,
         [ 0.16781327, -0.64813554,  0.43383393, ...,  0.7254876 ,
           0.9710346 ,  0.99739933],
         [-0.9820012 , -0.64813554, -0.7367218 , ..., -0.35110632,
           0.9710346 ,  0.63053405],
         [ 0.86071515,  0.7254876 ,  0.9710346 , ..., -0.64813554,
           0.43383393, -0.9876904 ]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [10], 'to': [11]}
ms node:
{'name': 'cos', 'output': array([[[[ 0.9091795 , -0.3511063 ,  0.32359207, ..., -0.64813554,
           0.2502974 , -0.54210067],
         [-0.5591739 , -0.64813554,  0.43383393, ...,  0.72548753,
           0.32359207,  0.99739933],
         [-0.9820012 , -0.64813554,  0.2502974 , ..., -0.3511063 ,
           0.32359207,  0.63053405],
         ...,
         [ 0.16781327, -0.64813554,  0.43383393, ...,  0.72548753,
           0.32359207,  0.99739933],
         [-0.9820012 , -0.64813554,  0.2502974 , ..., -0.3511063 ,
           0.32359207,  0.63053405],
         [ 0.8607151 ,  0.72548753,  0.32359207, ..., -0.64813554,
           0.43383393, -0.40202728]],

        [[ 0.9091795 , -0.3511063 ,  0.32359207, ..., -0.64813554,
           0.2502974 , -0.54210067],
         [-0.5591739 , -0.64813554,  0.43383393, ...,  0.72548753,
           0.32359207,  0.99739933],
         [-0.9820012 , -0.64813554,  0.2502974 , ..., -0.3511063 ,
           0.32359207,  0.63053405],
         ...,
         [ 0.16781327, -0.64813554,  0.43383393, ...,  0.72548753,
           0.32359207,  0.99739933],
         [-0.9820012 , -0.64813554,  0.2502974 , ..., -0.3511063 ,
           0.32359207,  0.63053405],
         [ 0.8607151 ,  0.72548753,  0.32359207, ..., -0.64813554,
           0.43383393, -0.40202728]],

        [[ 0.9091795 , -0.3511063 ,  0.32359207, ..., -0.64813554,
           0.2502974 , -0.54210067],
         [-0.5591739 , -0.64813554,  0.43383393, ...,  0.72548753,
           0.32359207,  0.99739933],
         [-0.9820012 , -0.64813554,  0.2502974 , ..., -0.3511063 ,
           0.32359207,  0.63053405],
         ...,
         [ 0.16781327, -0.64813554,  0.43383393, ...,  0.72548753,
           0.32359207,  0.99739933],
         [-0.9820012 , -0.64813554,  0.2502974 , ..., -0.3511063 ,
           0.32359207,  0.63053405],
         [ 0.8607151 ,  0.72548753,  0.32359207, ..., -0.64813554,
           0.43383393, -0.40202728]],

        ...,

        [[ 0.9091795 , -0.3511063 ,  0.32359207, ..., -0.64813554,
           0.2502974 , -0.54210067],
         [-0.5591739 , -0.64813554,  0.43383393, ...,  0.72548753,
           0.32359207,  0.99739933],
         [-0.9820012 , -0.64813554,  0.2502974 , ..., -0.3511063 ,
           0.32359207,  0.63053405],
         ...,
         [ 0.16781327, -0.64813554,  0.43383393, ...,  0.72548753,
           0.32359207,  0.99739933],
         [-0.9820012 , -0.64813554,  0.2502974 , ..., -0.3511063 ,
           0.32359207,  0.63053405],
         [ 0.8607151 ,  0.72548753,  0.32359207, ..., -0.64813554,
           0.43383393, -0.40202728]],

        [[ 0.9091795 , -0.3511063 ,  0.32359207, ..., -0.64813554,
           0.2502974 , -0.54210067],
         [-0.5591739 , -0.64813554,  0.43383393, ...,  0.72548753,
           0.32359207,  0.99739933],
         [-0.9820012 , -0.64813554,  0.2502974 , ..., -0.3511063 ,
           0.32359207,  0.63053405],
         ...,
         [ 0.16781327, -0.64813554,  0.43383393, ...,  0.72548753,
           0.32359207,  0.99739933],
         [-0.9820012 , -0.64813554,  0.2502974 , ..., -0.3511063 ,
           0.32359207,  0.63053405],
         [ 0.8607151 ,  0.72548753,  0.32359207, ..., -0.64813554,
           0.43383393, -0.40202728]],

        [[ 0.9091795 , -0.3511063 ,  0.32359207, ..., -0.64813554,
           0.2502974 , -0.54210067],
         [-0.5591739 , -0.64813554,  0.43383393, ...,  0.72548753,
           0.32359207,  0.99739933],
         [-0.9820012 , -0.64813554,  0.2502974 , ..., -0.3511063 ,
           0.32359207,  0.63053405],
         ...,
         [ 0.16781327, -0.64813554,  0.43383393, ...,  0.72548753,
           0.32359207,  0.99739933],
         [-0.9820012 , -0.64813554,  0.2502974 , ..., -0.3511063 ,
           0.32359207,  0.63053405],
         [ 0.8607151 ,  0.72548753,  0.32359207, ..., -0.64813554,
           0.43383393, -0.40202728]]]], dtype=float32), 'output_shape': (1, 256, 28, 28), 'from': [10], 'to': [11]}
torch node:
{'name': 'cos', 'output': array([[[[ 0.9091795 , -0.3511063 ,  0.9710346 , ..., -0.64813554,
          -0.7367218 , -0.54210067],
         [ 0.16781327, -0.64813554,  0.43383393, ...,  0.72548753,
           0.9710346 ,  0.99739933],
         [-0.9820012 , -0.64813554, -0.7367218 , ..., -0.3511063 ,
           0.9710346 ,  0.63053405],
         ...,
         [ 0.16781327, -0.64813554,  0.43383393, ...,  0.72548753,
           0.9710346 ,  0.99739933],
         [-0.9820012 , -0.64813554, -0.7367218 , ..., -0.3511063 ,
           0.9710346 ,  0.63053405],
         [ 0.8607151 ,  0.72548753,  0.9710346 , ..., -0.64813554,
           0.43383393, -0.9876904 ]],

        [[ 0.9091795 , -0.3511063 ,  0.9710346 , ..., -0.64813554,
          -0.7367218 , -0.54210067],
         [ 0.16781327, -0.64813554,  0.43383393, ...,  0.72548753,
           0.9710346 ,  0.99739933],
         [-0.9820012 , -0.64813554, -0.7367218 , ..., -0.3511063 ,
           0.9710346 ,  0.63053405],
         ...,
         [ 0.16781327, -0.64813554,  0.43383393, ...,  0.72548753,
           0.9710346 ,  0.99739933],
         [-0.9820012 , -0.64813554, -0.7367218 , ..., -0.3511063 ,
           0.9710346 ,  0.63053405],
         [ 0.8607151 ,  0.72548753,  0.9710346 , ..., -0.64813554,
           0.43383393, -0.9876904 ]],

        [[ 0.9091795 , -0.3511063 ,  0.9710346 , ..., -0.64813554,
          -0.7367218 , -0.54210067],
         [ 0.16781327, -0.64813554,  0.43383393, ...,  0.72548753,
           0.9710346 ,  0.99739933],
         [-0.9820012 , -0.64813554, -0.7367218 , ..., -0.3511063 ,
           0.9710346 ,  0.63053405],
         ...,
         [ 0.16781327, -0.64813554,  0.43383393, ...,  0.72548753,
           0.9710346 ,  0.99739933],
         [-0.9820012 , -0.64813554, -0.7367218 , ..., -0.3511063 ,
           0.9710346 ,  0.63053405],
         [ 0.8607151 ,  0.72548753,  0.9710346 , ..., -0.64813554,
           0.43383393, -0.9876904 ]],

        ...,

        [[ 0.9091795 , -0.3511063 ,  0.9710346 , ..., -0.64813554,
          -0.7367218 , -0.54210067],
         [ 0.16781327, -0.64813554,  0.43383393, ...,  0.72548753,
           0.9710346 ,  0.99739933],
         [-0.9820012 , -0.64813554, -0.7367218 , ..., -0.3511063 ,
           0.9710346 ,  0.63053405],
         ...,
         [ 0.16781327, -0.64813554,  0.43383393, ...,  0.72548753,
           0.9710346 ,  0.99739933],
         [-0.9820012 , -0.64813554, -0.7367218 , ..., -0.3511063 ,
           0.9710346 ,  0.63053405],
         [ 0.8607151 ,  0.72548753,  0.9710346 , ..., -0.64813554,
           0.43383393, -0.9876904 ]],

        [[ 0.9091795 , -0.3511063 ,  0.9710346 , ..., -0.64813554,
          -0.7367218 , -0.54210067],
         [ 0.16781327, -0.64813554,  0.43383393, ...,  0.72548753,
           0.9710346 ,  0.99739933],
         [-0.9820012 , -0.64813554, -0.7367218 , ..., -0.3511063 ,
           0.9710346 ,  0.63053405],
         ...,
         [ 0.16781327, -0.64813554,  0.43383393, ...,  0.72548753,
           0.9710346 ,  0.99739933],
         [-0.9820012 , -0.64813554, -0.7367218 , ..., -0.3511063 ,
           0.9710346 ,  0.63053405],
         [ 0.8607151 ,  0.72548753,  0.9710346 , ..., -0.64813554,
           0.43383393, -0.9876904 ]],

        [[ 0.9091795 , -0.3511063 ,  0.9710346 , ..., -0.64813554,
          -0.7367218 , -0.54210067],
         [ 0.16781327, -0.64813554,  0.43383393, ...,  0.72548753,
           0.9710346 ,  0.99739933],
         [-0.9820012 , -0.64813554, -0.7367218 , ..., -0.3511063 ,
           0.9710346 ,  0.63053405],
         ...,
         [ 0.16781327, -0.64813554,  0.43383393, ...,  0.72548753,
           0.9710346 ,  0.99739933],
         [-0.9820012 , -0.64813554, -0.7367218 , ..., -0.3511063 ,
           0.9710346 ,  0.63053405],
         [ 0.8607151 ,  0.72548753,  0.9710346 , ..., -0.64813554,
           0.43383393, -0.9876904 ]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 28, 28]), 'from': [10], 'to': [11]}

pre layer res:
2:relu
{'name': 'relu', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [1], 'to': [19]}
tf node:
{'name': 'log', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [2], 'to': [27]}
ms node:
{'name': 'log', 'output': array([[[[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        ...,

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]]]],
      dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [2], 'to': [27]}
torch node:
{'name': 'log', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [2], 'to': [27]}

generate models:439

analyse output arrays in iter:475

pre layer res:
1:conv2d
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [19], 'to': [14, 15]}
tf node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [1], 'to': [2]}
ms node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [1], 'to': [2]}
torch node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [1], 'to': [2]}

generate models:444

analyse output arrays in iter:480

pre layer res:
6:conv2d
{'name': 'conv2d', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [20], 'to': [16, 21]}
tf node:
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [6], 'to': [7]}
ms node:
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [6], 'to': [7]}
torch node:
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [6], 'to': [7]}

generate models:449

final statics:
total operators:28
tensorflow --> nums:35,distinct_bugs:6
mindspore --> nums:35,distinct_bugs:5
torch --> nums:26,distinct_bugs:6
tensorflow --> 
conv2d:10
log:3
sin:10
cos:9
add:1
softmax:2
mindspore --> 
log:6
sin:14
cos:12
add:1
softmax:2
torch --> 
log:3
flatten:1
sin:10
cos:9
add:1
softmax:2

generate models:468
