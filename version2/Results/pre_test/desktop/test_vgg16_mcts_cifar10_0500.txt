
analyse output arrays in iter:4

pre layer res:
6:add
{'name': 'add', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [1, 8], 'to': [2]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [6], 'to': [3]}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [6], 'to': [3]}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [6], 'to': [3]}

generate models:5

final statics:
total operators:28
tensorflow --> nums:1,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:1
mindspore --> 
torch --> 

generate models:10

analyse output arrays in iter:10

pre layer res:
12:add
{'name': 'add', 'output': array([[[[10086.582 , 10093.191 , 10093.383 , ..., 10353.97  ,
          10354.094 , 10353.795 ],
         [10096.884 , 10096.498 , 10096.627 , ..., 10475.322 ,
          10472.249 , 10460.144 ],
         [10092.786 , 10097.237 , 10097.434 , ..., 10484.766 ,
          10484.771 , 10484.573 ],
         ...,
         [10100.747 , 10101.038 , 10101.1045, ..., 10224.496 ,
          10096.627 , 10091.542 ],
         [10095.123 , 10099.069 , 10099.392 , ..., 10356.968 ,
          10100.575 , 10100.64  ],
         [10100.96  , 10101.239 , 10101.237 , ..., 10353.013 ,
          10097.036 , 10092.207 ]],

        [[10095.511 , 10099.201 , 10099.468 , ..., 10357.33  ,
          10357.108 , 10357.164 ],
         [10101.36  , 10101.36  , 10101.256 , ..., 10481.429 ,
          10481.396 , 10476.593 ],
         [10096.    , 10099.36  , 10099.276 , ..., 10485.425 ,
          10485.234 , 10485.326 ],
         ...,
         [10100.734 , 10100.962 , 10100.837 , ..., 10225.185 ,
          10097.005 , 10092.697 ],
         [10094.4375, 10098.588 , 10098.868 , ..., 10356.541 ,
          10099.245 , 10099.3955],
         [10100.28  , 10100.546 , 10100.672 , ..., 10352.98  ,
          10096.59  , 10091.934 ]],

        [[10095.141 , 10098.868 , 10098.846 , ..., 10356.847 ,
          10355.556 , 10355.049 ],
         [10099.729 , 10099.959 , 10100.352 , ..., 10480.808 ,
          10480.348 , 10475.449 ],
         [10096.006 , 10099.293 , 10098.999 , ..., 10485.202 ,
          10483.984 , 10482.776 ],
         ...,
         [10099.534 , 10099.3955, 10099.199 , ..., 10226.182 ,
          10096.9375, 10090.762 ],
         [10096.302 , 10099.788 , 10099.957 , ..., 10357.6   ,
          10101.234 , 10100.94  ],
         [10100.15  , 10099.667 , 10099.344 , ..., 10354.476 ,
          10097.2   , 10090.996 ]],

        ...,

        [[10095.511 , 10099.201 , 10099.468 , ..., 10357.33  ,
          10357.108 , 10357.164 ],
         [10101.36  , 10101.36  , 10101.256 , ..., 10481.429 ,
          10481.396 , 10476.593 ],
         [10096.    , 10099.36  , 10099.276 , ..., 10485.425 ,
          10485.234 , 10485.326 ],
         ...,
         [10100.734 , 10100.962 , 10100.837 , ..., 10225.185 ,
          10097.005 , 10092.697 ],
         [10094.4375, 10098.588 , 10098.868 , ..., 10356.541 ,
          10099.245 , 10099.3955],
         [10100.28  , 10100.546 , 10100.672 , ..., 10352.98  ,
          10096.59  , 10091.934 ]],

        [[10095.141 , 10098.868 , 10098.846 , ..., 10356.847 ,
          10355.556 , 10355.049 ],
         [10099.729 , 10099.959 , 10100.352 , ..., 10480.808 ,
          10480.348 , 10475.449 ],
         [10096.006 , 10099.293 , 10098.999 , ..., 10485.202 ,
          10483.984 , 10482.776 ],
         ...,
         [10099.534 , 10099.3955, 10099.199 , ..., 10226.182 ,
          10096.9375, 10090.762 ],
         [10096.302 , 10099.788 , 10099.957 , ..., 10357.6   ,
          10101.234 , 10100.94  ],
         [10100.15  , 10099.667 , 10099.344 , ..., 10354.476 ,
          10097.2   , 10090.996 ]],

        [[10096.354 , 10099.865 , 10100.155 , ..., 10357.729 ,
          10357.529 , 10357.425 ],
         [10100.815 , 10100.258 , 10099.984 , ..., 10482.678 ,
          10481.281 , 10475.417 ],
         [10096.518 , 10099.931 , 10100.159 , ..., 10485.814 ,
          10485.747 , 10485.63  ],
         ...,
         [10101.064 , 10100.906 , 10100.77  , ..., 10226.099 ,
          10097.111 , 10092.234 ],
         [10092.724 , 10097.373 , 10097.309 , ..., 10354.771 ,
          10098.61  , 10098.674 ],
         [10098.286 , 10098.    , 10097.894 , ..., 10350.527 ,
          10093.182 , 10086.222 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [8, 20], 'to': [11]}
tf node:
{'name': 'sin', 'output': array([[[[ 0.87814915,  0.6785521 ,  0.5264192 , ..., -0.6591288 ,
          -0.5610356 , -0.7798739 ],
         [-0.19376612, -0.54864424, -0.43661758, ...,  0.9497257 ,
          -0.96889085, -0.9778608 ],
         [ 0.9131977 ,  0.15785304,  0.3474076 , ..., -0.95537895,
          -0.9570933 , -0.88127685],
         ...,
         [-0.5026738 , -0.729578  , -0.7733516 , ...,  0.98333806,
          -0.43661758,  0.6789921 ],
         [-0.92681897,  0.9131905 ,  0.7371073 , ...,  0.75993   ,
          -0.34741598, -0.40709117],
         [-0.67397743, -0.8515195 , -0.8504938 , ..., -0.9943984 ,
          -0.04264289,  0.9873277 ]],

        [[-0.99999624,  0.851694  ,  0.68354464, ...,  0.48021582,
           0.6613225 ,  0.61856604],
         [-0.9086211 , -0.9086211 , -0.86010635, ...,  0.87988424,
           0.8641164 ,  0.5799981 ],
         [-0.8813862 ,  0.757862  ,  0.80991906, ..., -0.936135  ,
          -0.98577136, -0.9662122 ],
         ...,
         [-0.4916588 , -0.67541903, -0.57820976, ...,  0.6438483 ,
          -0.07383856,  0.9457614 ],
         [-0.47969234,  0.9980975 ,  0.97620654, ...,  0.9608249 ,
           0.8278501 ,  0.73446196],
         [-0.05985635, -0.31979883, -0.43631005, ..., -0.9904764 ,
          -0.46969467,  0.9077925 ]],

        [[-0.9332761 ,  0.97620654,  0.9808304 , ...,  0.83288443,
           0.7619235 ,  0.35175186],
         [ 0.4722712 ,  0.25843027, -0.1308053 , ...,  0.43903542,
          -0.0054361 ,  0.9817228 ],
         [-0.87860316,  0.8000704 ,  0.9395651 , ..., -0.99067557,
          -0.47035232,  0.65811914],
         ...,
         [ 0.63360316,  0.73446196,  0.8527159 , ..., -0.29318178,
          -0.14081903, -0.0338781 ],
         [-0.7011655 ,  0.4189561 ,  0.26031655, ...,  0.22931075,
          -0.8489492 , -0.659421  ],
         [ 0.06993353,  0.52557355,  0.7685881 , ..., -0.21217519,
           0.12110864,  0.19914995]],

        ...,

        [[-0.99999624,  0.851694  ,  0.68354464, ...,  0.48021582,
           0.6613225 ,  0.61856604],
         [-0.9086211 , -0.9086211 , -0.86010635, ...,  0.87988424,
           0.8641164 ,  0.5799981 ],
         [-0.8813862 ,  0.757862  ,  0.80991906, ..., -0.936135  ,
          -0.98577136, -0.9662122 ],
         ...,
         [-0.4916588 , -0.67541903, -0.57820976, ...,  0.6438483 ,
          -0.07383856,  0.9457614 ],
         [-0.47969234,  0.9980975 ,  0.97620654, ...,  0.9608249 ,
           0.8278501 ,  0.73446196],
         [-0.05985635, -0.31979883, -0.43631005, ..., -0.9904764 ,
          -0.46969467,  0.9077925 ]],

        [[-0.9332761 ,  0.97620654,  0.9808304 , ...,  0.83288443,
           0.7619235 ,  0.35175186],
         [ 0.4722712 ,  0.25843027, -0.1308053 , ...,  0.43903542,
          -0.0054361 ,  0.9817228 ],
         [-0.87860316,  0.8000704 ,  0.9395651 , ..., -0.99067557,
          -0.47035232,  0.65811914],
         ...,
         [ 0.63360316,  0.73446196,  0.8527159 , ..., -0.29318178,
          -0.14081903, -0.0338781 ],
         [-0.7011655 ,  0.4189561 ,  0.26031655, ...,  0.22931075,
          -0.8489492 , -0.659421  ],
         [ 0.06993353,  0.52557355,  0.7685881 , ..., -0.21217519,
           0.12110864,  0.19914995]],

        [[-0.6633398 ,  0.3477281 ,  0.06506186, ...,  0.10228407,
           0.29712668,  0.3950977 ],
         [-0.56054884, -0.03742247,  0.2338215 , ...,  0.72906214,
           0.80051714,  0.97508085],
         [-0.5322114 ,  0.28568125,  0.0611634 , ..., -0.7323894 ,
          -0.77657264, -0.84490895],
         ...,
         [-0.74735475, -0.6333455 , -0.52196234, ..., -0.21290326,
           0.03253375,  0.9912974 ],
         [ 0.93686795,  0.29003006,  0.22778776, ...,  0.08200595,
           0.99923044,  0.99970615],
         [ 0.93467516,  0.7963349 ,  0.7275651 , ...,  0.8523434 ,
           0.685693  ,  0.990429  ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [12], 'to': [9]}
ms node:
{'name': 'sin', 'output': array([[[[ 0.87814915,  0.67855215,  0.5264192 , ..., -0.6591288 ,
          -0.56184363, -0.7804848 ],
         [-0.19376612, -0.54864424, -0.43661758, ...,  0.9497257 ,
          -0.96889085, -0.9778608 ],
         [ 0.9131977 ,  0.15785304,  0.3474076 , ..., -0.95537895,
          -0.9570933 , -0.88127685],
         ...,
         [-0.50267386, -0.72957796, -0.7733516 , ...,  0.98333806,
          -0.43661758,  0.6789921 ],
         [-0.9249743 ,  0.9131905 ,  0.7371073 , ...,  0.75993   ,
          -0.34741598, -0.40709117],
         [-0.67397743, -0.85151947, -0.8504938 , ..., -0.9943984 ,
          -0.04264289,  0.9873277 ]],

        [[-0.99999624,  0.851694  ,  0.6835446 , ...,  0.4819281 ,
           0.6613225 ,  0.61856604],
         [-0.9086211 , -0.90780365, -0.86010635, ...,  0.87988424,
           0.8641164 ,  0.579998  ],
         [-0.8983057 ,  0.757862  ,  0.80991906, ..., -0.936135  ,
          -0.98577136, -0.9662122 ],
         ...,
         [-0.49165884, -0.67541903, -0.57820976, ...,  0.6438483 ,
          -0.07383856,  0.9460782 ],
         [-0.47797766,  0.9980975 ,  0.97620654, ...,  0.9608249 ,
           0.82785004,  0.7344619 ],
         [-0.05985635, -0.31979883, -0.43631005, ..., -0.9904764 ,
          -0.46969467,  0.90779245]],

        [[-0.9332761 ,  0.97620654,  0.98738474, ...,  0.8339638 ,
           0.7619235 ,  0.35175183],
         [ 0.50464875,  0.26031655, -0.1308053 , ...,  0.43903542,
          -0.0054361 ,  0.9817228 ],
         [-0.87860316,  0.8000704 ,  0.9395651 , ..., -0.9908081 ,
          -0.47035232,  0.6581191 ],
         ...,
         [ 0.6336031 ,  0.7344619 ,  0.8527159 , ..., -0.2931818 ,
          -0.14081903, -0.0338781 ],
         [-0.7011655 ,  0.4224998 ,  0.26031655, ...,  0.22931075,
          -0.8489492 , -0.659421  ],
         [ 0.06993353,  0.5255735 ,  0.7685881 , ..., -0.21217519,
           0.12110864,  0.19914995]],

        ...,

        [[-0.9998901 ,  0.84287715,  0.6821177 , ...,  0.4819281 ,
           0.6693419 ,  0.605437  ],
         [-0.9154287 , -0.91503525, -0.86553633, ...,  0.88493794,
           0.8601581 ,  0.58079326],
         [-0.88999915,  0.76167166,  0.80531204, ..., -0.93682   ,
          -0.98544115, -0.96646345],
         ...,
         [-0.48654816, -0.68401426, -0.57820976, ...,  0.6520304 ,
          -0.07968064,  0.9457614 ],
         [-0.46851462,  0.99844164,  0.9774603 , ...,  0.9610951 ,
           0.83382803,  0.7237688 ],
         [-0.0773928 , -0.31979883, -0.45031554, ..., -0.9880543 ,
          -0.48343098,  0.9122455 ]],

        [[-0.9311557 ,  0.9778708 ,  0.9846201 , ...,  0.8301721 ,
           0.7568404 ,  0.34167606],
         [ 0.48854408,  0.25843027, -0.1317734 , ...,  0.4320028 ,
           0.00530604,  0.9849163 ],
         [-0.8836823 ,  0.79358006,  0.9354885 , ..., -0.9930328 ,
          -0.48408306,  0.6581191 ],
         ...,
         [ 0.6456137 ,  0.7237688 ,  0.84445   , ..., -0.28570372,
          -0.12823921, -0.01923496],
         [-0.70878404,  0.4118496 ,  0.26031655, ...,  0.24164897,
          -0.84997976, -0.6601549 ],
         [ 0.06993353,  0.51974565,  0.7754159 , ..., -0.21980326,
           0.11335003,  0.1809337 ]],

        [[-0.6515668 ,  0.34039262,  0.06408734, ...,  0.0964537 ,
           0.29712668,  0.39689115],
         [-0.55162084, -0.04522828,  0.2186017 , ...,  0.7290621 ,
           0.79343915,  0.97508085],
         [-0.53303796,  0.29689175,  0.05336374, ..., -0.7370267 ,
          -0.7697601 , -0.8412326 ],
         ...,
         [-0.7525227 , -0.6204114 , -0.53522575, ..., -0.2186246 ,
           0.03253375,  0.9932332 ],
         [ 0.9316453 ,  0.27410284,  0.2296891 , ...,  0.07616494,
           0.99972135,  0.999831  ],
         [ 0.93467516,  0.80045104,  0.7275651 , ...,  0.86239463,
           0.6864035 ,  0.99069667]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [12], 'to': [9]}
torch node:
{'name': 'sin', 'output': array([[[[ 0.87814915,  0.67855215,  0.5264192 , ..., -0.6591288 ,
          -0.56184363, -0.7804848 ],
         [-0.19376612, -0.54864424, -0.43661758, ...,  0.9497257 ,
          -0.96889085, -0.9778608 ],
         [ 0.9131977 ,  0.15785304,  0.3474076 , ..., -0.95537895,
          -0.9570933 , -0.88127685],
         ...,
         [-0.50267386, -0.72957796, -0.7733516 , ...,  0.98333806,
          -0.43661758,  0.6789921 ],
         [-0.9249743 ,  0.9131905 ,  0.7371073 , ...,  0.75993   ,
          -0.34741598, -0.40709117],
         [-0.67397743, -0.8515195 , -0.8504938 , ..., -0.9943984 ,
          -0.04264289,  0.9873277 ]],

        [[-0.99999624,  0.851694  ,  0.6835446 , ...,  0.4819281 ,
           0.6613225 ,  0.61856604],
         [-0.9086211 , -0.90780365, -0.86010635, ...,  0.87988424,
           0.8641164 ,  0.579998  ],
         [-0.8983057 ,  0.757862  ,  0.80991906, ..., -0.936135  ,
          -0.98577136, -0.9662122 ],
         ...,
         [-0.49165884, -0.67541903, -0.57820976, ...,  0.6438483 ,
          -0.07383856,  0.9460782 ],
         [-0.47797766,  0.99809754,  0.97620654, ...,  0.9608249 ,
           0.82785004,  0.7344619 ],
         [-0.05985635, -0.31979883, -0.43631005, ..., -0.9904764 ,
          -0.46969467,  0.90779245]],

        [[-0.9332761 ,  0.97620654,  0.98738474, ...,  0.8339638 ,
           0.7619235 ,  0.35175183],
         [ 0.50464875,  0.26031655, -0.1308053 , ...,  0.43903542,
          -0.0054361 ,  0.9817228 ],
         [-0.87860316,  0.8000704 ,  0.9395651 , ..., -0.9908082 ,
          -0.47035232,  0.6581191 ],
         ...,
         [ 0.6336031 ,  0.7344619 ,  0.8527159 , ..., -0.2931818 ,
          -0.14081903, -0.0338781 ],
         [-0.7011655 ,  0.4224998 ,  0.26031655, ...,  0.22931075,
          -0.8489492 , -0.659421  ],
         [ 0.06993353,  0.5255735 ,  0.7685881 , ..., -0.21217519,
           0.12110864,  0.19914995]],

        ...,

        [[-0.99999624,  0.851694  ,  0.6835446 , ...,  0.4819281 ,
           0.6613225 ,  0.61856604],
         [-0.9086211 , -0.90780365, -0.86010635, ...,  0.87988424,
           0.8641164 ,  0.579998  ],
         [-0.8983057 ,  0.757862  ,  0.80991906, ..., -0.936135  ,
          -0.98577136, -0.9662122 ],
         ...,
         [-0.49165884, -0.67541903, -0.57820976, ...,  0.6438483 ,
          -0.07383856,  0.9460782 ],
         [-0.47797766,  0.99809754,  0.97620654, ...,  0.9608249 ,
           0.82785004,  0.7344619 ],
         [-0.05985635, -0.31979883, -0.43631005, ..., -0.9904764 ,
          -0.46969467,  0.90779245]],

        [[-0.9332761 ,  0.97620654,  0.98738474, ...,  0.8339638 ,
           0.7619235 ,  0.35175183],
         [ 0.50464875,  0.26031655, -0.1308053 , ...,  0.43903542,
          -0.0054361 ,  0.9817228 ],
         [-0.87860316,  0.8000704 ,  0.9395651 , ..., -0.9908082 ,
          -0.47035232,  0.6581191 ],
         ...,
         [ 0.6336031 ,  0.7344619 ,  0.8527159 , ..., -0.2931818 ,
          -0.14081903, -0.0338781 ],
         [-0.7011655 ,  0.4224998 ,  0.26031655, ...,  0.22931075,
          -0.8489492 , -0.659421  ],
         [ 0.06993353,  0.5255735 ,  0.7685881 , ..., -0.21217519,
           0.12110864,  0.19914995]],

        [[-0.6633398 ,  0.3477281 ,  0.06506187, ...,  0.10228407,
           0.29899102,  0.3950977 ],
         [-0.56054884, -0.03742247,  0.2338215 , ...,  0.7290621 ,
           0.80051714,  0.97508085],
         [-0.5322114 ,  0.28568125,  0.0611634 , ..., -0.7323894 ,
          -0.7765726 , -0.8449089 ],
         ...,
         [-0.7441016 , -0.63334554, -0.52196234, ..., -0.21290325,
           0.03253375,  0.9910384 ],
         [ 0.93686795,  0.29003006,  0.22778776, ...,  0.08200595,
           0.99923044,  0.99970615],
         [ 0.93467516,  0.7963349 ,  0.7275651 , ...,  0.87067974,
           0.685693  ,  0.99069667]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [12], 'to': [9]}

generate models:11

analyse output arrays in iter:14

pre layer res:
7:conv2d
{'name': 'conv2d', 'output': array([[[[8.2596332e+09, 1.2286689e+10, 1.1599348e+10, ...,
          1.3715898e+10, 1.2928942e+10, 8.3078676e+09],
         [1.2376343e+10, 1.7729847e+10, 1.5519449e+10, ...,
          1.8781569e+10, 1.7882939e+10, 1.1580998e+10],
         [1.1270619e+10, 1.5623258e+10, 1.2969312e+10, ...,
          1.8949333e+10, 1.8330673e+10, 1.1982594e+10],
         ...,
         [1.0561782e+10, 1.5111029e+10, 1.2893290e+10, ...,
          1.5372648e+10, 1.5415640e+10, 1.0477371e+10],
         [1.2448678e+10, 1.8300781e+10, 1.7132700e+10, ...,
          1.5307112e+10, 1.5991308e+10, 1.1236016e+10],
         [8.9238897e+09, 1.3389775e+10, 1.3197394e+10, ...,
          9.3391421e+09, 1.0142876e+10, 7.3646735e+09]],

        [[8.2596332e+09, 1.2286689e+10, 1.1599348e+10, ...,
          1.3715898e+10, 1.2928942e+10, 8.3078676e+09],
         [1.2376343e+10, 1.7729847e+10, 1.5519449e+10, ...,
          1.8781569e+10, 1.7882939e+10, 1.1580998e+10],
         [1.1270619e+10, 1.5623258e+10, 1.2969312e+10, ...,
          1.8949333e+10, 1.8330673e+10, 1.1982594e+10],
         ...,
         [1.0561782e+10, 1.5111029e+10, 1.2893290e+10, ...,
          1.5372648e+10, 1.5415640e+10, 1.0477371e+10],
         [1.2448678e+10, 1.8300781e+10, 1.7132700e+10, ...,
          1.5307112e+10, 1.5991308e+10, 1.1236016e+10],
         [8.9238897e+09, 1.3389775e+10, 1.3197394e+10, ...,
          9.3391421e+09, 1.0142876e+10, 7.3646735e+09]],

        [[8.2596332e+09, 1.2286689e+10, 1.1599348e+10, ...,
          1.3715898e+10, 1.2928942e+10, 8.3078676e+09],
         [1.2376343e+10, 1.7729847e+10, 1.5519449e+10, ...,
          1.8781569e+10, 1.7882939e+10, 1.1580998e+10],
         [1.1270619e+10, 1.5623258e+10, 1.2969312e+10, ...,
          1.8949333e+10, 1.8330673e+10, 1.1982594e+10],
         ...,
         [1.0561782e+10, 1.5111029e+10, 1.2893290e+10, ...,
          1.5372648e+10, 1.5415640e+10, 1.0477371e+10],
         [1.2448678e+10, 1.8300781e+10, 1.7132700e+10, ...,
          1.5307112e+10, 1.5991308e+10, 1.1236016e+10],
         [8.9238897e+09, 1.3389775e+10, 1.3197394e+10, ...,
          9.3391421e+09, 1.0142876e+10, 7.3646735e+09]],

        ...,

        [[8.2596332e+09, 1.2286689e+10, 1.1599348e+10, ...,
          1.3715898e+10, 1.2928942e+10, 8.3078676e+09],
         [1.2376343e+10, 1.7729847e+10, 1.5519449e+10, ...,
          1.8781569e+10, 1.7882939e+10, 1.1580998e+10],
         [1.1270619e+10, 1.5623258e+10, 1.2969312e+10, ...,
          1.8949333e+10, 1.8330673e+10, 1.1982594e+10],
         ...,
         [1.0561782e+10, 1.5111029e+10, 1.2893290e+10, ...,
          1.5372648e+10, 1.5415640e+10, 1.0477371e+10],
         [1.2448678e+10, 1.8300781e+10, 1.7132700e+10, ...,
          1.5307112e+10, 1.5991308e+10, 1.1236016e+10],
         [8.9238897e+09, 1.3389775e+10, 1.3197394e+10, ...,
          9.3391421e+09, 1.0142876e+10, 7.3646735e+09]],

        [[8.2596332e+09, 1.2286689e+10, 1.1599348e+10, ...,
          1.3715898e+10, 1.2928942e+10, 8.3078676e+09],
         [1.2376343e+10, 1.7729847e+10, 1.5519449e+10, ...,
          1.8781569e+10, 1.7882939e+10, 1.1580998e+10],
         [1.1270619e+10, 1.5623258e+10, 1.2969312e+10, ...,
          1.8949333e+10, 1.8330673e+10, 1.1982594e+10],
         ...,
         [1.0561782e+10, 1.5111029e+10, 1.2893290e+10, ...,
          1.5372648e+10, 1.5415640e+10, 1.0477371e+10],
         [1.2448678e+10, 1.8300781e+10, 1.7132700e+10, ...,
          1.5307112e+10, 1.5991308e+10, 1.1236016e+10],
         [8.9238897e+09, 1.3389775e+10, 1.3197394e+10, ...,
          9.3391421e+09, 1.0142876e+10, 7.3646735e+09]],

        [[8.2596332e+09, 1.2286689e+10, 1.1599348e+10, ...,
          1.3715898e+10, 1.2928942e+10, 8.3078676e+09],
         [1.2376343e+10, 1.7729847e+10, 1.5519449e+10, ...,
          1.8781569e+10, 1.7882939e+10, 1.1580998e+10],
         [1.1270619e+10, 1.5623258e+10, 1.2969312e+10, ...,
          1.8949333e+10, 1.8330673e+10, 1.1982594e+10],
         ...,
         [1.0561782e+10, 1.5111029e+10, 1.2893290e+10, ...,
          1.5372648e+10, 1.5415640e+10, 1.0477371e+10],
         [1.2448678e+10, 1.8300781e+10, 1.7132700e+10, ...,
          1.5307112e+10, 1.5991308e+10, 1.1236016e+10],
         [8.9238897e+09, 1.3389775e+10, 1.3197394e+10, ...,
          9.3391421e+09, 1.0142876e+10, 7.3646735e+09]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [6], 'to': [17]}
tf node:
{'name': 'cos', 'output': array([[[[-0.10343756,  0.60692966,  0.9991747 , ...,  0.22879878,
           0.9927404 , -0.11011931],
         [-0.12755175, -0.884864  , -0.8708238 , ...,  0.36096185,
           0.00268055,  0.9092327 ],
         [ 0.3059883 , -0.1542486 ,  0.9608166 , ...,  0.9835983 ,
          -0.55003965,  0.32524726],
         ...,
         [ 0.9713609 , -0.97152   ,  0.5455785 , ...,  0.8547773 ,
           0.7662437 , -0.6058718 ],
         [ 0.50349194,  0.99390197, -0.9971472 , ..., -0.9234396 ,
          -0.96604353, -0.90869004],
         [-0.6740668 ,  0.9445103 , -0.30258918, ..., -0.96106374,
          -0.9592155 , -0.9969333 ]],

        [[-0.10343756,  0.60692966,  0.9991747 , ...,  0.22879878,
           0.9927404 , -0.11011931],
         [-0.12755175, -0.884864  , -0.8708238 , ...,  0.36096185,
           0.00268055,  0.9092327 ],
         [ 0.3059883 , -0.1542486 ,  0.9608166 , ...,  0.9835983 ,
          -0.55003965,  0.32524726],
         ...,
         [ 0.9713609 , -0.97152   ,  0.5455785 , ...,  0.8547773 ,
           0.7662437 , -0.6058718 ],
         [ 0.50349194,  0.99390197, -0.9971472 , ..., -0.9234396 ,
          -0.96604353, -0.90869004],
         [-0.6740668 ,  0.9445103 , -0.30258918, ..., -0.96106374,
          -0.9592155 , -0.9969333 ]],

        [[-0.10343756,  0.60692966,  0.9991747 , ...,  0.22879878,
           0.9927404 , -0.11011931],
         [-0.12755175, -0.884864  , -0.8708238 , ...,  0.36096185,
           0.00268055,  0.9092327 ],
         [ 0.3059883 , -0.1542486 ,  0.9608166 , ...,  0.9835983 ,
          -0.55003965,  0.32524726],
         ...,
         [ 0.9713609 , -0.97152   ,  0.5455785 , ...,  0.8547773 ,
           0.7662437 , -0.6058718 ],
         [ 0.50349194,  0.99390197, -0.9971472 , ..., -0.9234396 ,
          -0.96604353, -0.90869004],
         [-0.6740668 ,  0.9445103 , -0.30258918, ..., -0.96106374,
          -0.9592155 , -0.9969333 ]],

        ...,

        [[-0.10343756,  0.60692966,  0.9991747 , ...,  0.22879878,
           0.9927404 , -0.11011931],
         [-0.12755175, -0.884864  , -0.8708238 , ...,  0.36096185,
           0.00268055,  0.9092327 ],
         [ 0.3059883 , -0.1542486 ,  0.9608166 , ...,  0.9835983 ,
          -0.55003965,  0.32524726],
         ...,
         [ 0.9713609 , -0.97152   ,  0.5455785 , ...,  0.8547773 ,
           0.7662437 , -0.6058718 ],
         [ 0.50349194,  0.99390197, -0.9971472 , ..., -0.9234396 ,
          -0.96604353, -0.90869004],
         [-0.6740668 ,  0.9445103 , -0.30258918, ..., -0.96106374,
          -0.9592155 , -0.9969333 ]],

        [[-0.10343756,  0.60692966,  0.9991747 , ...,  0.22879878,
           0.9927404 , -0.11011931],
         [-0.12755175, -0.884864  , -0.8708238 , ...,  0.36096185,
           0.00268055,  0.9092327 ],
         [ 0.3059883 , -0.1542486 ,  0.9608166 , ...,  0.9835983 ,
          -0.55003965,  0.32524726],
         ...,
         [ 0.9713609 , -0.97152   ,  0.5455785 , ...,  0.8547773 ,
           0.7662437 , -0.6058718 ],
         [ 0.50349194,  0.99390197, -0.9971472 , ..., -0.9234396 ,
          -0.96604353, -0.90869004],
         [-0.6740668 ,  0.9445103 , -0.30258918, ..., -0.96106374,
          -0.9592155 , -0.9969333 ]],

        [[-0.10343756,  0.60692966,  0.9991747 , ...,  0.22879878,
           0.9927404 , -0.11011931],
         [-0.12755175, -0.884864  , -0.8708238 , ...,  0.36096185,
           0.00268055,  0.9092327 ],
         [ 0.3059883 , -0.1542486 ,  0.9608166 , ...,  0.9835983 ,
          -0.55003965,  0.32524726],
         ...,
         [ 0.9713609 , -0.97152   ,  0.5455785 , ...,  0.8547773 ,
           0.7662437 , -0.6058718 ],
         [ 0.50349194,  0.99390197, -0.9971472 , ..., -0.9234396 ,
          -0.96604353, -0.90869004],
         [-0.6740668 ,  0.9445103 , -0.30258918, ..., -0.96106374,
          -0.9592155 , -0.9969333 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [7], 'to': [20]}
ms node:
{'name': 'cos', 'output': array([[[[-0.10343756,  0.60692966,  0.9991747 , ...,  0.22879876,
           0.9927404 , -0.11011931],
         [-0.12755175, -0.884864  , -0.8708238 , ...,  0.36096185,
           0.00268055,  0.9092327 ],
         [ 0.30598828, -0.1542486 ,  0.9608166 , ...,  0.11553163,
           0.63748443, -0.8089521 ],
         ...,
         [ 0.9713609 , -0.97152   ,  0.5455785 , ...,  0.8547773 ,
           0.7662437 , -0.6058718 ],
         [-0.9009471 , -0.7617388 ,  0.7839053 , ..., -0.9234396 ,
          -0.96604353, -0.90869004],
         [ 0.14487743, -0.96648866, -0.28298366, ..., -0.96106374,
          -0.9592155 , -0.9969333 ]],

        [[-0.10343756,  0.60692966,  0.9991747 , ...,  0.22879876,
           0.9927404 , -0.11011931],
         [-0.12755175, -0.884864  , -0.8708238 , ...,  0.36096185,
           0.00268055,  0.9092327 ],
         [ 0.30598828, -0.1542486 ,  0.9608166 , ...,  0.11553163,
           0.63748443, -0.8089521 ],
         ...,
         [ 0.9713609 , -0.97152   ,  0.5455785 , ...,  0.8547773 ,
           0.7662437 , -0.6058718 ],
         [-0.9009471 , -0.7617388 ,  0.7839053 , ..., -0.9234396 ,
          -0.96604353, -0.90869004],
         [ 0.14487743, -0.96648866, -0.28298366, ..., -0.96106374,
          -0.9592155 , -0.9969333 ]],

        [[-0.10343756,  0.60692966,  0.9991747 , ...,  0.22879876,
           0.9927404 , -0.11011931],
         [-0.12755175, -0.884864  , -0.8708238 , ...,  0.36096185,
           0.00268055,  0.9092327 ],
         [ 0.30598828, -0.1542486 ,  0.9608166 , ...,  0.11553163,
           0.63748443, -0.8089521 ],
         ...,
         [ 0.9713609 , -0.97152   ,  0.5455785 , ...,  0.8547773 ,
           0.7662437 , -0.6058718 ],
         [-0.9009471 , -0.7617388 ,  0.7839053 , ..., -0.9234396 ,
          -0.96604353, -0.90869004],
         [ 0.14487743, -0.96648866, -0.28298366, ..., -0.96106374,
          -0.9592155 , -0.9969333 ]],

        ...,

        [[-0.10343756,  0.60692966,  0.9991747 , ...,  0.22879876,
           0.9927404 , -0.11011931],
         [-0.12755175, -0.884864  , -0.8708238 , ...,  0.36096185,
           0.00268055,  0.9092327 ],
         [ 0.30598828, -0.1542486 ,  0.9608166 , ...,  0.11553163,
           0.63748443, -0.8089521 ],
         ...,
         [ 0.9713609 , -0.97152   ,  0.5455785 , ...,  0.8547773 ,
           0.7662437 , -0.6058718 ],
         [-0.9009471 , -0.7617388 ,  0.7839053 , ..., -0.9234396 ,
          -0.96604353, -0.90869004],
         [ 0.14487743, -0.96648866, -0.28298366, ..., -0.96106374,
          -0.9592155 , -0.9969333 ]],

        [[-0.10343756,  0.60692966,  0.9991747 , ...,  0.22879876,
           0.9927404 , -0.11011931],
         [-0.12755175, -0.884864  , -0.8708238 , ...,  0.36096185,
           0.00268055,  0.9092327 ],
         [ 0.30598828, -0.1542486 ,  0.9608166 , ...,  0.11553163,
           0.63748443, -0.8089521 ],
         ...,
         [ 0.9713609 , -0.97152   ,  0.5455785 , ...,  0.8547773 ,
           0.7662437 , -0.6058718 ],
         [-0.9009471 , -0.7617388 ,  0.7839053 , ..., -0.9234396 ,
          -0.96604353, -0.90869004],
         [ 0.14487743, -0.96648866, -0.28298366, ..., -0.96106374,
          -0.9592155 , -0.9969333 ]],

        [[-0.10343756,  0.60692966,  0.9991747 , ...,  0.22879876,
           0.9927404 , -0.11011931],
         [-0.12755175, -0.884864  , -0.8708238 , ...,  0.36096185,
           0.00268055,  0.9092327 ],
         [ 0.30598828, -0.1542486 ,  0.9608166 , ...,  0.11553163,
           0.63748443, -0.8089521 ],
         ...,
         [ 0.9713609 , -0.97152   ,  0.5455785 , ...,  0.8547773 ,
           0.7662437 , -0.6058718 ],
         [-0.9009471 , -0.7617388 ,  0.7839053 , ..., -0.9234396 ,
          -0.96604353, -0.90869004],
         [ 0.14487743, -0.96648866, -0.28298366, ..., -0.96106374,
          -0.9592155 , -0.9969333 ]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [7], 'to': [20]}
torch node:
{'name': 'cos', 'output': array([[[[-0.10343756,  0.60692966,  0.9991747 , ...,  0.22879876,
           0.9927404 , -0.11011931],
         [-0.12755175, -0.884864  , -0.8708238 , ...,  0.36096185,
           0.00268055,  0.9092327 ],
         [ 0.30598828, -0.1542486 ,  0.9608166 , ...,  0.11553163,
           0.63748443, -0.8089521 ],
         ...,
         [ 0.9713609 , -0.97152   ,  0.5455785 , ...,  0.8547773 ,
           0.7662437 , -0.6058718 ],
         [-0.9009471 , -0.7617388 ,  0.7839053 , ..., -0.9234396 ,
          -0.96604353, -0.90869004],
         [ 0.14487743, -0.96648866, -0.28298366, ..., -0.96106374,
          -0.9592155 , -0.9969333 ]],

        [[-0.10343756,  0.60692966,  0.9991747 , ...,  0.22879876,
           0.9927404 , -0.11011931],
         [-0.12755175, -0.884864  , -0.8708238 , ...,  0.36096185,
           0.00268055,  0.9092327 ],
         [ 0.30598828, -0.1542486 ,  0.9608166 , ...,  0.11553163,
           0.63748443, -0.8089521 ],
         ...,
         [ 0.9713609 , -0.97152   ,  0.5455785 , ...,  0.8547773 ,
           0.7662437 , -0.6058718 ],
         [-0.9009471 , -0.7617388 ,  0.7839053 , ..., -0.9234396 ,
          -0.96604353, -0.90869004],
         [ 0.14487743, -0.96648866, -0.28298366, ..., -0.96106374,
          -0.9592155 , -0.9969333 ]],

        [[-0.10343756,  0.60692966,  0.9991747 , ...,  0.22879876,
           0.9927404 , -0.11011931],
         [-0.12755175, -0.884864  , -0.8708238 , ...,  0.36096185,
           0.00268055,  0.9092327 ],
         [ 0.30598828, -0.1542486 ,  0.9608166 , ...,  0.11553163,
           0.63748443, -0.8089521 ],
         ...,
         [ 0.9713609 , -0.97152   ,  0.5455785 , ...,  0.8547773 ,
           0.7662437 , -0.6058718 ],
         [-0.9009471 , -0.7617388 ,  0.7839053 , ..., -0.9234396 ,
          -0.96604353, -0.90869004],
         [ 0.14487743, -0.96648866, -0.28298366, ..., -0.96106374,
          -0.9592155 , -0.9969333 ]],

        ...,

        [[-0.10343756,  0.60692966,  0.9991747 , ...,  0.22879876,
           0.9927404 , -0.11011931],
         [-0.12755175, -0.884864  , -0.8708238 , ...,  0.36096185,
           0.00268055,  0.9092327 ],
         [ 0.30598828, -0.1542486 ,  0.9608166 , ...,  0.11553163,
           0.63748443, -0.8089521 ],
         ...,
         [ 0.9713609 , -0.97152   ,  0.5455785 , ...,  0.8547773 ,
           0.7662437 , -0.6058718 ],
         [-0.9009471 , -0.7617388 ,  0.7839053 , ..., -0.9234396 ,
          -0.96604353, -0.90869004],
         [ 0.14487743, -0.96648866, -0.28298366, ..., -0.96106374,
          -0.9592155 , -0.9969333 ]],

        [[-0.10343756,  0.60692966,  0.9991747 , ...,  0.22879876,
           0.9927404 , -0.11011931],
         [-0.12755175, -0.884864  , -0.8708238 , ...,  0.36096185,
           0.00268055,  0.9092327 ],
         [ 0.30598828, -0.1542486 ,  0.9608166 , ...,  0.11553163,
           0.63748443, -0.8089521 ],
         ...,
         [ 0.9713609 , -0.97152   ,  0.5455785 , ...,  0.8547773 ,
           0.7662437 , -0.6058718 ],
         [-0.9009471 , -0.7617388 ,  0.7839053 , ..., -0.9234396 ,
          -0.96604353, -0.90869004],
         [ 0.14487743, -0.96648866, -0.28298366, ..., -0.96106374,
          -0.9592155 , -0.9969333 ]],

        [[-0.10343756,  0.60692966,  0.9991747 , ...,  0.22879876,
           0.9927404 , -0.11011931],
         [-0.12755175, -0.884864  , -0.8708238 , ...,  0.36096185,
           0.00268055,  0.9092327 ],
         [ 0.30598828, -0.1542486 ,  0.9608166 , ...,  0.11553163,
           0.63748443, -0.8089521 ],
         ...,
         [ 0.9713609 , -0.97152   ,  0.5455785 , ...,  0.8547773 ,
           0.7662437 , -0.6058718 ],
         [-0.9009471 , -0.7617388 ,  0.7839053 , ..., -0.9234396 ,
          -0.96604353, -0.90869004],
         [ 0.14487743, -0.96648866, -0.28298366, ..., -0.96106374,
          -0.9592155 , -0.9969333 ]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [7], 'to': [20]}

generate models:15

analyse output arrays in iter:24

pre layer res:
7:conv2d
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [6], 'to': [15]}
tf node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [7], 'to': [12]}
ms node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [7], 'to': [12]}
torch node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [7], 'to': [12]}

generate models:25

analyse output arrays in iter:25

pre layer res:
15:exp
{'name': 'exp', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [16], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [15], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [15], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [15], 'to': []}

generate models:26

analyse output arrays in iter:35

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [14], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [9], 'to': []}

generate models:36

analyse output arrays in iter:37

pre layer res:
19:log
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [14], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [19], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [19], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [19], 'to': []}

generate models:38

analyse output arrays in iter:39

pre layer res:
7:conv2d
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [6], 'to': [12]}
tf node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [7], 'to': [8]}
ms node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [7], 'to': [8]}
torch node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [7], 'to': [8]}

generate models:40

final statics:
total operators:28
tensorflow --> nums:8,distinct_bugs:3
mindspore --> nums:3,distinct_bugs:2
torch --> nums:3,distinct_bugs:2
tensorflow --> 
conv2d:4
sin:2
cos:2
mindspore --> 
sin:2
cos:1
torch --> 
sin:2
cos:1

generate models:50

analyse output arrays in iter:52

pre layer res:
7:conv2d
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [6], 'to': [12]}
tf node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [7], 'to': [11]}
ms node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [7], 'to': [11]}
torch node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [7], 'to': [11]}

generate models:53

analyse output arrays in iter:81

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [14], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [9], 'to': []}

generate models:81

analyse the exceptions in iter:93
torch exception:
{'id': 7, 'name': 'conv2d', 'frame_work': 'torch', 'input_datas': [tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         ...,

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])]}
Given groups=1, weight of size [128, 128, 1, 1], expected input[1, 64, 16, 16] to have 128 channels, but got 64 channels instead
mindspore exception:
{'id': 7, 'name': 'conv2d', 'framework': 'mindspore', 'input_datas': [Tensor(shape=[1, 64, 16, 16], dtype=Float32, value=
[[[[0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   ...
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000]],
  [[0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   ...
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000]],
  [[0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   ...
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000]],
  ...
  [[0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   ...
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000]],
  [[0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   ...
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000]],
  [[0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   ...
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000]]]])]}
For 'Conv2D', 'C_in' of input 'x' shape divide by parameter 'group' must be equal to 'C_in' of input 'weight' shape: 128, but got 'C_in' of input 'x' shape: 64, and 'group': 1.

----------------------------------------------------
- C++ Call Stack: (For framework developers)
----------------------------------------------------
mindspore\core\ops\conv2d.cc:214 Conv2dInferShape


generate models:93

analyse output arrays in iter:96

pre layer res:
17:reshape
{'name': 'reshape', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [16], 'to': [9]}
tf node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        ...,

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         ...,
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         ...,
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         ...,
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [17], 'to': [10]}
ms node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        ...,

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         ...,
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         ...,
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         ...,
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]]]],
      dtype=float32), 'output_shape': (1, 128, 8, 8), 'from': [17], 'to': [10]}
torch node:
{'name': 'maxpool2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 8, 8]), 'from': [17], 'to': [10]}

generate models:96

final statics:
total operators:28
tensorflow --> nums:10,distinct_bugs:3
mindspore --> nums:5,distinct_bugs:3
torch --> nums:6,distinct_bugs:4
tensorflow --> 
conv2d:5
sin:3
cos:2
mindspore --> 
sin:3
cos:1
conv2d:1
torch --> 
sin:3
cos:1
conv2d:1
maxpool2d:1

generate models:99

analyse output arrays in iter:100

pre layer res:
18:add
{'name': 'add', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [9, 24], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [18], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [18], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [18], 'to': []}

generate models:100

analyse output arrays in iter:110

pre layer res:
16:transpose
{'name': 'transpose', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [9], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [16], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [16], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [16], 'to': []}

generate models:110

analyse output arrays in iter:112

pre layer res:
22:exp
{'name': 'exp', 'output': array([[inf, inf, inf, ..., inf, inf, inf]], dtype=float32), 'output_shape': TensorShape([1, 32768]), 'from': [21], 'to': [20]}
tf node:
{'name': 'sin', 'output': array([[nan, nan, nan, ..., nan, nan, nan]], dtype=float32), 'output_shape': TensorShape([1, 32768]), 'from': [22], 'to': [12]}
ms node:
{'name': 'sin', 'output': array([[nan, nan, nan, ..., nan, nan, nan]], dtype=float32), 'output_shape': (1, 32768), 'from': [22], 'to': [12]}
torch node:
{'name': 'sin', 'output': array([[nan, nan, nan, ..., nan, nan, nan]], dtype=float32), 'output_shape': torch.Size([1, 32768]), 'from': [22], 'to': [12]}

generate models:112

analyse output arrays in iter:114

pre layer res:
21:reshape
{'name': 'reshape', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [24], 'to': [23]}
tf node:
{'name': 'log', 'output': array([[[[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [21], 'to': [10]}
ms node:
{'name': 'log', 'output': array([[[[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        ...,

        [[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]],

        [[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]],

        [[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]]]],
      dtype=float32), 'output_shape': (1, 128, 8, 8), 'from': [21], 'to': [10]}
torch node:
{'name': 'log', 'output': array([[[[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 8, 8]), 'from': [21], 'to': [10]}

generate models:114

analyse output arrays in iter:122

pre layer res:
14:log
{'name': 'log', 'output': array([[[[  6.654717 ,   6.302862 ,   6.931472 , ...,   7.693611 ,
            4.9855623,   9.028614 ],
         [  4.9855623,   6.5401917,   6.4896398, ...,   6.526006 ,
                 -inf,   7.624619 ],
         [  5.0596695,   6.066473 ,   6.2383246, ...,   5.0596695,
            5.0596695,   5.0596695],
         ...,
         [-57.628143 ,        -inf, -57.068527 , ...,   5.427393 ,
            7.624619 , -56.37538  ],
         [  7.624619 ,        -inf,        -inf, ...,   7.624619 ,
                 -inf,        -inf],
         [       -inf,        -inf,        -inf, ...,   9.046004 ,
          -56.37538  ,   7.624619 ]],

        [[  6.654717 ,   6.302862 ,   6.931472 , ...,   7.693611 ,
            4.9855623,   9.028614 ],
         [  4.9855623,   6.5401917,   6.4896398, ...,   6.526006 ,
                 -inf,   7.624619 ],
         [  5.0596695,   6.066473 ,   6.2383246, ...,   5.0596695,
            5.0596695,   5.0596695],
         ...,
         [-57.628143 ,        -inf, -57.068527 , ...,   5.427393 ,
            7.624619 , -56.37538  ],
         [  7.624619 ,        -inf,        -inf, ...,   7.624619 ,
                 -inf,        -inf],
         [       -inf,        -inf,        -inf, ...,   9.046004 ,
          -56.37538  ,   7.624619 ]],

        [[  6.654717 ,   6.302862 ,   6.931472 , ...,   7.693611 ,
            4.9855623,   9.028614 ],
         [  4.9855623,   6.5401917,   6.4896398, ...,   6.526006 ,
                 -inf,   7.624619 ],
         [  5.0596695,   6.066473 ,   6.2383246, ...,   5.0596695,
            5.0596695,   5.0596695],
         ...,
         [-57.628143 ,        -inf, -57.068527 , ...,   5.427393 ,
            7.624619 , -56.37538  ],
         [  7.624619 ,        -inf,        -inf, ...,   7.624619 ,
                 -inf,        -inf],
         [       -inf,        -inf,        -inf, ...,   9.046004 ,
          -56.37538  ,   7.624619 ]],

        ...,

        [[  6.654717 ,   6.302862 ,   6.931472 , ...,   7.693611 ,
            4.9855623,   9.028614 ],
         [  4.9855623,   6.5401917,   6.4896398, ...,   6.526006 ,
                 -inf,   7.624619 ],
         [  5.0596695,   6.066473 ,   6.2383246, ...,   5.0596695,
            5.0596695,   5.0596695],
         ...,
         [-57.628143 ,        -inf, -57.068527 , ...,   5.427393 ,
            7.624619 , -56.37538  ],
         [  7.624619 ,        -inf,        -inf, ...,   7.624619 ,
                 -inf,        -inf],
         [       -inf,        -inf,        -inf, ...,   9.046004 ,
          -56.37538  ,   7.624619 ]],

        [[  6.654717 ,   6.302862 ,   6.931472 , ...,   7.693611 ,
            4.9855623,   9.028614 ],
         [  4.9855623,   6.5401917,   6.4896398, ...,   6.526006 ,
                 -inf,   7.624619 ],
         [  5.0596695,   6.066473 ,   6.2383246, ...,   5.0596695,
            5.0596695,   5.0596695],
         ...,
         [-57.628143 ,        -inf, -57.068527 , ...,   5.427393 ,
            7.624619 , -56.37538  ],
         [  7.624619 ,        -inf,        -inf, ...,   7.624619 ,
                 -inf,        -inf],
         [       -inf,        -inf,        -inf, ...,   9.046004 ,
          -56.37538  ,   7.624619 ]],

        [[  6.654717 ,   6.302862 ,   6.931472 , ...,   7.693611 ,
            4.9855623,   9.028614 ],
         [  4.9855623,   6.5401917,   6.4896398, ...,   6.526006 ,
                 -inf,   7.624619 ],
         [  5.0596695,   6.066473 ,   6.2383246, ...,   5.0596695,
            5.0596695,   5.0596695],
         ...,
         [-57.628143 ,        -inf, -57.068527 , ...,   5.427393 ,
            7.624619 , -56.37538  ],
         [  7.624619 ,        -inf,        -inf, ...,   7.624619 ,
                 -inf,        -inf],
         [       -inf,        -inf,        -inf, ...,   9.046004 ,
          -56.37538  ,   7.624619 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [8], 'to': [9]}
tf node:
{'name': 'maxpool2d', 'output': array([[[[ 6.6547170e+00,  6.9314718e+00, -3.4028235e+38, ...,
           6.7201633e+00,  7.6936111e+00,  9.0286140e+00],
         [ 6.3028622e+00,  7.0745721e+00, -3.4028235e+38, ...,
           7.6987252e+00,  5.0596695e+00,  7.6246190e+00],
         [ 6.6420794e+00,  7.0650039e+00,  9.0109138e+00, ...,
           4.9165683e+00,  9.0274439e+00,  7.6246190e+00],
         ...,
         [ 5.5451775e+00, -3.4028235e+38, -3.4028235e+38, ...,
           5.5451775e+00,  7.6246190e+00,  8.0300846e+00],
         [ 7.8928838e+00,  7.0650039e+00,  9.0109138e+00, ...,
           5.4273930e+00,  7.6246190e+00,  7.6246190e+00],
         [ 7.6246190e+00,  7.0650039e+00,  9.0460043e+00, ...,
           9.0460043e+00,  9.0460043e+00,  7.6246190e+00]],

        [[ 6.6547170e+00,  6.9314718e+00, -3.4028235e+38, ...,
           6.7201633e+00,  7.6936111e+00,  9.0286140e+00],
         [ 6.3028622e+00,  7.0745721e+00, -3.4028235e+38, ...,
           7.6987252e+00,  5.0596695e+00,  7.6246190e+00],
         [ 6.6420794e+00,  7.0650039e+00,  9.0109138e+00, ...,
           4.9165683e+00,  9.0274439e+00,  7.6246190e+00],
         ...,
         [ 5.5451775e+00, -3.4028235e+38, -3.4028235e+38, ...,
           5.5451775e+00,  7.6246190e+00,  8.0300846e+00],
         [ 7.8928838e+00,  7.0650039e+00,  9.0109138e+00, ...,
           5.4273930e+00,  7.6246190e+00,  7.6246190e+00],
         [ 7.6246190e+00,  7.0650039e+00,  9.0460043e+00, ...,
           9.0460043e+00,  9.0460043e+00,  7.6246190e+00]],

        [[ 6.6547170e+00,  6.9314718e+00, -3.4028235e+38, ...,
           6.7201633e+00,  7.6936111e+00,  9.0286140e+00],
         [ 6.3028622e+00,  7.0745721e+00, -3.4028235e+38, ...,
           7.6987252e+00,  5.0596695e+00,  7.6246190e+00],
         [ 6.6420794e+00,  7.0650039e+00,  9.0109138e+00, ...,
           4.9165683e+00,  9.0274439e+00,  7.6246190e+00],
         ...,
         [ 5.5451775e+00, -3.4028235e+38, -3.4028235e+38, ...,
           5.5451775e+00,  7.6246190e+00,  8.0300846e+00],
         [ 7.8928838e+00,  7.0650039e+00,  9.0109138e+00, ...,
           5.4273930e+00,  7.6246190e+00,  7.6246190e+00],
         [ 7.6246190e+00,  7.0650039e+00,  9.0460043e+00, ...,
           9.0460043e+00,  9.0460043e+00,  7.6246190e+00]],

        ...,

        [[ 6.6547170e+00,  6.9314718e+00, -3.4028235e+38, ...,
           6.7201633e+00,  7.6936111e+00,  9.0286140e+00],
         [ 6.3028622e+00,  7.0745721e+00, -3.4028235e+38, ...,
           7.6987252e+00,  5.0596695e+00,  7.6246190e+00],
         [ 6.6420794e+00,  7.0650039e+00,  9.0109138e+00, ...,
           4.9165683e+00,  9.0274439e+00,  7.6246190e+00],
         ...,
         [ 5.5451775e+00, -3.4028235e+38, -3.4028235e+38, ...,
           5.5451775e+00,  7.6246190e+00,  8.0300846e+00],
         [ 7.8928838e+00,  7.0650039e+00,  9.0109138e+00, ...,
           5.4273930e+00,  7.6246190e+00,  7.6246190e+00],
         [ 7.6246190e+00,  7.0650039e+00,  9.0460043e+00, ...,
           9.0460043e+00,  9.0460043e+00,  7.6246190e+00]],

        [[ 6.6547170e+00,  6.9314718e+00, -3.4028235e+38, ...,
           6.7201633e+00,  7.6936111e+00,  9.0286140e+00],
         [ 6.3028622e+00,  7.0745721e+00, -3.4028235e+38, ...,
           7.6987252e+00,  5.0596695e+00,  7.6246190e+00],
         [ 6.6420794e+00,  7.0650039e+00,  9.0109138e+00, ...,
           4.9165683e+00,  9.0274439e+00,  7.6246190e+00],
         ...,
         [ 5.5451775e+00, -3.4028235e+38, -3.4028235e+38, ...,
           5.5451775e+00,  7.6246190e+00,  8.0300846e+00],
         [ 7.8928838e+00,  7.0650039e+00,  9.0109138e+00, ...,
           5.4273930e+00,  7.6246190e+00,  7.6246190e+00],
         [ 7.6246190e+00,  7.0650039e+00,  9.0460043e+00, ...,
           9.0460043e+00,  9.0460043e+00,  7.6246190e+00]],

        [[ 6.6547170e+00,  6.9314718e+00, -3.4028235e+38, ...,
           6.7201633e+00,  7.6936111e+00,  9.0286140e+00],
         [ 6.3028622e+00,  7.0745721e+00, -3.4028235e+38, ...,
           7.6987252e+00,  5.0596695e+00,  7.6246190e+00],
         [ 6.6420794e+00,  7.0650039e+00,  9.0109138e+00, ...,
           4.9165683e+00,  9.0274439e+00,  7.6246190e+00],
         ...,
         [ 5.5451775e+00, -3.4028235e+38, -3.4028235e+38, ...,
           5.5451775e+00,  7.6246190e+00,  8.0300846e+00],
         [ 7.8928838e+00,  7.0650039e+00,  9.0109138e+00, ...,
           5.4273930e+00,  7.6246190e+00,  7.6246190e+00],
         [ 7.6246190e+00,  7.0650039e+00,  9.0460043e+00, ...,
           9.0460043e+00,  9.0460043e+00,  7.6246190e+00]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [14], 'to': [10]}
ms node:
{'name': 'maxpool2d', 'output': array([[[[ 6.6547151e+00,  6.9314704e+00, -3.4028235e+38, ...,
           6.7201610e+00,  7.6936083e+00,  9.0286131e+00],
         [ 6.3028593e+00,  7.0745687e+00, -3.4028235e+38, ...,
           7.6987224e+00,  5.0596704e+00,  7.6246176e+00],
         [ 6.6420794e+00,  7.0650005e+00,  9.0109119e+00, ...,
           4.9165654e+00,  9.0274429e+00,  7.6246176e+00],
         ...,
         [ 5.5451760e+00, -3.4028235e+38, -3.4028235e+38, ...,
           5.5451760e+00,  7.6246176e+00,  8.0300817e+00],
         [ 7.8928866e+00,  7.0650005e+00,  9.0109119e+00, ...,
           5.4273920e+00,  7.6246176e+00,  7.6246176e+00],
         [ 7.6246176e+00,  7.0650005e+00,  9.0460072e+00, ...,
           9.0460072e+00,  9.0460072e+00,  7.6246176e+00]],

        [[ 6.6547151e+00,  6.9314704e+00, -3.4028235e+38, ...,
           6.7201610e+00,  7.6936083e+00,  9.0286131e+00],
         [ 6.3028593e+00,  7.0745687e+00, -3.4028235e+38, ...,
           7.6987224e+00,  5.0596704e+00,  7.6246176e+00],
         [ 6.6420794e+00,  7.0650005e+00,  9.0109119e+00, ...,
           4.9165654e+00,  9.0274429e+00,  7.6246176e+00],
         ...,
         [ 5.5451760e+00, -3.4028235e+38, -3.4028235e+38, ...,
           5.5451760e+00,  7.6246176e+00,  8.0300817e+00],
         [ 7.8928866e+00,  7.0650005e+00,  9.0109119e+00, ...,
           5.4273920e+00,  7.6246176e+00,  7.6246176e+00],
         [ 7.6246176e+00,  7.0650005e+00,  9.0460072e+00, ...,
           9.0460072e+00,  9.0460072e+00,  7.6246176e+00]],

        [[ 6.6547151e+00,  6.9314704e+00, -3.4028235e+38, ...,
           6.7201610e+00,  7.6936083e+00,  9.0286131e+00],
         [ 6.3028593e+00,  7.0745687e+00, -3.4028235e+38, ...,
           7.6987224e+00,  5.0596704e+00,  7.6246176e+00],
         [ 6.6420794e+00,  7.0650005e+00,  9.0109119e+00, ...,
           4.9165654e+00,  9.0274429e+00,  7.6246176e+00],
         ...,
         [ 5.5451760e+00, -3.4028235e+38, -3.4028235e+38, ...,
           5.5451760e+00,  7.6246176e+00,  8.0300817e+00],
         [ 7.8928866e+00,  7.0650005e+00,  9.0109119e+00, ...,
           5.4273920e+00,  7.6246176e+00,  7.6246176e+00],
         [ 7.6246176e+00,  7.0650005e+00,  9.0460072e+00, ...,
           9.0460072e+00,  9.0460072e+00,  7.6246176e+00]],

        ...,

        [[ 6.6547151e+00,  6.9314704e+00, -3.4028235e+38, ...,
           6.7201610e+00,  7.6936083e+00,  9.0286131e+00],
         [ 6.3028593e+00,  7.0745687e+00, -3.4028235e+38, ...,
           7.6987224e+00,  5.0596704e+00,  7.6246176e+00],
         [ 6.6420794e+00,  7.0650005e+00,  9.0109119e+00, ...,
           4.9165654e+00,  9.0274429e+00,  7.6246176e+00],
         ...,
         [ 5.5451760e+00, -3.4028235e+38, -3.4028235e+38, ...,
           5.5451760e+00,  7.6246176e+00,  8.0300817e+00],
         [ 7.8928866e+00,  7.0650005e+00,  9.0109119e+00, ...,
           5.4273920e+00,  7.6246176e+00,  7.6246176e+00],
         [ 7.6246176e+00,  7.0650005e+00,  9.0460072e+00, ...,
           9.0460072e+00,  9.0460072e+00,  7.6246176e+00]],

        [[ 6.6547155e+00,  6.9314704e+00, -3.4028235e+38, ...,
           6.7201610e+00,  7.6936097e+00,  9.0286112e+00],
         [ 6.3028593e+00,  7.0745697e+00, -3.4028235e+38, ...,
           7.6987238e+00,  5.0596704e+00,  7.6246176e+00],
         [ 6.6420789e+00,  7.0650001e+00,  9.0109119e+00, ...,
           4.9165654e+00,  9.0274410e+00,  7.6246176e+00],
         ...,
         [ 5.5451760e+00, -3.4028235e+38, -3.4028235e+38, ...,
           5.5451760e+00,  7.6246176e+00,  8.0300817e+00],
         [ 7.8928866e+00,  7.0650001e+00,  9.0109119e+00, ...,
           5.4273939e+00,  7.6246176e+00,  7.6246176e+00],
         [ 7.6246176e+00,  7.0650001e+00,  9.0460072e+00, ...,
           9.0460072e+00,  9.0460072e+00,  7.6246176e+00]],

        [[ 6.6547155e+00,  6.9314704e+00, -3.4028235e+38, ...,
           6.7201610e+00,  7.6936097e+00,  9.0286112e+00],
         [ 6.3028593e+00,  7.0745697e+00, -3.4028235e+38, ...,
           7.6987238e+00,  5.0596704e+00,  7.6246176e+00],
         [ 6.6420789e+00,  7.0650001e+00,  9.0109119e+00, ...,
           4.9165654e+00,  9.0274410e+00,  7.6246176e+00],
         ...,
         [ 5.5451760e+00, -3.4028235e+38, -3.4028235e+38, ...,
           5.5451760e+00,  7.6246176e+00,  8.0300817e+00],
         [ 7.8928866e+00,  7.0650001e+00,  9.0109119e+00, ...,
           5.4273939e+00,  7.6246176e+00,  7.6246176e+00],
         [ 7.6246176e+00,  7.0650001e+00,  9.0460072e+00, ...,
           9.0460072e+00,  9.0460072e+00,  7.6246176e+00]]]],
      dtype=float32), 'output_shape': (1, 128, 8, 8), 'from': [14], 'to': [10]}
torch node:
{'name': 'maxpool2d', 'output': array([[[[6.654717 , 6.931472 ,      -inf, ..., 6.7201633, 7.693611 ,
          9.028614 ],
         [6.302862 , 7.074572 ,      -inf, ..., 7.698725 , 5.0596695,
          7.624619 ],
         [6.6420794, 7.065004 , 9.010913 , ..., 4.9165683, 9.027444 ,
          7.624619 ],
         ...,
         [5.5451775,      -inf,      -inf, ..., 5.5451775, 7.624619 ,
          8.030084 ],
         [7.892884 , 7.065004 , 9.010913 , ..., 5.427393 , 7.624619 ,
          7.624619 ],
         [7.624619 , 7.065004 , 9.046004 , ..., 9.046004 , 9.046004 ,
          7.624619 ]],

        [[6.654717 , 6.931472 ,      -inf, ..., 6.7201633, 7.693611 ,
          9.028614 ],
         [6.302862 , 7.074572 ,      -inf, ..., 7.698725 , 5.0596695,
          7.624619 ],
         [6.6420794, 7.065004 , 9.010913 , ..., 4.9165683, 9.027444 ,
          7.624619 ],
         ...,
         [5.5451775,      -inf,      -inf, ..., 5.5451775, 7.624619 ,
          8.030084 ],
         [7.892884 , 7.065004 , 9.010913 , ..., 5.427393 , 7.624619 ,
          7.624619 ],
         [7.624619 , 7.065004 , 9.046004 , ..., 9.046004 , 9.046004 ,
          7.624619 ]],

        [[6.654717 , 6.931472 ,      -inf, ..., 6.7201633, 7.693611 ,
          9.028614 ],
         [6.302862 , 7.074572 ,      -inf, ..., 7.698725 , 5.0596695,
          7.624619 ],
         [6.6420794, 7.065004 , 9.010913 , ..., 4.9165683, 9.027444 ,
          7.624619 ],
         ...,
         [5.5451775,      -inf,      -inf, ..., 5.5451775, 7.624619 ,
          8.030084 ],
         [7.892884 , 7.065004 , 9.010913 , ..., 5.427393 , 7.624619 ,
          7.624619 ],
         [7.624619 , 7.065004 , 9.046004 , ..., 9.046004 , 9.046004 ,
          7.624619 ]],

        ...,

        [[6.654717 , 6.931472 ,      -inf, ..., 6.7201633, 7.693611 ,
          9.028614 ],
         [6.302862 , 7.074572 ,      -inf, ..., 7.698725 , 5.0596695,
          7.624619 ],
         [6.6420794, 7.065004 , 9.010913 , ..., 4.9165683, 9.027444 ,
          7.624619 ],
         ...,
         [5.5451775,      -inf,      -inf, ..., 5.5451775, 7.624619 ,
          8.030084 ],
         [7.892884 , 7.065004 , 9.010913 , ..., 5.427393 , 7.624619 ,
          7.624619 ],
         [7.624619 , 7.065004 , 9.046004 , ..., 9.046004 , 9.046004 ,
          7.624619 ]],

        [[6.654717 , 6.931472 ,      -inf, ..., 6.7201633, 7.693611 ,
          9.028614 ],
         [6.302862 , 7.074572 ,      -inf, ..., 7.698725 , 5.0596695,
          7.624619 ],
         [6.6420794, 7.065004 , 9.010913 , ..., 4.9165683, 9.027444 ,
          7.624619 ],
         ...,
         [5.5451775,      -inf,      -inf, ..., 5.5451775, 7.624619 ,
          8.030084 ],
         [7.892884 , 7.065004 , 9.010913 , ..., 5.427393 , 7.624619 ,
          7.624619 ],
         [7.624619 , 7.065004 , 9.046004 , ..., 9.046004 , 9.046004 ,
          7.624619 ]],

        [[6.654717 , 6.931472 ,      -inf, ..., 6.7201633, 7.693611 ,
          9.028614 ],
         [6.302862 , 7.074572 ,      -inf, ..., 7.698725 , 5.0596695,
          7.624619 ],
         [6.6420794, 7.065004 , 9.010913 , ..., 4.9165683, 9.027444 ,
          7.624619 ],
         ...,
         [5.5451775,      -inf,      -inf, ..., 5.5451775, 7.624619 ,
          8.030084 ],
         [7.892884 , 7.065004 , 9.010913 , ..., 5.427393 , 7.624619 ,
          7.624619 ],
         [7.624619 , 7.065004 , 9.046004 , ..., 9.046004 , 9.046004 ,
          7.624619 ]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 8, 8]), 'from': [14], 'to': [10]}

generate models:122

analyse output arrays in iter:154

pre layer res:
23:relu
{'name': 'relu', 'output': array([[[[512996.03, 457851.97, 523873.  , ..., 506515.97, 524160.03,
          524160.03],
         [519973.  , 523423.  , 521080.03, ..., 524036.03, 518017.  ,
          519973.  ],
         [510989.  , 500050.97, 374823.72, ..., 524241.  , 522023.97,
          518711.  ],
         ...,
         [521085.  , 523135.  , 522436.03, ..., 502748.  , 509935.  ,
          524036.03],
         [523419.97, 517279.97, 513927.97, ..., 428208.03, 523667.97,
          519979.97],
         [285236.47, 522807.97, 485913.06, ..., 516497.  , 340950.47,
          508832.03]],

        [[512996.03, 457851.97, 523873.  , ..., 506515.97, 524160.03,
          524160.03],
         [519973.  , 523423.  , 521080.03, ..., 524036.03, 518017.  ,
          519973.  ],
         [510989.  , 500050.97, 374823.72, ..., 524241.  , 522023.97,
          518711.  ],
         ...,
         [521085.  , 523135.  , 522436.03, ..., 502748.  , 509935.  ,
          524036.03],
         [523419.97, 517279.97, 513927.97, ..., 428208.03, 523667.97,
          519979.97],
         [285236.47, 522807.97, 485913.06, ..., 516497.  , 340950.47,
          508832.03]],

        [[512996.03, 457851.97, 523873.  , ..., 506515.97, 524160.03,
          524160.03],
         [519973.  , 523423.  , 521080.03, ..., 524036.03, 518017.  ,
          519973.  ],
         [510989.  , 500050.97, 374823.72, ..., 524241.  , 522023.97,
          518711.  ],
         ...,
         [521085.  , 523135.  , 522436.03, ..., 502748.  , 509935.  ,
          524036.03],
         [523419.97, 517279.97, 513927.97, ..., 428208.03, 523667.97,
          519979.97],
         [285236.47, 522807.97, 485913.06, ..., 516497.  , 340950.47,
          508832.03]],

        ...,

        [[512996.03, 457851.97, 523873.  , ..., 506515.97, 524160.03,
          524160.03],
         [519973.  , 523423.  , 521080.03, ..., 524036.03, 518017.  ,
          519973.  ],
         [510989.  , 500050.97, 374823.72, ..., 524241.  , 522023.97,
          518711.  ],
         ...,
         [521085.  , 523135.  , 522436.03, ..., 502748.  , 509935.  ,
          524036.03],
         [523419.97, 517279.97, 513927.97, ..., 428208.03, 523667.97,
          519979.97],
         [285236.47, 522807.97, 485913.06, ..., 516497.  , 340950.47,
          508832.03]],

        [[512996.03, 457851.97, 523873.  , ..., 506515.97, 524160.03,
          524160.03],
         [519973.  , 523423.  , 521080.03, ..., 524036.03, 518017.  ,
          519973.  ],
         [510989.  , 500050.97, 374823.72, ..., 524241.  , 522023.97,
          518711.  ],
         ...,
         [521085.  , 523135.  , 522436.03, ..., 502748.  , 509935.  ,
          524036.03],
         [523419.97, 517279.97, 513927.97, ..., 428208.03, 523667.97,
          519979.97],
         [285236.47, 522807.97, 485913.06, ..., 516497.  , 340950.47,
          508832.03]],

        [[512996.03, 457851.97, 523873.  , ..., 506515.97, 524160.03,
          524160.03],
         [519973.  , 523423.  , 521080.03, ..., 524036.03, 518017.  ,
          519973.  ],
         [510989.  , 500050.97, 374823.72, ..., 524241.  , 522023.97,
          518711.  ],
         ...,
         [521085.  , 523135.  , 522436.03, ..., 502748.  , 509935.  ,
          524036.03],
         [523419.97, 517279.97, 513927.97, ..., 428208.03, 523667.97,
          519979.97],
         [285236.47, 522807.97, 485913.06, ..., 516497.  , 340950.47,
          508832.03]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [9], 'to': [15]}
tf node:
{'name': 'cos', 'output': array([[[[ 0.608728  , -0.8236428 ,  0.99002576, ..., -0.9919711 ,
          -0.5361205 , -0.5361205 ],
         [-0.14540541, -0.62660486, -0.97269154, ...,  0.89023995,
           0.977475  , -0.14540541],
         [-0.8916207 , -0.86558175,  0.9555578 , ..., -0.95758283,
          -0.3385073 , -0.87535495],
         ...,
         [-0.02212154, -0.9911795 , -0.16773564, ...,  0.47805798,
          -0.44891348,  0.89023995],
         [ 0.7086139 , -0.5144989 ,  0.44489926, ..., -0.8905642 ,
          -0.5660547 , -0.7389344 ],
         [ 0.2726596 , -0.9851249 , -0.97701406, ...,  0.949802  ,
           0.95570254,  0.6707931 ]],

        [[ 0.608728  , -0.8236428 ,  0.99002576, ..., -0.9919711 ,
          -0.5361205 , -0.5361205 ],
         [-0.14540541, -0.62660486, -0.97269154, ...,  0.89023995,
           0.977475  , -0.14540541],
         [-0.8916207 , -0.86558175,  0.9555578 , ..., -0.95758283,
          -0.3385073 , -0.87535495],
         ...,
         [-0.02212154, -0.9911795 , -0.16773564, ...,  0.47805798,
          -0.44891348,  0.89023995],
         [ 0.7086139 , -0.5144989 ,  0.44489926, ..., -0.8905642 ,
          -0.5660547 , -0.7389344 ],
         [ 0.2726596 , -0.9851249 , -0.97701406, ...,  0.949802  ,
           0.95570254,  0.6707931 ]],

        [[ 0.608728  , -0.8236428 ,  0.99002576, ..., -0.9919711 ,
          -0.5361205 , -0.5361205 ],
         [-0.14540541, -0.62660486, -0.97269154, ...,  0.89023995,
           0.977475  , -0.14540541],
         [-0.8916207 , -0.86558175,  0.9555578 , ..., -0.95758283,
          -0.3385073 , -0.87535495],
         ...,
         [-0.02212154, -0.9911795 , -0.16773564, ...,  0.47805798,
          -0.44891348,  0.89023995],
         [ 0.7086139 , -0.5144989 ,  0.44489926, ..., -0.8905642 ,
          -0.5660547 , -0.7389344 ],
         [ 0.2726596 , -0.9851249 , -0.97701406, ...,  0.949802  ,
           0.95570254,  0.6707931 ]],

        ...,

        [[ 0.608728  , -0.8236428 ,  0.99002576, ..., -0.9919711 ,
          -0.5361205 , -0.5361205 ],
         [-0.14540541, -0.62660486, -0.97269154, ...,  0.89023995,
           0.977475  , -0.14540541],
         [-0.8916207 , -0.86558175,  0.9555578 , ..., -0.95758283,
          -0.3385073 , -0.87535495],
         ...,
         [-0.02212154, -0.9911795 , -0.16773564, ...,  0.47805798,
          -0.44891348,  0.89023995],
         [ 0.7086139 , -0.5144989 ,  0.44489926, ..., -0.8905642 ,
          -0.5660547 , -0.7389344 ],
         [ 0.2726596 , -0.9851249 , -0.97701406, ...,  0.949802  ,
           0.95570254,  0.6707931 ]],

        [[ 0.608728  , -0.8236428 ,  0.99002576, ..., -0.9919711 ,
          -0.5361205 , -0.5361205 ],
         [-0.14540541, -0.62660486, -0.97269154, ...,  0.89023995,
           0.977475  , -0.14540541],
         [-0.8916207 , -0.86558175,  0.9555578 , ..., -0.95758283,
          -0.3385073 , -0.87535495],
         ...,
         [-0.02212154, -0.9911795 , -0.16773564, ...,  0.47805798,
          -0.44891348,  0.89023995],
         [ 0.7086139 , -0.5144989 ,  0.44489926, ..., -0.8905642 ,
          -0.5660547 , -0.7389344 ],
         [ 0.2726596 , -0.9851249 , -0.97701406, ...,  0.949802  ,
           0.95570254,  0.6707931 ]],

        [[ 0.608728  , -0.8236428 ,  0.99002576, ..., -0.9919711 ,
          -0.5361205 , -0.5361205 ],
         [-0.14540541, -0.62660486, -0.97269154, ...,  0.89023995,
           0.977475  , -0.14540541],
         [-0.8916207 , -0.86558175,  0.9555578 , ..., -0.95758283,
          -0.3385073 , -0.87535495],
         ...,
         [-0.02212154, -0.9911795 , -0.16773564, ...,  0.47805798,
          -0.44891348,  0.89023995],
         [ 0.7086139 , -0.5144989 ,  0.44489926, ..., -0.8905642 ,
          -0.5660547 , -0.7389344 ],
         [ 0.2726596 , -0.9851249 , -0.97701406, ...,  0.949802  ,
           0.95570254,  0.6707931 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [23], 'to': [10]}
ms node:
{'name': 'cos', 'output': array([[[[ 0.608728  , -0.8236428 ,  0.99002576, ..., -0.9919711 ,
          -0.5361205 , -0.5361205 ],
         [-0.14540541, -0.62660486, -0.97269154, ...,  0.8902399 ,
           0.977475  , -0.14540541],
         [-0.89162064, -0.86558175,  0.9555578 , ..., -0.95758283,
          -0.3385073 , -0.87535495],
         ...,
         [-0.02212154, -0.9911795 , -0.16773564, ...,  0.47805798,
          -0.44891348,  0.8902399 ],
         [ 0.7086138 , -0.5144989 ,  0.44489926, ..., -0.8905642 ,
          -0.5660547 , -0.7389344 ],
         [ 0.2726596 , -0.9851249 , -0.97701406, ...,  0.949802  ,
           0.95570254,  0.6707931 ]],

        [[ 0.608728  , -0.8236428 ,  0.99002576, ..., -0.9919711 ,
          -0.5361205 , -0.5361205 ],
         [-0.14540541, -0.62660486, -0.97269154, ...,  0.8902399 ,
           0.977475  , -0.14540541],
         [-0.89162064, -0.86558175,  0.9555578 , ..., -0.95758283,
          -0.3385073 , -0.87535495],
         ...,
         [-0.02212154, -0.9911795 , -0.16773564, ...,  0.47805798,
          -0.44891348,  0.8902399 ],
         [ 0.7086138 , -0.5144989 ,  0.44489926, ..., -0.8905642 ,
          -0.5660547 , -0.7389344 ],
         [ 0.2726596 , -0.9851249 , -0.97701406, ...,  0.949802  ,
           0.95570254,  0.6707931 ]],

        [[ 0.608728  , -0.8236428 ,  0.99002576, ..., -0.9919711 ,
          -0.5361205 , -0.5361205 ],
         [-0.14540541, -0.62660486, -0.97269154, ...,  0.8902399 ,
           0.977475  , -0.14540541],
         [-0.89162064, -0.86558175,  0.9555578 , ..., -0.95758283,
          -0.3385073 , -0.87535495],
         ...,
         [-0.02212154, -0.9911795 , -0.16773564, ...,  0.47805798,
          -0.44891348,  0.8902399 ],
         [ 0.7086138 , -0.5144989 ,  0.44489926, ..., -0.8905642 ,
          -0.5660547 , -0.7389344 ],
         [ 0.2726596 , -0.9851249 , -0.97701406, ...,  0.949802  ,
           0.95570254,  0.6707931 ]],

        ...,

        [[ 0.608728  , -0.8236428 ,  0.99002576, ..., -0.9919711 ,
          -0.5361205 , -0.5361205 ],
         [-0.14540541, -0.62660486, -0.97269154, ...,  0.8902399 ,
           0.977475  , -0.14540541],
         [-0.89162064, -0.86558175,  0.9555578 , ..., -0.95758283,
          -0.3385073 , -0.87535495],
         ...,
         [-0.02212154, -0.9911795 , -0.16773564, ...,  0.47805798,
          -0.44891348,  0.8902399 ],
         [ 0.7086138 , -0.5144989 ,  0.44489926, ..., -0.8905642 ,
          -0.5660547 , -0.7389344 ],
         [ 0.2726596 , -0.9851249 , -0.97701406, ...,  0.949802  ,
           0.95570254,  0.6707931 ]],

        [[ 0.608728  , -0.8236428 ,  0.67679703, ..., -0.9919711 ,
          -0.5361205 , -0.5361205 ],
         [-0.89776665,  0.28744763, -0.97269154, ...,  0.8902399 ,
           0.70572555, -0.89776665],
         [-0.87812585, -0.915915  ,  0.99878746, ..., -0.2749075 ,
          -0.3385073 , -0.09726544],
         ...,
         [-0.8365049 , -0.6705599 , -0.16773564, ...,  0.47805798,
          -0.9906987 ,  0.8902399 ],
         [ 0.7086138 , -0.5144989 ,  0.44489926, ..., -0.8905642 ,
          -0.5660547 , -0.7389344 ],
         [ 0.6546022 , -0.9851249 , -0.77033716, ...,  0.28005597,
           0.74098605,  0.6707931 ]],

        [[ 0.608728  , -0.8236428 ,  0.67679703, ..., -0.9919711 ,
          -0.5361205 , -0.5361205 ],
         [-0.89776665,  0.28744763, -0.97269154, ...,  0.8902399 ,
           0.70572555, -0.89776665],
         [-0.87812585, -0.915915  ,  0.99878746, ..., -0.2749075 ,
          -0.3385073 , -0.09726544],
         ...,
         [-0.8365049 , -0.6705599 , -0.16773564, ...,  0.47805798,
          -0.9906987 ,  0.8902399 ],
         [ 0.7086138 , -0.5144989 ,  0.44489926, ..., -0.8905642 ,
          -0.5660547 , -0.7389344 ],
         [ 0.6546022 , -0.9851249 , -0.77033716, ...,  0.28005597,
           0.74098605,  0.6707931 ]]]], dtype=float32), 'output_shape': (1, 128, 8, 8), 'from': [23], 'to': [10]}
torch node:
{'name': 'cos', 'output': array([[[[ 0.608728  , -0.8236428 ,  0.99002576, ..., -0.9919711 ,
          -0.5361205 , -0.5361205 ],
         [-0.14540541, -0.62660486, -0.97269154, ...,  0.8902399 ,
           0.977475  , -0.14540541],
         [-0.89162064, -0.86558175,  0.9555578 , ..., -0.95758283,
          -0.3385073 , -0.87535495],
         ...,
         [-0.02212154, -0.9911795 , -0.16773564, ...,  0.47805798,
          -0.44891348,  0.8902399 ],
         [ 0.7086138 , -0.5144989 ,  0.44489926, ..., -0.8905642 ,
          -0.5660547 , -0.7389344 ],
         [ 0.2726596 , -0.9851249 , -0.97701406, ...,  0.949802  ,
           0.95570254,  0.6707931 ]],

        [[ 0.608728  , -0.8236428 ,  0.99002576, ..., -0.9919711 ,
          -0.5361205 , -0.5361205 ],
         [-0.14540541, -0.62660486, -0.97269154, ...,  0.8902399 ,
           0.977475  , -0.14540541],
         [-0.89162064, -0.86558175,  0.9555578 , ..., -0.95758283,
          -0.3385073 , -0.87535495],
         ...,
         [-0.02212154, -0.9911795 , -0.16773564, ...,  0.47805798,
          -0.44891348,  0.8902399 ],
         [ 0.7086138 , -0.5144989 ,  0.44489926, ..., -0.8905642 ,
          -0.5660547 , -0.7389344 ],
         [ 0.2726596 , -0.9851249 , -0.97701406, ...,  0.949802  ,
           0.95570254,  0.6707931 ]],

        [[ 0.608728  , -0.8236428 ,  0.99002576, ..., -0.9919711 ,
          -0.5361205 , -0.5361205 ],
         [-0.14540541, -0.62660486, -0.97269154, ...,  0.8902399 ,
           0.977475  , -0.14540541],
         [-0.89162064, -0.86558175,  0.9555578 , ..., -0.95758283,
          -0.3385073 , -0.87535495],
         ...,
         [-0.02212154, -0.9911795 , -0.16773564, ...,  0.47805798,
          -0.44891348,  0.8902399 ],
         [ 0.7086138 , -0.5144989 ,  0.44489926, ..., -0.8905642 ,
          -0.5660547 , -0.7389344 ],
         [ 0.2726596 , -0.9851249 , -0.97701406, ...,  0.949802  ,
           0.95570254,  0.6707931 ]],

        ...,

        [[ 0.608728  , -0.8236428 ,  0.99002576, ..., -0.9919711 ,
          -0.5361205 , -0.5361205 ],
         [-0.14540541, -0.62660486, -0.97269154, ...,  0.8902399 ,
           0.977475  , -0.14540541],
         [-0.89162064, -0.86558175,  0.9555578 , ..., -0.95758283,
          -0.3385073 , -0.87535495],
         ...,
         [-0.02212154, -0.9911795 , -0.16773564, ...,  0.47805798,
          -0.44891348,  0.8902399 ],
         [ 0.7086138 , -0.5144989 ,  0.44489926, ..., -0.8905642 ,
          -0.5660547 , -0.7389344 ],
         [ 0.2726596 , -0.9851249 , -0.97701406, ...,  0.949802  ,
           0.95570254,  0.6707931 ]],

        [[ 0.608728  , -0.8236428 ,  0.99002576, ..., -0.9919711 ,
          -0.5361205 , -0.5361205 ],
         [-0.14540541, -0.62660486, -0.97269154, ...,  0.8902399 ,
           0.977475  , -0.14540541],
         [-0.89162064, -0.86558175,  0.9555578 , ..., -0.95758283,
          -0.3385073 , -0.87535495],
         ...,
         [-0.02212154, -0.9911795 , -0.16773564, ...,  0.47805798,
          -0.44891348,  0.8902399 ],
         [ 0.7086138 , -0.5144989 ,  0.44489926, ..., -0.8905642 ,
          -0.5660547 , -0.7389344 ],
         [ 0.2726596 , -0.9851249 , -0.97701406, ...,  0.949802  ,
           0.95570254,  0.6707931 ]],

        [[ 0.608728  , -0.8236428 ,  0.99002576, ..., -0.9919711 ,
          -0.5361205 , -0.5361205 ],
         [-0.14540541, -0.62660486, -0.97269154, ...,  0.8902399 ,
           0.977475  , -0.14540541],
         [-0.89162064, -0.86558175,  0.9555578 , ..., -0.95758283,
          -0.3385073 , -0.87535495],
         ...,
         [-0.02212154, -0.9911795 , -0.16773564, ...,  0.47805798,
          -0.44891348,  0.8902399 ],
         [ 0.7086138 , -0.5144989 ,  0.44489926, ..., -0.8905642 ,
          -0.5660547 , -0.7389344 ],
         [ 0.2726596 , -0.9851249 , -0.97701406, ...,  0.949802  ,
           0.95570254,  0.6707931 ]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 8, 8]), 'from': [23], 'to': [10]}

generate models:153

analyse output arrays in iter:169

pre layer res:
3:relu
{'name': 'relu', 'output': array([[[[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [1.2854742e+03, 1.2854742e+03, 1.2854742e+03, ...,
                    inf,           inf,           inf],
         [9.2560454e+13, 1.2854742e+03, 6.4000000e+01, ...,
                    inf,           inf,           inf],
         [          inf,           inf, 1.0847294e+30, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [1.2854742e+03, 1.2854742e+03, 1.2854742e+03, ...,
                    inf,           inf,           inf],
         [9.2560454e+13, 1.2854742e+03, 6.4000000e+01, ...,
                    inf,           inf,           inf],
         [          inf,           inf, 1.0847294e+30, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [1.2854742e+03, 1.2854742e+03, 1.2854742e+03, ...,
                    inf,           inf,           inf],
         [9.2560454e+13, 1.2854742e+03, 6.4000000e+01, ...,
                    inf,           inf,           inf],
         [          inf,           inf, 1.0847294e+30, ...,
                    inf,           inf,           inf]],

        ...,

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [1.2854742e+03, 1.2854742e+03, 1.2854742e+03, ...,
                    inf,           inf,           inf],
         [9.2560454e+13, 1.2854742e+03, 6.4000000e+01, ...,
                    inf,           inf,           inf],
         [          inf,           inf, 1.0847294e+30, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [1.2854742e+03, 1.2854742e+03, 1.2854742e+03, ...,
                    inf,           inf,           inf],
         [9.2560454e+13, 1.2854742e+03, 6.4000000e+01, ...,
                    inf,           inf,           inf],
         [          inf,           inf, 1.0847294e+30, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [1.2854742e+03, 1.2854742e+03, 1.2854742e+03, ...,
                    inf,           inf,           inf],
         [9.2560454e+13, 1.2854742e+03, 6.4000000e+01, ...,
                    inf,           inf,           inf],
         [          inf,           inf, 1.0847294e+30, ...,
                    inf,           inf,           inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [2], 'to': [19]}
tf node:
{'name': 'cos', 'output': array([[[[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-0.84573895, -0.84573895, -0.84573895, ...,         nan,
                  nan,         nan],
         [ 0.9503187 , -0.84573895,  0.39185724, ...,         nan,
                  nan,         nan],
         [        nan,         nan,  0.1195938 , ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-0.84573895, -0.84573895, -0.84573895, ...,         nan,
                  nan,         nan],
         [ 0.9503187 , -0.84573895,  0.39185724, ...,         nan,
                  nan,         nan],
         [        nan,         nan,  0.1195938 , ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-0.84573895, -0.84573895, -0.84573895, ...,         nan,
                  nan,         nan],
         [ 0.9503187 , -0.84573895,  0.39185724, ...,         nan,
                  nan,         nan],
         [        nan,         nan,  0.1195938 , ...,         nan,
                  nan,         nan]],

        ...,

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-0.84573895, -0.84573895, -0.84573895, ...,         nan,
                  nan,         nan],
         [ 0.9503187 , -0.84573895,  0.39185724, ...,         nan,
                  nan,         nan],
         [        nan,         nan,  0.1195938 , ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-0.84573895, -0.84573895, -0.84573895, ...,         nan,
                  nan,         nan],
         [ 0.9503187 , -0.84573895,  0.39185724, ...,         nan,
                  nan,         nan],
         [        nan,         nan,  0.1195938 , ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-0.84573895, -0.84573895, -0.84573895, ...,         nan,
                  nan,         nan],
         [ 0.9503187 , -0.84573895,  0.39185724, ...,         nan,
                  nan,         nan],
         [        nan,         nan,  0.1195938 , ...,         nan,
                  nan,         nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [3], 'to': [4]}
ms node:
{'name': 'cos', 'output': array([[[[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-0.84573895, -0.84573895, -0.84573895, ...,         nan,
                  nan,         nan],
         [ 0.9503187 , -0.84573895,  0.39185724, ...,         nan,
                  nan,         nan],
         [        nan,         nan, -0.929197  , ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-0.84573895, -0.84573895, -0.84573895, ...,         nan,
                  nan,         nan],
         [ 0.9503187 , -0.84573895,  0.39185724, ...,         nan,
                  nan,         nan],
         [        nan,         nan, -0.929197  , ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-0.84573895, -0.84573895, -0.84573895, ...,         nan,
                  nan,         nan],
         [ 0.9503187 , -0.84573895,  0.39185724, ...,         nan,
                  nan,         nan],
         [        nan,         nan, -0.929197  , ...,         nan,
                  nan,         nan]],

        ...,

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-0.84573895, -0.84573895, -0.84573895, ...,         nan,
                  nan,         nan],
         [ 0.9503187 , -0.84573895,  0.39185724, ...,         nan,
                  nan,         nan],
         [        nan,         nan, -0.929197  , ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-0.8458041 , -0.8458041 , -0.8458041 , ...,         nan,
                  nan,         nan],
         [ 0.352545  , -0.8458041 ,  0.39185724, ...,         nan,
                  nan,         nan],
         [        nan,         nan,  0.38401544, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-0.8458041 , -0.8458041 , -0.8458041 , ...,         nan,
                  nan,         nan],
         [ 0.352545  , -0.8458041 ,  0.39185724, ...,         nan,
                  nan,         nan],
         [        nan,         nan,  0.38401544, ...,         nan,
                  nan,         nan]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [3], 'to': [4]}
torch node:
{'name': 'cos', 'output': array([[[[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-0.84573895, -0.84573895, -0.84573895, ...,         nan,
                  nan,         nan],
         [ 0.9503187 , -0.84573895,  0.39185724, ...,         nan,
                  nan,         nan],
         [        nan,         nan,  0.1195938 , ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-0.84573895, -0.84573895, -0.84573895, ...,         nan,
                  nan,         nan],
         [ 0.9503187 , -0.84573895,  0.39185724, ...,         nan,
                  nan,         nan],
         [        nan,         nan,  0.1195938 , ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-0.84573895, -0.84573895, -0.84573895, ...,         nan,
                  nan,         nan],
         [ 0.9503187 , -0.84573895,  0.39185724, ...,         nan,
                  nan,         nan],
         [        nan,         nan,  0.1195938 , ...,         nan,
                  nan,         nan]],

        ...,

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-0.84573895, -0.84573895, -0.84573895, ...,         nan,
                  nan,         nan],
         [ 0.9503187 , -0.84573895,  0.39185724, ...,         nan,
                  nan,         nan],
         [        nan,         nan,  0.1195938 , ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-0.84573895, -0.84573895, -0.84573895, ...,         nan,
                  nan,         nan],
         [ 0.9503187 , -0.84573895,  0.39185724, ...,         nan,
                  nan,         nan],
         [        nan,         nan,  0.1195938 , ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [-0.84573895, -0.84573895, -0.84573895, ...,         nan,
                  nan,         nan],
         [ 0.9503187 , -0.84573895,  0.39185724, ...,         nan,
                  nan,         nan],
         [        nan,         nan,  0.1195938 , ...,         nan,
                  nan,         nan]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [3], 'to': [4]}

generate models:167

analyse output arrays in iter:171

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [19], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [9], 'to': []}

generate models:169

analyse output arrays in iter:190

pre layer res:
18:reshape
{'name': 'reshape', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [17], 'to': [11]}
tf node:
{'name': 'softmax', 'output': array([[[[   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         ...,
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan]],

        [[   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         ...,
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan]],

        [[   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         ...,
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan]],

        ...,

        [[0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         ...,
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625]],

        [[0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         ...,
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625]],

        [[0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         ...,
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [18], 'to': [8]}
ms node:
{'name': 'softmax', 'output': array([[[[   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         ...,
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan]],

        [[   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         ...,
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan]],

        [[   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         ...,
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan]],

        ...,

        [[0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         ...,
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625]],

        [[0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         ...,
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625]],

        [[0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         ...,
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625]]]],
      dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [18], 'to': [8]}
torch node:
{'name': 'softmax', 'output': array([[[[   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         ...,
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan]],

        [[   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         ...,
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan]],

        [[   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         ...,
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan],
         [   nan,    nan,    nan, ...,    nan,    nan,    nan]],

        ...,

        [[0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         ...,
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625]],

        [[0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         ...,
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625]],

        [[0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         ...,
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625],
         [0.0625, 0.0625, 0.0625, ..., 0.0625, 0.0625, 0.0625]]]],
      dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [18], 'to': [8]}

generate models:188

analyse output arrays in iter:198

pre layer res:
23:reshape
{'name': 'reshape', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [22], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [23], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [23], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [23], 'to': []}

generate models:196

analyse output arrays in iter:203

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[157627.12, 518370.75, 523550.88, ..., 519780.78, 519792.84,
          157627.12],
         [518370.75, 521803.03, 523279.25, ..., 515264.1 , 519792.84,
          519792.84],
         [442532.8 , 511527.12, 517647.2 , ..., 524206.03, 516899.  ,
          524206.03],
         ...,
         [463538.03, 444999.97, 516892.03, ..., 524103.1 , 522623.12,
          510464.03],
         [505983.47, 496554.03, 519132.88, ..., 523279.25, 486903.94,
          505983.47],
         [389080.12, 505983.47, 505983.47, ..., 516899.  , 524206.03,
          505983.47]],

        [[157627.12, 518370.75, 523550.88, ..., 519780.78, 519792.84,
          157627.12],
         [518370.75, 521803.03, 523279.25, ..., 515264.1 , 519792.84,
          519792.84],
         [442532.8 , 511527.12, 517647.2 , ..., 524206.03, 516899.  ,
          524206.03],
         ...,
         [463538.03, 444999.97, 516892.03, ..., 524103.1 , 522623.12,
          510464.03],
         [505983.47, 496554.03, 519132.88, ..., 523279.25, 486903.94,
          505983.47],
         [389080.12, 505983.47, 505983.47, ..., 516899.  , 524206.03,
          505983.47]],

        [[157627.12, 518370.75, 523550.88, ..., 519780.78, 519792.84,
          157627.12],
         [518370.75, 521803.03, 523279.25, ..., 515264.1 , 519792.84,
          519792.84],
         [442532.8 , 511527.12, 517647.2 , ..., 524206.03, 516899.  ,
          524206.03],
         ...,
         [463538.03, 444999.97, 516892.03, ..., 524103.1 , 522623.12,
          510464.03],
         [505983.47, 496554.03, 519132.88, ..., 523279.25, 486903.94,
          505983.47],
         [389080.12, 505983.47, 505983.47, ..., 516899.  , 524206.03,
          505983.47]],

        ...,

        [[157627.12, 518370.75, 523550.88, ..., 519780.78, 519792.84,
          157627.12],
         [518370.75, 521803.03, 523279.25, ..., 515264.1 , 519792.84,
          519792.84],
         [442532.8 , 511527.12, 517647.2 , ..., 524206.03, 516899.  ,
          524206.03],
         ...,
         [463538.03, 444999.97, 516892.03, ..., 524103.1 , 522623.12,
          510464.03],
         [505983.47, 496554.03, 519132.88, ..., 523279.25, 486903.94,
          505983.47],
         [389080.12, 505983.47, 505983.47, ..., 516899.  , 524206.03,
          505983.47]],

        [[157627.12, 518370.75, 523550.88, ..., 519780.78, 519792.84,
          157627.12],
         [518370.75, 521803.03, 523279.25, ..., 515264.1 , 519792.84,
          519792.84],
         [442532.8 , 511527.12, 517647.2 , ..., 524206.03, 516899.  ,
          524206.03],
         ...,
         [463538.03, 444999.97, 516892.03, ..., 524103.1 , 522623.12,
          510464.03],
         [505983.47, 496554.03, 519132.88, ..., 523279.25, 486903.94,
          505983.47],
         [389080.12, 505983.47, 505983.47, ..., 516899.  , 524206.03,
          505983.47]],

        [[157627.12, 518370.75, 523550.88, ..., 519780.78, 519792.84,
          157627.12],
         [518370.75, 521803.03, 523279.25, ..., 515264.1 , 519792.84,
          519792.84],
         [442532.8 , 511527.12, 517647.2 , ..., 524206.03, 516899.  ,
          524206.03],
         ...,
         [463538.03, 444999.97, 516892.03, ..., 524103.1 , 522623.12,
          510464.03],
         [505983.47, 496554.03, 519132.88, ..., 523279.25, 486903.94,
          505983.47],
         [389080.12, 505983.47, 505983.47, ..., 516899.  , 524206.03,
          505983.47]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [16], 'to': [11]}
tf node:
{'name': 'cos', 'output': array([[[[ 0.65606856, -0.10796519, -0.2504158 , ..., -0.42202282,
          -0.80729026,  0.65606856],
         [-0.10796519, -0.9801753 , -0.99151707, ...,  0.4680302 ,
          -0.80729026, -0.80729026],
         [-0.21562682,  0.90356755,  0.77582   , ...,  0.9929364 ,
           0.98117644,  0.9929364 ],
         ...,
         [-0.6798821 ,  0.9402455 ,  0.88175315, ..., -0.8161212 ,
           0.943579  ,  0.70195246],
         [ 0.12641998,  0.98391366, -0.9222415 , ..., -0.99151707,
           0.49018815,  0.12641998],
         [ 0.9875379 ,  0.12641998,  0.12641998, ...,  0.98117644,
           0.9929364 ,  0.12641998]],

        [[ 0.65606856, -0.10796519, -0.2504158 , ..., -0.42202282,
          -0.80729026,  0.65606856],
         [-0.10796519, -0.9801753 , -0.99151707, ...,  0.4680302 ,
          -0.80729026, -0.80729026],
         [-0.21562682,  0.90356755,  0.77582   , ...,  0.9929364 ,
           0.98117644,  0.9929364 ],
         ...,
         [-0.6798821 ,  0.9402455 ,  0.88175315, ..., -0.8161212 ,
           0.943579  ,  0.70195246],
         [ 0.12641998,  0.98391366, -0.9222415 , ..., -0.99151707,
           0.49018815,  0.12641998],
         [ 0.9875379 ,  0.12641998,  0.12641998, ...,  0.98117644,
           0.9929364 ,  0.12641998]],

        [[ 0.65606856, -0.10796519, -0.2504158 , ..., -0.42202282,
          -0.80729026,  0.65606856],
         [-0.10796519, -0.9801753 , -0.99151707, ...,  0.4680302 ,
          -0.80729026, -0.80729026],
         [-0.21562682,  0.90356755,  0.77582   , ...,  0.9929364 ,
           0.98117644,  0.9929364 ],
         ...,
         [-0.6798821 ,  0.9402455 ,  0.88175315, ..., -0.8161212 ,
           0.943579  ,  0.70195246],
         [ 0.12641998,  0.98391366, -0.9222415 , ..., -0.99151707,
           0.49018815,  0.12641998],
         [ 0.9875379 ,  0.12641998,  0.12641998, ...,  0.98117644,
           0.9929364 ,  0.12641998]],

        ...,

        [[ 0.65606856, -0.10796519, -0.2504158 , ..., -0.42202282,
          -0.80729026,  0.65606856],
         [-0.10796519, -0.9801753 , -0.99151707, ...,  0.4680302 ,
          -0.80729026, -0.80729026],
         [-0.21562682,  0.90356755,  0.77582   , ...,  0.9929364 ,
           0.98117644,  0.9929364 ],
         ...,
         [-0.6798821 ,  0.9402455 ,  0.88175315, ..., -0.8161212 ,
           0.943579  ,  0.70195246],
         [ 0.12641998,  0.98391366, -0.9222415 , ..., -0.99151707,
           0.49018815,  0.12641998],
         [ 0.9875379 ,  0.12641998,  0.12641998, ...,  0.98117644,
           0.9929364 ,  0.12641998]],

        [[ 0.65606856, -0.10796519, -0.2504158 , ..., -0.42202282,
          -0.80729026,  0.65606856],
         [-0.10796519, -0.9801753 , -0.99151707, ...,  0.4680302 ,
          -0.80729026, -0.80729026],
         [-0.21562682,  0.90356755,  0.77582   , ...,  0.9929364 ,
           0.98117644,  0.9929364 ],
         ...,
         [-0.6798821 ,  0.9402455 ,  0.88175315, ..., -0.8161212 ,
           0.943579  ,  0.70195246],
         [ 0.12641998,  0.98391366, -0.9222415 , ..., -0.99151707,
           0.49018815,  0.12641998],
         [ 0.9875379 ,  0.12641998,  0.12641998, ...,  0.98117644,
           0.9929364 ,  0.12641998]],

        [[ 0.65606856, -0.10796519, -0.2504158 , ..., -0.42202282,
          -0.80729026,  0.65606856],
         [-0.10796519, -0.9801753 , -0.99151707, ...,  0.4680302 ,
          -0.80729026, -0.80729026],
         [-0.21562682,  0.90356755,  0.77582   , ...,  0.9929364 ,
           0.98117644,  0.9929364 ],
         ...,
         [-0.6798821 ,  0.9402455 ,  0.88175315, ..., -0.8161212 ,
           0.943579  ,  0.70195246],
         [ 0.12641998,  0.98391366, -0.9222415 , ..., -0.99151707,
           0.49018815,  0.12641998],
         [ 0.9875379 ,  0.12641998,  0.12641998, ...,  0.98117644,
           0.9929364 ,  0.12641998]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [9], 'to': [10]}
ms node:
{'name': 'cos', 'output': array([[[[ 0.6560685 , -0.10796519, -0.2504158 , ..., -0.42202282,
          -0.80729026,  0.6560685 ],
         [-0.10796519, -0.9801753 , -0.99151707, ...,  0.46803018,
          -0.80729026, -0.80729026],
         [-0.21562682,  0.90356755,  0.77581996, ...,  0.9929364 ,
           0.98117644,  0.9929364 ],
         ...,
         [-0.67988205,  0.95042527,  0.8817531 , ..., -0.8161212 ,
           0.943579  ,  0.70195246],
         [ 0.12641996,  0.98391366, -0.9222415 , ..., -0.99151707,
           0.49018815,  0.12641996],
         [ 0.9875379 ,  0.12641996,  0.12641996, ...,  0.98117644,
           0.9929364 ,  0.12641996]],

        [[ 0.6560685 , -0.10796519, -0.2504158 , ..., -0.42202282,
          -0.80729026,  0.6560685 ],
         [-0.10796519, -0.9801753 , -0.99151707, ...,  0.46803018,
          -0.80729026, -0.80729026],
         [-0.21562682,  0.90356755,  0.77581996, ...,  0.9929364 ,
           0.98117644,  0.9929364 ],
         ...,
         [-0.67988205,  0.95042527,  0.8817531 , ..., -0.8161212 ,
           0.943579  ,  0.70195246],
         [ 0.12641996,  0.98391366, -0.9222415 , ..., -0.99151707,
           0.49018815,  0.12641996],
         [ 0.9875379 ,  0.12641996,  0.12641996, ...,  0.98117644,
           0.9929364 ,  0.12641996]],

        [[ 0.6560685 , -0.10796519, -0.2504158 , ..., -0.42202282,
          -0.80729026,  0.6560685 ],
         [-0.10796519, -0.9801753 , -0.99151707, ...,  0.46803018,
          -0.80729026, -0.80729026],
         [-0.21562682,  0.90356755,  0.77581996, ...,  0.9929364 ,
           0.98117644,  0.9929364 ],
         ...,
         [-0.67988205,  0.95042527,  0.8817531 , ..., -0.8161212 ,
           0.943579  ,  0.70195246],
         [ 0.12641996,  0.98391366, -0.9222415 , ..., -0.99151707,
           0.49018815,  0.12641996],
         [ 0.9875379 ,  0.12641996,  0.12641996, ...,  0.98117644,
           0.9929364 ,  0.12641996]],

        ...,

        [[ 0.6560685 , -0.10796519, -0.2504158 , ..., -0.42202282,
          -0.80729026,  0.6560685 ],
         [-0.10796519, -0.9801753 , -0.99151707, ...,  0.46803018,
          -0.80729026, -0.80729026],
         [-0.21562682,  0.90356755,  0.77581996, ...,  0.9929364 ,
           0.98117644,  0.9929364 ],
         ...,
         [-0.67988205,  0.95042527,  0.8817531 , ..., -0.8161212 ,
           0.943579  ,  0.70195246],
         [ 0.12641996,  0.98391366, -0.9222415 , ..., -0.99151707,
           0.49018815,  0.12641996],
         [ 0.9875379 ,  0.12641996,  0.12641996, ...,  0.98117644,
           0.9929364 ,  0.12641996]],

        [[ 0.76551896,  0.7582169 , -0.93973684, ..., -0.47782353,
          -0.80729026,  0.76551896],
         [ 0.7582169 , -0.9801753 , -0.99151707, ...,  0.9933964 ,
          -0.80729026, -0.80729026],
         [-0.24603145,  0.894503  ,  0.77581996, ...,  0.46454287,
           0.98117644,  0.46454287],
         ...,
         [-0.9991205 ,  0.70742667,  0.8881376 , ..., -0.8161212 ,
           0.943579  ,  0.9845364 ],
         [-0.70291734,  0.4382829 , -0.8340115 , ..., -0.99151707,
           0.9884337 , -0.70291734],
         [ 0.86126715, -0.70291734, -0.70291734, ...,  0.98117644,
           0.46454287, -0.70291734]],

        [[ 0.76551896,  0.7582169 , -0.93973684, ..., -0.47782353,
          -0.80729026,  0.76551896],
         [ 0.7582169 , -0.9801753 , -0.99151707, ...,  0.9933964 ,
          -0.80729026, -0.80729026],
         [-0.24603145,  0.894503  ,  0.77581996, ...,  0.46454287,
           0.98117644,  0.46454287],
         ...,
         [-0.9991205 ,  0.70742667,  0.8881376 , ..., -0.8161212 ,
           0.943579  ,  0.9845364 ],
         [-0.70291734,  0.4382829 , -0.8340115 , ..., -0.99151707,
           0.9884337 , -0.70291734],
         [ 0.86126715, -0.70291734, -0.70291734, ...,  0.98117644,
           0.46454287, -0.70291734]]]], dtype=float32), 'output_shape': (1, 128, 8, 8), 'from': [9], 'to': [10]}
torch node:
{'name': 'cos', 'output': array([[[[ 0.6560685 , -0.10796519, -0.2504158 , ..., -0.42202282,
          -0.80729026,  0.6560685 ],
         [-0.10796519, -0.9801753 , -0.99151707, ...,  0.46803018,
          -0.80729026, -0.80729026],
         [-0.21562682,  0.90356755,  0.77581996, ...,  0.9929364 ,
           0.98117644,  0.9929364 ],
         ...,
         [-0.67988205,  0.95042527,  0.8817531 , ..., -0.8161212 ,
           0.943579  ,  0.70195246],
         [ 0.12641996,  0.98391366, -0.9222415 , ..., -0.99151707,
           0.49018815,  0.12641996],
         [ 0.9875379 ,  0.12641996,  0.12641996, ...,  0.98117644,
           0.9929364 ,  0.12641996]],

        [[ 0.6560685 , -0.10796519, -0.2504158 , ..., -0.42202282,
          -0.80729026,  0.6560685 ],
         [-0.10796519, -0.9801753 , -0.99151707, ...,  0.46803018,
          -0.80729026, -0.80729026],
         [-0.21562682,  0.90356755,  0.77581996, ...,  0.9929364 ,
           0.98117644,  0.9929364 ],
         ...,
         [-0.67988205,  0.95042527,  0.8817531 , ..., -0.8161212 ,
           0.943579  ,  0.70195246],
         [ 0.12641996,  0.98391366, -0.9222415 , ..., -0.99151707,
           0.49018815,  0.12641996],
         [ 0.9875379 ,  0.12641996,  0.12641996, ...,  0.98117644,
           0.9929364 ,  0.12641996]],

        [[ 0.6560685 , -0.10796519, -0.2504158 , ..., -0.42202282,
          -0.80729026,  0.6560685 ],
         [-0.10796519, -0.9801753 , -0.99151707, ...,  0.46803018,
          -0.80729026, -0.80729026],
         [-0.21562682,  0.90356755,  0.77581996, ...,  0.9929364 ,
           0.98117644,  0.9929364 ],
         ...,
         [-0.67988205,  0.95042527,  0.8817531 , ..., -0.8161212 ,
           0.943579  ,  0.70195246],
         [ 0.12641996,  0.98391366, -0.9222415 , ..., -0.99151707,
           0.49018815,  0.12641996],
         [ 0.9875379 ,  0.12641996,  0.12641996, ...,  0.98117644,
           0.9929364 ,  0.12641996]],

        ...,

        [[ 0.6560685 , -0.10796519, -0.2504158 , ..., -0.42202282,
          -0.80729026,  0.6560685 ],
         [-0.10796519, -0.9801753 , -0.99151707, ...,  0.46803018,
          -0.80729026, -0.80729026],
         [-0.21562682,  0.90356755,  0.77581996, ...,  0.9929364 ,
           0.98117644,  0.9929364 ],
         ...,
         [-0.67988205,  0.95042527,  0.8817531 , ..., -0.8161212 ,
           0.943579  ,  0.70195246],
         [ 0.12641996,  0.98391366, -0.9222415 , ..., -0.99151707,
           0.49018815,  0.12641996],
         [ 0.9875379 ,  0.12641996,  0.12641996, ...,  0.98117644,
           0.9929364 ,  0.12641996]],

        [[ 0.6560685 , -0.10796519, -0.2504158 , ..., -0.42202282,
          -0.80729026,  0.6560685 ],
         [-0.10796519, -0.9801753 , -0.99151707, ...,  0.46803018,
          -0.80729026, -0.80729026],
         [-0.21562682,  0.90356755,  0.77581996, ...,  0.9929364 ,
           0.98117644,  0.9929364 ],
         ...,
         [-0.67988205,  0.95042527,  0.8817531 , ..., -0.8161212 ,
           0.943579  ,  0.70195246],
         [ 0.12641996,  0.98391366, -0.9222415 , ..., -0.99151707,
           0.49018815,  0.12641996],
         [ 0.9875379 ,  0.12641996,  0.12641996, ...,  0.98117644,
           0.9929364 ,  0.12641996]],

        [[ 0.6560685 , -0.10796519, -0.2504158 , ..., -0.42202282,
          -0.80729026,  0.6560685 ],
         [-0.10796519, -0.9801753 , -0.99151707, ...,  0.46803018,
          -0.80729026, -0.80729026],
         [-0.21562682,  0.90356755,  0.77581996, ...,  0.9929364 ,
           0.98117644,  0.9929364 ],
         ...,
         [-0.67988205,  0.95042527,  0.8817531 , ..., -0.8161212 ,
           0.943579  ,  0.70195246],
         [ 0.12641996,  0.98391366, -0.9222415 , ..., -0.99151707,
           0.49018815,  0.12641996],
         [ 0.9875379 ,  0.12641996,  0.12641996, ...,  0.98117644,
           0.9929364 ,  0.12641996]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 8, 8]), 'from': [9], 'to': [10]}

pre layer res:
5:conv2d
{'name': 'conv2d', 'output': array([[[[1231.4612 , 1231.4612 , 1231.4612 , ..., 1231.4612 ,
          1231.4612 , 1231.4612 ],
         [1231.4612 ,    0.     , 2273.9526 , ..., 4059.9998 ,
             0.     ,    0.     ],
         [1231.4612 ,   90.87806, 3685.9653 , ..., 4059.9998 ,
          3746.8894 ,    0.     ],
         ...,
         [3952.5627 , 2213.287  , 2273.538  , ..., 3040.031  ,
          3039.699  , 3952.5627 ],
         [1231.4612 , 3039.699  , 3952.5627 , ..., 3932.9229 ,
             0.     ,    0.     ],
         [1231.4612 , 3039.699  , 3952.5627 , ...,   90.87806,
          3952.5627 , 3952.5627 ]],

        [[1231.4612 , 1231.4612 , 1231.4612 , ..., 1231.4612 ,
          1231.4612 , 1231.4612 ],
         [1231.4612 ,    0.     , 2273.9526 , ..., 4059.9998 ,
             0.     ,    0.     ],
         [1231.4612 ,   90.87806, 3685.9653 , ..., 4059.9998 ,
          3746.8894 ,    0.     ],
         ...,
         [3952.5627 , 2213.287  , 2273.538  , ..., 3040.031  ,
          3039.699  , 3952.5627 ],
         [1231.4612 , 3039.699  , 3952.5627 , ..., 3932.9229 ,
             0.     ,    0.     ],
         [1231.4612 , 3039.699  , 3952.5627 , ...,   90.87806,
          3952.5627 , 3952.5627 ]],

        [[1231.4612 , 1231.4612 , 1231.4612 , ..., 1231.4612 ,
          1231.4612 , 1231.4612 ],
         [1231.4612 ,    0.     , 2273.9526 , ..., 4059.9998 ,
             0.     ,    0.     ],
         [1231.4612 ,   90.87806, 3685.9653 , ..., 4059.9998 ,
          3746.8894 ,    0.     ],
         ...,
         [3952.5627 , 2213.287  , 2273.538  , ..., 3040.031  ,
          3039.699  , 3952.5627 ],
         [1231.4612 , 3039.699  , 3952.5627 , ..., 3932.9229 ,
             0.     ,    0.     ],
         [1231.4612 , 3039.699  , 3952.5627 , ...,   90.87806,
          3952.5627 , 3952.5627 ]],

        ...,

        [[1231.4612 , 1231.4612 , 1231.4612 , ..., 1231.4612 ,
          1231.4612 , 1231.4612 ],
         [1231.4612 ,    0.     , 2273.9526 , ..., 4059.9998 ,
             0.     ,    0.     ],
         [1231.4612 ,   90.87806, 3685.9653 , ..., 4059.9998 ,
          3746.8894 ,    0.     ],
         ...,
         [3952.5627 , 2213.287  , 2273.538  , ..., 3040.031  ,
          3039.699  , 3952.5627 ],
         [1231.4612 , 3039.699  , 3952.5627 , ..., 3932.9229 ,
             0.     ,    0.     ],
         [1231.4612 , 3039.699  , 3952.5627 , ...,   90.87806,
          3952.5627 , 3952.5627 ]],

        [[1231.4612 , 1231.4612 , 1231.4612 , ..., 1231.4612 ,
          1231.4612 , 1231.4612 ],
         [1231.4612 ,    0.     , 2273.9526 , ..., 4059.9998 ,
             0.     ,    0.     ],
         [1231.4612 ,   90.87806, 3685.9653 , ..., 4059.9998 ,
          3746.8894 ,    0.     ],
         ...,
         [3952.5627 , 2213.287  , 2273.538  , ..., 3040.031  ,
          3039.699  , 3952.5627 ],
         [1231.4612 , 3039.699  , 3952.5627 , ..., 3932.9229 ,
             0.     ,    0.     ],
         [1231.4612 , 3039.699  , 3952.5627 , ...,   90.87806,
          3952.5627 , 3952.5627 ]],

        [[1231.4612 , 1231.4612 , 1231.4612 , ..., 1231.4612 ,
          1231.4612 , 1231.4612 ],
         [1231.4612 ,    0.     , 2273.9526 , ..., 4059.9998 ,
             0.     ,    0.     ],
         [1231.4612 ,   90.87806, 3685.9653 , ..., 4059.9998 ,
          3746.8894 ,    0.     ],
         ...,
         [3952.5627 , 2213.287  , 2273.538  , ..., 3040.031  ,
          3039.699  , 3952.5627 ],
         [1231.4612 , 3039.699  , 3952.5627 , ..., 3932.9229 ,
             0.     ,    0.     ],
         [1231.4612 , 3039.699  , 3952.5627 , ...,   90.87806,
          3952.5627 , 3952.5627 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [4], 'to': [14, 15]}
tf node:
{'name': 'sin', 'output': array([[[[-0.04312519, -0.04312519, -0.04312519, ..., -0.04312519,
          -0.04312519, -0.04312519],
         [-0.04312519,  0.        , -0.53156275, ...,  0.8733546 ,
           0.        ,  0.        ],
         [-0.04312519,  0.226154  , -0.76891947, ...,  0.8733546 ,
           0.8576239 ,  0.        ],
         ...,
         [ 0.4252028 ,  0.9993846 , -0.82769924, ..., -0.85765034,
          -0.9784289 ,  0.4252028 ],
         [-0.04312519, -0.9784289 ,  0.4252028 , ..., -0.34397852,
           0.        ,  0.        ],
         [-0.04312519, -0.9784289 ,  0.4252028 , ...,  0.226154  ,
           0.4252028 ,  0.4252028 ]],

        [[-0.04312519, -0.04312519, -0.04312519, ..., -0.04312519,
          -0.04312519, -0.04312519],
         [-0.04312519,  0.        , -0.53156275, ...,  0.8733546 ,
           0.        ,  0.        ],
         [-0.04312519,  0.226154  , -0.76891947, ...,  0.8733546 ,
           0.8576239 ,  0.        ],
         ...,
         [ 0.4252028 ,  0.9993846 , -0.82769924, ..., -0.85765034,
          -0.9784289 ,  0.4252028 ],
         [-0.04312519, -0.9784289 ,  0.4252028 , ..., -0.34397852,
           0.        ,  0.        ],
         [-0.04312519, -0.9784289 ,  0.4252028 , ...,  0.226154  ,
           0.4252028 ,  0.4252028 ]],

        [[-0.04312519, -0.04312519, -0.04312519, ..., -0.04312519,
          -0.04312519, -0.04312519],
         [-0.04312519,  0.        , -0.53156275, ...,  0.8733546 ,
           0.        ,  0.        ],
         [-0.04312519,  0.226154  , -0.76891947, ...,  0.8733546 ,
           0.8576239 ,  0.        ],
         ...,
         [ 0.4252028 ,  0.9993846 , -0.82769924, ..., -0.85765034,
          -0.9784289 ,  0.4252028 ],
         [-0.04312519, -0.9784289 ,  0.4252028 , ..., -0.34397852,
           0.        ,  0.        ],
         [-0.04312519, -0.9784289 ,  0.4252028 , ...,  0.226154  ,
           0.4252028 ,  0.4252028 ]],

        ...,

        [[-0.04312519, -0.04312519, -0.04312519, ..., -0.04312519,
          -0.04312519, -0.04312519],
         [-0.04312519,  0.        , -0.53156275, ...,  0.8733546 ,
           0.        ,  0.        ],
         [-0.04312519,  0.226154  , -0.76891947, ...,  0.8733546 ,
           0.8576239 ,  0.        ],
         ...,
         [ 0.4252028 ,  0.9993846 , -0.82769924, ..., -0.85765034,
          -0.9784289 ,  0.4252028 ],
         [-0.04312519, -0.9784289 ,  0.4252028 , ..., -0.34397852,
           0.        ,  0.        ],
         [-0.04312519, -0.9784289 ,  0.4252028 , ...,  0.226154  ,
           0.4252028 ,  0.4252028 ]],

        [[-0.04312519, -0.04312519, -0.04312519, ..., -0.04312519,
          -0.04312519, -0.04312519],
         [-0.04312519,  0.        , -0.53156275, ...,  0.8733546 ,
           0.        ,  0.        ],
         [-0.04312519,  0.226154  , -0.76891947, ...,  0.8733546 ,
           0.8576239 ,  0.        ],
         ...,
         [ 0.4252028 ,  0.9993846 , -0.82769924, ..., -0.85765034,
          -0.9784289 ,  0.4252028 ],
         [-0.04312519, -0.9784289 ,  0.4252028 , ..., -0.34397852,
           0.        ,  0.        ],
         [-0.04312519, -0.9784289 ,  0.4252028 , ...,  0.226154  ,
           0.4252028 ,  0.4252028 ]],

        [[-0.04312519, -0.04312519, -0.04312519, ..., -0.04312519,
          -0.04312519, -0.04312519],
         [-0.04312519,  0.        , -0.53156275, ...,  0.8733546 ,
           0.        ,  0.        ],
         [-0.04312519,  0.226154  , -0.76891947, ...,  0.8733546 ,
           0.8576239 ,  0.        ],
         ...,
         [ 0.4252028 ,  0.9993846 , -0.82769924, ..., -0.85765034,
          -0.9784289 ,  0.4252028 ],
         [-0.04312519, -0.9784289 ,  0.4252028 , ..., -0.34397852,
           0.        ,  0.        ],
         [-0.04312519, -0.9784289 ,  0.4252028 , ...,  0.226154  ,
           0.4252028 ,  0.4252028 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [5], 'to': [6, 16]}
ms node:
{'name': 'sin', 'output': array([[[[-0.04312519, -0.04312519, -0.04312519, ..., -0.04312519,
          -0.04312519, -0.04312519],
         [-0.04312519,  0.        , -0.53156275, ...,  0.87335455,
           0.        ,  0.        ],
         [-0.04312519,  0.226154  , -0.76891947, ...,  0.87335455,
           0.8577494 ,  0.        ],
         ...,
         [ 0.4252028 ,  0.9993846 , -0.82769924, ..., -0.85765034,
          -0.9784289 ,  0.4252028 ],
         [-0.04312519, -0.9784289 ,  0.4252028 , ..., -0.34374928,
           0.        ,  0.        ],
         [-0.04312519, -0.9784289 ,  0.4252028 , ...,  0.226154  ,
           0.4252028 ,  0.4252028 ]],

        [[-0.04312519, -0.04312519, -0.04312519, ..., -0.04312519,
          -0.04312519, -0.04312519],
         [-0.04312519,  0.        , -0.53156275, ...,  0.87335455,
           0.        ,  0.        ],
         [-0.04312519,  0.226154  , -0.76891947, ...,  0.87335455,
           0.8577494 ,  0.        ],
         ...,
         [ 0.4252028 ,  0.9993846 , -0.82769924, ..., -0.85765034,
          -0.9784289 ,  0.4252028 ],
         [-0.04312519, -0.9784289 ,  0.4252028 , ..., -0.34374928,
           0.        ,  0.        ],
         [-0.04312519, -0.9784289 ,  0.4252028 , ...,  0.226154  ,
           0.4252028 ,  0.4252028 ]],

        [[-0.04312519, -0.04312519, -0.04312519, ..., -0.04312519,
          -0.04312519, -0.04312519],
         [-0.04312519,  0.        , -0.53156275, ...,  0.87335455,
           0.        ,  0.        ],
         [-0.04312519,  0.226154  , -0.76891947, ...,  0.87335455,
           0.8577494 ,  0.        ],
         ...,
         [ 0.4252028 ,  0.9993846 , -0.82769924, ..., -0.85765034,
          -0.9784289 ,  0.4252028 ],
         [-0.04312519, -0.9784289 ,  0.4252028 , ..., -0.34374928,
           0.        ,  0.        ],
         [-0.04312519, -0.9784289 ,  0.4252028 , ...,  0.226154  ,
           0.4252028 ,  0.4252028 ]],

        ...,

        [[-0.04312519, -0.04312519, -0.04312519, ..., -0.04312519,
          -0.04312519, -0.04312519],
         [-0.04312519,  0.        , -0.53156275, ...,  0.87335455,
           0.        ,  0.        ],
         [-0.04312519,  0.226154  , -0.76891947, ...,  0.87335455,
           0.8577494 ,  0.        ],
         ...,
         [ 0.4252028 ,  0.9993846 , -0.82769924, ..., -0.85765034,
          -0.9784289 ,  0.4252028 ],
         [-0.04312519, -0.9784289 ,  0.4252028 , ..., -0.34374928,
           0.        ,  0.        ],
         [-0.04312519, -0.9784289 ,  0.4252028 , ...,  0.226154  ,
           0.4252028 ,  0.4252028 ]],

        [[-0.04288127, -0.04288127, -0.04288127, ..., -0.04288127,
          -0.04288127, -0.04288127],
         [-0.04288127,  0.        , -0.5319763 , ...,  0.87335455,
           0.        ,  0.        ],
         [-0.04288127,  0.22612427, -0.7673563 , ...,  0.87335455,
           0.8583763 ,  0.        ],
         ...,
         [ 0.4252028 ,  0.99941003, -0.827288  , ..., -0.85765034,
          -0.9786803 ,  0.4252028 ],
         [-0.04288127, -0.9786803 ,  0.4252028 , ..., -0.3428321 ,
           0.        ,  0.        ],
         [-0.04288127, -0.9786803 ,  0.4252028 , ...,  0.22612427,
           0.4252028 ,  0.4252028 ]],

        [[-0.04288127, -0.04288127, -0.04288127, ..., -0.04288127,
          -0.04288127, -0.04288127],
         [-0.04288127,  0.        , -0.5319763 , ...,  0.87335455,
           0.        ,  0.        ],
         [-0.04288127,  0.22612427, -0.7673563 , ...,  0.87335455,
           0.8583763 ,  0.        ],
         ...,
         [ 0.4252028 ,  0.99941003, -0.827288  , ..., -0.85765034,
          -0.9786803 ,  0.4252028 ],
         [-0.04288127, -0.9786803 ,  0.4252028 , ..., -0.3428321 ,
           0.        ,  0.        ],
         [-0.04288127, -0.9786803 ,  0.4252028 , ...,  0.22612427,
           0.4252028 ,  0.4252028 ]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [5], 'to': [6, 16]}
torch node:
{'name': 'sin', 'output': array([[[[-0.04312519, -0.04312519, -0.04312519, ..., -0.04312519,
          -0.04312519, -0.04312519],
         [-0.04312519,  0.        , -0.53156275, ...,  0.87335455,
           0.        ,  0.        ],
         [-0.04312519,  0.226154  , -0.76891947, ...,  0.87335455,
           0.8576239 ,  0.        ],
         ...,
         [ 0.4252028 ,  0.9993846 , -0.82769924, ..., -0.85765034,
          -0.9784289 ,  0.4252028 ],
         [-0.04312519, -0.9784289 ,  0.4252028 , ..., -0.34397855,
           0.        ,  0.        ],
         [-0.04312519, -0.9784289 ,  0.4252028 , ...,  0.226154  ,
           0.4252028 ,  0.4252028 ]],

        [[-0.04312519, -0.04312519, -0.04312519, ..., -0.04312519,
          -0.04312519, -0.04312519],
         [-0.04312519,  0.        , -0.53156275, ...,  0.87335455,
           0.        ,  0.        ],
         [-0.04312519,  0.226154  , -0.76891947, ...,  0.87335455,
           0.8576239 ,  0.        ],
         ...,
         [ 0.4252028 ,  0.9993846 , -0.82769924, ..., -0.85765034,
          -0.9784289 ,  0.4252028 ],
         [-0.04312519, -0.9784289 ,  0.4252028 , ..., -0.34397855,
           0.        ,  0.        ],
         [-0.04312519, -0.9784289 ,  0.4252028 , ...,  0.226154  ,
           0.4252028 ,  0.4252028 ]],

        [[-0.04312519, -0.04312519, -0.04312519, ..., -0.04312519,
          -0.04312519, -0.04312519],
         [-0.04312519,  0.        , -0.53156275, ...,  0.87335455,
           0.        ,  0.        ],
         [-0.04312519,  0.226154  , -0.76891947, ...,  0.87335455,
           0.8576239 ,  0.        ],
         ...,
         [ 0.4252028 ,  0.9993846 , -0.82769924, ..., -0.85765034,
          -0.9784289 ,  0.4252028 ],
         [-0.04312519, -0.9784289 ,  0.4252028 , ..., -0.34397855,
           0.        ,  0.        ],
         [-0.04312519, -0.9784289 ,  0.4252028 , ...,  0.226154  ,
           0.4252028 ,  0.4252028 ]],

        ...,

        [[-0.04312519, -0.04312519, -0.04312519, ..., -0.04312519,
          -0.04312519, -0.04312519],
         [-0.04312519,  0.        , -0.53156275, ...,  0.87335455,
           0.        ,  0.        ],
         [-0.04312519,  0.226154  , -0.76891947, ...,  0.87335455,
           0.8576239 ,  0.        ],
         ...,
         [ 0.4252028 ,  0.9993846 , -0.82769924, ..., -0.85765034,
          -0.9784289 ,  0.4252028 ],
         [-0.04312519, -0.9784289 ,  0.4252028 , ..., -0.34397855,
           0.        ,  0.        ],
         [-0.04312519, -0.9784289 ,  0.4252028 , ...,  0.226154  ,
           0.4252028 ,  0.4252028 ]],

        [[-0.04300323, -0.04300323, -0.04300323, ..., -0.04300323,
          -0.04300323, -0.04300323],
         [-0.04300323,  0.        , -0.5319763 , ...,  0.87335455,
           0.        ,  0.        ],
         [-0.04300323,  0.22612427, -0.7673563 , ...,  0.87335455,
           0.85825104,  0.        ],
         ...,
         [ 0.4252028 ,  0.99941003, -0.827288  , ..., -0.85765034,
          -0.9786803 ,  0.4252028 ],
         [-0.04300323, -0.9786803 ,  0.4252028 , ..., -0.34306142,
           0.        ,  0.        ],
         [-0.04300323, -0.9786803 ,  0.4252028 , ...,  0.22612427,
           0.4252028 ,  0.4252028 ]],

        [[-0.04300323, -0.04300323, -0.04300323, ..., -0.04300323,
          -0.04300323, -0.04300323],
         [-0.04300323,  0.        , -0.5319763 , ...,  0.87335455,
           0.        ,  0.        ],
         [-0.04300323,  0.22612427, -0.7673563 , ...,  0.87335455,
           0.85825104,  0.        ],
         ...,
         [ 0.4252028 ,  0.99941003, -0.827288  , ..., -0.85765034,
          -0.9786803 ,  0.4252028 ],
         [-0.04300323, -0.9786803 ,  0.4252028 , ..., -0.34306142,
           0.        ,  0.        ],
         [-0.04300323, -0.9786803 ,  0.4252028 , ...,  0.22612427,
           0.4252028 ,  0.4252028 ]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [5], 'to': [6, 16]}

generate models:201

analyse output arrays in iter:229

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [8], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [9], 'to': []}

generate models:227

analyse output arrays in iter:230

pre layer res:
5:conv2d
{'name': 'conv2d', 'output': array([[[[ 45.18377 ,  50.222584,  34.230965, ...,  29.724945,
           20.076859,  26.472197],
         [ 38.549953,  37.893063,  50.18188 , ...,  50.245667,
           -7.127199,  49.286205],
         [-31.636839,  50.080505,  50.222584, ...,  45.535866,
           46.444843,  29.724945],
         ...,
         [ 48.43597 , -37.031223,  28.981419, ...,  50.18188 ,
           45.18377 ,  46.444843],
         [ 33.51368 ,  37.955837,  26.5651  , ...,  50.18188 ,
           49.286205,  33.437992],
         [ 49.956547,  49.93904 ,  47.81176 , ...,  49.956547,
           44.436455,  24.000254]],

        [[ 45.18377 ,  50.222584,  34.230965, ...,  29.724945,
           20.076859,  26.472197],
         [ 38.549953,  37.893063,  50.18188 , ...,  50.245667,
           -7.127199,  49.286205],
         [-31.636839,  50.080505,  50.222584, ...,  45.535866,
           46.444843,  29.724945],
         ...,
         [ 48.43597 , -37.031223,  28.981419, ...,  50.18188 ,
           45.18377 ,  46.444843],
         [ 33.51368 ,  37.955837,  26.5651  , ...,  50.18188 ,
           49.286205,  33.437992],
         [ 49.956547,  49.93904 ,  47.81176 , ...,  49.956547,
           44.436455,  24.000254]],

        [[ 45.18377 ,  50.222584,  34.230965, ...,  29.724945,
           20.076859,  26.472197],
         [ 38.549953,  37.893063,  50.18188 , ...,  50.245667,
           -7.127199,  49.286205],
         [-31.636839,  50.080505,  50.222584, ...,  45.535866,
           46.444843,  29.724945],
         ...,
         [ 48.43597 , -37.031223,  28.981419, ...,  50.18188 ,
           45.18377 ,  46.444843],
         [ 33.51368 ,  37.955837,  26.5651  , ...,  50.18188 ,
           49.286205,  33.437992],
         [ 49.956547,  49.93904 ,  47.81176 , ...,  49.956547,
           44.436455,  24.000254]],

        ...,

        [[ 45.18377 ,  50.222584,  34.230965, ...,  29.724945,
           20.076859,  26.472197],
         [ 38.549953,  37.893063,  50.18188 , ...,  50.245667,
           -7.127199,  49.286205],
         [-31.636839,  50.080505,  50.222584, ...,  45.535866,
           46.444843,  29.724945],
         ...,
         [ 48.43597 , -37.031223,  28.981419, ...,  50.18188 ,
           45.18377 ,  46.444843],
         [ 33.51368 ,  37.955837,  26.5651  , ...,  50.18188 ,
           49.286205,  33.437992],
         [ 49.956547,  49.93904 ,  47.81176 , ...,  49.956547,
           44.436455,  24.000254]],

        [[ 45.18377 ,  50.222584,  34.230965, ...,  29.724945,
           20.076859,  26.472197],
         [ 38.549953,  37.893063,  50.18188 , ...,  50.245667,
           -7.127199,  49.286205],
         [-31.636839,  50.080505,  50.222584, ...,  45.535866,
           46.444843,  29.724945],
         ...,
         [ 48.43597 , -37.031223,  28.981419, ...,  50.18188 ,
           45.18377 ,  46.444843],
         [ 33.51368 ,  37.955837,  26.5651  , ...,  50.18188 ,
           49.286205,  33.437992],
         [ 49.956547,  49.93904 ,  47.81176 , ...,  49.956547,
           44.436455,  24.000254]],

        [[ 45.18377 ,  50.222584,  34.230965, ...,  29.724945,
           20.076859,  26.472197],
         [ 38.549953,  37.893063,  50.18188 , ...,  50.245667,
           -7.127199,  49.286205],
         [-31.636839,  50.080505,  50.222584, ...,  45.535866,
           46.444843,  29.724945],
         ...,
         [ 48.43597 , -37.031223,  28.981419, ...,  50.18188 ,
           45.18377 ,  46.444843],
         [ 33.51368 ,  37.955837,  26.5651  , ...,  50.18188 ,
           49.286205,  33.437992],
         [ 49.956547,  49.93904 ,  47.81176 , ...,  49.956547,
           44.436455,  24.000254]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [4], 'to': [13]}
tf node:
{'name': 'log', 'output': array([[[[3.8107378, 3.9164648, 3.5331306, ..., 3.3919866, 2.9995677,
          3.276095 ],
         [3.651955 , 3.634768 , 3.915654 , ..., 3.9169242,       nan,
          3.8976443],
         [      nan, 3.913632 , 3.9164648, ..., 3.8185003, 3.8382654,
          3.3919866],
         ...,
         [3.8802428,       nan, 3.3666549, ..., 3.915654 , 3.8107378,
          3.8382654],
         [3.5119536, 3.6364233, 3.2795982, ..., 3.915654 , 3.8976443,
          3.5096927],
         [3.9111536, 3.910803 , 3.8672717, ..., 3.9111536, 3.7940602,
          3.1780643]],

        [[3.8107378, 3.9164648, 3.5331306, ..., 3.3919866, 2.9995677,
          3.276095 ],
         [3.651955 , 3.634768 , 3.915654 , ..., 3.9169242,       nan,
          3.8976443],
         [      nan, 3.913632 , 3.9164648, ..., 3.8185003, 3.8382654,
          3.3919866],
         ...,
         [3.8802428,       nan, 3.3666549, ..., 3.915654 , 3.8107378,
          3.8382654],
         [3.5119536, 3.6364233, 3.2795982, ..., 3.915654 , 3.8976443,
          3.5096927],
         [3.9111536, 3.910803 , 3.8672717, ..., 3.9111536, 3.7940602,
          3.1780643]],

        [[3.8107378, 3.9164648, 3.5331306, ..., 3.3919866, 2.9995677,
          3.276095 ],
         [3.651955 , 3.634768 , 3.915654 , ..., 3.9169242,       nan,
          3.8976443],
         [      nan, 3.913632 , 3.9164648, ..., 3.8185003, 3.8382654,
          3.3919866],
         ...,
         [3.8802428,       nan, 3.3666549, ..., 3.915654 , 3.8107378,
          3.8382654],
         [3.5119536, 3.6364233, 3.2795982, ..., 3.915654 , 3.8976443,
          3.5096927],
         [3.9111536, 3.910803 , 3.8672717, ..., 3.9111536, 3.7940602,
          3.1780643]],

        ...,

        [[3.8107378, 3.9164648, 3.5331306, ..., 3.3919866, 2.9995677,
          3.276095 ],
         [3.651955 , 3.634768 , 3.915654 , ..., 3.9169242,       nan,
          3.8976443],
         [      nan, 3.913632 , 3.9164648, ..., 3.8185003, 3.8382654,
          3.3919866],
         ...,
         [3.8802428,       nan, 3.3666549, ..., 3.915654 , 3.8107378,
          3.8382654],
         [3.5119536, 3.6364233, 3.2795982, ..., 3.915654 , 3.8976443,
          3.5096927],
         [3.9111536, 3.910803 , 3.8672717, ..., 3.9111536, 3.7940602,
          3.1780643]],

        [[3.8107378, 3.9164648, 3.5331306, ..., 3.3919866, 2.9995677,
          3.276095 ],
         [3.651955 , 3.634768 , 3.915654 , ..., 3.9169242,       nan,
          3.8976443],
         [      nan, 3.913632 , 3.9164648, ..., 3.8185003, 3.8382654,
          3.3919866],
         ...,
         [3.8802428,       nan, 3.3666549, ..., 3.915654 , 3.8107378,
          3.8382654],
         [3.5119536, 3.6364233, 3.2795982, ..., 3.915654 , 3.8976443,
          3.5096927],
         [3.9111536, 3.910803 , 3.8672717, ..., 3.9111536, 3.7940602,
          3.1780643]],

        [[3.8107378, 3.9164648, 3.5331306, ..., 3.3919866, 2.9995677,
          3.276095 ],
         [3.651955 , 3.634768 , 3.915654 , ..., 3.9169242,       nan,
          3.8976443],
         [      nan, 3.913632 , 3.9164648, ..., 3.8185003, 3.8382654,
          3.3919866],
         ...,
         [3.8802428,       nan, 3.3666549, ..., 3.915654 , 3.8107378,
          3.8382654],
         [3.5119536, 3.6364233, 3.2795982, ..., 3.915654 , 3.8976443,
          3.5096927],
         [3.9111536, 3.910803 , 3.8672717, ..., 3.9111536, 3.7940602,
          3.1780643]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [5], 'to': [19]}
ms node:
{'name': 'log', 'output': array([[[[3.8107407, 3.9164624, 3.5331278, ..., 3.3919866, 2.9995706,
          3.2760925],
         [3.6519532, 3.6347666, 3.9156516, ..., 3.9169219,       nan,
          3.8976421],
         [      nan, 3.9136295, 3.9164624, ..., 3.8185031, 3.8382654,
          3.3919866],
         ...,
         [3.8802402,       nan, 3.366654 , ..., 3.9156516, 3.8107407,
          3.8382654],
         [3.5119572, 3.636422 , 3.2795951, ..., 3.9156516, 3.8976421,
          3.5096962],
         [3.9111514, 3.910801 , 3.8672717, ..., 3.9111514, 3.794063 ,
          3.1780622]],

        [[3.8107407, 3.9164624, 3.5331278, ..., 3.3919866, 2.9995706,
          3.2760925],
         [3.6519532, 3.6347666, 3.9156516, ..., 3.9169219,       nan,
          3.8976421],
         [      nan, 3.9136295, 3.9164624, ..., 3.8185031, 3.8382654,
          3.3919866],
         ...,
         [3.8802402,       nan, 3.366654 , ..., 3.9156516, 3.8107407,
          3.8382654],
         [3.5119572, 3.636422 , 3.2795951, ..., 3.9156516, 3.8976421,
          3.5096962],
         [3.9111514, 3.910801 , 3.8672717, ..., 3.9111514, 3.794063 ,
          3.1780622]],

        [[3.8107407, 3.9164624, 3.5331278, ..., 3.3919866, 2.9995706,
          3.2760925],
         [3.6519532, 3.6347666, 3.9156516, ..., 3.9169219,       nan,
          3.8976421],
         [      nan, 3.9136295, 3.9164624, ..., 3.8185031, 3.8382654,
          3.3919866],
         ...,
         [3.8802402,       nan, 3.366654 , ..., 3.9156516, 3.8107407,
          3.8382654],
         [3.5119572, 3.636422 , 3.2795951, ..., 3.9156516, 3.8976421,
          3.5096962],
         [3.9111514, 3.910801 , 3.8672717, ..., 3.9111514, 3.794063 ,
          3.1780622]],

        ...,

        [[3.8107407, 3.9164624, 3.5331278, ..., 3.3919866, 2.9995706,
          3.2760925],
         [3.6519532, 3.6347666, 3.9156516, ..., 3.9169219,       nan,
          3.8976421],
         [      nan, 3.9136295, 3.9164624, ..., 3.8185031, 3.8382654,
          3.3919866],
         ...,
         [3.8802402,       nan, 3.366654 , ..., 3.9156516, 3.8107407,
          3.8382654],
         [3.5119572, 3.636422 , 3.2795951, ..., 3.9156516, 3.8976421,
          3.5096962],
         [3.9111514, 3.910801 , 3.8672717, ..., 3.9111514, 3.794063 ,
          3.1780622]],

        [[3.8107405, 3.9164617, 3.533128 , ..., 3.3919857, 2.9995701,
          3.2760932],
         [3.6519527, 3.6347666, 3.9156516, ..., 3.9169226,       nan,
          3.8976429],
         [      nan, 3.913629 , 3.9164617, ..., 3.8185027, 3.8382657,
          3.3919857],
         ...,
         [3.8802395,       nan, 3.3666532, ..., 3.9156516, 3.8107405,
          3.8382657],
         [3.5119574, 3.6364224, 3.2795959, ..., 3.9156516, 3.8976429,
          3.5096962],
         [3.9111514, 3.9108016, 3.8672714, ..., 3.9111514, 3.7940629,
          3.1780627]],

        [[3.8107405, 3.9164617, 3.533128 , ..., 3.3919857, 2.9995701,
          3.2760932],
         [3.6519527, 3.6347666, 3.9156516, ..., 3.9169226,       nan,
          3.8976429],
         [      nan, 3.913629 , 3.9164617, ..., 3.8185027, 3.8382657,
          3.3919857],
         ...,
         [3.8802395,       nan, 3.3666532, ..., 3.9156516, 3.8107405,
          3.8382657],
         [3.5119574, 3.6364224, 3.2795959, ..., 3.9156516, 3.8976429,
          3.5096962],
         [3.9111514, 3.9108016, 3.8672714, ..., 3.9111514, 3.7940629,
          3.1780627]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [5], 'to': [19]}
torch node:
{'name': 'log', 'output': array([[[[3.8107378, 3.9164648, 3.5331306, ..., 3.3919866, 2.9995677,
          3.276095 ],
         [3.651955 , 3.634768 , 3.915654 , ..., 3.9169242,       nan,
          3.8976443],
         [      nan, 3.913632 , 3.9164648, ..., 3.8185003, 3.8382654,
          3.3919866],
         ...,
         [3.8802426,       nan, 3.3666549, ..., 3.915654 , 3.8107378,
          3.8382654],
         [3.5119536, 3.6364233, 3.2795982, ..., 3.915654 , 3.8976443,
          3.5096927],
         [3.9111536, 3.910803 , 3.8672717, ..., 3.9111536, 3.7940602,
          3.1780643]],

        [[3.8107378, 3.9164648, 3.5331306, ..., 3.3919866, 2.9995677,
          3.276095 ],
         [3.651955 , 3.634768 , 3.915654 , ..., 3.9169242,       nan,
          3.8976443],
         [      nan, 3.913632 , 3.9164648, ..., 3.8185003, 3.8382654,
          3.3919866],
         ...,
         [3.8802426,       nan, 3.3666549, ..., 3.915654 , 3.8107378,
          3.8382654],
         [3.5119536, 3.6364233, 3.2795982, ..., 3.915654 , 3.8976443,
          3.5096927],
         [3.9111536, 3.910803 , 3.8672717, ..., 3.9111536, 3.7940602,
          3.1780643]],

        [[3.8107378, 3.9164648, 3.5331306, ..., 3.3919866, 2.9995677,
          3.276095 ],
         [3.651955 , 3.634768 , 3.915654 , ..., 3.9169242,       nan,
          3.8976443],
         [      nan, 3.913632 , 3.9164648, ..., 3.8185003, 3.8382654,
          3.3919866],
         ...,
         [3.8802426,       nan, 3.3666549, ..., 3.915654 , 3.8107378,
          3.8382654],
         [3.5119536, 3.6364233, 3.2795982, ..., 3.915654 , 3.8976443,
          3.5096927],
         [3.9111536, 3.910803 , 3.8672717, ..., 3.9111536, 3.7940602,
          3.1780643]],

        ...,

        [[3.8107378, 3.9164648, 3.5331306, ..., 3.3919866, 2.9995677,
          3.276095 ],
         [3.651955 , 3.634768 , 3.915654 , ..., 3.9169242,       nan,
          3.8976443],
         [      nan, 3.913632 , 3.9164648, ..., 3.8185003, 3.8382654,
          3.3919866],
         ...,
         [3.8802426,       nan, 3.3666549, ..., 3.915654 , 3.8107378,
          3.8382654],
         [3.5119536, 3.6364233, 3.2795982, ..., 3.915654 , 3.8976443,
          3.5096927],
         [3.9111536, 3.910803 , 3.8672717, ..., 3.9111536, 3.7940602,
          3.1780643]],

        [[3.8107376, 3.916464 , 3.533131 , ..., 3.3919857, 2.9995673,
          3.2760956],
         [3.6519542, 3.634768 , 3.915654 , ..., 3.916925 ,       nan,
          3.897645 ],
         [      nan, 3.9136312, 3.916464 , ..., 3.8184998, 3.838266 ,
          3.3919857],
         ...,
         [3.8802419,       nan, 3.3666542, ..., 3.915654 , 3.8107376,
          3.838266 ],
         [3.5119538, 3.6364238, 3.2795992, ..., 3.915654 , 3.897645 ,
          3.5096927],
         [3.9111536, 3.9108038, 3.8672717, ..., 3.9111536, 3.79406  ,
          3.1780648]],

        [[3.8107376, 3.916464 , 3.533131 , ..., 3.3919857, 2.9995673,
          3.2760956],
         [3.6519542, 3.634768 , 3.915654 , ..., 3.916925 ,       nan,
          3.897645 ],
         [      nan, 3.9136312, 3.916464 , ..., 3.8184998, 3.838266 ,
          3.3919857],
         ...,
         [3.8802419,       nan, 3.3666542, ..., 3.915654 , 3.8107376,
          3.838266 ],
         [3.5119538, 3.6364238, 3.2795992, ..., 3.915654 , 3.897645 ,
          3.5096927],
         [3.9111536, 3.9108038, 3.8672717, ..., 3.9111536, 3.79406  ,
          3.1780648]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [5], 'to': [19]}

generate models:228

analyse output arrays in iter:238

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [12], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [9], 'to': []}

generate models:236

analyse output arrays in iter:245

pre layer res:
19:exp
{'name': 'exp', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [22], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [19], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [19], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [19], 'to': []}

generate models:243

analyse output arrays in iter:250

pre layer res:
21:add
{'name': 'add', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [9, 24], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [21], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [21], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [21], 'to': []}

generate models:248

analyse output arrays in iter:255

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [8], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [9], 'to': []}

generate models:253

analyse output arrays in iter:264

pre layer res:
19:transpose
{'name': 'transpose', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [13], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [19], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [19], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [19], 'to': []}

generate models:262

analyse output arrays in iter:274

pre layer res:
22:add
{'name': 'add', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [9, 25], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [22], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [22], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [22], 'to': []}

generate models:271

analyse the exceptions in iter:277
torch exception:
{'id': 30, 'name': 'flatten', 'frame_work': 'torch', 'input_datas': [tensor([265.1670,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000],
       grad_fn=<ConstantPadNdBackward0>)]}
Dimension out of range (expected to be in range of [-1, 0], but got 1)

generate models:274

analyse output arrays in iter:286

pre layer res:
8:relu
{'name': 'relu', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [7], 'to': [15]}
tf node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [8], 'to': [9]}
ms node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [8], 'to': [9]}
torch node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [8], 'to': [9]}

generate models:282

analyse output arrays in iter:288

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [23], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [9], 'to': []}

generate models:284

analyse output arrays in iter:290

pre layer res:
8:relu
{'name': 'relu', 'output': array([[[[3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11],
         [3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11],
         [3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11],
         ...,
         [3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11],
         [3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11],
         [3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11]],

        [[3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11],
         [3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11],
         [3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11],
         ...,
         [3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11],
         [3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11],
         [3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11]],

        [[3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11],
         [3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11],
         [3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11],
         ...,
         [3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11],
         [3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11],
         [3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11]],

        ...,

        [[3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11],
         [3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11],
         [3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11],
         ...,
         [3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11],
         [3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11],
         [3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11]],

        [[3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11],
         [3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11],
         [3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11],
         ...,
         [3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11],
         [3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11],
         [3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11]],

        [[3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11],
         [3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11],
         [3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11],
         ...,
         [3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11],
         [3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11],
         [3.0183047e+11, 3.0387316e+11, 3.0387136e+11, ...,
          5.0275938e+10, 1.0959112e+11, 1.0605690e+11]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [7], 'to': [11, 15]}
tf node:
{'name': 'cos', 'output': array([[[[-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567],
         [-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567],
         [-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567],
         ...,
         [-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567],
         [-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567],
         [-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567]],

        [[-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567],
         [-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567],
         [-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567],
         ...,
         [-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567],
         [-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567],
         [-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567]],

        [[-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567],
         [-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567],
         [-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567],
         ...,
         [-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567],
         [-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567],
         [-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567]],

        ...,

        [[-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567],
         [-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567],
         [-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567],
         ...,
         [-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567],
         [-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567],
         [-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567]],

        [[-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567],
         [-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567],
         [-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567],
         ...,
         [-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567],
         [-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567],
         [-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567]],

        [[-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567],
         [-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567],
         [-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567],
         ...,
         [-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567],
         [-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567],
         [-0.68304896, -0.9205766 ,  0.9804747 , ..., -0.51033396,
          -0.55731076,  0.11934567]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [8], 'to': [11]}
ms node:
{'name': 'cos', 'output': array([[[[-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         ...,
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.6830489 , -0.9205766 , -0.61652005, ..., -0.5103339 ,
          -0.957096  ,  0.11934567]],

        [[-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         ...,
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.6830489 , -0.9205766 , -0.61652005, ..., -0.5103339 ,
          -0.957096  ,  0.11934567]],

        [[-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         ...,
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.6830489 , -0.9205766 , -0.61652005, ..., -0.5103339 ,
          -0.957096  ,  0.11934567]],

        ...,

        [[-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         ...,
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.6830489 , -0.9205766 , -0.61652005, ..., -0.5103339 ,
          -0.957096  ,  0.11934567]],

        [[-0.40031356, -0.9205766 , -0.974494  , ..., -0.4354657 ,
           0.4145467 ,  0.36597785],
         [-0.40031356, -0.9205766 , -0.974494  , ..., -0.4354657 ,
           0.4145467 ,  0.36597785],
         [-0.40031356, -0.9205766 , -0.974494  , ..., -0.4354657 ,
           0.4145467 ,  0.36597785],
         ...,
         [-0.40031356, -0.9205766 , -0.974494  , ..., -0.4354657 ,
           0.4145467 ,  0.36597785],
         [-0.40031356, -0.9205766 , -0.974494  , ..., -0.4354657 ,
           0.4145467 ,  0.36597785],
         [-0.93241566, -0.70570344, -0.3185933 , ..., -0.4354657 ,
          -0.74876434,  0.36597785]],

        [[-0.40031356, -0.9205766 , -0.974494  , ..., -0.4354657 ,
           0.4145467 ,  0.36597785],
         [-0.40031356, -0.9205766 , -0.974494  , ..., -0.4354657 ,
           0.4145467 ,  0.36597785],
         [-0.40031356, -0.9205766 , -0.974494  , ..., -0.4354657 ,
           0.4145467 ,  0.36597785],
         ...,
         [-0.40031356, -0.9205766 , -0.974494  , ..., -0.4354657 ,
           0.4145467 ,  0.36597785],
         [-0.40031356, -0.9205766 , -0.974494  , ..., -0.4354657 ,
           0.4145467 ,  0.36597785],
         [-0.93241566, -0.70570344, -0.3185933 , ..., -0.4354657 ,
          -0.74876434,  0.36597785]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [8], 'to': [11]}
torch node:
{'name': 'cos', 'output': array([[[[-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         ...,
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567]],

        [[-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         ...,
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567]],

        [[-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         ...,
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567]],

        ...,

        [[-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         ...,
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567]],

        [[-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         ...,
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567]],

        [[-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         ...,
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567],
         [-0.0124172 , -0.9205766 ,  0.98047465, ..., -0.5103339 ,
          -0.55731076,  0.11934567]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [8], 'to': [11]}

pre layer res:
13:add
{'name': 'add', 'output': array([[[[3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11],
         [3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11],
         [3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11],
         ...,
         [3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11],
         [3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11],
         [3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11]],

        [[3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11],
         [3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11],
         [3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11],
         ...,
         [3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11],
         [3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11],
         [3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11]],

        [[3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11],
         [3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11],
         [3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11],
         ...,
         [3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11],
         [3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11],
         [3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11]],

        ...,

        [[3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11],
         [3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11],
         [3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11],
         ...,
         [3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11],
         [3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11],
         [3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11]],

        [[3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11],
         [3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11],
         [3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11],
         ...,
         [3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11],
         [3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11],
         [3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11]],

        [[3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11],
         [3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11],
         [3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11],
         ...,
         [3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11],
         [3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11],
         [3.0418852e+11, 3.0624717e+11, 3.0624537e+11, ...,
          5.0668720e+10, 1.1044730e+11, 1.0688547e+11]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [11, 6], 'to': [16]}
tf node:
{'name': 'sin', 'output': array([[[[ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         ...,
         [ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ]],

        [[ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         ...,
         [ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ]],

        [[ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         ...,
         [ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ]],

        ...,

        [[ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         ...,
         [ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ]],

        [[ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         ...,
         [ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ]],

        [[ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         ...,
         [ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [ 0.35995594, -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [13], 'to': [9]}
ms node:
{'name': 'sin', 'output': array([[[[-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         ...,
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [ 0.35995594, -0.04549192, -0.52332366, ..., -0.0691337 ,
          -0.9092081 ,  0.9996782 ]],

        [[-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         ...,
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [ 0.35995594, -0.04549192, -0.52332366, ..., -0.0691337 ,
          -0.9092081 ,  0.9996782 ]],

        [[-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         ...,
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [ 0.35995594, -0.04549192, -0.52332366, ..., -0.0691337 ,
          -0.9092081 ,  0.9996782 ]],

        ...,

        [[-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         ...,
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [ 0.35995594, -0.04549192, -0.52332366, ..., -0.0691337 ,
          -0.9092081 ,  0.9996782 ]],

        [[ 0.65053654, -0.04549192,  0.1290326 , ..., -0.15359595,
           0.91311103,  0.9609386 ],
         [ 0.65053654, -0.04549192,  0.1290326 , ..., -0.15359595,
           0.91311103,  0.9609386 ],
         [ 0.65053654, -0.04549192,  0.1290326 , ..., -0.15359595,
           0.91311103,  0.9609386 ],
         ...,
         [ 0.65053654, -0.04549192,  0.1290326 , ..., -0.15359595,
           0.91311103,  0.9609386 ],
         [ 0.65053654, -0.04549192,  0.1290326 , ..., -0.15359595,
           0.91311103,  0.9609386 ],
         [-0.7314203 ,  0.90993005, -0.7775855 , ..., -0.15359595,
          -0.12248179,  0.9609386 ]],

        [[ 0.65053654, -0.04549192,  0.1290326 , ..., -0.15359595,
           0.91311103,  0.9609386 ],
         [ 0.65053654, -0.04549192,  0.1290326 , ..., -0.15359595,
           0.91311103,  0.9609386 ],
         [ 0.65053654, -0.04549192,  0.1290326 , ..., -0.15359595,
           0.91311103,  0.9609386 ],
         ...,
         [ 0.65053654, -0.04549192,  0.1290326 , ..., -0.15359595,
           0.91311103,  0.9609386 ],
         [ 0.65053654, -0.04549192,  0.1290326 , ..., -0.15359595,
           0.91311103,  0.9609386 ],
         [-0.7314203 ,  0.90993005, -0.7775855 , ..., -0.15359595,
          -0.12248179,  0.9609386 ]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [13], 'to': [9]}
torch node:
{'name': 'sin', 'output': array([[[[-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         ...,
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ]],

        [[-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         ...,
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ]],

        [[-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         ...,
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ]],

        ...,

        [[-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         ...,
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ]],

        [[-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         ...,
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ]],

        [[-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         ...,
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ],
         [-0.9055045 , -0.04549192, -0.5258124 , ..., -0.0691337 ,
           0.13187711,  0.9996782 ]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [13], 'to': [9]}

generate models:286

analyse output arrays in iter:294

pre layer res:
11:add
{'name': 'add', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [14, 23], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [11], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [11], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [11], 'to': []}

generate models:289

analyse output arrays in iter:306

pre layer res:
12:log
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [16], 'to': [9]}
tf node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        ...,

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [12], 'to': [10]}
ms node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        ...,

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': (1, 128, 8, 8), 'from': [12], 'to': [10]}
torch node:
{'name': 'maxpool2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 8, 8]), 'from': [12], 'to': [10]}

generate models:301

analyse output arrays in iter:309

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [8], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [9], 'to': []}

generate models:304

analyse output arrays in iter:334

pre layer res:
6:relu
{'name': 'relu', 'output': array([[[[7223009.   , 6345533.5  ,  263655.25 , ...,  105783.04 ,
            67092.45 ,  128277.49 ],
         [5714978.5  , 5908491.   ,  383339.38 , ...,  280639.97 ,
           255358.02 ,   54755.746],
         [ 403698.06 ,  467885.56 ,  239153.78 , ...,  363498.7  ,
           231246.72 ,  280639.97 ],
         ...,
         [2780948.5  , 3111999.8  , 3402017.2  , ..., 4866165.5  ,
          3988476.   , 2944159.5  ],
         [2174414.5  , 2727573.   , 3924558.8  , ..., 4725485.   ,
          4117852.   , 3111999.8  ],
         [2807828.5  , 3255403.8  , 4586859.   , ..., 4973026.5  ,
          4249280.5  , 3197653.   ]],

        [[7223009.   , 6345533.5  ,  263655.25 , ...,  105783.04 ,
            67092.45 ,  128277.49 ],
         [5714978.5  , 5908491.   ,  383339.38 , ...,  280639.97 ,
           255358.02 ,   54755.746],
         [ 403698.06 ,  467885.56 ,  239153.78 , ...,  363498.7  ,
           231246.72 ,  280639.97 ],
         ...,
         [2780948.5  , 3111999.8  , 3402017.2  , ..., 4866165.5  ,
          3988476.   , 2944159.5  ],
         [2174414.5  , 2727573.   , 3924558.8  , ..., 4725485.   ,
          4117852.   , 3111999.8  ],
         [2807828.5  , 3255403.8  , 4586859.   , ..., 4973026.5  ,
          4249280.5  , 3197653.   ]],

        [[7223009.   , 6345533.5  ,  263655.25 , ...,  105783.04 ,
            67092.45 ,  128277.49 ],
         [5714978.5  , 5908491.   ,  383339.38 , ...,  280639.97 ,
           255358.02 ,   54755.746],
         [ 403698.06 ,  467885.56 ,  239153.78 , ...,  363498.7  ,
           231246.72 ,  280639.97 ],
         ...,
         [2780948.5  , 3111999.8  , 3402017.2  , ..., 4866165.5  ,
          3988476.   , 2944159.5  ],
         [2174414.5  , 2727573.   , 3924558.8  , ..., 4725485.   ,
          4117852.   , 3111999.8  ],
         [2807828.5  , 3255403.8  , 4586859.   , ..., 4973026.5  ,
          4249280.5  , 3197653.   ]],

        ...,

        [[7223009.   , 6345533.5  ,  263655.25 , ...,  105783.04 ,
            67092.45 ,  128277.49 ],
         [5714978.5  , 5908491.   ,  383339.38 , ...,  280639.97 ,
           255358.02 ,   54755.746],
         [ 403698.06 ,  467885.56 ,  239153.78 , ...,  363498.7  ,
           231246.72 ,  280639.97 ],
         ...,
         [2780948.5  , 3111999.8  , 3402017.2  , ..., 4866165.5  ,
          3988476.   , 2944159.5  ],
         [2174414.5  , 2727573.   , 3924558.8  , ..., 4725485.   ,
          4117852.   , 3111999.8  ],
         [2807828.5  , 3255403.8  , 4586859.   , ..., 4973026.5  ,
          4249280.5  , 3197653.   ]],

        [[7223009.   , 6345533.5  ,  263655.25 , ...,  105783.04 ,
            67092.45 ,  128277.49 ],
         [5714978.5  , 5908491.   ,  383339.38 , ...,  280639.97 ,
           255358.02 ,   54755.746],
         [ 403698.06 ,  467885.56 ,  239153.78 , ...,  363498.7  ,
           231246.72 ,  280639.97 ],
         ...,
         [2780948.5  , 3111999.8  , 3402017.2  , ..., 4866165.5  ,
          3988476.   , 2944159.5  ],
         [2174414.5  , 2727573.   , 3924558.8  , ..., 4725485.   ,
          4117852.   , 3111999.8  ],
         [2807828.5  , 3255403.8  , 4586859.   , ..., 4973026.5  ,
          4249280.5  , 3197653.   ]],

        [[7223009.   , 6345533.5  ,  263655.25 , ...,  105783.04 ,
            67092.45 ,  128277.49 ],
         [5714978.5  , 5908491.   ,  383339.38 , ...,  280639.97 ,
           255358.02 ,   54755.746],
         [ 403698.06 ,  467885.56 ,  239153.78 , ...,  363498.7  ,
           231246.72 ,  280639.97 ],
         ...,
         [2780948.5  , 3111999.8  , 3402017.2  , ..., 4866165.5  ,
          3988476.   , 2944159.5  ],
         [2174414.5  , 2727573.   , 3924558.8  , ..., 4725485.   ,
          4117852.   , 3111999.8  ],
         [2807828.5  , 3255403.8  , 4586859.   , ..., 4973026.5  ,
          4249280.5  , 3197653.   ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [5], 'to': [15]}
tf node:
{'name': 'cos', 'output': array([[[[-0.8564022 ,  0.9895034 ,  0.9740887 , ...,  0.7845854 ,
           0.82510126,  0.9998187 ],
         [ 0.88247186, -0.953238  , -0.61989796, ...,  0.07372455,
          -0.99819833, -0.59964865],
         [-0.96511316, -0.30945444, -0.9991802 , ..., -0.758677  ,
           0.93351394,  0.07372455],
         ...,
         [-0.30746895,  0.62223095,  0.6462    , ..., -0.26828378,
          -0.47732407, -0.9721112 ],
         [ 0.40293917, -0.15274718,  0.88962483, ..., -0.28656432,
          -0.99998975,  0.62223095],
         [ 0.21893603, -0.8142568 , -0.20657301, ..., -0.00250078,
           0.9997088 , -0.19504489]],

        [[-0.8564022 ,  0.9895034 ,  0.9740887 , ...,  0.7845854 ,
           0.82510126,  0.9998187 ],
         [ 0.88247186, -0.953238  , -0.61989796, ...,  0.07372455,
          -0.99819833, -0.59964865],
         [-0.96511316, -0.30945444, -0.9991802 , ..., -0.758677  ,
           0.93351394,  0.07372455],
         ...,
         [-0.30746895,  0.62223095,  0.6462    , ..., -0.26828378,
          -0.47732407, -0.9721112 ],
         [ 0.40293917, -0.15274718,  0.88962483, ..., -0.28656432,
          -0.99998975,  0.62223095],
         [ 0.21893603, -0.8142568 , -0.20657301, ..., -0.00250078,
           0.9997088 , -0.19504489]],

        [[-0.8564022 ,  0.9895034 ,  0.9740887 , ...,  0.7845854 ,
           0.82510126,  0.9998187 ],
         [ 0.88247186, -0.953238  , -0.61989796, ...,  0.07372455,
          -0.99819833, -0.59964865],
         [-0.96511316, -0.30945444, -0.9991802 , ..., -0.758677  ,
           0.93351394,  0.07372455],
         ...,
         [-0.30746895,  0.62223095,  0.6462    , ..., -0.26828378,
          -0.47732407, -0.9721112 ],
         [ 0.40293917, -0.15274718,  0.88962483, ..., -0.28656432,
          -0.99998975,  0.62223095],
         [ 0.21893603, -0.8142568 , -0.20657301, ..., -0.00250078,
           0.9997088 , -0.19504489]],

        ...,

        [[-0.8564022 ,  0.9895034 ,  0.9740887 , ...,  0.7845854 ,
           0.82510126,  0.9998187 ],
         [ 0.88247186, -0.953238  , -0.61989796, ...,  0.07372455,
          -0.99819833, -0.59964865],
         [-0.96511316, -0.30945444, -0.9991802 , ..., -0.758677  ,
           0.93351394,  0.07372455],
         ...,
         [-0.30746895,  0.62223095,  0.6462    , ..., -0.26828378,
          -0.47732407, -0.9721112 ],
         [ 0.40293917, -0.15274718,  0.88962483, ..., -0.28656432,
          -0.99998975,  0.62223095],
         [ 0.21893603, -0.8142568 , -0.20657301, ..., -0.00250078,
           0.9997088 , -0.19504489]],

        [[-0.8564022 ,  0.9895034 ,  0.9740887 , ...,  0.7845854 ,
           0.82510126,  0.9998187 ],
         [ 0.88247186, -0.953238  , -0.61989796, ...,  0.07372455,
          -0.99819833, -0.59964865],
         [-0.96511316, -0.30945444, -0.9991802 , ..., -0.758677  ,
           0.93351394,  0.07372455],
         ...,
         [-0.30746895,  0.62223095,  0.6462    , ..., -0.26828378,
          -0.47732407, -0.9721112 ],
         [ 0.40293917, -0.15274718,  0.88962483, ..., -0.28656432,
          -0.99998975,  0.62223095],
         [ 0.21893603, -0.8142568 , -0.20657301, ..., -0.00250078,
           0.9997088 , -0.19504489]],

        [[-0.8564022 ,  0.9895034 ,  0.9740887 , ...,  0.7845854 ,
           0.82510126,  0.9998187 ],
         [ 0.88247186, -0.953238  , -0.61989796, ...,  0.07372455,
          -0.99819833, -0.59964865],
         [-0.96511316, -0.30945444, -0.9991802 , ..., -0.758677  ,
           0.93351394,  0.07372455],
         ...,
         [-0.30746895,  0.62223095,  0.6462    , ..., -0.26828378,
          -0.47732407, -0.9721112 ],
         [ 0.40293917, -0.15274718,  0.88962483, ..., -0.28656432,
          -0.99998975,  0.62223095],
         [ 0.21893603, -0.8142568 , -0.20657301, ..., -0.00250078,
           0.9997088 , -0.19504489]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [6], 'to': [7]}
ms node:
{'name': 'cos', 'output': array([[[[-0.8564022 ,  0.9895034 ,  0.9740887 , ...,  0.7845854 ,
           0.82510126,  0.99939907],
         [ 0.88247186, -0.953238  , -0.61989796, ...,  0.07372455,
          -0.99819833, -0.59964865],
         [-0.96511316, -0.3094544 , -0.9991802 , ..., -0.758677  ,
           0.93351394,  0.07372455],
         ...,
         [ 0.17010805,  0.62223095,  0.64619994, ..., -0.26828378,
          -0.4773241 , -0.9721112 ],
         [ 0.40293917, -0.15274718,  0.88962483, ..., -0.28656432,
          -0.99998975,  0.62223095],
         [ 0.21893603, -0.8142568 , -0.20657301, ..., -0.00250078,
           0.9997088 , -0.19504489]],

        [[-0.8564022 ,  0.9895034 ,  0.9740887 , ...,  0.7845854 ,
           0.82510126,  0.99939907],
         [ 0.88247186, -0.953238  , -0.61989796, ...,  0.07372455,
          -0.99819833, -0.59964865],
         [-0.96511316, -0.3094544 , -0.9991802 , ..., -0.758677  ,
           0.93351394,  0.07372455],
         ...,
         [ 0.17010805,  0.62223095,  0.64619994, ..., -0.26828378,
          -0.4773241 , -0.9721112 ],
         [ 0.40293917, -0.15274718,  0.88962483, ..., -0.28656432,
          -0.99998975,  0.62223095],
         [ 0.21893603, -0.8142568 , -0.20657301, ..., -0.00250078,
           0.9997088 , -0.19504489]],

        [[-0.8564022 ,  0.9895034 ,  0.9740887 , ...,  0.7845854 ,
           0.82510126,  0.99939907],
         [ 0.88247186, -0.953238  , -0.61989796, ...,  0.07372455,
          -0.99819833, -0.59964865],
         [-0.96511316, -0.3094544 , -0.9991802 , ..., -0.758677  ,
           0.93351394,  0.07372455],
         ...,
         [ 0.17010805,  0.62223095,  0.64619994, ..., -0.26828378,
          -0.4773241 , -0.9721112 ],
         [ 0.40293917, -0.15274718,  0.88962483, ..., -0.28656432,
          -0.99998975,  0.62223095],
         [ 0.21893603, -0.8142568 , -0.20657301, ..., -0.00250078,
           0.9997088 , -0.19504489]],

        ...,

        [[-0.8564022 ,  0.9895034 ,  0.9740887 , ...,  0.7845854 ,
           0.82510126,  0.99939907],
         [ 0.88247186, -0.953238  , -0.61989796, ...,  0.07372455,
          -0.99819833, -0.59964865],
         [-0.96511316, -0.3094544 , -0.9991802 , ..., -0.758677  ,
           0.93351394,  0.07372455],
         ...,
         [ 0.17010805,  0.62223095,  0.64619994, ..., -0.26828378,
          -0.4773241 , -0.9721112 ],
         [ 0.40293917, -0.15274718,  0.88962483, ..., -0.28656432,
          -0.99998975,  0.62223095],
         [ 0.21893603, -0.8142568 , -0.20657301, ..., -0.00250078,
           0.9997088 , -0.19504489]],

        [[-0.5040318 , -0.7062494 ,  0.90179545, ...,  0.8035748 ,
           0.8506689 ,  0.9983123 ],
         [-0.79493976, -0.09449125, -0.37774777, ...,  0.07372455,
          -0.99901396, -0.6027701 ],
         [-0.956461  , -0.00211924, -0.9913821 , ..., -0.5992228 ,
           0.98665065,  0.07372455],
         ...,
         [-0.97092396,  0.62223095,  0.99132717, ..., -0.95557696,
           0.75523615, -0.9999119 ],
         [-0.8844313 ,  0.33975136, -0.15287521, ..., -0.9610119 ,
           0.82313967,  0.62223095],
         [ 0.82529473, -0.4260706 ,  0.97564965, ...,  0.60047376,
           0.9997088 , -0.19405048]],

        [[-0.5040318 , -0.7062494 ,  0.90179545, ...,  0.8035748 ,
           0.8506689 ,  0.9983123 ],
         [-0.79493976, -0.09449125, -0.37774777, ...,  0.07372455,
          -0.99901396, -0.6027701 ],
         [-0.956461  , -0.00211924, -0.9913821 , ..., -0.5992228 ,
           0.98665065,  0.07372455],
         ...,
         [-0.97092396,  0.62223095,  0.99132717, ..., -0.95557696,
           0.75523615, -0.9999119 ],
         [-0.8844313 ,  0.33975136, -0.15287521, ..., -0.9610119 ,
           0.82313967,  0.62223095],
         [ 0.82529473, -0.4260706 ,  0.97564965, ...,  0.60047376,
           0.9997088 , -0.19405048]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [6], 'to': [7]}
torch node:
{'name': 'cos', 'output': array([[[[-0.8564022 ,  0.9895034 ,  0.9740887 , ...,  0.7845854 ,
           0.82510126,  0.9998187 ],
         [ 0.88247186, -0.953238  , -0.61989796, ...,  0.07372455,
          -0.99819833, -0.59964865],
         [-0.96511316, -0.3094544 , -0.9991802 , ..., -0.758677  ,
           0.93351394,  0.07372455],
         ...,
         [-0.30746895,  0.62223095,  0.64619994, ..., -0.26828378,
          -0.4773241 , -0.9721112 ],
         [ 0.40293917, -0.15274718,  0.88962483, ..., -0.28656432,
          -0.99998975,  0.62223095],
         [ 0.21893603, -0.8142568 , -0.20657301, ..., -0.00250078,
           0.9997088 , -0.19504489]],

        [[-0.8564022 ,  0.9895034 ,  0.9740887 , ...,  0.7845854 ,
           0.82510126,  0.9998187 ],
         [ 0.88247186, -0.953238  , -0.61989796, ...,  0.07372455,
          -0.99819833, -0.59964865],
         [-0.96511316, -0.3094544 , -0.9991802 , ..., -0.758677  ,
           0.93351394,  0.07372455],
         ...,
         [-0.30746895,  0.62223095,  0.64619994, ..., -0.26828378,
          -0.4773241 , -0.9721112 ],
         [ 0.40293917, -0.15274718,  0.88962483, ..., -0.28656432,
          -0.99998975,  0.62223095],
         [ 0.21893603, -0.8142568 , -0.20657301, ..., -0.00250078,
           0.9997088 , -0.19504489]],

        [[-0.8564022 ,  0.9895034 ,  0.9740887 , ...,  0.7845854 ,
           0.82510126,  0.9998187 ],
         [ 0.88247186, -0.953238  , -0.61989796, ...,  0.07372455,
          -0.99819833, -0.59964865],
         [-0.96511316, -0.3094544 , -0.9991802 , ..., -0.758677  ,
           0.93351394,  0.07372455],
         ...,
         [-0.30746895,  0.62223095,  0.64619994, ..., -0.26828378,
          -0.4773241 , -0.9721112 ],
         [ 0.40293917, -0.15274718,  0.88962483, ..., -0.28656432,
          -0.99998975,  0.62223095],
         [ 0.21893603, -0.8142568 , -0.20657301, ..., -0.00250078,
           0.9997088 , -0.19504489]],

        ...,

        [[-0.8564022 ,  0.9895034 ,  0.9740887 , ...,  0.7845854 ,
           0.82510126,  0.9998187 ],
         [ 0.88247186, -0.953238  , -0.61989796, ...,  0.07372455,
          -0.99819833, -0.59964865],
         [-0.96511316, -0.3094544 , -0.9991802 , ..., -0.758677  ,
           0.93351394,  0.07372455],
         ...,
         [-0.30746895,  0.62223095,  0.64619994, ..., -0.26828378,
          -0.4773241 , -0.9721112 ],
         [ 0.40293917, -0.15274718,  0.88962483, ..., -0.28656432,
          -0.99998975,  0.62223095],
         [ 0.21893603, -0.8142568 , -0.20657301, ..., -0.00250078,
           0.9997088 , -0.19504489]],

        [[-0.5040318 , -0.7062494 ,  0.90179545, ...,  0.8035748 ,
           0.8506689 ,  0.9996394 ],
         [-0.79493976, -0.09449125, -0.37774777, ...,  0.07372455,
          -0.99901396, -0.6027701 ],
         [-0.956461  , -0.00211924, -0.9913821 , ..., -0.5992228 ,
           0.98665065,  0.07372455],
         ...,
         [ 0.18637188,  0.62223095,  0.99132717, ..., -0.95557696,
           0.75523615, -0.9999119 ],
         [-0.8844313 ,  0.56187654, -0.15287521, ..., -0.9610119 ,
           0.82313967,  0.62223095],
         [ 0.82529473, -0.4260706 ,  0.97564965, ...,  0.60047376,
           0.9997088 , -0.19405048]],

        [[-0.5040318 , -0.7062494 ,  0.90179545, ...,  0.8035748 ,
           0.8506689 ,  0.9996394 ],
         [-0.79493976, -0.09449125, -0.37774777, ...,  0.07372455,
          -0.99901396, -0.6027701 ],
         [-0.956461  , -0.00211924, -0.9913821 , ..., -0.5992228 ,
           0.98665065,  0.07372455],
         ...,
         [ 0.18637188,  0.62223095,  0.99132717, ..., -0.95557696,
           0.75523615, -0.9999119 ],
         [-0.8844313 ,  0.56187654, -0.15287521, ..., -0.9610119 ,
           0.82313967,  0.62223095],
         [ 0.82529473, -0.4260706 ,  0.97564965, ...,  0.60047376,
           0.9997088 , -0.19405048]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [6], 'to': [7]}

generate models:329

analyse output arrays in iter:348

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[ 95.66311 ,  95.66311 ,  66.790985, ..., 127.99829 ,
          127.99829 ,  36.88264 ],
         [  0.      , 114.58566 , 122.58595 , ...,  96.48632 ,
          126.25787 ,  36.88264 ],
         [ 85.0831  , 120.46022 , 109.327415, ..., 126.04707 ,
          109.327415, 108.67458 ],
         ...,
         [122.160095, 126.866196,  66.61374 , ...,  26.341305,
          122.58595 , 127.99829 ],
         [108.564674,  17.051054,  75.48674 , ..., 127.48338 ,
          123.70043 , 127.99829 ],
         [124.066216,   0.      , 124.9646  , ..., 114.58566 ,
          109.327415, 127.48338 ]],

        [[ 95.66311 ,  95.66311 ,  66.790985, ..., 127.99829 ,
          127.99829 ,  36.88264 ],
         [  0.      , 114.58566 , 122.58595 , ...,  96.48632 ,
          126.25787 ,  36.88264 ],
         [ 85.0831  , 120.46022 , 109.327415, ..., 126.04707 ,
          109.327415, 108.67458 ],
         ...,
         [122.160095, 126.866196,  66.61374 , ...,  26.341305,
          122.58595 , 127.99829 ],
         [108.564674,  17.051054,  75.48674 , ..., 127.48338 ,
          123.70043 , 127.99829 ],
         [124.066216,   0.      , 124.9646  , ..., 114.58566 ,
          109.327415, 127.48338 ]],

        [[ 95.66311 ,  95.66311 ,  66.790985, ..., 127.99829 ,
          127.99829 ,  36.88264 ],
         [  0.      , 114.58566 , 122.58595 , ...,  96.48632 ,
          126.25787 ,  36.88264 ],
         [ 85.0831  , 120.46022 , 109.327415, ..., 126.04707 ,
          109.327415, 108.67458 ],
         ...,
         [122.160095, 126.866196,  66.61374 , ...,  26.341305,
          122.58595 , 127.99829 ],
         [108.564674,  17.051054,  75.48674 , ..., 127.48338 ,
          123.70043 , 127.99829 ],
         [124.066216,   0.      , 124.9646  , ..., 114.58566 ,
          109.327415, 127.48338 ]],

        ...,

        [[ 95.66311 ,  95.66311 ,  66.790985, ..., 127.99829 ,
          127.99829 ,  36.88264 ],
         [  0.      , 114.58566 , 122.58595 , ...,  96.48632 ,
          126.25787 ,  36.88264 ],
         [ 85.0831  , 120.46022 , 109.327415, ..., 126.04707 ,
          109.327415, 108.67458 ],
         ...,
         [122.160095, 126.866196,  66.61374 , ...,  26.341305,
          122.58595 , 127.99829 ],
         [108.564674,  17.051054,  75.48674 , ..., 127.48338 ,
          123.70043 , 127.99829 ],
         [124.066216,   0.      , 124.9646  , ..., 114.58566 ,
          109.327415, 127.48338 ]],

        [[ 95.66311 ,  95.66311 ,  66.790985, ..., 127.99829 ,
          127.99829 ,  36.88264 ],
         [  0.      , 114.58566 , 122.58595 , ...,  96.48632 ,
          126.25787 ,  36.88264 ],
         [ 85.0831  , 120.46022 , 109.327415, ..., 126.04707 ,
          109.327415, 108.67458 ],
         ...,
         [122.160095, 126.866196,  66.61374 , ...,  26.341305,
          122.58595 , 127.99829 ],
         [108.564674,  17.051054,  75.48674 , ..., 127.48338 ,
          123.70043 , 127.99829 ],
         [124.066216,   0.      , 124.9646  , ..., 114.58566 ,
          109.327415, 127.48338 ]],

        [[ 95.66311 ,  95.66311 ,  66.790985, ..., 127.99829 ,
          127.99829 ,  36.88264 ],
         [  0.      , 114.58566 , 122.58595 , ...,  96.48632 ,
          126.25787 ,  36.88264 ],
         [ 85.0831  , 120.46022 , 109.327415, ..., 126.04707 ,
          109.327415, 108.67458 ],
         ...,
         [122.160095, 126.866196,  66.61374 , ...,  26.341305,
          122.58595 , 127.99829 ],
         [108.564674,  17.051054,  75.48674 , ..., 127.48338 ,
          123.70043 , 127.99829 ],
         [124.066216,   0.      , 124.9646  , ..., 114.58566 ,
          109.327415, 127.48338 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [8], 'to': [11]}
14:reshape
{'name': 'reshape', 'output': array([[[[-1.20910141e+02,             inf,             inf, ...,
          -1.27038147e+02,             inf,             inf],
         [-1.27909225e+02,             inf,  9.59974560e+20, ...,
                      inf, -9.99735565e+01, -5.21718674e+01],
         [ 6.01427600e+06,  2.75348881e+11,  1.04214321e+16, ...,
           1.01614645e+29,  2.75348881e+11,             inf],
         ...,
         [ 4.97632980e+34, -8.40703201e+01, -8.40703201e+01, ...,
          -2.22222385e+01,  2.06930620e+07, -4.32325897e+01],
         [-1.20910141e+02, -6.29960861e+01,             inf, ...,
          -1.20495361e+02,             inf, -1.24040764e+02],
         [            inf, -2.76604023e+01,  7.64953676e+30, ...,
                      inf, -1.11450264e+02,  1.04214321e+16]],

        [[-1.20910141e+02,  4.97632980e+34,             inf, ...,
                      inf,  2.45611036e+38,             inf],
         [-6.65250092e+01, -1.08619835e+02, -1.26275162e+02, ...,
          -1.27856438e+02, -9.99735565e+01,  1.04214321e+16],
         [ 8.93553471e+36, -1.69482155e+01, -1.20910141e+02, ...,
          -2.09944077e+01,             inf,  3.66507863e+20],
         ...,
         [-6.29960861e+01, -1.24986572e+02,             inf, ...,
           3.42935701e+16, -3.28460121e+01, -9.99735565e+01],
         [ 4.98474995e+13,             inf,  4.98474995e+13, ...,
          -1.27998032e+02,  1.02888727e+05,             inf],
         [-1.08729439e+02, -9.19628067e+01,  9.59974560e+20, ...,
           1.04214321e+16,             inf, -1.27909225e+02]],

        [[ 4.98474995e+13,  4.98474995e+13, -2.62397270e+01, ...,
          -4.84095383e+01, -1.26275162e+02,  1.30908749e+25],
         [-5.73704758e+01, -6.29960861e+01,             inf, ...,
                      inf, -3.16405773e+01, -1.27909225e+02],
         [-5.69989891e+01,             inf,             inf, ...,
          -3.26453247e+01, -8.87714920e+01, -1.25163147e+02],
         ...,
         [            inf, -1.23727348e+02,  2.75348881e+11, ...,
                      inf,  3.42935701e+16,             inf],
         [            inf, -7.98115158e+01,             inf, ...,
          -3.19481045e-01, -5.69989891e+01, -1.27597458e+02],
         [            inf,  1.72704687e+29, -6.29960861e+01, ...,
                      inf,             inf,             inf]],

        ...,

        [[-1.20910141e+02,  4.97632980e+34,             inf, ...,
                      inf,  2.45611036e+38,             inf],
         [-6.65250092e+01, -1.08619835e+02, -1.26275162e+02, ...,
          -1.27856438e+02, -9.99735565e+01,  1.04214321e+16],
         [ 8.93553471e+36, -1.69482155e+01, -1.20910141e+02, ...,
          -2.09944077e+01,             inf,  3.66507863e+20],
         ...,
         [-6.29960861e+01, -1.24986572e+02,             inf, ...,
           3.42935701e+16, -3.28460121e+01, -9.99735565e+01],
         [ 4.98474995e+13,             inf,  4.98474995e+13, ...,
          -1.27998032e+02,  1.02888727e+05,             inf],
         [-1.08729439e+02, -9.19628067e+01,  9.59974560e+20, ...,
           1.04214321e+16,             inf, -1.27909225e+02]],

        [[ 4.98474995e+13,  4.98474995e+13, -2.62397270e+01, ...,
          -4.84095383e+01, -1.26275162e+02,  1.30908749e+25],
         [-5.73704758e+01, -6.29960861e+01,             inf, ...,
                      inf, -3.16405773e+01, -1.27909225e+02],
         [-5.69989891e+01,             inf,             inf, ...,
          -3.26453247e+01, -8.87714920e+01, -1.25163147e+02],
         ...,
         [            inf, -1.23727348e+02,  2.75348881e+11, ...,
                      inf,  3.42935701e+16,             inf],
         [            inf, -7.98115158e+01,             inf, ...,
          -3.19481045e-01, -5.69989891e+01, -1.27597458e+02],
         [            inf,  1.72704687e+29, -6.29960861e+01, ...,
                      inf,             inf,             inf]],

        [[ 1.13964050e+12,             inf, -5.19822731e+01, ...,
          -7.67386780e+01, -1.26029236e+02, -1.27998032e+02],
         [-1.20910141e+02, -4.30371208e+01,             inf, ...,
          -9.91907272e+01, -1.27909225e+02,             inf],
         [-1.00102837e+02, -1.00102837e+02, -3.30466537e+01, ...,
           6.07399845e+32, -1.14631783e+02, -3.81728477e+01],
         ...,
         [            inf, -7.22301331e+01, -2.11992168e+01, ...,
                      inf, -3.16405773e+01,             inf],
         [            inf, -7.67386780e+01, -1.20425064e+02, ...,
                      inf, -3.67832069e+01,             inf],
         [            inf, -8.40703201e+01,  2.75348881e+11, ...,
                      inf,             inf, -9.19628067e+01]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [24], 'to': [11]}
tf node:
{'name': 'add', 'output': array([[[[-2.52470322e+01,             inf,             inf, ...,
           9.60144043e-01,             inf,             inf],
         [-1.27909225e+02,             inf,  9.59974560e+20, ...,
                      inf,  2.62843170e+01, -1.52892265e+01],
         [ 6.01436100e+06,  2.75348881e+11,  1.04214321e+16, ...,
           1.01614645e+29,  2.75348881e+11,             inf],
         ...,
         [ 4.97632980e+34,  4.27958755e+01, -1.74565811e+01, ...,
           4.11906624e+00,  2.06931840e+07,  8.47657013e+01],
         [-1.23454666e+01, -4.59450302e+01,             inf, ...,
           6.98802185e+00,             inf,  3.95752716e+00],
         [            inf, -2.76604023e+01,  7.64953676e+30, ...,
                      inf, -2.12284851e+00,  1.04214321e+16]],

        [[-2.52470322e+01,  4.97632980e+34,             inf, ...,
                      inf,  2.45611036e+38,             inf],
         [-6.65250092e+01,  5.96582794e+00, -3.68920898e+00, ...,
          -3.13701172e+01,  2.62843170e+01,  1.04214321e+16],
         [ 8.93553471e+36,  1.03512009e+02, -1.15827255e+01, ...,
           1.05052666e+02,             inf,  3.66507863e+20],
         ...,
         [ 5.91640091e+01,  1.87962341e+00,             inf, ...,
           3.42935701e+16,  8.97399445e+01,  2.80247345e+01],
         [ 4.98474995e+13,             inf,  4.98474995e+13, ...,
          -5.14648438e-01,  1.03012430e+05,             inf],
         [ 1.53367767e+01, -9.19628067e+01,  9.59974560e+20, ...,
           1.04214321e+16,             inf, -4.25842285e-01]],

        [[ 4.98474995e+13,  4.98474995e+13,  4.05512581e+01, ...,
           7.95887527e+01,  1.72312927e+00,  1.30908749e+25],
         [-5.73704758e+01,  5.15895767e+01,             inf, ...,
                      inf,  9.46172943e+01, -9.10265808e+01],
         [ 2.80841103e+01,             inf,             inf, ...,
           9.34017487e+01,  2.05559235e+01, -1.64885635e+01],
         ...,
         [            inf,  3.13884735e+00,  2.75348881e+11, ...,
                      inf,  3.42935701e+16,             inf],
         [            inf, -6.27604599e+01,             inf, ...,
           1.27163902e+02,  6.67014465e+01,  4.00833130e-01],
         [            inf,  1.72704687e+29,  6.19685135e+01, ...,
                      inf,             inf,             inf]],

        ...,

        [[-2.52470322e+01,  4.97632980e+34,             inf, ...,
                      inf,  2.45611036e+38,             inf],
         [-6.65250092e+01,  5.96582794e+00, -3.68920898e+00, ...,
          -3.13701172e+01,  2.62843170e+01,  1.04214321e+16],
         [ 8.93553471e+36,  1.03512009e+02, -1.15827255e+01, ...,
           1.05052666e+02,             inf,  3.66507863e+20],
         ...,
         [ 5.91640091e+01,  1.87962341e+00,             inf, ...,
           3.42935701e+16,  8.97399445e+01,  2.80247345e+01],
         [ 4.98474995e+13,             inf,  4.98474995e+13, ...,
          -5.14648438e-01,  1.03012430e+05,             inf],
         [ 1.53367767e+01, -9.19628067e+01,  9.59974560e+20, ...,
           1.04214321e+16,             inf, -4.25842285e-01]],

        [[ 4.98474995e+13,  4.98474995e+13,  4.05512581e+01, ...,
           7.95887527e+01,  1.72312927e+00,  1.30908749e+25],
         [-5.73704758e+01,  5.15895767e+01,             inf, ...,
                      inf,  9.46172943e+01, -9.10265808e+01],
         [ 2.80841103e+01,             inf,             inf, ...,
           9.34017487e+01,  2.05559235e+01, -1.64885635e+01],
         ...,
         [            inf,  3.13884735e+00,  2.75348881e+11, ...,
                      inf,  3.42935701e+16,             inf],
         [            inf, -6.27604599e+01,             inf, ...,
           1.27163902e+02,  6.67014465e+01,  4.00833130e-01],
         [            inf,  1.72704687e+29,  6.19685135e+01, ...,
                      inf,             inf,             inf]],

        [[ 1.13964050e+12,             inf,  1.48087120e+01, ...,
           5.12596130e+01,  1.96905518e+00, -9.11153870e+01],
         [-1.20910141e+02,  7.15485382e+01,             inf, ...,
          -2.70440674e+00, -1.65135193e+00,             inf],
         [-1.50197372e+01,  2.03573837e+01,  7.62807617e+01, ...,
           6.07399845e+32, -5.30436707e+00,  7.05017395e+01],
         ...,
         [            inf,  5.46360626e+01,  4.54145203e+01, ...,
                      inf,  9.09453735e+01,             inf],
         [            inf, -5.96876221e+01, -4.49383240e+01, ...,
                      inf,  8.69172211e+01,             inf],
         [            inf, -8.40703201e+01,  2.75348881e+11, ...,
                      inf,             inf,  3.55205765e+01]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [9, 14], 'to': [10]}
ms node:
{'name': 'add', 'output': array([[[[-2.52470322e+01,             inf,             inf, ...,
           9.60144043e-01,             inf,             inf],
         [-1.27909225e+02,             inf,  9.59974349e+20, ...,
                      inf,  2.62843170e+01, -1.52892265e+01],
         [ 6.01436050e+06,  2.75348849e+11,  1.04214300e+16, ...,
           1.01614626e+29,  2.75348849e+11,             inf],
         ...,
         [ 4.97632832e+34,  4.27958832e+01, -1.74565735e+01, ...,
           4.11906624e+00,  2.06931840e+07,  8.47657013e+01],
         [-1.23454666e+01, -4.59450302e+01,             inf, ...,
           6.98802185e+00,             inf,  3.95752716e+00],
         [            inf, -2.76604023e+01,  7.64953555e+30, ...,
                      inf, -2.12284851e+00,  1.04214300e+16]],

        [[-2.52470322e+01,  4.97632832e+34,             inf, ...,
                      inf,  2.45610975e+38,             inf],
         [-6.65250092e+01,  5.96539307e+00, -3.68920898e+00, ...,
          -3.13701172e+01,  2.62843170e+01,  1.04214300e+16],
         [ 8.93553217e+36,  1.03512009e+02, -1.15827255e+01, ...,
           1.05052666e+02,             inf,  3.66507793e+20],
         ...,
         [ 5.91640091e+01,  1.87962341e+00,             inf, ...,
           3.42935658e+16,  8.97399445e+01,  2.80247345e+01],
         [ 4.98474911e+13,             inf,  4.98474911e+13, ...,
          -5.14648438e-01,  1.03012430e+05,             inf],
         [ 1.53367767e+01, -9.19628067e+01,  9.59974349e+20, ...,
           1.04214300e+16,             inf, -4.25842285e-01]],

        [[ 4.98474911e+13,  4.98474911e+13,  4.05512581e+01, ...,
           7.95887527e+01,  1.72312927e+00,  1.30908737e+25],
         [-5.73704758e+01,  5.15891418e+01,             inf, ...,
                      inf,  9.46172943e+01, -9.10265808e+01],
         [ 2.80841103e+01,             inf,             inf, ...,
           9.34017487e+01,  2.05559235e+01, -1.64885635e+01],
         ...,
         [            inf,  3.13884735e+00,  2.75348849e+11, ...,
                      inf,  3.42935658e+16,             inf],
         [            inf, -6.27604599e+01,             inf, ...,
           1.27163902e+02,  6.67014465e+01,  4.00833130e-01],
         [            inf,  1.72704649e+29,  6.19685135e+01, ...,
                      inf,             inf,             inf]],

        ...,

        [[-2.52470169e+01,  4.97636595e+34,             inf, ...,
                      inf,  2.45639086e+38,             inf],
         [-6.65250854e+01,  5.96559143e+00, -3.68898010e+00, ...,
          -3.13701172e+01,  2.62843857e+01,  1.04215094e+16],
         [ 8.93635044e+36,  1.03512032e+02, -1.15827103e+01, ...,
           1.05052643e+02,             inf,  3.66496604e+20],
         ...,
         [ 5.91640167e+01,  1.87938690e+00,             inf, ...,
           3.42935658e+16,  8.97398834e+01,  2.80248032e+01],
         [ 4.98450207e+13,             inf,  4.98450207e+13, ...,
          -5.14633179e-01,  1.03013312e+05,             inf],
         [ 1.53368301e+01, -9.19627304e+01,  9.59937687e+20, ...,
           1.04215094e+16,             inf, -4.25888062e-01]],

        [[ 4.98450207e+13,  4.98450207e+13,  4.05512466e+01, ...,
           7.95890427e+01,  1.72359467e+00,  1.30905244e+25],
         [-5.73703766e+01,  5.15893631e+01,             inf, ...,
                      inf,  9.46173935e+01, -9.10266266e+01],
         [ 2.80842323e+01,             inf,             inf, ...,
           9.34018860e+01,  2.05561066e+01, -1.64887543e+01],
         ...,
         [            inf,  3.13900757e+00,  2.75347800e+11, ...,
                      inf,  3.42935658e+16,             inf],
         [            inf, -6.27604332e+01,             inf, ...,
           1.27163887e+02,  6.67016907e+01,  4.01260376e-01],
         [            inf,  1.72719137e+29,  6.19682846e+01, ...,
                      inf,             inf,             inf]],

        [[ 1.13965570e+12,             inf,  1.48087730e+01, ...,
           5.12597733e+01,  1.96934509e+00, -9.11153717e+01],
         [-1.20910126e+02,  7.15483093e+01,             inf, ...,
          -2.70456696e+00, -1.65134430e+00,             inf],
         [-1.50198059e+01,  2.03574448e+01,  7.62809448e+01, ...,
           6.07446075e+32, -5.30412292e+00,  7.05016098e+01],
         ...,
         [            inf,  5.46360016e+01,  4.54145355e+01, ...,
                      inf,  9.09454346e+01,             inf],
         [            inf, -5.96876717e+01, -4.49384689e+01, ...,
                      inf,  8.69174423e+01,             inf],
         [            inf, -8.40703125e+01,  2.75347800e+11, ...,
                      inf,             inf,  3.55206375e+01]]]],
      dtype=float32), 'output_shape': (1, 128, 8, 8), 'from': [9, 14], 'to': [10]}
torch node:
{'name': 'add', 'output': array([[[[-2.52470322e+01,             inf,             inf, ...,
           9.60144043e-01,             inf,             inf],
         [-1.27909225e+02,             inf,  9.59974489e+20, ...,
                      inf,  2.62843170e+01, -1.52892265e+01],
         [ 6.01436100e+06,  2.75348881e+11,  1.04214321e+16, ...,
           1.01614635e+29,  2.75348881e+11,             inf],
         ...,
         [ 4.97632980e+34,  4.27958832e+01, -1.74565735e+01, ...,
           4.11906624e+00,  2.06931840e+07,  8.47657013e+01],
         [-1.23454666e+01, -4.59450302e+01,             inf, ...,
           6.98802185e+00,             inf,  3.95752716e+00],
         [            inf, -2.76604023e+01,  7.64953676e+30, ...,
                      inf, -2.12284851e+00,  1.04214321e+16]],

        [[-2.52470322e+01,  4.97632980e+34,             inf, ...,
                      inf,  2.45611036e+38,             inf],
         [-6.65250092e+01,  5.96539307e+00, -3.68920898e+00, ...,
          -3.13701172e+01,  2.62843170e+01,  1.04214321e+16],
         [ 8.93553471e+36,  1.03512009e+02, -1.15827255e+01, ...,
           1.05052666e+02,             inf,  3.66507863e+20],
         ...,
         [ 5.91640091e+01,  1.87962341e+00,             inf, ...,
           3.42935701e+16,  8.97399445e+01,  2.80247345e+01],
         [ 4.98474995e+13,             inf,  4.98474995e+13, ...,
          -5.14648438e-01,  1.03012430e+05,             inf],
         [ 1.53367767e+01, -9.19628067e+01,  9.59974489e+20, ...,
           1.04214321e+16,             inf, -4.25842285e-01]],

        [[ 4.98474995e+13,  4.98474995e+13,  4.05512581e+01, ...,
           7.95887527e+01,  1.72312927e+00,  1.30908749e+25],
         [-5.73704758e+01,  5.15891418e+01,             inf, ...,
                      inf,  9.46172943e+01, -9.10265808e+01],
         [ 2.80841103e+01,             inf,             inf, ...,
           9.34017487e+01,  2.05559235e+01, -1.64885635e+01],
         ...,
         [            inf,  3.13884735e+00,  2.75348881e+11, ...,
                      inf,  3.42935701e+16,             inf],
         [            inf, -6.27604599e+01,             inf, ...,
           1.27163902e+02,  6.67014465e+01,  4.00833130e-01],
         [            inf,  1.72704687e+29,  6.19685135e+01, ...,
                      inf,             inf,             inf]],

        ...,

        [[-2.52470322e+01,  4.97632980e+34,             inf, ...,
                      inf,  2.45611036e+38,             inf],
         [-6.65250092e+01,  5.96539307e+00, -3.68920898e+00, ...,
          -3.13701172e+01,  2.62843170e+01,  1.04214321e+16],
         [ 8.93553471e+36,  1.03512009e+02, -1.15827255e+01, ...,
           1.05052666e+02,             inf,  3.66507863e+20],
         ...,
         [ 5.91640091e+01,  1.87962341e+00,             inf, ...,
           3.42935701e+16,  8.97399445e+01,  2.80247345e+01],
         [ 4.98474995e+13,             inf,  4.98474995e+13, ...,
          -5.14648438e-01,  1.03012430e+05,             inf],
         [ 1.53367767e+01, -9.19628067e+01,  9.59974489e+20, ...,
           1.04214321e+16,             inf, -4.25842285e-01]],

        [[ 4.98474995e+13,  4.98474995e+13,  4.05512581e+01, ...,
           7.95887527e+01,  1.72312927e+00,  1.30908749e+25],
         [-5.73704758e+01,  5.15891418e+01,             inf, ...,
                      inf,  9.46172943e+01, -9.10265808e+01],
         [ 2.80841103e+01,             inf,             inf, ...,
           9.34017487e+01,  2.05559235e+01, -1.64885635e+01],
         ...,
         [            inf,  3.13884735e+00,  2.75348881e+11, ...,
                      inf,  3.42935701e+16,             inf],
         [            inf, -6.27604599e+01,             inf, ...,
           1.27163902e+02,  6.67014465e+01,  4.00833130e-01],
         [            inf,  1.72704687e+29,  6.19685135e+01, ...,
                      inf,             inf,             inf]],

        [[ 1.13964050e+12,             inf,  1.48087120e+01, ...,
           5.12596130e+01,  1.96905518e+00, -9.11153870e+01],
         [-1.20910141e+02,  7.15481110e+01,             inf, ...,
          -2.70440674e+00, -1.65135193e+00,             inf],
         [-1.50197372e+01,  2.03573837e+01,  7.62807617e+01, ...,
           6.07399845e+32, -5.30436707e+00,  7.05017395e+01],
         ...,
         [            inf,  5.46360626e+01,  4.54145203e+01, ...,
                      inf,  9.09453735e+01,             inf],
         [            inf, -5.96876221e+01, -4.49383240e+01, ...,
                      inf,  8.69172211e+01,             inf],
         [            inf, -8.40703125e+01,  2.75348881e+11, ...,
                      inf,             inf,  3.55205765e+01]]]],
      dtype=float32), 'output_shape': torch.Size([1, 128, 8, 8]), 'from': [9, 14], 'to': [10]}

generate models:343

analyse output arrays in iter:359

pre layer res:
11:empty_merge_operator
{'name': 'empty_merge_operator', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [9, 14], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [11], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [11], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [11], 'to': []}

generate models:353

analyse output arrays in iter:370

pre layer res:
16:reshape
{'name': 'reshape', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [15], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [16], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [16], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [16], 'to': []}

generate models:363

analyse output arrays in iter:375

pre layer res:
16:add
{'name': 'add', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [7, 19], 'to': [14]}
tf node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [16], 'to': [8]}
ms node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [16], 'to': [8]}
torch node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [16], 'to': [8]}

generate models:368

analyse output arrays in iter:379

pre layer res:
12:add
{'name': 'add', 'output': array([[[[1027174.  , 1027174.  , 1048184.06, ..., 1015505.7 ,
          1038345.6 ,  955474.06],
         [1016774.06,  648892.94, 1048184.06, ..., 1044769.9 ,
          1048184.06,  997304.44],
         [ 879002.25,  997304.44, 1038345.6 , ...,  998866.1 ,
          1015505.7 , 1048184.06],
         ...,
         [1010527.9 , 1039806.  , 1035464.1 , ..., 1039054.44,
           652439.94,  998866.1 ],
         [1002921.56, 1046752.06, 1024334.44, ..., 1027174.  ,
           957544.06, 1044318.5 ],
         [1040808.06,  861654.2 , 1047719.94, ..., 1036346.  ,
          1012025.6 ,  616396.8 ]],

        [[1027174.  , 1027174.  , 1048184.06, ..., 1015505.7 ,
          1038345.6 ,  955474.06],
         [1016774.06,  648892.94, 1048184.06, ..., 1044769.9 ,
          1048184.06,  997304.44],
         [ 879002.25,  997304.44, 1038345.6 , ...,  998866.1 ,
          1015505.7 , 1048184.06],
         ...,
         [1010527.9 , 1039806.  , 1035464.1 , ..., 1039054.44,
           652439.94,  998866.1 ],
         [1002921.56, 1046752.06, 1024334.44, ..., 1027174.  ,
           957544.06, 1044318.5 ],
         [1040808.06,  861654.2 , 1047719.94, ..., 1036346.  ,
          1012025.6 ,  616396.8 ]],

        [[1027174.  , 1027174.  , 1048184.06, ..., 1015505.7 ,
          1038345.6 ,  955474.06],
         [1016774.06,  648892.94, 1048184.06, ..., 1044769.9 ,
          1048184.06,  997304.44],
         [ 879002.25,  997304.44, 1038345.6 , ...,  998866.1 ,
          1015505.7 , 1048184.06],
         ...,
         [1010527.9 , 1039806.  , 1035464.1 , ..., 1039054.44,
           652439.94,  998866.1 ],
         [1002921.56, 1046752.06, 1024334.44, ..., 1027174.  ,
           957544.06, 1044318.5 ],
         [1040808.06,  861654.2 , 1047719.94, ..., 1036346.  ,
          1012025.6 ,  616396.8 ]],

        ...,

        [[1027174.  , 1027174.  , 1048184.06, ..., 1015505.7 ,
          1038345.6 ,  955474.06],
         [1016774.06,  648892.94, 1048184.06, ..., 1044769.9 ,
          1048184.06,  997304.44],
         [ 879002.25,  997304.44, 1038345.6 , ...,  998866.1 ,
          1015505.7 , 1048184.06],
         ...,
         [1010527.9 , 1039806.  , 1035464.1 , ..., 1039054.44,
           652439.94,  998866.1 ],
         [1002921.56, 1046752.06, 1024334.44, ..., 1027174.  ,
           957544.06, 1044318.5 ],
         [1040808.06,  861654.2 , 1047719.94, ..., 1036346.  ,
          1012025.6 ,  616396.8 ]],

        [[1027174.  , 1027174.  , 1048184.06, ..., 1015505.7 ,
          1038345.6 ,  955474.06],
         [1016774.06,  648892.94, 1048184.06, ..., 1044769.9 ,
          1048184.06,  997304.44],
         [ 879002.25,  997304.44, 1038345.6 , ...,  998866.1 ,
          1015505.7 , 1048184.06],
         ...,
         [1010527.9 , 1039806.  , 1035464.1 , ..., 1039054.44,
           652439.94,  998866.1 ],
         [1002921.56, 1046752.06, 1024334.44, ..., 1027174.  ,
           957544.06, 1044318.5 ],
         [1040808.06,  861654.2 , 1047719.94, ..., 1036346.  ,
          1012025.6 ,  616396.8 ]],

        [[1027174.  , 1027174.  , 1048184.06, ..., 1015505.7 ,
          1038345.6 ,  955474.06],
         [1016774.06,  648892.94, 1048184.06, ..., 1044769.9 ,
          1048184.06,  997304.44],
         [ 879002.25,  997304.44, 1038345.6 , ...,  998866.1 ,
          1015505.7 , 1048184.06],
         ...,
         [1010527.9 , 1039806.  , 1035464.1 , ..., 1039054.44,
           652439.94,  998866.1 ],
         [1002921.56, 1046752.06, 1024334.44, ..., 1027174.  ,
           957544.06, 1044318.5 ],
         [1040808.06,  861654.2 , 1047719.94, ..., 1036346.  ,
          1012025.6 ,  616396.8 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [9, 16], 'to': [11]}
tf node:
{'name': 'cos', 'output': array([[[[ 4.2302269e-01,  4.2302269e-01, -4.5501459e-01, ...,
          -6.0595945e-04,  5.2974719e-01, -8.7643671e-01],
         [-7.3728180e-01, -9.9322230e-01, -4.5501459e-01, ...,
          -2.4868837e-01, -4.5501459e-01,  9.0747285e-01],
         [-9.4490606e-01,  9.0747285e-01,  5.2974719e-01, ...,
          -9.9309117e-01, -6.0595945e-04, -4.5501459e-01],
         ...,
         [-9.9918187e-01, -9.2585735e-02,  1.0106139e-01, ...,
          -5.8844745e-01,  9.6680319e-01, -9.9309117e-01],
         [ 8.8872862e-01,  9.3723677e-02,  7.6692617e-01, ...,
           4.2302269e-01,  6.8808949e-01, -9.5380843e-01],
         [-1.2837619e-02, -9.8941582e-01,  3.5070530e-01, ...,
          -8.4883088e-01,  7.3220527e-01, -8.1043482e-01]],

        [[ 4.2302269e-01,  4.2302269e-01, -4.5501459e-01, ...,
          -6.0595945e-04,  5.2974719e-01, -8.7643671e-01],
         [-7.3728180e-01, -9.9322230e-01, -4.5501459e-01, ...,
          -2.4868837e-01, -4.5501459e-01,  9.0747285e-01],
         [-9.4490606e-01,  9.0747285e-01,  5.2974719e-01, ...,
          -9.9309117e-01, -6.0595945e-04, -4.5501459e-01],
         ...,
         [-9.9918187e-01, -9.2585735e-02,  1.0106139e-01, ...,
          -5.8844745e-01,  9.6680319e-01, -9.9309117e-01],
         [ 8.8872862e-01,  9.3723677e-02,  7.6692617e-01, ...,
           4.2302269e-01,  6.8808949e-01, -9.5380843e-01],
         [-1.2837619e-02, -9.8941582e-01,  3.5070530e-01, ...,
          -8.4883088e-01,  7.3220527e-01, -8.1043482e-01]],

        [[ 4.2302269e-01,  4.2302269e-01, -4.5501459e-01, ...,
          -6.0595945e-04,  5.2974719e-01, -8.7643671e-01],
         [-7.3728180e-01, -9.9322230e-01, -4.5501459e-01, ...,
          -2.4868837e-01, -4.5501459e-01,  9.0747285e-01],
         [-9.4490606e-01,  9.0747285e-01,  5.2974719e-01, ...,
          -9.9309117e-01, -6.0595945e-04, -4.5501459e-01],
         ...,
         [-9.9918187e-01, -9.2585735e-02,  1.0106139e-01, ...,
          -5.8844745e-01,  9.6680319e-01, -9.9309117e-01],
         [ 8.8872862e-01,  9.3723677e-02,  7.6692617e-01, ...,
           4.2302269e-01,  6.8808949e-01, -9.5380843e-01],
         [-1.2837619e-02, -9.8941582e-01,  3.5070530e-01, ...,
          -8.4883088e-01,  7.3220527e-01, -8.1043482e-01]],

        ...,

        [[ 4.2302269e-01,  4.2302269e-01, -4.5501459e-01, ...,
          -6.0595945e-04,  5.2974719e-01, -8.7643671e-01],
         [-7.3728180e-01, -9.9322230e-01, -4.5501459e-01, ...,
          -2.4868837e-01, -4.5501459e-01,  9.0747285e-01],
         [-9.4490606e-01,  9.0747285e-01,  5.2974719e-01, ...,
          -9.9309117e-01, -6.0595945e-04, -4.5501459e-01],
         ...,
         [-9.9918187e-01, -9.2585735e-02,  1.0106139e-01, ...,
          -5.8844745e-01,  9.6680319e-01, -9.9309117e-01],
         [ 8.8872862e-01,  9.3723677e-02,  7.6692617e-01, ...,
           4.2302269e-01,  6.8808949e-01, -9.5380843e-01],
         [-1.2837619e-02, -9.8941582e-01,  3.5070530e-01, ...,
          -8.4883088e-01,  7.3220527e-01, -8.1043482e-01]],

        [[ 4.2302269e-01,  4.2302269e-01, -4.5501459e-01, ...,
          -6.0595945e-04,  5.2974719e-01, -8.7643671e-01],
         [-7.3728180e-01, -9.9322230e-01, -4.5501459e-01, ...,
          -2.4868837e-01, -4.5501459e-01,  9.0747285e-01],
         [-9.4490606e-01,  9.0747285e-01,  5.2974719e-01, ...,
          -9.9309117e-01, -6.0595945e-04, -4.5501459e-01],
         ...,
         [-9.9918187e-01, -9.2585735e-02,  1.0106139e-01, ...,
          -5.8844745e-01,  9.6680319e-01, -9.9309117e-01],
         [ 8.8872862e-01,  9.3723677e-02,  7.6692617e-01, ...,
           4.2302269e-01,  6.8808949e-01, -9.5380843e-01],
         [-1.2837619e-02, -9.8941582e-01,  3.5070530e-01, ...,
          -8.4883088e-01,  7.3220527e-01, -8.1043482e-01]],

        [[ 4.2302269e-01,  4.2302269e-01, -4.5501459e-01, ...,
          -6.0595945e-04,  5.2974719e-01, -8.7643671e-01],
         [-7.3728180e-01, -9.9322230e-01, -4.5501459e-01, ...,
          -2.4868837e-01, -4.5501459e-01,  9.0747285e-01],
         [-9.4490606e-01,  9.0747285e-01,  5.2974719e-01, ...,
          -9.9309117e-01, -6.0595945e-04, -4.5501459e-01],
         ...,
         [-9.9918187e-01, -9.2585735e-02,  1.0106139e-01, ...,
          -5.8844745e-01,  9.6680319e-01, -9.9309117e-01],
         [ 8.8872862e-01,  9.3723677e-02,  7.6692617e-01, ...,
           4.2302269e-01,  6.8808949e-01, -9.5380843e-01],
         [-1.2837619e-02, -9.8941582e-01,  3.5070530e-01, ...,
          -8.4883088e-01,  7.3220527e-01, -8.1043482e-01]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [12], 'to': [20]}
ms node:
{'name': 'cos', 'output': array([[[[ 0.12395894,  0.12395894, -0.4550146 , ...,  0.2468168 ,
           0.7231157 , -0.8764367 ],
         [-0.7372818 ,  0.0626689 , -0.4550146 , ..., -0.24868837,
          -0.4550146 ,  0.87946117],
         [-0.8345456 ,  0.87946117,  0.7231157 , ..., -0.99125004,
           0.2468168 , -0.4550146 ],
         ...,
         [-0.99918187, -0.21600257,  0.10106139, ..., -0.58844745,
           0.98087525, -0.99125004],
         [ 0.85835993,  0.09372368,  0.8055111 , ...,  0.12395894,
          -0.9645274 , -0.97070986],
         [ 0.04964162, -0.99654734,  0.3507053 , ..., -0.8488309 ,
           0.6882356 , -0.8104348 ]],

        [[ 0.12395894,  0.12395894, -0.4550146 , ...,  0.2468168 ,
           0.7231157 , -0.8764367 ],
         [-0.7372818 ,  0.0626689 , -0.4550146 , ..., -0.24868837,
          -0.4550146 ,  0.87946117],
         [-0.8345456 ,  0.87946117,  0.7231157 , ..., -0.99125004,
           0.2468168 , -0.4550146 ],
         ...,
         [-0.99918187, -0.21600257,  0.10106139, ..., -0.58844745,
           0.98087525, -0.99125004],
         [ 0.85835993,  0.09372368,  0.8055111 , ...,  0.12395894,
          -0.9645274 , -0.97070986],
         [ 0.04964162, -0.99654734,  0.3507053 , ..., -0.8488309 ,
           0.6882356 , -0.8104348 ]],

        [[ 0.12395894,  0.12395894, -0.4550146 , ...,  0.2468168 ,
           0.7231157 , -0.8764367 ],
         [-0.7372818 ,  0.0626689 , -0.4550146 , ..., -0.24868837,
          -0.4550146 ,  0.87946117],
         [-0.8345456 ,  0.87946117,  0.7231157 , ..., -0.99125004,
           0.2468168 , -0.4550146 ],
         ...,
         [-0.99918187, -0.21600257,  0.10106139, ..., -0.58844745,
           0.98087525, -0.99125004],
         [ 0.85835993,  0.09372368,  0.8055111 , ...,  0.12395894,
          -0.9645274 , -0.97070986],
         [ 0.04964162, -0.99654734,  0.3507053 , ..., -0.8488309 ,
           0.6882356 , -0.8104348 ]],

        ...,

        [[ 0.12395894,  0.12395894, -0.4550146 , ...,  0.2468168 ,
           0.7231157 , -0.8764367 ],
         [-0.7372818 ,  0.0626689 , -0.4550146 , ..., -0.24868837,
          -0.4550146 ,  0.87946117],
         [-0.8345456 ,  0.87946117,  0.7231157 , ..., -0.99125004,
           0.2468168 , -0.4550146 ],
         ...,
         [-0.99918187, -0.21600257,  0.10106139, ..., -0.58844745,
           0.98087525, -0.99125004],
         [ 0.85835993,  0.09372368,  0.8055111 , ...,  0.12395894,
          -0.9645274 , -0.97070986],
         [ 0.04964162, -0.99654734,  0.3507053 , ..., -0.8488309 ,
           0.6882356 , -0.8104348 ]],

        [[-0.9975458 , -0.9975458 , -0.4550146 , ...,  0.99996036,
           0.81820977, -0.43332705],
         [-0.5333489 , -0.58492696, -0.4550146 , ..., -0.8496213 ,
          -0.4550146 ,  0.9926803 ],
         [ 0.25968164,  0.9926803 ,  0.81820977, ...,  0.18550667,
           0.99996036, -0.4550146 ],
         ...,
         [-0.999757  ,  0.9962625 , -0.02376355, ..., -0.84813523,
           0.99111706,  0.18550667],
         [ 0.71528256,  0.09372368, -0.5341167 , ..., -0.9975458 ,
          -0.2719756 ,  0.04681491],
         [ 0.17377532, -0.60830104,  0.3507053 , ...,  0.79785585,
           0.8455201 , -0.9686888 ]],

        [[-0.9975458 , -0.9975458 , -0.4550146 , ...,  0.99996036,
           0.81820977, -0.43332705],
         [-0.5333489 , -0.58492696, -0.4550146 , ..., -0.8496213 ,
          -0.4550146 ,  0.9926803 ],
         [ 0.25968164,  0.9926803 ,  0.81820977, ...,  0.18550667,
           0.99996036, -0.4550146 ],
         ...,
         [-0.999757  ,  0.9962625 , -0.02376355, ..., -0.84813523,
           0.99111706,  0.18550667],
         [ 0.71528256,  0.09372368, -0.5341167 , ..., -0.9975458 ,
          -0.2719756 ,  0.04681491],
         [ 0.17377532, -0.60830104,  0.3507053 , ...,  0.79785585,
           0.8455201 , -0.9686888 ]]]], dtype=float32), 'output_shape': (1, 128, 8, 8), 'from': [12], 'to': [20]}
torch node:
{'name': 'cos', 'output': array([[[[ 0.12395894,  0.12395894, -0.4550146 , ...,  0.2468168 ,
           0.7231157 , -0.8764367 ],
         [-0.7372818 ,  0.0626689 , -0.4550146 , ..., -0.24868837,
          -0.4550146 ,  0.87946117],
         [-0.8345456 ,  0.87946117,  0.7231157 , ..., -0.99125004,
           0.2468168 , -0.4550146 ],
         ...,
         [-0.99918187, -0.21600257,  0.10106139, ..., -0.58844745,
           0.98087525, -0.99125004],
         [ 0.85835993,  0.09372368,  0.8055111 , ...,  0.12395894,
          -0.9645274 , -0.97070986],
         [ 0.04964162, -0.99654734,  0.3507053 , ..., -0.8488309 ,
           0.6882356 , -0.8104348 ]],

        [[ 0.12395894,  0.12395894, -0.4550146 , ...,  0.2468168 ,
           0.7231157 , -0.8764367 ],
         [-0.7372818 ,  0.0626689 , -0.4550146 , ..., -0.24868837,
          -0.4550146 ,  0.87946117],
         [-0.8345456 ,  0.87946117,  0.7231157 , ..., -0.99125004,
           0.2468168 , -0.4550146 ],
         ...,
         [-0.99918187, -0.21600257,  0.10106139, ..., -0.58844745,
           0.98087525, -0.99125004],
         [ 0.85835993,  0.09372368,  0.8055111 , ...,  0.12395894,
          -0.9645274 , -0.97070986],
         [ 0.04964162, -0.99654734,  0.3507053 , ..., -0.8488309 ,
           0.6882356 , -0.8104348 ]],

        [[ 0.12395894,  0.12395894, -0.4550146 , ...,  0.2468168 ,
           0.7231157 , -0.8764367 ],
         [-0.7372818 ,  0.0626689 , -0.4550146 , ..., -0.24868837,
          -0.4550146 ,  0.87946117],
         [-0.8345456 ,  0.87946117,  0.7231157 , ..., -0.99125004,
           0.2468168 , -0.4550146 ],
         ...,
         [-0.99918187, -0.21600257,  0.10106139, ..., -0.58844745,
           0.98087525, -0.99125004],
         [ 0.85835993,  0.09372368,  0.8055111 , ...,  0.12395894,
          -0.9645274 , -0.97070986],
         [ 0.04964162, -0.99654734,  0.3507053 , ..., -0.8488309 ,
           0.6882356 , -0.8104348 ]],

        ...,

        [[ 0.12395894,  0.12395894, -0.4550146 , ...,  0.2468168 ,
           0.7231157 , -0.8764367 ],
         [-0.7372818 ,  0.0626689 , -0.4550146 , ..., -0.24868837,
          -0.4550146 ,  0.87946117],
         [-0.8345456 ,  0.87946117,  0.7231157 , ..., -0.99125004,
           0.2468168 , -0.4550146 ],
         ...,
         [-0.99918187, -0.21600257,  0.10106139, ..., -0.58844745,
           0.98087525, -0.99125004],
         [ 0.85835993,  0.09372368,  0.8055111 , ...,  0.12395894,
          -0.9645274 , -0.97070986],
         [ 0.04964162, -0.99654734,  0.3507053 , ..., -0.8488309 ,
           0.6882356 , -0.8104348 ]],

        [[ 0.12395894,  0.12395894, -0.4550146 , ...,  0.2468168 ,
           0.7231157 , -0.8764367 ],
         [-0.7372818 ,  0.0626689 , -0.4550146 , ..., -0.24868837,
          -0.4550146 ,  0.87946117],
         [-0.8345456 ,  0.87946117,  0.7231157 , ..., -0.99125004,
           0.2468168 , -0.4550146 ],
         ...,
         [-0.99918187, -0.21600257,  0.10106139, ..., -0.58844745,
           0.98087525, -0.99125004],
         [ 0.85835993,  0.09372368,  0.8055111 , ...,  0.12395894,
          -0.9645274 , -0.97070986],
         [ 0.04964162, -0.99654734,  0.3507053 , ..., -0.8488309 ,
           0.6882356 , -0.8104348 ]],

        [[ 0.12395894,  0.12395894, -0.4550146 , ...,  0.2468168 ,
           0.7231157 , -0.8764367 ],
         [-0.7372818 ,  0.0626689 , -0.4550146 , ..., -0.24868837,
          -0.4550146 ,  0.87946117],
         [-0.8345456 ,  0.87946117,  0.7231157 , ..., -0.99125004,
           0.2468168 , -0.4550146 ],
         ...,
         [-0.99918187, -0.21600257,  0.10106139, ..., -0.58844745,
           0.98087525, -0.99125004],
         [ 0.85835993,  0.09372368,  0.8055111 , ...,  0.12395894,
          -0.9645274 , -0.97070986],
         [ 0.04964162, -0.99654734,  0.3507053 , ..., -0.8488309 ,
           0.6882356 , -0.8104348 ]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 8, 8]), 'from': [12], 'to': [20]}

generate models:372

analyse output arrays in iter:381

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [8], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [9], 'to': []}

generate models:374

analyse output arrays in iter:388

pre layer res:
7:conv2d
{'name': 'conv2d', 'output': array([[[[1.49279715e+13, 1.51977491e+13, 1.52429732e+13, ...,
          1.63010188e+13, 1.64416717e+13, 1.64416717e+13],
         [1.37009551e+13, 1.43517674e+13, 1.39594574e+13, ...,
          1.58366255e+13, 1.60215775e+13, 1.60215775e+13],
         [1.26498866e+13, 8.93406885e+12, 1.03355850e+13, ...,
          1.53789430e+13, 1.55612107e+13, 1.53335701e+13],
         ...,
         [1.05122687e+12, 1.23695058e+12, 2.41001352e+12, ...,
          1.23630749e+13, 1.20393417e+13, 1.26498866e+13],
         [1.21131500e+12, 1.69869312e+12, 5.20885581e+12, ...,
          1.24856041e+13, 1.26911009e+13, 1.23223954e+13],
         [3.08059885e+12, 7.03851187e+12, 8.02355465e+12, ...,
          1.10939131e+13, 1.17596205e+13, 1.15224577e+13]],

        [[1.49279715e+13, 1.51977491e+13, 1.52429732e+13, ...,
          1.63010188e+13, 1.64416717e+13, 1.64416717e+13],
         [1.37009551e+13, 1.43517674e+13, 1.39594574e+13, ...,
          1.58366255e+13, 1.60215775e+13, 1.60215775e+13],
         [1.26498866e+13, 8.93406885e+12, 1.03355850e+13, ...,
          1.53789430e+13, 1.55612107e+13, 1.53335701e+13],
         ...,
         [1.05122687e+12, 1.23695058e+12, 2.41001352e+12, ...,
          1.23630749e+13, 1.20393417e+13, 1.26498866e+13],
         [1.21131500e+12, 1.69869312e+12, 5.20885581e+12, ...,
          1.24856041e+13, 1.26911009e+13, 1.23223954e+13],
         [3.08059885e+12, 7.03851187e+12, 8.02355465e+12, ...,
          1.10939131e+13, 1.17596205e+13, 1.15224577e+13]],

        [[1.49279715e+13, 1.51977491e+13, 1.52429732e+13, ...,
          1.63010188e+13, 1.64416717e+13, 1.64416717e+13],
         [1.37009551e+13, 1.43517674e+13, 1.39594574e+13, ...,
          1.58366255e+13, 1.60215775e+13, 1.60215775e+13],
         [1.26498866e+13, 8.93406885e+12, 1.03355850e+13, ...,
          1.53789430e+13, 1.55612107e+13, 1.53335701e+13],
         ...,
         [1.05122687e+12, 1.23695058e+12, 2.41001352e+12, ...,
          1.23630749e+13, 1.20393417e+13, 1.26498866e+13],
         [1.21131500e+12, 1.69869312e+12, 5.20885581e+12, ...,
          1.24856041e+13, 1.26911009e+13, 1.23223954e+13],
         [3.08059885e+12, 7.03851187e+12, 8.02355465e+12, ...,
          1.10939131e+13, 1.17596205e+13, 1.15224577e+13]],

        ...,

        [[1.49279715e+13, 1.51977491e+13, 1.52429732e+13, ...,
          1.63010188e+13, 1.64416717e+13, 1.64416717e+13],
         [1.37009551e+13, 1.43517674e+13, 1.39594574e+13, ...,
          1.58366255e+13, 1.60215775e+13, 1.60215775e+13],
         [1.26498866e+13, 8.93406885e+12, 1.03355850e+13, ...,
          1.53789430e+13, 1.55612107e+13, 1.53335701e+13],
         ...,
         [1.05122687e+12, 1.23695058e+12, 2.41001352e+12, ...,
          1.23630749e+13, 1.20393417e+13, 1.26498866e+13],
         [1.21131500e+12, 1.69869312e+12, 5.20885581e+12, ...,
          1.24856041e+13, 1.26911009e+13, 1.23223954e+13],
         [3.08059885e+12, 7.03851187e+12, 8.02355465e+12, ...,
          1.10939131e+13, 1.17596205e+13, 1.15224577e+13]],

        [[1.49279715e+13, 1.51977491e+13, 1.52429732e+13, ...,
          1.63010188e+13, 1.64416717e+13, 1.64416717e+13],
         [1.37009551e+13, 1.43517674e+13, 1.39594574e+13, ...,
          1.58366255e+13, 1.60215775e+13, 1.60215775e+13],
         [1.26498866e+13, 8.93406885e+12, 1.03355850e+13, ...,
          1.53789430e+13, 1.55612107e+13, 1.53335701e+13],
         ...,
         [1.05122687e+12, 1.23695058e+12, 2.41001352e+12, ...,
          1.23630749e+13, 1.20393417e+13, 1.26498866e+13],
         [1.21131500e+12, 1.69869312e+12, 5.20885581e+12, ...,
          1.24856041e+13, 1.26911009e+13, 1.23223954e+13],
         [3.08059885e+12, 7.03851187e+12, 8.02355465e+12, ...,
          1.10939131e+13, 1.17596205e+13, 1.15224577e+13]],

        [[1.49279715e+13, 1.51977491e+13, 1.52429732e+13, ...,
          1.63010188e+13, 1.64416717e+13, 1.64416717e+13],
         [1.37009551e+13, 1.43517674e+13, 1.39594574e+13, ...,
          1.58366255e+13, 1.60215775e+13, 1.60215775e+13],
         [1.26498866e+13, 8.93406885e+12, 1.03355850e+13, ...,
          1.53789430e+13, 1.55612107e+13, 1.53335701e+13],
         ...,
         [1.05122687e+12, 1.23695058e+12, 2.41001352e+12, ...,
          1.23630749e+13, 1.20393417e+13, 1.26498866e+13],
         [1.21131500e+12, 1.69869312e+12, 5.20885581e+12, ...,
          1.24856041e+13, 1.26911009e+13, 1.23223954e+13],
         [3.08059885e+12, 7.03851187e+12, 8.02355465e+12, ...,
          1.10939131e+13, 1.17596205e+13, 1.15224577e+13]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [11], 'to': [16]}
tf node:
{'name': 'cos', 'output': array([[[[-0.9147948 , -0.88100696, -0.7397342 , ..., -0.15207498,
           0.9854534 ,  0.9854534 ],
         [-0.3044669 , -0.99876183,  0.9999123 , ..., -0.8976621 ,
           0.8679538 ,  0.8679538 ],
         [-0.5719338 , -0.8903229 , -0.25112817, ...,  0.96722656,
           0.10063415, -0.35541058],
         ...,
         [-0.8922098 ,  0.9970162 ,  0.4549745 , ..., -0.57764447,
           0.15322466, -0.5719338 ],
         [-0.8622473 ,  0.3438487 ,  0.4304695 , ..., -0.95412445,
          -0.7735547 , -0.6178864 ],
         [ 0.8476734 , -0.06886419,  0.39022186, ..., -0.9150215 ,
          -0.12341817, -0.97778344]],

        [[-0.9147948 , -0.88100696, -0.7397342 , ..., -0.15207498,
           0.9854534 ,  0.9854534 ],
         [-0.3044669 , -0.99876183,  0.9999123 , ..., -0.8976621 ,
           0.8679538 ,  0.8679538 ],
         [-0.5719338 , -0.8903229 , -0.25112817, ...,  0.96722656,
           0.10063415, -0.35541058],
         ...,
         [-0.8922098 ,  0.9970162 ,  0.4549745 , ..., -0.57764447,
           0.15322466, -0.5719338 ],
         [-0.8622473 ,  0.3438487 ,  0.4304695 , ..., -0.95412445,
          -0.7735547 , -0.6178864 ],
         [ 0.8476734 , -0.06886419,  0.39022186, ..., -0.9150215 ,
          -0.12341817, -0.97778344]],

        [[-0.9147948 , -0.88100696, -0.7397342 , ..., -0.15207498,
           0.9854534 ,  0.9854534 ],
         [-0.3044669 , -0.99876183,  0.9999123 , ..., -0.8976621 ,
           0.8679538 ,  0.8679538 ],
         [-0.5719338 , -0.8903229 , -0.25112817, ...,  0.96722656,
           0.10063415, -0.35541058],
         ...,
         [-0.8922098 ,  0.9970162 ,  0.4549745 , ..., -0.57764447,
           0.15322466, -0.5719338 ],
         [-0.8622473 ,  0.3438487 ,  0.4304695 , ..., -0.95412445,
          -0.7735547 , -0.6178864 ],
         [ 0.8476734 , -0.06886419,  0.39022186, ..., -0.9150215 ,
          -0.12341817, -0.97778344]],

        ...,

        [[-0.9147948 , -0.88100696, -0.7397342 , ..., -0.15207498,
           0.9854534 ,  0.9854534 ],
         [-0.3044669 , -0.99876183,  0.9999123 , ..., -0.8976621 ,
           0.8679538 ,  0.8679538 ],
         [-0.5719338 , -0.8903229 , -0.25112817, ...,  0.96722656,
           0.10063415, -0.35541058],
         ...,
         [-0.8922098 ,  0.9970162 ,  0.4549745 , ..., -0.57764447,
           0.15322466, -0.5719338 ],
         [-0.8622473 ,  0.3438487 ,  0.4304695 , ..., -0.95412445,
          -0.7735547 , -0.6178864 ],
         [ 0.8476734 , -0.06886419,  0.39022186, ..., -0.9150215 ,
          -0.12341817, -0.97778344]],

        [[-0.9147948 , -0.88100696, -0.7397342 , ..., -0.15207498,
           0.9854534 ,  0.9854534 ],
         [-0.3044669 , -0.99876183,  0.9999123 , ..., -0.8976621 ,
           0.8679538 ,  0.8679538 ],
         [-0.5719338 , -0.8903229 , -0.25112817, ...,  0.96722656,
           0.10063415, -0.35541058],
         ...,
         [-0.8922098 ,  0.9970162 ,  0.4549745 , ..., -0.57764447,
           0.15322466, -0.5719338 ],
         [-0.8622473 ,  0.3438487 ,  0.4304695 , ..., -0.95412445,
          -0.7735547 , -0.6178864 ],
         [ 0.8476734 , -0.06886419,  0.39022186, ..., -0.9150215 ,
          -0.12341817, -0.97778344]],

        [[-0.9147948 , -0.88100696, -0.7397342 , ..., -0.15207498,
           0.9854534 ,  0.9854534 ],
         [-0.3044669 , -0.99876183,  0.9999123 , ..., -0.8976621 ,
           0.8679538 ,  0.8679538 ],
         [-0.5719338 , -0.8903229 , -0.25112817, ...,  0.96722656,
           0.10063415, -0.35541058],
         ...,
         [-0.8922098 ,  0.9970162 ,  0.4549745 , ..., -0.57764447,
           0.15322466, -0.5719338 ],
         [-0.8622473 ,  0.3438487 ,  0.4304695 , ..., -0.95412445,
          -0.7735547 , -0.6178864 ],
         [ 0.8476734 , -0.06886419,  0.39022186, ..., -0.9150215 ,
          -0.12341817, -0.97778344]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [7], 'to': [8]}
ms node:
{'name': 'cos', 'output': array([[[[-0.9147948 , -0.88100696, -0.7397342 , ..., -0.15207501,
           0.9854534 ,  0.9854534 ],
         [-0.3044669 , -0.99876183,  0.9999123 , ..., -0.89766204,
           0.8679538 ,  0.8679538 ],
         [-0.5719338 , -0.8903229 , -0.25112817, ...,  0.96722656,
           0.10063413, -0.3554106 ],
         ...,
         [-0.8922098 ,  0.9970162 ,  0.4549745 , ..., -0.57764447,
           0.15322468, -0.5719338 ],
         [-0.8622473 ,  0.3438487 ,  0.4304695 , ..., -0.9541244 ,
          -0.7735547 , -0.6178864 ],
         [ 0.8476734 , -0.06886418,  0.39022186, ..., -0.9150215 ,
          -0.12341819, -0.97778344]],

        [[-0.9147948 , -0.88100696, -0.7397342 , ..., -0.15207501,
           0.9854534 ,  0.9854534 ],
         [-0.3044669 , -0.99876183,  0.9999123 , ..., -0.89766204,
           0.8679538 ,  0.8679538 ],
         [-0.5719338 , -0.8903229 , -0.25112817, ...,  0.96722656,
           0.10063413, -0.3554106 ],
         ...,
         [-0.8922098 ,  0.9970162 ,  0.4549745 , ..., -0.57764447,
           0.15322468, -0.5719338 ],
         [-0.8622473 ,  0.3438487 ,  0.4304695 , ..., -0.9541244 ,
          -0.7735547 , -0.6178864 ],
         [ 0.8476734 , -0.06886418,  0.39022186, ..., -0.9150215 ,
          -0.12341819, -0.97778344]],

        [[-0.9147948 , -0.88100696, -0.7397342 , ..., -0.15207501,
           0.9854534 ,  0.9854534 ],
         [-0.3044669 , -0.99876183,  0.9999123 , ..., -0.89766204,
           0.8679538 ,  0.8679538 ],
         [-0.5719338 , -0.8903229 , -0.25112817, ...,  0.96722656,
           0.10063413, -0.3554106 ],
         ...,
         [-0.8922098 ,  0.9970162 ,  0.4549745 , ..., -0.57764447,
           0.15322468, -0.5719338 ],
         [-0.8622473 ,  0.3438487 ,  0.4304695 , ..., -0.9541244 ,
          -0.7735547 , -0.6178864 ],
         [ 0.8476734 , -0.06886418,  0.39022186, ..., -0.9150215 ,
          -0.12341819, -0.97778344]],

        ...,

        [[-0.9147948 , -0.88100696, -0.7397342 , ..., -0.15207501,
           0.9854534 ,  0.9854534 ],
         [-0.3044669 , -0.99876183,  0.9999123 , ..., -0.89766204,
           0.8679538 ,  0.8679538 ],
         [-0.5719338 , -0.8903229 , -0.25112817, ...,  0.96722656,
           0.10063413, -0.3554106 ],
         ...,
         [-0.8922098 ,  0.9970162 ,  0.4549745 , ..., -0.57764447,
           0.15322468, -0.5719338 ],
         [-0.8622473 ,  0.3438487 ,  0.4304695 , ..., -0.9541244 ,
          -0.7735547 , -0.6178864 ],
         [ 0.8476734 , -0.06886418,  0.39022186, ..., -0.9150215 ,
          -0.12341819, -0.97778344]],

        [[ 0.86484486,  0.92767787, -0.7397342 , ..., -0.59006804,
           0.9854534 ,  0.9854534 ],
         [ 0.19790514, -0.99876183, -0.90740037, ...,  0.9468658 ,
          -0.9653327 , -0.9653327 ],
         [-0.5719338 , -0.8903229 , -0.9687464 , ..., -0.50575775,
          -0.77367127, -0.3554106 ],
         ...,
         [-0.8922098 ,  0.9970162 ,  0.4549745 , ...,  0.924352  ,
          -0.65737075, -0.5719338 ],
         [-0.8622473 ,  0.3438487 ,  0.4304695 , ..., -0.9541244 ,
           0.6991964 , -0.6178864 ],
         [ 0.8476734 , -0.06886418,  0.92195535, ...,  0.25247902,
          -0.12341819, -0.97778344]],

        [[ 0.86484486,  0.92767787, -0.7397342 , ..., -0.59006804,
           0.9854534 ,  0.9854534 ],
         [ 0.19790514, -0.99876183, -0.90740037, ...,  0.9468658 ,
          -0.9653327 , -0.9653327 ],
         [-0.5719338 , -0.8903229 , -0.9687464 , ..., -0.50575775,
          -0.77367127, -0.3554106 ],
         ...,
         [-0.8922098 ,  0.9970162 ,  0.4549745 , ...,  0.924352  ,
          -0.65737075, -0.5719338 ],
         [-0.8622473 ,  0.3438487 ,  0.4304695 , ..., -0.9541244 ,
           0.6991964 , -0.6178864 ],
         [ 0.8476734 , -0.06886418,  0.92195535, ...,  0.25247902,
          -0.12341819, -0.97778344]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [7], 'to': [8]}
torch node:
{'name': 'cos', 'output': array([[[[-0.9147948 , -0.88100696, -0.7397342 , ..., -0.15207498,
           0.9854534 ,  0.9854534 ],
         [-0.3044669 , -0.99876183,  0.9999123 , ..., -0.89766204,
           0.8679538 ,  0.8679538 ],
         [-0.5719338 , -0.8903229 , -0.25112817, ...,  0.96722656,
           0.10063414, -0.35541058],
         ...,
         [-0.8922098 ,  0.9970162 ,  0.4549745 , ..., -0.57764447,
           0.15322466, -0.5719338 ],
         [-0.8622473 ,  0.3438487 ,  0.43046954, ..., -0.9541244 ,
          -0.7735547 , -0.6178864 ],
         [ 0.8476734 , -0.06886419,  0.39022186, ..., -0.9150215 ,
          -0.12341817, -0.97778344]],

        [[-0.9147948 , -0.88100696, -0.7397342 , ..., -0.15207498,
           0.9854534 ,  0.9854534 ],
         [-0.3044669 , -0.99876183,  0.9999123 , ..., -0.89766204,
           0.8679538 ,  0.8679538 ],
         [-0.5719338 , -0.8903229 , -0.25112817, ...,  0.96722656,
           0.10063414, -0.35541058],
         ...,
         [-0.8922098 ,  0.9970162 ,  0.4549745 , ..., -0.57764447,
           0.15322466, -0.5719338 ],
         [-0.8622473 ,  0.3438487 ,  0.43046954, ..., -0.9541244 ,
          -0.7735547 , -0.6178864 ],
         [ 0.8476734 , -0.06886419,  0.39022186, ..., -0.9150215 ,
          -0.12341817, -0.97778344]],

        [[-0.9147948 , -0.88100696, -0.7397342 , ..., -0.15207498,
           0.9854534 ,  0.9854534 ],
         [-0.3044669 , -0.99876183,  0.9999123 , ..., -0.89766204,
           0.8679538 ,  0.8679538 ],
         [-0.5719338 , -0.8903229 , -0.25112817, ...,  0.96722656,
           0.10063414, -0.35541058],
         ...,
         [-0.8922098 ,  0.9970162 ,  0.4549745 , ..., -0.57764447,
           0.15322466, -0.5719338 ],
         [-0.8622473 ,  0.3438487 ,  0.43046954, ..., -0.9541244 ,
          -0.7735547 , -0.6178864 ],
         [ 0.8476734 , -0.06886419,  0.39022186, ..., -0.9150215 ,
          -0.12341817, -0.97778344]],

        ...,

        [[-0.9147948 , -0.88100696, -0.7397342 , ..., -0.15207498,
           0.9854534 ,  0.9854534 ],
         [-0.3044669 , -0.99876183,  0.9999123 , ..., -0.89766204,
           0.8679538 ,  0.8679538 ],
         [-0.5719338 , -0.8903229 , -0.25112817, ...,  0.96722656,
           0.10063414, -0.35541058],
         ...,
         [-0.8922098 ,  0.9970162 ,  0.4549745 , ..., -0.57764447,
           0.15322466, -0.5719338 ],
         [-0.8622473 ,  0.3438487 ,  0.43046954, ..., -0.9541244 ,
          -0.7735547 , -0.6178864 ],
         [ 0.8476734 , -0.06886419,  0.39022186, ..., -0.9150215 ,
          -0.12341817, -0.97778344]],

        [[-0.9147948 , -0.88100696, -0.7397342 , ..., -0.15207498,
           0.9854534 ,  0.9854534 ],
         [-0.3044669 , -0.99876183,  0.9999123 , ..., -0.89766204,
           0.8679538 ,  0.8679538 ],
         [-0.5719338 , -0.8903229 , -0.25112817, ...,  0.96722656,
           0.10063414, -0.35541058],
         ...,
         [-0.8922098 ,  0.9970162 ,  0.4549745 , ..., -0.57764447,
           0.15322466, -0.5719338 ],
         [-0.8622473 ,  0.3438487 ,  0.43046954, ..., -0.9541244 ,
          -0.7735547 , -0.6178864 ],
         [ 0.8476734 , -0.06886419,  0.39022186, ..., -0.9150215 ,
          -0.12341817, -0.97778344]],

        [[-0.9147948 , -0.88100696, -0.7397342 , ..., -0.15207498,
           0.9854534 ,  0.9854534 ],
         [-0.3044669 , -0.99876183,  0.9999123 , ..., -0.89766204,
           0.8679538 ,  0.8679538 ],
         [-0.5719338 , -0.8903229 , -0.25112817, ...,  0.96722656,
           0.10063414, -0.35541058],
         ...,
         [-0.8922098 ,  0.9970162 ,  0.4549745 , ..., -0.57764447,
           0.15322466, -0.5719338 ],
         [-0.8622473 ,  0.3438487 ,  0.43046954, ..., -0.9541244 ,
          -0.7735547 , -0.6178864 ],
         [ 0.8476734 , -0.06886419,  0.39022186, ..., -0.9150215 ,
          -0.12341817, -0.97778344]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [7], 'to': [8]}

generate models:381

analyse output arrays in iter:389

pre layer res:
21:flatten
{'name': 'flatten', 'output': array([[inf, inf, inf, ..., inf, inf, inf]], dtype=float32), 'output_shape': TensorShape([1, 8192]), 'from': [12], 'to': [30]}
tf node:
{'name': 'sin', 'output': array([[nan, nan, nan, ..., nan, nan, nan]], dtype=float32), 'output_shape': TensorShape([1, 8192]), 'from': [21], 'to': [22]}
ms node:
{'name': 'sin', 'output': array([[nan, nan, nan, ..., nan, nan, nan]], dtype=float32), 'output_shape': (1, 8192), 'from': [21], 'to': [22]}
torch node:
{'name': 'sin', 'output': array([[nan, nan, nan, ..., nan, nan, nan]], dtype=float32), 'output_shape': torch.Size([1, 8192]), 'from': [21], 'to': [22]}

generate models:382

analyse output arrays in iter:393

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [19], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [9], 'to': []}

generate models:386

analyse output arrays in iter:408

pre layer res:
12:add
{'name': 'add', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, 432.],
         [-inf, -inf, -inf, ..., -inf, -inf, 375.],
         [-inf, -inf, -inf, ..., -inf, -inf, 412.],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, 447.],
         [-inf, -inf, -inf, ..., -inf, -inf, 137.],
         [-inf, -inf, -inf, ..., -inf, -inf, 449.]],

        [[-inf, -inf, -inf, ..., -inf, -inf, 112.],
         [-inf, -inf, -inf, ..., -inf, -inf, 432.],
         [-inf, -inf, -inf, ..., -inf, -inf, 175.],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, 485.],
         [-inf, -inf, -inf, ..., -inf, -inf, 265.],
         [-inf, -inf, -inf, ..., -inf, -inf, 491.]],

        [[-inf, -inf, -inf, ..., -inf, -inf, 265.],
         [-inf, -inf, -inf, ..., -inf, -inf, 481.],
         [-inf, -inf, -inf, ..., -inf, -inf, 370.],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, 451.],
         [-inf, -inf, -inf, ..., -inf, -inf, 157.],
         [-inf, -inf, -inf, ..., -inf, -inf, 412.]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, 112.],
         [-inf, -inf, -inf, ..., -inf, -inf, 432.],
         [-inf, -inf, -inf, ..., -inf, -inf, 175.],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, 485.],
         [-inf, -inf, -inf, ..., -inf, -inf, 265.],
         [-inf, -inf, -inf, ..., -inf, -inf, 491.]],

        [[-inf, -inf, -inf, ..., -inf, -inf, 265.],
         [-inf, -inf, -inf, ..., -inf, -inf, 481.],
         [-inf, -inf, -inf, ..., -inf, -inf, 370.],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, 451.],
         [-inf, -inf, -inf, ..., -inf, -inf, 157.],
         [-inf, -inf, -inf, ..., -inf, -inf, 412.]],

        [[-inf, -inf, -inf, ..., -inf, -inf, 103.],
         [-inf, -inf, -inf, ..., -inf, -inf, 313.],
         [-inf, -inf, -inf, ..., -inf, -inf, 377.],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, 560.],
         [-inf, -inf, -inf, ..., -inf, -inf, 585.],
         [-inf, -inf, -inf, ..., -inf, -inf, 549.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [15, 21], 'to': [9]}
tf node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.3200000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.1200000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.6800000e+02],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.3700000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.4700000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.4900000e+02]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.3200000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.2500000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.3300000e+02],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.8100000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.8500000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.9100000e+02]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.8100000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.8200000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  5.2200000e+02],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  5.1900000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.5100000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.1200000e+02]],

        ...,

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.3200000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.2500000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.3300000e+02],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.8100000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.8500000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.9100000e+02]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.8100000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.8200000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  5.2200000e+02],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  5.1900000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.5100000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.1200000e+02]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  3.1300000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  3.8700000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  5.6300000e+02],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  6.0300000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  6.1200000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  5.8500000e+02]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [12], 'to': [10]}
ms node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.3200000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.1200000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.6800000e+02],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.3700000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.4700000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.4900000e+02]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.3200000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.2500000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.3300000e+02],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.8100000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.8500000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.9100000e+02]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.8100000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.8200000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  5.2200000e+02],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  5.1900000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.5100000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.1200000e+02]],

        ...,

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.3200000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.2500000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.3300000e+02],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.8100000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.8500000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.9100000e+02]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.8100000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.8200000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  5.2200000e+02],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  5.1900000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.5100000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  4.1200000e+02]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  3.1300000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  3.8700000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  5.6300000e+02],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  6.0300000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  6.1200000e+02],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38,  5.8500000e+02]]]],
      dtype=float32), 'output_shape': (1, 128, 8, 8), 'from': [12], 'to': [10]}
torch node:
{'name': 'maxpool2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, 432.],
         [-inf, -inf, -inf, ..., -inf, -inf, 412.],
         [-inf, -inf, -inf, ..., -inf, -inf, 468.],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, 437.],
         [-inf, -inf, -inf, ..., -inf, -inf, 447.],
         [-inf, -inf, -inf, ..., -inf, -inf, 449.]],

        [[-inf, -inf, -inf, ..., -inf, -inf, 432.],
         [-inf, -inf, -inf, ..., -inf, -inf, 425.],
         [-inf, -inf, -inf, ..., -inf, -inf, 433.],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, 481.],
         [-inf, -inf, -inf, ..., -inf, -inf, 485.],
         [-inf, -inf, -inf, ..., -inf, -inf, 491.]],

        [[-inf, -inf, -inf, ..., -inf, -inf, 481.],
         [-inf, -inf, -inf, ..., -inf, -inf, 482.],
         [-inf, -inf, -inf, ..., -inf, -inf, 522.],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, 519.],
         [-inf, -inf, -inf, ..., -inf, -inf, 451.],
         [-inf, -inf, -inf, ..., -inf, -inf, 412.]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, 432.],
         [-inf, -inf, -inf, ..., -inf, -inf, 425.],
         [-inf, -inf, -inf, ..., -inf, -inf, 433.],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, 481.],
         [-inf, -inf, -inf, ..., -inf, -inf, 485.],
         [-inf, -inf, -inf, ..., -inf, -inf, 491.]],

        [[-inf, -inf, -inf, ..., -inf, -inf, 481.],
         [-inf, -inf, -inf, ..., -inf, -inf, 482.],
         [-inf, -inf, -inf, ..., -inf, -inf, 522.],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, 519.],
         [-inf, -inf, -inf, ..., -inf, -inf, 451.],
         [-inf, -inf, -inf, ..., -inf, -inf, 412.]],

        [[-inf, -inf, -inf, ..., -inf, -inf, 313.],
         [-inf, -inf, -inf, ..., -inf, -inf, 387.],
         [-inf, -inf, -inf, ..., -inf, -inf, 563.],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, 603.],
         [-inf, -inf, -inf, ..., -inf, -inf, 612.],
         [-inf, -inf, -inf, ..., -inf, -inf, 585.]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 8, 8]), 'from': [12], 'to': [10]}

pre layer res:
8:relu
{'name': 'relu', 'output': array([[[[0., 0., 0., ..., 0., 0., 1.],
         [0., 0., 0., ..., 0., 0., 1.],
         [0., 0., 0., ..., 0., 0., 1.],
         ...,
         [0., 0., 0., ..., 0., 0., 1.],
         [0., 0., 0., ..., 0., 0., 1.],
         [0., 0., 0., ..., 0., 0., 1.]],

        [[0., 0., 0., ..., 0., 0., 1.],
         [0., 0., 0., ..., 0., 0., 1.],
         [0., 0., 0., ..., 0., 0., 1.],
         ...,
         [0., 0., 0., ..., 0., 0., 1.],
         [0., 0., 0., ..., 0., 0., 1.],
         [0., 0., 0., ..., 0., 0., 1.]],

        [[0., 0., 0., ..., 0., 0., 1.],
         [0., 0., 0., ..., 0., 0., 1.],
         [0., 0., 0., ..., 0., 0., 1.],
         ...,
         [0., 0., 0., ..., 0., 0., 1.],
         [0., 0., 0., ..., 0., 0., 1.],
         [0., 0., 0., ..., 0., 0., 1.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 1.],
         [0., 0., 0., ..., 0., 0., 1.],
         [0., 0., 0., ..., 0., 0., 1.],
         ...,
         [0., 0., 0., ..., 0., 0., 1.],
         [0., 0., 0., ..., 0., 0., 1.],
         [0., 0., 0., ..., 0., 0., 1.]],

        [[0., 0., 0., ..., 0., 0., 1.],
         [0., 0., 0., ..., 0., 0., 1.],
         [0., 0., 0., ..., 0., 0., 1.],
         ...,
         [0., 0., 0., ..., 0., 0., 1.],
         [0., 0., 0., ..., 0., 0., 1.],
         [0., 0., 0., ..., 0., 0., 1.]],

        [[0., 0., 0., ..., 0., 0., 1.],
         [0., 0., 0., ..., 0., 0., 1.],
         [0., 0., 0., ..., 0., 0., 1.],
         ...,
         [0., 0., 0., ..., 0., 0., 1.],
         [0., 0., 0., ..., 0., 0., 1.],
         [0., 0., 0., ..., 0., 0., 1.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [11], 'to': [21]}
tf node:
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.]],

        [[-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.]],

        [[-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.]],

        [[-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.]],

        [[-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [8], 'to': [12]}
ms node:
{'name': 'log', 'output': array([[[[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06]],

        [[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06]],

        [[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06]],

        ...,

        [[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06]],

        [[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06]],

        [[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06]]]],
      dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [8], 'to': [12]}
torch node:
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.]],

        [[-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.]],

        [[-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.]],

        [[-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.]],

        [[-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.],
         [-inf, -inf, -inf, ..., -inf, -inf,   0.]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [8], 'to': [12]}

generate models:400

analyse output arrays in iter:413

pre layer res:
16:add
{'name': 'add', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [19, 20], 'to': [11]}
tf node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [16], 'to': [5]}
ms node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [16], 'to': [5]}
torch node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [16], 'to': [5]}

generate models:404

analyse output arrays in iter:417

pre layer res:
13:flatten
{'name': 'flatten', 'output': array([[32761.373, 63936.47 , 58508.004, ..., 61232.28 , 56723.316,
        65536.02 ]], dtype=float32), 'output_shape': TensorShape([1, 2048]), 'from': [12], 'to': [19]}
tf node:
{'name': 'sin', 'output': array([[ 0.7478751 , -0.9407841 , -0.8508885 , ...,  0.48044416,
        -0.95817256,  0.67495894]], dtype=float32), 'output_shape': TensorShape([1, 2048]), 'from': [13], 'to': [14]}
ms node:
{'name': 'sin', 'output': array([[ 0.74787503, -0.9407841 , -0.8508885 , ...,  0.5309785 ,
        -0.9512024 ,  0.75914776]], dtype=float32), 'output_shape': (1, 2048), 'from': [13], 'to': [14]}
torch node:
{'name': 'sin', 'output': array([[ 0.74787503, -0.9407841 , -0.8529341 , ...,  0.4804442 ,
        -0.95817256,  0.67495894]], dtype=float32), 'output_shape': torch.Size([1, 2048]), 'from': [13], 'to': [14]}

generate models:408

analyse the exceptions in iter:421
torch exception:
{'id': 27, 'name': 'flatten', 'frame_work': 'torch', 'input_datas': [tensor([2.6391e+08], grad_fn=<SumBackward1>)]}
Dimension out of range (expected to be in range of [-1, 0], but got 1)

generate models:411

analyse output arrays in iter:431

pre layer res:
27:reshape
{'name': 'reshape', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [26], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [27], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [27], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [27], 'to': []}

generate models:421

analyse output arrays in iter:438

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[inf,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[inf,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        ...,

        [[inf,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[inf,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[inf,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [8], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan,  0., ...,  0.,  0.,  0.],
         [nan, nan,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[nan, nan,  0., ...,  0.,  0.,  0.],
         [nan, nan,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[nan, nan,  0., ...,  0.,  0.,  0.],
         [nan, nan,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        ...,

        [[nan, nan,  0., ...,  0.,  0.,  0.],
         [nan, nan,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[nan, nan,  0., ...,  0.,  0.,  0.],
         [nan, nan,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[nan, nan,  0., ...,  0.,  0.,  0.],
         [nan, nan,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf,  0., ...,  0.,  0.,  0.],
         [inf, inf,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[inf, inf,  0., ...,  0.,  0.,  0.],
         [inf, inf,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[inf, inf,  0., ...,  0.,  0.,  0.],
         [inf, inf,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        ...,

        [[inf, inf,  0., ...,  0.,  0.,  0.],
         [inf, inf,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[inf, inf,  0., ...,  0.,  0.,  0.],
         [inf, inf,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[inf, inf,  0., ...,  0.,  0.,  0.],
         [inf, inf,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf,  0., ...,  0.,  0.,  0.],
         [inf, inf,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[inf, inf,  0., ...,  0.,  0.,  0.],
         [inf, inf,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[inf, inf,  0., ...,  0.,  0.,  0.],
         [inf, inf,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        ...,

        [[inf, inf,  0., ...,  0.,  0.,  0.],
         [inf, inf,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[inf, inf,  0., ...,  0.,  0.,  0.],
         [inf, inf,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[inf, inf,  0., ...,  0.,  0.,  0.],
         [inf, inf,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [9], 'to': []}

generate models:427

analyse output arrays in iter:449

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [8], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [9], 'to': []}

generate models:438

analyse output arrays in iter:463

pre layer res:
11:add
{'name': 'add', 'output': array([[[[4456459. , 3719179. , 2752522.8, ..., 2932746.8, 3407883. ,
          2875402.8],
         [3481611. , 2768906.8, 2211850.5, ..., 3514379. , 4079627. ,
          3555339. ],
         [1933322.4, 2129930.5, 2236426.5, ..., 3825675. , 3825675. ,
          2523146.5],
         ...,
         [2908170.8, 2818058.8, 2949130.8, ..., 2580490.5, 2727946.8,
          3309578.8],
         [2760714.8, 2965514.8, 3325962.8, ..., 1974282.4, 2883594.8,
          3407883. ],
         [2498570.5, 2842634.8, 3358730.8, ..., 2703370.8, 2473994.5,
          3014666.8]],

        [[4456459. , 3719179. , 2752522.8, ..., 2932746.8, 3407883. ,
          2875402.8],
         [3481611. , 2768906.8, 2211850.5, ..., 3514379. , 4079627. ,
          3555339. ],
         [1933322.4, 2129930.5, 2236426.5, ..., 3825675. , 3825675. ,
          2523146.5],
         ...,
         [2908170.8, 2818058.8, 2949130.8, ..., 2580490.5, 2727946.8,
          3309578.8],
         [2760714.8, 2965514.8, 3325962.8, ..., 1974282.4, 2883594.8,
          3407883. ],
         [2498570.5, 2842634.8, 3358730.8, ..., 2703370.8, 2473994.5,
          3014666.8]],

        [[4456459. , 3719179. , 2752522.8, ..., 2932746.8, 3407883. ,
          2875402.8],
         [3481611. , 2768906.8, 2211850.5, ..., 3514379. , 4079627. ,
          3555339. ],
         [1933322.4, 2129930.5, 2236426.5, ..., 3825675. , 3825675. ,
          2523146.5],
         ...,
         [2908170.8, 2818058.8, 2949130.8, ..., 2580490.5, 2727946.8,
          3309578.8],
         [2760714.8, 2965514.8, 3325962.8, ..., 1974282.4, 2883594.8,
          3407883. ],
         [2498570.5, 2842634.8, 3358730.8, ..., 2703370.8, 2473994.5,
          3014666.8]],

        ...,

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [8, 14], 'to': [9]}
tf node:
{'name': 'maxpool2d', 'output': array([[[[ 4.4564590e+06,  2.7689068e+06,  4.0468590e+06, ...,
           2.6132585e+06,  3.5143790e+06,  4.0796270e+06],
         [ 2.3265385e+06,  3.4406510e+06,  3.8502510e+06, ...,
           3.6536430e+06,  4.1861230e+06,  3.8256750e+06],
         [ 3.7273710e+06,  3.3587308e+06,  3.7765230e+06, ...,
           4.2516590e+06,  4.5875310e+06,  3.0146668e+06],
         ...,
         [ 3.5061870e+06,  3.1129708e+06,  2.9982828e+06, ...,
           4.4974190e+06,  3.4488430e+06,  3.7027950e+06],
         [ 2.9081708e+06,  3.1785068e+06,  4.2926190e+06, ...,
           2.8344428e+06,  3.5143790e+06,  3.5143790e+06],
         [ 2.9655148e+06,  4.1205870e+06,  4.4728430e+06, ...,
           2.4903785e+06,  2.7033708e+06,  3.4078830e+06]],

        [[ 4.4564590e+06,  2.7689068e+06,  4.0468590e+06, ...,
           2.6132585e+06,  3.5143790e+06,  4.0796270e+06],
         [ 2.3265385e+06,  3.4406510e+06,  3.8502510e+06, ...,
           3.6536430e+06,  4.1861230e+06,  3.8256750e+06],
         [ 3.7273710e+06,  3.3587308e+06,  3.7765230e+06, ...,
           4.2516590e+06,  4.5875310e+06,  3.0146668e+06],
         ...,
         [ 3.5061870e+06,  3.1129708e+06,  2.9982828e+06, ...,
           4.4974190e+06,  3.4488430e+06,  3.7027950e+06],
         [ 2.9081708e+06,  3.1785068e+06,  4.2926190e+06, ...,
           2.8344428e+06,  3.5143790e+06,  3.5143790e+06],
         [ 2.9655148e+06,  4.1205870e+06,  4.4728430e+06, ...,
           2.4903785e+06,  2.7033708e+06,  3.4078830e+06]],

        [[ 4.4564590e+06,  2.7689068e+06,  4.0468590e+06, ...,
           2.6132585e+06,  3.5143790e+06,  4.0796270e+06],
         [ 2.3265385e+06,  3.4406510e+06,  3.8502510e+06, ...,
           3.6536430e+06,  4.1861230e+06,  3.8256750e+06],
         [ 3.7273710e+06,  3.3587308e+06,  3.7765230e+06, ...,
           4.2516590e+06,  4.5875310e+06,  3.0146668e+06],
         ...,
         [ 3.5061870e+06,  3.1129708e+06,  2.9982828e+06, ...,
           4.4974190e+06,  3.4488430e+06,  3.7027950e+06],
         [ 2.9081708e+06,  3.1785068e+06,  4.2926190e+06, ...,
           2.8344428e+06,  3.5143790e+06,  3.5143790e+06],
         [ 2.9655148e+06,  4.1205870e+06,  4.4728430e+06, ...,
           2.4903785e+06,  2.7033708e+06,  3.4078830e+06]],

        ...,

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [11], 'to': [10]}
ms node:
{'name': 'maxpool2d', 'output': array([[[[ 4.4564590e+06,  2.7689068e+06,  4.0468590e+06, ...,
           2.6132585e+06,  3.5143790e+06,  4.0796270e+06],
         [ 2.3265385e+06,  3.4406510e+06,  3.8502510e+06, ...,
           3.6536430e+06,  4.1861230e+06,  3.8256750e+06],
         [ 3.7273710e+06,  3.3587308e+06,  3.7765230e+06, ...,
           4.2516590e+06,  4.5875310e+06,  3.0146668e+06],
         ...,
         [ 3.5061870e+06,  3.1129708e+06,  2.9982828e+06, ...,
           4.4974190e+06,  3.4488430e+06,  3.7027950e+06],
         [ 2.9081708e+06,  3.1785068e+06,  4.2926190e+06, ...,
           2.8344428e+06,  3.5143790e+06,  3.5143790e+06],
         [ 2.9655148e+06,  4.1205870e+06,  4.4728430e+06, ...,
           2.4903785e+06,  2.7033708e+06,  3.4078830e+06]],

        [[ 4.4564590e+06,  2.7689068e+06,  4.0468590e+06, ...,
           2.6132585e+06,  3.5143790e+06,  4.0796270e+06],
         [ 2.3265385e+06,  3.4406510e+06,  3.8502510e+06, ...,
           3.6536430e+06,  4.1861230e+06,  3.8256750e+06],
         [ 3.7273710e+06,  3.3587308e+06,  3.7765230e+06, ...,
           4.2516590e+06,  4.5875310e+06,  3.0146668e+06],
         ...,
         [ 3.5061870e+06,  3.1129708e+06,  2.9982828e+06, ...,
           4.4974190e+06,  3.4488430e+06,  3.7027950e+06],
         [ 2.9081708e+06,  3.1785068e+06,  4.2926190e+06, ...,
           2.8344428e+06,  3.5143790e+06,  3.5143790e+06],
         [ 2.9655148e+06,  4.1205870e+06,  4.4728430e+06, ...,
           2.4903785e+06,  2.7033708e+06,  3.4078830e+06]],

        [[ 4.4564590e+06,  2.7689068e+06,  4.0468590e+06, ...,
           2.6132585e+06,  3.5143790e+06,  4.0796270e+06],
         [ 2.3265385e+06,  3.4406510e+06,  3.8502510e+06, ...,
           3.6536430e+06,  4.1861230e+06,  3.8256750e+06],
         [ 3.7273710e+06,  3.3587308e+06,  3.7765230e+06, ...,
           4.2516590e+06,  4.5875310e+06,  3.0146668e+06],
         ...,
         [ 3.5061870e+06,  3.1129708e+06,  2.9982828e+06, ...,
           4.4974190e+06,  3.4488430e+06,  3.7027950e+06],
         [ 2.9081708e+06,  3.1785068e+06,  4.2926190e+06, ...,
           2.8344428e+06,  3.5143790e+06,  3.5143790e+06],
         [ 2.9655148e+06,  4.1205870e+06,  4.4728430e+06, ...,
           2.4903785e+06,  2.7033708e+06,  3.4078830e+06]],

        ...,

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': (1, 128, 8, 8), 'from': [11], 'to': [10]}
torch node:
{'name': 'maxpool2d', 'output': array([[[[4456459. , 2768906.8, 4046859. , ..., 2613258.5, 3514379. ,
          4079627. ],
         [2326538.5, 3440651. , 3850251. , ..., 3653643. , 4186123. ,
          3825675. ],
         [3727371. , 3358730.8, 3776523. , ..., 4251659. , 4587531. ,
          3014666.8],
         ...,
         [3506187. , 3112970.8, 2998282.8, ..., 4497419. , 3448843. ,
          3702795. ],
         [2908170.8, 3178506.8, 4292619. , ..., 2834442.8, 3514379. ,
          3514379. ],
         [2965514.8, 4120587. , 4472843. , ..., 2490378.5, 2703370.8,
          3407883. ]],

        [[4456459. , 2768906.8, 4046859. , ..., 2613258.5, 3514379. ,
          4079627. ],
         [2326538.5, 3440651. , 3850251. , ..., 3653643. , 4186123. ,
          3825675. ],
         [3727371. , 3358730.8, 3776523. , ..., 4251659. , 4587531. ,
          3014666.8],
         ...,
         [3506187. , 3112970.8, 2998282.8, ..., 4497419. , 3448843. ,
          3702795. ],
         [2908170.8, 3178506.8, 4292619. , ..., 2834442.8, 3514379. ,
          3514379. ],
         [2965514.8, 4120587. , 4472843. , ..., 2490378.5, 2703370.8,
          3407883. ]],

        [[4456459. , 2768906.8, 4046859. , ..., 2613258.5, 3514379. ,
          4079627. ],
         [2326538.5, 3440651. , 3850251. , ..., 3653643. , 4186123. ,
          3825675. ],
         [3727371. , 3358730.8, 3776523. , ..., 4251659. , 4587531. ,
          3014666.8],
         ...,
         [3506187. , 3112970.8, 2998282.8, ..., 4497419. , 3448843. ,
          3702795. ],
         [2908170.8, 3178506.8, 4292619. , ..., 2834442.8, 3514379. ,
          3514379. ],
         [2965514.8, 4120587. , 4472843. , ..., 2490378.5, 2703370.8,
          3407883. ]],

        ...,

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 8, 8]), 'from': [11], 'to': [10]}

generate models:452

analyse output arrays in iter:495

pre layer res:
18:add
{'name': 'add', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [15, 21], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [18], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [18], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [18], 'to': []}

generate models:483

final statics:
total operators:28
tensorflow --> nums:48,distinct_bugs:5
mindspore --> nums:25,distinct_bugs:6
torch --> nums:28,distinct_bugs:7
tensorflow --> 
conv2d:27
sin:9
cos:8
softmax:3
log:1
mindspore --> 
sin:9
cos:8
conv2d:1
log:3
softmax:3
add:1
torch --> 
sin:9
cos:7
conv2d:1
maxpool2d:5
softmax:3
log:1
flatten:2

generate models:487
