
analyse output arrays in iter:2

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
           67., 232.,  39.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,  62.,  81.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
          120., 180.,  39.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0., 126., 163.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   2.,
          153., 210.,  40.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0., 220., 163.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  27.,
          254., 162.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0., 222., 163.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0., 183.,
          254., 125.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,  46., 245., 163.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0., 198.,
          254.,  56.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0., 120., 254., 163.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  23., 231.,
          254.,  29.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0., 159., 254., 120.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0., 163., 254.,
          216.,  16.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0., 159., 254.,  67.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,  14.,  86., 178., 248., 254.,
           91.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0., 159., 254.,  85.,   0.,   0.,   0.,  47.,
           49., 116., 144., 150., 241., 243., 234., 179., 241., 252.,
           40.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0., 150., 253., 237., 207., 207., 207., 253.,
          254., 250., 240., 198., 143.,  91.,  28.,   5., 233., 250.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0., 119., 177., 177., 177., 177., 177.,
           98.,  56.,   0.,   0.,   0.,   0.,   0., 102., 254., 220.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0., 169., 254., 137.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0., 169., 254.,  57.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0., 169., 254.,  57.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0., 169., 255.,  94.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0., 169., 254.,  96.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0., 169., 254., 153.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0., 169., 255., 153.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,  96., 254., 153.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 1, 28, 28]), 'from': [], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [  62.,  143.,  143., ...,  677.,   78.,    0.],
         [ 408.,  815.,  815., ..., 1496.,  118.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [  62.,  143.,  143., ...,  677.,   78.,    0.],
         [ 408.,  815.,  815., ..., 1496.,  118.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [  62.,  143.,  143., ...,  677.,   78.,    0.],
         [ 408.,  815.,  815., ..., 1496.,  118.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        ...,

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [  62.,  143.,  143., ...,  677.,   78.,    0.],
         [ 408.,  815.,  815., ..., 1496.,  118.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [  62.,  143.,  143., ...,  677.,   78.,    0.],
         [ 408.,  815.,  815., ..., 1496.,  118.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [  62.,  143.,  143., ...,  677.,   78.,    0.],
         [ 408.,  815.,  815., ..., 1496.,  118.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 14, 14]), 'from': [0], 'to': [3]}
ms node:
{'name': 'conv2d', 'output': array([[[[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  338.,  271.,    0.],
         [   0.,  432.,  432., ..., 1082.,  740.,    0.],
         ...,
         [   0.,    0.,    0., ...,  706.,    0.,    0.],
         [   0.,    0.,    0., ...,  555.,    0.,    0.],
         [   0.,    0.,    0., ...,  306.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  338.,  271.,    0.],
         [   0.,  432.,  432., ..., 1082.,  740.,    0.],
         ...,
         [   0.,    0.,    0., ...,  706.,    0.,    0.],
         [   0.,    0.,    0., ...,  555.,    0.,    0.],
         [   0.,    0.,    0., ...,  306.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  338.,  271.,    0.],
         [   0.,  432.,  432., ..., 1082.,  740.,    0.],
         ...,
         [   0.,    0.,    0., ...,  706.,    0.,    0.],
         [   0.,    0.,    0., ...,  555.,    0.,    0.],
         [   0.,    0.,    0., ...,  306.,    0.,    0.]],

        ...,

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  338.,  271.,    0.],
         [   0.,  432.,  432., ..., 1082.,  740.,    0.],
         ...,
         [   0.,    0.,    0., ...,  706.,    0.,    0.],
         [   0.,    0.,    0., ...,  555.,    0.,    0.],
         [   0.,    0.,    0., ...,  306.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  338.,  271.,    0.],
         [   0.,  432.,  432., ..., 1082.,  740.,    0.],
         ...,
         [   0.,    0.,    0., ...,  706.,    0.,    0.],
         [   0.,    0.,    0., ...,  555.,    0.,    0.],
         [   0.,    0.,    0., ...,  306.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  338.,  271.,    0.],
         [   0.,  432.,  432., ..., 1082.,  740.,    0.],
         ...,
         [   0.,    0.,    0., ...,  706.,    0.,    0.],
         [   0.,    0.,    0., ...,  555.,    0.,    0.],
         [   0.,    0.,    0., ...,  306.,    0.,    0.]]]], dtype=float32), 'output_shape': (1, 64, 14, 14), 'from': [0], 'to': [3]}
torch node:
{'name': 'conv2d', 'output': array([[[[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  338.,  271.,    0.],
         [   0.,  432.,  432., ..., 1082.,  740.,    0.],
         ...,
         [   0.,    0.,    0., ...,  706.,    0.,    0.],
         [   0.,    0.,    0., ...,  555.,    0.,    0.],
         [   0.,    0.,    0., ...,  306.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  338.,  271.,    0.],
         [   0.,  432.,  432., ..., 1082.,  740.,    0.],
         ...,
         [   0.,    0.,    0., ...,  706.,    0.,    0.],
         [   0.,    0.,    0., ...,  555.,    0.,    0.],
         [   0.,    0.,    0., ...,  306.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  338.,  271.,    0.],
         [   0.,  432.,  432., ..., 1082.,  740.,    0.],
         ...,
         [   0.,    0.,    0., ...,  706.,    0.,    0.],
         [   0.,    0.,    0., ...,  555.,    0.,    0.],
         [   0.,    0.,    0., ...,  306.,    0.,    0.]],

        ...,

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  338.,  271.,    0.],
         [   0.,  432.,  432., ..., 1082.,  740.,    0.],
         ...,
         [   0.,    0.,    0., ...,  706.,    0.,    0.],
         [   0.,    0.,    0., ...,  555.,    0.,    0.],
         [   0.,    0.,    0., ...,  306.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  338.,  271.,    0.],
         [   0.,  432.,  432., ..., 1082.,  740.,    0.],
         ...,
         [   0.,    0.,    0., ...,  706.,    0.,    0.],
         [   0.,    0.,    0., ...,  555.,    0.,    0.],
         [   0.,    0.,    0., ...,  306.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  338.,  271.,    0.],
         [   0.,  432.,  432., ..., 1082.,  740.,    0.],
         ...,
         [   0.,    0.,    0., ...,  706.,    0.,    0.],
         [   0.,    0.,    0., ...,  555.,    0.,    0.],
         [   0.,    0.,    0., ...,  306.,    0.,    0.]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 14, 14]), 'from': [0], 'to': [3]}

generate models:3

analyse output arrays in iter:3

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0., 124., 253.,
          255.,  63.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,  96., 244., 251.,
          253.,  62.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0., 127., 251., 251.,
          253.,  62.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,  68., 236., 251., 211.,
           31.,   8.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,  60., 228., 251., 251.,  94.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0., 155., 253., 253., 189.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,  20., 253., 251., 235.,  66.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,  32., 205., 253., 251., 126.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0., 104., 251., 253., 184.,  15.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,  80., 240., 251., 193.,  23.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,  32., 253., 253., 253., 159.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0., 151., 251., 251., 251.,  39.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
           48., 221., 251., 251., 172.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
          234., 251., 251., 196.,  12.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
          253., 251., 251.,  89.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0., 159.,
          255., 253., 253.,  31.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  48., 228.,
          253., 247., 140.,   8.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  64., 251.,
          253., 220.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  64., 251.,
          253., 220.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  24., 193.,
          253., 220.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 1, 28, 28]), 'from': [], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 633.,   0.,   0.],
         [  0.,   0.,   0., ..., 987.,   0.,   0.],
         ...,
         [  0.,   0., 200., ...,   0.,   0.,   0.],
         [  0.,   0., 152., ...,   0.,   0.,   0.],
         [  0.,   0.,  24., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 633.,   0.,   0.],
         [  0.,   0.,   0., ..., 987.,   0.,   0.],
         ...,
         [  0.,   0., 200., ...,   0.,   0.,   0.],
         [  0.,   0., 152., ...,   0.,   0.,   0.],
         [  0.,   0.,  24., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 633.,   0.,   0.],
         [  0.,   0.,   0., ..., 987.,   0.,   0.],
         ...,
         [  0.,   0., 200., ...,   0.,   0.,   0.],
         [  0.,   0., 152., ...,   0.,   0.,   0.],
         [  0.,   0.,  24., ...,   0.,   0.,   0.]],

        ...,

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 633.,   0.,   0.],
         [  0.,   0.,   0., ..., 987.,   0.,   0.],
         ...,
         [  0.,   0., 200., ...,   0.,   0.,   0.],
         [  0.,   0., 152., ...,   0.,   0.,   0.],
         [  0.,   0.,  24., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 633.,   0.,   0.],
         [  0.,   0.,   0., ..., 987.,   0.,   0.],
         ...,
         [  0.,   0., 200., ...,   0.,   0.,   0.],
         [  0.,   0., 152., ...,   0.,   0.,   0.],
         [  0.,   0.,  24., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 633.,   0.,   0.],
         [  0.,   0.,   0., ..., 987.,   0.,   0.],
         ...,
         [  0.,   0., 200., ...,   0.,   0.,   0.],
         [  0.,   0., 152., ...,   0.,   0.,   0.],
         [  0.,   0.,  24., ...,   0.,   0.,   0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 14, 14]), 'from': [0], 'to': [4]}
ms node:
{'name': 'conv2d', 'output': array([[[[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  571.,   63.,    0.],
         [   0.,    0.,    0., ..., 1703.,  187.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  571.,   63.,    0.],
         [   0.,    0.,    0., ..., 1703.,  187.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  571.,   63.,    0.],
         [   0.,    0.,    0., ..., 1703.,  187.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        ...,

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  571.,   63.,    0.],
         [   0.,    0.,    0., ..., 1703.,  187.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  571.,   63.,    0.],
         [   0.,    0.,    0., ..., 1703.,  187.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  571.,   63.,    0.],
         [   0.,    0.,    0., ..., 1703.,  187.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]]]], dtype=float32), 'output_shape': (1, 64, 14, 14), 'from': [0], 'to': [4]}
torch node:
{'name': 'conv2d', 'output': array([[[[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  571.,   63.,    0.],
         [   0.,    0.,    0., ..., 1703.,  187.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  571.,   63.,    0.],
         [   0.,    0.,    0., ..., 1703.,  187.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  571.,   63.,    0.],
         [   0.,    0.,    0., ..., 1703.,  187.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        ...,

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  571.,   63.,    0.],
         [   0.,    0.,    0., ..., 1703.,  187.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  571.,   63.,    0.],
         [   0.,    0.,    0., ..., 1703.,  187.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  571.,   63.,    0.],
         [   0.,    0.,    0., ..., 1703.,  187.,    0.],
         ...,
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 14, 14]), 'from': [0], 'to': [4]}

generate models:4

analyse output arrays in iter:4

pre layer res:
6:transpose
{'name': 'transpose', 'output': array([[[[  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,  16.,  22.,  16.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0., 126., 232., 252., 231.,  55.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0., 132., 253., 252., 252., 252., 235.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   4.,
           96., 253., 247., 176.,  30., 253., 253.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  57.,
          252., 252., 176.,   0.,  22., 252., 217.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  87., 242.,
          252., 146.,   9.,   0., 119., 252., 138.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,  55., 232., 252.,
          183.,  14.,   0.,   0., 197., 252.,  42.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0., 148., 252., 190.,
           14.,   0.,   0.,  36., 241., 226.,  24.,  62.,  71.,   0.,
           71., 106.,  45.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0., 210., 253.,  65.,
            0.,   0.,   8., 201., 253., 227., 192., 255., 253., 253.,
          253., 253., 255., 218.,  96.,  14.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0., 253., 189.,   5.,
            0.,   0.,  78., 252., 252., 252., 252., 253., 252., 252.,
          252., 252., 253., 252., 252., 184.,  14.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0., 253., 210.,  12.,
           92., 215., 245., 252., 251., 231., 143., 109.,  21.,  21.,
           21.,  21.,  21.,  56., 189., 252., 147.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0., 113., 252., 182.,
          252., 252., 253., 169.,  77.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,  42., 170., 252.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,  87., 252., 252.,
          252., 252., 129.,  11.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,  11.,  42.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0., 148., 253., 253.,
          225.,  79.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,  55., 168., 116.,
           21.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 1, 28, 28]), 'from': [5], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0., 223., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0., 223., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0., 223., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        ...,

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0., 223., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0., 223., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0., 223., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 14, 14]), 'from': [6], 'to': [2]}
ms node:
{'name': 'conv2d', 'output': array([[[[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0., 203., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0., 203., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0., 203., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        ...,

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0., 203., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0., 203., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0., 203., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]]]], dtype=float32), 'output_shape': (1, 64, 14, 14), 'from': [6], 'to': [2]}
torch node:
{'name': 'conv2d', 'output': array([[[[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0., 203., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0., 203., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0., 203., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        ...,

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0., 203., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0., 203., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0., 203., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 14, 14]), 'from': [6], 'to': [2]}

generate models:5

analyse output arrays in iter:6

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0., 145., 255., 211.,  31.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,  32., 237., 253., 252.,  71.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,  11., 175., 253., 252.,  71.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0., 144., 253., 252.,  71.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,  16., 191., 253., 252.,  71.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,  26., 221., 253., 252., 124.,  31.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0., 125., 253., 252., 252., 108.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0., 253., 252., 252., 108.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0., 255., 253., 253., 108.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0., 253., 252., 252., 108.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0., 253., 252., 252., 108.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0., 253., 252., 252., 108.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0., 255., 253., 253., 170.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0., 253., 252., 252., 252.,  42.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0., 149., 252., 252., 252., 144.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0., 109., 252., 252., 252., 144.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0., 218., 253., 253., 255.,  35.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0., 175., 252., 252., 253.,  35.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,  73., 252., 252., 253.,  35.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,  31., 211., 252., 253.,  35.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 1, 28, 28]), 'from': [], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 14, 14]), 'from': [0], 'to': [2]}
ms node:
{'name': 'conv2d', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': (1, 64, 14, 14), 'from': [0], 'to': [2]}
torch node:
{'name': 'conv2d', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 14, 14]), 'from': [0], 'to': [2]}

generate models:7

analyse output arrays in iter:7

pre layer res:
11:cos
{'name': 'cos', 'output': array([[[[ 1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  0.95507365,
           0.5551133 , -0.24095905, -0.8623036 , -0.1016157 ,
          -0.1016157 , -0.1016157 , -0.1016157 , -0.1016157 ,
          -0.3507691 ,  0.96017027,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  0.5551133 ,  0.7179641 , -0.58418435,
           0.98111135,  0.78221214, -0.1016157 ,  0.78221214,
           0.78221214,  0.78221214,  0.78221214,  0.78221214,
           0.78221214,  0.6055279 ,  0.13673723,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        , -0.47943878,  0.78221214,  0.78221214,
           0.78221214,  0.78221214, -0.1016157 ,  0.78221214,
           0.78221214,  0.78221214,  0.78221214,  0.78221214,
           0.78221214,  0.78221214, -0.77108026,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        , -0.5770022 ,  0.78221214,  0.78221214,
          -0.78769594,  0.99859005,  0.49487224,  0.99859005,
           0.99859005,  0.8754449 ,  0.78221214,  0.78221214,
           0.78221214,  0.78221214, -0.77108026,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        , -0.65364367, -0.74805754, -0.74805754,
           0.42417902,  1.        ,  1.        ,  1.        ,
           1.        ,  0.13673723,  0.98111135,  0.78221214,
           0.78221214, -0.705551  ,  0.75390226,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        , -0.98437667, -0.45594227,  0.78221214,
           0.78221214,  0.8711474 ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           0.99937326,  0.8754449 ,  0.78221214,  0.78221214,
           0.78221214,  0.13673723,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        , -0.9943675 , -0.05747243,
          -0.3755375 ,  0.78221214,  0.78221214,  0.78221214,
          -0.9793607 , -0.91113025,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  0.8342234 ,  0.78771454, -0.20645273,
          -0.20645273, -0.20645273, -0.1016157 ,  0.78221214,
           0.78221214,  0.78221214,  0.724118  ,  0.10158571,
          -0.9626059 ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           0.525322  , -0.4948984 ,  0.78221214,  0.78221214,
           0.78221214,  0.78221214, -0.1016157 ,  0.78221214,
           0.78221214,  0.78221214,  0.47941232,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           0.525322  , -0.99859166, -0.1016157 , -0.1016157 ,
          -0.1016157 , -0.1016157 , -0.8623036 , -0.1016157 ,
          -0.1016157 , -0.1016157 , -0.1016157 ,  0.17171735,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  0.91474235, -0.8879689 , -0.16299078,
           0.9998433 ,  0.9998433 ,  0.9998433 ,  0.9998433 ,
           0.05750253,  0.78221214,  0.78221214,  0.17171735,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
          -0.7596879 ,  0.78221214,  0.78221214,  0.17171735,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
          -0.38369843,  0.78221214,  0.78221214,  0.17171735,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  0.28366217,  0.92175126,
          -0.91113025,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        , -0.81928825,
          -0.9952637 ,  0.78221214,  0.78221214,  0.17171735,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        ,  1.        ,
           1.        , -0.25810164,  0.70552963,  0.78221214,
          -0.74805754,  1.        ,  1.        ,  1.        ,
           1.        ,  0.6603167 , -0.62644446,  0.97158504,
           0.78221214,  0.78221214, -0.45594227, -0.56245387,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  0.79311806,  0.78221214,  0.78221214,
          -0.7931364 , -0.4638289 , -0.4638289 , -0.4638289 ,
          -0.4638289 , -0.35907242, -0.1016157 ,  0.78221214,
           0.78221214,  0.8797029 ,  0.2495401 ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  0.79311806,  0.78221214,  0.78221214,
           0.78221214,  0.78221214,  0.78221214,  0.78221214,
           0.78221214,  0.78221214, -0.1016157 , -0.78769594,
          -0.5913697 , -0.14550003,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  0.30059254,  0.996831  ,  0.78221214,
           0.78221214,  0.78221214,  0.78221214,  0.78221214,
          -0.973642  ,  0.9410365 ,  0.08395943,  0.525322  ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  0.75390226, -0.7822309 ,
          -0.8141985 ,  0.78221214, -0.705551  , -0.7822309 ,
           0.42417902,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ,
           1.        ,  1.        ,  1.        ,  1.        ]]]],
      dtype=float32), 'output_shape': TensorShape([1, 1, 28, 28]), 'from': [0], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[25.      , 35.      , 35.      , ..., 35.      , 30.      ,
          20.      ],
         [35.      , 49.      , 49.      , ..., 46.133877, 41.136738,
          28.      ],
         [35.      , 49.      , 49.      , ..., 41.720566, 37.594578,
          28.      ],
         ...,
         [35.      , 45.649414, 37.205063, ..., 49.      , 42.      ,
          28.      ],
         [30.      , 40.626656, 36.159073, ..., 42.      , 36.      ,
          24.      ],
         [20.      , 27.753902, 24.157473, ..., 28.      , 24.      ,
          16.      ]],

        [[25.      , 35.      , 35.      , ..., 35.      , 30.      ,
          20.      ],
         [35.      , 49.      , 49.      , ..., 46.133877, 41.136738,
          28.      ],
         [35.      , 49.      , 49.      , ..., 41.720566, 37.594578,
          28.      ],
         ...,
         [35.      , 45.649414, 37.205063, ..., 49.      , 42.      ,
          28.      ],
         [30.      , 40.626656, 36.159073, ..., 42.      , 36.      ,
          24.      ],
         [20.      , 27.753902, 24.157473, ..., 28.      , 24.      ,
          16.      ]],

        [[25.      , 35.      , 35.      , ..., 35.      , 30.      ,
          20.      ],
         [35.      , 49.      , 49.      , ..., 46.133877, 41.136738,
          28.      ],
         [35.      , 49.      , 49.      , ..., 41.720566, 37.594578,
          28.      ],
         ...,
         [35.      , 45.649414, 37.205063, ..., 49.      , 42.      ,
          28.      ],
         [30.      , 40.626656, 36.159073, ..., 42.      , 36.      ,
          24.      ],
         [20.      , 27.753902, 24.157473, ..., 28.      , 24.      ,
          16.      ]],

        ...,

        [[25.      , 35.      , 35.      , ..., 35.      , 30.      ,
          20.      ],
         [35.      , 49.      , 49.      , ..., 46.133877, 41.136738,
          28.      ],
         [35.      , 49.      , 49.      , ..., 41.720566, 37.594578,
          28.      ],
         ...,
         [35.      , 45.649414, 37.205063, ..., 49.      , 42.      ,
          28.      ],
         [30.      , 40.626656, 36.159073, ..., 42.      , 36.      ,
          24.      ],
         [20.      , 27.753902, 24.157473, ..., 28.      , 24.      ,
          16.      ]],

        [[25.      , 35.      , 35.      , ..., 35.      , 30.      ,
          20.      ],
         [35.      , 49.      , 49.      , ..., 46.133877, 41.136738,
          28.      ],
         [35.      , 49.      , 49.      , ..., 41.720566, 37.594578,
          28.      ],
         ...,
         [35.      , 45.649414, 37.205063, ..., 49.      , 42.      ,
          28.      ],
         [30.      , 40.626656, 36.159073, ..., 42.      , 36.      ,
          24.      ],
         [20.      , 27.753902, 24.157473, ..., 28.      , 24.      ,
          16.      ]],

        [[25.      , 35.      , 35.      , ..., 35.      , 30.      ,
          20.      ],
         [35.      , 49.      , 49.      , ..., 46.133877, 41.136738,
          28.      ],
         [35.      , 49.      , 49.      , ..., 41.720566, 37.594578,
          28.      ],
         ...,
         [35.      , 45.649414, 37.205063, ..., 49.      , 42.      ,
          28.      ],
         [30.      , 40.626656, 36.159073, ..., 42.      , 36.      ,
          24.      ],
         [20.      , 27.753902, 24.157473, ..., 28.      , 24.      ,
          16.      ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 14, 14]), 'from': [11], 'to': [7]}
ms node:
{'name': 'conv2d', 'output': array([[[[16.      , 24.      , 28.      , ..., 28.      , 28.      ,
          20.      ],
         [24.      , 36.      , 42.      , ..., 39.507786, 41.96017 ,
          30.      ],
         [28.      , 42.      , 49.      , ..., 42.390026, 45.713566,
          35.      ],
         ...,
         [28.      , 39.628727, 42.201443, ..., 46.609264, 49.      ,
          35.      ],
         [28.      , 40.886826, 44.76639 , ..., 49.      , 49.      ,
          35.      ],
         [20.      , 29.300592, 32.051308, ..., 35.      , 35.      ,
          25.      ]],

        [[16.      , 24.      , 28.      , ..., 28.      , 28.      ,
          20.      ],
         [24.      , 36.      , 42.      , ..., 39.507786, 41.96017 ,
          30.      ],
         [28.      , 42.      , 49.      , ..., 42.390026, 45.713566,
          35.      ],
         ...,
         [28.      , 39.628727, 42.201443, ..., 46.609264, 49.      ,
          35.      ],
         [28.      , 40.886826, 44.76639 , ..., 49.      , 49.      ,
          35.      ],
         [20.      , 29.300592, 32.051308, ..., 35.      , 35.      ,
          25.      ]],

        [[16.      , 24.      , 28.      , ..., 28.      , 28.      ,
          20.      ],
         [24.      , 36.      , 42.      , ..., 39.507786, 41.96017 ,
          30.      ],
         [28.      , 42.      , 49.      , ..., 42.390026, 45.713566,
          35.      ],
         ...,
         [28.      , 39.628727, 42.201443, ..., 46.609264, 49.      ,
          35.      ],
         [28.      , 40.886826, 44.76639 , ..., 49.      , 49.      ,
          35.      ],
         [20.      , 29.300592, 32.051308, ..., 35.      , 35.      ,
          25.      ]],

        ...,

        [[16.      , 24.      , 28.      , ..., 28.      , 28.      ,
          20.      ],
         [24.      , 36.      , 42.      , ..., 39.507786, 41.96017 ,
          30.      ],
         [28.      , 42.      , 49.      , ..., 42.390026, 45.713566,
          35.      ],
         ...,
         [28.      , 39.628727, 42.201443, ..., 46.609264, 49.      ,
          35.      ],
         [28.      , 40.886826, 44.76639 , ..., 49.      , 49.      ,
          35.      ],
         [20.      , 29.300592, 32.051308, ..., 35.      , 35.      ,
          25.      ]],

        [[16.      , 24.      , 28.      , ..., 28.      , 28.      ,
          20.      ],
         [24.      , 36.      , 42.      , ..., 39.507786, 41.96017 ,
          30.      ],
         [28.      , 42.      , 49.      , ..., 42.390026, 45.713566,
          35.      ],
         ...,
         [28.      , 39.628727, 42.201443, ..., 46.609264, 49.      ,
          35.      ],
         [28.      , 40.886826, 44.76639 , ..., 49.      , 49.      ,
          35.      ],
         [20.      , 29.300592, 32.051308, ..., 35.      , 35.      ,
          25.      ]],

        [[16.      , 24.      , 28.      , ..., 28.      , 28.      ,
          20.      ],
         [24.      , 36.      , 42.      , ..., 39.507786, 41.96017 ,
          30.      ],
         [28.      , 42.      , 49.      , ..., 42.390026, 45.713566,
          35.      ],
         ...,
         [28.      , 39.628727, 42.201443, ..., 46.609264, 49.      ,
          35.      ],
         [28.      , 40.886826, 44.76639 , ..., 49.      , 49.      ,
          35.      ],
         [20.      , 29.300592, 32.051308, ..., 35.      , 35.      ,
          25.      ]]]], dtype=float32), 'output_shape': (1, 64, 14, 14), 'from': [11], 'to': [7]}
torch node:
{'name': 'conv2d', 'output': array([[[[16.      , 24.      , 28.      , ..., 28.      , 28.      ,
          20.      ],
         [24.      , 36.      , 42.      , ..., 39.507786, 41.96017 ,
          30.      ],
         [28.      , 42.      , 49.      , ..., 42.390026, 45.713566,
          35.      ],
         ...,
         [28.      , 39.628727, 42.201443, ..., 46.609264, 49.      ,
          35.      ],
         [28.      , 40.886826, 44.76639 , ..., 49.      , 49.      ,
          35.      ],
         [20.      , 29.300592, 32.051308, ..., 35.      , 35.      ,
          25.      ]],

        [[16.      , 24.      , 28.      , ..., 28.      , 28.      ,
          20.      ],
         [24.      , 36.      , 42.      , ..., 39.507786, 41.96017 ,
          30.      ],
         [28.      , 42.      , 49.      , ..., 42.390026, 45.713566,
          35.      ],
         ...,
         [28.      , 39.628727, 42.201443, ..., 46.609264, 49.      ,
          35.      ],
         [28.      , 40.886826, 44.76639 , ..., 49.      , 49.      ,
          35.      ],
         [20.      , 29.300592, 32.051308, ..., 35.      , 35.      ,
          25.      ]],

        [[16.      , 24.      , 28.      , ..., 28.      , 28.      ,
          20.      ],
         [24.      , 36.      , 42.      , ..., 39.507786, 41.96017 ,
          30.      ],
         [28.      , 42.      , 49.      , ..., 42.390026, 45.713566,
          35.      ],
         ...,
         [28.      , 39.628727, 42.201443, ..., 46.609264, 49.      ,
          35.      ],
         [28.      , 40.886826, 44.76639 , ..., 49.      , 49.      ,
          35.      ],
         [20.      , 29.300592, 32.051308, ..., 35.      , 35.      ,
          25.      ]],

        ...,

        [[16.      , 24.      , 28.      , ..., 28.      , 28.      ,
          20.      ],
         [24.      , 36.      , 42.      , ..., 39.507786, 41.96017 ,
          30.      ],
         [28.      , 42.      , 49.      , ..., 42.390026, 45.713566,
          35.      ],
         ...,
         [28.      , 39.628727, 42.201443, ..., 46.609264, 49.      ,
          35.      ],
         [28.      , 40.886826, 44.76639 , ..., 49.      , 49.      ,
          35.      ],
         [20.      , 29.300592, 32.051308, ..., 35.      , 35.      ,
          25.      ]],

        [[16.      , 24.      , 28.      , ..., 28.      , 28.      ,
          20.      ],
         [24.      , 36.      , 42.      , ..., 39.507786, 41.96017 ,
          30.      ],
         [28.      , 42.      , 49.      , ..., 42.390026, 45.713566,
          35.      ],
         ...,
         [28.      , 39.628727, 42.201443, ..., 46.609264, 49.      ,
          35.      ],
         [28.      , 40.886826, 44.76639 , ..., 49.      , 49.      ,
          35.      ],
         [20.      , 29.300592, 32.051308, ..., 35.      , 35.      ,
          25.      ]],

        [[16.      , 24.      , 28.      , ..., 28.      , 28.      ,
          20.      ],
         [24.      , 36.      , 42.      , ..., 39.507786, 41.96017 ,
          30.      ],
         [28.      , 42.      , 49.      , ..., 42.390026, 45.713566,
          35.      ],
         ...,
         [28.      , 39.628727, 42.201443, ..., 46.609264, 49.      ,
          35.      ],
         [28.      , 40.886826, 44.76639 , ..., 49.      , 49.      ,
          35.      ],
         [20.      , 29.300592, 32.051308, ..., 35.      , 35.      ,
          25.      ]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 14, 14]), 'from': [11], 'to': [7]}

generate models:8

analyse output arrays in iter:8

pre layer res:
9:relu
{'name': 'relu', 'output': array([[[[  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   5.,  63., 197.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,  20., 254., 230.,  24.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,  20., 254., 254.,  48.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,  20., 254., 255.,  48.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,  20., 254., 254.,  57.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,  20., 254., 254., 108.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,  16., 239., 254., 143.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0., 178., 254., 143.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0., 178., 254., 143.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0., 178., 254., 162.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0., 178., 254., 240.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0., 113., 254., 240.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,  83., 254., 245.,  31.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,  79., 254., 246.,  38.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0., 214., 254., 150.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0., 144., 241.,   8.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0., 144., 240.,   2.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0., 144., 254.,  82.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0., 230., 247.,  40.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0., 168., 209.,  31.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 1, 28, 28]), 'from': [0], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 14, 14]), 'from': [9], 'to': [10, 10, 11]}
ms node:
{'name': 'conv2d', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': (1, 64, 14, 14), 'from': [9], 'to': [10, 10, 11]}
torch node:
{'name': 'conv2d', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 14, 14]), 'from': [9], 'to': [10, 10, 11]}

generate models:9

final statics:
total operators:28
tensorflow --> nums:6,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:6
mindspore --> 
torch --> 

generate models:10

analyse output arrays in iter:11

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
           31.,  40., 129., 234., 234., 159.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  68., 150.,
          239., 254., 253., 253., 253., 215.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0., 156., 201., 254., 254.,
          254., 241., 150.,  98.,   8.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,  19., 154., 254., 236., 203.,  83.,
           39.,  30.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0., 144., 253., 145.,  12.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,  10., 129., 222.,  78.,  79.,   8.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0., 134., 253., 167.,   8.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0., 255., 254.,  78.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0., 201., 253., 226.,  69.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  55.,   6.,
            0.,  18., 128., 253., 241.,  41.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,  25., 205., 235.,  92.,
            0.,   0.,  20., 253., 253.,  58.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0., 231., 245., 108.,   0.,
            0.,   0., 132., 253., 185.,  14.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0., 121., 245., 254., 254.,
          254., 217., 254., 223.,  50.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0., 116., 165., 233.,
          233., 234., 180.,  39.,   3.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 1, 28, 28]), 'from': [], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ..., 2294., 1730.,  861.],
         ...,
         [   0.,    0.,  281., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ..., 2294., 1730.,  861.],
         ...,
         [   0.,    0.,  281., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ..., 2294., 1730.,  861.],
         ...,
         [   0.,    0.,  281., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        ...,

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ..., 2294., 1730.,  861.],
         ...,
         [   0.,    0.,  281., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ..., 2294., 1730.,  861.],
         ...,
         [   0.,    0.,  281., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ..., 2294., 1730.,  861.],
         ...,
         [   0.,    0.,  281., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 14, 14]), 'from': [0], 'to': [2, 14]}
ms node:
{'name': 'conv2d', 'output': array([[[[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 827., 796., 627.],
         ...,
         [  0.,   0., 482., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 827., 796., 627.],
         ...,
         [  0.,   0., 482., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 827., 796., 627.],
         ...,
         [  0.,   0., 482., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        ...,

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 827., 796., 627.],
         ...,
         [  0.,   0., 482., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 827., 796., 627.],
         ...,
         [  0.,   0., 482., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 827., 796., 627.],
         ...,
         [  0.,   0., 482., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]]]], dtype=float32), 'output_shape': (1, 64, 14, 14), 'from': [0], 'to': [2, 14]}
torch node:
{'name': 'conv2d', 'output': array([[[[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 827., 796., 627.],
         ...,
         [  0.,   0., 482., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 827., 796., 627.],
         ...,
         [  0.,   0., 482., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 827., 796., 627.],
         ...,
         [  0.,   0., 482., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        ...,

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 827., 796., 627.],
         ...,
         [  0.,   0., 482., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 827., 796., 627.],
         ...,
         [  0.,   0., 482., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 827., 796., 627.],
         ...,
         [  0.,   0., 482., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 14, 14]), 'from': [0], 'to': [2, 14]}

generate models:12

analyse output arrays in iter:15

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0., 115., 121., 162., 253., 253.,
          213.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,  63., 107., 170., 251., 252., 252., 252., 252.,
          250., 214.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  25., 192.,
          226., 226., 241., 252., 253., 202., 252., 252., 252., 252.,
          252., 225.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,  68., 223., 252.,
          252., 252., 252., 252.,  39.,  19.,  39.,  65., 224., 252.,
          252., 183.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0., 186., 252., 252.,
          252., 245., 108.,  53.,   0.,   0.,   0., 150., 252., 252.,
          220.,  20.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,  70., 242., 252., 252.,
          222.,  59.,   0.,   0.,   0.,   0.,   0., 178., 252., 252.,
          141.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0., 185., 252., 252., 194.,
           67.,   0.,   0.,   0.,   0.,  17.,  90., 240., 252., 194.,
           67.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,  83., 205., 190.,  24.,
            0.,   0.,   0.,   0.,   0., 121., 252., 252., 209.,  24.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,  77., 247., 252., 248., 106.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0., 253., 252., 252., 102.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0., 134., 255., 253., 253.,  39.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   6., 183., 253., 252., 107.,   2.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,  10., 102., 252., 253., 163.,  16.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
           13., 168., 252., 252., 110.,   2.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
           41., 252., 252., 217.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  40.,
          155., 252., 214.,  31.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0., 165.,
          252., 252., 106.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  43., 179.,
          252., 150.,  39.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0., 137., 252.,
          221.,  39.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  67., 252.,
           79.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 1, 28, 28]), 'from': [], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 677.,   0.,   0.],
         ...,
         [  0.,   0., 247., ...,   0.,   0.,   0.],
         [  0.,   0., 247., ...,   0.,   0.,   0.],
         [  0.,   0., 247., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 677.,   0.,   0.],
         ...,
         [  0.,   0., 247., ...,   0.,   0.,   0.],
         [  0.,   0., 247., ...,   0.,   0.,   0.],
         [  0.,   0., 247., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 677.,   0.,   0.],
         ...,
         [  0.,   0., 247., ...,   0.,   0.,   0.],
         [  0.,   0., 247., ...,   0.,   0.,   0.],
         [  0.,   0., 247., ...,   0.,   0.,   0.]],

        ...,

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 677.,   0.,   0.],
         ...,
         [  0.,   0., 247., ...,   0.,   0.,   0.],
         [  0.,   0., 247., ...,   0.,   0.,   0.],
         [  0.,   0., 247., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 677.,   0.,   0.],
         ...,
         [  0.,   0., 247., ...,   0.,   0.,   0.],
         [  0.,   0., 247., ...,   0.,   0.,   0.],
         [  0.,   0., 247., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 677.,   0.,   0.],
         ...,
         [  0.,   0., 247., ...,   0.,   0.,   0.],
         [  0.,   0., 247., ...,   0.,   0.,   0.],
         [  0.,   0., 247., ...,   0.,   0.,   0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 14, 14]), 'from': [0], 'to': [2]}
ms node:
{'name': 'conv2d', 'output': array([[[[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 466.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 466.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 466.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        ...,

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 466.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 466.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 466.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]]]], dtype=float32), 'output_shape': (1, 64, 14, 14), 'from': [0], 'to': [2]}
torch node:
{'name': 'conv2d', 'output': array([[[[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 466.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 466.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 466.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        ...,

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 466.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 466.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ..., 466.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 14, 14]), 'from': [0], 'to': [2]}

generate models:16

analyse output arrays in iter:16

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,  93., 164., 211., 250., 250., 194.,  15.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  20.,
          176., 253., 237., 180., 180., 243., 254., 214.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0., 204.,
          236., 135.,  18.,   0.,   0.,  40., 242., 252., 126.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  69., 253.,
          167.,   0.,   0.,   0.,   0.,   0., 130., 254., 223.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  74., 217.,
           79.,   0.,   0.,   0.,   0.,   0.,  46., 254., 231.,  14.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   8.,  10.,
            0.,   0.,   0.,   0.,   0.,   0.,  39., 254., 254., 104.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   5., 212., 254., 141.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0., 207., 254., 141.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   7., 215., 254., 128.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,  39., 254., 254.,  56.,
            0.,   0.,  20.,  67., 124.,  39.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   7.,  35.,  98., 254., 254., 208.,
          157., 207., 225., 254., 241., 160.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   9.,  31.,
           82., 137., 203., 203., 212., 254., 254., 254., 254., 251.,
          223., 223., 127.,  52.,  33.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   9., 137., 214., 254.,
          254., 254., 254., 240., 228., 250., 254., 254., 154.,  50.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0., 185., 254., 247., 179.,
          146.,  67.,  60.,  28.,   0., 216., 254., 220.,  12.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0., 255., 222.,  49.,   0.,
            0.,   0.,   0.,   4., 137., 244., 232.,  50.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0., 254., 206.,   4.,   0.,
            0.,   0.,   8., 179., 254., 247.,  64.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0., 216., 254., 158., 177.,
          130.,  96., 213., 252., 199.,  49.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0., 131., 247., 249.,
          249., 249., 171.,  72.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 1, 28, 28]), 'from': [], 'to': [1, 12]}
tf node:
{'name': 'conv2d', 'output': array([[[[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,   69., ...,    0.,    0.,    0.],
         ...,
         [   0.,  470., 1470., ...,    0.,    0.,    0.],
         [   0.,    0.,  378., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,   69., ...,    0.,    0.,    0.],
         ...,
         [   0.,  470., 1470., ...,    0.,    0.,    0.],
         [   0.,    0.,  378., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,   69., ...,    0.,    0.,    0.],
         ...,
         [   0.,  470., 1470., ...,    0.,    0.,    0.],
         [   0.,    0.,  378., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        ...,

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,   69., ...,    0.,    0.,    0.],
         ...,
         [   0.,  470., 1470., ...,    0.,    0.,    0.],
         [   0.,    0.,  378., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,   69., ...,    0.,    0.,    0.],
         ...,
         [   0.,  470., 1470., ...,    0.,    0.,    0.],
         [   0.,    0.,  378., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,   69., ...,    0.,    0.,    0.],
         ...,
         [   0.,  470., 1470., ...,    0.,    0.,    0.],
         [   0.,    0.,  378., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 14, 14]), 'from': [0], 'to': [2]}
ms node:
{'name': 'conv2d', 'output': array([[[[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         ...,
         [   0.,    0., 1538., ...,    0.,    0.,    0.],
         [   0.,    0.,  601., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         ...,
         [   0.,    0., 1538., ...,    0.,    0.,    0.],
         [   0.,    0.,  601., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         ...,
         [   0.,    0., 1538., ...,    0.,    0.,    0.],
         [   0.,    0.,  601., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        ...,

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         ...,
         [   0.,    0., 1538., ...,    0.,    0.,    0.],
         [   0.,    0.,  601., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         ...,
         [   0.,    0., 1538., ...,    0.,    0.,    0.],
         [   0.,    0.,  601., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         ...,
         [   0.,    0., 1538., ...,    0.,    0.,    0.],
         [   0.,    0.,  601., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]]]], dtype=float32), 'output_shape': (1, 64, 14, 14), 'from': [0], 'to': [2]}
torch node:
{'name': 'conv2d', 'output': array([[[[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         ...,
         [   0.,    0., 1538., ...,    0.,    0.,    0.],
         [   0.,    0.,  601., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         ...,
         [   0.,    0., 1538., ...,    0.,    0.,    0.],
         [   0.,    0.,  601., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         ...,
         [   0.,    0., 1538., ...,    0.,    0.,    0.],
         [   0.,    0.,  601., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        ...,

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         ...,
         [   0.,    0., 1538., ...,    0.,    0.,    0.],
         [   0.,    0.,  601., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         ...,
         [   0.,    0., 1538., ...,    0.,    0.,    0.],
         [   0.,    0.,  601., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.],
         ...,
         [   0.,    0., 1538., ...,    0.,    0.,    0.],
         [   0.,    0.,  601., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 14, 14]), 'from': [0], 'to': [2]}

pre layer res:
14:reshape
{'name': 'reshape', 'output': array([[[[0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [1.        , 1.        , 1.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 1.        ,
          1.        , 1.        ],
         [1.        , 1.        , 1.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.        , 0.        , 0.        , ..., 1.        ,
          1.        , 0.        ],
         [0.        , 1.        , 1.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.99999833, ..., 0.        ,
          0.        , 0.        ]],

        [[0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 1.        , ..., 1.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [1.        , 1.        , 1.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          1.        , 1.        ],
         [1.        , 1.        , 1.        , ..., 0.        ,
          0.        , 0.        ]],

        ...,

        [[0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 14, 14]), 'from': [22], 'to': [16]}
tf node:
{'name': 'log', 'output': array([[[[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
                    -inf,           -inf,           -inf]],

        [[          -inf,           -inf,           -inf, ...,
           0.0000000e+00,  0.0000000e+00,           -inf],
         [          -inf,  0.0000000e+00,  0.0000000e+00, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf, -1.6689314e-06, ...,
                    -inf,           -inf,           -inf]],

        [[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,  0.0000000e+00, ...,
           0.0000000e+00,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
                    -inf,           -inf,           -inf]],

        ...,

        [[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]],

        [[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]],

        [[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 14, 14]), 'from': [14], 'to': [9]}
ms node:
{'name': 'log', 'output': array([[[[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
                    -inf,           -inf,           -inf]],

        [[          -inf,           -inf,           -inf, ...,
          -1.4305115e-06, -1.4305115e-06,           -inf],
         [          -inf, -1.4305115e-06, -1.4305115e-06, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf, -3.0994429e-06, ...,
                    -inf,           -inf,           -inf]],

        [[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf, -1.4305115e-06, ...,
          -1.4305115e-06,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf, -1.6689301e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
                    -inf,           -inf,           -inf]],

        ...,

        [[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]],

        [[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]],

        [[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]]]],
      dtype=float32), 'output_shape': (1, 64, 14, 14), 'from': [14], 'to': [9]}
torch node:
{'name': 'log', 'output': array([[[[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
                    -inf,           -inf,           -inf]],

        [[          -inf,           -inf,           -inf, ...,
           0.0000000e+00,  0.0000000e+00,           -inf],
         [          -inf,  0.0000000e+00,  0.0000000e+00, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf, -1.6689314e-06, ...,
                    -inf,           -inf,           -inf]],

        [[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,  0.0000000e+00, ...,
           0.0000000e+00,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf, -2.3841861e-07,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
                    -inf,           -inf,           -inf]],

        ...,

        [[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]],

        [[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]],

        [[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 14, 14]), 'from': [14], 'to': [9]}

generate models:17

analyse output arrays in iter:20

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,  38., 190.,  25.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,  13.,  25.,  10.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0., 112., 252., 125.,
            4.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0., 132., 252., 113.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,  61., 252., 252.,
           36.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0., 132., 252., 240.,  79.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,  84., 252., 252.,
           36.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0., 132., 252., 252., 238.,  52.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,  12., 198., 252., 252.,
          122.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,  99., 252., 252., 252., 181.,  17.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,  49., 252., 252., 252.,
          122.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   3., 125., 252., 252., 252., 100.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,  26., 218., 252., 252.,
           36.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,  15., 216., 252., 252., 207.,  19.,
            0.,   0.,   0.,   0.,   0.,   0.,  49., 252., 252., 252.,
           36.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0., 157., 252., 252., 252.,  48.,
            0.,   0.,   0.,   6., 109., 109., 194., 252., 252., 252.,
           36.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0., 100., 252., 252., 252., 105.,
            0.,  58., 116., 128., 252., 252., 252., 252., 252., 212.,
           19.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0., 164., 253., 253., 253.,
          253., 253., 253., 255., 253., 253., 253., 253., 253., 253.,
           99.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,  49., 252., 252., 252.,
          252., 252., 252., 253., 252., 252., 252., 252., 252., 252.,
          155.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,  49., 252., 252., 252.,
          252., 252., 252., 217., 216., 141., 126., 252., 252., 252.,
          155.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,  49., 252., 252., 252.,
          234., 204.,  89.,   0.,   0.,   0.,  49., 252., 252., 252.,
          155.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,  14., 158., 192., 151.,
           45.,   0.,   0.,   0.,   0.,   0.,  49., 252., 252., 252.,
          225.,  17.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,  49., 252., 252., 252.,
          252.,  23.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,  33., 228., 252., 252.,
          252., 157.,   4.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,  55., 229., 252.,
          252., 252.,  11.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  53., 232.,
          252., 252.,  63.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  90.,
          206., 131.,  11.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 1, 28, 28]), 'from': [], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [ 422.,  545.,  545., ...,   40.,    0.,    0.],
         [1190., 2122., 2174., ...,  198.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ..., 1843.,   89.,    0.],
         [   0.,    0.,    0., ...,  915.,   74.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [ 422.,  545.,  545., ...,   40.,    0.,    0.],
         [1190., 2122., 2174., ...,  198.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ..., 1843.,   89.,    0.],
         [   0.,    0.,    0., ...,  915.,   74.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [ 422.,  545.,  545., ...,   40.,    0.,    0.],
         [1190., 2122., 2174., ...,  198.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ..., 1843.,   89.,    0.],
         [   0.,    0.,    0., ...,  915.,   74.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        ...,

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [ 422.,  545.,  545., ...,   40.,    0.,    0.],
         [1190., 2122., 2174., ...,  198.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ..., 1843.,   89.,    0.],
         [   0.,    0.,    0., ...,  915.,   74.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [ 422.,  545.,  545., ...,   40.,    0.,    0.],
         [1190., 2122., 2174., ...,  198.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ..., 1843.,   89.,    0.],
         [   0.,    0.,    0., ...,  915.,   74.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [ 422.,  545.,  545., ...,   40.,    0.,    0.],
         [1190., 2122., 2174., ...,  198.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ..., 1843.,   89.,    0.],
         [   0.,    0.,    0., ...,  915.,   74.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 14, 14]), 'from': [0], 'to': [2]}
ms node:
{'name': 'conv2d', 'output': array([[[[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [  13.,   48.,   48., ...,  154.,    0.,    0.],
         [ 277., 1169., 1248., ...,  730.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ..., 3196.,  904.,    0.],
         [   0.,    0.,    0., ..., 2004.,  720.,    0.],
         [   0.,    0.,    0., ...,  438.,  142.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [  13.,   48.,   48., ...,  154.,    0.,    0.],
         [ 277., 1169., 1248., ...,  730.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ..., 3196.,  904.,    0.],
         [   0.,    0.,    0., ..., 2004.,  720.,    0.],
         [   0.,    0.,    0., ...,  438.,  142.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [  13.,   48.,   48., ...,  154.,    0.,    0.],
         [ 277., 1169., 1248., ...,  730.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ..., 3196.,  904.,    0.],
         [   0.,    0.,    0., ..., 2004.,  720.,    0.],
         [   0.,    0.,    0., ...,  438.,  142.,    0.]],

        ...,

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [  13.,   48.,   48., ...,  154.,    0.,    0.],
         [ 277., 1169., 1248., ...,  730.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ..., 3196.,  904.,    0.],
         [   0.,    0.,    0., ..., 2004.,  720.,    0.],
         [   0.,    0.,    0., ...,  438.,  142.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [  13.,   48.,   48., ...,  154.,    0.,    0.],
         [ 277., 1169., 1248., ...,  730.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ..., 3196.,  904.,    0.],
         [   0.,    0.,    0., ..., 2004.,  720.,    0.],
         [   0.,    0.,    0., ...,  438.,  142.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [  13.,   48.,   48., ...,  154.,    0.,    0.],
         [ 277., 1169., 1248., ...,  730.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ..., 3196.,  904.,    0.],
         [   0.,    0.,    0., ..., 2004.,  720.,    0.],
         [   0.,    0.,    0., ...,  438.,  142.,    0.]]]], dtype=float32), 'output_shape': (1, 64, 14, 14), 'from': [0], 'to': [2]}
torch node:
{'name': 'conv2d', 'output': array([[[[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [  13.,   48.,   48., ...,  154.,    0.,    0.],
         [ 277., 1169., 1248., ...,  730.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ..., 3196.,  904.,    0.],
         [   0.,    0.,    0., ..., 2004.,  720.,    0.],
         [   0.,    0.,    0., ...,  438.,  142.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [  13.,   48.,   48., ...,  154.,    0.,    0.],
         [ 277., 1169., 1248., ...,  730.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ..., 3196.,  904.,    0.],
         [   0.,    0.,    0., ..., 2004.,  720.,    0.],
         [   0.,    0.,    0., ...,  438.,  142.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [  13.,   48.,   48., ...,  154.,    0.,    0.],
         [ 277., 1169., 1248., ...,  730.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ..., 3196.,  904.,    0.],
         [   0.,    0.,    0., ..., 2004.,  720.,    0.],
         [   0.,    0.,    0., ...,  438.,  142.,    0.]],

        ...,

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [  13.,   48.,   48., ...,  154.,    0.,    0.],
         [ 277., 1169., 1248., ...,  730.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ..., 3196.,  904.,    0.],
         [   0.,    0.,    0., ..., 2004.,  720.,    0.],
         [   0.,    0.,    0., ...,  438.,  142.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [  13.,   48.,   48., ...,  154.,    0.,    0.],
         [ 277., 1169., 1248., ...,  730.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ..., 3196.,  904.,    0.],
         [   0.,    0.,    0., ..., 2004.,  720.,    0.],
         [   0.,    0.,    0., ...,  438.,  142.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [  13.,   48.,   48., ...,  154.,    0.,    0.],
         [ 277., 1169., 1248., ...,  730.,    0.,    0.],
         ...,
         [   0.,    0.,    0., ..., 3196.,  904.,    0.],
         [   0.,    0.,    0., ..., 2004.,  720.,    0.],
         [   0.,    0.,    0., ...,  438.,  142.,    0.]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 14, 14]), 'from': [0], 'to': [2]}

generate models:21

analyse output arrays in iter:22

pre layer res:
8:sigmoid
{'name': 'sigmoid', 'output': array([[[[0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       ],
         [0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       ],
         [0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       ],
         [0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       ],
         [0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       ],
         [0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       ],
         [0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          1.        , 1.        , 1.        , 1.        , 1.        ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       ],
         [0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 1.        ,
          1.        , 1.        , 1.        , 1.        , 1.        ,
          1.        , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       ],
         [0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.9975274 , 1.        , 1.        ,
          1.        , 0.9999999 , 0.5       , 1.        , 1.        ,
          1.        , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       ],
         [0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 1.        , 1.        , 1.        ,
          0.5       , 0.5       , 0.5       , 1.        , 1.        ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       ],
         [0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 1.        , 1.        , 1.        , 0.98201376,
          0.5       , 0.5       , 1.        , 1.        , 1.        ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       ],
         [0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.98201376, 1.        , 1.        , 1.        , 0.5       ,
          0.5       , 0.5       , 1.        , 1.        , 1.        ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       ],
         [0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          1.        , 1.        , 1.        , 0.5       , 0.5       ,
          0.5       , 1.        , 1.        , 1.        , 1.        ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       ],
         [0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          1.        , 1.        , 0.9933072 , 0.5       , 0.5       ,
          1.        , 1.        , 1.        , 1.        , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       ],
         [0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          1.        , 1.        , 0.5       , 0.5       , 0.99999917,
          1.        , 1.        , 1.        , 0.99999917, 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       ],
         [0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 1.        ,
          1.        , 1.        , 0.5       , 1.        , 1.        ,
          1.        , 1.        , 0.99999964, 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       ],
         [0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 1.        ,
          1.        , 1.        , 1.        , 1.        , 1.        ,
          1.        , 1.        , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       ],
         [0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          1.        , 1.        , 1.        , 1.        , 1.        ,
          1.        , 0.99966466, 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       ],
         [0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.73105854, 1.        , 1.        ,
          1.        , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       ],
         [0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 1.        , 1.        , 1.        ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       ],
         [0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 1.        , 1.        , 0.9999938 ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       ],
         [0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 1.        , 1.        , 1.        , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       ],
         [0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.99966466, 1.        , 1.        , 0.9999833 , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       ],
         [0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          1.        , 1.        , 1.        , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       ],
         [0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          1.        , 1.        , 0.98201376, 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       ],
         [0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          1.        , 1.        , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       ],
         [0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       ],
         [0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,
          0.5       , 0.5       , 0.5       ]]]], dtype=float32), 'output_shape': TensorShape([1, 1, 28, 28]), 'from': [0], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[12.5, 17.5, 17.5, ..., 17.5, 15. , 10. ],
         [17.5, 24.5, 24.5, ..., 24.5, 21. , 14. ],
         [17.5, 24.5, 24.5, ..., 25.5, 21. , 14. ],
         ...,
         [17.5, 24.5, 24.5, ..., 24.5, 21. , 14. ],
         [15. , 21. , 21. , ..., 21. , 18. , 12. ],
         [10. , 14. , 14. , ..., 14. , 12. ,  8. ]],

        [[12.5, 17.5, 17.5, ..., 17.5, 15. , 10. ],
         [17.5, 24.5, 24.5, ..., 24.5, 21. , 14. ],
         [17.5, 24.5, 24.5, ..., 25.5, 21. , 14. ],
         ...,
         [17.5, 24.5, 24.5, ..., 24.5, 21. , 14. ],
         [15. , 21. , 21. , ..., 21. , 18. , 12. ],
         [10. , 14. , 14. , ..., 14. , 12. ,  8. ]],

        [[12.5, 17.5, 17.5, ..., 17.5, 15. , 10. ],
         [17.5, 24.5, 24.5, ..., 24.5, 21. , 14. ],
         [17.5, 24.5, 24.5, ..., 25.5, 21. , 14. ],
         ...,
         [17.5, 24.5, 24.5, ..., 24.5, 21. , 14. ],
         [15. , 21. , 21. , ..., 21. , 18. , 12. ],
         [10. , 14. , 14. , ..., 14. , 12. ,  8. ]],

        ...,

        [[12.5, 17.5, 17.5, ..., 17.5, 15. , 10. ],
         [17.5, 24.5, 24.5, ..., 24.5, 21. , 14. ],
         [17.5, 24.5, 24.5, ..., 25.5, 21. , 14. ],
         ...,
         [17.5, 24.5, 24.5, ..., 24.5, 21. , 14. ],
         [15. , 21. , 21. , ..., 21. , 18. , 12. ],
         [10. , 14. , 14. , ..., 14. , 12. ,  8. ]],

        [[12.5, 17.5, 17.5, ..., 17.5, 15. , 10. ],
         [17.5, 24.5, 24.5, ..., 24.5, 21. , 14. ],
         [17.5, 24.5, 24.5, ..., 25.5, 21. , 14. ],
         ...,
         [17.5, 24.5, 24.5, ..., 24.5, 21. , 14. ],
         [15. , 21. , 21. , ..., 21. , 18. , 12. ],
         [10. , 14. , 14. , ..., 14. , 12. ,  8. ]],

        [[12.5, 17.5, 17.5, ..., 17.5, 15. , 10. ],
         [17.5, 24.5, 24.5, ..., 24.5, 21. , 14. ],
         [17.5, 24.5, 24.5, ..., 25.5, 21. , 14. ],
         ...,
         [17.5, 24.5, 24.5, ..., 24.5, 21. , 14. ],
         [15. , 21. , 21. , ..., 21. , 18. , 12. ],
         [10. , 14. , 14. , ..., 14. , 12. ,  8. ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 14, 14]), 'from': [8], 'to': [2]}
ms node:
{'name': 'conv2d', 'output': array([[[[ 8. , 12. , 14. , ..., 14. , 14. , 10. ],
         [12. , 18. , 21. , ..., 21. , 21. , 15. ],
         [14. , 21. , 24.5, ..., 26. , 24.5, 17.5],
         ...,
         [14. , 21. , 24.5, ..., 24.5, 24.5, 17.5],
         [14. , 21. , 24.5, ..., 24.5, 24.5, 17.5],
         [10. , 15. , 17.5, ..., 17.5, 17.5, 12.5]],

        [[ 8. , 12. , 14. , ..., 14. , 14. , 10. ],
         [12. , 18. , 21. , ..., 21. , 21. , 15. ],
         [14. , 21. , 24.5, ..., 26. , 24.5, 17.5],
         ...,
         [14. , 21. , 24.5, ..., 24.5, 24.5, 17.5],
         [14. , 21. , 24.5, ..., 24.5, 24.5, 17.5],
         [10. , 15. , 17.5, ..., 17.5, 17.5, 12.5]],

        [[ 8. , 12. , 14. , ..., 14. , 14. , 10. ],
         [12. , 18. , 21. , ..., 21. , 21. , 15. ],
         [14. , 21. , 24.5, ..., 26. , 24.5, 17.5],
         ...,
         [14. , 21. , 24.5, ..., 24.5, 24.5, 17.5],
         [14. , 21. , 24.5, ..., 24.5, 24.5, 17.5],
         [10. , 15. , 17.5, ..., 17.5, 17.5, 12.5]],

        ...,

        [[ 8. , 12. , 14. , ..., 14. , 14. , 10. ],
         [12. , 18. , 21. , ..., 21. , 21. , 15. ],
         [14. , 21. , 24.5, ..., 26. , 24.5, 17.5],
         ...,
         [14. , 21. , 24.5, ..., 24.5, 24.5, 17.5],
         [14. , 21. , 24.5, ..., 24.5, 24.5, 17.5],
         [10. , 15. , 17.5, ..., 17.5, 17.5, 12.5]],

        [[ 8. , 12. , 14. , ..., 14. , 14. , 10. ],
         [12. , 18. , 21. , ..., 21. , 21. , 15. ],
         [14. , 21. , 24.5, ..., 26. , 24.5, 17.5],
         ...,
         [14. , 21. , 24.5, ..., 24.5, 24.5, 17.5],
         [14. , 21. , 24.5, ..., 24.5, 24.5, 17.5],
         [10. , 15. , 17.5, ..., 17.5, 17.5, 12.5]],

        [[ 8. , 12. , 14. , ..., 14. , 14. , 10. ],
         [12. , 18. , 21. , ..., 21. , 21. , 15. ],
         [14. , 21. , 24.5, ..., 26. , 24.5, 17.5],
         ...,
         [14. , 21. , 24.5, ..., 24.5, 24.5, 17.5],
         [14. , 21. , 24.5, ..., 24.5, 24.5, 17.5],
         [10. , 15. , 17.5, ..., 17.5, 17.5, 12.5]]]], dtype=float32), 'output_shape': (1, 64, 14, 14), 'from': [8], 'to': [2]}
torch node:
{'name': 'conv2d', 'output': array([[[[ 8. , 12. , 14. , ..., 14. , 14. , 10. ],
         [12. , 18. , 21. , ..., 21. , 21. , 15. ],
         [14. , 21. , 24.5, ..., 26. , 24.5, 17.5],
         ...,
         [14. , 21. , 24.5, ..., 24.5, 24.5, 17.5],
         [14. , 21. , 24.5, ..., 24.5, 24.5, 17.5],
         [10. , 15. , 17.5, ..., 17.5, 17.5, 12.5]],

        [[ 8. , 12. , 14. , ..., 14. , 14. , 10. ],
         [12. , 18. , 21. , ..., 21. , 21. , 15. ],
         [14. , 21. , 24.5, ..., 26. , 24.5, 17.5],
         ...,
         [14. , 21. , 24.5, ..., 24.5, 24.5, 17.5],
         [14. , 21. , 24.5, ..., 24.5, 24.5, 17.5],
         [10. , 15. , 17.5, ..., 17.5, 17.5, 12.5]],

        [[ 8. , 12. , 14. , ..., 14. , 14. , 10. ],
         [12. , 18. , 21. , ..., 21. , 21. , 15. ],
         [14. , 21. , 24.5, ..., 26. , 24.5, 17.5],
         ...,
         [14. , 21. , 24.5, ..., 24.5, 24.5, 17.5],
         [14. , 21. , 24.5, ..., 24.5, 24.5, 17.5],
         [10. , 15. , 17.5, ..., 17.5, 17.5, 12.5]],

        ...,

        [[ 8. , 12. , 14. , ..., 14. , 14. , 10. ],
         [12. , 18. , 21. , ..., 21. , 21. , 15. ],
         [14. , 21. , 24.5, ..., 26. , 24.5, 17.5],
         ...,
         [14. , 21. , 24.5, ..., 24.5, 24.5, 17.5],
         [14. , 21. , 24.5, ..., 24.5, 24.5, 17.5],
         [10. , 15. , 17.5, ..., 17.5, 17.5, 12.5]],

        [[ 8. , 12. , 14. , ..., 14. , 14. , 10. ],
         [12. , 18. , 21. , ..., 21. , 21. , 15. ],
         [14. , 21. , 24.5, ..., 26. , 24.5, 17.5],
         ...,
         [14. , 21. , 24.5, ..., 24.5, 24.5, 17.5],
         [14. , 21. , 24.5, ..., 24.5, 24.5, 17.5],
         [10. , 15. , 17.5, ..., 17.5, 17.5, 12.5]],

        [[ 8. , 12. , 14. , ..., 14. , 14. , 10. ],
         [12. , 18. , 21. , ..., 21. , 21. , 15. ],
         [14. , 21. , 24.5, ..., 26. , 24.5, 17.5],
         ...,
         [14. , 21. , 24.5, ..., 24.5, 24.5, 17.5],
         [14. , 21. , 24.5, ..., 24.5, 24.5, 17.5],
         [10. , 15. , 17.5, ..., 17.5, 17.5, 12.5]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 14, 14]), 'from': [8], 'to': [2]}

generate models:23

analyse output arrays in iter:24

pre layer res:
20:exp
{'name': 'exp', 'output': array([[[[1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00,           inf,
                    inf, 7.6947855e+23, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00,           inf,
                    inf,           inf, 1.4841316e+02, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 3.9313342e+12,           inf,
                    inf,           inf, 8.1030840e+03, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 3.4934271e+19,           inf,
                    inf,           inf, 7.3890562e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 5.4598148e+01,           inf,           inf,
                    inf, 8.2230124e+36, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00,           inf,           inf,           inf,
                    inf, 8.2230124e+36, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
                    inf,           inf,           inf,           inf,
                    inf, 8.2230124e+36, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00,           inf,
                    inf,           inf,           inf,           inf,
                    inf, 8.2230124e+36, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.6275480e+05, 4.2012105e+25,
                    inf,           inf,           inf,           inf,
                    inf,           inf, 1.5860134e+15,           inf,
                    inf, 8.2230124e+36, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 6.3984347e+17,           inf,
                    inf,           inf,           inf,           inf,
          1.1719143e+16, 5.4598148e+01, 7.8962965e+13,           inf,
                    inf, 8.2230124e+36, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0966332e+03,
          1.2851600e+19, 1.2851600e+19, 1.0686474e+13, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 7.8962965e+13,           inf,
                    inf,           inf, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.7848230e+08,           inf,
                    inf,           inf, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00,           inf,
                    inf,           inf, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00,           inf,
                    inf, 8.2230124e+36, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00,           inf,
                    inf, 2.2937833e+27, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.1719143e+16, 2.8307532e+23,
          2.8307532e+23, 3.4934271e+19, 1.9572962e+11, 3.0250773e+36,
                    inf, 3.0250773e+36, 1.3188157e+09, 2.9048850e+13,
                    inf, 7.4984170e+33, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 4.0342880e+02,
          6.3984347e+17,           inf,           inf,           inf,
                    inf,           inf,           inf,           inf,
                    inf,           inf,           inf,           inf,
                    inf,           inf, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 9.7448028e+09,           inf,
                    inf,           inf,           inf,           inf,
                    inf,           inf,           inf,           inf,
                    inf,           inf,           inf,           inf,
                    inf, 1.2851600e+19, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00,           inf,           inf,
                    inf,           inf,           inf, 6.2351488e+27,
          1.4841316e+02, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 7.8962965e+13,           inf,
                    inf,           inf, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00, 1.0000000e+00]]]],
      dtype=float32), 'output_shape': TensorShape([1, 1, 28, 28]), 'from': [0], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[2.5000000e+01, 3.5000000e+01, 3.5000000e+01, ...,
          3.5000000e+01, 3.0000000e+01, 2.0000000e+01],
         [3.5000000e+01, 4.9000000e+01, 4.9000000e+01, ...,
          4.9000000e+01, 4.2000000e+01, 2.8000000e+01],
         [3.5000000e+01, 4.9000000e+01, 4.9000000e+01, ...,
          4.9000000e+01, 4.2000000e+01, 2.8000000e+01],
         ...,
         [3.5000000e+01,           inf,           inf, ...,
                    inf, 4.2000000e+01, 2.8000000e+01],
         [3.0000000e+01, 7.8962965e+13,           inf, ...,
          4.2000000e+01, 3.6000000e+01, 2.4000000e+01],
         [2.0000000e+01, 2.8000000e+01, 2.8000000e+01, ...,
          2.8000000e+01, 2.4000000e+01, 1.6000000e+01]],

        [[2.5000000e+01, 3.5000000e+01, 3.5000000e+01, ...,
          3.5000000e+01, 3.0000000e+01, 2.0000000e+01],
         [3.5000000e+01, 4.9000000e+01, 4.9000000e+01, ...,
          4.9000000e+01, 4.2000000e+01, 2.8000000e+01],
         [3.5000000e+01, 4.9000000e+01, 4.9000000e+01, ...,
          4.9000000e+01, 4.2000000e+01, 2.8000000e+01],
         ...,
         [3.5000000e+01,           inf,           inf, ...,
                    inf, 4.2000000e+01, 2.8000000e+01],
         [3.0000000e+01, 7.8962965e+13,           inf, ...,
          4.2000000e+01, 3.6000000e+01, 2.4000000e+01],
         [2.0000000e+01, 2.8000000e+01, 2.8000000e+01, ...,
          2.8000000e+01, 2.4000000e+01, 1.6000000e+01]],

        [[2.5000000e+01, 3.5000000e+01, 3.5000000e+01, ...,
          3.5000000e+01, 3.0000000e+01, 2.0000000e+01],
         [3.5000000e+01, 4.9000000e+01, 4.9000000e+01, ...,
          4.9000000e+01, 4.2000000e+01, 2.8000000e+01],
         [3.5000000e+01, 4.9000000e+01, 4.9000000e+01, ...,
          4.9000000e+01, 4.2000000e+01, 2.8000000e+01],
         ...,
         [3.5000000e+01,           inf,           inf, ...,
                    inf, 4.2000000e+01, 2.8000000e+01],
         [3.0000000e+01, 7.8962965e+13,           inf, ...,
          4.2000000e+01, 3.6000000e+01, 2.4000000e+01],
         [2.0000000e+01, 2.8000000e+01, 2.8000000e+01, ...,
          2.8000000e+01, 2.4000000e+01, 1.6000000e+01]],

        ...,

        [[2.5000000e+01, 3.5000000e+01, 3.5000000e+01, ...,
          3.5000000e+01, 3.0000000e+01, 2.0000000e+01],
         [3.5000000e+01, 4.9000000e+01, 4.9000000e+01, ...,
          4.9000000e+01, 4.2000000e+01, 2.8000000e+01],
         [3.5000000e+01, 4.9000000e+01, 4.9000000e+01, ...,
          4.9000000e+01, 4.2000000e+01, 2.8000000e+01],
         ...,
         [3.5000000e+01,           inf,           inf, ...,
                    inf, 4.2000000e+01, 2.8000000e+01],
         [3.0000000e+01, 7.8962965e+13,           inf, ...,
          4.2000000e+01, 3.6000000e+01, 2.4000000e+01],
         [2.0000000e+01, 2.8000000e+01, 2.8000000e+01, ...,
          2.8000000e+01, 2.4000000e+01, 1.6000000e+01]],

        [[2.5000000e+01, 3.5000000e+01, 3.5000000e+01, ...,
          3.5000000e+01, 3.0000000e+01, 2.0000000e+01],
         [3.5000000e+01, 4.9000000e+01, 4.9000000e+01, ...,
          4.9000000e+01, 4.2000000e+01, 2.8000000e+01],
         [3.5000000e+01, 4.9000000e+01, 4.9000000e+01, ...,
          4.9000000e+01, 4.2000000e+01, 2.8000000e+01],
         ...,
         [3.5000000e+01,           inf,           inf, ...,
                    inf, 4.2000000e+01, 2.8000000e+01],
         [3.0000000e+01, 7.8962965e+13,           inf, ...,
          4.2000000e+01, 3.6000000e+01, 2.4000000e+01],
         [2.0000000e+01, 2.8000000e+01, 2.8000000e+01, ...,
          2.8000000e+01, 2.4000000e+01, 1.6000000e+01]],

        [[2.5000000e+01, 3.5000000e+01, 3.5000000e+01, ...,
          3.5000000e+01, 3.0000000e+01, 2.0000000e+01],
         [3.5000000e+01, 4.9000000e+01, 4.9000000e+01, ...,
          4.9000000e+01, 4.2000000e+01, 2.8000000e+01],
         [3.5000000e+01, 4.9000000e+01, 4.9000000e+01, ...,
          4.9000000e+01, 4.2000000e+01, 2.8000000e+01],
         ...,
         [3.5000000e+01,           inf,           inf, ...,
                    inf, 4.2000000e+01, 2.8000000e+01],
         [3.0000000e+01, 7.8962965e+13,           inf, ...,
          4.2000000e+01, 3.6000000e+01, 2.4000000e+01],
         [2.0000000e+01, 2.8000000e+01, 2.8000000e+01, ...,
          2.8000000e+01, 2.4000000e+01, 1.6000000e+01]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 14, 14]), 'from': [20], 'to': [6]}
ms node:
{'name': 'conv2d', 'output': array([[[[16., 24., 28., ..., 28., 28., 20.],
         [24., 36., 42., ..., 42., 42., 30.],
         [28., 42., 49., ..., 49., 49., 35.],
         ...,
         [28., 42., inf, ..., inf, inf, 35.],
         [28., 42., inf, ..., 49., 49., 35.],
         [20., 30., 35., ..., 35., 35., 25.]],

        [[16., 24., 28., ..., 28., 28., 20.],
         [24., 36., 42., ..., 42., 42., 30.],
         [28., 42., 49., ..., 49., 49., 35.],
         ...,
         [28., 42., inf, ..., inf, inf, 35.],
         [28., 42., inf, ..., 49., 49., 35.],
         [20., 30., 35., ..., 35., 35., 25.]],

        [[16., 24., 28., ..., 28., 28., 20.],
         [24., 36., 42., ..., 42., 42., 30.],
         [28., 42., 49., ..., 49., 49., 35.],
         ...,
         [28., 42., inf, ..., inf, inf, 35.],
         [28., 42., inf, ..., 49., 49., 35.],
         [20., 30., 35., ..., 35., 35., 25.]],

        ...,

        [[16., 24., 28., ..., 28., 28., 20.],
         [24., 36., 42., ..., 42., 42., 30.],
         [28., 42., 49., ..., 49., 49., 35.],
         ...,
         [28., 42., inf, ..., inf, inf, 35.],
         [28., 42., inf, ..., 49., 49., 35.],
         [20., 30., 35., ..., 35., 35., 25.]],

        [[16., 24., 28., ..., 28., 28., 20.],
         [24., 36., 42., ..., 42., 42., 30.],
         [28., 42., 49., ..., 49., 49., 35.],
         ...,
         [28., 42., inf, ..., inf, inf, 35.],
         [28., 42., inf, ..., 49., 49., 35.],
         [20., 30., 35., ..., 35., 35., 25.]],

        [[16., 24., 28., ..., 28., 28., 20.],
         [24., 36., 42., ..., 42., 42., 30.],
         [28., 42., 49., ..., 49., 49., 35.],
         ...,
         [28., 42., inf, ..., inf, inf, 35.],
         [28., 42., inf, ..., 49., 49., 35.],
         [20., 30., 35., ..., 35., 35., 25.]]]], dtype=float32), 'output_shape': (1, 64, 14, 14), 'from': [20], 'to': [6]}
torch node:
{'name': 'conv2d', 'output': array([[[[16., 24., 28., ..., 28., 28., 20.],
         [24., 36., 42., ..., 42., 42., 30.],
         [28., 42., 49., ..., 49., 49., 35.],
         ...,
         [28., 42., inf, ..., inf, inf, 35.],
         [28., 42., inf, ..., 49., 49., 35.],
         [20., 30., 35., ..., 35., 35., 25.]],

        [[16., 24., 28., ..., 28., 28., 20.],
         [24., 36., 42., ..., 42., 42., 30.],
         [28., 42., 49., ..., 49., 49., 35.],
         ...,
         [28., 42., inf, ..., inf, inf, 35.],
         [28., 42., inf, ..., 49., 49., 35.],
         [20., 30., 35., ..., 35., 35., 25.]],

        [[16., 24., 28., ..., 28., 28., 20.],
         [24., 36., 42., ..., 42., 42., 30.],
         [28., 42., 49., ..., 49., 49., 35.],
         ...,
         [28., 42., inf, ..., inf, inf, 35.],
         [28., 42., inf, ..., 49., 49., 35.],
         [20., 30., 35., ..., 35., 35., 25.]],

        ...,

        [[16., 24., 28., ..., 28., 28., 20.],
         [24., 36., 42., ..., 42., 42., 30.],
         [28., 42., 49., ..., 49., 49., 35.],
         ...,
         [28., 42., inf, ..., inf, inf, 35.],
         [28., 42., inf, ..., 49., 49., 35.],
         [20., 30., 35., ..., 35., 35., 25.]],

        [[16., 24., 28., ..., 28., 28., 20.],
         [24., 36., 42., ..., 42., 42., 30.],
         [28., 42., 49., ..., 49., 49., 35.],
         ...,
         [28., 42., inf, ..., inf, inf, 35.],
         [28., 42., inf, ..., 49., 49., 35.],
         [20., 30., 35., ..., 35., 35., 25.]],

        [[16., 24., 28., ..., 28., 28., 20.],
         [24., 36., 42., ..., 42., 42., 30.],
         [28., 42., 49., ..., 49., 49., 35.],
         ...,
         [28., 42., inf, ..., inf, inf, 35.],
         [28., 42., inf, ..., 49., 49., 35.],
         [20., 30., 35., ..., 35., 35., 25.]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 14, 14]), 'from': [20], 'to': [6]}

generate models:24

analyse output arrays in iter:25

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,  83.,  91., 143., 255., 190.,  91.,  50.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   9.,
           49., 180., 246., 253., 253., 253., 253., 253., 220., 154.,
           17.,   3.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,  46., 107., 178.,
          253., 253., 253., 253., 253., 253., 253., 253., 253., 253.,
          253., 126.,  45.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0., 107., 253., 253.,
          253., 253., 223., 220., 220., 220., 220., 245., 253., 253.,
          253., 253., 106.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0., 107., 173., 253.,
          229., 129.,  12.,   0.,   0.,   0.,   0., 110., 253., 253.,
          253., 253., 106.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,  17.,  14.,  40.,
           32.,   0.,   0.,   0.,   0.,   0.,   0.,  57., 253., 253.,
          253., 242.,  85.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   5., 139., 224., 253., 253.,
          253., 105.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,  65., 178., 253., 253., 253., 253.,
          219.,  24.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,  97., 250., 253., 253., 253., 253., 127.,
           47.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,  46., 125., 250., 253., 253., 253., 245., 171.,  33.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   5.,
           41., 217., 253., 253., 250., 245., 245., 115.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0., 124.,
          253., 253., 253., 192., 105.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,  11.,  47., 220.,
          253., 253., 188.,  25.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0., 107., 253., 253.,
          253., 189.,  13.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,  41., 225., 253., 253.,
          186.,  22.,   0.,   0.,   0.,   0.,   0.,  31.,  42., 174.,
          205., 205., 205., 193.,  58.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,  48., 218., 253., 253., 253.,
          150.,  59.,   0.,   0., 128., 131., 131., 222., 253., 253.,
          253., 253., 253.,  94.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,  12., 152., 253., 253., 253.,
          253., 236., 222., 222., 252., 253., 253., 253., 253., 253.,
          253., 253., 253., 122.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   7., 167., 253., 253.,
          253., 253., 253., 253., 253., 253., 253., 253., 253., 253.,
          253., 124., 106.,   7.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,  76., 188., 253.,
          253., 253., 253., 253., 253., 253., 224.,  57.,  15.,  15.,
           15.,   2.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  12.,  89.,
          121., 253., 253., 151.,  89.,  89.,  55.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 1, 28, 28]), 'from': [], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,  153., ...,  444.,   45.,    0.],
         [   0.,    0.,  793., ..., 1668.,  257.,    0.],
         ...,
         [   0.,  171., 1373., ..., 1388.,  488.,    0.],
         [   0.,    0.,  276., ...,   17.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,  153., ...,  444.,   45.,    0.],
         [   0.,    0.,  793., ..., 1668.,  257.,    0.],
         ...,
         [   0.,  171., 1373., ..., 1388.,  488.,    0.],
         [   0.,    0.,  276., ...,   17.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,  153., ...,  444.,   45.,    0.],
         [   0.,    0.,  793., ..., 1668.,  257.,    0.],
         ...,
         [   0.,  171., 1373., ..., 1388.,  488.,    0.],
         [   0.,    0.,  276., ...,   17.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        ...,

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,  153., ...,  444.,   45.,    0.],
         [   0.,    0.,  793., ..., 1668.,  257.,    0.],
         ...,
         [   0.,  171., 1373., ..., 1388.,  488.,    0.],
         [   0.,    0.,  276., ...,   17.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,  153., ...,  444.,   45.,    0.],
         [   0.,    0.,  793., ..., 1668.,  257.,    0.],
         ...,
         [   0.,  171., 1373., ..., 1388.,  488.,    0.],
         [   0.,    0.,  276., ...,   17.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,  153., ...,  444.,   45.,    0.],
         [   0.,    0.,  793., ..., 1668.,  257.,    0.],
         ...,
         [   0.,  171., 1373., ..., 1388.,  488.,    0.],
         [   0.,    0.,  276., ...,   17.,    0.,    0.],
         [   0.,    0.,    0., ...,    0.,    0.,    0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 14, 14]), 'from': [0], 'to': [8, 8]}
ms node:
{'name': 'conv2d', 'output': array([[[[0.000e+00, 0.000e+00, 0.000e+00, ..., 0.000e+00, 0.000e+00,
          0.000e+00],
         [0.000e+00, 0.000e+00, 0.000e+00, ..., 1.740e+02, 3.000e+00,
          0.000e+00],
         [0.000e+00, 0.000e+00, 1.530e+02, ..., 1.716e+03, 5.330e+02,
          0.000e+00],
         ...,
         [0.000e+00, 6.000e+01, 1.186e+03, ..., 3.015e+03, 1.467e+03,
          2.230e+02],
         [0.000e+00, 0.000e+00, 2.500e+02, ..., 7.750e+02, 2.390e+02,
          7.000e+00],
         [0.000e+00, 0.000e+00, 0.000e+00, ..., 0.000e+00, 0.000e+00,
          0.000e+00]],

        [[0.000e+00, 0.000e+00, 0.000e+00, ..., 0.000e+00, 0.000e+00,
          0.000e+00],
         [0.000e+00, 0.000e+00, 0.000e+00, ..., 1.740e+02, 3.000e+00,
          0.000e+00],
         [0.000e+00, 0.000e+00, 1.530e+02, ..., 1.716e+03, 5.330e+02,
          0.000e+00],
         ...,
         [0.000e+00, 6.000e+01, 1.186e+03, ..., 3.015e+03, 1.467e+03,
          2.230e+02],
         [0.000e+00, 0.000e+00, 2.500e+02, ..., 7.750e+02, 2.390e+02,
          7.000e+00],
         [0.000e+00, 0.000e+00, 0.000e+00, ..., 0.000e+00, 0.000e+00,
          0.000e+00]],

        [[0.000e+00, 0.000e+00, 0.000e+00, ..., 0.000e+00, 0.000e+00,
          0.000e+00],
         [0.000e+00, 0.000e+00, 0.000e+00, ..., 1.740e+02, 3.000e+00,
          0.000e+00],
         [0.000e+00, 0.000e+00, 1.530e+02, ..., 1.716e+03, 5.330e+02,
          0.000e+00],
         ...,
         [0.000e+00, 6.000e+01, 1.186e+03, ..., 3.015e+03, 1.467e+03,
          2.230e+02],
         [0.000e+00, 0.000e+00, 2.500e+02, ..., 7.750e+02, 2.390e+02,
          7.000e+00],
         [0.000e+00, 0.000e+00, 0.000e+00, ..., 0.000e+00, 0.000e+00,
          0.000e+00]],

        ...,

        [[0.000e+00, 0.000e+00, 0.000e+00, ..., 0.000e+00, 0.000e+00,
          0.000e+00],
         [0.000e+00, 0.000e+00, 0.000e+00, ..., 1.740e+02, 3.000e+00,
          0.000e+00],
         [0.000e+00, 0.000e+00, 1.530e+02, ..., 1.716e+03, 5.330e+02,
          0.000e+00],
         ...,
         [0.000e+00, 6.000e+01, 1.186e+03, ..., 3.015e+03, 1.467e+03,
          2.230e+02],
         [0.000e+00, 0.000e+00, 2.500e+02, ..., 7.750e+02, 2.390e+02,
          7.000e+00],
         [0.000e+00, 0.000e+00, 0.000e+00, ..., 0.000e+00, 0.000e+00,
          0.000e+00]],

        [[0.000e+00, 0.000e+00, 0.000e+00, ..., 0.000e+00, 0.000e+00,
          0.000e+00],
         [0.000e+00, 0.000e+00, 0.000e+00, ..., 1.740e+02, 3.000e+00,
          0.000e+00],
         [0.000e+00, 0.000e+00, 1.530e+02, ..., 1.716e+03, 5.330e+02,
          0.000e+00],
         ...,
         [0.000e+00, 6.000e+01, 1.186e+03, ..., 3.015e+03, 1.467e+03,
          2.230e+02],
         [0.000e+00, 0.000e+00, 2.500e+02, ..., 7.750e+02, 2.390e+02,
          7.000e+00],
         [0.000e+00, 0.000e+00, 0.000e+00, ..., 0.000e+00, 0.000e+00,
          0.000e+00]],

        [[0.000e+00, 0.000e+00, 0.000e+00, ..., 0.000e+00, 0.000e+00,
          0.000e+00],
         [0.000e+00, 0.000e+00, 0.000e+00, ..., 1.740e+02, 3.000e+00,
          0.000e+00],
         [0.000e+00, 0.000e+00, 1.530e+02, ..., 1.716e+03, 5.330e+02,
          0.000e+00],
         ...,
         [0.000e+00, 6.000e+01, 1.186e+03, ..., 3.015e+03, 1.467e+03,
          2.230e+02],
         [0.000e+00, 0.000e+00, 2.500e+02, ..., 7.750e+02, 2.390e+02,
          7.000e+00],
         [0.000e+00, 0.000e+00, 0.000e+00, ..., 0.000e+00, 0.000e+00,
          0.000e+00]]]], dtype=float32), 'output_shape': (1, 64, 14, 14), 'from': [0], 'to': [8, 8]}
torch node:
{'name': 'conv2d', 'output': array([[[[0.000e+00, 0.000e+00, 0.000e+00, ..., 0.000e+00, 0.000e+00,
          0.000e+00],
         [0.000e+00, 0.000e+00, 0.000e+00, ..., 1.740e+02, 3.000e+00,
          0.000e+00],
         [0.000e+00, 0.000e+00, 1.530e+02, ..., 1.716e+03, 5.330e+02,
          0.000e+00],
         ...,
         [0.000e+00, 6.000e+01, 1.186e+03, ..., 3.015e+03, 1.467e+03,
          2.230e+02],
         [0.000e+00, 0.000e+00, 2.500e+02, ..., 7.750e+02, 2.390e+02,
          7.000e+00],
         [0.000e+00, 0.000e+00, 0.000e+00, ..., 0.000e+00, 0.000e+00,
          0.000e+00]],

        [[0.000e+00, 0.000e+00, 0.000e+00, ..., 0.000e+00, 0.000e+00,
          0.000e+00],
         [0.000e+00, 0.000e+00, 0.000e+00, ..., 1.740e+02, 3.000e+00,
          0.000e+00],
         [0.000e+00, 0.000e+00, 1.530e+02, ..., 1.716e+03, 5.330e+02,
          0.000e+00],
         ...,
         [0.000e+00, 6.000e+01, 1.186e+03, ..., 3.015e+03, 1.467e+03,
          2.230e+02],
         [0.000e+00, 0.000e+00, 2.500e+02, ..., 7.750e+02, 2.390e+02,
          7.000e+00],
         [0.000e+00, 0.000e+00, 0.000e+00, ..., 0.000e+00, 0.000e+00,
          0.000e+00]],

        [[0.000e+00, 0.000e+00, 0.000e+00, ..., 0.000e+00, 0.000e+00,
          0.000e+00],
         [0.000e+00, 0.000e+00, 0.000e+00, ..., 1.740e+02, 3.000e+00,
          0.000e+00],
         [0.000e+00, 0.000e+00, 1.530e+02, ..., 1.716e+03, 5.330e+02,
          0.000e+00],
         ...,
         [0.000e+00, 6.000e+01, 1.186e+03, ..., 3.015e+03, 1.467e+03,
          2.230e+02],
         [0.000e+00, 0.000e+00, 2.500e+02, ..., 7.750e+02, 2.390e+02,
          7.000e+00],
         [0.000e+00, 0.000e+00, 0.000e+00, ..., 0.000e+00, 0.000e+00,
          0.000e+00]],

        ...,

        [[0.000e+00, 0.000e+00, 0.000e+00, ..., 0.000e+00, 0.000e+00,
          0.000e+00],
         [0.000e+00, 0.000e+00, 0.000e+00, ..., 1.740e+02, 3.000e+00,
          0.000e+00],
         [0.000e+00, 0.000e+00, 1.530e+02, ..., 1.716e+03, 5.330e+02,
          0.000e+00],
         ...,
         [0.000e+00, 6.000e+01, 1.186e+03, ..., 3.015e+03, 1.467e+03,
          2.230e+02],
         [0.000e+00, 0.000e+00, 2.500e+02, ..., 7.750e+02, 2.390e+02,
          7.000e+00],
         [0.000e+00, 0.000e+00, 0.000e+00, ..., 0.000e+00, 0.000e+00,
          0.000e+00]],

        [[0.000e+00, 0.000e+00, 0.000e+00, ..., 0.000e+00, 0.000e+00,
          0.000e+00],
         [0.000e+00, 0.000e+00, 0.000e+00, ..., 1.740e+02, 3.000e+00,
          0.000e+00],
         [0.000e+00, 0.000e+00, 1.530e+02, ..., 1.716e+03, 5.330e+02,
          0.000e+00],
         ...,
         [0.000e+00, 6.000e+01, 1.186e+03, ..., 3.015e+03, 1.467e+03,
          2.230e+02],
         [0.000e+00, 0.000e+00, 2.500e+02, ..., 7.750e+02, 2.390e+02,
          7.000e+00],
         [0.000e+00, 0.000e+00, 0.000e+00, ..., 0.000e+00, 0.000e+00,
          0.000e+00]],

        [[0.000e+00, 0.000e+00, 0.000e+00, ..., 0.000e+00, 0.000e+00,
          0.000e+00],
         [0.000e+00, 0.000e+00, 0.000e+00, ..., 1.740e+02, 3.000e+00,
          0.000e+00],
         [0.000e+00, 0.000e+00, 1.530e+02, ..., 1.716e+03, 5.330e+02,
          0.000e+00],
         ...,
         [0.000e+00, 6.000e+01, 1.186e+03, ..., 3.015e+03, 1.467e+03,
          2.230e+02],
         [0.000e+00, 0.000e+00, 2.500e+02, ..., 7.750e+02, 2.390e+02,
          7.000e+00],
         [0.000e+00, 0.000e+00, 0.000e+00, ..., 0.000e+00, 0.000e+00,
          0.000e+00]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 14, 14]), 'from': [0], 'to': [8, 8]}

generate models:25

analyse output arrays in iter:27

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            9.,  80., 207., 255., 254., 254., 254.,  97.,  80.,  80.,
           44.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,  39., 158., 158., 158.,
          168., 253., 253., 253., 253., 253., 253., 253., 253., 253.,
          210.,  38.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0., 226., 253., 253., 253.,
          253., 253., 253., 253., 253., 253., 253., 253., 253., 253.,
          253., 241., 146.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0., 139., 253., 253., 253.,
          238., 113., 215., 253., 253., 253., 253., 253., 253., 253.,
          253., 253., 210.,  43.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,  39.,  34.,  34.,  34.,
           30.,   0.,  31., 148.,  34., 204., 235., 253., 253., 253.,
          253., 253., 236.,  64.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,  91.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,  35., 199., 253., 253., 253.,
          253., 244.,  81.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,  11.,  33., 202., 202., 216., 253., 253., 253., 253.,
          241.,  89.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
           11., 167., 253., 253., 253., 253., 253., 253., 253., 238.,
           82.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
           27., 253., 253., 253., 253., 253., 253., 253., 253.,  96.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
           18., 201., 253., 253., 253., 253., 253., 253., 253., 230.,
           49.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,  36.,  87.,  87.,  87., 248., 253., 253., 253., 253.,
          138.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   7., 152., 253., 253., 253.,
          250.,  59.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,  62., 238., 253., 253.,
          253.,  60.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,  32., 233., 253., 253.,
          150.,   6.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,  37., 203., 253., 253., 253.,
          138.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,  66., 211., 211., 211.,  59.,  36.,
           36.,  21.,  26.,  36., 151., 222., 253., 253., 253., 253.,
          138.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,  80., 253., 253., 253., 253., 253.,
          253., 195., 215., 253., 253., 253., 253., 253., 253., 157.,
           77.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,  80., 253., 253., 253., 253., 253.,
          253., 253., 253., 253., 253., 253., 253., 237., 235.,  40.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,  49., 156., 247., 253., 253., 253.,
          253., 253., 253., 253., 253., 159., 156.,  16.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0., 116., 253., 253., 253.,
          253., 253., 126.,  78.,  78.,   3.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.],
         [  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
            0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 1, 28, 28]), 'from': [], 'to': [1, 17]}
tf node:
{'name': 'conv2d', 'output': array([[[[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,   39.,  355., ...,  292.,    0.,    0.],
         [   0.,  404., 1732., ..., 1691.,  399.,    0.],
         ...,
         [ 275., 2228., 4522., ...,  215.,    0.,    0.],
         [ 129., 1154., 2672., ...,    0.,    0.,    0.],
         [   0.,  116.,  622., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,   39.,  355., ...,  292.,    0.,    0.],
         [   0.,  404., 1732., ..., 1691.,  399.,    0.],
         ...,
         [ 275., 2228., 4522., ...,  215.,    0.,    0.],
         [ 129., 1154., 2672., ...,    0.,    0.,    0.],
         [   0.,  116.,  622., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,   39.,  355., ...,  292.,    0.,    0.],
         [   0.,  404., 1732., ..., 1691.,  399.,    0.],
         ...,
         [ 275., 2228., 4522., ...,  215.,    0.,    0.],
         [ 129., 1154., 2672., ...,    0.,    0.,    0.],
         [   0.,  116.,  622., ...,    0.,    0.,    0.]],

        ...,

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,   39.,  355., ...,  292.,    0.,    0.],
         [   0.,  404., 1732., ..., 1691.,  399.,    0.],
         ...,
         [ 275., 2228., 4522., ...,  215.,    0.,    0.],
         [ 129., 1154., 2672., ...,    0.,    0.,    0.],
         [   0.,  116.,  622., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,   39.,  355., ...,  292.,    0.,    0.],
         [   0.,  404., 1732., ..., 1691.,  399.,    0.],
         ...,
         [ 275., 2228., 4522., ...,  215.,    0.,    0.],
         [ 129., 1154., 2672., ...,    0.,    0.,    0.],
         [   0.,  116.,  622., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,   39.,  355., ...,  292.,    0.,    0.],
         [   0.,  404., 1732., ..., 1691.,  399.,    0.],
         ...,
         [ 275., 2228., 4522., ...,  215.,    0.,    0.],
         [ 129., 1154., 2672., ...,    0.,    0.,    0.],
         [   0.,  116.,  622., ...,    0.,    0.,    0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 14, 14]), 'from': [0], 'to': [2]}
ms node:
{'name': 'conv2d', 'output': array([[[[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  124.,    0.,    0.],
         [   0.,    0.,  676., ..., 1518.,  425.,    0.],
         ...,
         [   0., 1148., 3451., ..., 1056.,    0.,    0.],
         [   0.,  871., 2752., ...,  274.,    0.,    0.],
         [   0.,  205., 1074., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  124.,    0.,    0.],
         [   0.,    0.,  676., ..., 1518.,  425.,    0.],
         ...,
         [   0., 1148., 3451., ..., 1056.,    0.,    0.],
         [   0.,  871., 2752., ...,  274.,    0.,    0.],
         [   0.,  205., 1074., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  124.,    0.,    0.],
         [   0.,    0.,  676., ..., 1518.,  425.,    0.],
         ...,
         [   0., 1148., 3451., ..., 1056.,    0.,    0.],
         [   0.,  871., 2752., ...,  274.,    0.,    0.],
         [   0.,  205., 1074., ...,    0.,    0.,    0.]],

        ...,

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  124.,    0.,    0.],
         [   0.,    0.,  676., ..., 1518.,  425.,    0.],
         ...,
         [   0., 1148., 3451., ..., 1056.,    0.,    0.],
         [   0.,  871., 2752., ...,  274.,    0.,    0.],
         [   0.,  205., 1074., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  124.,    0.,    0.],
         [   0.,    0.,  676., ..., 1518.,  425.,    0.],
         ...,
         [   0., 1148., 3451., ..., 1056.,    0.,    0.],
         [   0.,  871., 2752., ...,  274.,    0.,    0.],
         [   0.,  205., 1074., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  124.,    0.,    0.],
         [   0.,    0.,  676., ..., 1518.,  425.,    0.],
         ...,
         [   0., 1148., 3451., ..., 1056.,    0.,    0.],
         [   0.,  871., 2752., ...,  274.,    0.,    0.],
         [   0.,  205., 1074., ...,    0.,    0.,    0.]]]], dtype=float32), 'output_shape': (1, 64, 14, 14), 'from': [0], 'to': [2]}
torch node:
{'name': 'conv2d', 'output': array([[[[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  124.,    0.,    0.],
         [   0.,    0.,  676., ..., 1518.,  425.,    0.],
         ...,
         [   0., 1148., 3451., ..., 1056.,    0.,    0.],
         [   0.,  871., 2752., ...,  274.,    0.,    0.],
         [   0.,  205., 1074., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  124.,    0.,    0.],
         [   0.,    0.,  676., ..., 1518.,  425.,    0.],
         ...,
         [   0., 1148., 3451., ..., 1056.,    0.,    0.],
         [   0.,  871., 2752., ...,  274.,    0.,    0.],
         [   0.,  205., 1074., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  124.,    0.,    0.],
         [   0.,    0.,  676., ..., 1518.,  425.,    0.],
         ...,
         [   0., 1148., 3451., ..., 1056.,    0.,    0.],
         [   0.,  871., 2752., ...,  274.,    0.,    0.],
         [   0.,  205., 1074., ...,    0.,    0.,    0.]],

        ...,

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  124.,    0.,    0.],
         [   0.,    0.,  676., ..., 1518.,  425.,    0.],
         ...,
         [   0., 1148., 3451., ..., 1056.,    0.,    0.],
         [   0.,  871., 2752., ...,  274.,    0.,    0.],
         [   0.,  205., 1074., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  124.,    0.,    0.],
         [   0.,    0.,  676., ..., 1518.,  425.,    0.],
         ...,
         [   0., 1148., 3451., ..., 1056.,    0.,    0.],
         [   0.,  871., 2752., ...,  274.,    0.,    0.],
         [   0.,  205., 1074., ...,    0.,    0.,    0.]],

        [[   0.,    0.,    0., ...,    0.,    0.,    0.],
         [   0.,    0.,    0., ...,  124.,    0.,    0.],
         [   0.,    0.,  676., ..., 1518.,  425.,    0.],
         ...,
         [   0., 1148., 3451., ..., 1056.,    0.,    0.],
         [   0.,  871., 2752., ...,  274.,    0.,    0.],
         [   0.,  205., 1074., ...,    0.,    0.,    0.]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 14, 14]), 'from': [0], 'to': [2]}

generate models:27

analyse output arrays in iter:34

pre layer res:
7:reshape
{'name': 'reshape', 'output': array([[[[2., 2., 2., ..., 2., 2., 2.],
         [2., 2., 2., ..., 2., 2., 2.],
         [2., 2., 2., ..., 2., 2., 2.],
         ...,
         [2., 2., 2., ..., 2., 2., 2.],
         [2., 2., 2., ..., 2., 2., 2.],
         [2., 2., 2., ..., 2., 2., 2.]],

        [[2., 2., 2., ..., 2., 2., 2.],
         [2., 2., 2., ..., 2., 2., 2.],
         [2., 2., 2., ..., 2., 2., 2.],
         ...,
         [2., 2., 2., ..., 2., 2., 2.],
         [2., 2., 2., ..., 2., 2., 2.],
         [2., 2., 2., ..., 2., 2., 2.]],

        [[2., 2., 2., ..., 2., 2., 2.],
         [2., 2., 2., ..., 2., 2., 2.],
         [2., 2., 2., ..., 2., 2., 2.],
         ...,
         [2., 2., 2., ..., 2., 2., 2.],
         [2., 2., 2., ..., 2., 2., 2.],
         [2., 2., 2., ..., 2., 2., 2.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [6], 'to': [12]}
tf node:
{'name': 'sin', 'output': array([[[[0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747],
         [0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747],
         [0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747],
         ...,
         [0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747],
         [0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747],
         [0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747]],

        [[0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747],
         [0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747],
         [0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747],
         ...,
         [0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747],
         [0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747],
         [0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747]],

        [[0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747],
         [0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747],
         [0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747],
         ...,
         [0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747],
         [0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747],
         [0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747]],

        ...,

        [[0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [7], 'to': [18]}
ms node:
{'name': 'sin', 'output': array([[[[0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974],
         [0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974],
         [0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974],
         ...,
         [0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974],
         [0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974],
         [0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974]],

        [[0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974],
         [0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974],
         [0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974],
         ...,
         [0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974],
         [0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974],
         [0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974]],

        [[0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974],
         [0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974],
         [0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974],
         ...,
         [0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974],
         [0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974],
         [0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974]],

        ...,

        [[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ]],

        [[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ]],

        [[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ]]]], dtype=float32), 'output_shape': (1, 256, 28, 28), 'from': [7], 'to': [18]}
torch node:
{'name': 'sin', 'output': array([[[[0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974],
         [0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974],
         [0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974],
         ...,
         [0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974],
         [0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974],
         [0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974]],

        [[0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974],
         [0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974],
         [0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974],
         ...,
         [0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974],
         [0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974],
         [0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974]],

        [[0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974],
         [0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974],
         [0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974],
         ...,
         [0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974],
         [0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974],
         [0.9092974, 0.9092974, 0.9092974, ..., 0.9092974, 0.9092974,
          0.9092974]],

        ...,

        [[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ]],

        [[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ]],

        [[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 28, 28]), 'from': [7], 'to': [18]}

generate models:31

analyse the exceptions in iter:42
torch exception:
{'id': 21, 'name': 'flatten', 'frame_work': 'torch', 'input_datas': [tensor([0.2518, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000])]}
Dimension out of range (expected to be in range of [-1, 0], but got 1)

generate models:37

final statics:
total operators:28
tensorflow --> nums:16,distinct_bugs:3
mindspore --> nums:2,distinct_bugs:2
torch --> nums:3,distinct_bugs:3
tensorflow --> 
conv2d:14
log:1
sin:1
mindspore --> 
log:1
sin:1
torch --> 
log:1
sin:1
flatten:1

generate models:43

analyse output arrays in iter:54

pre layer res:
19:log
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [2], 'to': [9]}
tf node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [19], 'to': [3, 17]}
ms node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [19], 'to': [3, 17]}
torch node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [19], 'to': [3, 17]}

generate models:48

analyse output arrays in iter:56

pre layer res:
16:softmax
{'name': 'softmax', 'output': array([[[[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429]],

        [[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429]],

        [[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429]],

        ...,

        [[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429]],

        [[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429]],

        [[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [3], 'to': [20]}
tf node:
{'name': 'log', 'output': array([[[[-3.3322046, -3.3322046, -3.3322046, ..., -3.3322046,
          -3.3322046, -3.3322046],
         [-3.3322046, -3.3322046, -3.3322046, ..., -3.3322046,
          -3.3322046, -3.3322046],
         [-3.3322046, -3.3322046, -3.3322046, ..., -3.3322046,
          -3.3322046, -3.3322046],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [-3.3322046, -3.3322046, -3.3322046, ..., -3.3322046,
          -3.3322046, -3.3322046],
         [-3.3322046, -3.3322046, -3.3322046, ..., -3.3322046,
          -3.3322046, -3.3322046]],

        [[-3.3322046, -3.3322046, -3.3322046, ..., -3.3322046,
          -3.3322046, -3.3322046],
         [-3.3322046, -3.3322046, -3.3322046, ..., -3.3322046,
          -3.3322046, -3.3322046],
         [-3.3322046, -3.3322046, -3.3322046, ..., -3.3322046,
          -3.3322046, -3.3322046],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [-3.3322046, -3.3322046, -3.3322046, ..., -3.3322046,
          -3.3322046, -3.3322046],
         [-3.3322046, -3.3322046, -3.3322046, ..., -3.3322046,
          -3.3322046, -3.3322046]],

        [[-3.3322046, -3.3322046, -3.3322046, ..., -3.3322046,
          -3.3322046, -3.3322046],
         [-3.3322046, -3.3322046, -3.3322046, ..., -3.3322046,
          -3.3322046, -3.3322046],
         [-3.3322046, -3.3322046, -3.3322046, ..., -3.3322046,
          -3.3322046, -3.3322046],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [-3.3322046, -3.3322046, -3.3322046, ..., -3.3322046,
          -3.3322046, -3.3322046],
         [-3.3322046, -3.3322046, -3.3322046, ..., -3.3322046,
          -3.3322046, -3.3322046]],

        ...,

        [[-3.3322046, -3.3322046, -3.3322046, ..., -3.3322046,
          -3.3322046, -3.3322046],
         [-3.3322046, -3.3322046, -3.3322046, ..., -3.3322046,
          -3.3322046, -3.3322046],
         [-3.3322046, -3.3322046, -3.3322046, ..., -3.3322046,
          -3.3322046, -3.3322046],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [-3.3322046, -3.3322046, -3.3322046, ..., -3.3322046,
          -3.3322046, -3.3322046],
         [-3.3322046, -3.3322046, -3.3322046, ..., -3.3322046,
          -3.3322046, -3.3322046]],

        [[-3.3322046, -3.3322046, -3.3322046, ..., -3.3322046,
          -3.3322046, -3.3322046],
         [-3.3322046, -3.3322046, -3.3322046, ..., -3.3322046,
          -3.3322046, -3.3322046],
         [-3.3322046, -3.3322046, -3.3322046, ..., -3.3322046,
          -3.3322046, -3.3322046],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [-3.3322046, -3.3322046, -3.3322046, ..., -3.3322046,
          -3.3322046, -3.3322046],
         [-3.3322046, -3.3322046, -3.3322046, ..., -3.3322046,
          -3.3322046, -3.3322046]],

        [[-3.3322046, -3.3322046, -3.3322046, ..., -3.3322046,
          -3.3322046, -3.3322046],
         [-3.3322046, -3.3322046, -3.3322046, ..., -3.3322046,
          -3.3322046, -3.3322046],
         [-3.3322046, -3.3322046, -3.3322046, ..., -3.3322046,
          -3.3322046, -3.3322046],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [-3.3322046, -3.3322046, -3.3322046, ..., -3.3322046,
          -3.3322046, -3.3322046],
         [-3.3322046, -3.3322046, -3.3322046, ..., -3.3322046,
          -3.3322046, -3.3322046]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [16], 'to': [17]}
ms node:
{'name': 'log', 'output': array([[[[-3.3322077, -3.3322077, -3.3322077, ..., -3.3322077,
          -3.3322077, -3.3322077],
         [-3.3322077, -3.3322077, -3.3322077, ..., -3.3322077,
          -3.3322077, -3.3322077],
         [-3.3322077, -3.3322077, -3.3322077, ..., -3.3322077,
          -3.3322077, -3.3322077],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [-3.3322077, -3.3322077, -3.3322077, ..., -3.3322077,
          -3.3322077, -3.3322077],
         [-3.3322077, -3.3322077, -3.3322077, ..., -3.3322077,
          -3.3322077, -3.3322077]],

        [[-3.3322077, -3.3322077, -3.3322077, ..., -3.3322077,
          -3.3322077, -3.3322077],
         [-3.3322077, -3.3322077, -3.3322077, ..., -3.3322077,
          -3.3322077, -3.3322077],
         [-3.3322077, -3.3322077, -3.3322077, ..., -3.3322077,
          -3.3322077, -3.3322077],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [-3.3322077, -3.3322077, -3.3322077, ..., -3.3322077,
          -3.3322077, -3.3322077],
         [-3.3322077, -3.3322077, -3.3322077, ..., -3.3322077,
          -3.3322077, -3.3322077]],

        [[-3.3322077, -3.3322077, -3.3322077, ..., -3.3322077,
          -3.3322077, -3.3322077],
         [-3.3322077, -3.3322077, -3.3322077, ..., -3.3322077,
          -3.3322077, -3.3322077],
         [-3.3322077, -3.3322077, -3.3322077, ..., -3.3322077,
          -3.3322077, -3.3322077],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [-3.3322077, -3.3322077, -3.3322077, ..., -3.3322077,
          -3.3322077, -3.3322077],
         [-3.3322077, -3.3322077, -3.3322077, ..., -3.3322077,
          -3.3322077, -3.3322077]],

        ...,

        [[-3.3322077, -3.3322077, -3.3322077, ..., -3.3322077,
          -3.3322077, -3.3322077],
         [-3.3322077, -3.3322077, -3.3322077, ..., -3.3322077,
          -3.3322077, -3.3322077],
         [-3.3322077, -3.3322077, -3.3322077, ..., -3.3322077,
          -3.3322077, -3.3322077],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [-3.3322077, -3.3322077, -3.3322077, ..., -3.3322077,
          -3.3322077, -3.3322077],
         [-3.3322077, -3.3322077, -3.3322077, ..., -3.3322077,
          -3.3322077, -3.3322077]],

        [[-3.3322077, -3.3322077, -3.3322077, ..., -3.3322077,
          -3.3322077, -3.3322077],
         [-3.3322077, -3.3322077, -3.3322077, ..., -3.3322077,
          -3.3322077, -3.3322077],
         [-3.3322077, -3.3322077, -3.3322077, ..., -3.3322077,
          -3.3322077, -3.3322077],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [-3.3322077, -3.3322077, -3.3322077, ..., -3.3322077,
          -3.3322077, -3.3322077],
         [-3.3322077, -3.3322077, -3.3322077, ..., -3.3322077,
          -3.3322077, -3.3322077]],

        [[-3.3322077, -3.3322077, -3.3322077, ..., -3.3322077,
          -3.3322077, -3.3322077],
         [-3.3322077, -3.3322077, -3.3322077, ..., -3.3322077,
          -3.3322077, -3.3322077],
         [-3.3322077, -3.3322077, -3.3322077, ..., -3.3322077,
          -3.3322077, -3.3322077],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [-3.3322077, -3.3322077, -3.3322077, ..., -3.3322077,
          -3.3322077, -3.3322077],
         [-3.3322077, -3.3322077, -3.3322077, ..., -3.3322077,
          -3.3322077, -3.3322077]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [16], 'to': [17]}
torch node:
{'name': 'log', 'output': array([[[[-3.3322043, -3.3322043, -3.3322043, ..., -3.3322043,
          -3.3322043, -3.3322043],
         [-3.3322043, -3.3322043, -3.3322043, ..., -3.3322043,
          -3.3322043, -3.3322043],
         [-3.3322043, -3.3322043, -3.3322043, ..., -3.3322043,
          -3.3322043, -3.3322043],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [-3.3322043, -3.3322043, -3.3322043, ..., -3.3322043,
          -3.3322043, -3.3322043],
         [-3.3322043, -3.3322043, -3.3322043, ..., -3.3322043,
          -3.3322043, -3.3322043]],

        [[-3.3322043, -3.3322043, -3.3322043, ..., -3.3322043,
          -3.3322043, -3.3322043],
         [-3.3322043, -3.3322043, -3.3322043, ..., -3.3322043,
          -3.3322043, -3.3322043],
         [-3.3322043, -3.3322043, -3.3322043, ..., -3.3322043,
          -3.3322043, -3.3322043],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [-3.3322043, -3.3322043, -3.3322043, ..., -3.3322043,
          -3.3322043, -3.3322043],
         [-3.3322043, -3.3322043, -3.3322043, ..., -3.3322043,
          -3.3322043, -3.3322043]],

        [[-3.3322043, -3.3322043, -3.3322043, ..., -3.3322043,
          -3.3322043, -3.3322043],
         [-3.3322043, -3.3322043, -3.3322043, ..., -3.3322043,
          -3.3322043, -3.3322043],
         [-3.3322043, -3.3322043, -3.3322043, ..., -3.3322043,
          -3.3322043, -3.3322043],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [-3.3322043, -3.3322043, -3.3322043, ..., -3.3322043,
          -3.3322043, -3.3322043],
         [-3.3322043, -3.3322043, -3.3322043, ..., -3.3322043,
          -3.3322043, -3.3322043]],

        ...,

        [[-3.3322043, -3.3322043, -3.3322043, ..., -3.3322043,
          -3.3322043, -3.3322043],
         [-3.3322043, -3.3322043, -3.3322043, ..., -3.3322043,
          -3.3322043, -3.3322043],
         [-3.3322043, -3.3322043, -3.3322043, ..., -3.3322043,
          -3.3322043, -3.3322043],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [-3.3322043, -3.3322043, -3.3322043, ..., -3.3322043,
          -3.3322043, -3.3322043],
         [-3.3322043, -3.3322043, -3.3322043, ..., -3.3322043,
          -3.3322043, -3.3322043]],

        [[-3.3322043, -3.3322043, -3.3322043, ..., -3.3322043,
          -3.3322043, -3.3322043],
         [-3.3322043, -3.3322043, -3.3322043, ..., -3.3322043,
          -3.3322043, -3.3322043],
         [-3.3322043, -3.3322043, -3.3322043, ..., -3.3322043,
          -3.3322043, -3.3322043],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [-3.3322043, -3.3322043, -3.3322043, ..., -3.3322043,
          -3.3322043, -3.3322043],
         [-3.3322043, -3.3322043, -3.3322043, ..., -3.3322043,
          -3.3322043, -3.3322043]],

        [[-3.3322043, -3.3322043, -3.3322043, ..., -3.3322043,
          -3.3322043, -3.3322043],
         [-3.3322043, -3.3322043, -3.3322043, ..., -3.3322043,
          -3.3322043, -3.3322043],
         [-3.3322043, -3.3322043, -3.3322043, ..., -3.3322043,
          -3.3322043, -3.3322043],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [-3.3322043, -3.3322043, -3.3322043, ..., -3.3322043,
          -3.3322043, -3.3322043],
         [-3.3322043, -3.3322043, -3.3322043, ..., -3.3322043,
          -3.3322043, -3.3322043]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [16], 'to': [17]}

generate models:50

analyse output arrays in iter:87

pre layer res:
10:add
{'name': 'add', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [8, 8], 'to': [15]}
tf node:
{'name': 'cos', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [10], 'to': [11]}
ms node:
{'name': 'cos', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': (1, 256, 28, 28), 'from': [10], 'to': [11]}
torch node:
{'name': 'cos', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 28, 28]), 'from': [10], 'to': [11]}

generate models:78

analyse output arrays in iter:96

pre layer res:
6:conv2d
{'name': 'conv2d', 'output': array([[[[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         ...,
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         ...,
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         ...,
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        ...,

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         ...,
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         ...,
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]],

        [[64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         ...,
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.],
         [64., 64., 64., ..., 64., 64., 64.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [5], 'to': [14]}
tf node:
{'name': 'sin', 'output': array([[[[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]],

        [[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]],

        [[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]],

        ...,

        [[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]],

        [[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]],

        [[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [6], 'to': [15]}
ms node:
{'name': 'sin', 'output': array([[[[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]],

        [[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]],

        [[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]],

        ...,

        [[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]],

        [[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]],

        [[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [6], 'to': [15]}
torch node:
{'name': 'sin', 'output': array([[[[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]],

        [[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]],

        [[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]],

        ...,

        [[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]],

        [[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]],

        [[0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         ...,
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606],
         [0.92002606, 0.92002606, 0.92002606, ..., 0.92002606,
          0.92002606, 0.92002606]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [6], 'to': [15]}

generate models:87

analyse output arrays in iter:99

pre layer res:
1:conv2d
{'name': 'conv2d', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [9], 'to': [12]}
tf node:
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [1], 'to': [2]}
ms node:
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [1], 'to': [2]}
torch node:
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [1], 'to': [2]}

generate models:89

final statics:
total operators:28
tensorflow --> nums:19,distinct_bugs:4
mindspore --> nums:6,distinct_bugs:4
torch --> nums:7,distinct_bugs:4
tensorflow --> 
conv2d:14
log:2
sin:2
softmax:1
mindspore --> 
log:2
sin:2
softmax:1
cos:1
torch --> 
log:3
sin:2
flatten:1
softmax:1

generate models:89

analyse output arrays in iter:150

pre layer res:
14:conv2d
{'name': 'conv2d', 'output': array([[[[314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376],
         [314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376],
         [314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376],
         ...,
         [314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376],
         [314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376],
         [314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376]],

        [[314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376],
         [314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376],
         [314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376],
         ...,
         [314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376],
         [314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376],
         [314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376]],

        [[314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376],
         [314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376],
         [314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376],
         ...,
         [314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376],
         [314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376],
         [314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376]],

        ...,

        [[314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376],
         [314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376],
         [314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376],
         ...,
         [314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376],
         [314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376],
         [314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376]],

        [[314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376],
         [314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376],
         [314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376],
         ...,
         [314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376],
         [314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376],
         [314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376]],

        [[314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376],
         [314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376],
         [314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376],
         ...,
         [314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376],
         [314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376],
         [314.79376, 314.79376, 314.79376, ..., 314.79376, 314.79376,
          314.79376]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [13], 'to': [21]}
tf node:
{'name': 'sin', 'output': array([[[[0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         ...,
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236]],

        [[0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         ...,
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236]],

        [[0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         ...,
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236]],

        ...,

        [[0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         ...,
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236]],

        [[0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         ...,
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236]],

        [[0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         ...,
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [14], 'to': [15]}
ms node:
{'name': 'sin', 'output': array([[[[0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         ...,
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236]],

        [[0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         ...,
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236]],

        [[0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         ...,
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236]],

        ...,

        [[0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         ...,
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236]],

        [[0.5929198 , 0.5929198 , 0.5929198 , ..., 0.5929198 ,
          0.5929198 , 0.5929198 ],
         [0.5929198 , 0.5929198 , 0.5929198 , ..., 0.5929198 ,
          0.5929198 , 0.5929198 ],
         [0.5929198 , 0.5929198 , 0.5929198 , ..., 0.5929198 ,
          0.5929198 , 0.5929198 ],
         ...,
         [0.5929198 , 0.5929198 , 0.5929198 , ..., 0.5929198 ,
          0.5929198 , 0.5929198 ],
         [0.5929198 , 0.5929198 , 0.5929198 , ..., 0.5929198 ,
          0.5929198 , 0.5929198 ],
         [0.5929198 , 0.5929198 , 0.5929198 , ..., 0.5929198 ,
          0.5929198 , 0.5929198 ]],

        [[0.5929198 , 0.5929198 , 0.5929198 , ..., 0.5929198 ,
          0.5929198 , 0.5929198 ],
         [0.5929198 , 0.5929198 , 0.5929198 , ..., 0.5929198 ,
          0.5929198 , 0.5929198 ],
         [0.5929198 , 0.5929198 , 0.5929198 , ..., 0.5929198 ,
          0.5929198 , 0.5929198 ],
         ...,
         [0.5929198 , 0.5929198 , 0.5929198 , ..., 0.5929198 ,
          0.5929198 , 0.5929198 ],
         [0.5929198 , 0.5929198 , 0.5929198 , ..., 0.5929198 ,
          0.5929198 , 0.5929198 ],
         [0.5929198 , 0.5929198 , 0.5929198 , ..., 0.5929198 ,
          0.5929198 , 0.5929198 ]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [14], 'to': [15]}
torch node:
{'name': 'sin', 'output': array([[[[0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         ...,
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236]],

        [[0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         ...,
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236]],

        [[0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         ...,
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236]],

        ...,

        [[0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         ...,
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236]],

        [[0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         ...,
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236]],

        [[0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         ...,
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236],
         [0.59277236, 0.59277236, 0.59277236, ..., 0.59277236,
          0.59277236, 0.59277236]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [14], 'to': [15]}

pre layer res:
16:reshape
{'name': 'reshape', 'output': array([[[[0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         ...,
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854]],

        [[0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         ...,
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854]],

        [[0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         ...,
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854]],

        ...,

        [[0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         ...,
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854]],

        [[0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         ...,
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854]],

        [[0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         ...,
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [19], 'to': [22]}
tf node:
{'name': 'log', 'output': array([[[[-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175],
         [-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175],
         [-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175],
         ...,
         [-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175],
         [-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175],
         [-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175]],

        [[-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175],
         [-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175],
         [-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175],
         ...,
         [-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175],
         [-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175],
         [-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175]],

        [[-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175],
         [-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175],
         [-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175],
         ...,
         [-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175],
         [-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175],
         [-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175]],

        ...,

        [[-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175],
         [-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175],
         [-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175],
         ...,
         [-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175],
         [-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175],
         [-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175]],

        [[-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175],
         [-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175],
         [-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175],
         ...,
         [-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175],
         [-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175],
         [-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175]],

        [[-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175],
         [-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175],
         [-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175],
         ...,
         [-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175],
         [-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175],
         [-0.31326175, -0.31326175, -0.31326175, ..., -0.31326175,
          -0.31326175, -0.31326175]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [16], 'to': [6]}
ms node:
{'name': 'log', 'output': array([[[[-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172],
         [-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172],
         [-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172],
         ...,
         [-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172],
         [-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172],
         [-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172]],

        [[-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172],
         [-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172],
         [-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172],
         ...,
         [-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172],
         [-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172],
         [-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172]],

        [[-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172],
         [-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172],
         [-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172],
         ...,
         [-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172],
         [-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172],
         [-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172]],

        ...,

        [[-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172],
         [-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172],
         [-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172],
         ...,
         [-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172],
         [-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172],
         [-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172]],

        [[-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172],
         [-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172],
         [-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172],
         ...,
         [-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172],
         [-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172],
         [-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172]],

        [[-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172],
         [-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172],
         [-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172],
         ...,
         [-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172],
         [-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172],
         [-0.31326172, -0.31326172, -0.31326172, ..., -0.31326172,
          -0.31326172, -0.31326172]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [16], 'to': [6]}
torch node:
{'name': 'log', 'output': array([[[[-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166],
         [-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166],
         [-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166],
         ...,
         [-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166],
         [-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166],
         [-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166]],

        [[-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166],
         [-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166],
         [-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166],
         ...,
         [-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166],
         [-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166],
         [-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166]],

        [[-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166],
         [-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166],
         [-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166],
         ...,
         [-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166],
         [-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166],
         [-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166]],

        ...,

        [[-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166],
         [-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166],
         [-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166],
         ...,
         [-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166],
         [-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166],
         [-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166]],

        [[-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166],
         [-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166],
         [-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166],
         ...,
         [-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166],
         [-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166],
         [-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166]],

        [[-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166],
         [-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166],
         [-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166],
         ...,
         [-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166],
         [-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166],
         [-0.31326166, -0.31326166, -0.31326166, ..., -0.31326166,
          -0.31326166, -0.31326166]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [16], 'to': [6]}

generate models:136

analyse output arrays in iter:176

pre layer res:
7:reshape
{'name': 'reshape', 'output': array([[[[     0.  ,      0.  ,      0.  , ..., 676954.5 , 676954.5 ,
          578901.44],
         [     0.  ,      0.  ,      0.  , ..., 676954.5 , 676954.5 ,
          578901.44],
         [     0.  ,      0.  ,      0.  , ..., 676954.5 , 676954.5 ,
          578901.44],
         ...,
         [     0.  ,      0.  ,      0.  , ..., 451303.56, 451303.56,
          385933.97],
         [     0.  ,      0.  ,      0.  , ..., 451303.56, 451303.56,
          385933.97],
         [     0.  ,      0.  ,      0.  , ..., 451303.56, 451303.56,
          385933.97]],

        [[     0.  ,      0.  ,      0.  , ..., 676954.5 , 676954.5 ,
          578901.44],
         [     0.  ,      0.  ,      0.  , ..., 676954.5 , 676954.5 ,
          578901.44],
         [     0.  ,      0.  ,      0.  , ..., 676954.5 , 676954.5 ,
          578901.44],
         ...,
         [     0.  ,      0.  ,      0.  , ..., 451303.56, 451303.56,
          385933.97],
         [     0.  ,      0.  ,      0.  , ..., 451303.56, 451303.56,
          385933.97],
         [     0.  ,      0.  ,      0.  , ..., 451303.56, 451303.56,
          385933.97]],

        [[     0.  ,      0.  ,      0.  , ..., 676954.5 , 676954.5 ,
          578901.44],
         [     0.  ,      0.  ,      0.  , ..., 676954.5 , 676954.5 ,
          578901.44],
         [     0.  ,      0.  ,      0.  , ..., 676954.5 , 676954.5 ,
          578901.44],
         ...,
         [     0.  ,      0.  ,      0.  , ..., 451303.56, 451303.56,
          385933.97],
         [     0.  ,      0.  ,      0.  , ..., 451303.56, 451303.56,
          385933.97],
         [     0.  ,      0.  ,      0.  , ..., 451303.56, 451303.56,
          385933.97]],

        ...,

        [[     0.  ,      0.  ,      0.  , ..., 676954.5 , 676954.5 ,
          578901.44],
         [     0.  ,      0.  ,      0.  , ..., 676954.5 , 676954.5 ,
          578901.44],
         [     0.  ,      0.  ,      0.  , ..., 676954.5 , 676954.5 ,
          578901.44],
         ...,
         [     0.  ,      0.  ,      0.  , ..., 451303.56, 451303.56,
          385933.97],
         [     0.  ,      0.  ,      0.  , ..., 451303.56, 451303.56,
          385933.97],
         [     0.  ,      0.  ,      0.  , ..., 451303.56, 451303.56,
          385933.97]],

        [[     0.  ,      0.  ,      0.  , ..., 676954.5 , 676954.5 ,
          578901.44],
         [     0.  ,      0.  ,      0.  , ..., 676954.5 , 676954.5 ,
          578901.44],
         [     0.  ,      0.  ,      0.  , ..., 676954.5 , 676954.5 ,
          578901.44],
         ...,
         [     0.  ,      0.  ,      0.  , ..., 451303.56, 451303.56,
          385933.97],
         [     0.  ,      0.  ,      0.  , ..., 451303.56, 451303.56,
          385933.97],
         [     0.  ,      0.  ,      0.  , ..., 451303.56, 451303.56,
          385933.97]],

        [[     0.  ,      0.  ,      0.  , ..., 676954.5 , 676954.5 ,
          578901.44],
         [     0.  ,      0.  ,      0.  , ..., 676954.5 , 676954.5 ,
          578901.44],
         [     0.  ,      0.  ,      0.  , ..., 676954.5 , 676954.5 ,
          578901.44],
         ...,
         [     0.  ,      0.  ,      0.  , ..., 451303.56, 451303.56,
          385933.97],
         [     0.  ,      0.  ,      0.  , ..., 451303.56, 451303.56,
          385933.97],
         [     0.  ,      0.  ,      0.  , ..., 451303.56, 451303.56,
          385933.97]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [6], 'to': [8]}
tf node:
{'name': 'cos', 'output': array([[[[ 1.        ,  1.        ,  1.        , ..., -0.5624819 ,
          -0.5624819 ,  0.98735076],
         [ 1.        ,  1.        ,  1.        , ..., -0.5624819 ,
          -0.5624819 ,  0.98735076],
         [ 1.        ,  1.        ,  1.        , ..., -0.5624819 ,
          -0.5624819 ,  0.98735076],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.35167062,
           0.35167062, -0.30203897],
         [ 1.        ,  1.        ,  1.        , ...,  0.35167062,
           0.35167062, -0.30203897],
         [ 1.        ,  1.        ,  1.        , ...,  0.35167062,
           0.35167062, -0.30203897]],

        [[ 1.        ,  1.        ,  1.        , ..., -0.5624819 ,
          -0.5624819 ,  0.98735076],
         [ 1.        ,  1.        ,  1.        , ..., -0.5624819 ,
          -0.5624819 ,  0.98735076],
         [ 1.        ,  1.        ,  1.        , ..., -0.5624819 ,
          -0.5624819 ,  0.98735076],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.35167062,
           0.35167062, -0.30203897],
         [ 1.        ,  1.        ,  1.        , ...,  0.35167062,
           0.35167062, -0.30203897],
         [ 1.        ,  1.        ,  1.        , ...,  0.35167062,
           0.35167062, -0.30203897]],

        [[ 1.        ,  1.        ,  1.        , ..., -0.5624819 ,
          -0.5624819 ,  0.98735076],
         [ 1.        ,  1.        ,  1.        , ..., -0.5624819 ,
          -0.5624819 ,  0.98735076],
         [ 1.        ,  1.        ,  1.        , ..., -0.5624819 ,
          -0.5624819 ,  0.98735076],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.35167062,
           0.35167062, -0.30203897],
         [ 1.        ,  1.        ,  1.        , ...,  0.35167062,
           0.35167062, -0.30203897],
         [ 1.        ,  1.        ,  1.        , ...,  0.35167062,
           0.35167062, -0.30203897]],

        ...,

        [[ 1.        ,  1.        ,  1.        , ..., -0.5624819 ,
          -0.5624819 ,  0.98735076],
         [ 1.        ,  1.        ,  1.        , ..., -0.5624819 ,
          -0.5624819 ,  0.98735076],
         [ 1.        ,  1.        ,  1.        , ..., -0.5624819 ,
          -0.5624819 ,  0.98735076],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.35167062,
           0.35167062, -0.30203897],
         [ 1.        ,  1.        ,  1.        , ...,  0.35167062,
           0.35167062, -0.30203897],
         [ 1.        ,  1.        ,  1.        , ...,  0.35167062,
           0.35167062, -0.30203897]],

        [[ 1.        ,  1.        ,  1.        , ..., -0.5624819 ,
          -0.5624819 ,  0.98735076],
         [ 1.        ,  1.        ,  1.        , ..., -0.5624819 ,
          -0.5624819 ,  0.98735076],
         [ 1.        ,  1.        ,  1.        , ..., -0.5624819 ,
          -0.5624819 ,  0.98735076],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.35167062,
           0.35167062, -0.30203897],
         [ 1.        ,  1.        ,  1.        , ...,  0.35167062,
           0.35167062, -0.30203897],
         [ 1.        ,  1.        ,  1.        , ...,  0.35167062,
           0.35167062, -0.30203897]],

        [[ 1.        ,  1.        ,  1.        , ..., -0.5624819 ,
          -0.5624819 ,  0.98735076],
         [ 1.        ,  1.        ,  1.        , ..., -0.5624819 ,
          -0.5624819 ,  0.98735076],
         [ 1.        ,  1.        ,  1.        , ..., -0.5624819 ,
          -0.5624819 ,  0.98735076],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.35167062,
           0.35167062, -0.30203897],
         [ 1.        ,  1.        ,  1.        , ...,  0.35167062,
           0.35167062, -0.30203897],
         [ 1.        ,  1.        ,  1.        , ...,  0.35167062,
           0.35167062, -0.30203897]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [7], 'to': [15]}
ms node:
{'name': 'cos', 'output': array([[[[ 1.        ,  1.        ,  1.        , ..., -0.99603426,
          -0.99603426, -0.9802283 ],
         [ 1.        ,  1.        ,  1.        , ..., -0.99603426,
          -0.99603426, -0.9802283 ],
         [ 1.        ,  1.        ,  1.        , ..., -0.99603426,
          -0.99603426, -0.9802283 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.9492955 ,
           0.9492955 , -0.24190703],
         [ 1.        ,  1.        ,  1.        , ...,  0.9492955 ,
           0.9492955 , -0.24190703],
         [ 1.        ,  1.        ,  1.        , ...,  0.9492955 ,
           0.9492955 , -0.24190703]],

        [[ 1.        ,  1.        ,  1.        , ..., -0.99603426,
          -0.99603426, -0.9802283 ],
         [ 1.        ,  1.        ,  1.        , ..., -0.99603426,
          -0.99603426, -0.9802283 ],
         [ 1.        ,  1.        ,  1.        , ..., -0.99603426,
          -0.99603426, -0.9802283 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.9492955 ,
           0.9492955 , -0.24190703],
         [ 1.        ,  1.        ,  1.        , ...,  0.9492955 ,
           0.9492955 , -0.24190703],
         [ 1.        ,  1.        ,  1.        , ...,  0.9492955 ,
           0.9492955 , -0.24190703]],

        [[ 1.        ,  1.        ,  1.        , ..., -0.99603426,
          -0.99603426, -0.9802283 ],
         [ 1.        ,  1.        ,  1.        , ..., -0.99603426,
          -0.99603426, -0.9802283 ],
         [ 1.        ,  1.        ,  1.        , ..., -0.99603426,
          -0.99603426, -0.9802283 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.9492955 ,
           0.9492955 , -0.24190703],
         [ 1.        ,  1.        ,  1.        , ...,  0.9492955 ,
           0.9492955 , -0.24190703],
         [ 1.        ,  1.        ,  1.        , ...,  0.9492955 ,
           0.9492955 , -0.24190703]],

        ...,

        [[ 1.        ,  1.        ,  1.        , ..., -0.99603426,
          -0.99603426, -0.9802283 ],
         [ 1.        ,  1.        ,  1.        , ..., -0.99603426,
          -0.99603426, -0.9802283 ],
         [ 1.        ,  1.        ,  1.        , ..., -0.99603426,
          -0.99603426, -0.9802283 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.9492955 ,
           0.9492955 , -0.24190703],
         [ 1.        ,  1.        ,  1.        , ...,  0.9492955 ,
           0.9492955 , -0.24190703],
         [ 1.        ,  1.        ,  1.        , ...,  0.9492955 ,
           0.9492955 , -0.24190703]],

        [[ 1.        ,  1.        ,  1.        , ..., -0.9594049 ,
          -0.9594049 , -0.9972496 ],
         [ 1.        ,  1.        ,  1.        , ..., -0.9594049 ,
          -0.9594049 , -0.9972496 ],
         [ 1.        ,  1.        ,  1.        , ..., -0.9594049 ,
          -0.9594049 , -0.9972496 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.9492955 ,
           0.9492955 , -0.18083048],
         [ 1.        ,  1.        ,  1.        , ...,  0.9492955 ,
           0.9492955 , -0.18083048],
         [ 1.        ,  1.        ,  1.        , ...,  0.9492955 ,
           0.9492955 , -0.18083048]],

        [[ 1.        ,  1.        ,  1.        , ..., -0.9594049 ,
          -0.9594049 , -0.9972496 ],
         [ 1.        ,  1.        ,  1.        , ..., -0.9594049 ,
          -0.9594049 , -0.9972496 ],
         [ 1.        ,  1.        ,  1.        , ..., -0.9594049 ,
          -0.9594049 , -0.9972496 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.9492955 ,
           0.9492955 , -0.18083048],
         [ 1.        ,  1.        ,  1.        , ...,  0.9492955 ,
           0.9492955 , -0.18083048],
         [ 1.        ,  1.        ,  1.        , ...,  0.9492955 ,
           0.9492955 , -0.18083048]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [7], 'to': [15]}
torch node:
{'name': 'cos', 'output': array([[[[ 1.        ,  1.        ,  1.        , ..., -0.3491915 ,
          -0.3491915 ,  0.40549412],
         [ 1.        ,  1.        ,  1.        , ..., -0.3491915 ,
          -0.3491915 ,  0.40549412],
         [ 1.        ,  1.        ,  1.        , ..., -0.3491915 ,
          -0.3491915 ,  0.40549412],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.97772944,
           0.97772944,  0.28299874],
         [ 1.        ,  1.        ,  1.        , ...,  0.97772944,
           0.97772944,  0.28299874],
         [ 1.        ,  1.        ,  1.        , ...,  0.97772944,
           0.97772944,  0.28299874]],

        [[ 1.        ,  1.        ,  1.        , ..., -0.3491915 ,
          -0.3491915 ,  0.40549412],
         [ 1.        ,  1.        ,  1.        , ..., -0.3491915 ,
          -0.3491915 ,  0.40549412],
         [ 1.        ,  1.        ,  1.        , ..., -0.3491915 ,
          -0.3491915 ,  0.40549412],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.97772944,
           0.97772944,  0.28299874],
         [ 1.        ,  1.        ,  1.        , ...,  0.97772944,
           0.97772944,  0.28299874],
         [ 1.        ,  1.        ,  1.        , ...,  0.97772944,
           0.97772944,  0.28299874]],

        [[ 1.        ,  1.        ,  1.        , ..., -0.3491915 ,
          -0.3491915 ,  0.40549412],
         [ 1.        ,  1.        ,  1.        , ..., -0.3491915 ,
          -0.3491915 ,  0.40549412],
         [ 1.        ,  1.        ,  1.        , ..., -0.3491915 ,
          -0.3491915 ,  0.40549412],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.97772944,
           0.97772944,  0.28299874],
         [ 1.        ,  1.        ,  1.        , ...,  0.97772944,
           0.97772944,  0.28299874],
         [ 1.        ,  1.        ,  1.        , ...,  0.97772944,
           0.97772944,  0.28299874]],

        ...,

        [[ 1.        ,  1.        ,  1.        , ..., -0.3491915 ,
          -0.3491915 ,  0.40549412],
         [ 1.        ,  1.        ,  1.        , ..., -0.3491915 ,
          -0.3491915 ,  0.40549412],
         [ 1.        ,  1.        ,  1.        , ..., -0.3491915 ,
          -0.3491915 ,  0.40549412],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.97772944,
           0.97772944,  0.28299874],
         [ 1.        ,  1.        ,  1.        , ...,  0.97772944,
           0.97772944,  0.28299874],
         [ 1.        ,  1.        ,  1.        , ...,  0.97772944,
           0.97772944,  0.28299874]],

        [[ 1.        ,  1.        ,  1.        , ..., -0.3491915 ,
          -0.3491915 ,  0.40549412],
         [ 1.        ,  1.        ,  1.        , ..., -0.3491915 ,
          -0.3491915 ,  0.40549412],
         [ 1.        ,  1.        ,  1.        , ..., -0.3491915 ,
          -0.3491915 ,  0.40549412],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.97772944,
           0.97772944,  0.28299874],
         [ 1.        ,  1.        ,  1.        , ...,  0.97772944,
           0.97772944,  0.28299874],
         [ 1.        ,  1.        ,  1.        , ...,  0.97772944,
           0.97772944,  0.28299874]],

        [[ 1.        ,  1.        ,  1.        , ..., -0.3491915 ,
          -0.3491915 ,  0.40549412],
         [ 1.        ,  1.        ,  1.        , ..., -0.3491915 ,
          -0.3491915 ,  0.40549412],
         [ 1.        ,  1.        ,  1.        , ..., -0.3491915 ,
          -0.3491915 ,  0.40549412],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.97772944,
           0.97772944,  0.28299874],
         [ 1.        ,  1.        ,  1.        , ...,  0.97772944,
           0.97772944,  0.28299874],
         [ 1.        ,  1.        ,  1.        , ...,  0.97772944,
           0.97772944,  0.28299874]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [7], 'to': [15]}

generate models:159

analyse output arrays in iter:184

pre layer res:
16:exp
{'name': 'exp', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [21], 'to': [17]}
tf node:
{'name': 'sin', 'output': array([[[[0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         ...,
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471]],

        [[0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         ...,
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471]],

        [[0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         ...,
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471]],

        ...,

        [[0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         ...,
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471]],

        [[0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         ...,
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471]],

        [[0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         ...,
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [16], 'to': [2]}
ms node:
{'name': 'sin', 'output': array([[[[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        ...,

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [16], 'to': [2]}
torch node:
{'name': 'sin', 'output': array([[[[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        ...,

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [16], 'to': [2]}

generate models:166

analyse output arrays in iter:190

pre layer res:
14:slice
{'name': 'slice', 'output': array([[1., 1., 1., ..., 1., 1., 1.]], dtype=float32), 'output_shape': TensorShape([1, 7168]), 'from': [13], 'to': [16]}
tf node:
{'name': 'log', 'output': array([[0., 0., 0., ..., 0., 0., 0.]], dtype=float32), 'output_shape': TensorShape([1, 7168]), 'from': [14], 'to': [15]}
ms node:
{'name': 'log', 'output': array([[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
        -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]], dtype=float32), 'output_shape': (1, 7168), 'from': [14], 'to': [15]}
torch node:
{'name': 'log', 'output': array([[0., 0., 0., ..., 0., 0., 0.]], dtype=float32), 'output_shape': torch.Size([1, 7168]), 'from': [14], 'to': [15]}

generate models:172

analyse output arrays in iter:213

pre layer res:
14:conv2d
{'name': 'conv2d', 'output': array([[[[74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18],
         [74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18],
         [74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18],
         ...,
         [74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18],
         [74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18],
         [74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18]],

        [[74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18],
         [74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18],
         [74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18],
         ...,
         [74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18],
         [74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18],
         [74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18]],

        [[74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18],
         [74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18],
         [74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18],
         ...,
         [74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18],
         [74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18],
         [74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18]],

        ...,

        [[74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18],
         [74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18],
         [74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18],
         ...,
         [74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18],
         [74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18],
         [74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18]],

        [[74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18],
         [74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18],
         [74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18],
         ...,
         [74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18],
         [74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18],
         [74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18]],

        [[74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18],
         [74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18],
         [74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18],
         ...,
         [74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18],
         [74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18],
         [74898.18, 74898.18, 74898.18, ..., 74898.18, 74898.18,
          74898.18]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [13], 'to': [6]}
tf node:
{'name': 'cos', 'output': array([[[[-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925],
         [-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925],
         [-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925],
         ...,
         [-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925],
         [-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925],
         [-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925]],

        [[-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925],
         [-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925],
         [-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925],
         ...,
         [-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925],
         [-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925],
         [-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925]],

        [[-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925],
         [-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925],
         [-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925],
         ...,
         [-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925],
         [-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925],
         [-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925]],

        ...,

        [[-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925],
         [-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925],
         [-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925],
         ...,
         [-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925],
         [-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925],
         [-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925]],

        [[-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925],
         [-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925],
         [-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925],
         ...,
         [-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925],
         [-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925],
         [-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925]],

        [[-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925],
         [-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925],
         [-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925],
         ...,
         [-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925],
         [-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925],
         [-0.86241925, -0.86241925, -0.86241925, ..., -0.86241925,
          -0.86241925, -0.86241925]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [14], 'to': [15]}
ms node:
{'name': 'cos', 'output': array([[[[-0.8702229 , -0.8702229 , -0.8702229 , ..., -0.8702229 ,
          -0.8702229 , -0.8702229 ],
         [-0.8702229 , -0.8702229 , -0.8702229 , ..., -0.8702229 ,
          -0.8702229 , -0.8702229 ],
         [-0.8702229 , -0.8702229 , -0.8702229 , ..., -0.8702229 ,
          -0.8702229 , -0.8702229 ],
         ...,
         [-0.8702229 , -0.8702229 , -0.8702229 , ..., -0.8702229 ,
          -0.8702229 , -0.8702229 ],
         [-0.8702229 , -0.8702229 , -0.8702229 , ..., -0.8702229 ,
          -0.8702229 , -0.8702229 ],
         [-0.8702229 , -0.8702229 , -0.8702229 , ..., -0.8702229 ,
          -0.8702229 , -0.8702229 ]],

        [[-0.8702229 , -0.8702229 , -0.8702229 , ..., -0.8702229 ,
          -0.8702229 , -0.8702229 ],
         [-0.8702229 , -0.8702229 , -0.8702229 , ..., -0.8702229 ,
          -0.8702229 , -0.8702229 ],
         [-0.8702229 , -0.8702229 , -0.8702229 , ..., -0.8702229 ,
          -0.8702229 , -0.8702229 ],
         ...,
         [-0.8702229 , -0.8702229 , -0.8702229 , ..., -0.8702229 ,
          -0.8702229 , -0.8702229 ],
         [-0.8702229 , -0.8702229 , -0.8702229 , ..., -0.8702229 ,
          -0.8702229 , -0.8702229 ],
         [-0.8702229 , -0.8702229 , -0.8702229 , ..., -0.8702229 ,
          -0.8702229 , -0.8702229 ]],

        [[-0.8702229 , -0.8702229 , -0.8702229 , ..., -0.8702229 ,
          -0.8702229 , -0.8702229 ],
         [-0.8702229 , -0.8702229 , -0.8702229 , ..., -0.8702229 ,
          -0.8702229 , -0.8702229 ],
         [-0.8702229 , -0.8702229 , -0.8702229 , ..., -0.8702229 ,
          -0.8702229 , -0.8702229 ],
         ...,
         [-0.8702229 , -0.8702229 , -0.8702229 , ..., -0.8702229 ,
          -0.8702229 , -0.8702229 ],
         [-0.8702229 , -0.8702229 , -0.8702229 , ..., -0.8702229 ,
          -0.8702229 , -0.8702229 ],
         [-0.8702229 , -0.8702229 , -0.8702229 , ..., -0.8702229 ,
          -0.8702229 , -0.8702229 ]],

        ...,

        [[-0.8702229 , -0.8702229 , -0.8702229 , ..., -0.8702229 ,
          -0.8702229 , -0.8702229 ],
         [-0.8702229 , -0.8702229 , -0.8702229 , ..., -0.8702229 ,
          -0.8702229 , -0.8702229 ],
         [-0.8702229 , -0.8702229 , -0.8702229 , ..., -0.8702229 ,
          -0.8702229 , -0.8702229 ],
         ...,
         [-0.8702229 , -0.8702229 , -0.8702229 , ..., -0.8702229 ,
          -0.8702229 , -0.8702229 ],
         [-0.8702229 , -0.8702229 , -0.8702229 , ..., -0.8702229 ,
          -0.8702229 , -0.8702229 ],
         [-0.8702229 , -0.8702229 , -0.8702229 , ..., -0.8702229 ,
          -0.8702229 , -0.8702229 ]],

        [[-0.85843825, -0.85843825, -0.85843825, ..., -0.85843825,
          -0.85843825, -0.85843825],
         [-0.85843825, -0.85843825, -0.85843825, ..., -0.85843825,
          -0.85843825, -0.85843825],
         [-0.85843825, -0.85843825, -0.85843825, ..., -0.85843825,
          -0.85843825, -0.85843825],
         ...,
         [-0.85843825, -0.85843825, -0.85843825, ..., -0.85843825,
          -0.85843825, -0.85843825],
         [-0.85843825, -0.85843825, -0.85843825, ..., -0.85843825,
          -0.85843825, -0.85843825],
         [-0.85843825, -0.85843825, -0.85843825, ..., -0.85843825,
          -0.85843825, -0.85843825]],

        [[-0.85843825, -0.85843825, -0.85843825, ..., -0.85843825,
          -0.85843825, -0.85843825],
         [-0.85843825, -0.85843825, -0.85843825, ..., -0.85843825,
          -0.85843825, -0.85843825],
         [-0.85843825, -0.85843825, -0.85843825, ..., -0.85843825,
          -0.85843825, -0.85843825],
         ...,
         [-0.85843825, -0.85843825, -0.85843825, ..., -0.85843825,
          -0.85843825, -0.85843825],
         [-0.85843825, -0.85843825, -0.85843825, ..., -0.85843825,
          -0.85843825, -0.85843825],
         [-0.85843825, -0.85843825, -0.85843825, ..., -0.85843825,
          -0.85843825, -0.85843825]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [14], 'to': [15]}
torch node:
{'name': 'cos', 'output': array([[[[-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815],
         [-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815],
         [-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815],
         ...,
         [-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815],
         [-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815],
         [-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815]],

        [[-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815],
         [-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815],
         [-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815],
         ...,
         [-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815],
         [-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815],
         [-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815]],

        [[-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815],
         [-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815],
         [-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815],
         ...,
         [-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815],
         [-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815],
         [-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815]],

        ...,

        [[-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815],
         [-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815],
         [-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815],
         ...,
         [-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815],
         [-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815],
         [-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815]],

        [[-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815],
         [-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815],
         [-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815],
         ...,
         [-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815],
         [-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815],
         [-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815]],

        [[-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815],
         [-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815],
         [-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815],
         ...,
         [-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815],
         [-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815],
         [-0.92779815, -0.92779815, -0.92779815, ..., -0.92779815,
          -0.92779815, -0.92779815]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [14], 'to': [15]}

generate models:193

analyse output arrays in iter:240

pre layer res:
9:exp
{'name': 'exp', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [7], 'to': [21]}
tf node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [9], 'to': [8]}
ms node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [9], 'to': [8]}
torch node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [9], 'to': [8]}

generate models:218

analyse the exceptions in iter:253
torch exception:
{'id': 23, 'name': 'flatten', 'frame_work': 'torch', 'input_datas': [tensor([38768.])]}
Dimension out of range (expected to be in range of [-1, 0], but got 1)

generate models:230

analyse the exceptions in iter:259
torch exception:
{'id': 25, 'name': 'flatten', 'frame_work': 'torch', 'input_datas': [tensor([16842.1270], grad_fn=<MeanBackward1>)]}
Dimension out of range (expected to be in range of [-1, 0], but got 1)

generate models:236

analyse output arrays in iter:305

pre layer res:
13:empty_seq_operator
{'name': 'empty_seq_operator', 'output': array([[[[19019.336, 19019.336, 19019.336, ..., 19019.336, 19019.336,
          19019.336],
         [19019.336, 19019.336, 19019.336, ..., 19019.336, 19019.336,
          19019.336],
         [19019.336, 19019.336, 19019.336, ..., 19019.336, 19019.336,
          19019.336],
         ...,
         [16384.   , 16384.   , 16384.   , ..., 16384.   , 16384.   ,
          16384.   ],
         [19017.055, 19017.055, 19017.055, ..., 19017.055, 19017.055,
          19017.055],
         [19019.336, 19019.336, 19019.336, ..., 19019.336, 19019.336,
          19019.336]],

        [[19019.336, 19019.336, 19019.336, ..., 19019.336, 19019.336,
          19019.336],
         [19019.336, 19019.336, 19019.336, ..., 19019.336, 19019.336,
          19019.336],
         [19019.336, 19019.336, 19019.336, ..., 19019.336, 19019.336,
          19019.336],
         ...,
         [16384.   , 16384.   , 16384.   , ..., 16384.   , 16384.   ,
          16384.   ],
         [19017.055, 19017.055, 19017.055, ..., 19017.055, 19017.055,
          19017.055],
         [19019.336, 19019.336, 19019.336, ..., 19019.336, 19019.336,
          19019.336]],

        [[19019.336, 19019.336, 19019.336, ..., 19019.336, 19019.336,
          19019.336],
         [19019.336, 19019.336, 19019.336, ..., 19019.336, 19019.336,
          19019.336],
         [19019.336, 19019.336, 19019.336, ..., 19019.336, 19019.336,
          19019.336],
         ...,
         [16384.   , 16384.   , 16384.   , ..., 16384.   , 16384.   ,
          16384.   ],
         [19017.055, 19017.055, 19017.055, ..., 19017.055, 19017.055,
          19017.055],
         [19019.336, 19019.336, 19019.336, ..., 19019.336, 19019.336,
          19019.336]],

        ...,

        [[19019.336, 19019.336, 19019.336, ..., 19019.336, 19019.336,
          19019.336],
         [19019.336, 19019.336, 19019.336, ..., 19019.336, 19019.336,
          19019.336],
         [19019.336, 19019.336, 19019.336, ..., 19019.336, 19019.336,
          19019.336],
         ...,
         [16384.   , 16384.   , 16384.   , ..., 16384.   , 16384.   ,
          16384.   ],
         [19017.055, 19017.055, 19017.055, ..., 19017.055, 19017.055,
          19017.055],
         [19019.336, 19019.336, 19019.336, ..., 19019.336, 19019.336,
          19019.336]],

        [[19019.336, 19019.336, 19019.336, ..., 19019.336, 19019.336,
          19019.336],
         [19019.336, 19019.336, 19019.336, ..., 19019.336, 19019.336,
          19019.336],
         [19019.336, 19019.336, 19019.336, ..., 19019.336, 19019.336,
          19019.336],
         ...,
         [16384.   , 16384.   , 16384.   , ..., 16384.   , 16384.   ,
          16384.   ],
         [19017.055, 19017.055, 19017.055, ..., 19017.055, 19017.055,
          19017.055],
         [19019.336, 19019.336, 19019.336, ..., 19019.336, 19019.336,
          19019.336]],

        [[19019.336, 19019.336, 19019.336, ..., 19019.336, 19019.336,
          19019.336],
         [19019.336, 19019.336, 19019.336, ..., 19019.336, 19019.336,
          19019.336],
         [19019.336, 19019.336, 19019.336, ..., 19019.336, 19019.336,
          19019.336],
         ...,
         [16384.   , 16384.   , 16384.   , ..., 16384.   , 16384.   ,
          16384.   ],
         [19017.055, 19017.055, 19017.055, ..., 19017.055, 19017.055,
          19017.055],
         [19019.336, 19019.336, 19019.336, ..., 19019.336, 19019.336,
          19019.336]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [12], 'to': [19]}
tf node:
{'name': 'cos', 'output': array([[[[ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373],
         [ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373],
         [ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373],
         ...,
         [-0.8285342 , -0.8285342 , -0.8285342 , ..., -0.8285342 ,
          -0.8285342 , -0.8285342 ],
         [-0.54504347, -0.54504347, -0.54504347, ..., -0.54504347,
          -0.54504347, -0.54504347],
         [ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373]],

        [[ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373],
         [ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373],
         [ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373],
         ...,
         [-0.8285342 , -0.8285342 , -0.8285342 , ..., -0.8285342 ,
          -0.8285342 , -0.8285342 ],
         [-0.54504347, -0.54504347, -0.54504347, ..., -0.54504347,
          -0.54504347, -0.54504347],
         [ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373]],

        [[ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373],
         [ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373],
         [ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373],
         ...,
         [-0.8285342 , -0.8285342 , -0.8285342 , ..., -0.8285342 ,
          -0.8285342 , -0.8285342 ],
         [-0.54504347, -0.54504347, -0.54504347, ..., -0.54504347,
          -0.54504347, -0.54504347],
         [ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373]],

        ...,

        [[ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373],
         [ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373],
         [ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373],
         ...,
         [-0.8285342 , -0.8285342 , -0.8285342 , ..., -0.8285342 ,
          -0.8285342 , -0.8285342 ],
         [-0.54504347, -0.54504347, -0.54504347, ..., -0.54504347,
          -0.54504347, -0.54504347],
         [ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373]],

        [[ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373],
         [ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373],
         [ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373],
         ...,
         [-0.8285342 , -0.8285342 , -0.8285342 , ..., -0.8285342 ,
          -0.8285342 , -0.8285342 ],
         [-0.54504347, -0.54504347, -0.54504347, ..., -0.54504347,
          -0.54504347, -0.54504347],
         [ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373]],

        [[ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373],
         [ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373],
         [ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373],
         ...,
         [-0.8285342 , -0.8285342 , -0.8285342 , ..., -0.8285342 ,
          -0.8285342 , -0.8285342 ],
         [-0.54504347, -0.54504347, -0.54504347, ..., -0.54504347,
          -0.54504347, -0.54504347],
         [ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [13], 'to': [14]}
ms node:
{'name': 'cos', 'output': array([[[[ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373],
         [ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373],
         [ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373],
         ...,
         [-0.8285342 , -0.8285342 , -0.8285342 , ..., -0.8285342 ,
          -0.8285342 , -0.8285342 ],
         [-0.5450435 , -0.5450435 , -0.5450435 , ..., -0.5450435 ,
          -0.5450435 , -0.5450435 ],
         [ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373]],

        [[ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373],
         [ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373],
         [ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373],
         ...,
         [-0.8285342 , -0.8285342 , -0.8285342 , ..., -0.8285342 ,
          -0.8285342 , -0.8285342 ],
         [-0.5450435 , -0.5450435 , -0.5450435 , ..., -0.5450435 ,
          -0.5450435 , -0.5450435 ],
         [ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373]],

        [[ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373],
         [ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373],
         [ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373],
         ...,
         [-0.8285342 , -0.8285342 , -0.8285342 , ..., -0.8285342 ,
          -0.8285342 , -0.8285342 ],
         [-0.5450435 , -0.5450435 , -0.5450435 , ..., -0.5450435 ,
          -0.5450435 , -0.5450435 ],
         [ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373]],

        ...,

        [[ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373],
         [ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373],
         [ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373],
         ...,
         [-0.8285342 , -0.8285342 , -0.8285342 , ..., -0.8285342 ,
          -0.8285342 , -0.8285342 ],
         [-0.5450435 , -0.5450435 , -0.5450435 , ..., -0.5450435 ,
          -0.5450435 , -0.5450435 ],
         [ 0.99103373,  0.99103373,  0.99103373, ...,  0.99103373,
           0.99103373,  0.99103373]],

        [[ 0.9822489 ,  0.9822489 ,  0.9822489 , ...,  0.9822489 ,
           0.9822489 ,  0.9822489 ],
         [ 0.9822489 ,  0.9822489 ,  0.9822489 , ...,  0.9822489 ,
           0.9822489 ,  0.9822489 ],
         [ 0.9822489 ,  0.9822489 ,  0.9822489 , ...,  0.9822489 ,
           0.9822489 ,  0.9822489 ],
         ...,
         [-0.8285342 , -0.8285342 , -0.8285342 , ..., -0.8285342 ,
          -0.8285342 , -0.8285342 ],
         [-0.5000934 , -0.5000934 , -0.5000934 , ..., -0.5000934 ,
          -0.5000934 , -0.5000934 ],
         [ 0.9822489 ,  0.9822489 ,  0.9822489 , ...,  0.9822489 ,
           0.9822489 ,  0.9822489 ]],

        [[ 0.9822489 ,  0.9822489 ,  0.9822489 , ...,  0.9822489 ,
           0.9822489 ,  0.9822489 ],
         [ 0.9822489 ,  0.9822489 ,  0.9822489 , ...,  0.9822489 ,
           0.9822489 ,  0.9822489 ],
         [ 0.9822489 ,  0.9822489 ,  0.9822489 , ...,  0.9822489 ,
           0.9822489 ,  0.9822489 ],
         ...,
         [-0.8285342 , -0.8285342 , -0.8285342 , ..., -0.8285342 ,
          -0.8285342 , -0.8285342 ],
         [-0.5000934 , -0.5000934 , -0.5000934 , ..., -0.5000934 ,
          -0.5000934 , -0.5000934 ],
         [ 0.9822489 ,  0.9822489 ,  0.9822489 , ...,  0.9822489 ,
           0.9822489 ,  0.9822489 ]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [13], 'to': [14]}
torch node:
{'name': 'cos', 'output': array([[[[ 0.9822489,  0.9822489,  0.9822489, ...,  0.9822489,
           0.9822489,  0.9822489],
         [ 0.9822489,  0.9822489,  0.9822489, ...,  0.9822489,
           0.9822489,  0.9822489],
         [ 0.9822489,  0.9822489,  0.9822489, ...,  0.9822489,
           0.9822489,  0.9822489],
         ...,
         [-0.8285342, -0.8285342, -0.8285342, ..., -0.8285342,
          -0.8285342, -0.8285342],
         [-0.5000934, -0.5000934, -0.5000934, ..., -0.5000934,
          -0.5000934, -0.5000934],
         [ 0.9822489,  0.9822489,  0.9822489, ...,  0.9822489,
           0.9822489,  0.9822489]],

        [[ 0.9822489,  0.9822489,  0.9822489, ...,  0.9822489,
           0.9822489,  0.9822489],
         [ 0.9822489,  0.9822489,  0.9822489, ...,  0.9822489,
           0.9822489,  0.9822489],
         [ 0.9822489,  0.9822489,  0.9822489, ...,  0.9822489,
           0.9822489,  0.9822489],
         ...,
         [-0.8285342, -0.8285342, -0.8285342, ..., -0.8285342,
          -0.8285342, -0.8285342],
         [-0.5000934, -0.5000934, -0.5000934, ..., -0.5000934,
          -0.5000934, -0.5000934],
         [ 0.9822489,  0.9822489,  0.9822489, ...,  0.9822489,
           0.9822489,  0.9822489]],

        [[ 0.9822489,  0.9822489,  0.9822489, ...,  0.9822489,
           0.9822489,  0.9822489],
         [ 0.9822489,  0.9822489,  0.9822489, ...,  0.9822489,
           0.9822489,  0.9822489],
         [ 0.9822489,  0.9822489,  0.9822489, ...,  0.9822489,
           0.9822489,  0.9822489],
         ...,
         [-0.8285342, -0.8285342, -0.8285342, ..., -0.8285342,
          -0.8285342, -0.8285342],
         [-0.5000934, -0.5000934, -0.5000934, ..., -0.5000934,
          -0.5000934, -0.5000934],
         [ 0.9822489,  0.9822489,  0.9822489, ...,  0.9822489,
           0.9822489,  0.9822489]],

        ...,

        [[ 0.9822489,  0.9822489,  0.9822489, ...,  0.9822489,
           0.9822489,  0.9822489],
         [ 0.9822489,  0.9822489,  0.9822489, ...,  0.9822489,
           0.9822489,  0.9822489],
         [ 0.9822489,  0.9822489,  0.9822489, ...,  0.9822489,
           0.9822489,  0.9822489],
         ...,
         [-0.8285342, -0.8285342, -0.8285342, ..., -0.8285342,
          -0.8285342, -0.8285342],
         [-0.5000934, -0.5000934, -0.5000934, ..., -0.5000934,
          -0.5000934, -0.5000934],
         [ 0.9822489,  0.9822489,  0.9822489, ...,  0.9822489,
           0.9822489,  0.9822489]],

        [[ 0.9822489,  0.9822489,  0.9822489, ...,  0.9822489,
           0.9822489,  0.9822489],
         [ 0.9822489,  0.9822489,  0.9822489, ...,  0.9822489,
           0.9822489,  0.9822489],
         [ 0.9822489,  0.9822489,  0.9822489, ...,  0.9822489,
           0.9822489,  0.9822489],
         ...,
         [-0.8285342, -0.8285342, -0.8285342, ..., -0.8285342,
          -0.8285342, -0.8285342],
         [-0.5000934, -0.5000934, -0.5000934, ..., -0.5000934,
          -0.5000934, -0.5000934],
         [ 0.9822489,  0.9822489,  0.9822489, ...,  0.9822489,
           0.9822489,  0.9822489]],

        [[ 0.9822489,  0.9822489,  0.9822489, ...,  0.9822489,
           0.9822489,  0.9822489],
         [ 0.9822489,  0.9822489,  0.9822489, ...,  0.9822489,
           0.9822489,  0.9822489],
         [ 0.9822489,  0.9822489,  0.9822489, ...,  0.9822489,
           0.9822489,  0.9822489],
         ...,
         [-0.8285342, -0.8285342, -0.8285342, ..., -0.8285342,
          -0.8285342, -0.8285342],
         [-0.5000934, -0.5000934, -0.5000934, ..., -0.5000934,
          -0.5000934, -0.5000934],
         [ 0.9822489,  0.9822489,  0.9822489, ...,  0.9822489,
           0.9822489,  0.9822489]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [13], 'to': [14]}

generate models:280

analyse output arrays in iter:312

pre layer res:
6:conv2d
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [9], 'to': [12]}
tf node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [6], 'to': [13]}
ms node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [6], 'to': [13]}
torch node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [6], 'to': [13]}

pre layer res:
15:add
{'name': 'add', 'output': array([[[[65., 65., 65., ..., 65., 65., 65.],
         [65., 65., 65., ..., 65., 65., 65.],
         [65., 65., 65., ..., 65., 65., 65.],
         ...,
         [65., 65., 65., ..., 65., 65., 65.],
         [65., 65., 65., ..., 65., 65., 65.],
         [65., 65., 65., ..., 65., 65., 65.]],

        [[65., 65., 65., ..., 65., 65., 65.],
         [65., 65., 65., ..., 65., 65., 65.],
         [65., 65., 65., ..., 65., 65., 65.],
         ...,
         [65., 65., 65., ..., 65., 65., 65.],
         [65., 65., 65., ..., 65., 65., 65.],
         [65., 65., 65., ..., 65., 65., 65.]],

        [[65., 65., 65., ..., 65., 65., 65.],
         [65., 65., 65., ..., 65., 65., 65.],
         [65., 65., 65., ..., 65., 65., 65.],
         ...,
         [65., 65., 65., ..., 65., 65., 65.],
         [65., 65., 65., ..., 65., 65., 65.],
         [65., 65., 65., ..., 65., 65., 65.]],

        ...,

        [[65., 65., 65., ..., 65., 65., 65.],
         [65., 65., 65., ..., 65., 65., 65.],
         [65., 65., 65., ..., 65., 65., 65.],
         ...,
         [65., 65., 65., ..., 65., 65., 65.],
         [65., 65., 65., ..., 65., 65., 65.],
         [65., 65., 65., ..., 65., 65., 65.]],

        [[65., 65., 65., ..., 65., 65., 65.],
         [65., 65., 65., ..., 65., 65., 65.],
         [65., 65., 65., ..., 65., 65., 65.],
         ...,
         [65., 65., 65., ..., 65., 65., 65.],
         [65., 65., 65., ..., 65., 65., 65.],
         [65., 65., 65., ..., 65., 65., 65.]],

        [[65., 65., 65., ..., 65., 65., 65.],
         [65., 65., 65., ..., 65., 65., 65.],
         [65., 65., 65., ..., 65., 65., 65.],
         ...,
         [65., 65., 65., ..., 65., 65., 65.],
         [65., 65., 65., ..., 65., 65., 65.],
         [65., 65., 65., ..., 65., 65., 65.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [5, 1], 'to': [17]}
tf node:
{'name': 'log', 'output': array([[[[4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         ...,
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875]],

        [[4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         ...,
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875]],

        [[4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         ...,
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875]],

        ...,

        [[4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         ...,
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875]],

        [[4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         ...,
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875]],

        [[4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         ...,
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [15], 'to': [16]}
ms node:
{'name': 'log', 'output': array([[[[4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386],
         [4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386],
         [4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386],
         ...,
         [4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386],
         [4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386],
         [4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386]],

        [[4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386],
         [4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386],
         [4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386],
         ...,
         [4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386],
         [4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386],
         [4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386]],

        [[4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386],
         [4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386],
         [4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386],
         ...,
         [4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386],
         [4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386],
         [4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386]],

        ...,

        [[4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386],
         [4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386],
         [4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386],
         ...,
         [4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386],
         [4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386],
         [4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386]],

        [[4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386],
         [4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386],
         [4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386],
         ...,
         [4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386],
         [4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386],
         [4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386]],

        [[4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386],
         [4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386],
         [4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386],
         ...,
         [4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386],
         [4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386],
         [4.174386, 4.174386, 4.174386, ..., 4.174386, 4.174386,
          4.174386]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [15], 'to': [16]}
torch node:
{'name': 'log', 'output': array([[[[4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         ...,
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875]],

        [[4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         ...,
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875]],

        [[4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         ...,
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875]],

        ...,

        [[4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         ...,
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875]],

        [[4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         ...,
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875]],

        [[4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         ...,
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875],
         [4.1743875, 4.1743875, 4.1743875, ..., 4.1743875, 4.1743875,
          4.1743875]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [15], 'to': [16]}

generate models:287

analyse output arrays in iter:326

pre layer res:
17:exp
{'name': 'exp', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [2], 'to': [4]}
tf node:
{'name': 'sin', 'output': array([[[[0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         ...,
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471]],

        [[0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         ...,
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471]],

        [[0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         ...,
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471]],

        ...,

        [[0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         ...,
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471]],

        [[0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         ...,
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471]],

        [[0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         ...,
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471],
         [0.841471, 0.841471, 0.841471, ..., 0.841471, 0.841471,
          0.841471]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [17], 'to': [7]}
ms node:
{'name': 'sin', 'output': array([[[[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        ...,

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [17], 'to': [7]}
torch node:
{'name': 'sin', 'output': array([[[[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        ...,

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [17], 'to': [7]}

generate models:300

analyse output arrays in iter:351

pre layer res:
17:reshape
{'name': 'reshape', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [21], 'to': [19]}
tf node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [17], 'to': [14]}
ms node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [17], 'to': [14]}
torch node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [17], 'to': [14]}

generate models:322

analyse the exceptions in iter:376

generate models:343

analyse output arrays in iter:381

pre layer res:
10:add
{'name': 'add', 'output': array([[[[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [3218847.8, 3218847.8,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [3218847.8, 3218847.8,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [3218847.8, 3218847.8,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        ...,

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [3218847.8, 3218847.8,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [3218847.8, 3218847.8,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [3218847.8, 3218847.8,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [8, 8], 'to': [12]}
tf node:
{'name': 'cos', 'output': array([[[[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.98172635, -0.98172635,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.98172635, -0.98172635,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.98172635, -0.98172635,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        ...,

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.98172635, -0.98172635,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.98172635, -0.98172635,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.98172635, -0.98172635,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [10], 'to': [11]}
ms node:
{'name': 'cos', 'output': array([[[[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.49015024, -0.49015024,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.49015024, -0.49015024,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.49015024, -0.49015024,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        ...,

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.49015024, -0.49015024,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.49015024, -0.49015024,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.49015024, -0.49015024,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]]]], dtype=float32), 'output_shape': (1, 256, 28, 28), 'from': [10], 'to': [11]}
torch node:
{'name': 'cos', 'output': array([[[[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.98172635, -0.98172635,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.98172635, -0.98172635,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.98172635, -0.98172635,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        ...,

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.98172635, -0.98172635,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.98172635, -0.98172635,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [-0.98172635, -0.98172635,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 28, 28]), 'from': [10], 'to': [11]}

generate models:347

analyse output arrays in iter:394

pre layer res:
14:add
{'name': 'add', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        ...,

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [2, 17], 'to': [9]}
tf node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         ...,
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]],

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         ...,
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]],

        ...,

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         ...,
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]],

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         ...,
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]],

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         ...,
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [14], 'to': [3]}
ms node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         ...,
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]],

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         ...,
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]],

        ...,

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         ...,
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]],

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         ...,
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]],

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         ...,
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [14], 'to': [3]}
torch node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         ...,
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]],

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         ...,
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]],

        ...,

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         ...,
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]],

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         ...,
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]],

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         ...,
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [14], 'to': [3]}

generate models:359

analyse output arrays in iter:399

pre layer res:
1:conv2d
{'name': 'conv2d', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [20], 'to': [21]}
tf node:
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [1], 'to': [2]}
ms node:
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [1], 'to': [2]}
torch node:
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [1], 'to': [2]}

generate models:363

analyse output arrays in iter:400

pre layer res:
18:log
{'name': 'log', 'output': array([[[[     -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf],
         [     -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf],
         [     -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf],
         [     -inf,      -inf,      -inf,      -inf,      -inf,
               -inf, 3.637586 , 4.727388 , 5.332719 , 5.5333896,
          5.5412636, 5.5333896, 4.962845 , 3.637586 ,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf],
         [     -inf,      -inf,      -inf,      -inf,      -inf,
          3.637586 , 5.389072 , 5.529429 , 5.529429 , 5.529429 ,
          5.5333896, 5.529429 , 5.529429 , 5.4553213, 4.983607 ,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf],
         [     -inf,      -inf,      -inf,      -inf,      -inf,
          5.2522736, 5.529429 , 5.476464 , 5.192957 , 4.0073333,
          5.278115 , 5.365976 , 5.529429 , 5.529429 , 5.529429 ,
          4.0430512, 1.7917595,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf],
         [     -inf,      -inf,      -inf,      -inf,      -inf,
          4.6151204, 5.170484 , 4.1743875,      -inf,      -inf,
               -inf, 3.3322046, 5.293305 , 5.529429 , 5.529429 ,
          5.5333896, 3.7612002,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf],
         [     -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf, 3.218876 , 5.32301  , 5.529429 ,
          5.5333896, 5.117994 ,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf],
         [     -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf, 3.3672957, 5.5333896,
          5.5412636, 5.5333896, 5.278115 ,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf],
         [     -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf, 1.0986123, 4.6634393,
          5.5333896, 5.529429 , 5.5053315, 4.317488 ,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf],
         [     -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
          5.4026775, 5.529429 , 5.529429 , 4.4308167,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf],
         [     -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
          4.6151204, 5.5174527, 5.529429 , 4.4308167,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf],
         [     -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
          4.3694477,      -inf,      -inf,      -inf,      -inf,
               -inf, 5.4161005, 5.529429 , 4.4308167,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf],
         [     -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf, 2.5649493, 5.2522736,
          5.5412636, 5.123964 ,      -inf,      -inf,      -inf,
               -inf, 5.09375  , 5.5333896, 5.4161005,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf],
         [     -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf, 5.0369525, 5.529429 ,
          5.5333896, 5.4930615, 3.912023 ,      -inf,      -inf,
               -inf, 4.4426513, 5.529429 , 5.4071717,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf],
         [     -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf, 5.1298985, 5.529429 ,
          5.5333896, 5.529429 , 4.0073333,      -inf,      -inf,
               -inf, 4.4426513, 5.529429 , 5.4071717,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf],
         [     -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf, 4.276666 , 5.476464 ,
          5.5333896, 5.529429 , 5.2311087, 4.0253515,      -inf,
               -inf, 5.1817837, 5.529429 , 5.4071717,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf],
         [     -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf, 4.9416423,
          5.5333896, 5.529429 , 5.529429 , 5.17615  , 4.1431346,
               -inf, 5.4161005, 5.529429 , 4.9767337,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf],
         [     -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf, 4.94876  ,
          5.5412636, 5.5333896, 5.5333896, 5.5333896, 5.5333896,
          5.170484 , 5.5333896, 5.5333896, 4.4308167,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf],
         [     -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf, 2.7080503,
          5.5333896, 5.529429 , 5.529429 , 5.529429 , 5.529429 ,
          5.5333896, 5.529429 , 5.529429 , 4.4308167,      -inf,
               -inf, 3.3672957, 4.189655 , 4.0430512, 4.4426513,
               -inf,      -inf,      -inf],
         [     -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
          5.278115 , 5.5053315, 5.529429 , 5.529429 , 5.529429 ,
          5.5333896, 5.529429 , 5.529429 , 5.370638 , 5.2832036,
          5.288267 , 5.370638 , 5.476464 , 5.4553213, 5.3936276,
               -inf,      -inf,      -inf],
         [     -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf, 4.8675346, 5.529429 , 5.529429 , 5.529429 ,
          5.4161005, 5.5174527, 5.529429 , 5.529429 , 5.529429 ,
          5.5333896, 5.529429 , 5.5012584, 5.3375382, 3.610918 ,
               -inf,      -inf,      -inf],
         [     -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf, 3.637586 , 4.7184987, 4.7184987, 4.7184987,
               -inf, 4.6051702, 4.7184987, 4.7184987, 4.7184987,
          4.7184987, 4.7184987, 4.465908 ,      -inf,      -inf,
               -inf,      -inf,      -inf],
         [     -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf],
         [     -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf],
         [     -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf],
         [     -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf],
         [     -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf,      -inf,      -inf,
               -inf,      -inf,      -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 1, 28, 28]), 'from': [0], 'to': [21]}
tf node:
{'name': 'cos', 'output': array([[[[        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan, -0.87949634,  0.01499836,
           0.5813036 ,  0.7318281 ,  0.7371714 ,  0.7318281 ,
           0.24784562, -0.87949634,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan, -0.87949634,  0.62621033,  0.7291233 ,
           0.7291233 ,  0.7291233 ,  0.7318281 ,  0.7291233 ,
           0.7291233 ,  0.67645043,  0.26790494,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,  0.51403695,  0.7291233 ,  0.6918693 ,
           0.46228287, -0.6480763 ,  0.5360287 ,  0.60803795,
           0.7291233 ,  0.7291233 ,  0.7291233 , -0.62046677,
          -0.21916947,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan, -0.09711526,  0.4422404 , -0.5124209 ,
                  nan,         nan,         nan, -0.9818885 ,
           0.54878986,  0.7291233 ,  0.7291233 ,  0.7318281 ,
          -0.81410646,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
          -0.9970151 ,  0.57337636,  0.7291233 ,  0.7318281 ,
           0.39457458,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan, -0.97463703,  0.7318281 ,  0.7371714 ,
           0.7318281 ,  0.5360287 ,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,  0.4548324 , -0.04893016,  0.7318281 ,
           0.7291233 ,  0.7124213 , -0.38471663,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,  0.6367597 ,
           0.7291233 ,  0.7291233 , -0.27786642,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan, -0.09711526,
           0.72087485,  0.7291233 , -0.27786642,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan, -0.33625856,         nan,
                  nan,         nan,         nan,         nan,
           0.647052  ,  0.7291233 , -0.27786642,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
          -0.8382974 ,  0.51403695,  0.7371714 ,  0.40005314,
                  nan,         nan,         nan,         nan,
           0.37218404,  0.7318281 ,  0.647052  ,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
           0.3188951 ,  0.7291233 ,  0.7318281 ,  0.7037574 ,
          -0.717611  ,         nan,         nan,         nan,
          -0.26647866,  0.7291233 ,  0.64021856,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
           0.40548518,  0.7291233 ,  0.7318281 ,  0.7291233 ,
          -0.6480763 ,         nan,         nan,         nan,
          -0.26647866,  0.7291233 ,  0.64021856,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
          -0.4220658 ,  0.6918693 ,  0.7318281 ,  0.7291233 ,
           0.49576864, -0.63424957,         nan,         nan,
           0.45234653,  0.7291233 ,  0.64021856,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,  0.22725043,  0.7318281 ,  0.7291233 ,
           0.7291233 ,  0.4473149 , -0.5390042 ,         nan,
           0.647052  ,  0.7291233 ,  0.26127678,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,  0.23417614,  0.7371714 ,  0.7318281 ,
           0.7318281 ,  0.7318281 ,  0.7318281 ,  0.4422404 ,
           0.7318281 ,  0.7318281 , -0.27786642,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan, -0.90748334,  0.7318281 ,  0.7291233 ,
           0.7291233 ,  0.7291233 ,  0.7291233 ,  0.7318281 ,
           0.7291233 ,  0.7291233 , -0.27786642,         nan,
                  nan, -0.97463703, -0.49925104, -0.62046677,
          -0.26647866,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,  0.5360287 ,  0.7124213 ,
           0.7291233 ,  0.7291233 ,  0.7291233 ,  0.7318281 ,
           0.7291233 ,  0.7291233 ,  0.61173254,  0.5403177 ,
           0.5445715 ,  0.61173254,  0.6918693 ,  0.67645043,
           0.6297557 ,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,  0.15452401,
           0.7291233 ,  0.7291233 ,  0.7291233 ,  0.647052  ,
           0.72087485,  0.7291233 ,  0.7291233 ,  0.7291233 ,
           0.7318281 ,  0.7291233 ,  0.70955706,  0.5852183 ,
          -0.8918736 ,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan, -0.87949634,
           0.00610969,  0.00610969,  0.00610969,         nan,
          -0.10701342,  0.00610969,  0.00610969,  0.00610969,
           0.00610969,  0.00610969, -0.24399276,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan]]]],
      dtype=float32), 'output_shape': TensorShape([1, 1, 28, 28]), 'from': [18], 'to': [1]}
ms node:
{'name': 'cos', 'output': array([[[[        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan, -0.87949705,  0.01499741,
           0.5813017 ,  0.73182714,  0.73717046,  0.73182714,
           0.2478461 , -0.87949705,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan, -0.87949705,  0.6262077 ,  0.7291223 ,
           0.7291223 ,  0.7291223 ,  0.73182714,  0.7291223 ,
           0.7291223 ,  0.6764497 ,  0.26790175,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,  0.514037  ,  0.7291223 ,  0.6918693 ,
           0.4622854 , -0.64807695,  0.53602666,  0.6080353 ,
           0.7291223 ,  0.7291223 ,  0.7291223 , -0.6204675 ,
          -0.21916726,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan, -0.09711763,  0.44224298, -0.5124221 ,
                  nan,         nan,         nan, -0.98188865,
           0.5487879 ,  0.7291223 ,  0.7291223 ,  0.73182714,
          -0.81410754,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
          -0.9970153 ,  0.5733744 ,  0.7291223 ,  0.73182714,
           0.39457723,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan, -0.9746372 ,  0.73182714,  0.73717046,
           0.73182714,  0.53602666,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,  0.45483443, -0.04893349,  0.73182714,
           0.7291223 ,  0.7124213 , -0.38471794,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,  0.636759  ,
           0.7291223 ,  0.7291223 , -0.27786824,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan, -0.09711763,
           0.72087383,  0.7291223 , -0.27786824,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan, -0.33625764,         nan,
                  nan,         nan,         nan,         nan,
           0.6470512 ,  0.7291223 , -0.27786824,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
          -0.8382961 ,  0.514037  ,  0.73717046,  0.40005141,
                  nan,         nan,         nan,         nan,
           0.37218672,  0.73182714,  0.6470512 ,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
           0.31889376,  0.7291223 ,  0.73182714,  0.7037574 ,
          -0.7176126 ,         nan,         nan,         nan,
          -0.26648048,  0.7291223 ,  0.64021784,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
           0.40548345,  0.7291223 ,  0.73182714,  0.7291223 ,
          -0.64807695,         nan,         nan,         nan,
          -0.26648048,  0.7291223 ,  0.64021784,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
          -0.4220688 ,  0.6918693 ,  0.73182714,  0.7291223 ,
           0.49576864, -0.6342503 ,         nan,         nan,
           0.4523491 ,  0.7291223 ,  0.64021784,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,  0.22725135,  0.73182714,  0.7291223 ,
           0.7291223 ,  0.44731745, -0.5390054 ,         nan,
           0.6470512 ,  0.7291223 ,  0.26127404,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,  0.23417659,  0.73717046,  0.73182714,
           0.73182714,  0.73182714,  0.73182714,  0.44224298,
           0.73182714,  0.73182714, -0.27786824,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan, -0.90748334,  0.73182714,  0.7291223 ,
           0.7291223 ,  0.7291223 ,  0.7291223 ,  0.73182714,
           0.7291223 ,  0.7291223 , -0.27786824,         nan,
                  nan, -0.9746372 , -0.49924815, -0.6204675 ,
          -0.26648048,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,  0.53602666,  0.7124213 ,
           0.7291223 ,  0.7291223 ,  0.7291223 ,  0.73182714,
           0.7291223 ,  0.7291223 ,  0.6117299 ,  0.5403161 ,
           0.54456955,  0.6117299 ,  0.6918693 ,  0.6764497 ,
           0.62975496,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,  0.1545226 ,
           0.7291223 ,  0.7291223 ,  0.7291223 ,  0.6470512 ,
           0.72087383,  0.7291223 ,  0.7291223 ,  0.7291223 ,
           0.73182714,  0.7291223 ,  0.70955706,  0.5852164 ,
          -0.8918744 ,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan, -0.87949705,
           0.00610873,  0.00610873,  0.00610873,         nan,
          -0.10701579,  0.00610873,  0.00610873,  0.00610873,
           0.00610873,  0.00610873, -0.24399461,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan]]]],
      dtype=float32), 'output_shape': (1, 1, 28, 28), 'from': [18], 'to': [1]}
torch node:
{'name': 'cos', 'output': array([[[[        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan, -0.87949634,  0.01499836,
           0.5813036 ,  0.7318281 ,  0.7371714 ,  0.7318281 ,
           0.24784563, -0.87949634,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan, -0.87949634,  0.62621033,  0.72912323,
           0.72912323,  0.72912323,  0.7318281 ,  0.72912323,
           0.72912323,  0.67645043,  0.26790497,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,  0.514037  ,  0.72912323,  0.69186896,
           0.46228287, -0.64807624,  0.5360287 ,  0.60803795,
           0.72912323,  0.72912323,  0.72912323, -0.62046677,
          -0.21916947,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan, -0.09711526,  0.4422404 , -0.51242083,
                  nan,         nan,         nan, -0.9818885 ,
           0.54878986,  0.72912323,  0.72912323,  0.7318281 ,
          -0.8141064 ,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
          -0.9970151 ,  0.57337636,  0.72912323,  0.7318281 ,
           0.3945746 ,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan, -0.97463703,  0.7318281 ,  0.7371714 ,
           0.7318281 ,  0.5360287 ,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,  0.4548324 , -0.04893016,  0.7318281 ,
           0.72912323,  0.7124213 , -0.38471663,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,  0.6367597 ,
           0.72912323,  0.72912323, -0.2778664 ,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan, -0.09711526,
           0.7208748 ,  0.72912323, -0.2778664 ,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan, -0.33625856,         nan,
                  nan,         nan,         nan,         nan,
           0.647052  ,  0.72912323, -0.2778664 ,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
          -0.8382974 ,  0.514037  ,  0.7371714 ,  0.40005317,
                  nan,         nan,         nan,         nan,
           0.37218407,  0.7318281 ,  0.647052  ,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
           0.31889513,  0.72912323,  0.7318281 ,  0.7037574 ,
          -0.71761096,         nan,         nan,         nan,
          -0.26647863,  0.72912323,  0.64021856,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
           0.4054852 ,  0.72912323,  0.7318281 ,  0.72912323,
          -0.64807624,         nan,         nan,         nan,
          -0.26647863,  0.72912323,  0.64021856,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
          -0.4220658 ,  0.69186896,  0.7318281 ,  0.72912323,
           0.49576867, -0.63424957,         nan,         nan,
           0.45234653,  0.72912323,  0.64021856,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,  0.22725043,  0.7318281 ,  0.72912323,
           0.72912323,  0.4473149 , -0.53900415,         nan,
           0.647052  ,  0.72912323,  0.26127678,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,  0.23417613,  0.7371714 ,  0.7318281 ,
           0.7318281 ,  0.7318281 ,  0.7318281 ,  0.4422404 ,
           0.7318281 ,  0.7318281 , -0.2778664 ,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan, -0.90748334,  0.7318281 ,  0.72912323,
           0.72912323,  0.72912323,  0.72912323,  0.7318281 ,
           0.72912323,  0.72912323, -0.2778664 ,         nan,
                  nan, -0.97463703, -0.49925104, -0.62046677,
          -0.26647863,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,  0.5360287 ,  0.7124213 ,
           0.72912323,  0.72912323,  0.72912323,  0.7318281 ,
           0.72912323,  0.72912323,  0.61173254,  0.5403177 ,
           0.5445715 ,  0.61173254,  0.69186896,  0.67645043,
           0.6297557 ,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,  0.15452401,
           0.72912323,  0.72912323,  0.72912323,  0.647052  ,
           0.7208748 ,  0.72912323,  0.72912323,  0.72912323,
           0.7318281 ,  0.72912323,  0.70955706,  0.5852183 ,
          -0.8918737 ,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan, -0.87949634,
           0.00610969,  0.00610969,  0.00610969,         nan,
          -0.10701342,  0.00610969,  0.00610969,  0.00610969,
           0.00610969,  0.00610969, -0.24399276,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan],
         [        nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan,
                  nan,         nan,         nan,         nan]]]],
      dtype=float32), 'output_shape': torch.Size([1, 1, 28, 28]), 'from': [18], 'to': [1]}

generate models:364

analyse output arrays in iter:409

pre layer res:
7:relu
{'name': 'relu', 'output': array([[[[4357081.5, 4357081.5, 4357081.5, ..., 4357081.5, 4357081.5,
          4357081.5],
         [4357081.5, 4357081.5, 4357081.5, ..., 4357081.5, 4357081.5,
          4357081.5],
         [4357081.5, 4357081.5, 4357081.5, ..., 4357081.5, 4357081.5,
          4357081.5],
         ...,
         [4357072. , 4357072. , 4357072. , ..., 4357072. , 4357072. ,
          4357072. ],
         [4357081.5, 4357081.5, 4357081.5, ..., 4357081.5, 4357081.5,
          4357081.5],
         [4357081.5, 4357081.5, 4357081.5, ..., 4357081.5, 4357081.5,
          4357081.5]],

        [[4357081.5, 4357081.5, 4357081.5, ..., 4357081.5, 4357081.5,
          4357081.5],
         [4357081.5, 4357081.5, 4357081.5, ..., 4357081.5, 4357081.5,
          4357081.5],
         [4357081.5, 4357081.5, 4357081.5, ..., 4357081.5, 4357081.5,
          4357081.5],
         ...,
         [4357072. , 4357072. , 4357072. , ..., 4357072. , 4357072. ,
          4357072. ],
         [4357081.5, 4357081.5, 4357081.5, ..., 4357081.5, 4357081.5,
          4357081.5],
         [4357081.5, 4357081.5, 4357081.5, ..., 4357081.5, 4357081.5,
          4357081.5]],

        [[4357081.5, 4357081.5, 4357081.5, ..., 4357081.5, 4357081.5,
          4357081.5],
         [4357081.5, 4357081.5, 4357081.5, ..., 4357081.5, 4357081.5,
          4357081.5],
         [4357081.5, 4357081.5, 4357081.5, ..., 4357081.5, 4357081.5,
          4357081.5],
         ...,
         [4357072. , 4357072. , 4357072. , ..., 4357072. , 4357072. ,
          4357072. ],
         [4357081.5, 4357081.5, 4357081.5, ..., 4357081.5, 4357081.5,
          4357081.5],
         [4357081.5, 4357081.5, 4357081.5, ..., 4357081.5, 4357081.5,
          4357081.5]],

        ...,

        [[4357081.5, 4357081.5, 4357081.5, ..., 4357081.5, 4357081.5,
          4357081.5],
         [4357081.5, 4357081.5, 4357081.5, ..., 4357081.5, 4357081.5,
          4357081.5],
         [4357081.5, 4357081.5, 4357081.5, ..., 4357081.5, 4357081.5,
          4357081.5],
         ...,
         [4357072. , 4357072. , 4357072. , ..., 4357072. , 4357072. ,
          4357072. ],
         [4357081.5, 4357081.5, 4357081.5, ..., 4357081.5, 4357081.5,
          4357081.5],
         [4357081.5, 4357081.5, 4357081.5, ..., 4357081.5, 4357081.5,
          4357081.5]],

        [[4357081.5, 4357081.5, 4357081.5, ..., 4357081.5, 4357081.5,
          4357081.5],
         [4357081.5, 4357081.5, 4357081.5, ..., 4357081.5, 4357081.5,
          4357081.5],
         [4357081.5, 4357081.5, 4357081.5, ..., 4357081.5, 4357081.5,
          4357081.5],
         ...,
         [4357072. , 4357072. , 4357072. , ..., 4357072. , 4357072. ,
          4357072. ],
         [4357081.5, 4357081.5, 4357081.5, ..., 4357081.5, 4357081.5,
          4357081.5],
         [4357081.5, 4357081.5, 4357081.5, ..., 4357081.5, 4357081.5,
          4357081.5]],

        [[4357081.5, 4357081.5, 4357081.5, ..., 4357081.5, 4357081.5,
          4357081.5],
         [4357081.5, 4357081.5, 4357081.5, ..., 4357081.5, 4357081.5,
          4357081.5],
         [4357081.5, 4357081.5, 4357081.5, ..., 4357081.5, 4357081.5,
          4357081.5],
         ...,
         [4357072. , 4357072. , 4357072. , ..., 4357072. , 4357072. ,
          4357072. ],
         [4357081.5, 4357081.5, 4357081.5, ..., 4357081.5, 4357081.5,
          4357081.5],
         [4357081.5, 4357081.5, 4357081.5, ..., 4357081.5, 4357081.5,
          4357081.5]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [13], 'to': [19]}
tf node:
{'name': 'sin', 'output': array([[[[ 0.35746393,  0.35746393,  0.35746393, ...,  0.35746393,
           0.35746393,  0.35746393],
         [ 0.35746393,  0.35746393,  0.35746393, ...,  0.35746393,
           0.35746393,  0.35746393],
         [ 0.35746393,  0.35746393,  0.35746393, ...,  0.35746393,
           0.35746393,  0.35746393],
         ...,
         [-0.28626746, -0.28626746, -0.28626746, ..., -0.28626746,
          -0.28626746, -0.28626746],
         [ 0.35746393,  0.35746393,  0.35746393, ...,  0.35746393,
           0.35746393,  0.35746393],
         [ 0.35746393,  0.35746393,  0.35746393, ...,  0.35746393,
           0.35746393,  0.35746393]],

        [[ 0.35746393,  0.35746393,  0.35746393, ...,  0.35746393,
           0.35746393,  0.35746393],
         [ 0.35746393,  0.35746393,  0.35746393, ...,  0.35746393,
           0.35746393,  0.35746393],
         [ 0.35746393,  0.35746393,  0.35746393, ...,  0.35746393,
           0.35746393,  0.35746393],
         ...,
         [-0.28626746, -0.28626746, -0.28626746, ..., -0.28626746,
          -0.28626746, -0.28626746],
         [ 0.35746393,  0.35746393,  0.35746393, ...,  0.35746393,
           0.35746393,  0.35746393],
         [ 0.35746393,  0.35746393,  0.35746393, ...,  0.35746393,
           0.35746393,  0.35746393]],

        [[ 0.35746393,  0.35746393,  0.35746393, ...,  0.35746393,
           0.35746393,  0.35746393],
         [ 0.35746393,  0.35746393,  0.35746393, ...,  0.35746393,
           0.35746393,  0.35746393],
         [ 0.35746393,  0.35746393,  0.35746393, ...,  0.35746393,
           0.35746393,  0.35746393],
         ...,
         [-0.28626746, -0.28626746, -0.28626746, ..., -0.28626746,
          -0.28626746, -0.28626746],
         [ 0.35746393,  0.35746393,  0.35746393, ...,  0.35746393,
           0.35746393,  0.35746393],
         [ 0.35746393,  0.35746393,  0.35746393, ...,  0.35746393,
           0.35746393,  0.35746393]],

        ...,

        [[ 0.35746393,  0.35746393,  0.35746393, ...,  0.35746393,
           0.35746393,  0.35746393],
         [ 0.35746393,  0.35746393,  0.35746393, ...,  0.35746393,
           0.35746393,  0.35746393],
         [ 0.35746393,  0.35746393,  0.35746393, ...,  0.35746393,
           0.35746393,  0.35746393],
         ...,
         [-0.28626746, -0.28626746, -0.28626746, ..., -0.28626746,
          -0.28626746, -0.28626746],
         [ 0.35746393,  0.35746393,  0.35746393, ...,  0.35746393,
           0.35746393,  0.35746393],
         [ 0.35746393,  0.35746393,  0.35746393, ...,  0.35746393,
           0.35746393,  0.35746393]],

        [[ 0.35746393,  0.35746393,  0.35746393, ...,  0.35746393,
           0.35746393,  0.35746393],
         [ 0.35746393,  0.35746393,  0.35746393, ...,  0.35746393,
           0.35746393,  0.35746393],
         [ 0.35746393,  0.35746393,  0.35746393, ...,  0.35746393,
           0.35746393,  0.35746393],
         ...,
         [-0.28626746, -0.28626746, -0.28626746, ..., -0.28626746,
          -0.28626746, -0.28626746],
         [ 0.35746393,  0.35746393,  0.35746393, ...,  0.35746393,
           0.35746393,  0.35746393],
         [ 0.35746393,  0.35746393,  0.35746393, ...,  0.35746393,
           0.35746393,  0.35746393]],

        [[ 0.35746393,  0.35746393,  0.35746393, ...,  0.35746393,
           0.35746393,  0.35746393],
         [ 0.35746393,  0.35746393,  0.35746393, ...,  0.35746393,
           0.35746393,  0.35746393],
         [ 0.35746393,  0.35746393,  0.35746393, ...,  0.35746393,
           0.35746393,  0.35746393],
         ...,
         [-0.28626746, -0.28626746, -0.28626746, ..., -0.28626746,
          -0.28626746, -0.28626746],
         [ 0.35746393,  0.35746393,  0.35746393, ...,  0.35746393,
           0.35746393,  0.35746393],
         [ 0.35746393,  0.35746393,  0.35746393, ...,  0.35746393,
           0.35746393,  0.35746393]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [7], 'to': [8]}
ms node:
{'name': 'sin', 'output': array([[[[ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         ...,
         [-0.28626743, -0.28626743, -0.28626743, ..., -0.28626743,
          -0.28626743, -0.28626743],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396]],

        [[ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         ...,
         [-0.28626743, -0.28626743, -0.28626743, ..., -0.28626743,
          -0.28626743, -0.28626743],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396]],

        [[ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         ...,
         [-0.28626743, -0.28626743, -0.28626743, ..., -0.28626743,
          -0.28626743, -0.28626743],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396]],

        ...,

        [[ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         ...,
         [-0.28626743, -0.28626743, -0.28626743, ..., -0.28626743,
          -0.28626743, -0.28626743],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396]],

        [[-0.7941662 , -0.7941662 , -0.7941662 , ..., -0.7941662 ,
          -0.7941662 , -0.7941662 ],
         [-0.7941662 , -0.7941662 , -0.7941662 , ..., -0.7941662 ,
          -0.7941662 , -0.7941662 ],
         [-0.7941662 , -0.7941662 , -0.7941662 , ..., -0.7941662 ,
          -0.7941662 , -0.7941662 ],
         ...,
         [-0.4856824 , -0.4856824 , -0.4856824 , ..., -0.4856824 ,
          -0.4856824 , -0.4856824 ],
         [-0.7941662 , -0.7941662 , -0.7941662 , ..., -0.7941662 ,
          -0.7941662 , -0.7941662 ],
         [-0.7941662 , -0.7941662 , -0.7941662 , ..., -0.7941662 ,
          -0.7941662 , -0.7941662 ]],

        [[-0.7941662 , -0.7941662 , -0.7941662 , ..., -0.7941662 ,
          -0.7941662 , -0.7941662 ],
         [-0.7941662 , -0.7941662 , -0.7941662 , ..., -0.7941662 ,
          -0.7941662 , -0.7941662 ],
         [-0.7941662 , -0.7941662 , -0.7941662 , ..., -0.7941662 ,
          -0.7941662 , -0.7941662 ],
         ...,
         [-0.4856824 , -0.4856824 , -0.4856824 , ..., -0.4856824 ,
          -0.4856824 , -0.4856824 ],
         [-0.7941662 , -0.7941662 , -0.7941662 , ..., -0.7941662 ,
          -0.7941662 , -0.7941662 ],
         [-0.7941662 , -0.7941662 , -0.7941662 , ..., -0.7941662 ,
          -0.7941662 , -0.7941662 ]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [7], 'to': [8]}
torch node:
{'name': 'sin', 'output': array([[[[ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         ...,
         [-0.28626743, -0.28626743, -0.28626743, ..., -0.28626743,
          -0.28626743, -0.28626743],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396]],

        [[ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         ...,
         [-0.28626743, -0.28626743, -0.28626743, ..., -0.28626743,
          -0.28626743, -0.28626743],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396]],

        [[ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         ...,
         [-0.28626743, -0.28626743, -0.28626743, ..., -0.28626743,
          -0.28626743, -0.28626743],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396]],

        ...,

        [[ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         ...,
         [-0.28626743, -0.28626743, -0.28626743, ..., -0.28626743,
          -0.28626743, -0.28626743],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396]],

        [[ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         ...,
         [-0.28626743, -0.28626743, -0.28626743, ..., -0.28626743,
          -0.28626743, -0.28626743],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396]],

        [[ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         ...,
         [-0.28626743, -0.28626743, -0.28626743, ..., -0.28626743,
          -0.28626743, -0.28626743],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396],
         [ 0.35746396,  0.35746396,  0.35746396, ...,  0.35746396,
           0.35746396,  0.35746396]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [7], 'to': [8]}

generate models:373

analyse output arrays in iter:432

pre layer res:
5:add
{'name': 'add', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [8, 13], 'to': [4]}
tf node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [5], 'to': [11]}
ms node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 256, 28, 28), 'from': [5], 'to': [11]}
torch node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 28, 28]), 'from': [5], 'to': [11]}

generate models:395

analyse output arrays in iter:446

pre layer res:
18:relu
{'name': 'relu', 'output': array([[[[2., 2., 2., ..., 2., 2., 2.],
         [2., 2., 2., ..., 2., 2., 2.],
         [2., 2., 2., ..., 2., 2., 2.],
         ...,
         [2., 2., 2., ..., 2., 2., 2.],
         [2., 2., 2., ..., 2., 2., 2.],
         [2., 2., 2., ..., 2., 2., 2.]],

        [[2., 2., 2., ..., 2., 2., 2.],
         [2., 2., 2., ..., 2., 2., 2.],
         [2., 2., 2., ..., 2., 2., 2.],
         ...,
         [2., 2., 2., ..., 2., 2., 2.],
         [2., 2., 2., ..., 2., 2., 2.],
         [2., 2., 2., ..., 2., 2., 2.]],

        [[2., 2., 2., ..., 2., 2., 2.],
         [2., 2., 2., ..., 2., 2., 2.],
         [2., 2., 2., ..., 2., 2., 2.],
         ...,
         [2., 2., 2., ..., 2., 2., 2.],
         [2., 2., 2., ..., 2., 2., 2.],
         [2., 2., 2., ..., 2., 2., 2.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [17], 'to': [4]}
tf node:
{'name': 'sin', 'output': array([[[[0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747],
         [0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747],
         [0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747],
         ...,
         [0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747],
         [0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747],
         [0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747]],

        [[0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747],
         [0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747],
         [0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747],
         ...,
         [0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747],
         [0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747],
         [0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747]],

        [[0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747],
         [0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747],
         [0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747],
         ...,
         [0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747],
         [0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747],
         [0.90929747, 0.90929747, 0.90929747, ..., 0.90929747,
          0.90929747, 0.90929747]],

        ...,

        [[0.841471  , 0.841471  , 0.841471  , ..., 0.841471  ,
          0.841471  , 0.841471  ],
         [0.841471  , 0.841471  , 0.841471  , ..., 0.841471  ,
          0.841471  , 0.841471  ],
         [0.841471  , 0.841471  , 0.841471  , ..., 0.841471  ,
          0.841471  , 0.841471  ],
         ...,
         [0.841471  , 0.841471  , 0.841471  , ..., 0.841471  ,
          0.841471  , 0.841471  ],
         [0.841471  , 0.841471  , 0.841471  , ..., 0.841471  ,
          0.841471  , 0.841471  ],
         [0.841471  , 0.841471  , 0.841471  , ..., 0.841471  ,
          0.841471  , 0.841471  ]],

        [[0.841471  , 0.841471  , 0.841471  , ..., 0.841471  ,
          0.841471  , 0.841471  ],
         [0.841471  , 0.841471  , 0.841471  , ..., 0.841471  ,
          0.841471  , 0.841471  ],
         [0.841471  , 0.841471  , 0.841471  , ..., 0.841471  ,
          0.841471  , 0.841471  ],
         ...,
         [0.841471  , 0.841471  , 0.841471  , ..., 0.841471  ,
          0.841471  , 0.841471  ],
         [0.841471  , 0.841471  , 0.841471  , ..., 0.841471  ,
          0.841471  , 0.841471  ],
         [0.841471  , 0.841471  , 0.841471  , ..., 0.841471  ,
          0.841471  , 0.841471  ]],

        [[0.841471  , 0.841471  , 0.841471  , ..., 0.841471  ,
          0.841471  , 0.841471  ],
         [0.841471  , 0.841471  , 0.841471  , ..., 0.841471  ,
          0.841471  , 0.841471  ],
         [0.841471  , 0.841471  , 0.841471  , ..., 0.841471  ,
          0.841471  , 0.841471  ],
         ...,
         [0.841471  , 0.841471  , 0.841471  , ..., 0.841471  ,
          0.841471  , 0.841471  ],
         [0.841471  , 0.841471  , 0.841471  , ..., 0.841471  ,
          0.841471  , 0.841471  ],
         [0.841471  , 0.841471  , 0.841471  , ..., 0.841471  ,
          0.841471  , 0.841471  ]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [18], 'to': [19]}
ms node:
{'name': 'sin', 'output': array([[[[0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ],
         [0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ],
         [0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ],
         ...,
         [0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ],
         [0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ],
         [0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ]],

        [[0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ],
         [0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ],
         [0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ],
         ...,
         [0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ],
         [0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ],
         [0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ]],

        [[0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ],
         [0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ],
         [0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ],
         ...,
         [0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ],
         [0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ],
         [0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ]],

        ...,

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]]]], dtype=float32), 'output_shape': (1, 256, 28, 28), 'from': [18], 'to': [19]}
torch node:
{'name': 'sin', 'output': array([[[[0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ],
         [0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ],
         [0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ],
         ...,
         [0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ],
         [0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ],
         [0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ]],

        [[0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ],
         [0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ],
         [0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ],
         ...,
         [0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ],
         [0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ],
         [0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ]],

        [[0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ],
         [0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ],
         [0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ],
         ...,
         [0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ],
         [0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ],
         [0.9092974 , 0.9092974 , 0.9092974 , ..., 0.9092974 ,
          0.9092974 , 0.9092974 ]],

        ...,

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]],

        [[0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         ...,
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096],
         [0.84147096, 0.84147096, 0.84147096, ..., 0.84147096,
          0.84147096, 0.84147096]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 28, 28]), 'from': [18], 'to': [19]}

generate models:407

analyse output arrays in iter:454

pre layer res:
10:add
{'name': 'add', 'output': array([[[[38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586],
         [38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586],
         [38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586],
         ...,
         [38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586],
         [38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586],
         [38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586]],

        [[38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586],
         [38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586],
         [38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586],
         ...,
         [38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586],
         [38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586],
         [38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586]],

        [[38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586],
         [38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586],
         [38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586],
         ...,
         [38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586],
         [38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586],
         [38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586]],

        ...,

        [[38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586],
         [38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586],
         [38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586],
         ...,
         [38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586],
         [38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586],
         [38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586]],

        [[38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586],
         [38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586],
         [38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586],
         ...,
         [38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586],
         [38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586],
         [38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586]],

        [[38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586],
         [38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586],
         [38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586],
         ...,
         [38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586],
         [38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586],
         [38165.586, 38165.586, 38165.586, ..., 38165.586, 38165.586,
          38165.586]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [8, 8], 'to': [13]}
tf node:
{'name': 'sin', 'output': array([[[[0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         ...,
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665]],

        [[0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         ...,
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665]],

        [[0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         ...,
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665]],

        ...,

        [[0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         ...,
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665]],

        [[0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         ...,
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665]],

        [[0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         ...,
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [10], 'to': [9]}
ms node:
{'name': 'sin', 'output': array([[[[0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918],
         [0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918],
         [0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918],
         ...,
         [0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918],
         [0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918],
         [0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918]],

        [[0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918],
         [0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918],
         [0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918],
         ...,
         [0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918],
         [0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918],
         [0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918]],

        [[0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918],
         [0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918],
         [0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918],
         ...,
         [0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918],
         [0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918],
         [0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918]],

        ...,

        [[0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918],
         [0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918],
         [0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918],
         ...,
         [0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918],
         [0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918],
         [0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918]],

        [[0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918],
         [0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918],
         [0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918],
         ...,
         [0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918],
         [0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918],
         [0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918]],

        [[0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918],
         [0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918],
         [0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918],
         ...,
         [0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918],
         [0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918],
         [0.9914918, 0.9914918, 0.9914918, ..., 0.9914918, 0.9914918,
          0.9914918]]]], dtype=float32), 'output_shape': (1, 256, 28, 28), 'from': [10], 'to': [9]}
torch node:
{'name': 'sin', 'output': array([[[[0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         ...,
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665]],

        [[0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         ...,
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665]],

        [[0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         ...,
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665]],

        ...,

        [[0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         ...,
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665]],

        [[0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         ...,
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665]],

        [[0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         ...,
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665],
         [0.99862665, 0.99862665, 0.99862665, ..., 0.99862665,
          0.99862665, 0.99862665]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 28, 28]), 'from': [10], 'to': [9]}

generate models:415

analyse output arrays in iter:460

pre layer res:
12:empty_merge_operator
{'name': 'empty_merge_operator', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [7, 15], 'to': [9]}
tf node:
{'name': 'cos', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [12], 'to': [8]}
ms node:
{'name': 'cos', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [12], 'to': [8]}
torch node:
{'name': 'cos', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [12], 'to': [8]}

generate models:421

analyse output arrays in iter:467

pre layer res:
2:empty_seq_operator
{'name': 'empty_seq_operator', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [17], 'to': [3, 12]}
tf node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        ...,

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [2], 'to': [4]}
ms node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        ...,

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [2], 'to': [4]}
torch node:
{'name': 'maxpool2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [2], 'to': [4]}

pre layer res:
9:add
{'name': 'add', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [8, 14], 'to': [16]}
tf node:
{'name': 'softmax', 'output': array([[[[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        ...,

        [[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 28, 28]), 'from': [9], 'to': [10]}
ms node:
{'name': 'softmax', 'output': array([[[[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        ...,

        [[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]]]], dtype=float32), 'output_shape': (1, 256, 28, 28), 'from': [9], 'to': [10]}
torch node:
{'name': 'softmax', 'output': array([[[[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        ...,

        [[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         [0.03571429, 0.03571429, 0.03571429, ..., 0.03571429,
          0.03571429, 0.03571429],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 28, 28]), 'from': [9], 'to': [10]}

generate models:428

analyse output arrays in iter:480

pre layer res:
15:sum
{'name': 'sum', 'output': array([[[28., 28., 28., ..., inf, 28., 28.],
        [28., 28., 28., ..., inf, 28., 28.],
        [28., 28., 28., ..., inf, 28., 28.],
        ...,
        [28., 28., 28., ..., inf, 28., 28.],
        [28., 28., 28., ..., inf, 28., 28.],
        [28., 28., 28., ..., inf, 28., 28.]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28]), 'from': [3], 'to': [22]}
tf node:
{'name': 'sin', 'output': array([[[0.2709058, 0.2709058, 0.2709058, ...,       nan, 0.2709058,
         0.2709058],
        [0.2709058, 0.2709058, 0.2709058, ...,       nan, 0.2709058,
         0.2709058],
        [0.2709058, 0.2709058, 0.2709058, ...,       nan, 0.2709058,
         0.2709058],
        ...,
        [0.2709058, 0.2709058, 0.2709058, ...,       nan, 0.2709058,
         0.2709058],
        [0.2709058, 0.2709058, 0.2709058, ...,       nan, 0.2709058,
         0.2709058],
        [0.2709058, 0.2709058, 0.2709058, ...,       nan, 0.2709058,
         0.2709058]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28]), 'from': [15], 'to': [16]}
ms node:
{'name': 'sin', 'output': array([[[0.2709058, 0.2709058, 0.2709058, ...,       nan, 0.2709058,
         0.2709058],
        [0.2709058, 0.2709058, 0.2709058, ...,       nan, 0.2709058,
         0.2709058],
        [0.2709058, 0.2709058, 0.2709058, ...,       nan, 0.2709058,
         0.2709058],
        ...,
        [0.2709058, 0.2709058, 0.2709058, ...,       nan, 0.2709058,
         0.2709058],
        [0.2709058, 0.2709058, 0.2709058, ...,       nan, 0.2709058,
         0.2709058],
        [0.2709058, 0.2709058, 0.2709058, ...,       nan, 0.2709058,
         0.2709058]]], dtype=float32), 'output_shape': (1, 64, 28), 'from': [15], 'to': [16]}
torch node:
{'name': 'sin', 'output': array([[[0.2709058, 0.2709058, 0.2709058, ...,       nan, 0.2709058,
         0.2709058],
        [0.2709058, 0.2709058, 0.2709058, ...,       nan, 0.2709058,
         0.2709058],
        [0.2709058, 0.2709058, 0.2709058, ...,       nan, 0.2709058,
         0.2709058],
        ...,
        [0.2709058, 0.2709058, 0.2709058, ...,       nan, 0.2709058,
         0.2709058],
        [0.2709058, 0.2709058, 0.2709058, ...,       nan, 0.2709058,
         0.2709058],
        [0.2709058, 0.2709058, 0.2709058, ...,       nan, 0.2709058,
         0.2709058]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28]), 'from': [15], 'to': [16]}

generate models:441

analyse output arrays in iter:497

pre layer res:
6:conv2d
{'name': 'conv2d', 'output': array([[[[   0.    ,    0.    ,    0.    , ..., 7974.851 , 7316.5693,
             0.    ],
         [   0.    ,    0.    ,    0.    , ..., 7974.851 , 7316.5693,
             0.    ],
         [   0.    ,    0.    ,    0.    , ..., 7974.851 , 7316.5693,
             0.    ],
         ...,
         [   0.    ,    0.    ,    0.    , ..., 5316.572 , 4877.7163,
             0.    ],
         [   0.    ,    0.    ,    0.    , ..., 5316.572 , 4877.7163,
             0.    ],
         [   0.    ,    0.    ,    0.    , ..., 5316.572 , 4877.7163,
             0.    ]],

        [[   0.    ,    0.    ,    0.    , ..., 7974.851 , 7316.5693,
             0.    ],
         [   0.    ,    0.    ,    0.    , ..., 7974.851 , 7316.5693,
             0.    ],
         [   0.    ,    0.    ,    0.    , ..., 7974.851 , 7316.5693,
             0.    ],
         ...,
         [   0.    ,    0.    ,    0.    , ..., 5316.572 , 4877.7163,
             0.    ],
         [   0.    ,    0.    ,    0.    , ..., 5316.572 , 4877.7163,
             0.    ],
         [   0.    ,    0.    ,    0.    , ..., 5316.572 , 4877.7163,
             0.    ]],

        [[   0.    ,    0.    ,    0.    , ..., 7974.851 , 7316.5693,
             0.    ],
         [   0.    ,    0.    ,    0.    , ..., 7974.851 , 7316.5693,
             0.    ],
         [   0.    ,    0.    ,    0.    , ..., 7974.851 , 7316.5693,
             0.    ],
         ...,
         [   0.    ,    0.    ,    0.    , ..., 5316.572 , 4877.7163,
             0.    ],
         [   0.    ,    0.    ,    0.    , ..., 5316.572 , 4877.7163,
             0.    ],
         [   0.    ,    0.    ,    0.    , ..., 5316.572 , 4877.7163,
             0.    ]],

        ...,

        [[   0.    ,    0.    ,    0.    , ..., 7974.851 , 7316.5693,
             0.    ],
         [   0.    ,    0.    ,    0.    , ..., 7974.851 , 7316.5693,
             0.    ],
         [   0.    ,    0.    ,    0.    , ..., 7974.851 , 7316.5693,
             0.    ],
         ...,
         [   0.    ,    0.    ,    0.    , ..., 5316.572 , 4877.7163,
             0.    ],
         [   0.    ,    0.    ,    0.    , ..., 5316.572 , 4877.7163,
             0.    ],
         [   0.    ,    0.    ,    0.    , ..., 5316.572 , 4877.7163,
             0.    ]],

        [[   0.    ,    0.    ,    0.    , ..., 7974.851 , 7316.5693,
             0.    ],
         [   0.    ,    0.    ,    0.    , ..., 7974.851 , 7316.5693,
             0.    ],
         [   0.    ,    0.    ,    0.    , ..., 7974.851 , 7316.5693,
             0.    ],
         ...,
         [   0.    ,    0.    ,    0.    , ..., 5316.572 , 4877.7163,
             0.    ],
         [   0.    ,    0.    ,    0.    , ..., 5316.572 , 4877.7163,
             0.    ],
         [   0.    ,    0.    ,    0.    , ..., 5316.572 , 4877.7163,
             0.    ]],

        [[   0.    ,    0.    ,    0.    , ..., 7974.851 , 7316.5693,
             0.    ],
         [   0.    ,    0.    ,    0.    , ..., 7974.851 , 7316.5693,
             0.    ],
         [   0.    ,    0.    ,    0.    , ..., 7974.851 , 7316.5693,
             0.    ],
         ...,
         [   0.    ,    0.    ,    0.    , ..., 5316.572 , 4877.7163,
             0.    ],
         [   0.    ,    0.    ,    0.    , ..., 5316.572 , 4877.7163,
             0.    ],
         [   0.    ,    0.    ,    0.    , ..., 5316.572 , 4877.7163,
             0.    ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [5], 'to': [14]}
tf node:
{'name': 'sin', 'output': array([[[[0.        , 0.        , 0.        , ..., 0.99665   ,
          0.1986245 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99665   ,
          0.1986245 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99665   ,
          0.1986245 , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ]],

        [[0.        , 0.        , 0.        , ..., 0.99665   ,
          0.1986245 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99665   ,
          0.1986245 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99665   ,
          0.1986245 , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ]],

        [[0.        , 0.        , 0.        , ..., 0.99665   ,
          0.1986245 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99665   ,
          0.1986245 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99665   ,
          0.1986245 , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ]],

        ...,

        [[0.        , 0.        , 0.        , ..., 0.99665   ,
          0.1986245 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99665   ,
          0.1986245 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99665   ,
          0.1986245 , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ]],

        [[0.        , 0.        , 0.        , ..., 0.99665   ,
          0.1986245 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99665   ,
          0.1986245 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99665   ,
          0.1986245 , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ]],

        [[0.        , 0.        , 0.        , ..., 0.99665   ,
          0.1986245 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99665   ,
          0.1986245 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99665   ,
          0.1986245 , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 28, 28]), 'from': [6], 'to': [7]}
ms node:
{'name': 'sin', 'output': array([[[[0.        , 0.        , 0.        , ..., 0.99665   ,
          0.19862452, 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99665   ,
          0.19862452, 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99665   ,
          0.19862452, 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ]],

        [[0.        , 0.        , 0.        , ..., 0.99665   ,
          0.19862452, 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99665   ,
          0.19862452, 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99665   ,
          0.19862452, 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ]],

        [[0.        , 0.        , 0.        , ..., 0.99665   ,
          0.19862452, 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99665   ,
          0.19862452, 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99665   ,
          0.19862452, 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ]],

        ...,

        [[0.        , 0.        , 0.        , ..., 0.99665   ,
          0.19862452, 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99665   ,
          0.19862452, 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99665   ,
          0.19862452, 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ]],

        [[0.        , 0.        , 0.        , ..., 0.99722224,
          0.19383664, 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99722224,
          0.19383664, 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99722224,
          0.19383664, 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.8401153 ,
          0.9244245 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.8401153 ,
          0.9244245 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.8401153 ,
          0.9244245 , 0.        ]],

        [[0.        , 0.        , 0.        , ..., 0.99722224,
          0.19383664, 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99722224,
          0.19383664, 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99722224,
          0.19383664, 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.8401153 ,
          0.9244245 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.8401153 ,
          0.9244245 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.8401153 ,
          0.9244245 , 0.        ]]]], dtype=float32), 'output_shape': (1, 64, 28, 28), 'from': [6], 'to': [7]}
torch node:
{'name': 'sin', 'output': array([[[[0.        , 0.        , 0.        , ..., 0.99665   ,
          0.19862452, 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99665   ,
          0.19862452, 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99665   ,
          0.19862452, 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ]],

        [[0.        , 0.        , 0.        , ..., 0.99665   ,
          0.19862452, 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99665   ,
          0.19862452, 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99665   ,
          0.19862452, 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ]],

        [[0.        , 0.        , 0.        , ..., 0.99665   ,
          0.19862452, 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99665   ,
          0.19862452, 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99665   ,
          0.19862452, 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ]],

        ...,

        [[0.        , 0.        , 0.        , ..., 0.99665   ,
          0.19862452, 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99665   ,
          0.19862452, 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99665   ,
          0.19862452, 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ]],

        [[0.        , 0.        , 0.        , ..., 0.99665   ,
          0.19862452, 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99665   ,
          0.19862452, 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99665   ,
          0.19862452, 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ]],

        [[0.        , 0.        , 0.        , ..., 0.99665   ,
          0.19862452, 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99665   ,
          0.19862452, 0.        ],
         [0.        , 0.        , 0.        , ..., 0.99665   ,
          0.19862452, 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.83985037,
          0.9234907 , 0.        ]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 28, 28]), 'from': [6], 'to': [7]}

generate models:456

final statics:
total operators:28
tensorflow --> nums:36,distinct_bugs:5
mindspore --> nums:30,distinct_bugs:4
torch --> nums:27,distinct_bugs:6
tensorflow --> 
conv2d:14
log:3
sin:8
softmax:3
cos:8
mindspore --> 
log:6
sin:12
softmax:3
cos:9
torch --> 
log:4
sin:8
flatten:3
softmax:3
cos:8
maxpool2d:1

generate models:458
