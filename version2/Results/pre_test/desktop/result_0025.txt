
analyse output arrays in iter:1

pre layer res:
2:add
{'name': 'add', 'output': array([[[[308., 252., 210., ..., 182., 174., 158.],
         [280., 290., 250., ..., 192., 154., 142.],
         [280., 278., 230., ..., 158., 136., 134.],
         ...,
         [350., 312., 308., ...,  84., 122., 186.],
         [330., 312., 318., ..., 206., 246., 262.],
         [326., 316., 326., ..., 286., 286., 286.]],

        [[354., 274., 208., ..., 190., 180., 162.],
         [320., 306., 250., ..., 198., 160., 146.],
         [310., 292., 230., ..., 164., 140., 138.],
         ...,
         [334., 308., 320., ...,  68., 106., 166.],
         [308., 304., 322., ..., 186., 228., 242.],
         [296., 296., 312., ..., 266., 268., 266.]],

        [[374., 272., 190., ..., 142., 142., 140.],
         [338., 308., 236., ..., 156., 124., 122.],
         [328., 298., 224., ..., 128., 110., 110.],
         ...,
         [332., 320., 340., ...,  72., 114., 182.],
         [256., 260., 284., ..., 192., 240., 262.],
         [240., 244., 266., ..., 278., 284., 288.]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [0, 0], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[21632., 32652., 34574., ..., 16336., 13570.,  9068.],
         [29960., 43674., 44508., ..., 22784., 19250., 12764.],
         [27294., 38732., 37696., ..., 23014., 18914., 12340.],
         ...,
         [27584., 37324., 34898., ..., 18090., 16024., 11714.],
         [23416., 30404., 27960., ..., 19028., 17280., 12432.],
         [16396., 21172., 20316., ..., 13264., 12278.,  8654.]],

        [[21632., 32652., 34574., ..., 16336., 13570.,  9068.],
         [29960., 43674., 44508., ..., 22784., 19250., 12764.],
         [27294., 38732., 37696., ..., 23014., 18914., 12340.],
         ...,
         [27584., 37324., 34898., ..., 18090., 16024., 11714.],
         [23416., 30404., 27960., ..., 19028., 17280., 12432.],
         [16396., 21172., 20316., ..., 13264., 12278.,  8654.]],

        [[21632., 32652., 34574., ..., 16336., 13570.,  9068.],
         [29960., 43674., 44508., ..., 22784., 19250., 12764.],
         [27294., 38732., 37696., ..., 23014., 18914., 12340.],
         ...,
         [27584., 37324., 34898., ..., 18090., 16024., 11714.],
         [23416., 30404., 27960., ..., 19028., 17280., 12432.],
         [16396., 21172., 20316., ..., 13264., 12278.,  8654.]],

        ...,

        [[21632., 32652., 34574., ..., 16336., 13570.,  9068.],
         [29960., 43674., 44508., ..., 22784., 19250., 12764.],
         [27294., 38732., 37696., ..., 23014., 18914., 12340.],
         ...,
         [27584., 37324., 34898., ..., 18090., 16024., 11714.],
         [23416., 30404., 27960., ..., 19028., 17280., 12432.],
         [16396., 21172., 20316., ..., 13264., 12278.,  8654.]],

        [[21632., 32652., 34574., ..., 16336., 13570.,  9068.],
         [29960., 43674., 44508., ..., 22784., 19250., 12764.],
         [27294., 38732., 37696., ..., 23014., 18914., 12340.],
         ...,
         [27584., 37324., 34898., ..., 18090., 16024., 11714.],
         [23416., 30404., 27960., ..., 19028., 17280., 12432.],
         [16396., 21172., 20316., ..., 13264., 12278.,  8654.]],

        [[21632., 32652., 34574., ..., 16336., 13570.,  9068.],
         [29960., 43674., 44508., ..., 22784., 19250., 12764.],
         [27294., 38732., 37696., ..., 23014., 18914., 12340.],
         ...,
         [27584., 37324., 34898., ..., 18090., 16024., 11714.],
         [23416., 30404., 27960., ..., 19028., 17280., 12432.],
         [16396., 21172., 20316., ..., 13264., 12278.,  8654.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [2], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[13044., 20642., 26288., ..., 13598., 12680.,  9364.],
         [20348., 32338., 39828., ..., 20398., 19132., 13926.],
         [23228., 35428., 41284., ..., 24254., 22578., 16096.],
         ...,
         [21024., 30168., 32220., ..., 17630., 18790., 13014.],
         [23664., 32874., 35740., ..., 20520., 22742., 16062.],
         [16428., 21772., 22966., ..., 15184., 18108., 12870.]],

        [[13044., 20642., 26288., ..., 13598., 12680.,  9364.],
         [20348., 32338., 39828., ..., 20398., 19132., 13926.],
         [23228., 35428., 41284., ..., 24254., 22578., 16096.],
         ...,
         [21024., 30168., 32220., ..., 17630., 18790., 13014.],
         [23664., 32874., 35740., ..., 20520., 22742., 16062.],
         [16428., 21772., 22966., ..., 15184., 18108., 12870.]],

        [[13044., 20642., 26288., ..., 13598., 12680.,  9364.],
         [20348., 32338., 39828., ..., 20398., 19132., 13926.],
         [23228., 35428., 41284., ..., 24254., 22578., 16096.],
         ...,
         [21024., 30168., 32220., ..., 17630., 18790., 13014.],
         [23664., 32874., 35740., ..., 20520., 22742., 16062.],
         [16428., 21772., 22966., ..., 15184., 18108., 12870.]],

        ...,

        [[13044., 20642., 26288., ..., 13598., 12680.,  9364.],
         [20348., 32338., 39828., ..., 20398., 19132., 13926.],
         [23228., 35428., 41284., ..., 24254., 22578., 16096.],
         ...,
         [21024., 30168., 32220., ..., 17630., 18790., 13014.],
         [23664., 32874., 35740., ..., 20520., 22742., 16062.],
         [16428., 21772., 22966., ..., 15184., 18108., 12870.]],

        [[13044., 20642., 26288., ..., 13598., 12680.,  9364.],
         [20348., 32338., 39828., ..., 20398., 19132., 13926.],
         [23228., 35428., 41284., ..., 24254., 22578., 16096.],
         ...,
         [21024., 30168., 32220., ..., 17630., 18790., 13014.],
         [23664., 32874., 35740., ..., 20520., 22742., 16062.],
         [16428., 21772., 22966., ..., 15184., 18108., 12870.]],

        [[13044., 20642., 26288., ..., 13598., 12680.,  9364.],
         [20348., 32338., 39828., ..., 20398., 19132., 13926.],
         [23228., 35428., 41284., ..., 24254., 22578., 16096.],
         ...,
         [21024., 30168., 32220., ..., 17630., 18790., 13014.],
         [23664., 32874., 35740., ..., 20520., 22742., 16062.],
         [16428., 21772., 22966., ..., 15184., 18108., 12870.]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [2], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[13044., 20642., 26288., ..., 13598., 12680.,  9364.],
         [20348., 32338., 39828., ..., 20398., 19132., 13926.],
         [23228., 35428., 41284., ..., 24254., 22578., 16096.],
         ...,
         [21024., 30168., 32220., ..., 17630., 18790., 13014.],
         [23664., 32874., 35740., ..., 20520., 22742., 16062.],
         [16428., 21772., 22966., ..., 15184., 18108., 12870.]],

        [[13044., 20642., 26288., ..., 13598., 12680.,  9364.],
         [20348., 32338., 39828., ..., 20398., 19132., 13926.],
         [23228., 35428., 41284., ..., 24254., 22578., 16096.],
         ...,
         [21024., 30168., 32220., ..., 17630., 18790., 13014.],
         [23664., 32874., 35740., ..., 20520., 22742., 16062.],
         [16428., 21772., 22966., ..., 15184., 18108., 12870.]],

        [[13044., 20642., 26288., ..., 13598., 12680.,  9364.],
         [20348., 32338., 39828., ..., 20398., 19132., 13926.],
         [23228., 35428., 41284., ..., 24254., 22578., 16096.],
         ...,
         [21024., 30168., 32220., ..., 17630., 18790., 13014.],
         [23664., 32874., 35740., ..., 20520., 22742., 16062.],
         [16428., 21772., 22966., ..., 15184., 18108., 12870.]],

        ...,

        [[13044., 20642., 26288., ..., 13598., 12680.,  9364.],
         [20348., 32338., 39828., ..., 20398., 19132., 13926.],
         [23228., 35428., 41284., ..., 24254., 22578., 16096.],
         ...,
         [21024., 30168., 32220., ..., 17630., 18790., 13014.],
         [23664., 32874., 35740., ..., 20520., 22742., 16062.],
         [16428., 21772., 22966., ..., 15184., 18108., 12870.]],

        [[13044., 20642., 26288., ..., 13598., 12680.,  9364.],
         [20348., 32338., 39828., ..., 20398., 19132., 13926.],
         [23228., 35428., 41284., ..., 24254., 22578., 16096.],
         ...,
         [21024., 30168., 32220., ..., 17630., 18790., 13014.],
         [23664., 32874., 35740., ..., 20520., 22742., 16062.],
         [16428., 21772., 22966., ..., 15184., 18108., 12870.]],

        [[13044., 20642., 26288., ..., 13598., 12680.,  9364.],
         [20348., 32338., 39828., ..., 20398., 19132., 13926.],
         [23228., 35428., 41284., ..., 24254., 22578., 16096.],
         ...,
         [21024., 30168., 32220., ..., 17630., 18790., 13014.],
         [23664., 32874., 35740., ..., 20520., 22742., 16062.],
         [16428., 21772., 22966., ..., 15184., 18108., 12870.]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [2], 'to': []}

generate models:2

analyse output arrays in iter:3

pre layer res:
6:add
{'name': 'add', 'output': array([[[[140., 185., 190., ..., 380., 405., 425.],
         [165., 170., 160., ..., 475., 480., 425.],
         [195., 200., 285., ..., 465., 535., 475.],
         ...,
         [415., 435., 420., ..., 495., 450., 405.],
         [440., 450., 465., ..., 400., 380., 410.],
         [485., 470., 465., ..., 270., 315., 360.]],

        [[125., 170., 175., ..., 335., 360., 380.],
         [140., 150., 135., ..., 410., 410., 360.],
         [160., 165., 250., ..., 380., 445., 385.],
         ...,
         [365., 385., 370., ..., 465., 420., 375.],
         [360., 370., 385., ..., 370., 350., 380.],
         [390., 375., 375., ..., 235., 280., 325.]],

        [[ 50.,  95., 100., ..., 195., 215., 235.],
         [ 65.,  70.,  60., ..., 275., 280., 225.],
         [ 75.,  85., 165., ..., 260., 330., 270.],
         ...,
         [260., 280., 260., ..., 350., 305., 260.],
         [255., 260., 280., ..., 265., 245., 275.],
         [280., 265., 265., ..., 140., 185., 230.]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [5, 0], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[16320., 23060., 25675., ..., 35045., 30765., 20480.],
         [25320., 36305., 39455., ..., 48690., 41935., 27635.],
         [30160., 43860., 48975., ..., 51505., 42775., 27885.],
         ...,
         [33980., 48895., 52740., ..., 54705., 44440., 29430.],
         [30775., 44130., 46585., ..., 47145., 38285., 24405.],
         [21690., 30535., 31280., ..., 32680., 26285., 16600.]],

        [[16320., 23060., 25675., ..., 35045., 30765., 20480.],
         [25320., 36305., 39455., ..., 48690., 41935., 27635.],
         [30160., 43860., 48975., ..., 51505., 42775., 27885.],
         ...,
         [33980., 48895., 52740., ..., 54705., 44440., 29430.],
         [30775., 44130., 46585., ..., 47145., 38285., 24405.],
         [21690., 30535., 31280., ..., 32680., 26285., 16600.]],

        [[16320., 23060., 25675., ..., 35045., 30765., 20480.],
         [25320., 36305., 39455., ..., 48690., 41935., 27635.],
         [30160., 43860., 48975., ..., 51505., 42775., 27885.],
         ...,
         [33980., 48895., 52740., ..., 54705., 44440., 29430.],
         [30775., 44130., 46585., ..., 47145., 38285., 24405.],
         [21690., 30535., 31280., ..., 32680., 26285., 16600.]],

        ...,

        [[16320., 23060., 25675., ..., 35045., 30765., 20480.],
         [25320., 36305., 39455., ..., 48690., 41935., 27635.],
         [30160., 43860., 48975., ..., 51505., 42775., 27885.],
         ...,
         [33980., 48895., 52740., ..., 54705., 44440., 29430.],
         [30775., 44130., 46585., ..., 47145., 38285., 24405.],
         [21690., 30535., 31280., ..., 32680., 26285., 16600.]],

        [[16320., 23060., 25675., ..., 35045., 30765., 20480.],
         [25320., 36305., 39455., ..., 48690., 41935., 27635.],
         [30160., 43860., 48975., ..., 51505., 42775., 27885.],
         ...,
         [33980., 48895., 52740., ..., 54705., 44440., 29430.],
         [30775., 44130., 46585., ..., 47145., 38285., 24405.],
         [21690., 30535., 31280., ..., 32680., 26285., 16600.]],

        [[16320., 23060., 25675., ..., 35045., 30765., 20480.],
         [25320., 36305., 39455., ..., 48690., 41935., 27635.],
         [30160., 43860., 48975., ..., 51505., 42775., 27885.],
         ...,
         [33980., 48895., 52740., ..., 54705., 44440., 29430.],
         [30775., 44130., 46585., ..., 47145., 38285., 24405.],
         [21690., 30535., 31280., ..., 32680., 26285., 16600.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [6], 'to': [2]}
ms node:
{'name': 'conv2d', 'output': array([[[[ 8730., 13135., 16430., ..., 28700., 28415., 21125.],
         [16230., 24910., 31025., ..., 42170., 41625., 29950.],
         [22040., 33620., 42235., ..., 51115., 49430., 34745.],
         ...,
         [25705., 40460., 49945., ..., 52435., 49990., 35420.],
         [27835., 42690., 52045., ..., 54875., 51950., 36350.],
         [20970., 31690., 38090., ..., 41525., 38725., 26615.]],

        [[ 8730., 13135., 16430., ..., 28700., 28415., 21125.],
         [16230., 24910., 31025., ..., 42170., 41625., 29950.],
         [22040., 33620., 42235., ..., 51115., 49430., 34745.],
         ...,
         [25705., 40460., 49945., ..., 52435., 49990., 35420.],
         [27835., 42690., 52045., ..., 54875., 51950., 36350.],
         [20970., 31690., 38090., ..., 41525., 38725., 26615.]],

        [[ 8730., 13135., 16430., ..., 28700., 28415., 21125.],
         [16230., 24910., 31025., ..., 42170., 41625., 29950.],
         [22040., 33620., 42235., ..., 51115., 49430., 34745.],
         ...,
         [25705., 40460., 49945., ..., 52435., 49990., 35420.],
         [27835., 42690., 52045., ..., 54875., 51950., 36350.],
         [20970., 31690., 38090., ..., 41525., 38725., 26615.]],

        ...,

        [[ 8730., 13135., 16430., ..., 28700., 28415., 21125.],
         [16230., 24910., 31025., ..., 42170., 41625., 29950.],
         [22040., 33620., 42235., ..., 51115., 49430., 34745.],
         ...,
         [25705., 40460., 49945., ..., 52435., 49990., 35420.],
         [27835., 42690., 52045., ..., 54875., 51950., 36350.],
         [20970., 31690., 38090., ..., 41525., 38725., 26615.]],

        [[ 8730., 13135., 16430., ..., 28700., 28415., 21125.],
         [16230., 24910., 31025., ..., 42170., 41625., 29950.],
         [22040., 33620., 42235., ..., 51115., 49430., 34745.],
         ...,
         [25705., 40460., 49945., ..., 52435., 49990., 35420.],
         [27835., 42690., 52045., ..., 54875., 51950., 36350.],
         [20970., 31690., 38090., ..., 41525., 38725., 26615.]],

        [[ 8730., 13135., 16430., ..., 28700., 28415., 21125.],
         [16230., 24910., 31025., ..., 42170., 41625., 29950.],
         [22040., 33620., 42235., ..., 51115., 49430., 34745.],
         ...,
         [25705., 40460., 49945., ..., 52435., 49990., 35420.],
         [27835., 42690., 52045., ..., 54875., 51950., 36350.],
         [20970., 31690., 38090., ..., 41525., 38725., 26615.]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [6], 'to': [2]}
torch node:
{'name': 'conv2d', 'output': array([[[[ 8730., 13135., 16430., ..., 28700., 28415., 21125.],
         [16230., 24910., 31025., ..., 42170., 41625., 29950.],
         [22040., 33620., 42235., ..., 51115., 49430., 34745.],
         ...,
         [25705., 40460., 49945., ..., 52435., 49990., 35420.],
         [27835., 42690., 52045., ..., 54875., 51950., 36350.],
         [20970., 31690., 38090., ..., 41525., 38725., 26615.]],

        [[ 8730., 13135., 16430., ..., 28700., 28415., 21125.],
         [16230., 24910., 31025., ..., 42170., 41625., 29950.],
         [22040., 33620., 42235., ..., 51115., 49430., 34745.],
         ...,
         [25705., 40460., 49945., ..., 52435., 49990., 35420.],
         [27835., 42690., 52045., ..., 54875., 51950., 36350.],
         [20970., 31690., 38090., ..., 41525., 38725., 26615.]],

        [[ 8730., 13135., 16430., ..., 28700., 28415., 21125.],
         [16230., 24910., 31025., ..., 42170., 41625., 29950.],
         [22040., 33620., 42235., ..., 51115., 49430., 34745.],
         ...,
         [25705., 40460., 49945., ..., 52435., 49990., 35420.],
         [27835., 42690., 52045., ..., 54875., 51950., 36350.],
         [20970., 31690., 38090., ..., 41525., 38725., 26615.]],

        ...,

        [[ 8730., 13135., 16430., ..., 28700., 28415., 21125.],
         [16230., 24910., 31025., ..., 42170., 41625., 29950.],
         [22040., 33620., 42235., ..., 51115., 49430., 34745.],
         ...,
         [25705., 40460., 49945., ..., 52435., 49990., 35420.],
         [27835., 42690., 52045., ..., 54875., 51950., 36350.],
         [20970., 31690., 38090., ..., 41525., 38725., 26615.]],

        [[ 8730., 13135., 16430., ..., 28700., 28415., 21125.],
         [16230., 24910., 31025., ..., 42170., 41625., 29950.],
         [22040., 33620., 42235., ..., 51115., 49430., 34745.],
         ...,
         [25705., 40460., 49945., ..., 52435., 49990., 35420.],
         [27835., 42690., 52045., ..., 54875., 51950., 36350.],
         [20970., 31690., 38090., ..., 41525., 38725., 26615.]],

        [[ 8730., 13135., 16430., ..., 28700., 28415., 21125.],
         [16230., 24910., 31025., ..., 42170., 41625., 29950.],
         [22040., 33620., 42235., ..., 51115., 49430., 34745.],
         ...,
         [25705., 40460., 49945., ..., 52435., 49990., 35420.],
         [27835., 42690., 52045., ..., 54875., 51950., 36350.],
         [20970., 31690., 38090., ..., 41525., 38725., 26615.]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [6], 'to': [2]}

generate models:4

analyse output arrays in iter:5

pre layer res:
20:square
{'name': 'square', 'output': array([[[[200704., 152881., 171396., ..., 112225.,  85264.,  93025.],
         [153664., 126025., 150544., ..., 164836., 110224.,  75076.],
         [125316., 131044.,  99225., ..., 148996., 147456.,  96721.],
         ...,
         [211600., 244036., 331776., ..., 106276., 174724., 277729.],
         [236196., 166464., 261121., ..., 133225., 184041., 271441.],
         [258064., 215296., 214369., ..., 186624., 205209., 257049.]],

        [[156816., 123201., 126025., ..., 131769., 115600., 127449.],
         [124609.,  97969., 101761., ..., 160000., 138384., 112225.],
         [121801., 101124.,  90601., ..., 160801., 153664., 123904.],
         ...,
         [168100., 227529., 299209., ...,  96100.,  78961., 184041.],
         [224676., 169744., 252004., ..., 113569.,  99856., 175561.],
         [171396., 170569., 184041., ...,  98596., 110889., 117649.]],

        [[111556., 126025., 148996., ...,  85264.,  97969., 112896.],
         [105625.,  85849., 107584., ...,  82944., 101124., 104329.],
         [116281.,  55696.,  82369., ...,  76176.,  80656.,  73984.],
         ...,
         [134689., 128881., 162409., ...,  99856.,  75076., 172225.],
         [184041., 103041., 138384., ..., 100489.,  96100., 160801.],
         [146689., 122500., 120409., ...,  82369., 101124., 109561.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [15], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[ 9133003., 13333792., 13009639., ..., 11470709.,  9290272.,
           6357903.],
         [13084676., 18494156., 17659924., ..., 16287159., 12694390.,
           8681431.],
         [13772219., 18759436., 17591368., ..., 16590398., 13384905.,
           9110723.],
         ...,
         [20734436., 26565440., 25492208., ..., 16323543., 16739920.,
          12166752.],
         [18071528., 23120500., 22522092., ..., 13455211., 13522644.,
           9840306.],
         [12157697., 15346362., 15056398., ...,  9204922.,  9109170.,
           6537022.]],

        [[ 9133003., 13333792., 13009639., ..., 11470709.,  9290272.,
           6357903.],
         [13084676., 18494156., 17659924., ..., 16287159., 12694390.,
           8681431.],
         [13772219., 18759436., 17591368., ..., 16590398., 13384905.,
           9110723.],
         ...,
         [20734436., 26565440., 25492208., ..., 16323543., 16739920.,
          12166752.],
         [18071528., 23120500., 22522092., ..., 13455211., 13522644.,
           9840306.],
         [12157697., 15346362., 15056398., ...,  9204922.,  9109170.,
           6537022.]],

        [[ 9133003., 13333792., 13009639., ..., 11470709.,  9290272.,
           6357903.],
         [13084676., 18494156., 17659924., ..., 16287159., 12694390.,
           8681431.],
         [13772219., 18759436., 17591368., ..., 16590398., 13384905.,
           9110723.],
         ...,
         [20734436., 26565440., 25492208., ..., 16323543., 16739920.,
          12166752.],
         [18071528., 23120500., 22522092., ..., 13455211., 13522644.,
           9840306.],
         [12157697., 15346362., 15056398., ...,  9204922.,  9109170.,
           6537022.]],

        ...,

        [[ 9133003., 13333792., 13009639., ..., 11470709.,  9290272.,
           6357903.],
         [13084676., 18494156., 17659924., ..., 16287159., 12694390.,
           8681431.],
         [13772219., 18759436., 17591368., ..., 16590398., 13384905.,
           9110723.],
         ...,
         [20734436., 26565440., 25492208., ..., 16323543., 16739920.,
          12166752.],
         [18071528., 23120500., 22522092., ..., 13455211., 13522644.,
           9840306.],
         [12157697., 15346362., 15056398., ...,  9204922.,  9109170.,
           6537022.]],

        [[ 9133003., 13333792., 13009639., ..., 11470709.,  9290272.,
           6357903.],
         [13084676., 18494156., 17659924., ..., 16287159., 12694390.,
           8681431.],
         [13772219., 18759436., 17591368., ..., 16590398., 13384905.,
           9110723.],
         ...,
         [20734436., 26565440., 25492208., ..., 16323543., 16739920.,
          12166752.],
         [18071528., 23120500., 22522092., ..., 13455211., 13522644.,
           9840306.],
         [12157697., 15346362., 15056398., ...,  9204922.,  9109170.,
           6537022.]],

        [[ 9133003., 13333792., 13009639., ..., 11470709.,  9290272.,
           6357903.],
         [13084676., 18494156., 17659924., ..., 16287159., 12694390.,
           8681431.],
         [13772219., 18759436., 17591368., ..., 16590398., 13384905.,
           9110723.],
         ...,
         [20734436., 26565440., 25492208., ..., 16323543., 16739920.,
          12166752.],
         [18071528., 23120500., 22522092., ..., 13455211., 13522644.,
           9840306.],
         [12157697., 15346362., 15056398., ...,  9204922.,  9109170.,
           6537022.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [20], 'to': [2]}
ms node:
{'name': 'conv2d', 'output': array([[[[ 5772868.,  9006462., 10868366., ..., 10342572.,  8968538.,
           6667967.],
         [ 8990242., 13435375., 15800230., ..., 14812995., 12756948.,
           9378714.],
         [10508341., 15329423., 18143040., ..., 17365284., 15477167.,
          10723460.],
         ...,
         [15802612., 22408140., 25142372., ..., 16641692., 18707100.,
          13820578.],
         [17199244., 24762944., 26715724., ..., 16205932., 18277604.,
          14048542.],
         [11491934., 17281560., 18573000., ..., 11203978., 12451878.,
           9599981.]],

        [[ 5772868.,  9006462., 10868366., ..., 10342572.,  8968538.,
           6667967.],
         [ 8990242., 13435375., 15800230., ..., 14812995., 12756948.,
           9378714.],
         [10508341., 15329423., 18143040., ..., 17365284., 15477167.,
          10723460.],
         ...,
         [15802612., 22408140., 25142372., ..., 16641692., 18707100.,
          13820578.],
         [17199244., 24762944., 26715724., ..., 16205932., 18277604.,
          14048542.],
         [11491934., 17281560., 18573000., ..., 11203978., 12451878.,
           9599981.]],

        [[ 5772868.,  9006462., 10868366., ..., 10342572.,  8968538.,
           6667967.],
         [ 8990242., 13435375., 15800230., ..., 14812995., 12756948.,
           9378714.],
         [10508341., 15329423., 18143040., ..., 17365284., 15477167.,
          10723460.],
         ...,
         [15802612., 22408140., 25142372., ..., 16641692., 18707100.,
          13820578.],
         [17199244., 24762944., 26715724., ..., 16205932., 18277604.,
          14048542.],
         [11491934., 17281560., 18573000., ..., 11203978., 12451878.,
           9599981.]],

        ...,

        [[ 5772868.,  9006462., 10868366., ..., 10342572.,  8968538.,
           6667967.],
         [ 8990242., 13435375., 15800230., ..., 14812995., 12756948.,
           9378714.],
         [10508341., 15329423., 18143040., ..., 17365284., 15477167.,
          10723460.],
         ...,
         [15802612., 22408140., 25142372., ..., 16641692., 18707100.,
          13820578.],
         [17199244., 24762944., 26715724., ..., 16205932., 18277604.,
          14048542.],
         [11491934., 17281560., 18573000., ..., 11203978., 12451878.,
           9599981.]],

        [[ 5772868.,  9006462., 10868366., ..., 10342572.,  8968538.,
           6667967.],
         [ 8990242., 13435375., 15800230., ..., 14812995., 12756948.,
           9378714.],
         [10508341., 15329423., 18143040., ..., 17365284., 15477167.,
          10723460.],
         ...,
         [15802612., 22408140., 25142372., ..., 16641692., 18707100.,
          13820578.],
         [17199244., 24762944., 26715724., ..., 16205932., 18277604.,
          14048542.],
         [11491934., 17281560., 18573000., ..., 11203978., 12451878.,
           9599981.]],

        [[ 5772868.,  9006462., 10868366., ..., 10342572.,  8968538.,
           6667967.],
         [ 8990242., 13435375., 15800230., ..., 14812995., 12756948.,
           9378714.],
         [10508341., 15329423., 18143040., ..., 17365284., 15477167.,
          10723460.],
         ...,
         [15802612., 22408140., 25142372., ..., 16641692., 18707100.,
          13820578.],
         [17199244., 24762944., 26715724., ..., 16205932., 18277604.,
          14048542.],
         [11491934., 17281560., 18573000., ..., 11203978., 12451878.,
           9599981.]]]], dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [20], 'to': [2]}
torch node:
{'name': 'conv2d', 'output': array([[[[ 5772868.,  9006462., 10868366., ..., 10342572.,  8968538.,
           6667967.],
         [ 8990242., 13435375., 15800230., ..., 14812995., 12756948.,
           9378714.],
         [10508341., 15329423., 18143040., ..., 17365284., 15477167.,
          10723460.],
         ...,
         [15802612., 22408148., 25142380., ..., 16641692., 18707100.,
          13820578.],
         [17199244., 24762952., 26715728., ..., 16205932., 18277608.,
          14048542.],
         [11491934., 17281560., 18573000., ..., 11203978., 12451878.,
           9599981.]],

        [[ 5772868.,  9006462., 10868366., ..., 10342572.,  8968538.,
           6667967.],
         [ 8990242., 13435375., 15800230., ..., 14812995., 12756948.,
           9378714.],
         [10508341., 15329423., 18143040., ..., 17365284., 15477167.,
          10723460.],
         ...,
         [15802612., 22408148., 25142380., ..., 16641692., 18707100.,
          13820578.],
         [17199244., 24762952., 26715728., ..., 16205932., 18277608.,
          14048542.],
         [11491934., 17281560., 18573000., ..., 11203978., 12451878.,
           9599981.]],

        [[ 5772868.,  9006462., 10868366., ..., 10342572.,  8968538.,
           6667967.],
         [ 8990242., 13435375., 15800230., ..., 14812995., 12756948.,
           9378714.],
         [10508341., 15329423., 18143040., ..., 17365284., 15477167.,
          10723460.],
         ...,
         [15802612., 22408148., 25142380., ..., 16641692., 18707100.,
          13820578.],
         [17199244., 24762952., 26715728., ..., 16205932., 18277608.,
          14048542.],
         [11491934., 17281560., 18573000., ..., 11203978., 12451878.,
           9599981.]],

        ...,

        [[ 5772868.,  9006462., 10868366., ..., 10342572.,  8968538.,
           6667967.],
         [ 8990242., 13435375., 15800230., ..., 14812995., 12756948.,
           9378714.],
         [10508341., 15329423., 18143040., ..., 17365284., 15477167.,
          10723460.],
         ...,
         [15802612., 22408148., 25142380., ..., 16641692., 18707100.,
          13820578.],
         [17199244., 24762952., 26715728., ..., 16205932., 18277608.,
          14048542.],
         [11491934., 17281560., 18573000., ..., 11203978., 12451878.,
           9599981.]],

        [[ 5772868.,  9006462., 10868366., ..., 10342572.,  8968538.,
           6667967.],
         [ 8990242., 13435375., 15800230., ..., 14812995., 12756948.,
           9378714.],
         [10508341., 15329423., 18143040., ..., 17365284., 15477167.,
          10723460.],
         ...,
         [15802612., 22408148., 25142380., ..., 16641692., 18707100.,
          13820578.],
         [17199244., 24762952., 26715728., ..., 16205932., 18277608.,
          14048542.],
         [11491934., 17281560., 18573000., ..., 11203978., 12451878.,
           9599981.]],

        [[ 5772868.,  9006462., 10868366., ..., 10342572.,  8968538.,
           6667967.],
         [ 8990242., 13435375., 15800230., ..., 14812995., 12756948.,
           9378714.],
         [10508341., 15329423., 18143040., ..., 17365284., 15477167.,
          10723460.],
         ...,
         [15802612., 22408148., 25142380., ..., 16641692., 18707100.,
          13820578.],
         [17199244., 24762952., 26715728., ..., 16205932., 18277608.,
          14048542.],
         [11491934., 17281560., 18573000., ..., 11203978., 12451878.,
           9599981.]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [20], 'to': [2]}

generate models:6

analyse output arrays in iter:6

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[164., 105., 118., ..., 109., 108.,  91.],
         [167., 116.,  72., ..., 105., 105.,  89.],
         [140., 142., 119., ..., 104.,  84.,  78.],
         ...,
         [139., 142., 135., ...,  89.,  97., 126.],
         [163., 153., 146., ...,  85.,  98., 127.],
         [183., 176., 154., ...,  94.,  91., 122.]],

        [[206., 140., 148., ..., 147., 147., 129.],
         [213., 160., 109., ..., 142., 142., 127.],
         [191., 193., 163., ..., 139., 120., 115.],
         ...,
         [148., 155., 156., ..., 134., 148., 176.],
         [157., 164., 164., ..., 130., 148., 178.],
         [153., 182., 154., ..., 134., 133., 170.]],

        [[ 84.,  61., 101., ...,  73.,  69.,  57.],
         [ 84.,  49.,  43., ...,  79.,  72.,  57.],
         [ 65.,  66.,  79., ...,  84.,  58.,  49.],
         ...,
         [ 81.,  74.,  72., ...,  28.,  24.,  49.],
         [ 85.,  82.,  90., ...,  19.,  27.,  48.],
         [102., 116., 100., ...,  29.,  26.,  44.]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[ 9153., 12903., 13623., ..., 12439.,  9586.,  5824.],
         [12081., 17348., 18674., ..., 16728., 13087.,  8007.],
         [11087., 15642., 16623., ..., 15617., 12238.,  7443.],
         ...,
         [15519., 19883., 16858., ..., 14793., 13181.,  9860.],
         [12034., 15615., 13571., ..., 11521., 10046.,  7430.],
         [ 7845., 10426.,  9470., ...,  7609.,  6434.,  4595.]],

        [[ 9153., 12903., 13623., ..., 12439.,  9586.,  5824.],
         [12081., 17348., 18674., ..., 16728., 13087.,  8007.],
         [11087., 15642., 16623., ..., 15617., 12238.,  7443.],
         ...,
         [15519., 19883., 16858., ..., 14793., 13181.,  9860.],
         [12034., 15615., 13571., ..., 11521., 10046.,  7430.],
         [ 7845., 10426.,  9470., ...,  7609.,  6434.,  4595.]],

        [[ 9153., 12903., 13623., ..., 12439.,  9586.,  5824.],
         [12081., 17348., 18674., ..., 16728., 13087.,  8007.],
         [11087., 15642., 16623., ..., 15617., 12238.,  7443.],
         ...,
         [15519., 19883., 16858., ..., 14793., 13181.,  9860.],
         [12034., 15615., 13571., ..., 11521., 10046.,  7430.],
         [ 7845., 10426.,  9470., ...,  7609.,  6434.,  4595.]],

        ...,

        [[ 9153., 12903., 13623., ..., 12439.,  9586.,  5824.],
         [12081., 17348., 18674., ..., 16728., 13087.,  8007.],
         [11087., 15642., 16623., ..., 15617., 12238.,  7443.],
         ...,
         [15519., 19883., 16858., ..., 14793., 13181.,  9860.],
         [12034., 15615., 13571., ..., 11521., 10046.,  7430.],
         [ 7845., 10426.,  9470., ...,  7609.,  6434.,  4595.]],

        [[ 9153., 12903., 13623., ..., 12439.,  9586.,  5824.],
         [12081., 17348., 18674., ..., 16728., 13087.,  8007.],
         [11087., 15642., 16623., ..., 15617., 12238.,  7443.],
         ...,
         [15519., 19883., 16858., ..., 14793., 13181.,  9860.],
         [12034., 15615., 13571., ..., 11521., 10046.,  7430.],
         [ 7845., 10426.,  9470., ...,  7609.,  6434.,  4595.]],

        [[ 9153., 12903., 13623., ..., 12439.,  9586.,  5824.],
         [12081., 17348., 18674., ..., 16728., 13087.,  8007.],
         [11087., 15642., 16623., ..., 15617., 12238.,  7443.],
         ...,
         [15519., 19883., 16858., ..., 14793., 13181.,  9860.],
         [12034., 15615., 13571., ..., 11521., 10046.,  7430.],
         [ 7845., 10426.,  9470., ...,  7609.,  6434.,  4595.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [0], 'to': [2]}
ms node:
{'name': 'conv2d', 'output': array([[[[ 6004.,  9077., 10570., ..., 10490.,  9676.,  6291.],
         [ 8417., 13007., 15418., ..., 15121., 13829.,  9021.],
         [ 9061., 13870., 16703., ..., 16329., 15377., 10133.],
         ...,
         [13564., 18738., 19154., ..., 15080., 16237., 12359.],
         [12224., 16828., 17476., ..., 13533., 14379., 10782.],
         [ 8040., 11377., 12103., ...,  9487.,  9643.,  7107.]],

        [[ 6004.,  9077., 10570., ..., 10490.,  9676.,  6291.],
         [ 8417., 13007., 15418., ..., 15121., 13829.,  9021.],
         [ 9061., 13870., 16703., ..., 16329., 15377., 10133.],
         ...,
         [13564., 18738., 19154., ..., 15080., 16237., 12359.],
         [12224., 16828., 17476., ..., 13533., 14379., 10782.],
         [ 8040., 11377., 12103., ...,  9487.,  9643.,  7107.]],

        [[ 6004.,  9077., 10570., ..., 10490.,  9676.,  6291.],
         [ 8417., 13007., 15418., ..., 15121., 13829.,  9021.],
         [ 9061., 13870., 16703., ..., 16329., 15377., 10133.],
         ...,
         [13564., 18738., 19154., ..., 15080., 16237., 12359.],
         [12224., 16828., 17476., ..., 13533., 14379., 10782.],
         [ 8040., 11377., 12103., ...,  9487.,  9643.,  7107.]],

        ...,

        [[ 6004.,  9077., 10570., ..., 10490.,  9676.,  6291.],
         [ 8417., 13007., 15418., ..., 15121., 13829.,  9021.],
         [ 9061., 13870., 16703., ..., 16329., 15377., 10133.],
         ...,
         [13564., 18738., 19154., ..., 15080., 16237., 12359.],
         [12224., 16828., 17476., ..., 13533., 14379., 10782.],
         [ 8040., 11377., 12103., ...,  9487.,  9643.,  7107.]],

        [[ 6004.,  9077., 10570., ..., 10490.,  9676.,  6291.],
         [ 8417., 13007., 15418., ..., 15121., 13829.,  9021.],
         [ 9061., 13870., 16703., ..., 16329., 15377., 10133.],
         ...,
         [13564., 18738., 19154., ..., 15080., 16237., 12359.],
         [12224., 16828., 17476., ..., 13533., 14379., 10782.],
         [ 8040., 11377., 12103., ...,  9487.,  9643.,  7107.]],

        [[ 6004.,  9077., 10570., ..., 10490.,  9676.,  6291.],
         [ 8417., 13007., 15418., ..., 15121., 13829.,  9021.],
         [ 9061., 13870., 16703., ..., 16329., 15377., 10133.],
         ...,
         [13564., 18738., 19154., ..., 15080., 16237., 12359.],
         [12224., 16828., 17476., ..., 13533., 14379., 10782.],
         [ 8040., 11377., 12103., ...,  9487.,  9643.,  7107.]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [0], 'to': [2]}
torch node:
{'name': 'conv2d', 'output': array([[[[ 6004.,  9077., 10570., ..., 10490.,  9676.,  6291.],
         [ 8417., 13007., 15418., ..., 15121., 13829.,  9021.],
         [ 9061., 13870., 16703., ..., 16329., 15377., 10133.],
         ...,
         [13564., 18738., 19154., ..., 15080., 16237., 12359.],
         [12224., 16828., 17476., ..., 13533., 14379., 10782.],
         [ 8040., 11377., 12103., ...,  9487.,  9643.,  7107.]],

        [[ 6004.,  9077., 10570., ..., 10490.,  9676.,  6291.],
         [ 8417., 13007., 15418., ..., 15121., 13829.,  9021.],
         [ 9061., 13870., 16703., ..., 16329., 15377., 10133.],
         ...,
         [13564., 18738., 19154., ..., 15080., 16237., 12359.],
         [12224., 16828., 17476., ..., 13533., 14379., 10782.],
         [ 8040., 11377., 12103., ...,  9487.,  9643.,  7107.]],

        [[ 6004.,  9077., 10570., ..., 10490.,  9676.,  6291.],
         [ 8417., 13007., 15418., ..., 15121., 13829.,  9021.],
         [ 9061., 13870., 16703., ..., 16329., 15377., 10133.],
         ...,
         [13564., 18738., 19154., ..., 15080., 16237., 12359.],
         [12224., 16828., 17476., ..., 13533., 14379., 10782.],
         [ 8040., 11377., 12103., ...,  9487.,  9643.,  7107.]],

        ...,

        [[ 6004.,  9077., 10570., ..., 10490.,  9676.,  6291.],
         [ 8417., 13007., 15418., ..., 15121., 13829.,  9021.],
         [ 9061., 13870., 16703., ..., 16329., 15377., 10133.],
         ...,
         [13564., 18738., 19154., ..., 15080., 16237., 12359.],
         [12224., 16828., 17476., ..., 13533., 14379., 10782.],
         [ 8040., 11377., 12103., ...,  9487.,  9643.,  7107.]],

        [[ 6004.,  9077., 10570., ..., 10490.,  9676.,  6291.],
         [ 8417., 13007., 15418., ..., 15121., 13829.,  9021.],
         [ 9061., 13870., 16703., ..., 16329., 15377., 10133.],
         ...,
         [13564., 18738., 19154., ..., 15080., 16237., 12359.],
         [12224., 16828., 17476., ..., 13533., 14379., 10782.],
         [ 8040., 11377., 12103., ...,  9487.,  9643.,  7107.]],

        [[ 6004.,  9077., 10570., ..., 10490.,  9676.,  6291.],
         [ 8417., 13007., 15418., ..., 15121., 13829.,  9021.],
         [ 9061., 13870., 16703., ..., 16329., 15377., 10133.],
         ...,
         [13564., 18738., 19154., ..., 15080., 16237., 12359.],
         [12224., 16828., 17476., ..., 13533., 14379., 10782.],
         [ 8040., 11377., 12103., ...,  9487.,  9643.,  7107.]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [0], 'to': [2]}

generate models:7

analyse output arrays in iter:7

pre layer res:
7:sin
{'name': 'sin', 'output': array([[[[-0.9851359 ,  0.9978033 ,  0.90554   , ...,  0.98512036,
           0.79028547, -0.9905826 ],
         [ 0.14993681,  0.14993681,  0.92347   , ...,  0.3704243 ,
          -0.88233846, -0.89349633],
         [-0.10589759,  0.90554   , -0.8859528 , ...,  0.6851523 ,
           0.86141974, -0.10337936],
         ...,
         [ 0.9515842 ,  0.9515842 , -0.08647686, ..., -0.97430354,
          -0.5599385 , -0.97430354],
         [ 0.38625288,  0.9940834 , -0.08647686, ...,  0.9987438 ,
          -0.98052484, -0.7617388 ],
         [-0.97430354, -0.9919782 , -0.9919782 , ...,  0.995597  ,
           0.48249966, -0.24609938]],

        [[-0.21933703, -0.10589759,  0.702515  , ...,  0.6369472 ,
          -0.594642  ,  0.6017832 ],
         [ 0.9978033 , -0.9851359 , -0.32153675, ..., -0.9919782 ,
           0.38625288, -0.32845378],
         [ 0.9956758 ,  0.90554   ,  0.9978033 , ..., -0.90337163,
           0.29145208, -0.90337163],
         ...,
         [-0.10337936, -0.10337936,  0.80992705, ...,  0.6851523 ,
          -0.06834653,  0.6851523 ],
         [-0.10337936, -0.6852621 ,  0.704486  , ..., -0.4699019 ,
          -0.4699019 , -0.76111346],
         [-0.8101569 , -0.8101569 , -0.8101569 , ...,  0.99661446,
           0.9515842 ,  0.38625288]],

        [[ 0.45213336,  0.702515  , -0.4442747 , ...,  0.9704917 ,
           0.40425822, -0.4442747 ],
         [-0.9055272 , -0.2453981 ,  0.45213336, ...,  0.06994036,
          -0.24609938, -0.30561438],
         [-0.9999909 ,  0.98512036, -0.80122477, ..., -0.36479983,
           0.99661446, -0.36479983],
         ...,
         [ 0.4451657 ,  0.4451657 ,  0.06327417, ..., -0.9634732 ,
           0.3704243 , -0.9634732 ],
         [ 0.8652021 ,  0.01628534, -0.97430354, ..., -0.9634732 ,
          -0.9634732 , -0.32062322],
         [-0.7896386 ,  0.8652021 ,  0.8652021 , ..., -0.30561438,
          -0.6954739 , -0.9904999 ]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [5], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[  7.8235435 ,   0.12310416,  -4.2057877 , ...,   8.4997225 ,
            4.0588217 ,   1.0170057 ],
         [  9.939133  ,  -0.06039523,  -0.79900724, ...,  16.143486  ,
           12.294144  ,   7.982417  ],
         [ 10.869425  ,   6.789373  ,   5.04396   , ...,   8.730179  ,
           12.297461  ,  12.482565  ],
         ...,
         [  0.8842833 ,   5.6547146 ,   5.260334  , ..., -19.212786  ,
          -13.7003565 , -12.809103  ],
         [ -1.0236804 ,  -3.5174236 ,  -2.6154923 , ...,  -5.32393   ,
          -11.152883  ,  -9.806927  ],
         [ -0.63451123,  -3.677342  ,  -3.206625  , ...,  -5.544715  ,
           -7.6208873 ,  -8.85494   ]],

        [[  7.8235435 ,   0.12310416,  -4.2057877 , ...,   8.4997225 ,
            4.0588217 ,   1.0170057 ],
         [  9.939133  ,  -0.06039523,  -0.79900724, ...,  16.143486  ,
           12.294144  ,   7.982417  ],
         [ 10.869425  ,   6.789373  ,   5.04396   , ...,   8.730179  ,
           12.297461  ,  12.482565  ],
         ...,
         [  0.8842833 ,   5.6547146 ,   5.260334  , ..., -19.212786  ,
          -13.7003565 , -12.809103  ],
         [ -1.0236804 ,  -3.5174236 ,  -2.6154923 , ...,  -5.32393   ,
          -11.152883  ,  -9.806927  ],
         [ -0.63451123,  -3.677342  ,  -3.206625  , ...,  -5.544715  ,
           -7.6208873 ,  -8.85494   ]],

        [[  7.8235435 ,   0.12310416,  -4.2057877 , ...,   8.4997225 ,
            4.0588217 ,   1.0170057 ],
         [  9.939133  ,  -0.06039523,  -0.79900724, ...,  16.143486  ,
           12.294144  ,   7.982417  ],
         [ 10.869425  ,   6.789373  ,   5.04396   , ...,   8.730179  ,
           12.297461  ,  12.482565  ],
         ...,
         [  0.8842833 ,   5.6547146 ,   5.260334  , ..., -19.212786  ,
          -13.7003565 , -12.809103  ],
         [ -1.0236804 ,  -3.5174236 ,  -2.6154923 , ...,  -5.32393   ,
          -11.152883  ,  -9.806927  ],
         [ -0.63451123,  -3.677342  ,  -3.206625  , ...,  -5.544715  ,
           -7.6208873 ,  -8.85494   ]],

        ...,

        [[  7.8235435 ,   0.12310416,  -4.2057877 , ...,   8.4997225 ,
            4.0588217 ,   1.0170057 ],
         [  9.939133  ,  -0.06039523,  -0.79900724, ...,  16.143486  ,
           12.294144  ,   7.982417  ],
         [ 10.869425  ,   6.789373  ,   5.04396   , ...,   8.730179  ,
           12.297461  ,  12.482565  ],
         ...,
         [  0.8842833 ,   5.6547146 ,   5.260334  , ..., -19.212786  ,
          -13.7003565 , -12.809103  ],
         [ -1.0236804 ,  -3.5174236 ,  -2.6154923 , ...,  -5.32393   ,
          -11.152883  ,  -9.806927  ],
         [ -0.63451123,  -3.677342  ,  -3.206625  , ...,  -5.544715  ,
           -7.6208873 ,  -8.85494   ]],

        [[  7.8235435 ,   0.12310416,  -4.2057877 , ...,   8.4997225 ,
            4.0588217 ,   1.0170057 ],
         [  9.939133  ,  -0.06039523,  -0.79900724, ...,  16.143486  ,
           12.294144  ,   7.982417  ],
         [ 10.869425  ,   6.789373  ,   5.04396   , ...,   8.730179  ,
           12.297461  ,  12.482565  ],
         ...,
         [  0.8842833 ,   5.6547146 ,   5.260334  , ..., -19.212786  ,
          -13.7003565 , -12.809103  ],
         [ -1.0236804 ,  -3.5174236 ,  -2.6154923 , ...,  -5.32393   ,
          -11.152883  ,  -9.806927  ],
         [ -0.63451123,  -3.677342  ,  -3.206625  , ...,  -5.544715  ,
           -7.6208873 ,  -8.85494   ]],

        [[  7.8235435 ,   0.12310416,  -4.2057877 , ...,   8.4997225 ,
            4.0588217 ,   1.0170057 ],
         [  9.939133  ,  -0.06039523,  -0.79900724, ...,  16.143486  ,
           12.294144  ,   7.982417  ],
         [ 10.869425  ,   6.789373  ,   5.04396   , ...,   8.730179  ,
           12.297461  ,  12.482565  ],
         ...,
         [  0.8842833 ,   5.6547146 ,   5.260334  , ..., -19.212786  ,
          -13.7003565 , -12.809103  ],
         [ -1.0236804 ,  -3.5174236 ,  -2.6154923 , ...,  -5.32393   ,
          -11.152883  ,  -9.806927  ],
         [ -0.63451123,  -3.677342  ,  -3.206625  , ...,  -5.544715  ,
           -7.6208873 ,  -8.85494   ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [7], 'to': [2]}
ms node:
{'name': 'conv2d', 'output': array([[[[  4.963588  ,   6.867285  ,   3.8078794 , ...,   8.264113  ,
            6.2868204 ,   0.32489926],
         [  4.5828953 ,   5.572975  ,   0.8397695 , ...,  10.473413  ,
           13.400597  ,   8.568139  ],
         [  5.60644   ,  11.279898  ,  12.617933  , ...,  12.078713  ,
           13.190235  ,   9.343888  ],
         ...,
         [  2.6729038 ,   2.9921446 ,   5.0761642 , ..., -13.024895  ,
          -11.725344  ,  -3.6933327 ],
         [ -0.13022733,  -4.5550413 ,   0.32850912, ...,  -6.437992  ,
          -15.280393  , -11.521738  ],
         [  2.9428854 ,  -0.7247879 ,   1.2838185 , ...,  -6.6725435 ,
          -12.202956  ,  -9.612753  ]],

        [[  4.963588  ,   6.867285  ,   3.8078794 , ...,   8.264113  ,
            6.2868204 ,   0.32489926],
         [  4.5828953 ,   5.572975  ,   0.8397695 , ...,  10.473413  ,
           13.400597  ,   8.568139  ],
         [  5.60644   ,  11.279898  ,  12.617933  , ...,  12.078713  ,
           13.190235  ,   9.343888  ],
         ...,
         [  2.6729038 ,   2.9921446 ,   5.0761642 , ..., -13.024895  ,
          -11.725344  ,  -3.6933327 ],
         [ -0.13022733,  -4.5550413 ,   0.32850912, ...,  -6.437992  ,
          -15.280393  , -11.521738  ],
         [  2.9428854 ,  -0.7247879 ,   1.2838185 , ...,  -6.6725435 ,
          -12.202956  ,  -9.612753  ]],

        [[  4.963588  ,   6.867285  ,   3.8078794 , ...,   8.264113  ,
            6.2868204 ,   0.32489926],
         [  4.5828953 ,   5.572975  ,   0.8397695 , ...,  10.473413  ,
           13.400597  ,   8.568139  ],
         [  5.60644   ,  11.279898  ,  12.617933  , ...,  12.078713  ,
           13.190235  ,   9.343888  ],
         ...,
         [  2.6729038 ,   2.9921446 ,   5.0761642 , ..., -13.024895  ,
          -11.725344  ,  -3.6933327 ],
         [ -0.13022733,  -4.5550413 ,   0.32850912, ...,  -6.437992  ,
          -15.280393  , -11.521738  ],
         [  2.9428854 ,  -0.7247879 ,   1.2838185 , ...,  -6.6725435 ,
          -12.202956  ,  -9.612753  ]],

        ...,

        [[  4.963588  ,   6.867285  ,   3.8078794 , ...,   8.264113  ,
            6.2868204 ,   0.32489926],
         [  4.5828953 ,   5.572975  ,   0.8397695 , ...,  10.473413  ,
           13.400597  ,   8.568139  ],
         [  5.60644   ,  11.279898  ,  12.617933  , ...,  12.078713  ,
           13.190235  ,   9.343888  ],
         ...,
         [  2.6729038 ,   2.9921446 ,   5.0761642 , ..., -13.024895  ,
          -11.725344  ,  -3.6933327 ],
         [ -0.13022733,  -4.5550413 ,   0.32850912, ...,  -6.437992  ,
          -15.280393  , -11.521738  ],
         [  2.9428854 ,  -0.7247879 ,   1.2838185 , ...,  -6.6725435 ,
          -12.202956  ,  -9.612753  ]],

        [[  4.963588  ,   6.867285  ,   3.8078794 , ...,   8.264113  ,
            6.2868204 ,   0.32489926],
         [  4.5828953 ,   5.572975  ,   0.8397695 , ...,  10.473413  ,
           13.400597  ,   8.568139  ],
         [  5.60644   ,  11.279898  ,  12.617933  , ...,  12.078713  ,
           13.190235  ,   9.343888  ],
         ...,
         [  2.6729038 ,   2.9921446 ,   5.0761642 , ..., -13.024895  ,
          -11.725344  ,  -3.6933327 ],
         [ -0.13022733,  -4.5550413 ,   0.32850912, ...,  -6.437992  ,
          -15.280393  , -11.521738  ],
         [  2.9428854 ,  -0.7247879 ,   1.2838185 , ...,  -6.6725435 ,
          -12.202956  ,  -9.612753  ]],

        [[  4.963588  ,   6.867285  ,   3.8078794 , ...,   8.264113  ,
            6.2868204 ,   0.32489926],
         [  4.5828953 ,   5.572975  ,   0.8397695 , ...,  10.473413  ,
           13.400597  ,   8.568139  ],
         [  5.60644   ,  11.279898  ,  12.617933  , ...,  12.078713  ,
           13.190235  ,   9.343888  ],
         ...,
         [  2.6729038 ,   2.9921446 ,   5.0761642 , ..., -13.024895  ,
          -11.725344  ,  -3.6933327 ],
         [ -0.13022733,  -4.5550413 ,   0.32850912, ...,  -6.437992  ,
          -15.280393  , -11.521738  ],
         [  2.9428854 ,  -0.7247879 ,   1.2838185 , ...,  -6.6725435 ,
          -12.202956  ,  -9.612753  ]]]], dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [7], 'to': [2]}
torch node:
{'name': 'conv2d', 'output': array([[[[  4.963589  ,   6.867283  ,   3.807879  , ...,   8.264114  ,
            6.28682   ,   0.32489765],
         [  4.582896  ,   5.572973  ,   0.8397698 , ...,  10.473414  ,
           13.400594  ,   8.568138  ],
         [  5.606442  ,  11.279896  ,  12.617929  , ...,  12.078708  ,
           13.190233  ,   9.343885  ],
         ...,
         [  2.6729038 ,   2.9921446 ,   5.076165  , ..., -13.024893  ,
          -11.725342  ,  -3.6933331 ],
         [ -0.13022679,  -4.5550423 ,   0.32850948, ...,  -6.437991  ,
          -15.280394  , -11.521738  ],
         [  2.9428856 ,  -0.72478795,   1.2838184 , ...,  -6.6725416 ,
          -12.202956  ,  -9.612753  ]],

        [[  4.963589  ,   6.867283  ,   3.807879  , ...,   8.264114  ,
            6.28682   ,   0.32489765],
         [  4.582896  ,   5.572973  ,   0.8397698 , ...,  10.473414  ,
           13.400594  ,   8.568138  ],
         [  5.606442  ,  11.279896  ,  12.617929  , ...,  12.078708  ,
           13.190233  ,   9.343885  ],
         ...,
         [  2.6729038 ,   2.9921446 ,   5.076165  , ..., -13.024893  ,
          -11.725342  ,  -3.6933331 ],
         [ -0.13022679,  -4.5550423 ,   0.32850948, ...,  -6.437991  ,
          -15.280394  , -11.521738  ],
         [  2.9428856 ,  -0.72478795,   1.2838184 , ...,  -6.6725416 ,
          -12.202956  ,  -9.612753  ]],

        [[  4.963589  ,   6.867283  ,   3.807879  , ...,   8.264114  ,
            6.28682   ,   0.32489765],
         [  4.582896  ,   5.572973  ,   0.8397698 , ...,  10.473414  ,
           13.400594  ,   8.568138  ],
         [  5.606442  ,  11.279896  ,  12.617929  , ...,  12.078708  ,
           13.190233  ,   9.343885  ],
         ...,
         [  2.6729038 ,   2.9921446 ,   5.076165  , ..., -13.024893  ,
          -11.725342  ,  -3.6933331 ],
         [ -0.13022679,  -4.5550423 ,   0.32850948, ...,  -6.437991  ,
          -15.280394  , -11.521738  ],
         [  2.9428856 ,  -0.72478795,   1.2838184 , ...,  -6.6725416 ,
          -12.202956  ,  -9.612753  ]],

        ...,

        [[  4.963589  ,   6.867283  ,   3.807879  , ...,   8.264114  ,
            6.28682   ,   0.32489765],
         [  4.582896  ,   5.572973  ,   0.8397698 , ...,  10.473414  ,
           13.400594  ,   8.568138  ],
         [  5.606442  ,  11.279896  ,  12.617929  , ...,  12.078708  ,
           13.190233  ,   9.343885  ],
         ...,
         [  2.6729038 ,   2.9921446 ,   5.076165  , ..., -13.024893  ,
          -11.725342  ,  -3.6933331 ],
         [ -0.13022679,  -4.5550423 ,   0.32850948, ...,  -6.437991  ,
          -15.280394  , -11.521738  ],
         [  2.9428856 ,  -0.72478795,   1.2838184 , ...,  -6.6725416 ,
          -12.202956  ,  -9.612753  ]],

        [[  4.963589  ,   6.867283  ,   3.807879  , ...,   8.264114  ,
            6.28682   ,   0.32489765],
         [  4.582896  ,   5.572973  ,   0.8397698 , ...,  10.473414  ,
           13.400594  ,   8.568138  ],
         [  5.606442  ,  11.279896  ,  12.617929  , ...,  12.078708  ,
           13.190233  ,   9.343885  ],
         ...,
         [  2.6729038 ,   2.9921446 ,   5.076165  , ..., -13.024893  ,
          -11.725342  ,  -3.6933331 ],
         [ -0.13022679,  -4.5550423 ,   0.32850948, ...,  -6.437991  ,
          -15.280394  , -11.521738  ],
         [  2.9428856 ,  -0.72478795,   1.2838184 , ...,  -6.6725416 ,
          -12.202956  ,  -9.612753  ]],

        [[  4.963589  ,   6.867283  ,   3.807879  , ...,   8.264114  ,
            6.28682   ,   0.32489765],
         [  4.582896  ,   5.572973  ,   0.8397698 , ...,  10.473414  ,
           13.400594  ,   8.568138  ],
         [  5.606442  ,  11.279896  ,  12.617929  , ...,  12.078708  ,
           13.190233  ,   9.343885  ],
         ...,
         [  2.6729038 ,   2.9921446 ,   5.076165  , ..., -13.024893  ,
          -11.725342  ,  -3.6933331 ],
         [ -0.13022679,  -4.5550423 ,   0.32850948, ...,  -6.437991  ,
          -15.280394  , -11.521738  ],
         [  2.9428856 ,  -0.72478795,   1.2838184 , ...,  -6.6725416 ,
          -12.202956  ,  -9.612753  ]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [7], 'to': [2]}

generate models:8

analyse output arrays in iter:8

pre layer res:
5:sigmoid
{'name': 'sigmoid', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [0], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[ 75., 105., 105., ..., 105.,  90.,  60.],
         [105., 147., 147., ..., 147., 126.,  84.],
         [105., 147., 147., ..., 147., 126.,  84.],
         ...,
         [105., 147., 147., ..., 147., 126.,  84.],
         [ 90., 126., 126., ..., 126., 108.,  72.],
         [ 60.,  84.,  84., ...,  84.,  72.,  48.]],

        [[ 75., 105., 105., ..., 105.,  90.,  60.],
         [105., 147., 147., ..., 147., 126.,  84.],
         [105., 147., 147., ..., 147., 126.,  84.],
         ...,
         [105., 147., 147., ..., 147., 126.,  84.],
         [ 90., 126., 126., ..., 126., 108.,  72.],
         [ 60.,  84.,  84., ...,  84.,  72.,  48.]],

        [[ 75., 105., 105., ..., 105.,  90.,  60.],
         [105., 147., 147., ..., 147., 126.,  84.],
         [105., 147., 147., ..., 147., 126.,  84.],
         ...,
         [105., 147., 147., ..., 147., 126.,  84.],
         [ 90., 126., 126., ..., 126., 108.,  72.],
         [ 60.,  84.,  84., ...,  84.,  72.,  48.]],

        ...,

        [[ 75., 105., 105., ..., 105.,  90.,  60.],
         [105., 147., 147., ..., 147., 126.,  84.],
         [105., 147., 147., ..., 147., 126.,  84.],
         ...,
         [105., 147., 147., ..., 147., 126.,  84.],
         [ 90., 126., 126., ..., 126., 108.,  72.],
         [ 60.,  84.,  84., ...,  84.,  72.,  48.]],

        [[ 75., 105., 105., ..., 105.,  90.,  60.],
         [105., 147., 147., ..., 147., 126.,  84.],
         [105., 147., 147., ..., 147., 126.,  84.],
         ...,
         [105., 147., 147., ..., 147., 126.,  84.],
         [ 90., 126., 126., ..., 126., 108.,  72.],
         [ 60.,  84.,  84., ...,  84.,  72.,  48.]],

        [[ 75., 105., 105., ..., 105.,  90.,  60.],
         [105., 147., 147., ..., 147., 126.,  84.],
         [105., 147., 147., ..., 147., 126.,  84.],
         ...,
         [105., 147., 147., ..., 147., 126.,  84.],
         [ 90., 126., 126., ..., 126., 108.,  72.],
         [ 60.,  84.,  84., ...,  84.,  72.,  48.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [5], 'to': [2, 7]}
ms node:
{'name': 'conv2d', 'output': array([[[[ 48.,  72.,  84., ...,  84.,  84.,  60.],
         [ 72., 108., 126., ..., 126., 126.,  90.],
         [ 84., 126., 147., ..., 147., 147., 105.],
         ...,
         [ 84., 126., 147., ..., 147., 147., 105.],
         [ 84., 126., 147., ..., 147., 147., 105.],
         [ 60.,  90., 105., ..., 105., 105.,  75.]],

        [[ 48.,  72.,  84., ...,  84.,  84.,  60.],
         [ 72., 108., 126., ..., 126., 126.,  90.],
         [ 84., 126., 147., ..., 147., 147., 105.],
         ...,
         [ 84., 126., 147., ..., 147., 147., 105.],
         [ 84., 126., 147., ..., 147., 147., 105.],
         [ 60.,  90., 105., ..., 105., 105.,  75.]],

        [[ 48.,  72.,  84., ...,  84.,  84.,  60.],
         [ 72., 108., 126., ..., 126., 126.,  90.],
         [ 84., 126., 147., ..., 147., 147., 105.],
         ...,
         [ 84., 126., 147., ..., 147., 147., 105.],
         [ 84., 126., 147., ..., 147., 147., 105.],
         [ 60.,  90., 105., ..., 105., 105.,  75.]],

        ...,

        [[ 48.,  72.,  84., ...,  84.,  84.,  60.],
         [ 72., 108., 126., ..., 126., 126.,  90.],
         [ 84., 126., 147., ..., 147., 147., 105.],
         ...,
         [ 84., 126., 147., ..., 147., 147., 105.],
         [ 84., 126., 147., ..., 147., 147., 105.],
         [ 60.,  90., 105., ..., 105., 105.,  75.]],

        [[ 48.,  72.,  84., ...,  84.,  84.,  60.],
         [ 72., 108., 126., ..., 126., 126.,  90.],
         [ 84., 126., 147., ..., 147., 147., 105.],
         ...,
         [ 84., 126., 147., ..., 147., 147., 105.],
         [ 84., 126., 147., ..., 147., 147., 105.],
         [ 60.,  90., 105., ..., 105., 105.,  75.]],

        [[ 48.,  72.,  84., ...,  84.,  84.,  60.],
         [ 72., 108., 126., ..., 126., 126.,  90.],
         [ 84., 126., 147., ..., 147., 147., 105.],
         ...,
         [ 84., 126., 147., ..., 147., 147., 105.],
         [ 84., 126., 147., ..., 147., 147., 105.],
         [ 60.,  90., 105., ..., 105., 105.,  75.]]]], dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [5], 'to': [2, 7]}
torch node:
{'name': 'conv2d', 'output': array([[[[ 48.,  72.,  84., ...,  84.,  84.,  60.],
         [ 72., 108., 126., ..., 126., 126.,  90.],
         [ 84., 126., 147., ..., 147., 147., 105.],
         ...,
         [ 84., 126., 147., ..., 147., 147., 105.],
         [ 84., 126., 147., ..., 147., 147., 105.],
         [ 60.,  90., 105., ..., 105., 105.,  75.]],

        [[ 48.,  72.,  84., ...,  84.,  84.,  60.],
         [ 72., 108., 126., ..., 126., 126.,  90.],
         [ 84., 126., 147., ..., 147., 147., 105.],
         ...,
         [ 84., 126., 147., ..., 147., 147., 105.],
         [ 84., 126., 147., ..., 147., 147., 105.],
         [ 60.,  90., 105., ..., 105., 105.,  75.]],

        [[ 48.,  72.,  84., ...,  84.,  84.,  60.],
         [ 72., 108., 126., ..., 126., 126.,  90.],
         [ 84., 126., 147., ..., 147., 147., 105.],
         ...,
         [ 84., 126., 147., ..., 147., 147., 105.],
         [ 84., 126., 147., ..., 147., 147., 105.],
         [ 60.,  90., 105., ..., 105., 105.,  75.]],

        ...,

        [[ 48.,  72.,  84., ...,  84.,  84.,  60.],
         [ 72., 108., 126., ..., 126., 126.,  90.],
         [ 84., 126., 147., ..., 147., 147., 105.],
         ...,
         [ 84., 126., 147., ..., 147., 147., 105.],
         [ 84., 126., 147., ..., 147., 147., 105.],
         [ 60.,  90., 105., ..., 105., 105.,  75.]],

        [[ 48.,  72.,  84., ...,  84.,  84.,  60.],
         [ 72., 108., 126., ..., 126., 126.,  90.],
         [ 84., 126., 147., ..., 147., 147., 105.],
         ...,
         [ 84., 126., 147., ..., 147., 147., 105.],
         [ 84., 126., 147., ..., 147., 147., 105.],
         [ 60.,  90., 105., ..., 105., 105.,  75.]],

        [[ 48.,  72.,  84., ...,  84.,  84.,  60.],
         [ 72., 108., 126., ..., 126., 126.,  90.],
         [ 84., 126., 147., ..., 147., 147., 105.],
         ...,
         [ 84., 126., 147., ..., 147., 147., 105.],
         [ 84., 126., 147., ..., 147., 147., 105.],
         [ 60.,  90., 105., ..., 105., 105.,  75.]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [5], 'to': [2, 7]}

generate models:9

final statics:
total operators:28
tensorflow --> nums:6,distinct_bugs:1
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
conv2d:6
mindspore --> 
torch --> 

generate models:10

analyse output arrays in iter:11

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[142., 172., 176., ..., 216., 198., 205.],
         [191., 196., 174., ..., 229., 222., 217.],
         [220., 217., 192., ..., 224., 225., 218.],
         ...,
         [197., 196., 201., ..., 200., 199., 205.],
         [196., 191., 193., ..., 198., 199., 201.],
         [186., 182., 174., ..., 158., 158., 163.]],

        [[149., 172., 168., ..., 212., 194., 202.],
         [190., 192., 166., ..., 222., 215., 210.],
         [212., 209., 183., ..., 214., 214., 208.],
         ...,
         [152., 152., 156., ..., 165., 165., 164.],
         [157., 152., 154., ..., 164., 165., 161.],
         [150., 147., 139., ..., 124., 125., 125.]],

        [[152., 167., 154., ..., 211., 193., 200.],
         [192., 190., 159., ..., 220., 213., 207.],
         [212., 208., 182., ..., 209., 210., 203.],
         ...,
         [136., 135., 140., ..., 146., 146., 150.],
         [139., 135., 136., ..., 144., 145., 146.],
         [133., 130., 121., ..., 105., 106., 111.]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[13750., 20082., 20093., ..., 20244., 17325., 11588.],
         [18539., 27446., 27855., ..., 29274., 25013., 16690.],
         [19372., 28520., 29387., ..., 30081., 25571., 17082.],
         ...,
         [13360., 19048., 19758., ..., 19606., 18055., 14510.],
         [12425., 17411., 17498., ..., 16903., 15346., 11933.],
         [ 9034., 12532., 12313., ..., 11133., 10148.,  7772.]],

        [[13750., 20082., 20093., ..., 20244., 17325., 11588.],
         [18539., 27446., 27855., ..., 29274., 25013., 16690.],
         [19372., 28520., 29387., ..., 30081., 25571., 17082.],
         ...,
         [13360., 19048., 19758., ..., 19606., 18055., 14510.],
         [12425., 17411., 17498., ..., 16903., 15346., 11933.],
         [ 9034., 12532., 12313., ..., 11133., 10148.,  7772.]],

        [[13750., 20082., 20093., ..., 20244., 17325., 11588.],
         [18539., 27446., 27855., ..., 29274., 25013., 16690.],
         [19372., 28520., 29387., ..., 30081., 25571., 17082.],
         ...,
         [13360., 19048., 19758., ..., 19606., 18055., 14510.],
         [12425., 17411., 17498., ..., 16903., 15346., 11933.],
         [ 9034., 12532., 12313., ..., 11133., 10148.,  7772.]],

        ...,

        [[13750., 20082., 20093., ..., 20244., 17325., 11588.],
         [18539., 27446., 27855., ..., 29274., 25013., 16690.],
         [19372., 28520., 29387., ..., 30081., 25571., 17082.],
         ...,
         [13360., 19048., 19758., ..., 19606., 18055., 14510.],
         [12425., 17411., 17498., ..., 16903., 15346., 11933.],
         [ 9034., 12532., 12313., ..., 11133., 10148.,  7772.]],

        [[13750., 20082., 20093., ..., 20244., 17325., 11588.],
         [18539., 27446., 27855., ..., 29274., 25013., 16690.],
         [19372., 28520., 29387., ..., 30081., 25571., 17082.],
         ...,
         [13360., 19048., 19758., ..., 19606., 18055., 14510.],
         [12425., 17411., 17498., ..., 16903., 15346., 11933.],
         [ 9034., 12532., 12313., ..., 11133., 10148.,  7772.]],

        [[13750., 20082., 20093., ..., 20244., 17325., 11588.],
         [18539., 27446., 27855., ..., 29274., 25013., 16690.],
         [19372., 28520., 29387., ..., 30081., 25571., 17082.],
         ...,
         [13360., 19048., 19758., ..., 19606., 18055., 14510.],
         [12425., 17411., 17498., ..., 16903., 15346., 11933.],
         [ 9034., 12532., 12313., ..., 11133., 10148.,  7772.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [0], 'to': [2]}
ms node:
{'name': 'conv2d', 'output': array([[[[ 9001., 13935., 16455., ..., 16645., 16762., 11980.],
         [12472., 19690., 23520., ..., 24340., 24455., 17469.],
         [15246., 23771., 28483., ..., 29808., 29670., 21214.],
         ...,
         [ 9745., 15079., 18278., ..., 18760., 19247., 17406.],
         [11156., 16792., 19750., ..., 19636., 19555., 17087.],
         [ 8633., 12896., 14959., ..., 14103., 14043., 12113.]],

        [[ 9001., 13935., 16455., ..., 16645., 16762., 11980.],
         [12472., 19690., 23520., ..., 24340., 24455., 17469.],
         [15246., 23771., 28483., ..., 29808., 29670., 21214.],
         ...,
         [ 9745., 15079., 18278., ..., 18760., 19247., 17406.],
         [11156., 16792., 19750., ..., 19636., 19555., 17087.],
         [ 8633., 12896., 14959., ..., 14103., 14043., 12113.]],

        [[ 9001., 13935., 16455., ..., 16645., 16762., 11980.],
         [12472., 19690., 23520., ..., 24340., 24455., 17469.],
         [15246., 23771., 28483., ..., 29808., 29670., 21214.],
         ...,
         [ 9745., 15079., 18278., ..., 18760., 19247., 17406.],
         [11156., 16792., 19750., ..., 19636., 19555., 17087.],
         [ 8633., 12896., 14959., ..., 14103., 14043., 12113.]],

        ...,

        [[ 9001., 13935., 16455., ..., 16645., 16762., 11980.],
         [12472., 19690., 23520., ..., 24340., 24455., 17469.],
         [15246., 23771., 28483., ..., 29808., 29670., 21214.],
         ...,
         [ 9745., 15079., 18278., ..., 18760., 19247., 17406.],
         [11156., 16792., 19750., ..., 19636., 19555., 17087.],
         [ 8633., 12896., 14959., ..., 14103., 14043., 12113.]],

        [[ 9001., 13935., 16455., ..., 16645., 16762., 11980.],
         [12472., 19690., 23520., ..., 24340., 24455., 17469.],
         [15246., 23771., 28483., ..., 29808., 29670., 21214.],
         ...,
         [ 9745., 15079., 18278., ..., 18760., 19247., 17406.],
         [11156., 16792., 19750., ..., 19636., 19555., 17087.],
         [ 8633., 12896., 14959., ..., 14103., 14043., 12113.]],

        [[ 9001., 13935., 16455., ..., 16645., 16762., 11980.],
         [12472., 19690., 23520., ..., 24340., 24455., 17469.],
         [15246., 23771., 28483., ..., 29808., 29670., 21214.],
         ...,
         [ 9745., 15079., 18278., ..., 18760., 19247., 17406.],
         [11156., 16792., 19750., ..., 19636., 19555., 17087.],
         [ 8633., 12896., 14959., ..., 14103., 14043., 12113.]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [0], 'to': [2]}
torch node:
{'name': 'conv2d', 'output': array([[[[ 9001., 13935., 16455., ..., 16645., 16762., 11980.],
         [12472., 19690., 23520., ..., 24340., 24455., 17469.],
         [15246., 23771., 28483., ..., 29808., 29670., 21214.],
         ...,
         [ 9745., 15079., 18278., ..., 18760., 19247., 17406.],
         [11156., 16792., 19750., ..., 19636., 19555., 17087.],
         [ 8633., 12896., 14959., ..., 14103., 14043., 12113.]],

        [[ 9001., 13935., 16455., ..., 16645., 16762., 11980.],
         [12472., 19690., 23520., ..., 24340., 24455., 17469.],
         [15246., 23771., 28483., ..., 29808., 29670., 21214.],
         ...,
         [ 9745., 15079., 18278., ..., 18760., 19247., 17406.],
         [11156., 16792., 19750., ..., 19636., 19555., 17087.],
         [ 8633., 12896., 14959., ..., 14103., 14043., 12113.]],

        [[ 9001., 13935., 16455., ..., 16645., 16762., 11980.],
         [12472., 19690., 23520., ..., 24340., 24455., 17469.],
         [15246., 23771., 28483., ..., 29808., 29670., 21214.],
         ...,
         [ 9745., 15079., 18278., ..., 18760., 19247., 17406.],
         [11156., 16792., 19750., ..., 19636., 19555., 17087.],
         [ 8633., 12896., 14959., ..., 14103., 14043., 12113.]],

        ...,

        [[ 9001., 13935., 16455., ..., 16645., 16762., 11980.],
         [12472., 19690., 23520., ..., 24340., 24455., 17469.],
         [15246., 23771., 28483., ..., 29808., 29670., 21214.],
         ...,
         [ 9745., 15079., 18278., ..., 18760., 19247., 17406.],
         [11156., 16792., 19750., ..., 19636., 19555., 17087.],
         [ 8633., 12896., 14959., ..., 14103., 14043., 12113.]],

        [[ 9001., 13935., 16455., ..., 16645., 16762., 11980.],
         [12472., 19690., 23520., ..., 24340., 24455., 17469.],
         [15246., 23771., 28483., ..., 29808., 29670., 21214.],
         ...,
         [ 9745., 15079., 18278., ..., 18760., 19247., 17406.],
         [11156., 16792., 19750., ..., 19636., 19555., 17087.],
         [ 8633., 12896., 14959., ..., 14103., 14043., 12113.]],

        [[ 9001., 13935., 16455., ..., 16645., 16762., 11980.],
         [12472., 19690., 23520., ..., 24340., 24455., 17469.],
         [15246., 23771., 28483., ..., 29808., 29670., 21214.],
         ...,
         [ 9745., 15079., 18278., ..., 18760., 19247., 17406.],
         [11156., 16792., 19750., ..., 19636., 19555., 17087.],
         [ 8633., 12896., 14959., ..., 14103., 14043., 12113.]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [0], 'to': [2]}

generate models:11

analyse output arrays in iter:12

pre layer res:
0:zeropadding2d
{'name': 'zeropadding2d', 'output': array([[[[164., 162., 162., ..., 157., 153., 153.],
         [168., 166., 166., ..., 164., 160., 158.],
         [172., 170., 171., ..., 168., 165., 163.],
         ...,
         [123., 117., 112., ..., 117.,  95., 120.],
         [120., 116., 112., ..., 126., 120., 120.],
         [121., 120., 116., ..., 124., 124., 120.]],

        [[215., 212., 212., ..., 210., 208., 203.],
         [218., 215., 215., ..., 212., 209., 205.],
         [220., 217., 218., ..., 212., 208., 207.],
         ...,
         [160., 154., 149., ..., 136., 115., 149.],
         [156., 151., 147., ..., 149., 144., 152.],
         [154., 152., 148., ..., 152., 154., 154.]],

        [[244., 240., 240., ..., 237., 235., 234.],
         [245., 242., 242., ..., 238., 236., 235.],
         [246., 243., 244., ..., 238., 235., 236.],
         ...,
         [105., 102.,  99., ..., 100.,  79., 100.],
         [100.,  99.,  96., ..., 110., 103., 101.],
         [ 96.,  99.,  97., ..., 108., 107., 100.]]]], dtype=float32), 'output_shape': TensorShape([1, 3, 32, 32]), 'from': [], 'to': [1]}
tf node:
{'name': 'conv2d', 'output': array([[[[15760., 22066., 22061., ..., 21753., 18442., 12142.],
         [22204., 31086., 31049., ..., 30316., 25596., 16736.],
         [22438., 31408., 30456., ..., 29533., 24480., 15647.],
         ...,
         [13238., 18461., 18388., ..., 14594., 11664.,  7956.],
         [11172., 15727., 15570., ..., 14179., 11713.,  7761.],
         [ 7281., 10267., 10064., ..., 10282.,  8609.,  5673.]],

        [[15760., 22066., 22061., ..., 21753., 18442., 12142.],
         [22204., 31086., 31049., ..., 30316., 25596., 16736.],
         [22438., 31408., 30456., ..., 29533., 24480., 15647.],
         ...,
         [13238., 18461., 18388., ..., 14594., 11664.,  7956.],
         [11172., 15727., 15570., ..., 14179., 11713.,  7761.],
         [ 7281., 10267., 10064., ..., 10282.,  8609.,  5673.]],

        [[15760., 22066., 22061., ..., 21753., 18442., 12142.],
         [22204., 31086., 31049., ..., 30316., 25596., 16736.],
         [22438., 31408., 30456., ..., 29533., 24480., 15647.],
         ...,
         [13238., 18461., 18388., ..., 14594., 11664.,  7956.],
         [11172., 15727., 15570., ..., 14179., 11713.,  7761.],
         [ 7281., 10267., 10064., ..., 10282.,  8609.,  5673.]],

        ...,

        [[15760., 22066., 22061., ..., 21753., 18442., 12142.],
         [22204., 31086., 31049., ..., 30316., 25596., 16736.],
         [22438., 31408., 30456., ..., 29533., 24480., 15647.],
         ...,
         [13238., 18461., 18388., ..., 14594., 11664.,  7956.],
         [11172., 15727., 15570., ..., 14179., 11713.,  7761.],
         [ 7281., 10267., 10064., ..., 10282.,  8609.,  5673.]],

        [[15760., 22066., 22061., ..., 21753., 18442., 12142.],
         [22204., 31086., 31049., ..., 30316., 25596., 16736.],
         [22438., 31408., 30456., ..., 29533., 24480., 15647.],
         ...,
         [13238., 18461., 18388., ..., 14594., 11664.,  7956.],
         [11172., 15727., 15570., ..., 14179., 11713.,  7761.],
         [ 7281., 10267., 10064., ..., 10282.,  8609.,  5673.]],

        [[15760., 22066., 22061., ..., 21753., 18442., 12142.],
         [22204., 31086., 31049., ..., 30316., 25596., 16736.],
         [22438., 31408., 30456., ..., 29533., 24480., 15647.],
         ...,
         [13238., 18461., 18388., ..., 14594., 11664.,  7956.],
         [11172., 15727., 15570., ..., 14179., 11713.,  7761.],
         [ 7281., 10267., 10064., ..., 10282.,  8609.,  5673.]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [0], 'to': [2]}
ms node:
{'name': 'conv2d', 'output': array([[[[10052., 15073., 17571., ..., 17484., 17277., 12257.],
         [15187., 22774., 26538., ..., 26323., 25855., 18273.],
         [17886., 26812., 31186., ..., 30726., 29726., 20820.],
         ...,
         [10622., 15865., 18106., ..., 13805., 13035.,  8337.],
         [10563., 15737., 18218., ..., 16443., 15737., 10435.],
         [ 7457., 11133., 12917., ..., 12737., 12215.,  8330.]],

        [[10052., 15073., 17571., ..., 17484., 17277., 12257.],
         [15187., 22774., 26538., ..., 26323., 25855., 18273.],
         [17886., 26812., 31186., ..., 30726., 29726., 20820.],
         ...,
         [10622., 15865., 18106., ..., 13805., 13035.,  8337.],
         [10563., 15737., 18218., ..., 16443., 15737., 10435.],
         [ 7457., 11133., 12917., ..., 12737., 12215.,  8330.]],

        [[10052., 15073., 17571., ..., 17484., 17277., 12257.],
         [15187., 22774., 26538., ..., 26323., 25855., 18273.],
         [17886., 26812., 31186., ..., 30726., 29726., 20820.],
         ...,
         [10622., 15865., 18106., ..., 13805., 13035.,  8337.],
         [10563., 15737., 18218., ..., 16443., 15737., 10435.],
         [ 7457., 11133., 12917., ..., 12737., 12215.,  8330.]],

        ...,

        [[10052., 15073., 17571., ..., 17484., 17277., 12257.],
         [15187., 22774., 26538., ..., 26323., 25855., 18273.],
         [17886., 26812., 31186., ..., 30726., 29726., 20820.],
         ...,
         [10622., 15865., 18106., ..., 13805., 13035.,  8337.],
         [10563., 15737., 18218., ..., 16443., 15737., 10435.],
         [ 7457., 11133., 12917., ..., 12737., 12215.,  8330.]],

        [[10052., 15073., 17571., ..., 17484., 17277., 12257.],
         [15187., 22774., 26538., ..., 26323., 25855., 18273.],
         [17886., 26812., 31186., ..., 30726., 29726., 20820.],
         ...,
         [10622., 15865., 18106., ..., 13805., 13035.,  8337.],
         [10563., 15737., 18218., ..., 16443., 15737., 10435.],
         [ 7457., 11133., 12917., ..., 12737., 12215.,  8330.]],

        [[10052., 15073., 17571., ..., 17484., 17277., 12257.],
         [15187., 22774., 26538., ..., 26323., 25855., 18273.],
         [17886., 26812., 31186., ..., 30726., 29726., 20820.],
         ...,
         [10622., 15865., 18106., ..., 13805., 13035.,  8337.],
         [10563., 15737., 18218., ..., 16443., 15737., 10435.],
         [ 7457., 11133., 12917., ..., 12737., 12215.,  8330.]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [0], 'to': [2]}
torch node:
{'name': 'conv2d', 'output': array([[[[10052., 15073., 17571., ..., 17484., 17277., 12257.],
         [15187., 22774., 26538., ..., 26323., 25855., 18273.],
         [17886., 26812., 31186., ..., 30726., 29726., 20820.],
         ...,
         [10622., 15865., 18106., ..., 13805., 13035.,  8337.],
         [10563., 15737., 18218., ..., 16443., 15737., 10435.],
         [ 7457., 11133., 12917., ..., 12737., 12215.,  8330.]],

        [[10052., 15073., 17571., ..., 17484., 17277., 12257.],
         [15187., 22774., 26538., ..., 26323., 25855., 18273.],
         [17886., 26812., 31186., ..., 30726., 29726., 20820.],
         ...,
         [10622., 15865., 18106., ..., 13805., 13035.,  8337.],
         [10563., 15737., 18218., ..., 16443., 15737., 10435.],
         [ 7457., 11133., 12917., ..., 12737., 12215.,  8330.]],

        [[10052., 15073., 17571., ..., 17484., 17277., 12257.],
         [15187., 22774., 26538., ..., 26323., 25855., 18273.],
         [17886., 26812., 31186., ..., 30726., 29726., 20820.],
         ...,
         [10622., 15865., 18106., ..., 13805., 13035.,  8337.],
         [10563., 15737., 18218., ..., 16443., 15737., 10435.],
         [ 7457., 11133., 12917., ..., 12737., 12215.,  8330.]],

        ...,

        [[10052., 15073., 17571., ..., 17484., 17277., 12257.],
         [15187., 22774., 26538., ..., 26323., 25855., 18273.],
         [17886., 26812., 31186., ..., 30726., 29726., 20820.],
         ...,
         [10622., 15865., 18106., ..., 13805., 13035.,  8337.],
         [10563., 15737., 18218., ..., 16443., 15737., 10435.],
         [ 7457., 11133., 12917., ..., 12737., 12215.,  8330.]],

        [[10052., 15073., 17571., ..., 17484., 17277., 12257.],
         [15187., 22774., 26538., ..., 26323., 25855., 18273.],
         [17886., 26812., 31186., ..., 30726., 29726., 20820.],
         ...,
         [10622., 15865., 18106., ..., 13805., 13035.,  8337.],
         [10563., 15737., 18218., ..., 16443., 15737., 10435.],
         [ 7457., 11133., 12917., ..., 12737., 12215.,  8330.]],

        [[10052., 15073., 17571., ..., 17484., 17277., 12257.],
         [15187., 22774., 26538., ..., 26323., 25855., 18273.],
         [17886., 26812., 31186., ..., 30726., 29726., 20820.],
         ...,
         [10622., 15865., 18106., ..., 13805., 13035.,  8337.],
         [10563., 15737., 18218., ..., 16443., 15737., 10435.],
         [ 7457., 11133., 12917., ..., 12737., 12215.,  8330.]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [0], 'to': [2]}

generate models:12

analyse output arrays in iter:29

pre layer res:
12:conv2d
{'name': 'conv2d', 'output': array([[[[1.2474390e+10, 1.2596019e+10, 1.2882023e+10, ...,
          1.3088326e+10, 1.2840950e+10, 1.2596019e+10],
         [1.3088326e+10, 1.3254525e+10, 1.3547868e+10, ...,
          1.3590069e+10, 1.3337971e+10, 1.3129750e+10],
         [1.3337971e+10, 1.3632279e+10, 1.3972541e+10, ...,
          1.4187313e+10, 1.3929808e+10, 1.3632279e+10],
         ...,
         [1.4273741e+10, 1.4273741e+10, 1.4015347e+10, ...,
          1.7798531e+10, 1.7798531e+10, 1.7798531e+10],
         [1.4273741e+10, 1.4273741e+10, 1.4015347e+10, ...,
          1.7605861e+10, 1.7605861e+10, 1.7605861e+10],
         [1.4273741e+10, 1.4273741e+10, 1.4015347e+10, ...,
          1.7271161e+10, 1.7271161e+10, 1.7271161e+10]],

        [[1.2474390e+10, 1.2596019e+10, 1.2882023e+10, ...,
          1.3088326e+10, 1.2840950e+10, 1.2596019e+10],
         [1.3088326e+10, 1.3254525e+10, 1.3547868e+10, ...,
          1.3590069e+10, 1.3337971e+10, 1.3129750e+10],
         [1.3337971e+10, 1.3632279e+10, 1.3972541e+10, ...,
          1.4187313e+10, 1.3929808e+10, 1.3632279e+10],
         ...,
         [1.4273741e+10, 1.4273741e+10, 1.4015347e+10, ...,
          1.7798531e+10, 1.7798531e+10, 1.7798531e+10],
         [1.4273741e+10, 1.4273741e+10, 1.4015347e+10, ...,
          1.7605861e+10, 1.7605861e+10, 1.7605861e+10],
         [1.4273741e+10, 1.4273741e+10, 1.4015347e+10, ...,
          1.7271161e+10, 1.7271161e+10, 1.7271161e+10]],

        [[1.2474390e+10, 1.2596019e+10, 1.2882023e+10, ...,
          1.3088326e+10, 1.2840950e+10, 1.2596019e+10],
         [1.3088326e+10, 1.3254525e+10, 1.3547868e+10, ...,
          1.3590069e+10, 1.3337971e+10, 1.3129750e+10],
         [1.3337971e+10, 1.3632279e+10, 1.3972541e+10, ...,
          1.4187313e+10, 1.3929808e+10, 1.3632279e+10],
         ...,
         [1.4273741e+10, 1.4273741e+10, 1.4015347e+10, ...,
          1.7798531e+10, 1.7798531e+10, 1.7798531e+10],
         [1.4273741e+10, 1.4273741e+10, 1.4015347e+10, ...,
          1.7605861e+10, 1.7605861e+10, 1.7605861e+10],
         [1.4273741e+10, 1.4273741e+10, 1.4015347e+10, ...,
          1.7271161e+10, 1.7271161e+10, 1.7271161e+10]],

        ...,

        [[1.2474390e+10, 1.2596019e+10, 1.2882023e+10, ...,
          1.3088326e+10, 1.2840950e+10, 1.2596019e+10],
         [1.3088326e+10, 1.3254525e+10, 1.3547868e+10, ...,
          1.3590069e+10, 1.3337971e+10, 1.3129750e+10],
         [1.3337971e+10, 1.3632279e+10, 1.3972541e+10, ...,
          1.4187313e+10, 1.3929808e+10, 1.3632279e+10],
         ...,
         [1.4273741e+10, 1.4273741e+10, 1.4015347e+10, ...,
          1.7798531e+10, 1.7798531e+10, 1.7798531e+10],
         [1.4273741e+10, 1.4273741e+10, 1.4015347e+10, ...,
          1.7605861e+10, 1.7605861e+10, 1.7605861e+10],
         [1.4273741e+10, 1.4273741e+10, 1.4015347e+10, ...,
          1.7271161e+10, 1.7271161e+10, 1.7271161e+10]],

        [[1.2474390e+10, 1.2596019e+10, 1.2882023e+10, ...,
          1.3088326e+10, 1.2840950e+10, 1.2596019e+10],
         [1.3088326e+10, 1.3254525e+10, 1.3547868e+10, ...,
          1.3590069e+10, 1.3337971e+10, 1.3129750e+10],
         [1.3337971e+10, 1.3632279e+10, 1.3972541e+10, ...,
          1.4187313e+10, 1.3929808e+10, 1.3632279e+10],
         ...,
         [1.4273741e+10, 1.4273741e+10, 1.4015347e+10, ...,
          1.7798531e+10, 1.7798531e+10, 1.7798531e+10],
         [1.4273741e+10, 1.4273741e+10, 1.4015347e+10, ...,
          1.7605861e+10, 1.7605861e+10, 1.7605861e+10],
         [1.4273741e+10, 1.4273741e+10, 1.4015347e+10, ...,
          1.7271161e+10, 1.7271161e+10, 1.7271161e+10]],

        [[1.2474390e+10, 1.2596019e+10, 1.2882023e+10, ...,
          1.3088326e+10, 1.2840950e+10, 1.2596019e+10],
         [1.3088326e+10, 1.3254525e+10, 1.3547868e+10, ...,
          1.3590069e+10, 1.3337971e+10, 1.3129750e+10],
         [1.3337971e+10, 1.3632279e+10, 1.3972541e+10, ...,
          1.4187313e+10, 1.3929808e+10, 1.3632279e+10],
         ...,
         [1.4273741e+10, 1.4273741e+10, 1.4015347e+10, ...,
          1.7798531e+10, 1.7798531e+10, 1.7798531e+10],
         [1.4273741e+10, 1.4273741e+10, 1.4015347e+10, ...,
          1.7605861e+10, 1.7605861e+10, 1.7605861e+10],
         [1.4273741e+10, 1.4273741e+10, 1.4015347e+10, ...,
          1.7271161e+10, 1.7271161e+10, 1.7271161e+10]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [11], 'to': [4]}
tf node:
{'name': 'sin', 'output': array([[[[-0.6625198 , -0.24612683, -0.27788857, ...,  0.72532415,
           0.95357335, -0.24612683],
         [ 0.72532415, -0.71130663,  0.1334375 , ..., -0.98186463,
          -0.9297578 ,  0.6843685 ],
         [-0.9297578 ,  0.85523385, -0.9938566 , ...,  0.8656327 ,
           0.8060362 ,  0.85523385],
         ...,
         [-0.99393654, -0.99393654, -0.2597724 , ..., -0.6683946 ,
          -0.6683946 , -0.6683946 ],
         [-0.99393654, -0.99393654, -0.2597724 , ...,  0.67959344,
           0.67959344,  0.67959344],
         [-0.99393654, -0.99393654, -0.2597724 , ...,  0.81658703,
           0.81658703,  0.81658703]],

        [[-0.6625198 , -0.24612683, -0.27788857, ...,  0.72532415,
           0.95357335, -0.24612683],
         [ 0.72532415, -0.71130663,  0.1334375 , ..., -0.98186463,
          -0.9297578 ,  0.6843685 ],
         [-0.9297578 ,  0.85523385, -0.9938566 , ...,  0.8656327 ,
           0.8060362 ,  0.85523385],
         ...,
         [-0.99393654, -0.99393654, -0.2597724 , ..., -0.6683946 ,
          -0.6683946 , -0.6683946 ],
         [-0.99393654, -0.99393654, -0.2597724 , ...,  0.67959344,
           0.67959344,  0.67959344],
         [-0.99393654, -0.99393654, -0.2597724 , ...,  0.81658703,
           0.81658703,  0.81658703]],

        [[-0.6625198 , -0.24612683, -0.27788857, ...,  0.72532415,
           0.95357335, -0.24612683],
         [ 0.72532415, -0.71130663,  0.1334375 , ..., -0.98186463,
          -0.9297578 ,  0.6843685 ],
         [-0.9297578 ,  0.85523385, -0.9938566 , ...,  0.8656327 ,
           0.8060362 ,  0.85523385],
         ...,
         [-0.99393654, -0.99393654, -0.2597724 , ..., -0.6683946 ,
          -0.6683946 , -0.6683946 ],
         [-0.99393654, -0.99393654, -0.2597724 , ...,  0.67959344,
           0.67959344,  0.67959344],
         [-0.99393654, -0.99393654, -0.2597724 , ...,  0.81658703,
           0.81658703,  0.81658703]],

        ...,

        [[-0.6625198 , -0.24612683, -0.27788857, ...,  0.72532415,
           0.95357335, -0.24612683],
         [ 0.72532415, -0.71130663,  0.1334375 , ..., -0.98186463,
          -0.9297578 ,  0.6843685 ],
         [-0.9297578 ,  0.85523385, -0.9938566 , ...,  0.8656327 ,
           0.8060362 ,  0.85523385],
         ...,
         [-0.99393654, -0.99393654, -0.2597724 , ..., -0.6683946 ,
          -0.6683946 , -0.6683946 ],
         [-0.99393654, -0.99393654, -0.2597724 , ...,  0.67959344,
           0.67959344,  0.67959344],
         [-0.99393654, -0.99393654, -0.2597724 , ...,  0.81658703,
           0.81658703,  0.81658703]],

        [[-0.6625198 , -0.24612683, -0.27788857, ...,  0.72532415,
           0.95357335, -0.24612683],
         [ 0.72532415, -0.71130663,  0.1334375 , ..., -0.98186463,
          -0.9297578 ,  0.6843685 ],
         [-0.9297578 ,  0.85523385, -0.9938566 , ...,  0.8656327 ,
           0.8060362 ,  0.85523385],
         ...,
         [-0.99393654, -0.99393654, -0.2597724 , ..., -0.6683946 ,
          -0.6683946 , -0.6683946 ],
         [-0.99393654, -0.99393654, -0.2597724 , ...,  0.67959344,
           0.67959344,  0.67959344],
         [-0.99393654, -0.99393654, -0.2597724 , ...,  0.81658703,
           0.81658703,  0.81658703]],

        [[-0.6625198 , -0.24612683, -0.27788857, ...,  0.72532415,
           0.95357335, -0.24612683],
         [ 0.72532415, -0.71130663,  0.1334375 , ..., -0.98186463,
          -0.9297578 ,  0.6843685 ],
         [-0.9297578 ,  0.85523385, -0.9938566 , ...,  0.8656327 ,
           0.8060362 ,  0.85523385],
         ...,
         [-0.99393654, -0.99393654, -0.2597724 , ..., -0.6683946 ,
          -0.6683946 , -0.6683946 ],
         [-0.99393654, -0.99393654, -0.2597724 , ...,  0.67959344,
           0.67959344,  0.67959344],
         [-0.99393654, -0.99393654, -0.2597724 , ...,  0.81658703,
           0.81658703,  0.81658703]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [12], 'to': [6]}
ms node:
{'name': 'sin', 'output': array([[[[-0.6625198 , -0.24612682, -0.27788857, ...,  0.72532415,
           0.95357335, -0.24612682],
         [ 0.72532415, -0.71130663,  0.13343751, ..., -0.98186463,
          -0.9297578 ,  0.6843685 ],
         [-0.9297578 ,  0.85523385, -0.9938566 , ...,  0.8656327 ,
           0.8060361 ,  0.85523385],
         ...,
         [-0.99393654, -0.99393654, -0.25977242, ..., -0.6683946 ,
          -0.6683946 , -0.6683946 ],
         [-0.99393654, -0.99393654, -0.25977242, ...,  0.67959344,
           0.67959344,  0.67959344],
         [-0.99393654, -0.99393654, -0.25977242, ...,  0.81658703,
           0.81658703,  0.81658703]],

        [[-0.6625198 , -0.24612682, -0.27788857, ...,  0.72532415,
           0.95357335, -0.24612682],
         [ 0.72532415, -0.71130663,  0.13343751, ..., -0.98186463,
          -0.9297578 ,  0.6843685 ],
         [-0.9297578 ,  0.85523385, -0.9938566 , ...,  0.8656327 ,
           0.8060361 ,  0.85523385],
         ...,
         [-0.99393654, -0.99393654, -0.25977242, ..., -0.6683946 ,
          -0.6683946 , -0.6683946 ],
         [-0.99393654, -0.99393654, -0.25977242, ...,  0.67959344,
           0.67959344,  0.67959344],
         [-0.99393654, -0.99393654, -0.25977242, ...,  0.81658703,
           0.81658703,  0.81658703]],

        [[-0.6625198 , -0.24612682, -0.27788857, ...,  0.72532415,
           0.95357335, -0.24612682],
         [ 0.72532415, -0.71130663,  0.13343751, ..., -0.98186463,
          -0.9297578 ,  0.6843685 ],
         [-0.9297578 ,  0.85523385, -0.9938566 , ...,  0.8656327 ,
           0.8060361 ,  0.85523385],
         ...,
         [-0.99393654, -0.99393654, -0.25977242, ..., -0.6683946 ,
          -0.6683946 , -0.6683946 ],
         [-0.99393654, -0.99393654, -0.25977242, ...,  0.67959344,
           0.67959344,  0.67959344],
         [-0.99393654, -0.99393654, -0.25977242, ...,  0.81658703,
           0.81658703,  0.81658703]],

        ...,

        [[-0.6625198 , -0.24612682, -0.27788857, ...,  0.72532415,
           0.95357335, -0.24612682],
         [ 0.72532415, -0.71130663,  0.13343751, ..., -0.98186463,
          -0.9297578 ,  0.6843685 ],
         [-0.9297578 ,  0.85523385, -0.9938566 , ...,  0.8656327 ,
           0.8060361 ,  0.85523385],
         ...,
         [-0.99393654, -0.99393654, -0.25977242, ..., -0.6683946 ,
          -0.6683946 , -0.6683946 ],
         [-0.99393654, -0.99393654, -0.25977242, ...,  0.67959344,
           0.67959344,  0.67959344],
         [-0.99393654, -0.99393654, -0.25977242, ...,  0.81658703,
           0.81658703,  0.81658703]],

        [[-0.0872465 , -0.24612682, -0.79464084, ...,  0.72532415,
           0.9952489 , -0.24612682],
         [ 0.72532415, -0.71130663, -0.48204175, ..., -0.98186463,
          -0.7880225 ,  0.1166508 ],
         [-0.7880225 ,  0.9957686 , -0.7332392 , ...,  0.40603557,
           0.8060361 ,  0.9957686 ],
         ...,
         [-0.99393654, -0.99393654,  0.9877766 , ..., -0.6683946 ,
          -0.6683946 , -0.6683946 ],
         [-0.99393654, -0.99393654,  0.9877766 , ..., -0.2065251 ,
          -0.2065251 , -0.2065251 ],
         [-0.99393654, -0.99393654,  0.9877766 , ..., -0.9889165 ,
          -0.9889165 , -0.9889165 ]],

        [[-0.0872465 , -0.24612682, -0.79464084, ...,  0.72532415,
           0.9952489 , -0.24612682],
         [ 0.72532415, -0.71130663, -0.48204175, ..., -0.98186463,
          -0.7880225 ,  0.1166508 ],
         [-0.7880225 ,  0.9957686 , -0.7332392 , ...,  0.40603557,
           0.8060361 ,  0.9957686 ],
         ...,
         [-0.99393654, -0.99393654,  0.9877766 , ..., -0.6683946 ,
          -0.6683946 , -0.6683946 ],
         [-0.99393654, -0.99393654,  0.9877766 , ..., -0.2065251 ,
          -0.2065251 , -0.2065251 ],
         [-0.99393654, -0.99393654,  0.9877766 , ..., -0.9889165 ,
          -0.9889165 , -0.9889165 ]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [12], 'to': [6]}
torch node:
{'name': 'sin', 'output': array([[[[-0.0872465 , -0.24612682, -0.79464084, ...,  0.72532415,
           0.9952489 , -0.24612682],
         [ 0.72532415, -0.71130663, -0.48204175, ..., -0.98186463,
          -0.7880225 ,  0.1166508 ],
         [-0.7880225 ,  0.9957686 , -0.7332392 , ...,  0.40603557,
           0.8060362 ,  0.9957686 ],
         ...,
         [-0.99393654, -0.99393654,  0.9877766 , ..., -0.6683946 ,
          -0.6683946 , -0.6683946 ],
         [-0.99393654, -0.99393654,  0.9877766 , ..., -0.2065251 ,
          -0.2065251 , -0.2065251 ],
         [-0.99393654, -0.99393654,  0.9877766 , ..., -0.9889165 ,
          -0.9889165 , -0.9889165 ]],

        [[-0.0872465 , -0.24612682, -0.79464084, ...,  0.72532415,
           0.9952489 , -0.24612682],
         [ 0.72532415, -0.71130663, -0.48204175, ..., -0.98186463,
          -0.7880225 ,  0.1166508 ],
         [-0.7880225 ,  0.9957686 , -0.7332392 , ...,  0.40603557,
           0.8060362 ,  0.9957686 ],
         ...,
         [-0.99393654, -0.99393654,  0.9877766 , ..., -0.6683946 ,
          -0.6683946 , -0.6683946 ],
         [-0.99393654, -0.99393654,  0.9877766 , ..., -0.2065251 ,
          -0.2065251 , -0.2065251 ],
         [-0.99393654, -0.99393654,  0.9877766 , ..., -0.9889165 ,
          -0.9889165 , -0.9889165 ]],

        [[-0.0872465 , -0.24612682, -0.79464084, ...,  0.72532415,
           0.9952489 , -0.24612682],
         [ 0.72532415, -0.71130663, -0.48204175, ..., -0.98186463,
          -0.7880225 ,  0.1166508 ],
         [-0.7880225 ,  0.9957686 , -0.7332392 , ...,  0.40603557,
           0.8060362 ,  0.9957686 ],
         ...,
         [-0.99393654, -0.99393654,  0.9877766 , ..., -0.6683946 ,
          -0.6683946 , -0.6683946 ],
         [-0.99393654, -0.99393654,  0.9877766 , ..., -0.2065251 ,
          -0.2065251 , -0.2065251 ],
         [-0.99393654, -0.99393654,  0.9877766 , ..., -0.9889165 ,
          -0.9889165 , -0.9889165 ]],

        ...,

        [[-0.0872465 , -0.24612682, -0.79464084, ...,  0.72532415,
           0.9952489 , -0.24612682],
         [ 0.72532415, -0.71130663, -0.48204175, ..., -0.98186463,
          -0.7880225 ,  0.1166508 ],
         [-0.7880225 ,  0.9957686 , -0.7332392 , ...,  0.40603557,
           0.8060362 ,  0.9957686 ],
         ...,
         [-0.99393654, -0.99393654,  0.9877766 , ..., -0.6683946 ,
          -0.6683946 , -0.6683946 ],
         [-0.99393654, -0.99393654,  0.9877766 , ..., -0.2065251 ,
          -0.2065251 , -0.2065251 ],
         [-0.99393654, -0.99393654,  0.9877766 , ..., -0.9889165 ,
          -0.9889165 , -0.9889165 ]],

        [[-0.0872465 , -0.24612682, -0.79464084, ...,  0.72532415,
           0.9952489 , -0.24612682],
         [ 0.72532415, -0.71130663, -0.48204175, ..., -0.98186463,
          -0.7880225 ,  0.1166508 ],
         [-0.7880225 ,  0.9957686 , -0.7332392 , ...,  0.40603557,
           0.8060362 ,  0.9957686 ],
         ...,
         [-0.99393654, -0.99393654,  0.9877766 , ..., -0.6683946 ,
          -0.6683946 , -0.6683946 ],
         [-0.99393654, -0.99393654,  0.9877766 , ..., -0.2065251 ,
          -0.2065251 , -0.2065251 ],
         [-0.99393654, -0.99393654,  0.9877766 , ..., -0.9889165 ,
          -0.9889165 , -0.9889165 ]],

        [[-0.0872465 , -0.24612682, -0.79464084, ...,  0.72532415,
           0.9952489 , -0.24612682],
         [ 0.72532415, -0.71130663, -0.48204175, ..., -0.98186463,
          -0.7880225 ,  0.1166508 ],
         [-0.7880225 ,  0.9957686 , -0.7332392 , ...,  0.40603557,
           0.8060362 ,  0.9957686 ],
         ...,
         [-0.99393654, -0.99393654,  0.9877766 , ..., -0.6683946 ,
          -0.6683946 , -0.6683946 ],
         [-0.99393654, -0.99393654,  0.9877766 , ..., -0.2065251 ,
          -0.2065251 , -0.2065251 ],
         [-0.99393654, -0.99393654,  0.9877766 , ..., -0.9889165 ,
          -0.9889165 , -0.9889165 ]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [12], 'to': [6]}

generate models:25

analyse output arrays in iter:35

pre layer res:
2:relu
{'name': 'relu', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [4], 'to': [7]}
tf node:
{'name': 'log', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [2], 'to': [3]}
ms node:
{'name': 'log', 'output': array([[[[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        ...,

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]]]],
      dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [2], 'to': [3]}
torch node:
{'name': 'log', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [2], 'to': [3]}

generate models:31

analyse output arrays in iter:39

pre layer res:
13:relu
{'name': 'relu', 'output': array([[[[7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08],
         [7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08],
         [7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08],
         ...,
         [7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08],
         [7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08],
         [7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08]],

        [[7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08],
         [7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08],
         [7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08],
         ...,
         [7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08],
         [7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08],
         [7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08]],

        [[7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08],
         [7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08],
         [7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08],
         ...,
         [7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08],
         [7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08],
         [7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08]],

        ...,

        [[7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08],
         [7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08],
         [7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08],
         ...,
         [7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08],
         [7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08],
         [7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08]],

        [[7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08],
         [7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08],
         [7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08],
         ...,
         [7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08],
         [7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08],
         [7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08]],

        [[7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08],
         [7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08],
         [7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08],
         ...,
         [7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08],
         [7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08],
         [7.8963034e+08, 7.8963034e+08, 7.8963034e+08, ...,
          7.8963034e+08, 7.8963034e+08, 7.8963034e+08]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [16], 'to': [6]}
tf node:
{'name': 'sin', 'output': array([[[[0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         ...,
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139]],

        [[0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         ...,
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139]],

        [[0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         ...,
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139]],

        ...,

        [[0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         ...,
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139]],

        [[0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         ...,
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139]],

        [[0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         ...,
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [13], 'to': [14]}
ms node:
{'name': 'sin', 'output': array([[[[0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         ...,
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139]],

        [[0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         ...,
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139]],

        [[0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         ...,
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139]],

        ...,

        [[0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         ...,
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139],
         [0.9291139, 0.9291139, 0.9291139, ..., 0.9291139, 0.9291139,
          0.9291139]],

        [[0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         ...,
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029]],

        [[0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         ...,
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [13], 'to': [14]}
torch node:
{'name': 'sin', 'output': array([[[[0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         ...,
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029]],

        [[0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         ...,
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029]],

        [[0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         ...,
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029]],

        ...,

        [[0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         ...,
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029]],

        [[0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         ...,
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029]],

        [[0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         ...,
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029],
         [0.9528029, 0.9528029, 0.9528029, ..., 0.9528029, 0.9528029,
          0.9528029]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [13], 'to': [14]}

generate models:34

final statics:
total operators:28
tensorflow --> nums:10,distinct_bugs:2
mindspore --> nums:3,distinct_bugs:2
torch --> nums:2,distinct_bugs:1
tensorflow --> 
conv2d:8
sin:2
mindspore --> 
sin:2
log:1
torch --> 
sin:2

generate models:43

analyse the exceptions in iter:52
torch exception:
{'id': 33, 'name': 'flatten', 'frame_work': 'torch', 'input_datas': [tensor([7.7876e+17], grad_fn=<PowBackward0>)]}
Dimension out of range (expected to be in range of [-1, 0], but got 1)

generate models:46

analyse output arrays in iter:64

pre layer res:
3:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        ...,

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [2], 'to': [13]}
tf node:
{'name': 'softmax', 'output': array([[[[    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [    nan,     nan,     nan, ...,     nan,     nan,     nan],
         ...,
         [    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [    nan,     nan,     nan, ...,     nan,     nan,     nan]],

        [[    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [    nan,     nan,     nan, ...,     nan,     nan,     nan],
         ...,
         [    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [    nan,     nan,     nan, ...,     nan,     nan,     nan]],

        [[0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         ...,
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125]],

        ...,

        [[0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         ...,
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125]],

        [[0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         ...,
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125]],

        [[0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         ...,
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [3], 'to': [15]}
ms node:
{'name': 'softmax', 'output': array([[[[    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [    nan,     nan,     nan, ...,     nan,     nan,     nan],
         ...,
         [    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [    nan,     nan,     nan, ...,     nan,     nan,     nan]],

        [[    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [    nan,     nan,     nan, ...,     nan,     nan,     nan],
         ...,
         [    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [    nan,     nan,     nan, ...,     nan,     nan,     nan]],

        [[0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         ...,
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125]],

        ...,

        [[0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         ...,
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125]],

        [[0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         ...,
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125]],

        [[0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         ...,
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125]]]],
      dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [3], 'to': [15]}
torch node:
{'name': 'softmax', 'output': array([[[[    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [    nan,     nan,     nan, ...,     nan,     nan,     nan],
         ...,
         [    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [    nan,     nan,     nan, ...,     nan,     nan,     nan]],

        [[    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [    nan,     nan,     nan, ...,     nan,     nan,     nan],
         ...,
         [    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [    nan,     nan,     nan, ...,     nan,     nan,     nan],
         [    nan,     nan,     nan, ...,     nan,     nan,     nan]],

        [[0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         ...,
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125]],

        ...,

        [[0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         ...,
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125]],

        [[0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         ...,
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125]],

        [[0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         ...,
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125],
         [0.03125, 0.03125, 0.03125, ..., 0.03125, 0.03125, 0.03125]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [3], 'to': [15]}

generate models:57

analyse output arrays in iter:77

pre layer res:
13:relu
{'name': 'relu', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [5], 'to': [23]}
tf node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [13], 'to': [16]}
ms node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [13], 'to': [16]}
torch node:
{'name': 'sin', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [13], 'to': [16]}

generate models:68

analyse output arrays in iter:89

pre layer res:
3:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[1.05306175e-20, 1.05306175e-20, 7.98490480e-30, ...,
          1.64580108e-38, 1.64580108e-38, 0.00000000e+00],
         [1.05306175e-20, 1.05306175e-20, 7.98490480e-30, ...,
          1.42498794e-21, 4.24782887e-18, 4.24782887e-18],
         [1.15438274e-17, 1.26593436e-14, 1.87881308e-12, ...,
          3.13793745e-17, 4.24782887e-18, 4.24782887e-18],
         ...,
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          1.00773070e-10, 9.18931476e-14, 8.37957055e-17],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00]],

        [[1.05306175e-20, 1.05306175e-20, 7.98490480e-30, ...,
          1.64580108e-38, 1.64580108e-38, 0.00000000e+00],
         [1.05306175e-20, 1.05306175e-20, 7.98490480e-30, ...,
          1.42498794e-21, 4.24782887e-18, 4.24782887e-18],
         [1.15438274e-17, 1.26593436e-14, 1.87881308e-12, ...,
          3.13793745e-17, 4.24782887e-18, 4.24782887e-18],
         ...,
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          1.00773070e-10, 9.18931476e-14, 8.37957055e-17],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00]],

        [[1.05306175e-20, 1.05306175e-20, 7.98490480e-30, ...,
          1.64580108e-38, 1.64580108e-38, 0.00000000e+00],
         [1.05306175e-20, 1.05306175e-20, 7.98490480e-30, ...,
          1.42498794e-21, 4.24782887e-18, 4.24782887e-18],
         [1.15438274e-17, 1.26593436e-14, 1.87881308e-12, ...,
          3.13793745e-17, 4.24782887e-18, 4.24782887e-18],
         ...,
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          1.00773070e-10, 9.18931476e-14, 8.37957055e-17],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00]],

        ...,

        [[1.05306175e-20, 1.05306175e-20, 7.98490480e-30, ...,
          1.64580108e-38, 1.64580108e-38, 0.00000000e+00],
         [1.05306175e-20, 1.05306175e-20, 7.98490480e-30, ...,
          1.42498794e-21, 4.24782887e-18, 4.24782887e-18],
         [1.15438274e-17, 1.26593436e-14, 1.87881308e-12, ...,
          3.13793745e-17, 4.24782887e-18, 4.24782887e-18],
         ...,
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          1.00773070e-10, 9.18931476e-14, 8.37957055e-17],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00]],

        [[1.05306175e-20, 1.05306175e-20, 7.98490480e-30, ...,
          1.64580108e-38, 1.64580108e-38, 0.00000000e+00],
         [1.05306175e-20, 1.05306175e-20, 7.98490480e-30, ...,
          1.42498794e-21, 4.24782887e-18, 4.24782887e-18],
         [1.15438274e-17, 1.26593436e-14, 1.87881308e-12, ...,
          3.13793745e-17, 4.24782887e-18, 4.24782887e-18],
         ...,
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          1.00773070e-10, 9.18931476e-14, 8.37957055e-17],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00]],

        [[1.05306175e-20, 1.05306175e-20, 7.98490480e-30, ...,
          1.64580108e-38, 1.64580108e-38, 0.00000000e+00],
         [1.05306175e-20, 1.05306175e-20, 7.98490480e-30, ...,
          1.42498794e-21, 4.24782887e-18, 4.24782887e-18],
         [1.15438274e-17, 1.26593436e-14, 1.87881308e-12, ...,
          3.13793745e-17, 4.24782887e-18, 4.24782887e-18],
         ...,
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          1.00773070e-10, 9.18931476e-14, 8.37957055e-17],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [2], 'to': [5]}
tf node:
{'name': 'log', 'output': array([[[[-46.      , -46.      , -67.      , ..., -87.00001 ,
          -87.00001 ,       -inf],
         [-46.      , -46.      , -67.      , ..., -48.000122,
          -40.000122, -40.000122],
         [-39.00038 , -32.00038 , -27.000381, ..., -38.00038 ,
          -40.000122, -40.000122],
         ...,
         [      -inf,       -inf,       -inf, ..., -23.01815 ,
          -30.01815 , -37.01815 ],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[-46.      , -46.      , -67.      , ..., -87.00001 ,
          -87.00001 ,       -inf],
         [-46.      , -46.      , -67.      , ..., -48.000122,
          -40.000122, -40.000122],
         [-39.00038 , -32.00038 , -27.000381, ..., -38.00038 ,
          -40.000122, -40.000122],
         ...,
         [      -inf,       -inf,       -inf, ..., -23.01815 ,
          -30.01815 , -37.01815 ],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[-46.      , -46.      , -67.      , ..., -87.00001 ,
          -87.00001 ,       -inf],
         [-46.      , -46.      , -67.      , ..., -48.000122,
          -40.000122, -40.000122],
         [-39.00038 , -32.00038 , -27.000381, ..., -38.00038 ,
          -40.000122, -40.000122],
         ...,
         [      -inf,       -inf,       -inf, ..., -23.01815 ,
          -30.01815 , -37.01815 ],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        ...,

        [[-46.      , -46.      , -67.      , ..., -87.00001 ,
          -87.00001 ,       -inf],
         [-46.      , -46.      , -67.      , ..., -48.000122,
          -40.000122, -40.000122],
         [-39.00038 , -32.00038 , -27.000381, ..., -38.00038 ,
          -40.000122, -40.000122],
         ...,
         [      -inf,       -inf,       -inf, ..., -23.01815 ,
          -30.01815 , -37.01815 ],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[-46.      , -46.      , -67.      , ..., -87.00001 ,
          -87.00001 ,       -inf],
         [-46.      , -46.      , -67.      , ..., -48.000122,
          -40.000122, -40.000122],
         [-39.00038 , -32.00038 , -27.000381, ..., -38.00038 ,
          -40.000122, -40.000122],
         ...,
         [      -inf,       -inf,       -inf, ..., -23.01815 ,
          -30.01815 , -37.01815 ],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[-46.      , -46.      , -67.      , ..., -87.00001 ,
          -87.00001 ,       -inf],
         [-46.      , -46.      , -67.      , ..., -48.000122,
          -40.000122, -40.000122],
         [-39.00038 , -32.00038 , -27.000381, ..., -38.00038 ,
          -40.000122, -40.000122],
         ...,
         [      -inf,       -inf,       -inf, ..., -23.01815 ,
          -30.01815 , -37.01815 ],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [3], 'to': [9]}
ms node:
{'name': 'log', 'output': array([[[[-46.      , -46.      , -66.99999 , ...,       -inf,
                -inf,       -inf],
         [-46.      , -46.      , -66.99999 , ..., -48.000126,
          -40.000122, -40.000122],
         [-39.00038 , -32.00038 , -27.000378, ..., -38.000385,
          -40.000122, -40.000122],
         ...,
         [      -inf,       -inf,       -inf, ..., -23.018152,
          -30.018152, -37.01815 ],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[-46.      , -46.      , -66.99999 , ...,       -inf,
                -inf,       -inf],
         [-46.      , -46.      , -66.99999 , ..., -48.000126,
          -40.000122, -40.000122],
         [-39.00038 , -32.00038 , -27.000378, ..., -38.000385,
          -40.000122, -40.000122],
         ...,
         [      -inf,       -inf,       -inf, ..., -23.018152,
          -30.018152, -37.01815 ],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[-46.      , -46.      , -66.99999 , ...,       -inf,
                -inf,       -inf],
         [-46.      , -46.      , -66.99999 , ..., -48.000126,
          -40.000122, -40.000122],
         [-39.00038 , -32.00038 , -27.000378, ..., -38.000385,
          -40.000122, -40.000122],
         ...,
         [      -inf,       -inf,       -inf, ..., -23.018152,
          -30.018152, -37.01815 ],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        ...,

        [[-46.      , -46.      , -66.99999 , ...,       -inf,
                -inf,       -inf],
         [-46.      , -46.      , -66.99999 , ..., -48.000126,
          -40.000122, -40.000122],
         [-39.00038 , -32.00038 , -27.000378, ..., -38.000385,
          -40.000122, -40.000122],
         ...,
         [      -inf,       -inf,       -inf, ..., -23.018152,
          -30.018152, -37.01815 ],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[-46.      , -46.      , -66.99999 , ...,       -inf,
                -inf,       -inf],
         [-46.      , -46.      , -66.99999 , ..., -48.000126,
          -40.000122, -40.000122],
         [-39.00038 , -32.00038 , -27.000378, ..., -38.000385,
          -40.000122, -40.000122],
         ...,
         [      -inf,       -inf,       -inf, ..., -23.018152,
          -30.018152, -37.01815 ],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[-46.      , -46.      , -66.99999 , ...,       -inf,
                -inf,       -inf],
         [-46.      , -46.      , -66.99999 , ..., -48.000126,
          -40.000122, -40.000122],
         [-39.00038 , -32.00038 , -27.000378, ..., -38.000385,
          -40.000122, -40.000122],
         ...,
         [      -inf,       -inf,       -inf, ..., -23.018152,
          -30.018152, -37.01815 ],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [3], 'to': [9]}
torch node:
{'name': 'log', 'output': array([[[[ -46.      ,  -46.      ,  -67.      , ...,  -87.00001 ,
           -87.00001 ,        -inf],
         [ -46.      ,  -46.      ,  -67.      , ...,  -48.000122,
           -40.000122,  -40.000122],
         [ -39.00038 ,  -32.00038 ,  -27.000381, ...,  -38.00038 ,
           -40.000122,  -40.000122],
         ...,
         [ -90.      ,  -90.      , -100.97634 , ...,  -23.01815 ,
           -30.01815 ,  -37.01815 ],
         [ -90.      ,  -90.      , -100.97634 , ...,  -97.00041 ,
                 -inf,        -inf],
         [ -90.      ,  -90.      ,        -inf, ...,  -98.00082 ,
                 -inf,        -inf]],

        [[ -46.      ,  -46.      ,  -67.      , ...,  -87.00001 ,
           -87.00001 ,        -inf],
         [ -46.      ,  -46.      ,  -67.      , ...,  -48.000122,
           -40.000122,  -40.000122],
         [ -39.00038 ,  -32.00038 ,  -27.000381, ...,  -38.00038 ,
           -40.000122,  -40.000122],
         ...,
         [ -90.      ,  -90.      , -100.97634 , ...,  -23.01815 ,
           -30.01815 ,  -37.01815 ],
         [ -90.      ,  -90.      , -100.97634 , ...,  -97.00041 ,
                 -inf,        -inf],
         [ -90.      ,  -90.      ,        -inf, ...,  -98.00082 ,
                 -inf,        -inf]],

        [[ -46.      ,  -46.      ,  -67.      , ...,  -87.00001 ,
           -87.00001 ,        -inf],
         [ -46.      ,  -46.      ,  -67.      , ...,  -48.000122,
           -40.000122,  -40.000122],
         [ -39.00038 ,  -32.00038 ,  -27.000381, ...,  -38.00038 ,
           -40.000122,  -40.000122],
         ...,
         [ -90.      ,  -90.      , -100.97634 , ...,  -23.01815 ,
           -30.01815 ,  -37.01815 ],
         [ -90.      ,  -90.      , -100.97634 , ...,  -97.00041 ,
                 -inf,        -inf],
         [ -90.      ,  -90.      ,        -inf, ...,  -98.00082 ,
                 -inf,        -inf]],

        ...,

        [[ -46.      ,  -46.      ,  -67.      , ...,  -87.00001 ,
           -87.00001 ,        -inf],
         [ -46.      ,  -46.      ,  -67.      , ...,  -48.000122,
           -40.000122,  -40.000122],
         [ -39.00038 ,  -32.00038 ,  -27.000381, ...,  -38.00038 ,
           -40.000122,  -40.000122],
         ...,
         [ -90.      ,  -90.      , -100.97634 , ...,  -23.01815 ,
           -30.01815 ,  -37.01815 ],
         [ -90.      ,  -90.      , -100.97634 , ...,  -97.00041 ,
                 -inf,        -inf],
         [ -90.      ,  -90.      ,        -inf, ...,  -98.00082 ,
                 -inf,        -inf]],

        [[ -46.      ,  -46.      ,  -67.      , ...,  -87.00001 ,
           -87.00001 ,        -inf],
         [ -46.      ,  -46.      ,  -67.      , ...,  -48.000122,
           -40.000122,  -40.000122],
         [ -39.00038 ,  -32.00038 ,  -27.000381, ...,  -38.00038 ,
           -40.000122,  -40.000122],
         ...,
         [ -90.      ,  -90.      , -100.97634 , ...,  -23.01815 ,
           -30.01815 ,  -37.01815 ],
         [ -90.      ,  -90.      , -100.97634 , ...,  -97.00041 ,
                 -inf,        -inf],
         [ -90.      ,  -90.      ,        -inf, ...,  -98.00082 ,
                 -inf,        -inf]],

        [[ -46.      ,  -46.      ,  -67.      , ...,  -87.00001 ,
           -87.00001 ,        -inf],
         [ -46.      ,  -46.      ,  -67.      , ...,  -48.000122,
           -40.000122,  -40.000122],
         [ -39.00038 ,  -32.00038 ,  -27.000381, ...,  -38.00038 ,
           -40.000122,  -40.000122],
         ...,
         [ -90.      ,  -90.      , -100.97634 , ...,  -23.01815 ,
           -30.01815 ,  -37.01815 ],
         [ -90.      ,  -90.      , -100.97634 , ...,  -97.00041 ,
                 -inf,        -inf],
         [ -90.      ,  -90.      ,        -inf, ...,  -98.00082 ,
                 -inf,        -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [3], 'to': [9]}

generate models:76

final statics:
total operators:28
tensorflow --> nums:13,distinct_bugs:4
mindspore --> nums:6,distinct_bugs:3
torch --> nums:6,distinct_bugs:4
tensorflow --> 
conv2d:8
sin:3
softmax:1
log:1
mindspore --> 
sin:3
log:2
softmax:1
torch --> 
sin:3
flatten:1
softmax:1
log:1

generate models:85
