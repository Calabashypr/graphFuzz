
analyse output arrays in iter:4

pre layer res:
0:conv2d
{'name': 'conv2d', 'output': array([[[[ 1.1339357 ,  0.4800929 ,  2.070427  , ...,  2.167976  ,
          -2.3229125 , -1.7053437 ],
         [-2.0418003 , -1.2270638 , -0.8004884 , ...,  1.151196  ,
          -1.3888175 ,  0.26266956],
         [-0.24623829,  4.170479  ,  4.2415037 , ..., -5.0131693 ,
          -1.9064652 ,  0.07671463],
         ...,
         [ 2.888095  ,  3.5833173 ,  4.009797  , ..., -1.5086266 ,
          -0.33139747,  0.48822325],
         [-0.73745525, -1.8409352 , -3.231842  , ..., -2.3474488 ,
          -1.5759728 ,  0.08429813],
         [-3.703788  , -5.147309  , -4.8158154 , ..., -2.4069533 ,
          -2.0475388 , -0.8341675 ]],

        [[ 1.1339357 ,  0.4800929 ,  2.070427  , ...,  2.167976  ,
          -2.3229125 , -1.7053437 ],
         [-2.0418003 , -1.2270638 , -0.8004884 , ...,  1.151196  ,
          -1.3888175 ,  0.26266956],
         [-0.24623829,  4.170479  ,  4.2415037 , ..., -5.0131693 ,
          -1.9064652 ,  0.07671463],
         ...,
         [ 2.888095  ,  3.5833173 ,  4.009797  , ..., -1.5086266 ,
          -0.33139747,  0.48822325],
         [-0.73745525, -1.8409352 , -3.231842  , ..., -2.3474488 ,
          -1.5759728 ,  0.08429813],
         [-3.703788  , -5.147309  , -4.8158154 , ..., -2.4069533 ,
          -2.0475388 , -0.8341675 ]],

        [[ 1.1339357 ,  0.4800929 ,  2.070427  , ...,  2.167976  ,
          -2.3229125 , -1.7053437 ],
         [-2.0418003 , -1.2270638 , -0.8004884 , ...,  1.151196  ,
          -1.3888175 ,  0.26266956],
         [-0.24623829,  4.170479  ,  4.2415037 , ..., -5.0131693 ,
          -1.9064652 ,  0.07671463],
         ...,
         [ 2.888095  ,  3.5833173 ,  4.009797  , ..., -1.5086266 ,
          -0.33139747,  0.48822325],
         [-0.73745525, -1.8409352 , -3.231842  , ..., -2.3474488 ,
          -1.5759728 ,  0.08429813],
         [-3.703788  , -5.147309  , -4.8158154 , ..., -2.4069533 ,
          -2.0475388 , -0.8341675 ]],

        ...,

        [[ 1.1339357 ,  0.4800929 ,  2.070427  , ...,  2.167976  ,
          -2.3229125 , -1.7053437 ],
         [-2.0418003 , -1.2270638 , -0.8004884 , ...,  1.151196  ,
          -1.3888175 ,  0.26266956],
         [-0.24623829,  4.170479  ,  4.2415037 , ..., -5.0131693 ,
          -1.9064652 ,  0.07671463],
         ...,
         [ 2.888095  ,  3.5833173 ,  4.009797  , ..., -1.5086266 ,
          -0.33139747,  0.48822325],
         [-0.73745525, -1.8409352 , -3.231842  , ..., -2.3474488 ,
          -1.5759728 ,  0.08429813],
         [-3.703788  , -5.147309  , -4.8158154 , ..., -2.4069533 ,
          -2.0475388 , -0.8341675 ]],

        [[ 1.1339357 ,  0.4800929 ,  2.070427  , ...,  2.167976  ,
          -2.3229125 , -1.7053437 ],
         [-2.0418003 , -1.2270638 , -0.8004884 , ...,  1.151196  ,
          -1.3888175 ,  0.26266956],
         [-0.24623829,  4.170479  ,  4.2415037 , ..., -5.0131693 ,
          -1.9064652 ,  0.07671463],
         ...,
         [ 2.888095  ,  3.5833173 ,  4.009797  , ..., -1.5086266 ,
          -0.33139747,  0.48822325],
         [-0.73745525, -1.8409352 , -3.231842  , ..., -2.3474488 ,
          -1.5759728 ,  0.08429813],
         [-3.703788  , -5.147309  , -4.8158154 , ..., -2.4069533 ,
          -2.0475388 , -0.8341675 ]],

        [[ 1.1339357 ,  0.4800929 ,  2.070427  , ...,  2.167976  ,
          -2.3229125 , -1.7053437 ],
         [-2.0418003 , -1.2270638 , -0.8004884 , ...,  1.151196  ,
          -1.3888175 ,  0.26266956],
         [-0.24623829,  4.170479  ,  4.2415037 , ..., -5.0131693 ,
          -1.9064652 ,  0.07671463],
         ...,
         [ 2.888095  ,  3.5833173 ,  4.009797  , ..., -1.5086266 ,
          -0.33139747,  0.48822325],
         [-0.73745525, -1.8409352 , -3.231842  , ..., -2.3474488 ,
          -1.5759728 ,  0.08429813],
         [-3.703788  , -5.147309  , -4.8158154 , ..., -2.4069533 ,
          -2.0475388 , -0.8341675 ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [], 'to': [5, 6]}
tf node:
{'name': 'log', 'output': array([[[[ 0.1256945 , -0.7337756 ,  0.72775483, ...,  0.773794  ,
                  nan,         nan],
         [        nan,         nan,         nan, ...,  0.1408014 ,
                  nan, -1.3368585 ],
         [        nan,  1.4280308 ,  1.4449179 , ...,         nan,
                  nan, -2.5676627 ],
         ...,
         [ 1.0605971 ,  1.276289  ,  1.3887407 , ...,         nan,
                  nan, -0.7169825 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan, -2.4733956 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[ 0.1256945 , -0.7337756 ,  0.72775483, ...,  0.773794  ,
                  nan,         nan],
         [        nan,         nan,         nan, ...,  0.1408014 ,
                  nan, -1.3368585 ],
         [        nan,  1.4280308 ,  1.4449179 , ...,         nan,
                  nan, -2.5676627 ],
         ...,
         [ 1.0605971 ,  1.276289  ,  1.3887407 , ...,         nan,
                  nan, -0.7169825 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan, -2.4733956 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[ 0.1256945 , -0.7337756 ,  0.72775483, ...,  0.773794  ,
                  nan,         nan],
         [        nan,         nan,         nan, ...,  0.1408014 ,
                  nan, -1.3368585 ],
         [        nan,  1.4280308 ,  1.4449179 , ...,         nan,
                  nan, -2.5676627 ],
         ...,
         [ 1.0605971 ,  1.276289  ,  1.3887407 , ...,         nan,
                  nan, -0.7169825 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan, -2.4733956 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        ...,

        [[ 0.1256945 , -0.7337756 ,  0.72775483, ...,  0.773794  ,
                  nan,         nan],
         [        nan,         nan,         nan, ...,  0.1408014 ,
                  nan, -1.3368585 ],
         [        nan,  1.4280308 ,  1.4449179 , ...,         nan,
                  nan, -2.5676627 ],
         ...,
         [ 1.0605971 ,  1.276289  ,  1.3887407 , ...,         nan,
                  nan, -0.7169825 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan, -2.4733956 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[ 0.1256945 , -0.7337756 ,  0.72775483, ...,  0.773794  ,
                  nan,         nan],
         [        nan,         nan,         nan, ...,  0.1408014 ,
                  nan, -1.3368585 ],
         [        nan,  1.4280308 ,  1.4449179 , ...,         nan,
                  nan, -2.5676627 ],
         ...,
         [ 1.0605971 ,  1.276289  ,  1.3887407 , ...,         nan,
                  nan, -0.7169825 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan, -2.4733956 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[ 0.1256945 , -0.7337756 ,  0.72775483, ...,  0.773794  ,
                  nan,         nan],
         [        nan,         nan,         nan, ...,  0.1408014 ,
                  nan, -1.3368585 ],
         [        nan,  1.4280308 ,  1.4449179 , ...,         nan,
                  nan, -2.5676627 ],
         ...,
         [ 1.0605971 ,  1.276289  ,  1.3887407 , ...,         nan,
                  nan, -0.7169825 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan, -2.4733956 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [0], 'to': [1]}
ms node:
{'name': 'log', 'output': array([[[[ 0.12569134, -0.7337756 ,  0.7277582 , ...,  0.7737911 ,
                  nan,         nan],
         [        nan,         nan,         nan, ...,  0.14079824,
                  nan, -1.336855  ],
         [        nan,  1.4280343 ,  1.4449213 , ...,         nan,
                  nan, -2.567662  ],
         ...,
         [ 1.0605971 ,  1.276288  ,  1.3887392 , ...,         nan,
                  nan, -0.7169839 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan, -2.4733975 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[ 0.12569134, -0.7337756 ,  0.7277582 , ...,  0.7737911 ,
                  nan,         nan],
         [        nan,         nan,         nan, ...,  0.14079824,
                  nan, -1.336855  ],
         [        nan,  1.4280343 ,  1.4449213 , ...,         nan,
                  nan, -2.567662  ],
         ...,
         [ 1.0605971 ,  1.276288  ,  1.3887392 , ...,         nan,
                  nan, -0.7169839 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan, -2.4733975 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[ 0.12569134, -0.7337756 ,  0.7277582 , ...,  0.7737911 ,
                  nan,         nan],
         [        nan,         nan,         nan, ...,  0.14079824,
                  nan, -1.336855  ],
         [        nan,  1.4280343 ,  1.4449213 , ...,         nan,
                  nan, -2.567662  ],
         ...,
         [ 1.0605971 ,  1.276288  ,  1.3887392 , ...,         nan,
                  nan, -0.7169839 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan, -2.4733975 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        ...,

        [[ 0.12569134, -0.7337756 ,  0.7277582 , ...,  0.7737911 ,
                  nan,         nan],
         [        nan,         nan,         nan, ...,  0.14079824,
                  nan, -1.336855  ],
         [        nan,  1.4280343 ,  1.4449213 , ...,         nan,
                  nan, -2.567662  ],
         ...,
         [ 1.0605971 ,  1.276288  ,  1.3887392 , ...,         nan,
                  nan, -0.7169839 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan, -2.4733975 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[ 0.12569134, -0.7337756 ,  0.7277582 , ...,  0.7737911 ,
                  nan,         nan],
         [        nan,         nan,         nan, ...,  0.14079824,
                  nan, -1.336855  ],
         [        nan,  1.4280343 ,  1.4449213 , ...,         nan,
                  nan, -2.567662  ],
         ...,
         [ 1.0605971 ,  1.276288  ,  1.3887392 , ...,         nan,
                  nan, -0.7169839 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan, -2.4733975 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[ 0.12569134, -0.7337756 ,  0.7277582 , ...,  0.7737911 ,
                  nan,         nan],
         [        nan,         nan,         nan, ...,  0.14079824,
                  nan, -1.336855  ],
         [        nan,  1.4280343 ,  1.4449213 , ...,         nan,
                  nan, -2.567662  ],
         ...,
         [ 1.0605971 ,  1.276288  ,  1.3887392 , ...,         nan,
                  nan, -0.7169839 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan, -2.4733975 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [0], 'to': [1]}
torch node:
{'name': 'log', 'output': array([[[[ 0.1256945 , -0.7337756 ,  0.72775483, ...,  0.773794  ,
                  nan,         nan],
         [        nan,         nan,         nan, ...,  0.1408014 ,
                  nan, -1.3368585 ],
         [        nan,  1.4280308 ,  1.4449179 , ...,         nan,
                  nan, -2.5676627 ],
         ...,
         [ 1.0605971 ,  1.276289  ,  1.3887407 , ...,         nan,
                  nan, -0.7169825 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan, -2.4733956 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[ 0.1256945 , -0.7337756 ,  0.72775483, ...,  0.773794  ,
                  nan,         nan],
         [        nan,         nan,         nan, ...,  0.1408014 ,
                  nan, -1.3368585 ],
         [        nan,  1.4280308 ,  1.4449179 , ...,         nan,
                  nan, -2.5676627 ],
         ...,
         [ 1.0605971 ,  1.276289  ,  1.3887407 , ...,         nan,
                  nan, -0.7169825 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan, -2.4733956 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[ 0.1256945 , -0.7337756 ,  0.72775483, ...,  0.773794  ,
                  nan,         nan],
         [        nan,         nan,         nan, ...,  0.1408014 ,
                  nan, -1.3368585 ],
         [        nan,  1.4280308 ,  1.4449179 , ...,         nan,
                  nan, -2.5676627 ],
         ...,
         [ 1.0605971 ,  1.276289  ,  1.3887407 , ...,         nan,
                  nan, -0.7169825 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan, -2.4733956 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        ...,

        [[ 0.1256945 , -0.7337756 ,  0.72775483, ...,  0.773794  ,
                  nan,         nan],
         [        nan,         nan,         nan, ...,  0.1408014 ,
                  nan, -1.3368585 ],
         [        nan,  1.4280308 ,  1.4449179 , ...,         nan,
                  nan, -2.5676627 ],
         ...,
         [ 1.0605971 ,  1.276289  ,  1.3887407 , ...,         nan,
                  nan, -0.7169825 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan, -2.4733956 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[ 0.1256945 , -0.73377573,  0.7277547 , ...,  0.7737942 ,
                  nan,         nan],
         [        nan,         nan,         nan, ...,  0.1408014 ,
                  nan, -1.3368593 ],
         [        nan,  1.4280311 ,  1.4449179 , ...,         nan,
                  nan, -2.5676627 ],
         ...,
         [ 1.0605972 ,  1.2762889 ,  1.3887407 , ...,         nan,
                  nan, -0.7169821 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan, -2.4733934 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[ 0.1256945 , -0.73377573,  0.7277547 , ...,  0.7737942 ,
                  nan,         nan],
         [        nan,         nan,         nan, ...,  0.1408014 ,
                  nan, -1.3368593 ],
         [        nan,  1.4280311 ,  1.4449179 , ...,         nan,
                  nan, -2.5676627 ],
         ...,
         [ 1.0605972 ,  1.2762889 ,  1.3887407 , ...,         nan,
                  nan, -0.7169821 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan, -2.4733934 ],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [0], 'to': [1]}

generate models:5

analyse output arrays in iter:9

pre layer res:
12:log
{'name': 'log', 'output': array([[[[-0.08649904, -0.08649664, -0.08649819, ..., -0.08650905,
          -0.0865602 , -0.08649481],
         [-0.08652984, -0.08650352, -0.08651035, ..., -0.08650612,
          -0.08652061, -0.08649521],
         [-0.08651555, -0.0864954 ,        -inf, ..., -0.08654083,
          -0.08649384, -0.08655044],
         ...,
         [-0.08649923, -0.0865145 , -0.08653108, ..., -0.08649917,
          -0.08649404, -0.08655324],
         [-0.08665828, -0.0865149 , -0.08650352, ..., -0.08650885,
          -0.08651307, -0.0864976 ],
         [-0.08656806, -0.08655285, -0.08650476, ..., -0.08649715,
          -0.08650287, -0.08657242]],

        [[-0.08649904, -0.08649664, -0.08649819, ..., -0.08650905,
          -0.0865602 , -0.08649481],
         [-0.08652984, -0.08650352, -0.08651035, ..., -0.08650612,
          -0.08652061, -0.08649521],
         [-0.08651555, -0.0864954 ,        -inf, ..., -0.08654083,
          -0.08649384, -0.08655044],
         ...,
         [-0.08649923, -0.0865145 , -0.08653108, ..., -0.08649917,
          -0.08649404, -0.08655324],
         [-0.08665828, -0.0865149 , -0.08650352, ..., -0.08650885,
          -0.08651307, -0.0864976 ],
         [-0.08656806, -0.08655285, -0.08650476, ..., -0.08649715,
          -0.08650287, -0.08657242]],

        [[-0.08649904, -0.08649664, -0.08649819, ..., -0.08650905,
          -0.0865602 , -0.08649481],
         [-0.08652984, -0.08650352, -0.08651035, ..., -0.08650612,
          -0.08652061, -0.08649521],
         [-0.08651555, -0.0864954 ,        -inf, ..., -0.08654083,
          -0.08649384, -0.08655044],
         ...,
         [-0.08649923, -0.0865145 , -0.08653108, ..., -0.08649917,
          -0.08649404, -0.08655324],
         [-0.08665828, -0.0865149 , -0.08650352, ..., -0.08650885,
          -0.08651307, -0.0864976 ],
         [-0.08656806, -0.08655285, -0.08650476, ..., -0.08649715,
          -0.08650287, -0.08657242]],

        ...,

        [[-0.08649904, -0.08649664, -0.08649819, ..., -0.08650905,
          -0.0865602 , -0.08649481],
         [-0.08652984, -0.08650352, -0.08651035, ..., -0.08650612,
          -0.08652061, -0.08649521],
         [-0.08651555, -0.0864954 ,        -inf, ..., -0.08654083,
          -0.08649384, -0.08655044],
         ...,
         [-0.08649923, -0.0865145 , -0.08653108, ..., -0.08649917,
          -0.08649404, -0.08655324],
         [-0.08665828, -0.0865149 , -0.08650352, ..., -0.08650885,
          -0.08651307, -0.0864976 ],
         [-0.08656806, -0.08655285, -0.08650476, ..., -0.08649715,
          -0.08650287, -0.08657242]],

        [[-0.08649904, -0.08649664, -0.08649819, ..., -0.08650905,
          -0.0865602 , -0.08649481],
         [-0.08652984, -0.08650352, -0.08651035, ..., -0.08650612,
          -0.08652061, -0.08649521],
         [-0.08651555, -0.0864954 ,        -inf, ..., -0.08654083,
          -0.08649384, -0.08655044],
         ...,
         [-0.08649923, -0.0865145 , -0.08653108, ..., -0.08649917,
          -0.08649404, -0.08655324],
         [-0.08665828, -0.0865149 , -0.08650352, ..., -0.08650885,
          -0.08651307, -0.0864976 ],
         [-0.08656806, -0.08655285, -0.08650476, ..., -0.08649715,
          -0.08650287, -0.08657242]],

        [[-0.08649904, -0.08649664, -0.08649819, ..., -0.08650905,
          -0.0865602 , -0.08649481],
         [-0.08652984, -0.08650352, -0.08651035, ..., -0.08650612,
          -0.08652061, -0.08649521],
         [-0.08651555, -0.0864954 ,        -inf, ..., -0.08654083,
          -0.08649384, -0.08655044],
         ...,
         [-0.08649923, -0.0865145 , -0.08653108, ..., -0.08649917,
          -0.08649404, -0.08655324],
         [-0.08665828, -0.0865149 , -0.08650352, ..., -0.08650885,
          -0.08651307, -0.0864976 ],
         [-0.08656806, -0.08655285, -0.08650476, ..., -0.08649715,
          -0.08650287, -0.08657242]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [13], 'to': [10]}
tf node:
{'name': 'cos', 'output': array([[[[0.9962613 , 0.9962615 , 0.99626136, ..., 0.9962604 ,
          0.996256  , 0.99626166],
         [0.9962586 , 0.9962609 , 0.9962603 , ..., 0.9962607 ,
          0.99625945, 0.9962616 ],
         [0.99625987, 0.9962616 ,        nan, ..., 0.99625766,
          0.9962617 , 0.9962568 ],
         ...,
         [0.9962613 , 0.9962599 , 0.9962585 , ..., 0.9962613 ,
          0.9962617 , 0.9962566 ],
         [0.99624753, 0.9962599 , 0.9962609 , ..., 0.99626046,
          0.9962601 , 0.9962614 ],
         [0.99625534, 0.99625665, 0.9962608 , ..., 0.9962615 ,
          0.99626094, 0.9962549 ]],

        [[0.9962613 , 0.9962615 , 0.99626136, ..., 0.9962604 ,
          0.996256  , 0.99626166],
         [0.9962586 , 0.9962609 , 0.9962603 , ..., 0.9962607 ,
          0.99625945, 0.9962616 ],
         [0.99625987, 0.9962616 ,        nan, ..., 0.99625766,
          0.9962617 , 0.9962568 ],
         ...,
         [0.9962613 , 0.9962599 , 0.9962585 , ..., 0.9962613 ,
          0.9962617 , 0.9962566 ],
         [0.99624753, 0.9962599 , 0.9962609 , ..., 0.99626046,
          0.9962601 , 0.9962614 ],
         [0.99625534, 0.99625665, 0.9962608 , ..., 0.9962615 ,
          0.99626094, 0.9962549 ]],

        [[0.9962613 , 0.9962615 , 0.99626136, ..., 0.9962604 ,
          0.996256  , 0.99626166],
         [0.9962586 , 0.9962609 , 0.9962603 , ..., 0.9962607 ,
          0.99625945, 0.9962616 ],
         [0.99625987, 0.9962616 ,        nan, ..., 0.99625766,
          0.9962617 , 0.9962568 ],
         ...,
         [0.9962613 , 0.9962599 , 0.9962585 , ..., 0.9962613 ,
          0.9962617 , 0.9962566 ],
         [0.99624753, 0.9962599 , 0.9962609 , ..., 0.99626046,
          0.9962601 , 0.9962614 ],
         [0.99625534, 0.99625665, 0.9962608 , ..., 0.9962615 ,
          0.99626094, 0.9962549 ]],

        ...,

        [[0.9962613 , 0.9962615 , 0.99626136, ..., 0.9962604 ,
          0.996256  , 0.99626166],
         [0.9962586 , 0.9962609 , 0.9962603 , ..., 0.9962607 ,
          0.99625945, 0.9962616 ],
         [0.99625987, 0.9962616 ,        nan, ..., 0.99625766,
          0.9962617 , 0.9962568 ],
         ...,
         [0.9962613 , 0.9962599 , 0.9962585 , ..., 0.9962613 ,
          0.9962617 , 0.9962566 ],
         [0.99624753, 0.9962599 , 0.9962609 , ..., 0.99626046,
          0.9962601 , 0.9962614 ],
         [0.99625534, 0.99625665, 0.9962608 , ..., 0.9962615 ,
          0.99626094, 0.9962549 ]],

        [[0.9962613 , 0.9962615 , 0.99626136, ..., 0.9962604 ,
          0.996256  , 0.99626166],
         [0.9962586 , 0.9962609 , 0.9962603 , ..., 0.9962607 ,
          0.99625945, 0.9962616 ],
         [0.99625987, 0.9962616 ,        nan, ..., 0.99625766,
          0.9962617 , 0.9962568 ],
         ...,
         [0.9962613 , 0.9962599 , 0.9962585 , ..., 0.9962613 ,
          0.9962617 , 0.9962566 ],
         [0.99624753, 0.9962599 , 0.9962609 , ..., 0.99626046,
          0.9962601 , 0.9962614 ],
         [0.99625534, 0.99625665, 0.9962608 , ..., 0.9962615 ,
          0.99626094, 0.9962549 ]],

        [[0.9962613 , 0.9962615 , 0.99626136, ..., 0.9962604 ,
          0.996256  , 0.99626166],
         [0.9962586 , 0.9962609 , 0.9962603 , ..., 0.9962607 ,
          0.99625945, 0.9962616 ],
         [0.99625987, 0.9962616 ,        nan, ..., 0.99625766,
          0.9962617 , 0.9962568 ],
         ...,
         [0.9962613 , 0.9962599 , 0.9962585 , ..., 0.9962613 ,
          0.9962617 , 0.9962566 ],
         [0.99624753, 0.9962599 , 0.9962609 , ..., 0.99626046,
          0.9962601 , 0.9962614 ],
         [0.99625534, 0.99625665, 0.9962608 , ..., 0.9962615 ,
          0.99626094, 0.9962549 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [12], 'to': [14]}
ms node:
{'name': 'cos', 'output': array([[[[0.9962612 , 0.9962614 , 0.9962613 , ..., 0.99626034,
          0.99625593, 0.9962616 ],
         [0.99625856, 0.9962608 , 0.9962602 , ..., 0.9962606 ,
          0.99625933, 0.99626154],
         [0.9962598 , 0.99626154,        nan, ..., 0.9962576 ,
          0.99626166, 0.99625677],
         ...,
         [0.9962612 , 0.99625987, 0.99625844, ..., 0.9962612 ,
          0.99626166, 0.99625653],
         [0.9962475 , 0.99625987, 0.9962608 , ..., 0.99626034,
          0.99626   , 0.99626136],
         [0.9962552 , 0.99625653, 0.9962607 , ..., 0.99626136,
          0.9962609 , 0.99625486]],

        [[0.9962612 , 0.9962614 , 0.9962613 , ..., 0.99626034,
          0.99625593, 0.9962616 ],
         [0.99625856, 0.9962608 , 0.9962602 , ..., 0.9962606 ,
          0.99625933, 0.99626154],
         [0.9962598 , 0.99626154,        nan, ..., 0.9962576 ,
          0.99626166, 0.99625677],
         ...,
         [0.9962612 , 0.99625987, 0.99625844, ..., 0.9962612 ,
          0.99626166, 0.99625653],
         [0.9962475 , 0.99625987, 0.9962608 , ..., 0.99626034,
          0.99626   , 0.99626136],
         [0.9962552 , 0.99625653, 0.9962607 , ..., 0.99626136,
          0.9962609 , 0.99625486]],

        [[0.9962612 , 0.9962614 , 0.9962613 , ..., 0.99626034,
          0.99625593, 0.9962616 ],
         [0.99625856, 0.9962608 , 0.9962602 , ..., 0.9962606 ,
          0.99625933, 0.99626154],
         [0.9962598 , 0.99626154,        nan, ..., 0.9962576 ,
          0.99626166, 0.99625677],
         ...,
         [0.9962612 , 0.99625987, 0.99625844, ..., 0.9962612 ,
          0.99626166, 0.99625653],
         [0.9962475 , 0.99625987, 0.9962608 , ..., 0.99626034,
          0.99626   , 0.99626136],
         [0.9962552 , 0.99625653, 0.9962607 , ..., 0.99626136,
          0.9962609 , 0.99625486]],

        ...,

        [[0.9962612 , 0.9962614 , 0.9962613 , ..., 0.99626034,
          0.99625593, 0.9962616 ],
         [0.99625856, 0.9962608 , 0.9962602 , ..., 0.9962606 ,
          0.99625933, 0.99626154],
         [0.9962598 , 0.99626154,        nan, ..., 0.9962576 ,
          0.99626166, 0.99625677],
         ...,
         [0.9962612 , 0.99625987, 0.99625844, ..., 0.9962612 ,
          0.99626166, 0.99625653],
         [0.9962475 , 0.99625987, 0.9962608 , ..., 0.99626034,
          0.99626   , 0.99626136],
         [0.9962552 , 0.99625653, 0.9962607 , ..., 0.99626136,
          0.9962609 , 0.99625486]],

        [[0.9962612 , 0.9962614 , 0.9962613 , ..., 0.99626034,
          0.99625593, 0.9962616 ],
         [0.99625856, 0.9962608 , 0.9962602 , ..., 0.9962606 ,
          0.99625933, 0.99626154],
         [0.9962598 , 0.99626154,        nan, ..., 0.9962576 ,
          0.99626166, 0.99625677],
         ...,
         [0.9962612 , 0.99625987, 0.99625844, ..., 0.9962612 ,
          0.99626166, 0.99625653],
         [0.9962475 , 0.99625987, 0.9962608 , ..., 0.99626034,
          0.99626   , 0.99626136],
         [0.9962552 , 0.99625653, 0.9962607 , ..., 0.99626136,
          0.9962609 , 0.99625486]],

        [[0.9962612 , 0.9962614 , 0.9962613 , ..., 0.99626034,
          0.99625593, 0.9962616 ],
         [0.99625856, 0.9962608 , 0.9962602 , ..., 0.9962606 ,
          0.99625933, 0.99626154],
         [0.9962598 , 0.99626154,        nan, ..., 0.9962576 ,
          0.99626166, 0.99625677],
         ...,
         [0.9962612 , 0.99625987, 0.99625844, ..., 0.9962612 ,
          0.99626166, 0.99625653],
         [0.9962475 , 0.99625987, 0.9962608 , ..., 0.99626034,
          0.99626   , 0.99626136],
         [0.9962552 , 0.99625653, 0.9962607 , ..., 0.99626136,
          0.9962609 , 0.99625486]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [12], 'to': [14]}
torch node:
{'name': 'cos', 'output': array([[[[0.9962613 , 0.9962615 , 0.99626136, ..., 0.9962604 ,
          0.996256  , 0.99626166],
         [0.9962586 , 0.9962609 , 0.9962603 , ..., 0.9962607 ,
          0.99625945, 0.9962616 ],
         [0.99625987, 0.9962616 ,        nan, ..., 0.99625766,
          0.9962617 , 0.9962568 ],
         ...,
         [0.99626124, 0.9962599 , 0.9962585 , ..., 0.9962613 ,
          0.9962617 , 0.9962566 ],
         [0.99624753, 0.9962599 , 0.9962609 , ..., 0.99626046,
          0.99626005, 0.9962614 ],
         [0.99625534, 0.99625665, 0.99626076, ..., 0.9962614 ,
          0.99626094, 0.9962549 ]],

        [[0.9962613 , 0.9962615 , 0.99626136, ..., 0.9962604 ,
          0.996256  , 0.99626166],
         [0.9962586 , 0.9962609 , 0.9962603 , ..., 0.9962607 ,
          0.99625945, 0.9962616 ],
         [0.99625987, 0.9962616 ,        nan, ..., 0.99625766,
          0.9962617 , 0.9962568 ],
         ...,
         [0.99626124, 0.9962599 , 0.9962585 , ..., 0.9962613 ,
          0.9962617 , 0.9962566 ],
         [0.99624753, 0.9962599 , 0.9962609 , ..., 0.99626046,
          0.99626005, 0.9962614 ],
         [0.99625534, 0.99625665, 0.99626076, ..., 0.9962614 ,
          0.99626094, 0.9962549 ]],

        [[0.9962613 , 0.9962615 , 0.99626136, ..., 0.9962604 ,
          0.996256  , 0.99626166],
         [0.9962586 , 0.9962609 , 0.9962603 , ..., 0.9962607 ,
          0.99625945, 0.9962616 ],
         [0.99625987, 0.9962616 ,        nan, ..., 0.99625766,
          0.9962617 , 0.9962568 ],
         ...,
         [0.99626124, 0.9962599 , 0.9962585 , ..., 0.9962613 ,
          0.9962617 , 0.9962566 ],
         [0.99624753, 0.9962599 , 0.9962609 , ..., 0.99626046,
          0.99626005, 0.9962614 ],
         [0.99625534, 0.99625665, 0.99626076, ..., 0.9962614 ,
          0.99626094, 0.9962549 ]],

        ...,

        [[0.9962613 , 0.9962615 , 0.99626136, ..., 0.9962604 ,
          0.996256  , 0.99626166],
         [0.9962586 , 0.9962609 , 0.9962603 , ..., 0.9962607 ,
          0.99625945, 0.9962616 ],
         [0.99625987, 0.9962616 ,        nan, ..., 0.99625766,
          0.9962617 , 0.9962568 ],
         ...,
         [0.99626124, 0.9962599 , 0.9962585 , ..., 0.9962613 ,
          0.9962617 , 0.9962566 ],
         [0.99624753, 0.9962599 , 0.9962609 , ..., 0.99626046,
          0.99626005, 0.9962614 ],
         [0.99625534, 0.99625665, 0.99626076, ..., 0.9962614 ,
          0.99626094, 0.9962549 ]],

        [[0.9962613 , 0.9962615 , 0.99626136, ..., 0.9962604 ,
          0.996256  , 0.99626166],
         [0.9962586 , 0.9962609 , 0.9962603 , ..., 0.9962607 ,
          0.99625945, 0.9962616 ],
         [0.99625987, 0.9962616 ,        nan, ..., 0.99625766,
          0.9962617 , 0.9962568 ],
         ...,
         [0.99626124, 0.9962599 , 0.9962585 , ..., 0.9962613 ,
          0.9962617 , 0.9962566 ],
         [0.99624753, 0.9962599 , 0.9962609 , ..., 0.99626046,
          0.99626005, 0.9962614 ],
         [0.99625534, 0.99625665, 0.99626076, ..., 0.9962614 ,
          0.99626094, 0.9962549 ]],

        [[0.9962613 , 0.9962615 , 0.99626136, ..., 0.9962604 ,
          0.996256  , 0.99626166],
         [0.9962586 , 0.9962609 , 0.9962603 , ..., 0.9962607 ,
          0.99625945, 0.9962616 ],
         [0.99625987, 0.9962616 ,        nan, ..., 0.99625766,
          0.9962617 , 0.9962568 ],
         ...,
         [0.99626124, 0.9962599 , 0.9962585 , ..., 0.9962613 ,
          0.9962617 , 0.9962566 ],
         [0.99624753, 0.9962599 , 0.9962609 , ..., 0.99626046,
          0.99626005, 0.9962614 ],
         [0.99625534, 0.99625665, 0.99626076, ..., 0.9962614 ,
          0.99626094, 0.9962549 ]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [12], 'to': [14]}

generate models:9

final statics:
total operators:28
tensorflow --> nums:2,distinct_bugs:2
mindspore --> nums:2,distinct_bugs:2
torch --> nums:2,distinct_bugs:2
tensorflow --> 
log:1
cos:1
mindspore --> 
log:1
cos:1
torch --> 
log:1
cos:1

generate models:9

analyse output arrays in iter:13

pre layer res:
17:flatten
{'name': 'flatten', 'output': array([[215.94308, 249.61153, 355.3028 , ..., 237.01144,   0.     ,
        433.19   ]], dtype=float32), 'output_shape': TensorShape([1, 16384]), 'from': [11], 'to': [19]}
tf node:
{'name': 'sin', 'output': array([[ 0.73577374, -0.98949295, -0.29821837, ..., -0.9840576 ,
         0.        , -0.34269467]], dtype=float32), 'output_shape': TensorShape([1, 16384]), 'from': [17], 'to': [18]}
ms node:
{'name': 'sin', 'output': array([[ 0.7357737 , -0.98949295, -0.29821837, ..., -0.9840196 ,
         0.        , -0.34232193]], dtype=float32), 'output_shape': (1, 16384), 'from': [17], 'to': [18]}
torch node:
{'name': 'sin', 'output': array([[ 0.7357737 , -0.98949295, -0.29821837, ..., -0.9840576 ,
         0.        , -0.34269467]], dtype=float32), 'output_shape': torch.Size([1, 16384]), 'from': [17], 'to': [18]}

generate models:13

analyse output arrays in iter:18

pre layer res:
18:add
{'name': 'add', 'output': array([[[[32775.625, 49152.   , 48598.125, ..., 49194.086, 49394.355,
          49205.312],
         [49152.   , 49152.   , 49269.25 , ..., 49220.2  , 49223.453,
          32768.   ],
         [49152.   , 73796.16 , 73124.664, ..., 73801.914, 73728.   ,
          73772.25 ],
         ...,
         [73849.43 , 73653.7  , 73309.78 , ..., 73773.81 , 73787.36 ,
          49152.   ],
         [41960.477, 66536.48 , 73728.   , ..., 73951.78 , 73728.   ,
          73728.   ],
         [73822.87 , 73427.5  , 73118.21 , ..., 73728.   , 73729.49 ,
          49152.   ]],

        [[41960.504, 66579.73 , 73895.055, ..., 73728.   , 73972.66 ,
          73920.71 ],
         [73728.   , 72924.055, 72923.92 , ..., 73821.93 , 73728.   ,
          49220.72 ],
         [49152.   , 73728.   , 73728.   , ..., 73789.7  , 73728.   ,
          73728.   ],
         ...,
         [73728.   , 73224.555, 73224.55 , ..., 73728.   , 73728.   ,
          49373.28 ],
         [49186.168, 73838.85 , 73822.46 , ..., 67524.86 , 66194.96 ,
          72476.28 ],
         [72521.76 , 73728.   , 73728.   , ..., 73728.   , 73841.33 ,
          49152.   ]],

        [[49152.   , 73728.   , 73752.11 , ..., 67475.25 , 66194.984,
          72447.74 ],
         [72533.445, 73730.41 , 73728.   , ..., 73728.   , 73728.   ,
          49219.645],
         [48432.113, 72947.72 , 72947.72 , ..., 73804.64 , 72617.836,
          72579.96 ],
         ...,
         [73728.   , 73870.41 , 73822.21 , ..., 72064.05 , 72184.85 ,
          49160.7  ],
         [48464.96 , 72947.72 , 73068.94 , ..., 73780.01 , 73913.82 ,
          73753.64 ],
         [73818.2  , 73728.   , 73732.4  , ..., 71975.51 , 72112.58 ,
          49097.35 ]],

        ...,

        [[41960.504, 66624.72 , 73728.   , ..., 73728.   , 73728.   ,
          73800.95 ],
         [73748.445, 73036.03 , 73105.43 , ..., 73728.   , 73803.46 ,
          49152.   ],
         [49217.72 , 73861.664, 73747.97 , ..., 73790.68 , 73864.94 ,
          73861.14 ],
         ...,
         [73775.12 , 73224.555, 73224.55 , ..., 73736.984, 73785.45 ,
          49152.   ],
         [49152.   , 73728.   , 73891.984, ..., 67475.31 , 66194.96 ,
          72451.56 ],
         [72570.52 , 73728.   , 73729.88 , ..., 73728.   , 73743.234,
          49294.68 ]],

        [[49152.   , 73728.   , 73863.84 , ..., 67540.37 , 66194.984,
          72447.74 ],
         [72447.71 , 73923.42 , 73728.   , ..., 73728.   , 73761.48 ,
          49199.098],
         [48371.72 , 72947.72 , 72947.72 , ..., 73832.31 , 72447.734,
          72447.74 ],
         ...,
         [73783.83 , 73804.31 , 73728.   , ..., 71975.51 , 72008.336,
          49097.35 ],
         [48390.516, 72947.72 , 73032.62 , ..., 73728.   , 73728.   ,
          73728.   ],
         [73864.9  , 73743.92 , 73728.   , ..., 71975.51 , 72095.65 ,
          49097.35 ]],

        [[49152.   , 73728.   , 73728.   , ..., 73728.   , 73822.266,
          73743.086],
         [73851.57 , 73802.77 , 73738.03 , ..., 73870.5  , 73740.62 ,
          49152.   ],
         [49269.48 , 73728.   , 73728.   , ..., 73742.99 , 73798.305,
          73728.   ],
         ...,
         [73737.33 , 73863.89 , 73989.734, ..., 72673.78 , 73887.32 ,
          49152.   ],
         [32768.   , 49152.   , 49150.406, ..., 44785.652, 46274.082,
          49313.32 ],
         [49365.75 , 49152.   , 49152.   , ..., 48097.797, 49303.5  ,
          32768.   ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [14, 21], 'to': [15]}
tf node:
{'name': 'cos', 'output': array([[[[-8.1898588e-01,  2.1055071e-01, -6.7617232e-01, ...,
          -9.9357426e-01, -6.1703765e-01, -1.1729253e-01],
         [ 2.1055071e-01,  2.1055071e-01, -9.4019765e-01, ...,
          -6.4702898e-01,  5.5749702e-01,  3.7293783e-01],
         [ 2.1055071e-01,  9.8953229e-01,  5.7886720e-01, ...,
           9.2845839e-01,  4.5037988e-01,  1.9816744e-01],
         ...,
         [-9.9993753e-01, -5.9249938e-01, -7.5399172e-01, ...,
          -9.7849041e-01, -7.1601444e-01,  2.1055071e-01],
         [ 2.0426729e-01, -7.7394301e-01,  4.5037988e-01, ...,
           2.5802827e-01,  4.5037988e-01,  4.5037988e-01],
         [-1.5162998e-01, -5.8566803e-01,  7.0843512e-01, ...,
           4.5037988e-01, -8.5471249e-01,  2.1055071e-01]],

        [[ 1.7742707e-01, -9.9891698e-01,  8.2990527e-02, ...,
           4.5037988e-01,  7.5468099e-01,  5.7007313e-01],
         [ 4.5037988e-01,  1.6403921e-01,  2.9322317e-01, ...,
           7.0702529e-01,  4.5037988e-01, -1.8311109e-01],
         [ 2.1055071e-01,  4.5037988e-01,  4.5037988e-01, ...,
           9.9968445e-01,  4.5037988e-01,  4.5037988e-01],
         ...,
         [ 4.5037988e-01,  9.5137787e-01,  9.5375526e-01, ...,
           4.5037988e-01,  4.5037988e-01,  9.9993831e-01],
         [ 1.7648298e-01,  4.1562408e-01,  2.5130945e-01, ...,
           8.6122495e-01, -3.2924082e-02,  9.6606314e-01],
         [ 3.3141154e-01,  4.5037988e-01,  4.5037988e-01, ...,
           4.5037988e-01,  2.3420554e-01,  2.1055071e-01]],

        [[ 2.1055071e-01,  4.5037988e-01,  9.9678254e-01, ...,
           9.9244672e-01, -5.6337692e-02, -8.6482388e-01],
         [ 9.3794978e-01, -9.3295413e-01,  4.5037988e-01, ...,
           4.5037988e-01,  4.5037988e-01, -9.5159024e-01],
         [ 2.4727105e-01,  9.9803710e-01,  9.9803710e-01, ...,
          -6.9986647e-01, -9.9694002e-01, -9.6788025e-01],
         ...,
         [ 4.5037988e-01,  5.3743273e-01,  4.8296079e-01, ...,
          -5.8411610e-01, -8.8830239e-01,  4.9116001e-01],
         [-9.2531556e-01,  9.9803710e-01, -2.0333853e-01, ...,
          -9.5661092e-01, -8.4483373e-04, -4.0681772e-02],
         [-9.7995842e-01,  4.5037988e-01,  7.1010977e-01, ...,
          -4.9302436e-02,  8.9589506e-01,  8.5689932e-01]],

        ...,

        [[ 1.7742707e-01, -5.7077634e-01,  4.5037988e-01, ...,
           4.5037988e-01,  4.5037988e-01,  2.2729902e-01],
         [-9.0379936e-01,  9.5959431e-01,  8.4263498e-01, ...,
           4.5037988e-01,  3.9353800e-01,  2.1055071e-01],
         [ 4.2544618e-02, -9.4897842e-01, -6.0677999e-01, ...,
           5.8051121e-01,  9.8219800e-01, -6.6428941e-01],
         ...,
         [-4.5635378e-01,  9.5137787e-01,  9.5375526e-01, ...,
          -7.8802466e-01, -4.2346472e-01,  2.1055071e-01],
         [ 2.1055071e-01,  4.5037988e-01, -1.5375391e-01, ...,
           9.8284668e-01, -3.2924082e-02,  9.8836052e-01],
         [ 9.6460354e-01,  4.5037988e-01, -9.8798454e-01, ...,
           4.5037988e-01, -8.0801731e-01, -9.9871808e-01]],

        [[ 2.1055071e-01,  4.5037988e-01,  2.8410718e-01, ...,
          -7.4298841e-01, -5.6337692e-02, -8.6482388e-01],
         [-8.4871429e-01, -1.7503342e-01,  4.5037988e-01, ...,
           4.5037988e-01, -9.9974352e-01, -1.8483573e-01],
         [-8.1581306e-01,  9.9803710e-01,  9.9803710e-01, ...,
           1.7189370e-01, -8.6087507e-01, -8.6482388e-01],
         ...,
         [ 9.2752421e-01, -4.3233937e-01,  4.5037988e-01, ...,
          -4.9302436e-02, -9.9403536e-01,  8.5689932e-01],
         [-8.4513336e-01,  9.9803710e-01, -9.9991846e-01, ...,
           4.5037988e-01,  4.5037988e-01,  4.5037988e-01],
         [ 9.7411281e-01, -2.5057971e-01,  4.5037988e-01, ...,
          -4.9302436e-02, -7.2389174e-01,  8.5689932e-01]],

        [[ 2.1055071e-01,  4.5037988e-01,  4.5037988e-01, ...,
           4.5037988e-01,  4.3437600e-01, -8.8626432e-01],
         [ 5.4886705e-01,  8.8753951e-01,  1.3883138e-01, ...,
           6.1401695e-01,  4.0444681e-01,  2.1055071e-01],
         [-9.9314958e-01,  4.5037988e-01,  4.5037988e-01, ...,
          -9.2573196e-01, -6.6123092e-01,  4.5037988e-01],
         ...,
         [-5.3443891e-01,  3.2872206e-01,  4.9252960e-01, ...,
          -7.7656221e-01, -9.7952807e-01,  2.1055071e-01],
         [ 3.7293783e-01,  2.1055071e-01, -9.8215789e-01, ...,
           6.2744731e-01, -6.9597443e-03, -9.6650022e-01],
         [ 3.2767135e-01,  2.1055071e-01,  2.1055071e-01, ...,
           9.9991089e-01,  7.9298371e-01,  3.7293783e-01]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [18], 'to': [10]}
ms node:
{'name': 'cos', 'output': array([[[[-8.1898588e-01,  2.1055071e-01, -5.5977744e-01, ...,
          -9.9357426e-01, -6.1703765e-01, -1.1729253e-01],
         [ 2.1055071e-01,  2.1055071e-01, -9.4019765e-01, ...,
          -6.4702898e-01,  5.5749702e-01,  3.7293783e-01],
         [ 2.1055071e-01,  9.8953229e-01,  4.8639914e-01, ...,
           9.2845839e-01,  4.5037988e-01,  1.9816743e-01],
         ...,
         [-9.9993753e-01, -5.9249938e-01, -7.2238338e-01, ...,
          -9.7849041e-01, -7.1601444e-01,  2.1055071e-01],
         [ 1.8126997e-01, -7.5888985e-01,  4.5037988e-01, ...,
           2.5802830e-01,  4.5037988e-01,  4.5037988e-01],
         [-1.5162998e-01, -5.8566803e-01,  6.7458582e-01, ...,
           4.5037988e-01, -8.5471249e-01,  2.1055071e-01]],

        [[ 1.7742707e-01, -9.9852300e-01,  8.2990527e-02, ...,
           4.5037988e-01,  7.5468099e-01,  5.7007313e-01],
         [ 4.5037988e-01,  1.8711206e-01,  1.8711206e-01, ...,
           7.0702523e-01,  4.5037988e-01, -1.8311109e-01],
         [ 2.1055071e-01,  4.5037988e-01,  4.5037988e-01, ...,
           9.9968445e-01,  4.5037988e-01,  4.5037988e-01],
         ...,
         [ 4.5037988e-01,  9.6053761e-01,  9.6053761e-01, ...,
           4.5037988e-01,  4.5037988e-01,  9.9993831e-01],
         [ 1.7648296e-01,  4.1562408e-01,  2.5130945e-01, ...,
           8.2780010e-01, -5.6337692e-02,  9.7541368e-01],
         [ 3.0177060e-01,  4.5037988e-01,  4.5037988e-01, ...,
           4.5037988e-01,  2.3420554e-01,  2.1055071e-01]],

        [[ 2.1055071e-01,  4.5037988e-01,  9.9678254e-01, ...,
           9.9244672e-01, -6.4135984e-02, -8.6087501e-01],
         [ 9.2956549e-01, -9.3295407e-01,  4.5037988e-01, ...,
           4.5037988e-01,  4.5037988e-01, -9.5159024e-01],
         [ 2.5483331e-01,  9.9803710e-01,  9.9803710e-01, ...,
          -6.9986647e-01, -9.9752027e-01, -9.6788025e-01],
         ...,
         [ 4.5037988e-01,  5.3743267e-01,  4.8296082e-01, ...,
          -4.8520982e-01, -9.3028826e-01,  5.6411284e-01],
         [-9.1773331e-01,  9.9803710e-01, -2.0333852e-01, ...,
          -9.5661092e-01, -8.4483373e-04, -4.0681768e-02],
         [-9.7995842e-01,  4.5037988e-01,  7.1010977e-01, ...,
           7.5605355e-02,  9.3903637e-01,  8.9969397e-01]],

        ...,

        [[ 1.7742707e-01, -5.7717371e-01,  4.5037988e-01, ...,
           4.5037988e-01,  4.5037988e-01,  2.2729902e-01],
         [-9.0379936e-01,  9.6592522e-01,  7.7882028e-01, ...,
           4.5037988e-01,  3.9353797e-01,  2.1055071e-01],
         [ 4.2544618e-02, -9.4897842e-01, -6.0677999e-01, ...,
           5.8051115e-01,  9.8219800e-01, -6.6428941e-01],
         ...,
         [-4.5635378e-01,  9.6053761e-01,  9.6053761e-01, ...,
          -7.8802460e-01, -4.2346472e-01,  2.1055071e-01],
         [ 2.1055071e-01,  4.5037988e-01, -1.5375391e-01, ...,
           9.9244672e-01, -5.6337692e-02,  9.8166549e-01],
         [ 9.7237206e-01,  4.5037988e-01, -9.8798454e-01, ...,
           4.5037988e-01, -8.0801731e-01, -9.9871808e-01]],

        [[ 2.1055071e-01,  4.5037988e-01,  2.8410721e-01, ...,
          -7.4298841e-01, -6.4135984e-02, -8.6087501e-01],
         [-8.6087501e-01, -1.7503342e-01,  4.5037988e-01, ...,
           4.5037988e-01, -9.9974352e-01, -1.8483573e-01],
         [-8.2030618e-01,  9.9803710e-01,  9.9803710e-01, ...,
           1.7189370e-01, -8.6482382e-01, -8.6482382e-01],
         ...,
         [ 9.2752421e-01, -4.3233937e-01,  4.5037988e-01, ...,
           6.7812987e-02, -9.7785592e-01,  8.9798194e-01],
         [-8.5541201e-01,  9.9803710e-01, -9.9991846e-01, ...,
           4.5037988e-01,  4.5037988e-01,  4.5037988e-01],
         [ 9.7411281e-01, -2.5057971e-01,  4.5037988e-01, ...,
           7.5605355e-02, -6.4425713e-01,  8.9969397e-01]],

        [[ 2.1055071e-01,  4.5037988e-01,  4.5037988e-01, ...,
           4.5037988e-01,  4.3437600e-01, -8.8626432e-01],
         [ 5.4886699e-01,  8.8753951e-01,  1.3883138e-01, ...,
           6.1401689e-01,  4.0444681e-01,  2.1055071e-01],
         [-9.9314958e-01,  4.5037988e-01,  4.5037988e-01, ...,
          -9.2573196e-01, -6.6123086e-01,  4.5037988e-01],
         ...,
         [-5.3443891e-01,  3.2872206e-01,  4.9252960e-01, ...,
          -8.1439787e-01, -9.7952807e-01,  2.1055071e-01],
         [ 3.7293783e-01,  2.1055071e-01, -9.8065877e-01, ...,
           5.6476253e-01, -1.4771763e-02, -9.6650022e-01],
         [ 3.2767138e-01,  2.1055071e-01,  2.1055071e-01, ...,
           9.9841458e-01,  7.9298371e-01,  3.7293783e-01]]]],
      dtype=float32), 'output_shape': (1, 128, 8, 8), 'from': [18], 'to': [10]}
torch node:
{'name': 'cos', 'output': array([[[[-8.1898588e-01,  2.1055071e-01, -6.0734230e-01, ...,
          -9.9357426e-01, -6.1703765e-01, -1.1729253e-01],
         [ 2.1055071e-01,  2.1055071e-01, -9.4019765e-01, ...,
          -6.4702898e-01,  5.5749702e-01,  3.7293783e-01],
         [ 2.1055071e-01,  9.8953229e-01,  4.9321029e-01, ...,
           9.2845839e-01,  4.5037988e-01,  1.9816743e-01],
         ...,
         [-9.9993753e-01, -6.4165795e-01, -5.7444859e-01, ...,
          -9.7849041e-01, -7.1601444e-01,  2.1055071e-01],
         [ 1.8126997e-01, -7.5888985e-01,  4.5037988e-01, ...,
           2.5802830e-01,  4.5037988e-01,  4.5037988e-01],
         [-1.5162998e-01, -6.3515097e-01,  5.1849586e-01, ...,
           4.5037988e-01, -8.5471249e-01,  2.1055071e-01]],

        [[ 1.8126997e-01, -9.9852300e-01,  8.2990527e-02, ...,
           4.5037988e-01,  7.5468099e-01,  5.7007313e-01],
         [ 4.5037988e-01,  1.2539053e-01,  1.2539053e-01, ...,
           7.0702523e-01,  4.5037988e-01, -1.8311109e-01],
         [ 2.1055071e-01,  4.5037988e-01,  4.5037988e-01, ...,
           9.9968445e-01,  4.5037988e-01,  4.5037988e-01],
         ...,
         [ 4.5037988e-01,  9.5607448e-01,  9.5607448e-01, ...,
           4.5037988e-01,  4.5037988e-01,  9.9993831e-01],
         [ 1.7648296e-01,  4.1562408e-01,  2.5130945e-01, ...,
           7.5139594e-01,  1.6166979e-01,  9.5752072e-01],
         [ 3.7525725e-01,  4.5037988e-01,  4.5037988e-01, ...,
           4.5037988e-01,  2.3420554e-01,  2.1055071e-01]],

        [[ 2.1055071e-01,  4.5037988e-01,  9.9678254e-01, ...,
           9.9999797e-01,  1.8475245e-01, -8.1853831e-01],
         [ 9.6215278e-01, -9.3295407e-01,  4.5037988e-01, ...,
           4.5037988e-01,  4.5037988e-01, -9.5159024e-01],
         [ 3.0730796e-01,  9.9400634e-01,  9.9400634e-01, ...,
          -6.9986647e-01, -9.8524439e-01, -9.4009471e-01],
         ...,
         [ 4.5037988e-01,  5.3743267e-01,  4.8296082e-01, ...,
          -5.0556839e-01, -9.1207755e-01,  5.1143891e-01],
         [-8.9982444e-01,  9.9117136e-01, -1.4178707e-01, ...,
          -9.5661092e-01, -8.4483373e-04, -4.0681768e-02],
         [-9.7995842e-01,  4.5037988e-01,  7.1010977e-01, ...,
           1.3177188e-02,  9.1883940e-01,  8.6680329e-01]],

        ...,

        [[ 1.8126997e-01, -5.7717371e-01,  4.5037988e-01, ...,
           4.5037988e-01,  4.5037988e-01,  2.2729902e-01],
         [-9.0379936e-01,  9.4787341e-01,  7.3812222e-01, ...,
           4.5037988e-01,  3.9353797e-01,  2.1055071e-01],
         [ 4.2544618e-02, -9.4897842e-01, -6.0677999e-01, ...,
           5.8051115e-01,  9.8219800e-01, -6.6428941e-01],
         ...,
         [-4.5635378e-01,  9.5607448e-01,  9.5607448e-01, ...,
          -7.8802460e-01, -4.2346472e-01,  2.1055071e-01],
         [ 2.1055071e-01,  4.5037988e-01, -1.5375391e-01, ...,
           9.9999797e-01,  1.6166979e-01,  9.9263126e-01],
         [ 9.5118743e-01,  4.5037988e-01, -9.8798454e-01, ...,
           4.5037988e-01, -8.0801731e-01, -9.9871808e-01]],

        [[ 2.1055071e-01,  4.5037988e-01,  2.8410721e-01, ...,
          -6.5374601e-01,  1.8475245e-01, -8.1853831e-01],
         [-8.0485100e-01, -1.7503342e-01,  4.5037988e-01, ...,
           4.5037988e-01, -9.9974352e-01, -1.8483573e-01],
         [-8.5034138e-01,  9.9400634e-01,  9.9400634e-01, ...,
           1.7189370e-01, -8.0946296e-01, -8.1402546e-01],
         ...,
         [ 9.2752421e-01, -4.3233937e-01,  4.5037988e-01, ...,
           4.4412956e-02, -9.8658818e-01,  8.6874449e-01],
         [-8.7687123e-01,  9.9117136e-01, -9.9876368e-01, ...,
           4.5037988e-01,  4.5037988e-01,  4.5037988e-01],
         [ 9.7411281e-01, -2.5057971e-01,  4.5037988e-01, ...,
           1.3177188e-02, -6.8509865e-01,  8.6680329e-01]],

        [[ 2.1055071e-01,  4.5037988e-01,  4.5037988e-01, ...,
           4.5037988e-01,  4.3437600e-01, -8.8626432e-01],
         [ 5.4886699e-01,  8.8753951e-01,  1.3883138e-01, ...,
           6.1401689e-01,  4.0444681e-01,  2.1055071e-01],
         [-9.9314958e-01,  4.5037988e-01,  4.5037988e-01, ...,
          -9.2573196e-01, -6.6123086e-01,  4.5037988e-01],
         ...,
         [-5.3443891e-01,  3.2872206e-01,  4.9252960e-01, ...,
          -8.5315478e-01, -9.7952807e-01,  2.1055071e-01],
         [ 3.7293783e-01,  2.1055071e-01, -9.6849430e-01, ...,
           5.0875604e-01, -5.3808801e-02, -9.6650022e-01],
         [ 3.2767138e-01,  2.1055071e-01,  2.1055071e-01, ...,
           9.9650246e-01,  7.9298371e-01,  3.7293783e-01]]]],
      dtype=float32), 'output_shape': torch.Size([1, 128, 8, 8]), 'from': [18], 'to': [10]}

pre layer res:
3:relu
{'name': 'relu', 'output': array([[[[  7.6269526, 139.92252  ,   0.       , ...,   0.       ,
            0.       , 144.91405  ],
         [  0.       ,   0.       ,  43.218422 , ...,  79.02899  ,
            0.       ,  68.48605  ],
         [ 66.59715  ,   0.       , 167.05363  , ...,  98.23452  ,
            0.       , 193.33595  ],
         ...,
         [111.59584  ,   0.       ,  58.16937  , ...,   0.       ,
            0.       ,   0.       ],
         [264.7706   ,   1.4919579, 118.024055 , ..., 120.15368  ,
            0.       , 151.49905  ],
         [  0.       ,   0.       ,  32.332283 , ...,   0.       ,
           16.45874  ,   0.       ]],

        [[  7.6269526, 139.92252  ,   0.       , ...,   0.       ,
            0.       , 144.91405  ],
         [  0.       ,   0.       ,  43.218422 , ...,  79.02899  ,
            0.       ,  68.48605  ],
         [ 66.59715  ,   0.       , 167.05363  , ...,  98.23452  ,
            0.       , 193.33595  ],
         ...,
         [111.59584  ,   0.       ,  58.16937  , ...,   0.       ,
            0.       ,   0.       ],
         [264.7706   ,   1.4919579, 118.024055 , ..., 120.15368  ,
            0.       , 151.49905  ],
         [  0.       ,   0.       ,  32.332283 , ...,   0.       ,
           16.45874  ,   0.       ]],

        [[  7.6269526, 139.92252  ,   0.       , ...,   0.       ,
            0.       , 144.91405  ],
         [  0.       ,   0.       ,  43.218422 , ...,  79.02899  ,
            0.       ,  68.48605  ],
         [ 66.59715  ,   0.       , 167.05363  , ...,  98.23452  ,
            0.       , 193.33595  ],
         ...,
         [111.59584  ,   0.       ,  58.16937  , ...,   0.       ,
            0.       ,   0.       ],
         [264.7706   ,   1.4919579, 118.024055 , ..., 120.15368  ,
            0.       , 151.49905  ],
         [  0.       ,   0.       ,  32.332283 , ...,   0.       ,
           16.45874  ,   0.       ]],

        ...,

        [[  7.6269526, 139.92252  ,   0.       , ...,   0.       ,
            0.       , 144.91405  ],
         [  0.       ,   0.       ,  43.218422 , ...,  79.02899  ,
            0.       ,  68.48605  ],
         [ 66.59715  ,   0.       , 167.05363  , ...,  98.23452  ,
            0.       , 193.33595  ],
         ...,
         [111.59584  ,   0.       ,  58.16937  , ...,   0.       ,
            0.       ,   0.       ],
         [264.7706   ,   1.4919579, 118.024055 , ..., 120.15368  ,
            0.       , 151.49905  ],
         [  0.       ,   0.       ,  32.332283 , ...,   0.       ,
           16.45874  ,   0.       ]],

        [[  7.6269526, 139.92252  ,   0.       , ...,   0.       ,
            0.       , 144.91405  ],
         [  0.       ,   0.       ,  43.218422 , ...,  79.02899  ,
            0.       ,  68.48605  ],
         [ 66.59715  ,   0.       , 167.05363  , ...,  98.23452  ,
            0.       , 193.33595  ],
         ...,
         [111.59584  ,   0.       ,  58.16937  , ...,   0.       ,
            0.       ,   0.       ],
         [264.7706   ,   1.4919579, 118.024055 , ..., 120.15368  ,
            0.       , 151.49905  ],
         [  0.       ,   0.       ,  32.332283 , ...,   0.       ,
           16.45874  ,   0.       ]],

        [[  7.6269526, 139.92252  ,   0.       , ...,   0.       ,
            0.       , 144.91405  ],
         [  0.       ,   0.       ,  43.218422 , ...,  79.02899  ,
            0.       ,  68.48605  ],
         [ 66.59715  ,   0.       , 167.05363  , ...,  98.23452  ,
            0.       , 193.33595  ],
         ...,
         [111.59584  ,   0.       ,  58.16937  , ...,   0.       ,
            0.       ,   0.       ],
         [264.7706   ,   1.4919579, 118.024055 , ..., 120.15368  ,
            0.       , 151.49905  ],
         [  0.       ,   0.       ,  32.332283 , ...,   0.       ,
           16.45874  ,   0.       ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [17], 'to': [16]}
tf node:
{'name': 'cos', 'output': array([[[[ 0.22508374, -0.12134302,  1.        , ...,  1.        ,
           1.        ,  0.92075497],
         [ 1.        ,  1.        ,  0.7221609 , ..., -0.88272065,
           1.        ,  0.8086251 ],
         [-0.811719  ,  1.        , -0.8529299 , ..., -0.6636208 ,
           1.        ,  0.12765528],
         ...,
         [ 0.06924579,  1.        , -0.04988394, ...,  1.        ,
           1.        ,  1.        ],
         [ 0.6396016 ,  0.07875678,  0.21269375, ...,  0.7157087 ,
           1.        ,  0.7631604 ],
         [ 1.        ,  1.        ,  0.60871494, ...,  1.        ,
          -0.7311591 ,  1.        ]],

        [[ 0.22508374, -0.12134302,  1.        , ...,  1.        ,
           1.        ,  0.92075497],
         [ 1.        ,  1.        ,  0.7221609 , ..., -0.88272065,
           1.        ,  0.8086251 ],
         [-0.811719  ,  1.        , -0.8529299 , ..., -0.6636208 ,
           1.        ,  0.12765528],
         ...,
         [ 0.06924579,  1.        , -0.04988394, ...,  1.        ,
           1.        ,  1.        ],
         [ 0.6396016 ,  0.07875678,  0.21269375, ...,  0.7157087 ,
           1.        ,  0.7631604 ],
         [ 1.        ,  1.        ,  0.60871494, ...,  1.        ,
          -0.7311591 ,  1.        ]],

        [[ 0.22508374, -0.12134302,  1.        , ...,  1.        ,
           1.        ,  0.92075497],
         [ 1.        ,  1.        ,  0.7221609 , ..., -0.88272065,
           1.        ,  0.8086251 ],
         [-0.811719  ,  1.        , -0.8529299 , ..., -0.6636208 ,
           1.        ,  0.12765528],
         ...,
         [ 0.06924579,  1.        , -0.04988394, ...,  1.        ,
           1.        ,  1.        ],
         [ 0.6396016 ,  0.07875678,  0.21269375, ...,  0.7157087 ,
           1.        ,  0.7631604 ],
         [ 1.        ,  1.        ,  0.60871494, ...,  1.        ,
          -0.7311591 ,  1.        ]],

        ...,

        [[ 0.22508374, -0.12134302,  1.        , ...,  1.        ,
           1.        ,  0.92075497],
         [ 1.        ,  1.        ,  0.7221609 , ..., -0.88272065,
           1.        ,  0.8086251 ],
         [-0.811719  ,  1.        , -0.8529299 , ..., -0.6636208 ,
           1.        ,  0.12765528],
         ...,
         [ 0.06924579,  1.        , -0.04988394, ...,  1.        ,
           1.        ,  1.        ],
         [ 0.6396016 ,  0.07875678,  0.21269375, ...,  0.7157087 ,
           1.        ,  0.7631604 ],
         [ 1.        ,  1.        ,  0.60871494, ...,  1.        ,
          -0.7311591 ,  1.        ]],

        [[ 0.22508374, -0.12134302,  1.        , ...,  1.        ,
           1.        ,  0.92075497],
         [ 1.        ,  1.        ,  0.7221609 , ..., -0.88272065,
           1.        ,  0.8086251 ],
         [-0.811719  ,  1.        , -0.8529299 , ..., -0.6636208 ,
           1.        ,  0.12765528],
         ...,
         [ 0.06924579,  1.        , -0.04988394, ...,  1.        ,
           1.        ,  1.        ],
         [ 0.6396016 ,  0.07875678,  0.21269375, ...,  0.7157087 ,
           1.        ,  0.7631604 ],
         [ 1.        ,  1.        ,  0.60871494, ...,  1.        ,
          -0.7311591 ,  1.        ]],

        [[ 0.22508374, -0.12134302,  1.        , ...,  1.        ,
           1.        ,  0.92075497],
         [ 1.        ,  1.        ,  0.7221609 , ..., -0.88272065,
           1.        ,  0.8086251 ],
         [-0.811719  ,  1.        , -0.8529299 , ..., -0.6636208 ,
           1.        ,  0.12765528],
         ...,
         [ 0.06924579,  1.        , -0.04988394, ...,  1.        ,
           1.        ,  1.        ],
         [ 0.6396016 ,  0.07875678,  0.21269375, ...,  0.7157087 ,
           1.        ,  0.7631604 ],
         [ 1.        ,  1.        ,  0.60871494, ...,  1.        ,
          -0.7311591 ,  1.        ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [3], 'to': [4]}
ms node:
{'name': 'cos', 'output': array([[[[ 0.22508374, -0.12134302,  1.        , ...,  1.        ,
           1.        ,  0.92075497],
         [ 1.        ,  1.        ,  0.7221609 , ..., -0.88272065,
           1.        ,  0.8086251 ],
         [-0.811719  ,  1.        , -0.8529299 , ..., -0.6636208 ,
           1.        ,  0.12765528],
         ...,
         [ 0.06924579,  1.        , -0.04988394, ...,  1.        ,
           1.        ,  1.        ],
         [ 0.6396016 ,  0.07875678,  0.21269375, ...,  0.7157087 ,
           1.        ,  0.7631604 ],
         [ 1.        ,  1.        ,  0.60871494, ...,  1.        ,
          -0.73115903,  1.        ]],

        [[ 0.22508374, -0.12134302,  1.        , ...,  1.        ,
           1.        ,  0.92075497],
         [ 1.        ,  1.        ,  0.7221609 , ..., -0.88272065,
           1.        ,  0.8086251 ],
         [-0.811719  ,  1.        , -0.8529299 , ..., -0.6636208 ,
           1.        ,  0.12765528],
         ...,
         [ 0.06924579,  1.        , -0.04988394, ...,  1.        ,
           1.        ,  1.        ],
         [ 0.6396016 ,  0.07875678,  0.21269375, ...,  0.7157087 ,
           1.        ,  0.7631604 ],
         [ 1.        ,  1.        ,  0.60871494, ...,  1.        ,
          -0.73115903,  1.        ]],

        [[ 0.22508374, -0.12134302,  1.        , ...,  1.        ,
           1.        ,  0.92075497],
         [ 1.        ,  1.        ,  0.7221609 , ..., -0.88272065,
           1.        ,  0.8086251 ],
         [-0.811719  ,  1.        , -0.8529299 , ..., -0.6636208 ,
           1.        ,  0.12765528],
         ...,
         [ 0.06924579,  1.        , -0.04988394, ...,  1.        ,
           1.        ,  1.        ],
         [ 0.6396016 ,  0.07875678,  0.21269375, ...,  0.7157087 ,
           1.        ,  0.7631604 ],
         [ 1.        ,  1.        ,  0.60871494, ...,  1.        ,
          -0.73115903,  1.        ]],

        ...,

        [[ 0.22508374, -0.12134302,  1.        , ...,  1.        ,
           1.        ,  0.92075497],
         [ 1.        ,  1.        ,  0.7221609 , ..., -0.88272065,
           1.        ,  0.8086251 ],
         [-0.811719  ,  1.        , -0.8529299 , ..., -0.6636208 ,
           1.        ,  0.12765528],
         ...,
         [ 0.06924579,  1.        , -0.04988394, ...,  1.        ,
           1.        ,  1.        ],
         [ 0.6396016 ,  0.07875678,  0.21269375, ...,  0.7157087 ,
           1.        ,  0.7631604 ],
         [ 1.        ,  1.        ,  0.60871494, ...,  1.        ,
          -0.73115903,  1.        ]],

        [[ 0.22508374, -0.1214036 ,  1.        , ...,  1.        ,
           1.        ,  0.92075497],
         [ 1.        ,  1.        ,  0.7221424 , ..., -0.8827027 ,
           1.        ,  0.80862963],
         [-0.8117279 ,  1.        , -0.8529697 , ..., -0.6635637 ,
           1.        ,  0.12765528],
         ...,
         [ 0.06934474,  1.        , -0.0498306 , ...,  1.        ,
           1.        ,  1.        ],
         [ 0.6395781 ,  0.07875749,  0.21279812, ...,  0.71578324,
           1.        ,  0.7631505 ],
         [ 1.        ,  1.        ,  0.60870886, ...,  1.        ,
          -0.73115903,  1.        ]],

        [[ 0.22508374, -0.1214036 ,  1.        , ...,  1.        ,
           1.        ,  0.92075497],
         [ 1.        ,  1.        ,  0.7221424 , ..., -0.8827027 ,
           1.        ,  0.80862963],
         [-0.8117279 ,  1.        , -0.8529697 , ..., -0.6635637 ,
           1.        ,  0.12765528],
         ...,
         [ 0.06934474,  1.        , -0.0498306 , ...,  1.        ,
           1.        ,  1.        ],
         [ 0.6395781 ,  0.07875749,  0.21279812, ...,  0.71578324,
           1.        ,  0.7631505 ],
         [ 1.        ,  1.        ,  0.60870886, ...,  1.        ,
          -0.73115903,  1.        ]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [3], 'to': [4]}
torch node:
{'name': 'cos', 'output': array([[[[ 0.22508374, -0.12134302,  1.        , ...,  1.        ,
           1.        ,  0.92075497],
         [ 1.        ,  1.        ,  0.7221609 , ..., -0.88272065,
           1.        ,  0.8086251 ],
         [-0.811719  ,  1.        , -0.8529299 , ..., -0.6636208 ,
           1.        ,  0.12765528],
         ...,
         [ 0.06924579,  1.        , -0.04988394, ...,  1.        ,
           1.        ,  1.        ],
         [ 0.6396016 ,  0.07875678,  0.21269375, ...,  0.7157087 ,
           1.        ,  0.7631604 ],
         [ 1.        ,  1.        ,  0.60871494, ...,  1.        ,
          -0.73115903,  1.        ]],

        [[ 0.22508374, -0.12134302,  1.        , ...,  1.        ,
           1.        ,  0.92075497],
         [ 1.        ,  1.        ,  0.7221609 , ..., -0.88272065,
           1.        ,  0.8086251 ],
         [-0.811719  ,  1.        , -0.8529299 , ..., -0.6636208 ,
           1.        ,  0.12765528],
         ...,
         [ 0.06924579,  1.        , -0.04988394, ...,  1.        ,
           1.        ,  1.        ],
         [ 0.6396016 ,  0.07875678,  0.21269375, ...,  0.7157087 ,
           1.        ,  0.7631604 ],
         [ 1.        ,  1.        ,  0.60871494, ...,  1.        ,
          -0.73115903,  1.        ]],

        [[ 0.22508374, -0.12134302,  1.        , ...,  1.        ,
           1.        ,  0.92075497],
         [ 1.        ,  1.        ,  0.7221609 , ..., -0.88272065,
           1.        ,  0.8086251 ],
         [-0.811719  ,  1.        , -0.8529299 , ..., -0.6636208 ,
           1.        ,  0.12765528],
         ...,
         [ 0.06924579,  1.        , -0.04988394, ...,  1.        ,
           1.        ,  1.        ],
         [ 0.6396016 ,  0.07875678,  0.21269375, ...,  0.7157087 ,
           1.        ,  0.7631604 ],
         [ 1.        ,  1.        ,  0.60871494, ...,  1.        ,
          -0.73115903,  1.        ]],

        ...,

        [[ 0.22508374, -0.12134302,  1.        , ...,  1.        ,
           1.        ,  0.92075497],
         [ 1.        ,  1.        ,  0.7221609 , ..., -0.88272065,
           1.        ,  0.8086251 ],
         [-0.811719  ,  1.        , -0.8529299 , ..., -0.6636208 ,
           1.        ,  0.12765528],
         ...,
         [ 0.06924579,  1.        , -0.04988394, ...,  1.        ,
           1.        ,  1.        ],
         [ 0.6396016 ,  0.07875678,  0.21269375, ...,  0.7157087 ,
           1.        ,  0.7631604 ],
         [ 1.        ,  1.        ,  0.60871494, ...,  1.        ,
          -0.73115903,  1.        ]],

        [[ 0.22508374, -0.12134302,  1.        , ...,  1.        ,
           1.        ,  0.92075497],
         [ 1.        ,  1.        ,  0.7221609 , ..., -0.88272065,
           1.        ,  0.8086251 ],
         [-0.811719  ,  1.        , -0.8529299 , ..., -0.6636208 ,
           1.        ,  0.12765528],
         ...,
         [ 0.06924579,  1.        , -0.04988394, ...,  1.        ,
           1.        ,  1.        ],
         [ 0.6396016 ,  0.07875678,  0.21269375, ...,  0.7157087 ,
           1.        ,  0.7631604 ],
         [ 1.        ,  1.        ,  0.60871494, ...,  1.        ,
          -0.73115903,  1.        ]],

        [[ 0.22508374, -0.12134302,  1.        , ...,  1.        ,
           1.        ,  0.92075497],
         [ 1.        ,  1.        ,  0.7221609 , ..., -0.88272065,
           1.        ,  0.8086251 ],
         [-0.811719  ,  1.        , -0.8529299 , ..., -0.6636208 ,
           1.        ,  0.12765528],
         ...,
         [ 0.06924579,  1.        , -0.04988394, ...,  1.        ,
           1.        ,  1.        ],
         [ 0.6396016 ,  0.07875678,  0.21269375, ...,  0.7157087 ,
           1.        ,  0.7631604 ],
         [ 1.        ,  1.        ,  0.60871494, ...,  1.        ,
          -0.73115903,  1.        ]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [3], 'to': [4]}

generate models:17

analyse output arrays in iter:19

pre layer res:
14:log
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [6], 'to': [7]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [14], 'to': [8]}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [14], 'to': [8]}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [14], 'to': [8]}

generate models:18

analyse output arrays in iter:21

pre layer res:
12:add
{'name': 'add', 'output': array([[[[ 4.583523  ,        -inf,        -inf, ...,        -inf,
                 -inf,  3.6449661 ],
         [ 4.583237  ,  5.1164436 ,        -inf, ...,        -inf,
                 -inf,  4.736604  ],
         [ 5.6922903 ,        -inf,        -inf, ...,  3.2537596 ,
           4.9573154 ,  3.693514  ],
         ...,
         [       -inf,        -inf,        -inf, ...,  3.919765  ,
           4.8565245 ,        -inf],
         [ 3.8881514 ,  5.017764  ,  4.4598227 , ...,        -inf,
           4.6428876 ,        -inf],
         [       -inf,  3.4930885 ,  4.825305  , ...,        -inf,
           4.9695487 ,        -inf]],

        [[       -inf,  5.3186784 ,  3.5520005 , ...,        -inf,
           5.3784785 ,  4.9064093 ],
         [ 5.35459   ,  3.5663857 ,        -inf, ...,        -inf,
           4.259804  ,        -inf],
         [ 5.399787  ,  5.1922274 ,  5.0697083 , ...,  4.75391   ,
           2.900546  ,  3.5808372 ],
         ...,
         [-1.4041375 ,        -inf,        -inf, ...,        -inf,
                 -inf,        -inf],
         [ 4.568524  ,  2.682336  ,  4.491277  , ...,  4.637853  ,
           4.0887833 ,        -inf],
         [       -inf,        -inf,  4.629934  , ...,        -inf,
           4.5913343 ,        -inf]],

        [[ 4.3985577 ,  4.065733  ,        -inf, ...,  1.4939146 ,
           5.1291304 ,  3.907638  ],
         [ 3.9963849 ,  4.934811  ,        -inf, ...,  5.2602906 ,
           3.9568384 ,  3.8388803 ],
         [ 0.41048962,        -inf,  3.187038  , ...,        -inf,
                 -inf,  2.445807  ],
         ...,
         [       -inf,        -inf,  4.934014  , ...,  3.8398561 ,
                 -inf,        -inf],
         [ 4.9036064 ,  3.3838894 ,        -inf, ...,        -inf,
                 -inf,  4.0034456 ],
         [       -inf,  2.7406163 ,  3.3255262 , ...,        -inf,
                 -inf,  4.436364  ]],

        ...,

        [[       -inf,  3.8393753 ,        -inf, ...,        -inf,
           4.7297153 ,  3.109106  ],
         [       -inf,        -inf,  4.061411  , ...,  5.633635  ,
                 -inf,        -inf],
         [       -inf,  1.7038372 ,        -inf, ...,  5.0998745 ,
           4.973725  ,        -inf],
         ...,
         [ 3.0613365 ,        -inf,        -inf, ...,  4.603626  ,
                 -inf,        -inf],
         [       -inf,        -inf,  3.909296  , ..., -0.7300134 ,
           4.672718  ,        -inf],
         [       -inf,  3.487542  ,  4.7250376 , ...,        -inf,
                 -inf,        -inf]],

        [[       -inf,        -inf,  3.8202422 , ...,  3.2245207 ,
                 -inf,  4.2549987 ],
         [       -inf,        -inf,        -inf, ...,  5.103909  ,
                 -inf,  5.5567594 ],
         [ 3.8621435 ,  4.417398  ,  4.1687937 , ...,  2.3807783 ,
           4.430146  ,  4.1115704 ],
         ...,
         [ 4.621853  ,        -inf,        -inf, ...,  2.2652137 ,
           4.1960735 ,        -inf],
         [       -inf,  0.36338487,        -inf, ...,        -inf,
                 -inf,        -inf],
         [       -inf,        -inf,        -inf, ...,  3.9234033 ,
                 -inf,        -inf]],

        [[ 0.7663376 ,        -inf,        -inf, ...,  1.9461714 ,
                 -inf,  4.3111076 ],
         [       -inf,  3.808444  ,  5.348014  , ...,        -inf,
                 -inf,        -inf],
         [ 4.2602005 ,  4.759257  ,  5.0569215 , ...,        -inf,
                 -inf,        -inf],
         ...,
         [ 4.150059  ,        -inf,  4.5241003 , ...,  4.589547  ,
                 -inf,  2.2020423 ],
         [       -inf,  3.0478077 ,  5.102637  , ...,        -inf,
                 -inf,        -inf],
         [ 2.773965  ,        -inf,        -inf, ...,        -inf,
           5.127766  ,  4.0930214 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [11, 15], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [12], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [12], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [12], 'to': []}

generate models:20

analyse output arrays in iter:22

pre layer res:
7:conv2d
{'name': 'conv2d', 'output': array([[[[ 3551057.5,  5410095. ,  5017918.5, ...,  7746818. ,
           7002183. ,  5055607. ],
         [ 5568708. ,  8094300. ,  8594189. , ..., 12105196. ,
          11438013. ,  8743554. ],
         [ 4684706. ,  8714414. ,  8945369. , ..., 12028767. ,
          10760587. ,  6775832. ],
         ...,
         [ 3969348. ,  6173333.5,  6642462.5, ...,  7639145.5,
           8489886. ,  6039920. ],
         [ 4192688.5,  6932481. ,  7274836. , ...,  9411383. ,
           8504626. ,  6516122. ],
         [ 3083714.8,  4292706.5,  3963273.8, ...,  6835582.5,
           6800473. ,  5714082. ]],

        [[ 3551057.5,  5410095. ,  5017918.5, ...,  7746818. ,
           7002183. ,  5055607. ],
         [ 5568708. ,  8094300. ,  8594189. , ..., 12105196. ,
          11438013. ,  8743554. ],
         [ 4684706. ,  8714414. ,  8945369. , ..., 12028767. ,
          10760587. ,  6775832. ],
         ...,
         [ 3969348. ,  6173333.5,  6642462.5, ...,  7639145.5,
           8489886. ,  6039920. ],
         [ 4192688.5,  6932481. ,  7274836. , ...,  9411383. ,
           8504626. ,  6516122. ],
         [ 3083714.8,  4292706.5,  3963273.8, ...,  6835582.5,
           6800473. ,  5714082. ]],

        [[ 3551057.5,  5410095. ,  5017918.5, ...,  7746818. ,
           7002183. ,  5055607. ],
         [ 5568708. ,  8094300. ,  8594189. , ..., 12105196. ,
          11438013. ,  8743554. ],
         [ 4684706. ,  8714414. ,  8945369. , ..., 12028767. ,
          10760587. ,  6775832. ],
         ...,
         [ 3969348. ,  6173333.5,  6642462.5, ...,  7639145.5,
           8489886. ,  6039920. ],
         [ 4192688.5,  6932481. ,  7274836. , ...,  9411383. ,
           8504626. ,  6516122. ],
         [ 3083714.8,  4292706.5,  3963273.8, ...,  6835582.5,
           6800473. ,  5714082. ]],

        ...,

        [[ 3551057.5,  5410095. ,  5017918.5, ...,  7746818. ,
           7002183. ,  5055607. ],
         [ 5568708. ,  8094300. ,  8594189. , ..., 12105196. ,
          11438013. ,  8743554. ],
         [ 4684706. ,  8714414. ,  8945369. , ..., 12028767. ,
          10760587. ,  6775832. ],
         ...,
         [ 3969348. ,  6173333.5,  6642462.5, ...,  7639145.5,
           8489886. ,  6039920. ],
         [ 4192688.5,  6932481. ,  7274836. , ...,  9411383. ,
           8504626. ,  6516122. ],
         [ 3083714.8,  4292706.5,  3963273.8, ...,  6835582.5,
           6800473. ,  5714082. ]],

        [[ 3551057.5,  5410095. ,  5017918.5, ...,  7746818. ,
           7002183. ,  5055607. ],
         [ 5568708. ,  8094300. ,  8594189. , ..., 12105196. ,
          11438013. ,  8743554. ],
         [ 4684706. ,  8714414. ,  8945369. , ..., 12028767. ,
          10760587. ,  6775832. ],
         ...,
         [ 3969348. ,  6173333.5,  6642462.5, ...,  7639145.5,
           8489886. ,  6039920. ],
         [ 4192688.5,  6932481. ,  7274836. , ...,  9411383. ,
           8504626. ,  6516122. ],
         [ 3083714.8,  4292706.5,  3963273.8, ...,  6835582.5,
           6800473. ,  5714082. ]],

        [[ 3551057.5,  5410095. ,  5017918.5, ...,  7746818. ,
           7002183. ,  5055607. ],
         [ 5568708. ,  8094300. ,  8594189. , ..., 12105196. ,
          11438013. ,  8743554. ],
         [ 4684706. ,  8714414. ,  8945369. , ..., 12028767. ,
          10760587. ,  6775832. ],
         ...,
         [ 3969348. ,  6173333.5,  6642462.5, ...,  7639145.5,
           8489886. ,  6039920. ],
         [ 4192688.5,  6932481. ,  7274836. , ...,  9411383. ,
           8504626. ,  6516122. ],
         [ 3083714.8,  4292706.5,  3963273.8, ...,  6835582.5,
           6800473. ,  5714082. ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [6], 'to': [32]}
tf node:
{'name': 'cos', 'output': array([[[[-0.60956806, -0.64632154, -0.97818166, ..., -0.72001815,
           0.9732661 ,  0.55885714],
         [-0.82649875,  0.61721087, -0.5293603 , ...,  0.19044314,
          -0.3569951 ,  0.5320597 ],
         [ 0.7424482 ,  0.9196179 , -0.3438701 , ..., -0.14183009,
          -0.76398367,  0.55499417],
         ...,
         [-0.61316484, -0.9655784 , -0.05540471, ...,  0.10863014,
          -0.44380963,  0.71206707],
         [ 0.8104198 , -0.7330817 ,  0.7721812 , ...,  0.7036283 ,
          -0.10691011,  0.98659396],
         [-0.9420413 , -0.9665481 , -0.7779144 , ..., -0.03902465,
           0.783614  , -0.792201  ]],

        [[-0.60956806, -0.64632154, -0.97818166, ..., -0.72001815,
           0.9732661 ,  0.55885714],
         [-0.82649875,  0.61721087, -0.5293603 , ...,  0.19044314,
          -0.3569951 ,  0.5320597 ],
         [ 0.7424482 ,  0.9196179 , -0.3438701 , ..., -0.14183009,
          -0.76398367,  0.55499417],
         ...,
         [-0.61316484, -0.9655784 , -0.05540471, ...,  0.10863014,
          -0.44380963,  0.71206707],
         [ 0.8104198 , -0.7330817 ,  0.7721812 , ...,  0.7036283 ,
          -0.10691011,  0.98659396],
         [-0.9420413 , -0.9665481 , -0.7779144 , ..., -0.03902465,
           0.783614  , -0.792201  ]],

        [[-0.60956806, -0.64632154, -0.97818166, ..., -0.72001815,
           0.9732661 ,  0.55885714],
         [-0.82649875,  0.61721087, -0.5293603 , ...,  0.19044314,
          -0.3569951 ,  0.5320597 ],
         [ 0.7424482 ,  0.9196179 , -0.3438701 , ..., -0.14183009,
          -0.76398367,  0.55499417],
         ...,
         [-0.61316484, -0.9655784 , -0.05540471, ...,  0.10863014,
          -0.44380963,  0.71206707],
         [ 0.8104198 , -0.7330817 ,  0.7721812 , ...,  0.7036283 ,
          -0.10691011,  0.98659396],
         [-0.9420413 , -0.9665481 , -0.7779144 , ..., -0.03902465,
           0.783614  , -0.792201  ]],

        ...,

        [[-0.60956806, -0.64632154, -0.97818166, ..., -0.72001815,
           0.9732661 ,  0.55885714],
         [-0.82649875,  0.61721087, -0.5293603 , ...,  0.19044314,
          -0.3569951 ,  0.5320597 ],
         [ 0.7424482 ,  0.9196179 , -0.3438701 , ..., -0.14183009,
          -0.76398367,  0.55499417],
         ...,
         [-0.61316484, -0.9655784 , -0.05540471, ...,  0.10863014,
          -0.44380963,  0.71206707],
         [ 0.8104198 , -0.7330817 ,  0.7721812 , ...,  0.7036283 ,
          -0.10691011,  0.98659396],
         [-0.9420413 , -0.9665481 , -0.7779144 , ..., -0.03902465,
           0.783614  , -0.792201  ]],

        [[-0.60956806, -0.64632154, -0.97818166, ..., -0.72001815,
           0.9732661 ,  0.55885714],
         [-0.82649875,  0.61721087, -0.5293603 , ...,  0.19044314,
          -0.3569951 ,  0.5320597 ],
         [ 0.7424482 ,  0.9196179 , -0.3438701 , ..., -0.14183009,
          -0.76398367,  0.55499417],
         ...,
         [-0.61316484, -0.9655784 , -0.05540471, ...,  0.10863014,
          -0.44380963,  0.71206707],
         [ 0.8104198 , -0.7330817 ,  0.7721812 , ...,  0.7036283 ,
          -0.10691011,  0.98659396],
         [-0.9420413 , -0.9665481 , -0.7779144 , ..., -0.03902465,
           0.783614  , -0.792201  ]],

        [[-0.60956806, -0.64632154, -0.97818166, ..., -0.72001815,
           0.9732661 ,  0.55885714],
         [-0.82649875,  0.61721087, -0.5293603 , ...,  0.19044314,
          -0.3569951 ,  0.5320597 ],
         [ 0.7424482 ,  0.9196179 , -0.3438701 , ..., -0.14183009,
          -0.76398367,  0.55499417],
         ...,
         [-0.61316484, -0.9655784 , -0.05540471, ...,  0.10863014,
          -0.44380963,  0.71206707],
         [ 0.8104198 , -0.7330817 ,  0.7721812 , ...,  0.7036283 ,
          -0.10691011,  0.98659396],
         [-0.9420413 , -0.9665481 , -0.7779144 , ..., -0.03902465,
           0.783614  , -0.792201  ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [7], 'to': [8]}
ms node:
{'name': 'cos', 'output': array([[[[-0.7658295 ,  0.978615  ,  0.99771035, ..., -0.5818077 ,
           0.9796913 , -0.29644695],
         [ 0.8558234 , -0.2381056 ,  0.15829962, ...,  0.9739532 ,
           0.59313804,  0.90330064],
         [ 0.9987945 , -0.52243835, -0.0677979 , ...,  0.28010416,
           0.6652825 , -0.91822606],
         ...,
         [-0.33696368, -0.9807036 , -0.6071987 , ...,  0.8908071 ,
          -0.6301506 ,  0.87988645],
         [-0.9726689 , -0.5103274 , -0.52384835, ...,  0.87414676,
          -0.18386978,  0.5289078 ],
         [ 0.5539248 , -0.73805326,  0.5363596 , ...,  0.9939746 ,
          -0.6881014 , -0.40264738]],

        [[-0.7658295 ,  0.978615  ,  0.99771035, ..., -0.5818077 ,
           0.9796913 , -0.29644695],
         [ 0.8558234 , -0.2381056 ,  0.15829962, ...,  0.9739532 ,
           0.59313804,  0.90330064],
         [ 0.9987945 , -0.52243835, -0.0677979 , ...,  0.28010416,
           0.6652825 , -0.91822606],
         ...,
         [-0.33696368, -0.9807036 , -0.6071987 , ...,  0.8908071 ,
          -0.6301506 ,  0.87988645],
         [-0.9726689 , -0.5103274 , -0.52384835, ...,  0.87414676,
          -0.18386978,  0.5289078 ],
         [ 0.5539248 , -0.73805326,  0.5363596 , ...,  0.9939746 ,
          -0.6881014 , -0.40264738]],

        [[-0.7658295 ,  0.978615  ,  0.99771035, ..., -0.5818077 ,
           0.9796913 , -0.29644695],
         [ 0.8558234 , -0.2381056 ,  0.15829962, ...,  0.9739532 ,
           0.59313804,  0.90330064],
         [ 0.9987945 , -0.52243835, -0.0677979 , ...,  0.28010416,
           0.6652825 , -0.91822606],
         ...,
         [-0.33696368, -0.9807036 , -0.6071987 , ...,  0.8908071 ,
          -0.6301506 ,  0.87988645],
         [-0.9726689 , -0.5103274 , -0.52384835, ...,  0.87414676,
          -0.18386978,  0.5289078 ],
         [ 0.5539248 , -0.73805326,  0.5363596 , ...,  0.9939746 ,
          -0.6881014 , -0.40264738]],

        ...,

        [[-0.7658295 ,  0.978615  ,  0.99771035, ..., -0.5818077 ,
           0.9796913 , -0.29644695],
         [ 0.8558234 , -0.2381056 ,  0.15829962, ...,  0.9739532 ,
           0.59313804,  0.90330064],
         [ 0.9987945 , -0.52243835, -0.0677979 , ...,  0.28010416,
           0.6652825 , -0.91822606],
         ...,
         [-0.33696368, -0.9807036 , -0.6071987 , ...,  0.8908071 ,
          -0.6301506 ,  0.87988645],
         [-0.9726689 , -0.5103274 , -0.52384835, ...,  0.87414676,
          -0.18386978,  0.5289078 ],
         [ 0.5539248 , -0.73805326,  0.5363596 , ...,  0.9939746 ,
          -0.6881014 , -0.40264738]],

        [[-0.7658295 ,  0.978615  ,  0.99771035, ..., -0.5818077 ,
           0.9796913 , -0.29644695],
         [ 0.8558234 , -0.2381056 ,  0.15829962, ...,  0.9739532 ,
           0.59313804,  0.90330064],
         [ 0.9987945 , -0.52243835, -0.0677979 , ...,  0.28010416,
           0.6652825 , -0.91822606],
         ...,
         [-0.33696368, -0.9807036 , -0.6071987 , ...,  0.8908071 ,
          -0.6301506 ,  0.87988645],
         [-0.9726689 , -0.5103274 , -0.52384835, ...,  0.87414676,
          -0.18386978,  0.5289078 ],
         [ 0.5539248 , -0.73805326,  0.5363596 , ...,  0.9939746 ,
          -0.6881014 , -0.40264738]],

        [[-0.7658295 ,  0.978615  ,  0.99771035, ..., -0.5818077 ,
           0.9796913 , -0.29644695],
         [ 0.8558234 , -0.2381056 ,  0.15829962, ...,  0.9739532 ,
           0.59313804,  0.90330064],
         [ 0.9987945 , -0.52243835, -0.0677979 , ...,  0.28010416,
           0.6652825 , -0.91822606],
         ...,
         [-0.33696368, -0.9807036 , -0.6071987 , ...,  0.8908071 ,
          -0.6301506 ,  0.87988645],
         [-0.9726689 , -0.5103274 , -0.52384835, ...,  0.87414676,
          -0.18386978,  0.5289078 ],
         [ 0.5539248 , -0.73805326,  0.5363596 , ...,  0.9939746 ,
          -0.6881014 , -0.40264738]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [7], 'to': [8]}
torch node:
{'name': 'cos', 'output': array([[[[ 0.7476288 , -0.98039734, -0.0632152 , ...,  0.9528647 ,
          -0.6648728 , -0.7180317 ],
         [-0.8620142 ,  0.5865916 , -0.14144391, ..., -0.97592205,
           0.98067856, -0.42500612],
         [ 0.08794661, -0.739881  ,  0.59965664, ...,  0.2872163 ,
          -0.55326563,  0.7422502 ],
         ...,
         [ 0.9986312 , -0.38969964, -0.9890526 , ...,  0.5079022 ,
           0.31290758, -0.42053097],
         [-0.96442926, -0.7876068 , -0.8177488 , ..., -0.34501094,
           0.17516217,  0.9735984 ],
         [ 0.2998369 ,  0.45446655, -0.94607455, ..., -0.9951889 ,
           0.9998022 , -0.4885008 ]],

        [[ 0.7476288 , -0.98039734, -0.0632152 , ...,  0.9528647 ,
          -0.6648728 , -0.7180317 ],
         [-0.8620142 ,  0.5865916 , -0.14144391, ..., -0.97592205,
           0.98067856, -0.42500612],
         [ 0.08794661, -0.739881  ,  0.59965664, ...,  0.2872163 ,
          -0.55326563,  0.7422502 ],
         ...,
         [ 0.9986312 , -0.38969964, -0.9890526 , ...,  0.5079022 ,
           0.31290758, -0.42053097],
         [-0.96442926, -0.7876068 , -0.8177488 , ..., -0.34501094,
           0.17516217,  0.9735984 ],
         [ 0.2998369 ,  0.45446655, -0.94607455, ..., -0.9951889 ,
           0.9998022 , -0.4885008 ]],

        [[ 0.7476288 , -0.98039734, -0.0632152 , ...,  0.9528647 ,
          -0.6648728 , -0.7180317 ],
         [-0.8620142 ,  0.5865916 , -0.14144391, ..., -0.97592205,
           0.98067856, -0.42500612],
         [ 0.08794661, -0.739881  ,  0.59965664, ...,  0.2872163 ,
          -0.55326563,  0.7422502 ],
         ...,
         [ 0.9986312 , -0.38969964, -0.9890526 , ...,  0.5079022 ,
           0.31290758, -0.42053097],
         [-0.96442926, -0.7876068 , -0.8177488 , ..., -0.34501094,
           0.17516217,  0.9735984 ],
         [ 0.2998369 ,  0.45446655, -0.94607455, ..., -0.9951889 ,
           0.9998022 , -0.4885008 ]],

        ...,

        [[ 0.7476288 , -0.98039734, -0.0632152 , ...,  0.9528647 ,
          -0.6648728 , -0.7180317 ],
         [-0.8620142 ,  0.5865916 , -0.14144391, ..., -0.97592205,
           0.98067856, -0.42500612],
         [ 0.08794661, -0.739881  ,  0.59965664, ...,  0.2872163 ,
          -0.55326563,  0.7422502 ],
         ...,
         [ 0.9986312 , -0.38969964, -0.9890526 , ...,  0.5079022 ,
           0.31290758, -0.42053097],
         [-0.96442926, -0.7876068 , -0.8177488 , ..., -0.34501094,
           0.17516217,  0.9735984 ],
         [ 0.2998369 ,  0.45446655, -0.94607455, ..., -0.9951889 ,
           0.9998022 , -0.4885008 ]],

        [[ 0.7476288 , -0.98039734, -0.0632152 , ...,  0.9528647 ,
          -0.6648728 , -0.7180317 ],
         [-0.8620142 ,  0.5865916 , -0.14144391, ..., -0.97592205,
           0.98067856, -0.42500612],
         [ 0.08794661, -0.739881  ,  0.59965664, ...,  0.2872163 ,
          -0.55326563,  0.7422502 ],
         ...,
         [ 0.9986312 , -0.38969964, -0.9890526 , ...,  0.5079022 ,
           0.31290758, -0.42053097],
         [-0.96442926, -0.7876068 , -0.8177488 , ..., -0.34501094,
           0.17516217,  0.9735984 ],
         [ 0.2998369 ,  0.45446655, -0.94607455, ..., -0.9951889 ,
           0.9998022 , -0.4885008 ]],

        [[ 0.7476288 , -0.98039734, -0.0632152 , ...,  0.9528647 ,
          -0.6648728 , -0.7180317 ],
         [-0.8620142 ,  0.5865916 , -0.14144391, ..., -0.97592205,
           0.98067856, -0.42500612],
         [ 0.08794661, -0.739881  ,  0.59965664, ...,  0.2872163 ,
          -0.55326563,  0.7422502 ],
         ...,
         [ 0.9986312 , -0.38969964, -0.9890526 , ...,  0.5079022 ,
           0.31290758, -0.42053097],
         [-0.96442926, -0.7876068 , -0.8177488 , ..., -0.34501094,
           0.17516217,  0.9735984 ],
         [ 0.2998369 ,  0.45446655, -0.94607455, ..., -0.9951889 ,
           0.9998022 , -0.4885008 ]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [7], 'to': [8]}

generate models:21

analyse output arrays in iter:25

pre layer res:
5:conv2d
{'name': 'conv2d', 'output': array([[[[          inf,           inf,           inf, ...,
          6.4000000e+01,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 1.5380914e+22,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 1.2291284e+27,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf, 6.4000000e+01, 3.8706136e+36, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
          6.4000000e+01,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 1.5380914e+22,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 1.2291284e+27,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf, 6.4000000e+01, 3.8706136e+36, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
          6.4000000e+01,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 1.5380914e+22,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 1.2291284e+27,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf, 6.4000000e+01, 3.8706136e+36, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]],

        ...,

        [[          inf,           inf,           inf, ...,
          6.4000000e+01,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 1.5380914e+22,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 1.2291284e+27,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf, 6.4000000e+01, 3.8706136e+36, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
          6.4000000e+01,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 1.5380914e+22,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 1.2291284e+27,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf, 6.4000000e+01, 3.8706136e+36, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
          6.4000000e+01,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 1.5380914e+22,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 1.2291284e+27,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf, 6.4000000e+01, 3.8706136e+36, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [16], 'to': [13]}
tf node:
{'name': 'sin', 'output': array([[[[       nan,        nan,        nan, ..., 0.92002606,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
          0.7824115 ,        nan],
         [       nan,        nan,        nan, ...,        nan,
          0.40615967,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan, 0.92002606, 0.74954325, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ..., 0.92002606,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
          0.7824115 ,        nan],
         [       nan,        nan,        nan, ...,        nan,
          0.40615967,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan, 0.92002606, 0.74954325, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ..., 0.92002606,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
          0.7824115 ,        nan],
         [       nan,        nan,        nan, ...,        nan,
          0.40615967,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan, 0.92002606, 0.74954325, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        ...,

        [[       nan,        nan,        nan, ..., 0.92002606,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
          0.7824115 ,        nan],
         [       nan,        nan,        nan, ...,        nan,
          0.40615967,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan, 0.92002606, 0.74954325, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ..., 0.92002606,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
          0.7824115 ,        nan],
         [       nan,        nan,        nan, ...,        nan,
          0.40615967,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan, 0.92002606, 0.74954325, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ..., 0.92002606,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
          0.7824115 ,        nan],
         [       nan,        nan,        nan, ...,        nan,
          0.40615967,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan, 0.92002606, 0.74954325, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [5], 'to': [6, 14]}
ms node:
{'name': 'sin', 'output': array([[[[        nan,         nan,         nan, ...,  0.92002606,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
          -0.9972016 ,         nan],
         [        nan,         nan,         nan, ...,         nan,
           0.90920866,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,  0.92002606, -0.01575759, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,  0.92002606,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
          -0.9972016 ,         nan],
         [        nan,         nan,         nan, ...,         nan,
           0.90920866,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,  0.92002606, -0.01575759, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,  0.92002606,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
          -0.9972016 ,         nan],
         [        nan,         nan,         nan, ...,         nan,
           0.90920866,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,  0.92002606, -0.01575759, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        ...,

        [[        nan,         nan,         nan, ...,  0.92002606,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
          -0.9972016 ,         nan],
         [        nan,         nan,         nan, ...,         nan,
           0.90920866,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,  0.92002606, -0.01575759, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,  0.92002606,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
          -0.36096498,         nan],
         [        nan,         nan,         nan, ...,         nan,
          -0.7113123 ,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,  0.92002606,  0.87581307, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,  0.92002606,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
          -0.36096498,         nan],
         [        nan,         nan,         nan, ...,         nan,
          -0.7113123 ,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,  0.92002606,  0.87581307, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [5], 'to': [6, 14]}
torch node:
{'name': 'sin', 'output': array([[[[        nan,         nan,         nan, ...,  0.92002606,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
           0.78241146,         nan],
         [        nan,         nan,         nan, ...,         nan,
           0.40615964,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,  0.92002606,  0.7495432 , ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,  0.92002606,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
           0.78241146,         nan],
         [        nan,         nan,         nan, ...,         nan,
           0.40615964,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,  0.92002606,  0.7495432 , ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,  0.92002606,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
           0.78241146,         nan],
         [        nan,         nan,         nan, ...,         nan,
           0.40615964,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,  0.92002606,  0.7495432 , ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        ...,

        [[        nan,         nan,         nan, ...,  0.92002606,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
           0.78241146,         nan],
         [        nan,         nan,         nan, ...,         nan,
           0.40615964,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,  0.92002606,  0.7495432 , ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,  0.92002606,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
          -0.9243172 ,         nan],
         [        nan,         nan,         nan, ...,         nan,
           0.04062511,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,  0.92002606,  0.7495432 , ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,  0.92002606,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
          -0.9243172 ,         nan],
         [        nan,         nan,         nan, ...,         nan,
           0.04062511,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,  0.92002606,  0.7495432 , ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [5], 'to': [6, 14]}

generate models:24

analyse output arrays in iter:30

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [8], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [9], 'to': []}

generate models:29

analyse output arrays in iter:35

pre layer res:
19:add
{'name': 'add', 'output': array([[[[      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        [[      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         ...,
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf],
         [      -inf,       -inf,       -inf, ...,       -inf,
                -inf,       -inf]],

        ...,

        [[0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         ...,
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854]],

        [[0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         ...,
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854]],

        [[0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         ...,
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854],
         [0.73105854, 0.73105854, 0.73105854, ..., 0.73105854,
          0.73105854, 0.73105854]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [9, 22], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [19], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [19], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [19], 'to': []}

generate models:34

analyse output arrays in iter:36

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         ...,
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]],

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         ...,
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]],

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         ...,
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [14], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [9], 'to': []}

generate models:35

analyse output arrays in iter:40

pre layer res:
23:reshape
{'name': 'reshape', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [22], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [23], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [23], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [23], 'to': []}

pre layer res:
3:relu
{'name': 'relu', 'output': array([[[[  0.       ,   0.       ,  32.646366 , ...,   0.       ,
           28.64221  ,  50.163254 ],
         [  0.       ,   0.       ,  51.950703 , ...,   0.       ,
           31.624147 ,   0.       ],
         [ 63.314896 ,  37.647316 ,   0.       , ...,   0.       ,
            0.       ,   0.       ],
         ...,
         [  0.       ,   4.684604 ,   0.       , ...,  81.985176 ,
            0.       ,   0.       ],
         [  0.       , 143.07726  ,   1.831459 , ...,   0.       ,
           26.148191 , 126.434944 ],
         [  0.       ,  11.286543 , 100.60825  , ...,   0.       ,
           53.098373 ,   4.8276772]],

        [[  0.       ,   0.       ,  32.646366 , ...,   0.       ,
           28.64221  ,  50.163254 ],
         [  0.       ,   0.       ,  51.950703 , ...,   0.       ,
           31.624147 ,   0.       ],
         [ 63.314896 ,  37.647316 ,   0.       , ...,   0.       ,
            0.       ,   0.       ],
         ...,
         [  0.       ,   4.684604 ,   0.       , ...,  81.985176 ,
            0.       ,   0.       ],
         [  0.       , 143.07726  ,   1.831459 , ...,   0.       ,
           26.148191 , 126.434944 ],
         [  0.       ,  11.286543 , 100.60825  , ...,   0.       ,
           53.098373 ,   4.8276772]],

        [[  0.       ,   0.       ,  32.646366 , ...,   0.       ,
           28.64221  ,  50.163254 ],
         [  0.       ,   0.       ,  51.950703 , ...,   0.       ,
           31.624147 ,   0.       ],
         [ 63.314896 ,  37.647316 ,   0.       , ...,   0.       ,
            0.       ,   0.       ],
         ...,
         [  0.       ,   4.684604 ,   0.       , ...,  81.985176 ,
            0.       ,   0.       ],
         [  0.       , 143.07726  ,   1.831459 , ...,   0.       ,
           26.148191 , 126.434944 ],
         [  0.       ,  11.286543 , 100.60825  , ...,   0.       ,
           53.098373 ,   4.8276772]],

        ...,

        [[  0.       ,   0.       ,  32.646366 , ...,   0.       ,
           28.64221  ,  50.163254 ],
         [  0.       ,   0.       ,  51.950703 , ...,   0.       ,
           31.624147 ,   0.       ],
         [ 63.314896 ,  37.647316 ,   0.       , ...,   0.       ,
            0.       ,   0.       ],
         ...,
         [  0.       ,   4.684604 ,   0.       , ...,  81.985176 ,
            0.       ,   0.       ],
         [  0.       , 143.07726  ,   1.831459 , ...,   0.       ,
           26.148191 , 126.434944 ],
         [  0.       ,  11.286543 , 100.60825  , ...,   0.       ,
           53.098373 ,   4.8276772]],

        [[  0.       ,   0.       ,  32.646366 , ...,   0.       ,
           28.64221  ,  50.163254 ],
         [  0.       ,   0.       ,  51.950703 , ...,   0.       ,
           31.624147 ,   0.       ],
         [ 63.314896 ,  37.647316 ,   0.       , ...,   0.       ,
            0.       ,   0.       ],
         ...,
         [  0.       ,   4.684604 ,   0.       , ...,  81.985176 ,
            0.       ,   0.       ],
         [  0.       , 143.07726  ,   1.831459 , ...,   0.       ,
           26.148191 , 126.434944 ],
         [  0.       ,  11.286543 , 100.60825  , ...,   0.       ,
           53.098373 ,   4.8276772]],

        [[  0.       ,   0.       ,  32.646366 , ...,   0.       ,
           28.64221  ,  50.163254 ],
         [  0.       ,   0.       ,  51.950703 , ...,   0.       ,
           31.624147 ,   0.       ],
         [ 63.314896 ,  37.647316 ,   0.       , ...,   0.       ,
            0.       ,   0.       ],
         ...,
         [  0.       ,   4.684604 ,   0.       , ...,  81.985176 ,
            0.       ,   0.       ],
         [  0.       , 143.07726  ,   1.831459 , ...,   0.       ,
           26.148191 , 126.434944 ],
         [  0.       ,  11.286543 , 100.60825  , ...,   0.       ,
           53.098373 ,   4.8276772]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [2], 'to': [19]}
tf node:
{'name': 'sin', 'output': array([[[[ 0.        ,  0.        ,  0.94263566, ...,  0.        ,
          -0.35963446, -0.10205071],
         [ 0.        ,  0.        ,  0.9934607 , ...,  0.        ,
           0.20671955,  0.        ],
         [ 0.46447578, -0.05177271,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        , -0.999614  ,  0.        , ...,  0.29911694,
           0.        ,  0.        ],
         [ 0.        , -0.99092966,  0.9662194 , ...,  0.        ,
           0.84971803,  0.6970235 ],
         [ 0.        , -0.95796645,  0.07721163, ...,  0.        ,
           0.30382195, -0.99336165]],

        [[ 0.        ,  0.        ,  0.94263566, ...,  0.        ,
          -0.35963446, -0.10205071],
         [ 0.        ,  0.        ,  0.9934607 , ...,  0.        ,
           0.20671955,  0.        ],
         [ 0.46447578, -0.05177271,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        , -0.999614  ,  0.        , ...,  0.29911694,
           0.        ,  0.        ],
         [ 0.        , -0.99092966,  0.9662194 , ...,  0.        ,
           0.84971803,  0.6970235 ],
         [ 0.        , -0.95796645,  0.07721163, ...,  0.        ,
           0.30382195, -0.99336165]],

        [[ 0.        ,  0.        ,  0.94263566, ...,  0.        ,
          -0.35963446, -0.10205071],
         [ 0.        ,  0.        ,  0.9934607 , ...,  0.        ,
           0.20671955,  0.        ],
         [ 0.46447578, -0.05177271,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        , -0.999614  ,  0.        , ...,  0.29911694,
           0.        ,  0.        ],
         [ 0.        , -0.99092966,  0.9662194 , ...,  0.        ,
           0.84971803,  0.6970235 ],
         [ 0.        , -0.95796645,  0.07721163, ...,  0.        ,
           0.30382195, -0.99336165]],

        ...,

        [[ 0.        ,  0.        ,  0.94263566, ...,  0.        ,
          -0.35963446, -0.10205071],
         [ 0.        ,  0.        ,  0.9934607 , ...,  0.        ,
           0.20671955,  0.        ],
         [ 0.46447578, -0.05177271,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        , -0.999614  ,  0.        , ...,  0.29911694,
           0.        ,  0.        ],
         [ 0.        , -0.99092966,  0.9662194 , ...,  0.        ,
           0.84971803,  0.6970235 ],
         [ 0.        , -0.95796645,  0.07721163, ...,  0.        ,
           0.30382195, -0.99336165]],

        [[ 0.        ,  0.        ,  0.94263566, ...,  0.        ,
          -0.35963446, -0.10205071],
         [ 0.        ,  0.        ,  0.9934607 , ...,  0.        ,
           0.20671955,  0.        ],
         [ 0.46447578, -0.05177271,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        , -0.999614  ,  0.        , ...,  0.29911694,
           0.        ,  0.        ],
         [ 0.        , -0.99092966,  0.9662194 , ...,  0.        ,
           0.84971803,  0.6970235 ],
         [ 0.        , -0.95796645,  0.07721163, ...,  0.        ,
           0.30382195, -0.99336165]],

        [[ 0.        ,  0.        ,  0.94263566, ...,  0.        ,
          -0.35963446, -0.10205071],
         [ 0.        ,  0.        ,  0.9934607 , ...,  0.        ,
           0.20671955,  0.        ],
         [ 0.46447578, -0.05177271,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        , -0.999614  ,  0.        , ...,  0.29911694,
           0.        ,  0.        ],
         [ 0.        , -0.99092966,  0.9662194 , ...,  0.        ,
           0.84971803,  0.6970235 ],
         [ 0.        , -0.95796645,  0.07721163, ...,  0.        ,
           0.30382195, -0.99336165]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [3], 'to': [4]}
ms node:
{'name': 'sin', 'output': array([[[[ 0.        ,  0.        ,  0.94263566, ...,  0.        ,
          -0.35963446, -0.10205071],
         [ 0.        ,  0.        ,  0.9934607 , ...,  0.        ,
           0.20671953,  0.        ],
         [ 0.46447578, -0.05177271,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        , -0.999614  ,  0.        , ...,  0.29911694,
           0.        ,  0.        ],
         [ 0.        , -0.99092966,  0.96621937, ...,  0.        ,
           0.84971803,  0.6970235 ],
         [ 0.        , -0.95796645,  0.07721164, ...,  0.        ,
           0.30382195, -0.99336165]],

        [[ 0.        ,  0.        ,  0.94263566, ...,  0.        ,
          -0.35963446, -0.10205071],
         [ 0.        ,  0.        ,  0.9934607 , ...,  0.        ,
           0.20671953,  0.        ],
         [ 0.46447578, -0.05177271,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        , -0.999614  ,  0.        , ...,  0.29911694,
           0.        ,  0.        ],
         [ 0.        , -0.99092966,  0.96621937, ...,  0.        ,
           0.84971803,  0.6970235 ],
         [ 0.        , -0.95796645,  0.07721164, ...,  0.        ,
           0.30382195, -0.99336165]],

        [[ 0.        ,  0.        ,  0.94263566, ...,  0.        ,
          -0.35963446, -0.10205071],
         [ 0.        ,  0.        ,  0.9934607 , ...,  0.        ,
           0.20671953,  0.        ],
         [ 0.46447578, -0.05177271,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        , -0.999614  ,  0.        , ...,  0.29911694,
           0.        ,  0.        ],
         [ 0.        , -0.99092966,  0.96621937, ...,  0.        ,
           0.84971803,  0.6970235 ],
         [ 0.        , -0.95796645,  0.07721164, ...,  0.        ,
           0.30382195, -0.99336165]],

        ...,

        [[ 0.        ,  0.        ,  0.94263566, ...,  0.        ,
          -0.35963446, -0.10205071],
         [ 0.        ,  0.        ,  0.9934607 , ...,  0.        ,
           0.20671953,  0.        ],
         [ 0.46447578, -0.05177271,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        , -0.999614  ,  0.        , ...,  0.29911694,
           0.        ,  0.        ],
         [ 0.        , -0.99092966,  0.96621937, ...,  0.        ,
           0.84971803,  0.6970235 ],
         [ 0.        , -0.95796645,  0.07721164, ...,  0.        ,
           0.30382195, -0.99336165]],

        [[ 0.        ,  0.        ,  0.94263566, ...,  0.        ,
          -0.3596327 , -0.10209244],
         [ 0.        ,  0.        ,  0.993459  , ...,  0.        ,
           0.2067214 ,  0.        ],
         [ 0.46443522, -0.05176128,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        , -0.9996141 ,  0.        , ...,  0.29907325,
           0.        ,  0.        ],
         [ 0.        , -0.9909153 ,  0.96621937, ...,  0.        ,
           0.849717  ,  0.69694144],
         [ 0.        , -0.9579675 ,  0.07713557, ...,  0.        ,
           0.3038365 , -0.9933617 ]],

        [[ 0.        ,  0.        ,  0.94263566, ...,  0.        ,
          -0.3596327 , -0.10209244],
         [ 0.        ,  0.        ,  0.993459  , ...,  0.        ,
           0.2067214 ,  0.        ],
         [ 0.46443522, -0.05176128,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        , -0.9996141 ,  0.        , ...,  0.29907325,
           0.        ,  0.        ],
         [ 0.        , -0.9909153 ,  0.96621937, ...,  0.        ,
           0.849717  ,  0.69694144],
         [ 0.        , -0.9579675 ,  0.07713557, ...,  0.        ,
           0.3038365 , -0.9933617 ]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [3], 'to': [4]}
torch node:
{'name': 'sin', 'output': array([[[[ 0.        ,  0.        ,  0.94263566, ...,  0.        ,
          -0.35963446, -0.10205071],
         [ 0.        ,  0.        ,  0.9934607 , ...,  0.        ,
           0.20671953,  0.        ],
         [ 0.46447578, -0.05177271,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        , -0.999614  ,  0.        , ...,  0.29911694,
           0.        ,  0.        ],
         [ 0.        , -0.99092966,  0.9662194 , ...,  0.        ,
           0.84971803,  0.6970235 ],
         [ 0.        , -0.95796645,  0.07721164, ...,  0.        ,
           0.30382195, -0.99336165]],

        [[ 0.        ,  0.        ,  0.94263566, ...,  0.        ,
          -0.35963446, -0.10205071],
         [ 0.        ,  0.        ,  0.9934607 , ...,  0.        ,
           0.20671953,  0.        ],
         [ 0.46447578, -0.05177271,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        , -0.999614  ,  0.        , ...,  0.29911694,
           0.        ,  0.        ],
         [ 0.        , -0.99092966,  0.9662194 , ...,  0.        ,
           0.84971803,  0.6970235 ],
         [ 0.        , -0.95796645,  0.07721164, ...,  0.        ,
           0.30382195, -0.99336165]],

        [[ 0.        ,  0.        ,  0.94263566, ...,  0.        ,
          -0.35963446, -0.10205071],
         [ 0.        ,  0.        ,  0.9934607 , ...,  0.        ,
           0.20671953,  0.        ],
         [ 0.46447578, -0.05177271,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        , -0.999614  ,  0.        , ...,  0.29911694,
           0.        ,  0.        ],
         [ 0.        , -0.99092966,  0.9662194 , ...,  0.        ,
           0.84971803,  0.6970235 ],
         [ 0.        , -0.95796645,  0.07721164, ...,  0.        ,
           0.30382195, -0.99336165]],

        ...,

        [[ 0.        ,  0.        ,  0.94263566, ...,  0.        ,
          -0.35963446, -0.10205071],
         [ 0.        ,  0.        ,  0.9934607 , ...,  0.        ,
           0.20671953,  0.        ],
         [ 0.46447578, -0.05177271,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        , -0.999614  ,  0.        , ...,  0.29911694,
           0.        ,  0.        ],
         [ 0.        , -0.99092966,  0.9662194 , ...,  0.        ,
           0.84971803,  0.6970235 ],
         [ 0.        , -0.95796645,  0.07721164, ...,  0.        ,
           0.30382195, -0.99336165]],

        [[ 0.        ,  0.        ,  0.94263566, ...,  0.        ,
          -0.35963446, -0.10205071],
         [ 0.        ,  0.        ,  0.9934607 , ...,  0.        ,
           0.20671953,  0.        ],
         [ 0.46447578, -0.05177271,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        , -0.999614  ,  0.        , ...,  0.29911694,
           0.        ,  0.        ],
         [ 0.        , -0.99092966,  0.9662194 , ...,  0.        ,
           0.84971803,  0.6970235 ],
         [ 0.        , -0.95796645,  0.07721164, ...,  0.        ,
           0.30382195, -0.99336165]],

        [[ 0.        ,  0.        ,  0.94263566, ...,  0.        ,
          -0.35963446, -0.10205071],
         [ 0.        ,  0.        ,  0.9934607 , ...,  0.        ,
           0.20671953,  0.        ],
         [ 0.46447578, -0.05177271,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        , -0.999614  ,  0.        , ...,  0.29911694,
           0.        ,  0.        ],
         [ 0.        , -0.99092966,  0.9662194 , ...,  0.        ,
           0.84971803,  0.6970235 ],
         [ 0.        , -0.95796645,  0.07721164, ...,  0.        ,
           0.30382195, -0.99336165]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [3], 'to': [4]}

generate models:39

final statics:
total operators:28
tensorflow --> nums:11,distinct_bugs:4
mindspore --> nums:8,distinct_bugs:3
torch --> nums:5,distinct_bugs:3
tensorflow --> 
log:1
cos:3
conv2d:6
sin:1
mindspore --> 
log:1
cos:4
sin:3
torch --> 
log:1
cos:3
sin:1

generate models:48

analyse output arrays in iter:51

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[10264447. , 15738720. , 11458211. , ...,  6300719. ,
           8988974. ,  7215278.5],
         [19643224. ,  9057979. , 19181034. , ..., 14859876. ,
           9664844. , 10778509. ],
         [12012043. , 10079871. ,  7380113. , ...,  7412356.5,
           8811588. ,  9048016. ],
         ...,
         [10465587. , 11787045. ,  6446143.5, ...,  4951750.5,
          10751756. ,  8545805. ],
         [ 6867263.5, 12458975. , 10593242. , ...,  7537276.5,
           9330614. ,  8590384. ],
         [ 6484527.5, 13501951. ,  8794364. , ..., 12420393. ,
          10266239. ,  8501824. ]],

        [[10264447. , 15738720. , 11458211. , ...,  6300719. ,
           8988974. ,  7215278.5],
         [19643224. ,  9057979. , 19181034. , ..., 14859876. ,
           9664844. , 10778509. ],
         [12012043. , 10079871. ,  7380113. , ...,  7412356.5,
           8811588. ,  9048016. ],
         ...,
         [10465587. , 11787045. ,  6446143.5, ...,  4951750.5,
          10751756. ,  8545805. ],
         [ 6867263.5, 12458975. , 10593242. , ...,  7537276.5,
           9330614. ,  8590384. ],
         [ 6484527.5, 13501951. ,  8794364. , ..., 12420393. ,
          10266239. ,  8501824. ]],

        [[10264447. , 15738720. , 11458211. , ...,  6300719. ,
           8988974. ,  7215278.5],
         [19643224. ,  9057979. , 19181034. , ..., 14859876. ,
           9664844. , 10778509. ],
         [12012043. , 10079871. ,  7380113. , ...,  7412356.5,
           8811588. ,  9048016. ],
         ...,
         [10465587. , 11787045. ,  6446143.5, ...,  4951750.5,
          10751756. ,  8545805. ],
         [ 6867263.5, 12458975. , 10593242. , ...,  7537276.5,
           9330614. ,  8590384. ],
         [ 6484527.5, 13501951. ,  8794364. , ..., 12420393. ,
          10266239. ,  8501824. ]],

        ...,

        [[10264447. , 15738720. , 11458211. , ...,  6300719. ,
           8988974. ,  7215278.5],
         [19643224. ,  9057979. , 19181034. , ..., 14859876. ,
           9664844. , 10778509. ],
         [12012043. , 10079871. ,  7380113. , ...,  7412356.5,
           8811588. ,  9048016. ],
         ...,
         [10465587. , 11787045. ,  6446143.5, ...,  4951750.5,
          10751756. ,  8545805. ],
         [ 6867263.5, 12458975. , 10593242. , ...,  7537276.5,
           9330614. ,  8590384. ],
         [ 6484527.5, 13501951. ,  8794364. , ..., 12420393. ,
          10266239. ,  8501824. ]],

        [[10264447. , 15738720. , 11458211. , ...,  6300719. ,
           8988974. ,  7215278.5],
         [19643224. ,  9057979. , 19181034. , ..., 14859876. ,
           9664844. , 10778509. ],
         [12012043. , 10079871. ,  7380113. , ...,  7412356.5,
           8811588. ,  9048016. ],
         ...,
         [10465587. , 11787045. ,  6446143.5, ...,  4951750.5,
          10751756. ,  8545805. ],
         [ 6867263.5, 12458975. , 10593242. , ...,  7537276.5,
           9330614. ,  8590384. ],
         [ 6484527.5, 13501951. ,  8794364. , ..., 12420393. ,
          10266239. ,  8501824. ]],

        [[10264447. , 15738720. , 11458211. , ...,  6300719. ,
           8988974. ,  7215278.5],
         [19643224. ,  9057979. , 19181034. , ..., 14859876. ,
           9664844. , 10778509. ],
         [12012043. , 10079871. ,  7380113. , ...,  7412356.5,
           8811588. ,  9048016. ],
         ...,
         [10465587. , 11787045. ,  6446143.5, ...,  4951750.5,
          10751756. ,  8545805. ],
         [ 6867263.5, 12458975. , 10593242. , ...,  7537276.5,
           9330614. ,  8590384. ],
         [ 6484527.5, 13501951. ,  8794364. , ..., 12420393. ,
          10266239. ,  8501824. ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [8], 'to': [11]}
tf node:
{'name': 'sin', 'output': array([[[[ 0.13682702,  0.5141123 , -0.48373497, ..., -0.44772613,
          -0.7917871 ,  0.99763834],
         [ 0.94681835,  0.7386687 ,  0.7083776 , ..., -0.9812515 ,
          -0.9446764 , -0.0846557 ],
         [ 0.12584686,  0.9596272 ,  0.22104412, ...,  0.8964583 ,
          -0.9735465 ,  0.1776543 ],
         ...,
         [-0.5703268 ,  0.14900415, -0.59742486, ..., -0.42027253,
           0.65809125,  0.6298871 ],
         [-0.41700688,  0.26624587, -0.88326925, ..., -0.92405885,
           0.84371316,  0.46324515],
         [-0.61409956,  0.99904245, -0.01224822, ..., -0.36172494,
          -0.9147666 ,  0.9180107 ]],

        [[ 0.13682702,  0.5141123 , -0.48373497, ..., -0.44772613,
          -0.7917871 ,  0.99763834],
         [ 0.94681835,  0.7386687 ,  0.7083776 , ..., -0.9812515 ,
          -0.9446764 , -0.0846557 ],
         [ 0.12584686,  0.9596272 ,  0.22104412, ...,  0.8964583 ,
          -0.9735465 ,  0.1776543 ],
         ...,
         [-0.5703268 ,  0.14900415, -0.59742486, ..., -0.42027253,
           0.65809125,  0.6298871 ],
         [-0.41700688,  0.26624587, -0.88326925, ..., -0.92405885,
           0.84371316,  0.46324515],
         [-0.61409956,  0.99904245, -0.01224822, ..., -0.36172494,
          -0.9147666 ,  0.9180107 ]],

        [[ 0.13682702,  0.5141123 , -0.48373497, ..., -0.44772613,
          -0.7917871 ,  0.99763834],
         [ 0.94681835,  0.7386687 ,  0.7083776 , ..., -0.9812515 ,
          -0.9446764 , -0.0846557 ],
         [ 0.12584686,  0.9596272 ,  0.22104412, ...,  0.8964583 ,
          -0.9735465 ,  0.1776543 ],
         ...,
         [-0.5703268 ,  0.14900415, -0.59742486, ..., -0.42027253,
           0.65809125,  0.6298871 ],
         [-0.41700688,  0.26624587, -0.88326925, ..., -0.92405885,
           0.84371316,  0.46324515],
         [-0.61409956,  0.99904245, -0.01224822, ..., -0.36172494,
          -0.9147666 ,  0.9180107 ]],

        ...,

        [[ 0.13682702,  0.5141123 , -0.48373497, ..., -0.44772613,
          -0.7917871 ,  0.99763834],
         [ 0.94681835,  0.7386687 ,  0.7083776 , ..., -0.9812515 ,
          -0.9446764 , -0.0846557 ],
         [ 0.12584686,  0.9596272 ,  0.22104412, ...,  0.8964583 ,
          -0.9735465 ,  0.1776543 ],
         ...,
         [-0.5703268 ,  0.14900415, -0.59742486, ..., -0.42027253,
           0.65809125,  0.6298871 ],
         [-0.41700688,  0.26624587, -0.88326925, ..., -0.92405885,
           0.84371316,  0.46324515],
         [-0.61409956,  0.99904245, -0.01224822, ..., -0.36172494,
          -0.9147666 ,  0.9180107 ]],

        [[ 0.13682702,  0.5141123 , -0.48373497, ..., -0.44772613,
          -0.7917871 ,  0.99763834],
         [ 0.94681835,  0.7386687 ,  0.7083776 , ..., -0.9812515 ,
          -0.9446764 , -0.0846557 ],
         [ 0.12584686,  0.9596272 ,  0.22104412, ...,  0.8964583 ,
          -0.9735465 ,  0.1776543 ],
         ...,
         [-0.5703268 ,  0.14900415, -0.59742486, ..., -0.42027253,
           0.65809125,  0.6298871 ],
         [-0.41700688,  0.26624587, -0.88326925, ..., -0.92405885,
           0.84371316,  0.46324515],
         [-0.61409956,  0.99904245, -0.01224822, ..., -0.36172494,
          -0.9147666 ,  0.9180107 ]],

        [[ 0.13682702,  0.5141123 , -0.48373497, ..., -0.44772613,
          -0.7917871 ,  0.99763834],
         [ 0.94681835,  0.7386687 ,  0.7083776 , ..., -0.9812515 ,
          -0.9446764 , -0.0846557 ],
         [ 0.12584686,  0.9596272 ,  0.22104412, ...,  0.8964583 ,
          -0.9735465 ,  0.1776543 ],
         ...,
         [-0.5703268 ,  0.14900415, -0.59742486, ..., -0.42027253,
           0.65809125,  0.6298871 ],
         [-0.41700688,  0.26624587, -0.88326925, ..., -0.92405885,
           0.84371316,  0.46324515],
         [-0.61409956,  0.99904245, -0.01224822, ..., -0.36172494,
          -0.9147666 ,  0.9180107 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [9], 'to': [10]}
ms node:
{'name': 'sin', 'output': array([[[[ 0.13682702,  0.5141123 , -0.99783075, ..., -0.44772613,
          -0.791787  ,  0.9084398 ],
         [ 0.94681835,  0.7386687 ,  0.7083776 , ..., -0.6923507 ,
          -0.9446764 , -0.0846557 ],
         [ 0.12584686,  0.9596272 ,  0.22104414, ...,  0.57426924,
          -0.9735465 ,  0.1776543 ],
         ...,
         [-0.5703268 , -0.75157   , -0.59742486, ..., -0.42027253,
           0.6580912 ,  0.62988716],
         [-0.41700685,  0.26624587, -0.8832692 , ..., -0.92405885,
           0.84371316,  0.46324515],
         [-0.16054669,  0.99904245, -0.01224822, ..., -0.9799315 ,
          -0.9147666 ,  0.16231321]],

        [[ 0.13682702,  0.5141123 , -0.99783075, ..., -0.44772613,
          -0.791787  ,  0.9084398 ],
         [ 0.94681835,  0.7386687 ,  0.7083776 , ..., -0.6923507 ,
          -0.9446764 , -0.0846557 ],
         [ 0.12584686,  0.9596272 ,  0.22104414, ...,  0.57426924,
          -0.9735465 ,  0.1776543 ],
         ...,
         [-0.5703268 , -0.75157   , -0.59742486, ..., -0.42027253,
           0.6580912 ,  0.62988716],
         [-0.41700685,  0.26624587, -0.8832692 , ..., -0.92405885,
           0.84371316,  0.46324515],
         [-0.16054669,  0.99904245, -0.01224822, ..., -0.9799315 ,
          -0.9147666 ,  0.16231321]],

        [[ 0.13682702,  0.5141123 , -0.99783075, ..., -0.44772613,
          -0.791787  ,  0.9084398 ],
         [ 0.94681835,  0.7386687 ,  0.7083776 , ..., -0.6923507 ,
          -0.9446764 , -0.0846557 ],
         [ 0.12584686,  0.9596272 ,  0.22104414, ...,  0.57426924,
          -0.9735465 ,  0.1776543 ],
         ...,
         [-0.5703268 , -0.75157   , -0.59742486, ..., -0.42027253,
           0.6580912 ,  0.62988716],
         [-0.41700685,  0.26624587, -0.8832692 , ..., -0.92405885,
           0.84371316,  0.46324515],
         [-0.16054669,  0.99904245, -0.01224822, ..., -0.9799315 ,
          -0.9147666 ,  0.16231321]],

        ...,

        [[ 0.13682702,  0.5141123 , -0.99783075, ..., -0.44772613,
          -0.791787  ,  0.9084398 ],
         [ 0.94681835,  0.7386687 ,  0.7083776 , ..., -0.6923507 ,
          -0.9446764 , -0.0846557 ],
         [ 0.12584686,  0.9596272 ,  0.22104414, ...,  0.57426924,
          -0.9735465 ,  0.1776543 ],
         ...,
         [-0.5703268 , -0.75157   , -0.59742486, ..., -0.42027253,
           0.6580912 ,  0.62988716],
         [-0.41700685,  0.26624587, -0.8832692 , ..., -0.92405885,
           0.84371316,  0.46324515],
         [-0.16054669,  0.99904245, -0.01224822, ..., -0.9799315 ,
          -0.9147666 ,  0.16231321]],

        [[ 0.13682702, -0.7272496 , -0.34617424, ..., -0.24488981,
           0.33207938,  0.87871605],
         [-0.6865988 , -0.99296296,  0.9334637 , ...,  0.08471249,
          -0.58249986,  0.3418382 ],
         [-0.6452905 ,  0.9596272 , -0.20918791, ..., -0.9949363 ,
           0.9315594 , -0.5126019 ],
         ...,
         [-0.9220231 ,  0.41292283, -0.59742486, ..., -0.14999215,
           0.15132663,  0.11478372],
         [-0.41700685, -0.7477841 , -0.87176967, ...,  0.99942803,
          -0.9110221 ,  0.04800561],
         [ 0.8701813 ,  0.99904245, -0.9623267 , ..., -0.7967629 ,
          -0.15431081,  0.9180107 ]],

        [[ 0.13682702, -0.7272496 , -0.34617424, ..., -0.24488981,
           0.33207938,  0.87871605],
         [-0.6865988 , -0.99296296,  0.9334637 , ...,  0.08471249,
          -0.58249986,  0.3418382 ],
         [-0.6452905 ,  0.9596272 , -0.20918791, ..., -0.9949363 ,
           0.9315594 , -0.5126019 ],
         ...,
         [-0.9220231 ,  0.41292283, -0.59742486, ..., -0.14999215,
           0.15132663,  0.11478372],
         [-0.41700685, -0.7477841 , -0.87176967, ...,  0.99942803,
          -0.9110221 ,  0.04800561],
         [ 0.8701813 ,  0.99904245, -0.9623267 , ..., -0.7967629 ,
          -0.15431081,  0.9180107 ]]]], dtype=float32), 'output_shape': (1, 128, 8, 8), 'from': [9], 'to': [10]}
torch node:
{'name': 'sin', 'output': array([[[[ 0.13682702,  0.5141123 , -0.99783075, ..., -0.44772613,
          -0.791787  ,  0.9084398 ],
         [ 0.94681835,  0.7386687 ,  0.7083776 , ..., -0.6923507 ,
          -0.9446764 , -0.0846557 ],
         [ 0.12584686,  0.9596272 ,  0.22104414, ...,  0.57426924,
          -0.9735465 ,  0.1776543 ],
         ...,
         [-0.5703268 , -0.75157   , -0.59742486, ..., -0.42027253,
           0.6580912 ,  0.62988716],
         [-0.41700688,  0.26624587, -0.8832692 , ..., -0.92405885,
           0.84371316,  0.46324515],
         [-0.16054669,  0.99904245, -0.01224822, ..., -0.9799315 ,
          -0.9147666 ,  0.16231321]],

        [[ 0.13682702,  0.5141123 , -0.99783075, ..., -0.44772613,
          -0.791787  ,  0.9084398 ],
         [ 0.94681835,  0.7386687 ,  0.7083776 , ..., -0.6923507 ,
          -0.9446764 , -0.0846557 ],
         [ 0.12584686,  0.9596272 ,  0.22104414, ...,  0.57426924,
          -0.9735465 ,  0.1776543 ],
         ...,
         [-0.5703268 , -0.75157   , -0.59742486, ..., -0.42027253,
           0.6580912 ,  0.62988716],
         [-0.41700688,  0.26624587, -0.8832692 , ..., -0.92405885,
           0.84371316,  0.46324515],
         [-0.16054669,  0.99904245, -0.01224822, ..., -0.9799315 ,
          -0.9147666 ,  0.16231321]],

        [[ 0.13682702,  0.5141123 , -0.99783075, ..., -0.44772613,
          -0.791787  ,  0.9084398 ],
         [ 0.94681835,  0.7386687 ,  0.7083776 , ..., -0.6923507 ,
          -0.9446764 , -0.0846557 ],
         [ 0.12584686,  0.9596272 ,  0.22104414, ...,  0.57426924,
          -0.9735465 ,  0.1776543 ],
         ...,
         [-0.5703268 , -0.75157   , -0.59742486, ..., -0.42027253,
           0.6580912 ,  0.62988716],
         [-0.41700688,  0.26624587, -0.8832692 , ..., -0.92405885,
           0.84371316,  0.46324515],
         [-0.16054669,  0.99904245, -0.01224822, ..., -0.9799315 ,
          -0.9147666 ,  0.16231321]],

        ...,

        [[ 0.13682702,  0.5141123 , -0.99783075, ..., -0.44772613,
          -0.791787  ,  0.9084398 ],
         [ 0.94681835,  0.7386687 ,  0.7083776 , ..., -0.6923507 ,
          -0.9446764 , -0.0846557 ],
         [ 0.12584686,  0.9596272 ,  0.22104414, ...,  0.57426924,
          -0.9735465 ,  0.1776543 ],
         ...,
         [-0.5703268 , -0.75157   , -0.59742486, ..., -0.42027253,
           0.6580912 ,  0.62988716],
         [-0.41700688,  0.26624587, -0.8832692 , ..., -0.92405885,
           0.84371316,  0.46324515],
         [-0.16054669,  0.99904245, -0.01224822, ..., -0.9799315 ,
          -0.9147666 ,  0.16231321]],

        [[ 0.13682702,  0.5141123 , -0.99783075, ..., -0.44772613,
          -0.791787  ,  0.9084398 ],
         [ 0.94681835,  0.7386687 ,  0.7083776 , ..., -0.6923507 ,
          -0.9446764 , -0.0846557 ],
         [ 0.12584686,  0.9596272 ,  0.22104414, ...,  0.57426924,
          -0.9735465 ,  0.1776543 ],
         ...,
         [-0.5703268 , -0.75157   , -0.59742486, ..., -0.42027253,
           0.6580912 ,  0.62988716],
         [-0.41700688,  0.26624587, -0.8832692 , ..., -0.92405885,
           0.84371316,  0.46324515],
         [-0.16054669,  0.99904245, -0.01224822, ..., -0.9799315 ,
          -0.9147666 ,  0.16231321]],

        [[ 0.13682702,  0.5141123 , -0.99783075, ..., -0.44772613,
          -0.791787  ,  0.9084398 ],
         [ 0.94681835,  0.7386687 ,  0.7083776 , ..., -0.6923507 ,
          -0.9446764 , -0.0846557 ],
         [ 0.12584686,  0.9596272 ,  0.22104414, ...,  0.57426924,
          -0.9735465 ,  0.1776543 ],
         ...,
         [-0.5703268 , -0.75157   , -0.59742486, ..., -0.42027253,
           0.6580912 ,  0.62988716],
         [-0.41700688,  0.26624587, -0.8832692 , ..., -0.92405885,
           0.84371316,  0.46324515],
         [-0.16054669,  0.99904245, -0.01224822, ..., -0.9799315 ,
          -0.9147666 ,  0.16231321]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 8, 8]), 'from': [9], 'to': [10]}

generate models:50

analyse output arrays in iter:56

pre layer res:
27:add
{'name': 'add', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [12, 30], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [27], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [27], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [27], 'to': []}

pre layer res:
22:reshape
{'name': 'reshape', 'output': array([[[[-1.7037604 , -2.687872  ,  0.89462245, ..., -1.2541753 ,
          -0.04438412,  3.3051786 ],
         [ 0.11118254,  1.1086197 ,  1.7139704 , ...,  5.1894474 ,
           0.38695234,  3.4301832 ],
         [-0.06957549, -0.918291  , -0.5613699 , ..., -1.4750602 ,
           2.7525923 , -0.85489756],
         ...,
         [-1.7121786 ,  0.80169636, -5.3716264 , ..., -0.651551  ,
           0.9174431 ,  0.31193566],
         [-1.631527  ,  1.5961546 , -0.84253204, ..., -1.731143  ,
          -0.9609738 ,  0.8633601 ],
         [ 2.836969  , -3.0076568 , -1.7152612 , ..., -2.4583197 ,
          -2.2532263 , -1.6640154 ]],

        [[-2.9025912 ,  0.82348865,  0.62929237, ...,  1.3633256 ,
           0.45095178, -1.3054641 ],
         [-2.9758906 , -3.258375  ,  2.671894  , ...,  1.9434011 ,
          -0.01603079,  0.38779235],
         [ 2.3532505 , -0.22759122,  2.50464   , ..., -0.6724719 ,
          -2.823896  ,  0.9585177 ],
         ...,
         [ 2.324214  , -0.34567547, -0.7610426 , ..., -1.457258  ,
           2.763192  ,  0.927693  ],
         [ 0.1667305 ,  3.0768924 ,  2.180701  , ...,  0.61653817,
           0.72910523, -2.2380657 ],
         [ 1.482145  ,  3.0258522 , -0.36074153, ..., -1.4931595 ,
           2.9966857 ,  0.41984987]],

        [[-1.3605444 ,  0.5299263 , -1.7589915 , ..., -1.4875052 ,
           0.01929459,  1.1392593 ],
         [-0.7574467 , -2.2559946 ,  0.15519476, ...,  2.8066573 ,
           1.4427934 ,  0.3836071 ],
         [ 2.2003975 ,  1.91398   , -1.3626554 , ..., -1.9029799 ,
           0.79225886,  0.27182788],
         ...,
         [ 0.30342782, -0.4134013 , -1.1232171 , ..., -1.2016461 ,
           1.583334  , -1.9696946 ],
         [ 0.8079126 ,  1.9922706 ,  0.09872466, ...,  2.0040972 ,
           0.49361828,  1.8698909 ],
         [ 0.8860308 , -2.00134   ,  2.1406274 , ...,  1.2655212 ,
           3.1389809 ,  3.8510137 ]],

        ...,

        [[-0.1407057 , -0.87310535, -0.41092297, ...,  3.3264394 ,
          -1.0685245 ,  1.2801574 ],
         [ 0.9458021 ,  0.9164734 , -1.287747  , ..., -1.0727731 ,
          -0.17010161,  0.9848207 ],
         [ 0.82064754, -0.26714107, -0.6384381 , ..., -1.2390497 ,
           1.869355  ,  0.93905205],
         ...,
         [-1.6399357 , -0.2365839 ,  2.4325933 , ..., -0.13072991,
           0.33601123, -1.7647312 ],
         [ 1.0700293 ,  0.92990196, -2.014227  , ...,  0.98593295,
           1.2775655 ,  0.46365488],
         [ 0.4783822 , -1.2873101 , -0.35941947, ..., -0.67295015,
          -1.2116003 , -2.208592  ]],

        [[-0.89880675, -0.04265976,  1.4812983 , ...,  3.2887788 ,
           1.0746814 ,  0.9935684 ],
         [-0.15113002,  1.1329061 , -0.674942  , ..., -0.97091407,
           0.34192738, -2.8331091 ],
         [ 0.5701512 , -1.2541753 , -0.04438412, ...,  2.0758948 ,
           0.643362  ,  1.123348  ],
         ...,
         [-0.21532154, -1.4785601 ,  1.1803253 , ...,  0.32798886,
           2.3431287 , -0.00900388],
         [-0.64016986,  1.2164553 , -0.3446033 , ..., -1.1892202 ,
           1.656369  ,  1.0801747 ],
         [-0.5322482 , -0.651551  ,  0.9174431 , ..., -0.5808687 ,
          -0.47183716, -0.94644105]],

        [[-2.646869  , -1.731143  , -0.9609738 , ..., -0.77767825,
          -3.2533236 ,  0.9756894 ],
         [-3.7241268 , -2.4583197 , -2.2532263 , ..., -0.404768  ,
           1.771375  , -1.2514061 ],
         [ 0.7666584 ,  1.3633256 ,  0.45095178, ...,  2.1597743 ,
          -0.11218891,  0.12454453],
         ...,
         [ 2.4224675 ,  0.25982374,  0.70966524, ..., -2.7982073 ,
          -0.57448304, -2.583325  ],
         [-0.24182197,  1.108262  , -0.37151372, ..., -0.8851418 ,
          -1.3057445 ,  0.70630586],
         [-3.574679  , -1.457258  ,  2.763192  , ...,  1.4075553 ,
          -0.94077396,  0.7425393 ]]]], dtype=float32), 'output_shape': TensorShape([1, 32, 28, 28]), 'from': [23], 'to': [14]}
tf node:
{'name': 'conv2d', 'output': array([[[[ -3.6886494 ,  -8.043549  , -14.520925  , ...,  -4.1050425 ,
           -4.8991284 ,  13.931927  ],
         [ -1.8656466 ,  -2.3047829 , -11.590841  , ...,  10.436393  ,
            6.1483107 ,  -0.6557194 ],
         [ -7.551699  ,  14.238659  ,   6.7874227 , ...,  -0.08335018,
           -9.236632  ,  -1.2081982 ],
         ...,
         [  5.934896  ,   0.8620382 ,  -2.9217794 , ...,  -8.262208  ,
            8.058576  ,  -6.754474  ],
         [-11.111702  ,   5.83409   ,   1.4995002 , ...,  -5.785153  ,
            2.1026392 ,   4.713547  ],
         [  1.5784502 ,   9.051576  ,   4.6057034 , ..., -20.898495  ,
           19.285088  ,   6.2848654 ]],

        [[ -3.6886494 ,  -8.043549  , -14.520925  , ...,  -4.1050425 ,
           -4.8991284 ,  13.931927  ],
         [ -1.8656466 ,  -2.3047829 , -11.590841  , ...,  10.436393  ,
            6.1483107 ,  -0.6557194 ],
         [ -7.551699  ,  14.238659  ,   6.7874227 , ...,  -0.08335018,
           -9.236632  ,  -1.2081982 ],
         ...,
         [  5.934896  ,   0.8620382 ,  -2.9217794 , ...,  -8.262208  ,
            8.058576  ,  -6.754474  ],
         [-11.111702  ,   5.83409   ,   1.4995002 , ...,  -5.785153  ,
            2.1026392 ,   4.713547  ],
         [  1.5784502 ,   9.051576  ,   4.6057034 , ..., -20.898495  ,
           19.285088  ,   6.2848654 ]],

        [[ -3.6886494 ,  -8.043549  , -14.520925  , ...,  -4.1050425 ,
           -4.8991284 ,  13.931927  ],
         [ -1.8656466 ,  -2.3047829 , -11.590841  , ...,  10.436393  ,
            6.1483107 ,  -0.6557194 ],
         [ -7.551699  ,  14.238659  ,   6.7874227 , ...,  -0.08335018,
           -9.236632  ,  -1.2081982 ],
         ...,
         [  5.934896  ,   0.8620382 ,  -2.9217794 , ...,  -8.262208  ,
            8.058576  ,  -6.754474  ],
         [-11.111702  ,   5.83409   ,   1.4995002 , ...,  -5.785153  ,
            2.1026392 ,   4.713547  ],
         [  1.5784502 ,   9.051576  ,   4.6057034 , ..., -20.898495  ,
           19.285088  ,   6.2848654 ]],

        ...,

        [[ -3.6886494 ,  -8.043549  , -14.520925  , ...,  -4.1050425 ,
           -4.8991284 ,  13.931927  ],
         [ -1.8656466 ,  -2.3047829 , -11.590841  , ...,  10.436393  ,
            6.1483107 ,  -0.6557194 ],
         [ -7.551699  ,  14.238659  ,   6.7874227 , ...,  -0.08335018,
           -9.236632  ,  -1.2081982 ],
         ...,
         [  5.934896  ,   0.8620382 ,  -2.9217794 , ...,  -8.262208  ,
            8.058576  ,  -6.754474  ],
         [-11.111702  ,   5.83409   ,   1.4995002 , ...,  -5.785153  ,
            2.1026392 ,   4.713547  ],
         [  1.5784502 ,   9.051576  ,   4.6057034 , ..., -20.898495  ,
           19.285088  ,   6.2848654 ]],

        [[ -3.6886494 ,  -8.043549  , -14.520925  , ...,  -4.1050425 ,
           -4.8991284 ,  13.931927  ],
         [ -1.8656466 ,  -2.3047829 , -11.590841  , ...,  10.436393  ,
            6.1483107 ,  -0.6557194 ],
         [ -7.551699  ,  14.238659  ,   6.7874227 , ...,  -0.08335018,
           -9.236632  ,  -1.2081982 ],
         ...,
         [  5.934896  ,   0.8620382 ,  -2.9217794 , ...,  -8.262208  ,
            8.058576  ,  -6.754474  ],
         [-11.111702  ,   5.83409   ,   1.4995002 , ...,  -5.785153  ,
            2.1026392 ,   4.713547  ],
         [  1.5784502 ,   9.051576  ,   4.6057034 , ..., -20.898495  ,
           19.285088  ,   6.2848654 ]],

        [[ -3.6886494 ,  -8.043549  , -14.520925  , ...,  -4.1050425 ,
           -4.8991284 ,  13.931927  ],
         [ -1.8656466 ,  -2.3047829 , -11.590841  , ...,  10.436393  ,
            6.1483107 ,  -0.6557194 ],
         [ -7.551699  ,  14.238659  ,   6.7874227 , ...,  -0.08335018,
           -9.236632  ,  -1.2081982 ],
         ...,
         [  5.934896  ,   0.8620382 ,  -2.9217794 , ...,  -8.262208  ,
            8.058576  ,  -6.754474  ],
         [-11.111702  ,   5.83409   ,   1.4995002 , ...,  -5.785153  ,
            2.1026392 ,   4.713547  ],
         [  1.5784502 ,   9.051576  ,   4.6057034 , ..., -20.898495  ,
           19.285088  ,   6.2848654 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 28, 28]), 'from': [22], 'to': [18]}
ms node:
{'name': 'conv2d', 'output': array([[[[ -3.6886494 ,  -8.043549  , -14.520925  , ...,  -4.1050425 ,
           -4.8991284 ,  13.931927  ],
         [ -1.8656466 ,  -2.3047829 , -11.590841  , ...,  10.436393  ,
            6.1483107 ,  -0.6557194 ],
         [ -7.551699  ,  14.238659  ,   6.7874227 , ...,  -0.08335018,
           -9.236632  ,  -1.2081982 ],
         ...,
         [  5.934896  ,   0.8620382 ,  -2.9217794 , ...,  -8.262208  ,
            8.058576  ,  -6.754474  ],
         [-11.111702  ,   5.83409   ,   1.4995002 , ...,  -5.785153  ,
            2.1026392 ,   4.713547  ],
         [  1.5784502 ,   9.051576  ,   4.6057034 , ..., -20.898495  ,
           19.285088  ,   6.2848654 ]],

        [[ -3.6886494 ,  -8.043549  , -14.520925  , ...,  -4.1050425 ,
           -4.8991284 ,  13.931927  ],
         [ -1.8656466 ,  -2.3047829 , -11.590841  , ...,  10.436393  ,
            6.1483107 ,  -0.6557194 ],
         [ -7.551699  ,  14.238659  ,   6.7874227 , ...,  -0.08335018,
           -9.236632  ,  -1.2081982 ],
         ...,
         [  5.934896  ,   0.8620382 ,  -2.9217794 , ...,  -8.262208  ,
            8.058576  ,  -6.754474  ],
         [-11.111702  ,   5.83409   ,   1.4995002 , ...,  -5.785153  ,
            2.1026392 ,   4.713547  ],
         [  1.5784502 ,   9.051576  ,   4.6057034 , ..., -20.898495  ,
           19.285088  ,   6.2848654 ]],

        [[ -3.6886494 ,  -8.043549  , -14.520925  , ...,  -4.1050425 ,
           -4.8991284 ,  13.931927  ],
         [ -1.8656466 ,  -2.3047829 , -11.590841  , ...,  10.436393  ,
            6.1483107 ,  -0.6557194 ],
         [ -7.551699  ,  14.238659  ,   6.7874227 , ...,  -0.08335018,
           -9.236632  ,  -1.2081982 ],
         ...,
         [  5.934896  ,   0.8620382 ,  -2.9217794 , ...,  -8.262208  ,
            8.058576  ,  -6.754474  ],
         [-11.111702  ,   5.83409   ,   1.4995002 , ...,  -5.785153  ,
            2.1026392 ,   4.713547  ],
         [  1.5784502 ,   9.051576  ,   4.6057034 , ..., -20.898495  ,
           19.285088  ,   6.2848654 ]],

        ...,

        [[ -3.6886494 ,  -8.043549  , -14.520925  , ...,  -4.1050425 ,
           -4.8991284 ,  13.931927  ],
         [ -1.8656466 ,  -2.3047829 , -11.590841  , ...,  10.436393  ,
            6.1483107 ,  -0.6557194 ],
         [ -7.551699  ,  14.238659  ,   6.7874227 , ...,  -0.08335018,
           -9.236632  ,  -1.2081982 ],
         ...,
         [  5.934896  ,   0.8620382 ,  -2.9217794 , ...,  -8.262208  ,
            8.058576  ,  -6.754474  ],
         [-11.111702  ,   5.83409   ,   1.4995002 , ...,  -5.785153  ,
            2.1026392 ,   4.713547  ],
         [  1.5784502 ,   9.051576  ,   4.6057034 , ..., -20.898495  ,
           19.285088  ,   6.2848654 ]],

        [[ -3.6886501 ,  -8.0435505 , -14.5209255 , ...,  -4.1050415 ,
           -4.899129  ,  13.931929  ],
         [ -1.8656476 ,  -2.3047824 , -11.590842  , ...,  10.43639   ,
            6.1483116 ,  -0.6557183 ],
         [ -7.551698  ,  14.238658  ,   6.7874207 , ...,  -0.08335161,
           -9.23663   ,  -1.2081982 ],
         ...,
         [  5.9348955 ,   0.8620384 ,  -2.9217775 , ...,  -8.262207  ,
            8.058573  ,  -6.754474  ],
         [-11.111701  ,   5.834091  ,   1.4995003 , ...,  -5.7851534 ,
            2.1026397 ,   4.7135477 ],
         [  1.5784492 ,   9.051578  ,   4.605704  , ..., -20.898497  ,
           19.28509   ,   6.2848644 ]],

        [[ -3.6886501 ,  -8.0435505 , -14.5209255 , ...,  -4.1050415 ,
           -4.899129  ,  13.931929  ],
         [ -1.8656476 ,  -2.3047824 , -11.590842  , ...,  10.43639   ,
            6.1483116 ,  -0.6557183 ],
         [ -7.551698  ,  14.238658  ,   6.7874207 , ...,  -0.08335161,
           -9.23663   ,  -1.2081982 ],
         ...,
         [  5.9348955 ,   0.8620384 ,  -2.9217775 , ...,  -8.262207  ,
            8.058573  ,  -6.754474  ],
         [-11.111701  ,   5.834091  ,   1.4995003 , ...,  -5.7851534 ,
            2.1026397 ,   4.7135477 ],
         [  1.5784492 ,   9.051578  ,   4.605704  , ..., -20.898497  ,
           19.28509   ,   6.2848644 ]]]], dtype=float32), 'output_shape': (1, 128, 28, 28), 'from': [22], 'to': [18]}
torch node:
{'name': 'conv2d', 'output': array([[[[ -3.6886494 ,  -8.043549  , -14.520925  , ...,  -4.1050425 ,
           -4.8991284 ,  13.931927  ],
         [ -1.8656466 ,  -2.3047829 , -11.590841  , ...,  10.436393  ,
            6.1483107 ,  -0.6557194 ],
         [ -7.551699  ,  14.238659  ,   6.7874227 , ...,  -0.08335018,
           -9.236632  ,  -1.2081982 ],
         ...,
         [  5.934896  ,   0.8620382 ,  -2.9217794 , ...,  -8.262208  ,
            8.058576  ,  -6.754474  ],
         [-11.111702  ,   5.83409   ,   1.4995002 , ...,  -5.785153  ,
            2.1026392 ,   4.713547  ],
         [  1.5784502 ,   9.051576  ,   4.6057034 , ..., -20.898495  ,
           19.285088  ,   6.2848654 ]],

        [[ -3.6886494 ,  -8.043549  , -14.520925  , ...,  -4.1050425 ,
           -4.8991284 ,  13.931927  ],
         [ -1.8656466 ,  -2.3047829 , -11.590841  , ...,  10.436393  ,
            6.1483107 ,  -0.6557194 ],
         [ -7.551699  ,  14.238659  ,   6.7874227 , ...,  -0.08335018,
           -9.236632  ,  -1.2081982 ],
         ...,
         [  5.934896  ,   0.8620382 ,  -2.9217794 , ...,  -8.262208  ,
            8.058576  ,  -6.754474  ],
         [-11.111702  ,   5.83409   ,   1.4995002 , ...,  -5.785153  ,
            2.1026392 ,   4.713547  ],
         [  1.5784502 ,   9.051576  ,   4.6057034 , ..., -20.898495  ,
           19.285088  ,   6.2848654 ]],

        [[ -3.6886494 ,  -8.043549  , -14.520925  , ...,  -4.1050425 ,
           -4.8991284 ,  13.931927  ],
         [ -1.8656466 ,  -2.3047829 , -11.590841  , ...,  10.436393  ,
            6.1483107 ,  -0.6557194 ],
         [ -7.551699  ,  14.238659  ,   6.7874227 , ...,  -0.08335018,
           -9.236632  ,  -1.2081982 ],
         ...,
         [  5.934896  ,   0.8620382 ,  -2.9217794 , ...,  -8.262208  ,
            8.058576  ,  -6.754474  ],
         [-11.111702  ,   5.83409   ,   1.4995002 , ...,  -5.785153  ,
            2.1026392 ,   4.713547  ],
         [  1.5784502 ,   9.051576  ,   4.6057034 , ..., -20.898495  ,
           19.285088  ,   6.2848654 ]],

        ...,

        [[ -3.6886494 ,  -8.043549  , -14.520925  , ...,  -4.1050425 ,
           -4.8991284 ,  13.931927  ],
         [ -1.8656466 ,  -2.3047829 , -11.590841  , ...,  10.436393  ,
            6.1483107 ,  -0.6557194 ],
         [ -7.551699  ,  14.238659  ,   6.7874227 , ...,  -0.08335018,
           -9.236632  ,  -1.2081982 ],
         ...,
         [  5.934896  ,   0.8620382 ,  -2.9217794 , ...,  -8.262208  ,
            8.058576  ,  -6.754474  ],
         [-11.111702  ,   5.83409   ,   1.4995002 , ...,  -5.785153  ,
            2.1026392 ,   4.713547  ],
         [  1.5784502 ,   9.051576  ,   4.6057034 , ..., -20.898495  ,
           19.285088  ,   6.2848654 ]],

        [[ -3.6886494 ,  -8.043549  , -14.520925  , ...,  -4.1050425 ,
           -4.8991284 ,  13.931927  ],
         [ -1.8656466 ,  -2.3047829 , -11.590841  , ...,  10.436393  ,
            6.1483107 ,  -0.6557194 ],
         [ -7.551699  ,  14.238659  ,   6.7874227 , ...,  -0.08335018,
           -9.236632  ,  -1.2081982 ],
         ...,
         [  5.934896  ,   0.8620382 ,  -2.9217794 , ...,  -8.262208  ,
            8.058576  ,  -6.754474  ],
         [-11.111702  ,   5.83409   ,   1.4995002 , ...,  -5.785153  ,
            2.1026392 ,   4.713547  ],
         [  1.5784502 ,   9.051576  ,   4.6057034 , ..., -20.898495  ,
           19.285088  ,   6.2848654 ]],

        [[ -3.6886494 ,  -8.043549  , -14.520925  , ...,  -4.1050425 ,
           -4.8991284 ,  13.931927  ],
         [ -1.8656466 ,  -2.3047829 , -11.590841  , ...,  10.436393  ,
            6.1483107 ,  -0.6557194 ],
         [ -7.551699  ,  14.238659  ,   6.7874227 , ...,  -0.08335018,
           -9.236632  ,  -1.2081982 ],
         ...,
         [  5.934896  ,   0.8620382 ,  -2.9217794 , ...,  -8.262208  ,
            8.058576  ,  -6.754474  ],
         [-11.111702  ,   5.83409   ,   1.4995002 , ...,  -5.785153  ,
            2.1026392 ,   4.713547  ],
         [  1.5784502 ,   9.051576  ,   4.6057034 , ..., -20.898495  ,
           19.285088  ,   6.2848654 ]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 28, 28]), 'from': [22], 'to': [18]}

generate models:55

analyse output arrays in iter:84

pre layer res:
2:conv2d
{'name': 'conv2d', 'output': array([[[[  9.442263 , 155.9033   ,   0.       , ...,   0.       ,
           77.62813  ,   0.       ],
         [  0.       ,  74.10594  ,   0.       , ...,   0.       ,
           71.55128  ,   0.       ],
         [ 57.63818  ,   0.       ,  88.27096  , ...,   2.2266524,
            0.       ,  71.35889  ],
         ...,
         [224.07327  , 233.56439  ,   0.       , ...,   0.       ,
            0.       , 112.396034 ],
         [  0.       , 169.07166  ,   0.       , ..., 121.725464 ,
            9.032446 ,   0.       ],
         [  0.       ,   0.       ,   0.       , ..., 140.74663  ,
            0.       ,  48.591064 ]],

        [[  9.442263 , 155.9033   ,   0.       , ...,   0.       ,
           77.62813  ,   0.       ],
         [  0.       ,  74.10594  ,   0.       , ...,   0.       ,
           71.55128  ,   0.       ],
         [ 57.63818  ,   0.       ,  88.27096  , ...,   2.2266524,
            0.       ,  71.35889  ],
         ...,
         [224.07327  , 233.56439  ,   0.       , ...,   0.       ,
            0.       , 112.396034 ],
         [  0.       , 169.07166  ,   0.       , ..., 121.725464 ,
            9.032446 ,   0.       ],
         [  0.       ,   0.       ,   0.       , ..., 140.74663  ,
            0.       ,  48.591064 ]],

        [[  9.442263 , 155.9033   ,   0.       , ...,   0.       ,
           77.62813  ,   0.       ],
         [  0.       ,  74.10594  ,   0.       , ...,   0.       ,
           71.55128  ,   0.       ],
         [ 57.63818  ,   0.       ,  88.27096  , ...,   2.2266524,
            0.       ,  71.35889  ],
         ...,
         [224.07327  , 233.56439  ,   0.       , ...,   0.       ,
            0.       , 112.396034 ],
         [  0.       , 169.07166  ,   0.       , ..., 121.725464 ,
            9.032446 ,   0.       ],
         [  0.       ,   0.       ,   0.       , ..., 140.74663  ,
            0.       ,  48.591064 ]],

        ...,

        [[  9.442263 , 155.9033   ,   0.       , ...,   0.       ,
           77.62813  ,   0.       ],
         [  0.       ,  74.10594  ,   0.       , ...,   0.       ,
           71.55128  ,   0.       ],
         [ 57.63818  ,   0.       ,  88.27096  , ...,   2.2266524,
            0.       ,  71.35889  ],
         ...,
         [224.07327  , 233.56439  ,   0.       , ...,   0.       ,
            0.       , 112.396034 ],
         [  0.       , 169.07166  ,   0.       , ..., 121.725464 ,
            9.032446 ,   0.       ],
         [  0.       ,   0.       ,   0.       , ..., 140.74663  ,
            0.       ,  48.591064 ]],

        [[  9.442263 , 155.9033   ,   0.       , ...,   0.       ,
           77.62813  ,   0.       ],
         [  0.       ,  74.10594  ,   0.       , ...,   0.       ,
           71.55128  ,   0.       ],
         [ 57.63818  ,   0.       ,  88.27096  , ...,   2.2266524,
            0.       ,  71.35889  ],
         ...,
         [224.07327  , 233.56439  ,   0.       , ...,   0.       ,
            0.       , 112.396034 ],
         [  0.       , 169.07166  ,   0.       , ..., 121.725464 ,
            9.032446 ,   0.       ],
         [  0.       ,   0.       ,   0.       , ..., 140.74663  ,
            0.       ,  48.591064 ]],

        [[  9.442263 , 155.9033   ,   0.       , ...,   0.       ,
           77.62813  ,   0.       ],
         [  0.       ,  74.10594  ,   0.       , ...,   0.       ,
           71.55128  ,   0.       ],
         [ 57.63818  ,   0.       ,  88.27096  , ...,   2.2266524,
            0.       ,  71.35889  ],
         ...,
         [224.07327  , 233.56439  ,   0.       , ...,   0.       ,
            0.       , 112.396034 ],
         [  0.       , 169.07166  ,   0.       , ..., 121.725464 ,
            9.032446 ,   0.       ],
         [  0.       ,   0.       ,   0.       , ..., 140.74663  ,
            0.       ,  48.591064 ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [1], 'to': [13]}
tf node:
{'name': 'sin', 'output': array([[[[-0.0174838 , -0.9232009 ,  0.        , ...,  0.        ,
           0.7905388 ,  0.        ],
         [ 0.        , -0.96146494,  0.        , ...,  0.        ,
           0.64830333,  0.        ],
         [ 0.8864011 ,  0.        ,  0.3015936 , ...,  0.7925262 ,
           0.        ,  0.78192276],
         ...,
         [-0.8522097 ,  0.8850194 ,  0.        , ...,  0.        ,
           0.        , -0.6452124 ],
         [ 0.        , -0.5432876 ,  0.        , ...,  0.71501786,
           0.3823443 ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.58513105,
           0.        , -0.99463606]],

        [[-0.0174838 , -0.9232009 ,  0.        , ...,  0.        ,
           0.7905388 ,  0.        ],
         [ 0.        , -0.96146494,  0.        , ...,  0.        ,
           0.64830333,  0.        ],
         [ 0.8864011 ,  0.        ,  0.3015936 , ...,  0.7925262 ,
           0.        ,  0.78192276],
         ...,
         [-0.8522097 ,  0.8850194 ,  0.        , ...,  0.        ,
           0.        , -0.6452124 ],
         [ 0.        , -0.5432876 ,  0.        , ...,  0.71501786,
           0.3823443 ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.58513105,
           0.        , -0.99463606]],

        [[-0.0174838 , -0.9232009 ,  0.        , ...,  0.        ,
           0.7905388 ,  0.        ],
         [ 0.        , -0.96146494,  0.        , ...,  0.        ,
           0.64830333,  0.        ],
         [ 0.8864011 ,  0.        ,  0.3015936 , ...,  0.7925262 ,
           0.        ,  0.78192276],
         ...,
         [-0.8522097 ,  0.8850194 ,  0.        , ...,  0.        ,
           0.        , -0.6452124 ],
         [ 0.        , -0.5432876 ,  0.        , ...,  0.71501786,
           0.3823443 ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.58513105,
           0.        , -0.99463606]],

        ...,

        [[-0.0174838 , -0.9232009 ,  0.        , ...,  0.        ,
           0.7905388 ,  0.        ],
         [ 0.        , -0.96146494,  0.        , ...,  0.        ,
           0.64830333,  0.        ],
         [ 0.8864011 ,  0.        ,  0.3015936 , ...,  0.7925262 ,
           0.        ,  0.78192276],
         ...,
         [-0.8522097 ,  0.8850194 ,  0.        , ...,  0.        ,
           0.        , -0.6452124 ],
         [ 0.        , -0.5432876 ,  0.        , ...,  0.71501786,
           0.3823443 ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.58513105,
           0.        , -0.99463606]],

        [[-0.0174838 , -0.9232009 ,  0.        , ...,  0.        ,
           0.7905388 ,  0.        ],
         [ 0.        , -0.96146494,  0.        , ...,  0.        ,
           0.64830333,  0.        ],
         [ 0.8864011 ,  0.        ,  0.3015936 , ...,  0.7925262 ,
           0.        ,  0.78192276],
         ...,
         [-0.8522097 ,  0.8850194 ,  0.        , ...,  0.        ,
           0.        , -0.6452124 ],
         [ 0.        , -0.5432876 ,  0.        , ...,  0.71501786,
           0.3823443 ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.58513105,
           0.        , -0.99463606]],

        [[-0.0174838 , -0.9232009 ,  0.        , ...,  0.        ,
           0.7905388 ,  0.        ],
         [ 0.        , -0.96146494,  0.        , ...,  0.        ,
           0.64830333,  0.        ],
         [ 0.8864011 ,  0.        ,  0.3015936 , ...,  0.7925262 ,
           0.        ,  0.78192276],
         ...,
         [-0.8522097 ,  0.8850194 ,  0.        , ...,  0.        ,
           0.        , -0.6452124 ],
         [ 0.        , -0.5432876 ,  0.        , ...,  0.71501786,
           0.3823443 ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.58513105,
           0.        , -0.99463606]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [2], 'to': [15]}
ms node:
{'name': 'sin', 'output': array([[[[-0.0174838 , -0.9232009 ,  0.        , ...,  0.        ,
           0.7905388 ,  0.        ],
         [ 0.        , -0.96146494,  0.        , ...,  0.        ,
           0.64830333,  0.        ],
         [ 0.8864011 ,  0.        ,  0.3015936 , ...,  0.7925262 ,
           0.        ,  0.78192276],
         ...,
         [-0.8522097 ,  0.8850194 ,  0.        , ...,  0.        ,
           0.        , -0.6452124 ],
         [ 0.        , -0.5432875 ,  0.        , ...,  0.71501786,
           0.3823443 ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.585131  ,
           0.        , -0.99463606]],

        [[-0.0174838 , -0.9232009 ,  0.        , ...,  0.        ,
           0.7905388 ,  0.        ],
         [ 0.        , -0.96146494,  0.        , ...,  0.        ,
           0.64830333,  0.        ],
         [ 0.8864011 ,  0.        ,  0.3015936 , ...,  0.7925262 ,
           0.        ,  0.78192276],
         ...,
         [-0.8522097 ,  0.8850194 ,  0.        , ...,  0.        ,
           0.        , -0.6452124 ],
         [ 0.        , -0.5432875 ,  0.        , ...,  0.71501786,
           0.3823443 ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.585131  ,
           0.        , -0.99463606]],

        [[-0.0174838 , -0.9232009 ,  0.        , ...,  0.        ,
           0.7905388 ,  0.        ],
         [ 0.        , -0.96146494,  0.        , ...,  0.        ,
           0.64830333,  0.        ],
         [ 0.8864011 ,  0.        ,  0.3015936 , ...,  0.7925262 ,
           0.        ,  0.78192276],
         ...,
         [-0.8522097 ,  0.8850194 ,  0.        , ...,  0.        ,
           0.        , -0.6452124 ],
         [ 0.        , -0.5432875 ,  0.        , ...,  0.71501786,
           0.3823443 ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.585131  ,
           0.        , -0.99463606]],

        ...,

        [[-0.0174838 , -0.9232009 ,  0.        , ...,  0.        ,
           0.7905388 ,  0.        ],
         [ 0.        , -0.96146494,  0.        , ...,  0.        ,
           0.64830333,  0.        ],
         [ 0.8864011 ,  0.        ,  0.3015936 , ...,  0.7925262 ,
           0.        ,  0.78192276],
         ...,
         [-0.8522097 ,  0.8850194 ,  0.        , ...,  0.        ,
           0.        , -0.6452124 ],
         [ 0.        , -0.5432875 ,  0.        , ...,  0.71501786,
           0.3823443 ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.585131  ,
           0.        , -0.99463606]],

        [[-0.01748475, -0.9232009 ,  0.        , ...,  0.        ,
           0.7905154 ,  0.        ],
         [ 0.        , -0.9614691 ,  0.        , ...,  0.        ,
           0.64830333,  0.        ],
         [ 0.8864011 ,  0.        ,  0.3015645 , ...,  0.7925272 ,
           0.        ,  0.78192276],
         ...,
         [-0.8522177 ,  0.884991  ,  0.        , ...,  0.        ,
           0.        , -0.6451891 ],
         [ 0.        , -0.5431979 ,  0.        , ...,  0.7150925 ,
           0.3823461 ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.5851558 ,
           0.        , -0.99463606]],

        [[-0.01748475, -0.9232009 ,  0.        , ...,  0.        ,
           0.7905154 ,  0.        ],
         [ 0.        , -0.9614691 ,  0.        , ...,  0.        ,
           0.64830333,  0.        ],
         [ 0.8864011 ,  0.        ,  0.3015645 , ...,  0.7925272 ,
           0.        ,  0.78192276],
         ...,
         [-0.8522177 ,  0.884991  ,  0.        , ...,  0.        ,
           0.        , -0.6451891 ],
         [ 0.        , -0.5431979 ,  0.        , ...,  0.7150925 ,
           0.3823461 ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.5851558 ,
           0.        , -0.99463606]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [2], 'to': [15]}
torch node:
{'name': 'sin', 'output': array([[[[-0.0174838 , -0.9232009 ,  0.        , ...,  0.        ,
           0.7905388 ,  0.        ],
         [ 0.        , -0.96146494,  0.        , ...,  0.        ,
           0.64830333,  0.        ],
         [ 0.8864011 ,  0.        ,  0.3015936 , ...,  0.7925262 ,
           0.        ,  0.78192276],
         ...,
         [-0.8522097 ,  0.8850194 ,  0.        , ...,  0.        ,
           0.        , -0.6452124 ],
         [ 0.        , -0.5432875 ,  0.        , ...,  0.71501786,
           0.3823443 ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.585131  ,
           0.        , -0.99463606]],

        [[-0.0174838 , -0.9232009 ,  0.        , ...,  0.        ,
           0.7905388 ,  0.        ],
         [ 0.        , -0.96146494,  0.        , ...,  0.        ,
           0.64830333,  0.        ],
         [ 0.8864011 ,  0.        ,  0.3015936 , ...,  0.7925262 ,
           0.        ,  0.78192276],
         ...,
         [-0.8522097 ,  0.8850194 ,  0.        , ...,  0.        ,
           0.        , -0.6452124 ],
         [ 0.        , -0.5432875 ,  0.        , ...,  0.71501786,
           0.3823443 ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.585131  ,
           0.        , -0.99463606]],

        [[-0.0174838 , -0.9232009 ,  0.        , ...,  0.        ,
           0.7905388 ,  0.        ],
         [ 0.        , -0.96146494,  0.        , ...,  0.        ,
           0.64830333,  0.        ],
         [ 0.8864011 ,  0.        ,  0.3015936 , ...,  0.7925262 ,
           0.        ,  0.78192276],
         ...,
         [-0.8522097 ,  0.8850194 ,  0.        , ...,  0.        ,
           0.        , -0.6452124 ],
         [ 0.        , -0.5432875 ,  0.        , ...,  0.71501786,
           0.3823443 ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.585131  ,
           0.        , -0.99463606]],

        ...,

        [[-0.0174838 , -0.9232009 ,  0.        , ...,  0.        ,
           0.7905388 ,  0.        ],
         [ 0.        , -0.96146494,  0.        , ...,  0.        ,
           0.64830333,  0.        ],
         [ 0.8864011 ,  0.        ,  0.3015936 , ...,  0.7925262 ,
           0.        ,  0.78192276],
         ...,
         [-0.8522097 ,  0.8850194 ,  0.        , ...,  0.        ,
           0.        , -0.6452124 ],
         [ 0.        , -0.5432875 ,  0.        , ...,  0.71501786,
           0.3823443 ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.585131  ,
           0.        , -0.99463606]],

        [[-0.0174838 , -0.9232009 ,  0.        , ...,  0.        ,
           0.7905388 ,  0.        ],
         [ 0.        , -0.96146494,  0.        , ...,  0.        ,
           0.64830333,  0.        ],
         [ 0.8864011 ,  0.        ,  0.3015936 , ...,  0.7925262 ,
           0.        ,  0.78192276],
         ...,
         [-0.8522097 ,  0.8850194 ,  0.        , ...,  0.        ,
           0.        , -0.6452124 ],
         [ 0.        , -0.5432875 ,  0.        , ...,  0.71501786,
           0.3823443 ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.585131  ,
           0.        , -0.99463606]],

        [[-0.0174838 , -0.9232009 ,  0.        , ...,  0.        ,
           0.7905388 ,  0.        ],
         [ 0.        , -0.96146494,  0.        , ...,  0.        ,
           0.64830333,  0.        ],
         [ 0.8864011 ,  0.        ,  0.3015936 , ...,  0.7925262 ,
           0.        ,  0.78192276],
         ...,
         [-0.8522097 ,  0.8850194 ,  0.        , ...,  0.        ,
           0.        , -0.6452124 ],
         [ 0.        , -0.5432875 ,  0.        , ...,  0.71501786,
           0.3823443 ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.585131  ,
           0.        , -0.99463606]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [2], 'to': [15]}

pre layer res:
26:cos
{'name': 'cos', 'output': array([[[[ 1.        ,  0.7664111 , -0.8251498 , ...,  1.        ,
           0.29303807,  1.        ],
         [ 0.84246385, -0.31919894,  0.99826276, ...,  1.        ,
          -0.8751217 ,  1.        ],
         [ 0.96532786,  1.        ,  0.8957971 , ...,  0.54444176,
           1.        , -0.90095055],
         ...,
         [-0.24810985, -0.30242255,  0.99207044, ...,  1.        ,
           1.        , -0.9741022 ],
         [ 1.        ,  0.1782475 ,  1.        , ...,  1.        ,
          -0.9977346 , -0.7877231 ],
         [ 1.        ,  1.        , -0.7188437 , ..., -0.46439567,
           1.        ,  0.11224688]],

        [[ 1.        ,  0.7579119 ,  1.        , ...,  1.        ,
           0.06061063,  1.        ],
         [-0.58562475, -0.9510189 ,  0.8033322 , ...,  1.        ,
           0.35415468, -0.5633431 ],
         [-0.7257806 ,  1.        ,  0.6101629 , ..., -0.9050396 ,
          -0.6882657 ,  1.        ],
         ...,
         [ 0.8254824 , -0.15150003,  1.        , ...,  1.        ,
           1.        , -0.92250764],
         [ 1.        , -0.8710451 ,  1.        , ..., -0.13224153,
           0.1866971 ,  0.35843155],
         [ 0.98464465,  1.        , -0.9765835 , ..., -0.9858122 ,
           0.53063697, -0.9843267 ]],

        [[ 1.        , -0.72151065,  1.        , ...,  1.        ,
          -0.09621541,  1.        ],
         [ 0.98526233, -0.518631  ,  0.03885484, ...,  1.        ,
          -0.92541903, -0.327731  ],
         [-0.7001713 ,  1.        ,  0.88197535, ...,  1.        ,
          -0.70930594,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]],

        ...,

        [[ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [3], 'to': [27]}
tf node:
{'name': 'log', 'output': array([[[[ 0.0000000e+00, -2.6603654e-01,            nan, ...,
           0.0000000e+00, -1.2274528e+00,  0.0000000e+00],
         [-1.7142452e-01,            nan, -1.7387477e-03, ...,
           0.0000000e+00,            nan,  0.0000000e+00],
         [-3.5287485e-02,  0.0000000e+00, -1.1004137e-01, ...,
          -6.0799432e-01,  0.0000000e+00,            nan],
         ...,
         [           nan,            nan, -7.9611698e-03, ...,
           0.0000000e+00,  0.0000000e+00,            nan],
         [ 0.0000000e+00, -1.7245823e+00,  0.0000000e+00, ...,
           0.0000000e+00,            nan,            nan],
         [ 0.0000000e+00,  0.0000000e+00,            nan, ...,
                     nan,  0.0000000e+00, -2.1870546e+00]],

        [[ 0.0000000e+00, -2.7718809e-01,  0.0000000e+00, ...,
           0.0000000e+00, -2.8032851e+00,  0.0000000e+00],
         [           nan,            nan, -2.1898694e-01, ...,
           0.0000000e+00, -1.0380216e+00,            nan],
         [           nan,  0.0000000e+00, -4.9402928e-01, ...,
                     nan,            nan,  0.0000000e+00],
         ...,
         [-1.9178730e-01,            nan,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,            nan],
         [ 0.0000000e+00,            nan,  0.0000000e+00, ...,
                     nan, -1.6782677e+00, -1.0260175e+00],
         [-1.5474463e-02,  0.0000000e+00,            nan, ...,
                     nan, -6.3367718e-01,            nan]],

        [[ 0.0000000e+00,            nan,  0.0000000e+00, ...,
           0.0000000e+00,            nan,  0.0000000e+00],
         [-1.4847344e-02,            nan, -3.2479227e+00, ...,
           0.0000000e+00,            nan,            nan],
         [           nan,  0.0000000e+00, -1.2559117e-01, ...,
           0.0000000e+00,            nan,  0.0000000e+00],
         ...,
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        ...,

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         ...,
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         ...,
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         ...,
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [26], 'to': [4]}
ms node:
{'name': 'log', 'output': array([[[[-1.4305115e-06, -2.6603875e-01,            nan, ...,
          -1.4305115e-06, -1.2274542e+00, -1.4305115e-06],
         [-1.7142788e-01,            nan, -1.7401782e-03, ...,
          -1.4305115e-06,            nan, -1.4305115e-06],
         [-3.5287462e-02, -1.4305115e-06, -1.1004230e-01, ...,
          -6.0799712e-01, -1.4305115e-06,            nan],
         ...,
         [           nan,            nan, -7.9626003e-03, ...,
          -1.4305115e-06, -1.4305115e-06,            nan],
         [-1.4305115e-06, -1.7245795e+00, -1.4305115e-06, ...,
          -1.4305115e-06,            nan,            nan],
         [-1.4305115e-06, -1.4305115e-06,            nan, ...,
                     nan, -1.4305115e-06, -2.1870556e+00]],

        [[-1.4305115e-06, -2.7719033e-01, -1.4305115e-06, ...,
          -1.4305115e-06, -2.8032866e+00, -1.4305115e-06],
         [           nan,            nan, -2.1898943e-01, ...,
          -1.4305115e-06, -1.0380187e+00,            nan],
         [           nan, -1.4305115e-06, -4.9402848e-01, ...,
                     nan,            nan, -1.4305115e-06],
         ...,
         [-1.9178978e-01,            nan, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06,            nan],
         [-1.4305115e-06,            nan, -1.4305115e-06, ...,
                     nan, -1.6782678e+00, -1.0260141e+00],
         [-1.5475893e-02, -1.4305115e-06,            nan, ...,
                     nan, -6.3367379e-01,            nan]],

        [[-1.4305115e-06,            nan, -1.4305115e-06, ...,
          -1.4305115e-06,            nan, -1.4305115e-06],
         [-1.4848714e-02,            nan, -3.2479217e+00, ...,
          -1.4305115e-06,            nan,            nan],
         [           nan, -1.4305115e-06, -1.2559189e-01, ...,
          -1.4305115e-06,            nan, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        ...,

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]]]],
      dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [26], 'to': [4]}
torch node:
{'name': 'log', 'output': array([[[[ 0.00000000e+00, -2.66036540e-01,             nan, ...,
           0.00000000e+00, -1.22745275e+00,  0.00000000e+00],
         [-1.71424598e-01,             nan, -1.73874770e-03, ...,
           0.00000000e+00,             nan,  0.00000000e+00],
         [-3.52874249e-02,  0.00000000e+00, -1.10041305e-01, ...,
          -6.07994199e-01,  0.00000000e+00,             nan],
         ...,
         [            nan,             nan, -7.96116982e-03, ...,
           0.00000000e+00,  0.00000000e+00,             nan],
         [ 0.00000000e+00, -1.72458220e+00,  0.00000000e+00, ...,
           0.00000000e+00,             nan,             nan],
         [ 0.00000000e+00,  0.00000000e+00,             nan, ...,
                      nan,  0.00000000e+00, -2.18705463e+00]],

        [[ 0.00000000e+00, -2.77188092e-01,  0.00000000e+00, ...,
           0.00000000e+00, -2.80328488e+00,  0.00000000e+00],
         [            nan,             nan, -2.18987018e-01, ...,
           0.00000000e+00, -1.03802156e+00,             nan],
         [            nan,  0.00000000e+00, -4.94029284e-01, ...,
                      nan,             nan,  0.00000000e+00],
         ...,
         [-1.91787377e-01,             nan,  0.00000000e+00, ...,
           0.00000000e+00,  0.00000000e+00,             nan],
         [ 0.00000000e+00,             nan,  0.00000000e+00, ...,
                      nan, -1.67826772e+00, -1.02601695e+00],
         [-1.54744629e-02,  0.00000000e+00,             nan, ...,
                      nan, -6.33677185e-01,             nan]],

        [[ 0.00000000e+00,             nan,  0.00000000e+00, ...,
           0.00000000e+00,             nan,  0.00000000e+00],
         [-1.48472833e-02,             nan, -3.24792266e+00, ...,
           0.00000000e+00,             nan,             nan],
         [            nan,  0.00000000e+00, -1.25590891e-01, ...,
           0.00000000e+00,             nan,  0.00000000e+00],
         ...,
         [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00, ...,
           0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
         [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00, ...,
           0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
         [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00, ...,
           0.00000000e+00,  0.00000000e+00,  0.00000000e+00]],

        ...,

        [[ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00, ...,
           0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
         [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00, ...,
           0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
         [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00, ...,
           0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
         ...,
         [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00, ...,
           0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
         [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00, ...,
           0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
         [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00, ...,
           0.00000000e+00,  0.00000000e+00,  0.00000000e+00]],

        [[ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00, ...,
           0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
         [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00, ...,
           0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
         [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00, ...,
           0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
         ...,
         [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00, ...,
           0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
         [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00, ...,
           0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
         [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00, ...,
           0.00000000e+00,  0.00000000e+00,  0.00000000e+00]],

        [[ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00, ...,
           0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
         [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00, ...,
           0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
         [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00, ...,
           0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
         ...,
         [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00, ...,
           0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
         [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00, ...,
           0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
         [ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00, ...,
           0.00000000e+00,  0.00000000e+00,  0.00000000e+00]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [26], 'to': [4]}

generate models:78

analyse output arrays in iter:88

pre layer res:
27:transpose
{'name': 'transpose', 'output': array([[[[-3.5762587 , -0.6549378 ,  1.8838745 , ...,  0.29287422,
          -0.42134237,  4.427178  ],
         [ 2.5332878 , -0.5092608 ,  1.6409698 , ..., -2.3656962 ,
          -2.2411578 , -0.7089162 ],
         [-1.5978779 ,  3.5311253 ,  3.2508965 , ...,  1.5254519 ,
           1.3327389 , -0.1023272 ],
         ...,
         [ 2.8095722 , -1.5908444 , -0.1711991 , ...,  1.7660568 ,
          -0.9823374 , -0.04899353],
         [-0.08688465,  1.3410631 , -0.46805972, ...,  2.7077136 ,
          -0.45122504,  1.8335987 ],
         [ 1.6056044 ,  1.180705  ,  0.03955197, ..., -0.9412108 ,
           4.6478167 ,  1.0401042 ]],

        [[-3.5762587 , -0.6549378 ,  1.8838745 , ...,  0.29287422,
          -0.42134237,  4.427178  ],
         [ 2.5332878 , -0.5092608 ,  1.6409698 , ..., -2.3656962 ,
          -2.2411578 , -0.7089162 ],
         [-1.5978779 ,  3.5311253 ,  3.2508965 , ...,  1.5254519 ,
           1.3327389 , -0.1023272 ],
         ...,
         [ 2.8095722 , -1.5908444 , -0.1711991 , ...,  1.7660568 ,
          -0.9823374 , -0.04899353],
         [-0.08688465,  1.3410631 , -0.46805972, ...,  2.7077136 ,
          -0.45122504,  1.8335987 ],
         [ 1.6056044 ,  1.180705  ,  0.03955197, ..., -0.9412108 ,
           4.6478167 ,  1.0401042 ]],

        [[-3.5762587 , -0.6549378 ,  1.8838745 , ...,  0.29287422,
          -0.42134237,  4.427178  ],
         [ 2.5332878 , -0.5092608 ,  1.6409698 , ..., -2.3656962 ,
          -2.2411578 , -0.7089162 ],
         [-1.5978779 ,  3.5311253 ,  3.2508965 , ...,  1.5254519 ,
           1.3327389 , -0.1023272 ],
         ...,
         [ 2.8095722 , -1.5908444 , -0.1711991 , ...,  1.7660568 ,
          -0.9823374 , -0.04899353],
         [-0.08688465,  1.3410631 , -0.46805972, ...,  2.7077136 ,
          -0.45122504,  1.8335987 ],
         [ 1.6056044 ,  1.180705  ,  0.03955197, ..., -0.9412108 ,
           4.6478167 ,  1.0401042 ]],

        ...,

        [[-3.5762587 , -0.6549378 ,  1.8838745 , ...,  0.29287422,
          -0.42134237,  4.427178  ],
         [ 2.5332878 , -0.5092608 ,  1.6409698 , ..., -2.3656962 ,
          -2.2411578 , -0.7089162 ],
         [-1.5978779 ,  3.5311253 ,  3.2508965 , ...,  1.5254519 ,
           1.3327389 , -0.1023272 ],
         ...,
         [ 2.8095722 , -1.5908444 , -0.1711991 , ...,  1.7660568 ,
          -0.9823374 , -0.04899353],
         [-0.08688465,  1.3410631 , -0.46805972, ...,  2.7077136 ,
          -0.45122504,  1.8335987 ],
         [ 1.6056044 ,  1.180705  ,  0.03955197, ..., -0.9412108 ,
           4.6478167 ,  1.0401042 ]],

        [[-3.5762587 , -0.6549378 ,  1.8838745 , ...,  0.29287422,
          -0.42134237,  4.427178  ],
         [ 2.5332878 , -0.5092608 ,  1.6409698 , ..., -2.3656962 ,
          -2.2411578 , -0.7089162 ],
         [-1.5978779 ,  3.5311253 ,  3.2508965 , ...,  1.5254519 ,
           1.3327389 , -0.1023272 ],
         ...,
         [ 2.8095722 , -1.5908444 , -0.1711991 , ...,  1.7660568 ,
          -0.9823374 , -0.04899353],
         [-0.08688465,  1.3410631 , -0.46805972, ...,  2.7077136 ,
          -0.45122504,  1.8335987 ],
         [ 1.6056044 ,  1.180705  ,  0.03955197, ..., -0.9412108 ,
           4.6478167 ,  1.0401042 ]],

        [[-3.5762587 , -0.6549378 ,  1.8838745 , ...,  0.29287422,
          -0.42134237,  4.427178  ],
         [ 2.5332878 , -0.5092608 ,  1.6409698 , ..., -2.3656962 ,
          -2.2411578 , -0.7089162 ],
         [-1.5978779 ,  3.5311253 ,  3.2508965 , ...,  1.5254519 ,
           1.3327389 , -0.1023272 ],
         ...,
         [ 2.8095722 , -1.5908444 , -0.1711991 , ...,  1.7660568 ,
          -0.9823374 , -0.04899353],
         [-0.08688465,  1.3410631 , -0.46805972, ...,  2.7077136 ,
          -0.45122504,  1.8335987 ],
         [ 1.6056044 ,  1.180705  ,  0.03955197, ..., -0.9412108 ,
           4.6478167 ,  1.0401042 ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [28], 'to': [17]}
tf node:
{'name': 'log', 'output': array([[[[        nan,         nan,  0.6333306 , ..., -1.2280121 ,
                  nan,  1.4877623 ],
         [ 0.929518  ,         nan,  0.4952874 , ...,         nan,
                  nan,         nan],
         [        nan,  1.2616166 ,  1.1789308 , ...,  0.42229068,
           0.28723612,         nan],
         ...,
         [ 1.0330322 ,         nan,         nan, ...,  0.56874925,
                  nan,         nan],
         [        nan,  0.2934627 ,         nan, ...,  0.9961046 ,
                  nan,  0.60628057],
         [ 0.47350025,  0.16611168, -3.2301397 , ...,         nan,
           1.5363976 ,  0.03932085]],

        [[        nan,         nan,  0.6333306 , ..., -1.2280121 ,
                  nan,  1.4877623 ],
         [ 0.929518  ,         nan,  0.4952874 , ...,         nan,
                  nan,         nan],
         [        nan,  1.2616166 ,  1.1789308 , ...,  0.42229068,
           0.28723612,         nan],
         ...,
         [ 1.0330322 ,         nan,         nan, ...,  0.56874925,
                  nan,         nan],
         [        nan,  0.2934627 ,         nan, ...,  0.9961046 ,
                  nan,  0.60628057],
         [ 0.47350025,  0.16611168, -3.2301397 , ...,         nan,
           1.5363976 ,  0.03932085]],

        [[        nan,         nan,  0.6333306 , ..., -1.2280121 ,
                  nan,  1.4877623 ],
         [ 0.929518  ,         nan,  0.4952874 , ...,         nan,
                  nan,         nan],
         [        nan,  1.2616166 ,  1.1789308 , ...,  0.42229068,
           0.28723612,         nan],
         ...,
         [ 1.0330322 ,         nan,         nan, ...,  0.56874925,
                  nan,         nan],
         [        nan,  0.2934627 ,         nan, ...,  0.9961046 ,
                  nan,  0.60628057],
         [ 0.47350025,  0.16611168, -3.2301397 , ...,         nan,
           1.5363976 ,  0.03932085]],

        ...,

        [[        nan,         nan,  0.6333306 , ..., -1.2280121 ,
                  nan,  1.4877623 ],
         [ 0.929518  ,         nan,  0.4952874 , ...,         nan,
                  nan,         nan],
         [        nan,  1.2616166 ,  1.1789308 , ...,  0.42229068,
           0.28723612,         nan],
         ...,
         [ 1.0330322 ,         nan,         nan, ...,  0.56874925,
                  nan,         nan],
         [        nan,  0.2934627 ,         nan, ...,  0.9961046 ,
                  nan,  0.60628057],
         [ 0.47350025,  0.16611168, -3.2301397 , ...,         nan,
           1.5363976 ,  0.03932085]],

        [[        nan,         nan,  0.6333306 , ..., -1.2280121 ,
                  nan,  1.4877623 ],
         [ 0.929518  ,         nan,  0.4952874 , ...,         nan,
                  nan,         nan],
         [        nan,  1.2616166 ,  1.1789308 , ...,  0.42229068,
           0.28723612,         nan],
         ...,
         [ 1.0330322 ,         nan,         nan, ...,  0.56874925,
                  nan,         nan],
         [        nan,  0.2934627 ,         nan, ...,  0.9961046 ,
                  nan,  0.60628057],
         [ 0.47350025,  0.16611168, -3.2301397 , ...,         nan,
           1.5363976 ,  0.03932085]],

        [[        nan,         nan,  0.6333306 , ..., -1.2280121 ,
                  nan,  1.4877623 ],
         [ 0.929518  ,         nan,  0.4952874 , ...,         nan,
                  nan,         nan],
         [        nan,  1.2616166 ,  1.1789308 , ...,  0.42229068,
           0.28723612,         nan],
         ...,
         [ 1.0330322 ,         nan,         nan, ...,  0.56874925,
                  nan,         nan],
         [        nan,  0.2934627 ,         nan, ...,  0.9961046 ,
                  nan,  0.60628057],
         [ 0.47350025,  0.16611168, -3.2301397 , ...,         nan,
           1.5363976 ,  0.03932085]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [27], 'to': [1]}
ms node:
{'name': 'log', 'output': array([[[[        nan,         nan,  0.6333306 , ..., -1.2280135 ,
                  nan,  1.4877629 ],
         [ 0.9295208 ,         nan,  0.49528497, ...,         nan,
                  nan,         nan],
         [        nan,  1.2616156 ,  1.1789284 , ...,  0.42228848,
           0.28723422,         nan],
         ...,
         [ 1.033035  ,         nan,         nan, ...,  0.5687483 ,
                  nan,         nan],
         [        nan,  0.29346076,         nan, ...,  0.9961027 ,
                  nan,  0.60627955],
         [ 0.47349787,  0.1661102 , -3.2301369 , ...,         nan,
           1.5363961 ,  0.03932426]],

        [[        nan,         nan,  0.6333306 , ..., -1.2280135 ,
                  nan,  1.4877629 ],
         [ 0.9295208 ,         nan,  0.49528497, ...,         nan,
                  nan,         nan],
         [        nan,  1.2616156 ,  1.1789284 , ...,  0.42228848,
           0.28723422,         nan],
         ...,
         [ 1.033035  ,         nan,         nan, ...,  0.5687483 ,
                  nan,         nan],
         [        nan,  0.29346076,         nan, ...,  0.9961027 ,
                  nan,  0.60627955],
         [ 0.47349787,  0.1661102 , -3.2301369 , ...,         nan,
           1.5363961 ,  0.03932426]],

        [[        nan,         nan,  0.6333306 , ..., -1.2280135 ,
                  nan,  1.4877629 ],
         [ 0.9295208 ,         nan,  0.49528497, ...,         nan,
                  nan,         nan],
         [        nan,  1.2616156 ,  1.1789284 , ...,  0.42228848,
           0.28723422,         nan],
         ...,
         [ 1.033035  ,         nan,         nan, ...,  0.5687483 ,
                  nan,         nan],
         [        nan,  0.29346076,         nan, ...,  0.9961027 ,
                  nan,  0.60627955],
         [ 0.47349787,  0.1661102 , -3.2301369 , ...,         nan,
           1.5363961 ,  0.03932426]],

        ...,

        [[        nan,         nan,  0.6333306 , ..., -1.2280135 ,
                  nan,  1.4877629 ],
         [ 0.9295208 ,         nan,  0.49528497, ...,         nan,
                  nan,         nan],
         [        nan,  1.2616156 ,  1.1789284 , ...,  0.42228848,
           0.28723422,         nan],
         ...,
         [ 1.033035  ,         nan,         nan, ...,  0.5687483 ,
                  nan,         nan],
         [        nan,  0.29346076,         nan, ...,  0.9961027 ,
                  nan,  0.60627955],
         [ 0.47349787,  0.1661102 , -3.2301369 , ...,         nan,
           1.5363961 ,  0.03932426]],

        [[        nan,         nan,  0.6333306 , ..., -1.2280135 ,
                  nan,  1.4877629 ],
         [ 0.9295208 ,         nan,  0.49528497, ...,         nan,
                  nan,         nan],
         [        nan,  1.2616156 ,  1.1789284 , ...,  0.42228848,
           0.28723422,         nan],
         ...,
         [ 1.033035  ,         nan,         nan, ...,  0.5687483 ,
                  nan,         nan],
         [        nan,  0.29346076,         nan, ...,  0.9961027 ,
                  nan,  0.60627955],
         [ 0.47349787,  0.1661102 , -3.2301369 , ...,         nan,
           1.5363961 ,  0.03932426]],

        [[        nan,         nan,  0.6333306 , ..., -1.2280135 ,
                  nan,  1.4877629 ],
         [ 0.9295208 ,         nan,  0.49528497, ...,         nan,
                  nan,         nan],
         [        nan,  1.2616156 ,  1.1789284 , ...,  0.42228848,
           0.28723422,         nan],
         ...,
         [ 1.033035  ,         nan,         nan, ...,  0.5687483 ,
                  nan,         nan],
         [        nan,  0.29346076,         nan, ...,  0.9961027 ,
                  nan,  0.60627955],
         [ 0.47349787,  0.1661102 , -3.2301369 , ...,         nan,
           1.5363961 ,  0.03932426]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [27], 'to': [1]}
torch node:
{'name': 'log', 'output': array([[[[        nan,         nan,  0.6333306 , ..., -1.2280121 ,
                  nan,  1.4877623 ],
         [ 0.929518  ,         nan,  0.4952874 , ...,         nan,
                  nan,         nan],
         [        nan,  1.2616166 ,  1.1789308 , ...,  0.4222907 ,
           0.28723612,         nan],
         ...,
         [ 1.0330322 ,         nan,         nan, ...,  0.56874925,
                  nan,         nan],
         [        nan,  0.2934627 ,         nan, ...,  0.9961046 ,
                  nan,  0.60628057],
         [ 0.47350025,  0.16611168, -3.2301397 , ...,         nan,
           1.5363976 ,  0.03932085]],

        [[        nan,         nan,  0.6333306 , ..., -1.2280121 ,
                  nan,  1.4877623 ],
         [ 0.929518  ,         nan,  0.4952874 , ...,         nan,
                  nan,         nan],
         [        nan,  1.2616166 ,  1.1789308 , ...,  0.4222907 ,
           0.28723612,         nan],
         ...,
         [ 1.0330322 ,         nan,         nan, ...,  0.56874925,
                  nan,         nan],
         [        nan,  0.2934627 ,         nan, ...,  0.9961046 ,
                  nan,  0.60628057],
         [ 0.47350025,  0.16611168, -3.2301397 , ...,         nan,
           1.5363976 ,  0.03932085]],

        [[        nan,         nan,  0.6333306 , ..., -1.2280121 ,
                  nan,  1.4877623 ],
         [ 0.929518  ,         nan,  0.4952874 , ...,         nan,
                  nan,         nan],
         [        nan,  1.2616166 ,  1.1789308 , ...,  0.4222907 ,
           0.28723612,         nan],
         ...,
         [ 1.0330322 ,         nan,         nan, ...,  0.56874925,
                  nan,         nan],
         [        nan,  0.2934627 ,         nan, ...,  0.9961046 ,
                  nan,  0.60628057],
         [ 0.47350025,  0.16611168, -3.2301397 , ...,         nan,
           1.5363976 ,  0.03932085]],

        ...,

        [[        nan,         nan,  0.6333306 , ..., -1.2280121 ,
                  nan,  1.4877623 ],
         [ 0.929518  ,         nan,  0.4952874 , ...,         nan,
                  nan,         nan],
         [        nan,  1.2616166 ,  1.1789308 , ...,  0.4222907 ,
           0.28723612,         nan],
         ...,
         [ 1.0330322 ,         nan,         nan, ...,  0.56874925,
                  nan,         nan],
         [        nan,  0.2934627 ,         nan, ...,  0.9961046 ,
                  nan,  0.60628057],
         [ 0.47350025,  0.16611168, -3.2301397 , ...,         nan,
           1.5363976 ,  0.03932085]],

        [[        nan,         nan,  0.6333306 , ..., -1.2280121 ,
                  nan,  1.4877623 ],
         [ 0.929518  ,         nan,  0.4952874 , ...,         nan,
                  nan,         nan],
         [        nan,  1.2616166 ,  1.1789308 , ...,  0.4222907 ,
           0.28723612,         nan],
         ...,
         [ 1.0330322 ,         nan,         nan, ...,  0.56874925,
                  nan,         nan],
         [        nan,  0.2934627 ,         nan, ...,  0.9961046 ,
                  nan,  0.60628057],
         [ 0.47350025,  0.16611168, -3.2301397 , ...,         nan,
           1.5363976 ,  0.03932085]],

        [[        nan,         nan,  0.6333306 , ..., -1.2280121 ,
                  nan,  1.4877623 ],
         [ 0.929518  ,         nan,  0.4952874 , ...,         nan,
                  nan,         nan],
         [        nan,  1.2616166 ,  1.1789308 , ...,  0.4222907 ,
           0.28723612,         nan],
         ...,
         [ 1.0330322 ,         nan,         nan, ...,  0.56874925,
                  nan,         nan],
         [        nan,  0.2934627 ,         nan, ...,  0.9961046 ,
                  nan,  0.60628057],
         [ 0.47350025,  0.16611168, -3.2301397 , ...,         nan,
           1.5363976 ,  0.03932085]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [27], 'to': [1]}

generate models:82

analyse output arrays in iter:89

pre layer res:
11:log
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [8], 'to': [9]}
tf node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        ...,

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [11], 'to': [13]}
ms node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        ...,

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': (1, 128, 8, 8), 'from': [11], 'to': [13]}
torch node:
{'name': 'maxpool2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 8, 8]), 'from': [11], 'to': [13]}

generate models:83

analyse output arrays in iter:94

pre layer res:
6:relu
{'name': 'relu', 'output': array([[[[           inf,            inf,            inf, ...,
                     inf,            inf,            inf],
         [           inf,            inf,            inf, ...,
                     inf,            inf,            inf],
         [           inf,            inf,            inf, ...,
                     inf,            inf, 1.00000000e+00],
         ...,
         [           inf, 5.58876562e+00,            inf, ...,
                     inf,            inf,            inf],
         [           inf,            inf,            inf, ...,
                     inf,            inf,            inf],
         [           inf,            inf,            inf, ...,
                     inf,            inf,            inf]],

        [[           inf,            inf,            inf, ...,
                     inf,            inf,            inf],
         [           inf,            inf,            inf, ...,
                     inf,            inf,            inf],
         [           inf,            inf,            inf, ...,
                     inf,            inf,            inf],
         ...,
         [           inf,            inf,            inf, ...,
                     inf,            inf,            inf],
         [           inf,            inf,            inf, ...,
                     inf, 6.96808853e+01,            inf],
         [           inf,            inf,            inf, ...,
                     inf, 3.83045425e+01,            inf]],

        [[           inf,            inf,            inf, ...,
                     inf,            inf,            inf],
         [           inf,            inf,            inf, ...,
                     inf,            inf,            inf],
         [           inf,            inf,            inf, ...,
                     inf,            inf,            inf],
         ...,
         [           inf,            inf,            inf, ...,
                     inf, 9.19891938e+05,            inf],
         [           inf,            inf, 1.00000000e+00, ...,
                     inf,            inf,            inf],
         [1.00000000e+00,            inf,            inf, ...,
                     inf,            inf,            inf]],

        ...,

        [[0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          2.02385616e+01, 1.97383995e+01, 0.00000000e+00],
         [2.56123333e+01, 6.95307541e+01, 1.13102089e+02, ...,
          0.00000000e+00, 2.41325180e+02, 0.00000000e+00],
         [0.00000000e+00, 7.66468124e+01, 9.33188553e+01, ...,
          0.00000000e+00, 8.17321777e-01, 1.90043915e+02],
         ...,
         [1.03999390e+02, 1.31590698e+02, 7.49475479e+01, ...,
          0.00000000e+00, 0.00000000e+00, 2.08711884e+02],
         [0.00000000e+00, 8.60892181e+01, 2.79512604e+02, ...,
          1.86980377e+02, 6.86808853e+01, 5.33117104e+01],
         [1.26370575e+02, 0.00000000e+00, 1.38627481e+01, ...,
          0.00000000e+00, 3.73045425e+01, 6.47116776e+01]],

        [[1.43684586e+02, 0.00000000e+00, 0.00000000e+00, ...,
          5.77854156e+01, 0.00000000e+00, 7.04194870e+01],
         [1.60535172e+02, 2.51263657e+02, 0.00000000e+00, ...,
          0.00000000e+00, 1.16133659e+02, 2.70940155e+02],
         [6.69072189e+01, 1.00072632e+02, 0.00000000e+00, ...,
          8.87421951e+01, 0.00000000e+00, 0.00000000e+00],
         ...,
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          1.18573618e+01, 1.90349941e+01, 1.35305038e+02],
         [1.18879402e+02, 0.00000000e+00, 0.00000000e+00, ...,
          0.00000000e+00, 1.58821960e+02, 6.50229740e+00],
         [0.00000000e+00, 0.00000000e+00, 2.56029148e+01, ...,
          0.00000000e+00, 0.00000000e+00, 2.42392639e+02]],

        [[0.00000000e+00, 0.00000000e+00, 1.82159821e+02, ...,
          0.00000000e+00, 1.70377640e+02, 0.00000000e+00],
         [0.00000000e+00, 1.68728790e+02, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 3.43483925e+01],
         [0.00000000e+00, 1.51300201e+02, 7.29527969e+01, ...,
          1.08591339e+02, 0.00000000e+00, 0.00000000e+00],
         ...,
         [0.00000000e+00, 1.69992157e+02, 0.00000000e+00, ...,
          5.22883987e+00, 0.00000000e+00, 1.83144516e+02],
         [0.00000000e+00, 1.21424942e+02, 0.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [0.00000000e+00, 0.00000000e+00, 3.63826523e+01, ...,
          1.62214249e+02, 3.70757103e+01, 8.94137344e+01]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [17], 'to': [22]}
tf node:
{'name': 'cos', 'output': array([[[[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,  0.5403023 ],
         ...,
         [        nan,  0.7684252 ,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
           0.84413487,         nan],
         [        nan,         nan,         nan, ...,         nan,
           0.82225704,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
          -0.5825041 ,         nan],
         [        nan,         nan,  0.5403023 , ...,         nan,
                  nan,         nan],
         [ 0.5403023 ,         nan,         nan, ...,         nan,
                  nan,         nan]],

        ...,

        [[ 1.        ,  1.        ,  1.        , ...,  0.18079098,
           0.63031024,  1.        ],
         [ 0.88718325,  0.9148275 ,  0.9999887 , ...,  1.        ,
          -0.83785504,  1.        ],
         [ 1.        ,  0.3166613 ,  0.59869593, ...,  1.        ,
           0.6841769 ,  0.02243886],
         ...,
         [-0.94706416,  0.93723106,  0.900153  , ...,  1.        ,
           1.        ,  0.20261534],
         [ 1.        , -0.29989237, -0.99602944, ...,  0.05558564,
           0.9072266 , -0.9954562 ],
         [ 0.76039916,  1.        ,  0.27098754, ...,  1.        ,
           0.9231622 , -0.30413297]],

        [[ 0.6758519 ,  1.        ,  1.        , ...,  0.32787037,
           1.        ,  0.2632097 ],
         [-0.95112234,  0.9979683 ,  1.        , ...,  1.        ,
          -0.99446434,  0.7226369 ],
         [-0.59480506,  0.8967913 ,  1.        , ...,  0.7125988 ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.75900763,
           0.98285556, -0.9766436 ],
         [ 0.8770457 ,  1.        ,  1.        , ...,  1.        ,
          -0.17069152,  0.97609085],
         [ 1.        ,  1.        ,  0.8914897 , ...,  1.        ,
           1.        , -0.8823306 ]],

        [[ 1.        ,  1.        ,  0.9986194 , ...,  1.        ,
           0.7440821 ,  1.        ],
         [ 1.        ,  0.60803515,  1.        , ...,  1.        ,
           1.        , -0.9782126 ],
         [ 1.        ,  0.8757766 , -0.76730657, ..., -0.20493037,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  0.9406847 ,  1.        , ...,  0.49379703,
           1.        ,  0.59611547],
         [ 1.        , -0.4561151 ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.25160357, ...,  0.40979287,
           0.81189734,  0.12135632]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [6], 'to': [7]}
ms node:
{'name': 'cos', 'output': array([[[[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,  0.5403023 ],
         ...,
         [        nan,  0.7684252 ,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
           0.8441348 ,         nan],
         [        nan,         nan,         nan, ...,         nan,
           0.82225704,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
           0.88001734,         nan],
         [        nan,         nan,  0.5403023 , ...,         nan,
                  nan,         nan],
         [ 0.5403023 ,         nan,         nan, ...,         nan,
                  nan,         nan]],

        ...,

        [[ 1.        ,  1.        ,  1.        , ...,  0.1807891 ,
           0.6303117 ,  1.        ],
         [ 0.88717616,  0.9148275 ,  0.9999885 , ...,  1.        ,
          -0.83784676,  1.        ],
         [ 1.        ,  0.31665406,  0.59869593, ...,  1.        ,
           0.6841769 ,  0.02245412],
         ...,
         [-0.9470837 ,  0.9371938 ,  0.9001397 , ...,  1.        ,
           1.        ,  0.20263028],
         [ 1.        , -0.2999142 , -0.99603486, ...,  0.05549423,
           0.90723306, -0.9954533 ],
         [ 0.76041406,  1.        ,  0.2709765 , ...,  1.        ,
           0.92316663, -0.30413297]],

        [[ 0.6758518 ,  1.        ,  1.        , ...,  0.32785594,
           1.        ,  0.26315817],
         [-0.95112234,  0.9979683 ,  1.        , ...,  1.        ,
          -0.99445313,  0.7227634 ],
         [-0.59480506,  0.8967643 ,  1.        , ...,  0.7125988 ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.7590076 ,
           0.9828552 , -0.9766633 ],
         [ 0.8770457 ,  1.        ,  1.        , ...,  1.        ,
          -0.17069152,  0.9760897 ],
         [ 1.        ,  1.        ,  0.8914862 , ...,  1.        ,
           1.        , -0.88230187]],

        [[ 1.        ,  1.        ,  0.99861217, ...,  1.        ,
           0.7441127 ,  1.        ],
         [ 1.        ,  0.60805935,  1.        , ...,  1.        ,
           1.        , -0.9782126 ],
         [ 1.        ,  0.8757545 , -0.7673212 , ..., -0.20495276,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  0.9406898 ,  1.        , ...,  0.49379414,
           1.        ,  0.59611547],
         [ 1.        , -0.45621017,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.2515925 , ...,  0.4098764 ,
           0.8119107 ,  0.12129574]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [6], 'to': [7]}
torch node:
{'name': 'cos', 'output': array([[[[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,  0.54030234],
         ...,
         [        nan,  0.76842517,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
           0.8441348 ,         nan],
         [        nan,         nan,         nan, ...,         nan,
           0.82225704,         nan]],

        [[        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [        nan,         nan,         nan, ...,         nan,
          -0.63213545,         nan],
         [        nan,         nan,  0.54030234, ...,         nan,
                  nan,         nan],
         [ 0.54030234,         nan,         nan, ...,         nan,
                  nan,         nan]],

        ...,

        [[ 1.        ,  1.        ,  1.        , ...,  0.18079098,
           0.63031024,  1.        ],
         [ 0.88718325,  0.9148275 ,  0.99998873, ...,  1.        ,
          -0.83785504,  1.        ],
         [ 1.        ,  0.3166613 ,  0.59869593, ...,  1.        ,
           0.6841769 ,  0.02243886],
         ...,
         [-0.94706416,  0.93723106,  0.900153  , ...,  1.        ,
           1.        ,  0.20261534],
         [ 1.        , -0.29989237, -0.99602944, ...,  0.05558565,
           0.9072266 , -0.9954562 ],
         [ 0.76039916,  1.        ,  0.27098754, ...,  1.        ,
           0.9231622 , -0.30413297]],

        [[ 0.6758518 ,  1.        ,  1.        , ...,  0.32787037,
           1.        ,  0.2632097 ],
         [-0.95112234,  0.9979683 ,  1.        , ...,  1.        ,
          -0.99446434,  0.7226369 ],
         [-0.59480506,  0.8967913 ,  1.        , ...,  0.7125988 ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.7590076 ,
           0.98285556, -0.9766436 ],
         [ 0.8770457 ,  1.        ,  1.        , ...,  1.        ,
          -0.17069152,  0.97609085],
         [ 1.        ,  1.        ,  0.8914897 , ...,  1.        ,
           1.        , -0.8823306 ]],

        [[ 1.        ,  1.        ,  0.9986194 , ...,  1.        ,
           0.7440821 ,  1.        ],
         [ 1.        ,  0.60803515,  1.        , ...,  1.        ,
           1.        , -0.9782126 ],
         [ 1.        ,  0.8757766 , -0.76730657, ..., -0.20493037,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  0.9406847 ,  1.        , ...,  0.49379703,
           1.        ,  0.59611547],
         [ 1.        , -0.4561151 ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.25160357, ...,  0.4097929 ,
           0.81189734,  0.12135632]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [6], 'to': [7]}

generate models:88

final statics:
total operators:28
tensorflow --> nums:16,distinct_bugs:4
mindspore --> nums:14,distinct_bugs:4
torch --> nums:10,distinct_bugs:4
tensorflow --> 
log:3
cos:4
conv2d:7
sin:2
mindspore --> 
log:3
cos:5
sin:5
conv2d:1
torch --> 
log:3
cos:4
sin:2
maxpool2d:1

generate models:93

analyse output arrays in iter:102

pre layer res:
12:log
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [13], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [12], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [12], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [12], 'to': []}

generate models:96

analyse output arrays in iter:120

pre layer res:
19:reshape
{'name': 'reshape', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [inf, inf, inf, ..., inf, inf, inf],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [inf, inf, inf, ..., inf, inf, inf],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [inf, inf, inf, ..., inf, inf, inf],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        ...,

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [17], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [19], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [19], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [19], 'to': []}

generate models:114

analyse output arrays in iter:121

pre layer res:
8:relu
{'name': 'relu', 'output': array([[[[3.2792650e+09, 4.9835404e+07, 5.2254275e+09, ...,
          6.8995088e+07, 1.1628448e+10, 4.9835404e+07],
         [2.8657490e+07, 1.3524339e+09, 1.7110173e+08, ...,
          1.7332072e+09, 1.4876796e+09, 2.8657490e+07],
         [5.3445007e+09, 1.0671330e+09, 3.2842978e+07, ...,
          4.5096765e+09, 1.3841146e+08, 7.0262509e+08],
         ...,
         [3.6157468e+07, 2.8355620e+09, 3.5600909e+09, ...,
          3.5756912e+08, 3.6157468e+07, 5.8402198e+10],
         [5.4373064e+09, 9.5611228e+09, 2.1139466e+09, ...,
          6.4838995e+08, 8.9709210e+08, 1.7823488e+08],
         [1.2135520e+08, 7.6328166e+09, 3.2115292e+09, ...,
          3.0626286e+07, 3.2281152e+09, 1.3440012e+07]],

        [[3.2792650e+09, 4.9835404e+07, 5.2254275e+09, ...,
          6.8995088e+07, 1.1628448e+10, 4.9835404e+07],
         [2.8657490e+07, 1.3524339e+09, 1.7110173e+08, ...,
          1.7332072e+09, 1.4876796e+09, 2.8657490e+07],
         [5.3445007e+09, 1.0671330e+09, 3.2842978e+07, ...,
          4.5096765e+09, 1.3841146e+08, 7.0262509e+08],
         ...,
         [3.6157468e+07, 2.8355620e+09, 3.5600909e+09, ...,
          3.5756912e+08, 3.6157468e+07, 5.8402198e+10],
         [5.4373064e+09, 9.5611228e+09, 2.1139466e+09, ...,
          6.4838995e+08, 8.9709210e+08, 1.7823488e+08],
         [1.2135520e+08, 7.6328166e+09, 3.2115292e+09, ...,
          3.0626286e+07, 3.2281152e+09, 1.3440012e+07]],

        [[3.2792650e+09, 4.9835404e+07, 5.2254275e+09, ...,
          6.8995088e+07, 1.1628448e+10, 4.9835404e+07],
         [2.8657490e+07, 1.3524339e+09, 1.7110173e+08, ...,
          1.7332072e+09, 1.4876796e+09, 2.8657490e+07],
         [5.3445007e+09, 1.0671330e+09, 3.2842978e+07, ...,
          4.5096765e+09, 1.3841146e+08, 7.0262509e+08],
         ...,
         [3.6157468e+07, 2.8355620e+09, 3.5600909e+09, ...,
          3.5756912e+08, 3.6157468e+07, 5.8402198e+10],
         [5.4373064e+09, 9.5611228e+09, 2.1139466e+09, ...,
          6.4838995e+08, 8.9709210e+08, 1.7823488e+08],
         [1.2135520e+08, 7.6328166e+09, 3.2115292e+09, ...,
          3.0626286e+07, 3.2281152e+09, 1.3440012e+07]],

        ...,

        [[3.2792650e+09, 4.9835404e+07, 5.2254275e+09, ...,
          6.8995088e+07, 1.1628448e+10, 4.9835404e+07],
         [2.8657490e+07, 1.3524339e+09, 1.7110173e+08, ...,
          1.7332072e+09, 1.4876796e+09, 2.8657490e+07],
         [5.3445007e+09, 1.0671330e+09, 3.2842978e+07, ...,
          4.5096765e+09, 1.3841146e+08, 7.0262509e+08],
         ...,
         [3.6157468e+07, 2.8355620e+09, 3.5600909e+09, ...,
          3.5756912e+08, 3.6157468e+07, 5.8402198e+10],
         [5.4373064e+09, 9.5611228e+09, 2.1139466e+09, ...,
          6.4838995e+08, 8.9709210e+08, 1.7823488e+08],
         [1.2135520e+08, 7.6328166e+09, 3.2115292e+09, ...,
          3.0626286e+07, 3.2281152e+09, 1.3440012e+07]],

        [[3.2792650e+09, 4.9835404e+07, 5.2254275e+09, ...,
          6.8995088e+07, 1.1628448e+10, 4.9835404e+07],
         [2.8657490e+07, 1.3524339e+09, 1.7110173e+08, ...,
          1.7332072e+09, 1.4876796e+09, 2.8657490e+07],
         [5.3445007e+09, 1.0671330e+09, 3.2842978e+07, ...,
          4.5096765e+09, 1.3841146e+08, 7.0262509e+08],
         ...,
         [3.6157468e+07, 2.8355620e+09, 3.5600909e+09, ...,
          3.5756912e+08, 3.6157468e+07, 5.8402198e+10],
         [5.4373064e+09, 9.5611228e+09, 2.1139466e+09, ...,
          6.4838995e+08, 8.9709210e+08, 1.7823488e+08],
         [1.2135520e+08, 7.6328166e+09, 3.2115292e+09, ...,
          3.0626286e+07, 3.2281152e+09, 1.3440012e+07]],

        [[3.2792650e+09, 4.9835404e+07, 5.2254275e+09, ...,
          6.8995088e+07, 1.1628448e+10, 4.9835404e+07],
         [2.8657490e+07, 1.3524339e+09, 1.7110173e+08, ...,
          1.7332072e+09, 1.4876796e+09, 2.8657490e+07],
         [5.3445007e+09, 1.0671330e+09, 3.2842978e+07, ...,
          4.5096765e+09, 1.3841146e+08, 7.0262509e+08],
         ...,
         [3.6157468e+07, 2.8355620e+09, 3.5600909e+09, ...,
          3.5756912e+08, 3.6157468e+07, 5.8402198e+10],
         [5.4373064e+09, 9.5611228e+09, 2.1139466e+09, ...,
          6.4838995e+08, 8.9709210e+08, 1.7823488e+08],
         [1.2135520e+08, 7.6328166e+09, 3.2115292e+09, ...,
          3.0626286e+07, 3.2281152e+09, 1.3440012e+07]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [15], 'to': [11]}
tf node:
{'name': 'cos', 'output': array([[[[-0.17479289,  0.7607389 , -0.7725416 , ..., -0.33436143,
           0.9374251 ,  0.7607389 ],
         [ 0.36750194, -0.89622635,  0.20441718, ...,  0.37101406,
          -0.7139477 ,  0.36750194],
         [-0.9989404 , -0.7573617 , -0.27632537, ..., -0.16774814,
          -0.81975925,  0.7923755 ],
         ...,
         [ 0.07461897,  0.32652086, -0.83881515, ...,  0.9409214 ,
           0.07461897,  0.36372834],
         [-0.89874476, -0.4534189 , -0.62757266, ...,  0.8507197 ,
          -0.99670124,  0.4064068 ],
         [ 0.950873  ,  0.9823716 , -0.76875114, ...,  0.34137386,
           0.9512162 , -0.56215817]],

        [[-0.17479289,  0.7607389 , -0.7725416 , ..., -0.33436143,
           0.9374251 ,  0.7607389 ],
         [ 0.36750194, -0.89622635,  0.20441718, ...,  0.37101406,
          -0.7139477 ,  0.36750194],
         [-0.9989404 , -0.7573617 , -0.27632537, ..., -0.16774814,
          -0.81975925,  0.7923755 ],
         ...,
         [ 0.07461897,  0.32652086, -0.83881515, ...,  0.9409214 ,
           0.07461897,  0.36372834],
         [-0.89874476, -0.4534189 , -0.62757266, ...,  0.8507197 ,
          -0.99670124,  0.4064068 ],
         [ 0.950873  ,  0.9823716 , -0.76875114, ...,  0.34137386,
           0.9512162 , -0.56215817]],

        [[-0.17479289,  0.7607389 , -0.7725416 , ..., -0.33436143,
           0.9374251 ,  0.7607389 ],
         [ 0.36750194, -0.89622635,  0.20441718, ...,  0.37101406,
          -0.7139477 ,  0.36750194],
         [-0.9989404 , -0.7573617 , -0.27632537, ..., -0.16774814,
          -0.81975925,  0.7923755 ],
         ...,
         [ 0.07461897,  0.32652086, -0.83881515, ...,  0.9409214 ,
           0.07461897,  0.36372834],
         [-0.89874476, -0.4534189 , -0.62757266, ...,  0.8507197 ,
          -0.99670124,  0.4064068 ],
         [ 0.950873  ,  0.9823716 , -0.76875114, ...,  0.34137386,
           0.9512162 , -0.56215817]],

        ...,

        [[-0.17479289,  0.7607389 , -0.7725416 , ..., -0.33436143,
           0.9374251 ,  0.7607389 ],
         [ 0.36750194, -0.89622635,  0.20441718, ...,  0.37101406,
          -0.7139477 ,  0.36750194],
         [-0.9989404 , -0.7573617 , -0.27632537, ..., -0.16774814,
          -0.81975925,  0.7923755 ],
         ...,
         [ 0.07461897,  0.32652086, -0.83881515, ...,  0.9409214 ,
           0.07461897,  0.36372834],
         [-0.89874476, -0.4534189 , -0.62757266, ...,  0.8507197 ,
          -0.99670124,  0.4064068 ],
         [ 0.950873  ,  0.9823716 , -0.76875114, ...,  0.34137386,
           0.9512162 , -0.56215817]],

        [[-0.17479289,  0.7607389 , -0.7725416 , ..., -0.33436143,
           0.9374251 ,  0.7607389 ],
         [ 0.36750194, -0.89622635,  0.20441718, ...,  0.37101406,
          -0.7139477 ,  0.36750194],
         [-0.9989404 , -0.7573617 , -0.27632537, ..., -0.16774814,
          -0.81975925,  0.7923755 ],
         ...,
         [ 0.07461897,  0.32652086, -0.83881515, ...,  0.9409214 ,
           0.07461897,  0.36372834],
         [-0.89874476, -0.4534189 , -0.62757266, ...,  0.8507197 ,
          -0.99670124,  0.4064068 ],
         [ 0.950873  ,  0.9823716 , -0.76875114, ...,  0.34137386,
           0.9512162 , -0.56215817]],

        [[-0.17479289,  0.7607389 , -0.7725416 , ..., -0.33436143,
           0.9374251 ,  0.7607389 ],
         [ 0.36750194, -0.89622635,  0.20441718, ...,  0.37101406,
          -0.7139477 ,  0.36750194],
         [-0.9989404 , -0.7573617 , -0.27632537, ..., -0.16774814,
          -0.81975925,  0.7923755 ],
         ...,
         [ 0.07461897,  0.32652086, -0.83881515, ...,  0.9409214 ,
           0.07461897,  0.36372834],
         [-0.89874476, -0.4534189 , -0.62757266, ...,  0.8507197 ,
          -0.99670124,  0.4064068 ],
         [ 0.950873  ,  0.9823716 , -0.76875114, ...,  0.34137386,
           0.9512162 , -0.56215817]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [8], 'to': [9]}
ms node:
{'name': 'cos', 'output': array([[[[-0.32867518,  0.7607389 , -0.7725416 , ..., -0.33436143,
           0.9374251 ,  0.7607389 ],
         [ 0.36750194, -0.89622635,  0.20441718, ...,  0.3710141 ,
          -0.7139477 ,  0.36750194],
         [-0.9989404 , -0.7573617 , -0.27632537, ..., -0.16774814,
          -0.21427315,  0.7923755 ],
         ...,
         [ 0.07461897,  0.32652083, -0.83881515, ...,  0.9409214 ,
           0.07461897,  0.36372834],
         [-0.89874476, -0.45341894, -0.62757266, ...,  0.85071963,
          -0.3158973 , -0.16480024],
         [ 0.950873  ,  0.9823716 , -0.76875114, ...,  0.34137386,
           0.9512162 , -0.56215817]],

        [[-0.32867518,  0.7607389 , -0.7725416 , ..., -0.33436143,
           0.9374251 ,  0.7607389 ],
         [ 0.36750194, -0.89622635,  0.20441718, ...,  0.3710141 ,
          -0.7139477 ,  0.36750194],
         [-0.9989404 , -0.7573617 , -0.27632537, ..., -0.16774814,
          -0.21427315,  0.7923755 ],
         ...,
         [ 0.07461897,  0.32652083, -0.83881515, ...,  0.9409214 ,
           0.07461897,  0.36372834],
         [-0.89874476, -0.45341894, -0.62757266, ...,  0.85071963,
          -0.3158973 , -0.16480024],
         [ 0.950873  ,  0.9823716 , -0.76875114, ...,  0.34137386,
           0.9512162 , -0.56215817]],

        [[-0.32867518,  0.7607389 , -0.7725416 , ..., -0.33436143,
           0.9374251 ,  0.7607389 ],
         [ 0.36750194, -0.89622635,  0.20441718, ...,  0.3710141 ,
          -0.7139477 ,  0.36750194],
         [-0.9989404 , -0.7573617 , -0.27632537, ..., -0.16774814,
          -0.21427315,  0.7923755 ],
         ...,
         [ 0.07461897,  0.32652083, -0.83881515, ...,  0.9409214 ,
           0.07461897,  0.36372834],
         [-0.89874476, -0.45341894, -0.62757266, ...,  0.85071963,
          -0.3158973 , -0.16480024],
         [ 0.950873  ,  0.9823716 , -0.76875114, ...,  0.34137386,
           0.9512162 , -0.56215817]],

        ...,

        [[-0.32867518,  0.7607389 , -0.7725416 , ..., -0.33436143,
           0.9374251 ,  0.7607389 ],
         [ 0.36750194, -0.89622635,  0.20441718, ...,  0.3710141 ,
          -0.7139477 ,  0.36750194],
         [-0.9989404 , -0.7573617 , -0.27632537, ..., -0.16774814,
          -0.21427315,  0.7923755 ],
         ...,
         [ 0.07461897,  0.32652083, -0.83881515, ...,  0.9409214 ,
           0.07461897,  0.36372834],
         [-0.89874476, -0.45341894, -0.62757266, ...,  0.85071963,
          -0.3158973 , -0.16480024],
         [ 0.950873  ,  0.9823716 , -0.76875114, ...,  0.34137386,
           0.9512162 , -0.56215817]],

        [[ 0.5270803 ,  0.0647227 , -0.99990135, ..., -0.9999587 ,
           0.9925375 ,  0.0647227 ],
         [ 0.9755796 , -0.59202796, -0.9225791 , ...,  0.87334037,
           0.82125014,  0.9755796 ],
         [-0.44869593, -0.7573617 , -0.7472547 , ...,  0.4841304 ,
           0.54701626,  0.15322644],
         ...,
         [-0.32529098, -0.95743394, -0.83881515, ...,  0.9409214 ,
          -0.32529098, -0.9239615 ],
         [ 0.03462408, -0.45341894, -0.78825355, ...,  0.85071963,
          -0.9354722 , -0.9979697 ],
         [ 0.1928972 ,  0.9823716 ,  0.61044747, ...,  0.73699945,
           0.9512162 , -0.56215817]],

        [[ 0.5270803 ,  0.0647227 , -0.99990135, ..., -0.9999587 ,
           0.9925375 ,  0.0647227 ],
         [ 0.9755796 , -0.59202796, -0.9225791 , ...,  0.87334037,
           0.82125014,  0.9755796 ],
         [-0.44869593, -0.7573617 , -0.7472547 , ...,  0.4841304 ,
           0.54701626,  0.15322644],
         ...,
         [-0.32529098, -0.95743394, -0.83881515, ...,  0.9409214 ,
          -0.32529098, -0.9239615 ],
         [ 0.03462408, -0.45341894, -0.78825355, ...,  0.85071963,
          -0.9354722 , -0.9979697 ],
         [ 0.1928972 ,  0.9823716 ,  0.61044747, ...,  0.73699945,
           0.9512162 , -0.56215817]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [8], 'to': [9]}
torch node:
{'name': 'cos', 'output': array([[[[-0.32867518,  0.7607389 , -0.7725416 , ..., -0.33436143,
           0.9374251 ,  0.7607389 ],
         [ 0.36750194, -0.89622635,  0.20441718, ...,  0.3710141 ,
          -0.7139477 ,  0.36750194],
         [-0.9989404 , -0.7573617 , -0.27632537, ..., -0.16774814,
          -0.21427315,  0.7923755 ],
         ...,
         [ 0.07461897,  0.32652083, -0.83881515, ...,  0.9409214 ,
           0.07461897,  0.36372834],
         [-0.89874476, -0.45341894, -0.62757266, ...,  0.85071963,
          -0.3158973 , -0.16480024],
         [ 0.950873  ,  0.9823716 , -0.76875114, ...,  0.34137386,
           0.9512162 , -0.56215817]],

        [[-0.32867518,  0.7607389 , -0.7725416 , ..., -0.33436143,
           0.9374251 ,  0.7607389 ],
         [ 0.36750194, -0.89622635,  0.20441718, ...,  0.3710141 ,
          -0.7139477 ,  0.36750194],
         [-0.9989404 , -0.7573617 , -0.27632537, ..., -0.16774814,
          -0.21427315,  0.7923755 ],
         ...,
         [ 0.07461897,  0.32652083, -0.83881515, ...,  0.9409214 ,
           0.07461897,  0.36372834],
         [-0.89874476, -0.45341894, -0.62757266, ...,  0.85071963,
          -0.3158973 , -0.16480024],
         [ 0.950873  ,  0.9823716 , -0.76875114, ...,  0.34137386,
           0.9512162 , -0.56215817]],

        [[-0.32867518,  0.7607389 , -0.7725416 , ..., -0.33436143,
           0.9374251 ,  0.7607389 ],
         [ 0.36750194, -0.89622635,  0.20441718, ...,  0.3710141 ,
          -0.7139477 ,  0.36750194],
         [-0.9989404 , -0.7573617 , -0.27632537, ..., -0.16774814,
          -0.21427315,  0.7923755 ],
         ...,
         [ 0.07461897,  0.32652083, -0.83881515, ...,  0.9409214 ,
           0.07461897,  0.36372834],
         [-0.89874476, -0.45341894, -0.62757266, ...,  0.85071963,
          -0.3158973 , -0.16480024],
         [ 0.950873  ,  0.9823716 , -0.76875114, ...,  0.34137386,
           0.9512162 , -0.56215817]],

        ...,

        [[-0.32867518,  0.7607389 , -0.7725416 , ..., -0.33436143,
           0.9374251 ,  0.7607389 ],
         [ 0.36750194, -0.89622635,  0.20441718, ...,  0.3710141 ,
          -0.7139477 ,  0.36750194],
         [-0.9989404 , -0.7573617 , -0.27632537, ..., -0.16774814,
          -0.21427315,  0.7923755 ],
         ...,
         [ 0.07461897,  0.32652083, -0.83881515, ...,  0.9409214 ,
           0.07461897,  0.36372834],
         [-0.89874476, -0.45341894, -0.62757266, ...,  0.85071963,
          -0.3158973 , -0.16480024],
         [ 0.950873  ,  0.9823716 , -0.76875114, ...,  0.34137386,
           0.9512162 , -0.56215817]],

        [[-0.32867518,  0.7607389 , -0.7725416 , ..., -0.33436143,
           0.9374251 ,  0.7607389 ],
         [ 0.36750194, -0.89622635,  0.20441718, ...,  0.3710141 ,
          -0.7139477 ,  0.36750194],
         [-0.9989404 , -0.7573617 , -0.27632537, ..., -0.16774814,
          -0.21427315,  0.7923755 ],
         ...,
         [ 0.07461897,  0.32652083, -0.83881515, ...,  0.9409214 ,
           0.07461897,  0.36372834],
         [-0.89874476, -0.45341894, -0.62757266, ...,  0.85071963,
          -0.3158973 , -0.16480024],
         [ 0.950873  ,  0.9823716 , -0.76875114, ...,  0.34137386,
           0.9512162 , -0.56215817]],

        [[-0.32867518,  0.7607389 , -0.7725416 , ..., -0.33436143,
           0.9374251 ,  0.7607389 ],
         [ 0.36750194, -0.89622635,  0.20441718, ...,  0.3710141 ,
          -0.7139477 ,  0.36750194],
         [-0.9989404 , -0.7573617 , -0.27632537, ..., -0.16774814,
          -0.21427315,  0.7923755 ],
         ...,
         [ 0.07461897,  0.32652083, -0.83881515, ...,  0.9409214 ,
           0.07461897,  0.36372834],
         [-0.89874476, -0.45341894, -0.62757266, ...,  0.85071963,
          -0.3158973 , -0.16480024],
         [ 0.950873  ,  0.9823716 , -0.76875114, ...,  0.34137386,
           0.9512162 , -0.56215817]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [8], 'to': [9]}

generate models:115

analyse output arrays in iter:126

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[1316.7212, 1286.3726, 1326.8329, ..., 1296.1885, 1214.4691,
          1217.6687],
         [1239.7208, 1395.167 , 1222.5186, ..., 1340.4229, 1310.4347,
          1417.2477],
         [1404.3882, 1269.5114, 1236.9731, ..., 1351.9926, 1237.2614,
          1320.0752],
         ...,
         [1330.2426, 1308.9497, 1203.2113, ..., 1340.6497, 1319.7247,
          1280.4478],
         [1478.2318, 1375.7539, 1324.8724, ..., 1488.2306, 1246.613 ,
          1424.6686],
         [1329.9016, 1291.7123, 1290.7031, ..., 1369.4406, 1246.7396,
          1254.9735]],

        [[1274.8257, 1222.3936, 1330.2396, ..., 1296.1885, 1205.1875,
          1268.7488],
         [1354.8567, 1288.8966, 1433.2948, ..., 1286.2312, 1310.4347,
          1337.2638],
         [1296.427 , 1262.1793, 1390.5272, ..., 1431.1614, 1305.7506,
          1347.4635],
         ...,
         [1253.8451, 1308.9497, 1245.1265, ..., 1256.5529, 1464.1785,
          1353.2454],
         [1425.9662, 1357.3215, 1603.3888, ..., 1219.4072, 1393.8734,
          1369.4443],
         [1404.1678, 1454.746 , 1407.761 , ..., 1516.6493, 1330.5697,
          1252.5688]],

        [[1274.8257, 1259.0203, 1397.1599, ..., 1325.3982, 1313.0281,
          1525.5819],
         [1284.1002, 1348.751 , 1312.3213, ..., 1309.8696, 1310.4347,
          1408.215 ],
         [1326.4934, 1259.0522, 1435.549 , ..., 1489.1543, 1255.45  ,
          1233.3805],
         ...,
         [1396.6637, 1308.9497, 1216.0266, ..., 1304.1786, 1538.6777,
          1280.4478],
         [1327.3784, 1349.5411, 1344.2891, ..., 1385.3611, 1364.7247,
          1492.4236],
         [1373.7462, 1428.8535, 1380.0674, ..., 1272.3589, 1216.3181,
          1351.2172]],

        ...,

        [[1274.8257, 1222.3936, 1330.2396, ..., 1296.1885, 1205.1875,
          1268.7488],
         [1354.8567, 1288.8966, 1433.2948, ..., 1286.2312, 1310.4347,
          1337.2638],
         [1296.427 , 1262.1793, 1390.5272, ..., 1431.1614, 1305.7506,
          1347.4635],
         ...,
         [1253.8451, 1308.9497, 1245.1265, ..., 1256.5529, 1464.1785,
          1353.2454],
         [1425.9662, 1357.3215, 1603.3888, ..., 1219.4072, 1393.8734,
          1369.4443],
         [1404.1678, 1454.746 , 1407.761 , ..., 1516.6493, 1330.5697,
          1252.5688]],

        [[1274.8257, 1259.0203, 1397.1599, ..., 1325.3982, 1313.0281,
          1525.5819],
         [1284.1002, 1348.751 , 1312.3213, ..., 1309.8696, 1310.4347,
          1408.215 ],
         [1326.4934, 1259.0522, 1435.549 , ..., 1489.1543, 1255.45  ,
          1233.3805],
         ...,
         [1396.6637, 1308.9497, 1216.0266, ..., 1304.1786, 1538.6777,
          1280.4478],
         [1327.3784, 1349.5411, 1344.2891, ..., 1385.3611, 1364.7247,
          1492.4236],
         [1373.7462, 1428.8535, 1380.0674, ..., 1272.3589, 1216.3181,
          1351.2172]],

        [[1274.8257, 1421.3005, 1376.7927, ..., 1328.4243, 1270.8993,
          1217.6687],
         [1441.996 , 1399.6338, 1222.5186, ..., 1308.978 , 1310.4347,
          1374.8041],
         [1283.476 , 1259.0522, 1287.5568, ..., 1367.5414, 1193.1921,
          1411.6202],
         ...,
         [1238.5911, 1308.9497, 1284.5397, ..., 1384.5334, 1319.7247,
          1361.7539],
         [1303.8911, 1351.5977, 1290.951 , ..., 1304.3208, 1281.7875,
          1555.4087],
         [1507.4906, 1484.9244, 1282.6674, ..., 1264.0475, 1331.351 ,
          1252.5688]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [19], 'to': [11]}
tf node:
{'name': 'sin', 'output': array([[[[-0.38376454, -0.9939963 ,  0.882328  , ...,  0.96063787,
           0.97048664, -0.9548779 ],
         [ 0.93500495,  0.2953807 , -0.42504576, ...,  0.8609893 ,
          -0.38070244, -0.37962776],
         [-0.09611882,  0.30307758, -0.7272872 , ...,  0.89467925,
          -0.5022104 ,  0.5698151 ],
         ...,
         [-0.97547334,  0.8886668 ,  0.01868153, ...,  0.7245663 ,
           0.25303584, -0.96922153],
         [ 0.99368215, -0.26063126, -0.7705243 , ..., -0.77348864,
           0.56402034, -0.9990458 ],
         [-0.84572315, -0.49488255,  0.47190973, ..., -0.28963473,
           0.45525575, -0.9957014 ]],

        [[-0.6138543 , -0.30887735, -0.97482425, ...,  0.96063787,
          -0.9261521 , -0.43915036],
         [-0.738104  ,  0.74705344,  0.6657883 , ..., -0.9686669 ,
          -0.38070244, -0.8697406 ],
         [ 0.8678031 , -0.67497104,  0.9314304 , ..., -0.9862663 ,
          -0.91355205,  0.2761129 ],
         ...,
         [-0.34254456,  0.8886668 ,  0.87028176, ..., -0.08410552,
           0.19503215,  0.7040414 ],
         [-0.3116017 ,  0.15290467,  0.92328274, ...,  0.45224154,
          -0.83806413, -0.2860107 ],
         [ 0.12375142, -0.18745744,  0.32165563, ...,  0.6742582 ,
          -0.9944702 ,  0.7995954 ]],

        [[-0.6138543 ,  0.6877539 ,  0.7505003 , ..., -0.3465648 ,
          -0.15700078, -0.9431954 ],
         [ 0.72509724, -0.8456214 , -0.76073205, ...,  0.17362328,
          -0.38070244,  0.7043145 ],
         [ 0.67525357,  0.6641887 ,  0.15822475, ...,  0.0393689 ,
          -0.9272911 ,  0.9537338 ],
         ...,
         [ 0.97462386,  0.8886668 , -0.2282252 , ..., -0.40560225,
          -0.64625436, -0.96922153],
         [ 0.99845904, -0.974325  , -0.3075272 , ...,  0.08118679,
           0.9561378 , -0.16629735],
         [-0.7644748 ,  0.54059297, -0.7884026 , ..., -0.01386157,
          -0.49840528,  0.3262389 ]],

        ...,

        [[-0.6138543 , -0.30887735, -0.97482425, ...,  0.96063787,
          -0.9261521 , -0.43915036],
         [-0.738104  ,  0.74705344,  0.6657883 , ..., -0.9686669 ,
          -0.38070244, -0.8697406 ],
         [ 0.8678031 , -0.67497104,  0.9314304 , ..., -0.9862663 ,
          -0.91355205,  0.2761129 ],
         ...,
         [-0.34254456,  0.8886668 ,  0.87028176, ..., -0.08410552,
           0.19503215,  0.7040414 ],
         [-0.3116017 ,  0.15290467,  0.92328274, ...,  0.45224154,
          -0.83806413, -0.2860107 ],
         [ 0.12375142, -0.18745744,  0.32165563, ...,  0.6742582 ,
          -0.9944702 ,  0.7995954 ]],

        [[-0.6138543 ,  0.6877539 ,  0.7505003 , ..., -0.3465648 ,
          -0.15700078, -0.9431954 ],
         [ 0.72509724, -0.8456214 , -0.76073205, ...,  0.17362328,
          -0.38070244,  0.7043145 ],
         [ 0.67525357,  0.6641887 ,  0.15822475, ...,  0.0393689 ,
          -0.9272911 ,  0.9537338 ],
         ...,
         [ 0.97462386,  0.8886668 , -0.2282252 , ..., -0.40560225,
          -0.64625436, -0.96922153],
         [ 0.99845904, -0.974325  , -0.3075272 , ...,  0.08118679,
           0.9561378 , -0.16629735],
         [-0.7644748 ,  0.54059297, -0.7884026 , ..., -0.01386157,
          -0.49840528,  0.3262389 ]],

        [[-0.6138543 ,  0.9637339 ,  0.6998178 , ...,  0.4523299 ,
           0.9921897 , -0.9548779 ],
         [-0.00494366, -0.9985282 , -0.42504576, ...,  0.8753258 ,
          -0.38070244, -0.9368476 ],
         [ 0.9908537 ,  0.6641887 , -0.4761095 , ..., -0.81258726,
          -0.57538086, -0.8649937 ],
         ...,
         [ 0.7198311 ,  0.8886668 ,  0.36322078, ...,  0.7888361 ,
           0.25303584, -0.9920084 ],
         [-0.12979482,  0.6539662 ,  0.24113077, ..., -0.5310587 ,
           0.017672  , -0.31487778],
         [-0.45633605,  0.86686873,  0.7818052 , ...,  0.9032306 ,
          -0.6321563 ,  0.7995954 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [9], 'to': [10]}
ms node:
{'name': 'sin', 'output': array([[[[-0.38376454, -0.9940894 ,  0.882328  , ...,  0.96063787,
           0.97048664, -0.95491415],
         [ 0.93500495,  0.2953807 , -0.42493525, ...,  0.8609893 ,
          -0.3800251 , -0.3795148 ],
         [-0.09927746,  0.3061006 , -0.7272872 , ...,  0.8950062 ,
          -0.5022104 ,  0.5698151 ],
         ...,
         [-0.97547334,  0.8887228 ,  0.01868153, ...,  0.7246504 ,
           0.25279963, -0.96922153],
         [ 0.99369586, -0.26063126, -0.7705243 , ..., -0.7734886 ,
           0.56402034, -0.9990775 ],
         [-0.845658  , -0.49467036,  0.47190973, ..., -0.28647855,
           0.45503837, -0.9957014 ]],

        [[-0.6144323 , -0.30968994, -0.97482425, ...,  0.96063787,
          -0.9261981 , -0.43926004],
         [-0.7381863 ,  0.74697226,  0.66578823, ..., -0.9686669 ,
          -0.3800251 , -0.8696201 ],
         [ 0.86622167, -0.67262584,  0.9314304 , ..., -0.9861451 ,
          -0.91355205,  0.27611288],
         ...,
         [-0.3425446 ,  0.8887228 ,  0.87028176, ..., -0.08386224,
           0.19503215,  0.70404136],
         [-0.31160173,  0.15278405,  0.92328274, ...,  0.45224154,
          -0.8380641 , -0.2861277 ],
         [ 0.12375142, -0.18745744,  0.32165563, ...,  0.67182046,
          -0.9944702 ,  0.79959536]],

        [[-0.6144323 ,  0.68793106,  0.75050026, ..., -0.3465648 ,
          -0.15700078, -0.9431954 ],
         [ 0.7250132 , -0.84562135, -0.7608112 , ...,  0.17362328,
          -0.3800251 ,  0.7042278 ],
         [ 0.6775911 ,  0.66181266,  0.15822475, ...,  0.03949087,
          -0.92719966,  0.9537338 ],
         ...,
         [ 0.97462386,  0.8887228 , -0.2282252 , ..., -0.40549067,
          -0.64625436, -0.96922153],
         [ 0.99845904, -0.974325  , -0.30752724, ...,  0.08118679,
           0.9561378 , -0.16629735],
         [-0.76447475,  0.5406956 , -0.78840256, ..., -0.01715707,
          -0.49840525,  0.3262389 ]],

        ...,

        [[-0.6144323 , -0.30968994, -0.97482425, ...,  0.96063787,
          -0.92624414, -0.43926004],
         [-0.7382687 ,  0.74697226,  0.66569716, ..., -0.9686669 ,
          -0.3800251 , -0.86968035],
         [ 0.86622167, -0.67262584,  0.931386  , ..., -0.9861653 ,
          -0.91355205,  0.27623022],
         ...,
         [-0.3425446 ,  0.8887228 ,  0.8701615 , ..., -0.08386224,
           0.19503215,  0.70404136],
         [-0.31171772,  0.15266341,  0.9233296 , ...,  0.45224154,
          -0.8380641 , -0.2861277 ],
         [ 0.12363029, -0.18769726,  0.32154003, ...,  0.67182046,
          -0.99445736,  0.79959536]],

        [[-0.61423963,  0.6869559 ,  0.7505809 , ..., -0.3466793 ,
          -0.15615682, -0.9431549 ],
         [ 0.7252653 , -0.845491  , -0.760732  , ...,  0.17362328,
          -0.37889567,  0.70327383],
         [ 0.6765131 ,  0.66300154,  0.15955047, ...,  0.04010074,
          -0.9270167 ,  0.95366037],
         ...,
         [ 0.9748148 ,  0.8881064 , -0.22691767, ..., -0.4051559 ,
          -0.64588165, -0.9688901 ],
         [ 0.9984523 , -0.9739942 , -0.30752724, ...,  0.08009174,
           0.95635206, -0.16629735],
         [-0.76423866,  0.53956556, -0.78765106, ..., -0.01691297,
          -0.4972407 ,  0.32543105]],

        [[-0.61423963,  0.96389663,  0.6997306 , ...,  0.4523299 ,
           0.9920981 , -0.9548054 ],
         [-0.00604228, -0.998468  , -0.42504576, ...,  0.8753258 ,
          -0.37889567, -0.9367622 ],
         [ 0.9906217 ,  0.66300154, -0.47439104, ..., -0.81272954,
          -0.5753808 , -0.8652386 ],
         ...,
         [ 0.7199158 ,  0.8881064 ,  0.3641305 , ...,  0.78868604,
           0.25126395, -0.99219215],
         [-0.12991585,  0.65507364,  0.23970889, ..., -0.5320927 ,
           0.0184043 , -0.31464604],
         [-0.45785606,  0.86674696,  0.78226167, ...,  0.90391046,
          -0.6326291 ,  0.799742  ]]]], dtype=float32), 'output_shape': (1, 128, 8, 8), 'from': [9], 'to': [10]}
torch node:
{'name': 'sin', 'output': array([[[[-0.38376454, -0.9939963 ,  0.882328  , ...,  0.96063787,
           0.97048664, -0.9548779 ],
         [ 0.93500495,  0.2953807 , -0.42504576, ...,  0.8609893 ,
          -0.38070247, -0.37962776],
         [-0.09611882,  0.30307758, -0.7272872 , ...,  0.89467925,
          -0.5022104 ,  0.5698151 ],
         ...,
         [-0.97547334,  0.8886668 ,  0.01868153, ...,  0.7245663 ,
           0.25303584, -0.96922153],
         [ 0.99368215, -0.2606313 , -0.7705243 , ..., -0.7734886 ,
           0.56402034, -0.9990458 ],
         [-0.84572315, -0.49488252,  0.47190973, ..., -0.28963476,
           0.45525578, -0.9957014 ]],

        [[-0.6138542 , -0.30887735, -0.97482425, ...,  0.96063787,
          -0.9261521 , -0.43915036],
         [-0.7381039 ,  0.74705344,  0.66578823, ..., -0.9686669 ,
          -0.38070247, -0.8697406 ],
         [ 0.8678031 , -0.67497104,  0.9314304 , ..., -0.9862663 ,
          -0.91355205,  0.27611288],
         ...,
         [-0.3425446 ,  0.8886668 ,  0.87028176, ..., -0.08410551,
           0.19503215,  0.70404136],
         [-0.31160173,  0.15290467,  0.92328274, ...,  0.45224154,
          -0.8380641 , -0.2861277 ],
         [ 0.12375142, -0.18745746,  0.32165563, ...,  0.6742582 ,
          -0.9944702 ,  0.79959536]],

        [[-0.6138542 ,  0.68775386,  0.75050026, ..., -0.3465648 ,
          -0.15700078, -0.9431954 ],
         [ 0.72509724, -0.84562135, -0.760732  , ...,  0.17362328,
          -0.38070247,  0.7043145 ],
         [ 0.6752535 ,  0.6641887 ,  0.15822475, ...,  0.0393689 ,
          -0.9272911 ,  0.9537338 ],
         ...,
         [ 0.97462386,  0.8886668 , -0.2282252 , ..., -0.40560228,
          -0.64625436, -0.96922153],
         [ 0.99845904, -0.974325  , -0.30752724, ...,  0.08118679,
           0.9561378 , -0.16629735],
         [-0.76447475,  0.54059297, -0.78840256, ..., -0.01386157,
          -0.49840525,  0.3262389 ]],

        ...,

        [[-0.6138542 , -0.30887735, -0.97482425, ...,  0.96063787,
          -0.9261521 , -0.43915036],
         [-0.7381039 ,  0.74705344,  0.66578823, ..., -0.9686669 ,
          -0.38070247, -0.8697406 ],
         [ 0.8678031 , -0.67497104,  0.9314304 , ..., -0.9862663 ,
          -0.91355205,  0.27611288],
         ...,
         [-0.3425446 ,  0.8886668 ,  0.87028176, ..., -0.08410551,
           0.19503215,  0.70404136],
         [-0.31160173,  0.15290467,  0.92328274, ...,  0.45224154,
          -0.8380641 , -0.2861277 ],
         [ 0.12375142, -0.18745746,  0.32165563, ...,  0.6742582 ,
          -0.9944702 ,  0.79959536]],

        [[-0.6138542 ,  0.68775386,  0.75050026, ..., -0.3465648 ,
          -0.15700078, -0.9431954 ],
         [ 0.72509724, -0.84562135, -0.760732  , ...,  0.17362328,
          -0.38070247,  0.7043145 ],
         [ 0.6752535 ,  0.6641887 ,  0.15822475, ...,  0.0393689 ,
          -0.9272911 ,  0.9537338 ],
         ...,
         [ 0.97462386,  0.8886668 , -0.2282252 , ..., -0.40560228,
          -0.64625436, -0.96922153],
         [ 0.99845904, -0.974325  , -0.30752724, ...,  0.08118679,
           0.9561378 , -0.16629735],
         [-0.76447475,  0.54059297, -0.78840256, ..., -0.01386157,
          -0.49840525,  0.3262389 ]],

        [[-0.6138542 ,  0.9637339 ,  0.6998178 , ...,  0.4523299 ,
           0.9921897 , -0.9548779 ],
         [-0.00494366, -0.9985282 , -0.42504576, ...,  0.8753258 ,
          -0.38070247, -0.9368476 ],
         [ 0.9908537 ,  0.6641887 , -0.4761095 , ..., -0.81258726,
          -0.5753808 , -0.8649937 ],
         ...,
         [ 0.71983105,  0.8886668 ,  0.3632208 , ...,  0.7888361 ,
           0.25303584, -0.9920084 ],
         [-0.12979482,  0.6539661 ,  0.24113075, ..., -0.5310587 ,
           0.017672  , -0.31464604],
         [-0.45633605,  0.86686873,  0.78180516, ...,  0.90323055,
          -0.6321563 ,  0.79959536]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 8, 8]), 'from': [9], 'to': [10]}

generate models:120

analyse output arrays in iter:129

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [17], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [9], 'to': []}

generate models:122

analyse output arrays in iter:132

pre layer res:
23:add
{'name': 'add', 'output': array([[[[19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244],
         [19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244],
         [19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244],
         ...,
         [19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244],
         [19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244],
         [19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244]],

        [[19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244],
         [19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244],
         [19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244],
         ...,
         [19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244],
         [19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244],
         [19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244]],

        [[19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244],
         [19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244],
         [19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244],
         ...,
         [19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244],
         [19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244],
         [19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244]],

        ...,

        [[19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244],
         [19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244],
         [19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244],
         ...,
         [19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244],
         [19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244],
         [19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244]],

        [[19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244],
         [19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244],
         [19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244],
         ...,
         [19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244],
         [19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244],
         [19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244]],

        [[19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244],
         [19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244],
         [19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244],
         ...,
         [19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244],
         [19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244],
         [19124.008, 32406.55 , 28493.82 , ..., 20465.256, 31032.732,
          26787.244]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [8, 8], 'to': [15]}
tf node:
{'name': 'cos', 'output': array([[[[-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512],
         ...,
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512]],

        [[-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512],
         ...,
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512]],

        [[-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512],
         ...,
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512]],

        ...,

        [[-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512],
         ...,
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512]],

        [[-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512],
         ...,
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512]],

        [[-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512],
         ...,
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99678653, -0.43890512]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [23], 'to': [11]}
ms node:
{'name': 'cos', 'output': array([[[[-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         ...,
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9102087 , ...,  0.6047743 ,
           0.99662817, -0.43890512]],

        [[-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         ...,
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9102087 , ...,  0.6047743 ,
           0.99662817, -0.43890512]],

        [[-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         ...,
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9102087 , ...,  0.6047743 ,
           0.99662817, -0.43890512]],

        ...,

        [[-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         ...,
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9102087 , ...,  0.6047743 ,
           0.99662817, -0.43890512]],

        [[-0.41833085, -0.47719106,  0.9307732 , ...,  0.60009754,
           0.9977885 , -0.43539187],
         [-0.41833085, -0.47719106,  0.9307732 , ...,  0.60009754,
           0.9977885 , -0.43539187],
         [-0.41833085, -0.47719106,  0.9307732 , ...,  0.60009754,
           0.9977885 , -0.43539187],
         ...,
         [-0.41833085, -0.47719106,  0.9307732 , ...,  0.60009754,
           0.9977885 , -0.43539187],
         [-0.41833085, -0.47719106,  0.9307732 , ...,  0.60009754,
           0.9977885 , -0.43539187],
         [-0.41833085, -0.47719106,  0.929338  , ...,  0.60009754,
           0.9977885 , -0.43539187]],

        [[-0.41833085, -0.47719106,  0.9307732 , ...,  0.60009754,
           0.9977885 , -0.43539187],
         [-0.41833085, -0.47719106,  0.9307732 , ...,  0.60009754,
           0.9977885 , -0.43539187],
         [-0.41833085, -0.47719106,  0.9307732 , ...,  0.60009754,
           0.9977885 , -0.43539187],
         ...,
         [-0.41833085, -0.47719106,  0.9307732 , ...,  0.60009754,
           0.9977885 , -0.43539187],
         [-0.41833085, -0.47719106,  0.9307732 , ...,  0.60009754,
           0.9977885 , -0.43539187],
         [-0.41833085, -0.47719106,  0.929338  , ...,  0.60009754,
           0.9977885 , -0.43539187]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [23], 'to': [11]}
torch node:
{'name': 'cos', 'output': array([[[[-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         ...,
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512]],

        [[-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         ...,
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512]],

        [[-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         ...,
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512]],

        ...,

        [[-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         ...,
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512]],

        [[-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         ...,
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512]],

        [[-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         ...,
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512],
         [-0.42364568, -0.5211833 ,  0.9110158 , ...,  0.6047743 ,
           0.99662817, -0.43890512]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [23], 'to': [11]}

generate models:125

analyse output arrays in iter:136

pre layer res:
8:relu
{'name': 'relu', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf,  1., inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf,  1., inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf,  1., inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf,  1., inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf,  1., inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf,  1., inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [17], 'to': [13]}
tf node:
{'name': 'cos', 'output': array([[[[      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan, 0.5403023,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan]],

        [[      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan, 0.5403023,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan]],

        [[      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan, 0.5403023,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan]],

        ...,

        [[      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan, 0.5403023,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan]],

        [[      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan, 0.5403023,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan]],

        [[      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan, 0.5403023,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [8], 'to': [9]}
ms node:
{'name': 'cos', 'output': array([[[[      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan, 0.5403023,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan]],

        [[      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan, 0.5403023,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan]],

        [[      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan, 0.5403023,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan]],

        ...,

        [[      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan, 0.5403023,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan]],

        [[      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan, 0.5403023,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan]],

        [[      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan, 0.5403023,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [8], 'to': [9]}
torch node:
{'name': 'cos', 'output': array([[[[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan, 0.54030234,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan, 0.54030234,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan, 0.54030234,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        ...,

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan, 0.54030234,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan, 0.54030234,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]],

        [[       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan, 0.54030234,        nan, ...,        nan,
                 nan,        nan],
         ...,
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan],
         [       nan,        nan,        nan, ...,        nan,
                 nan,        nan]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [8], 'to': [9]}

pre layer res:
4:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[1.       , 1.       , 1.       , ..., 1.       , 1.       ,
          1.       ],
         [1.       , 1.       , 1.       , ..., 1.       , 1.       ,
          1.       ],
         [1.       , 0.       , 1.       , ..., 1.       , 1.       ,
          1.       ],
         ...,
         [1.       , 1.       , 1.       , ..., 1.       , 1.       ,
          1.       ],
         [1.       , 1.       , 1.       , ..., 1.       , 1.       ,
          1.       ],
         [1.       , 1.       , 1.       , ..., 1.       , 1.       ,
          0.9998831]],

        [[1.       , 1.       , 1.       , ..., 1.       , 1.       ,
          1.       ],
         [1.       , 1.       , 1.       , ..., 1.       , 1.       ,
          1.       ],
         [1.       , 0.       , 1.       , ..., 1.       , 1.       ,
          1.       ],
         ...,
         [1.       , 1.       , 1.       , ..., 1.       , 1.       ,
          1.       ],
         [1.       , 1.       , 1.       , ..., 1.       , 1.       ,
          1.       ],
         [1.       , 1.       , 1.       , ..., 1.       , 1.       ,
          0.9998831]],

        [[1.       , 1.       , 1.       , ..., 1.       , 1.       ,
          1.       ],
         [1.       , 1.       , 1.       , ..., 1.       , 1.       ,
          1.       ],
         [1.       , 0.       , 1.       , ..., 1.       , 1.       ,
          1.       ],
         ...,
         [1.       , 1.       , 1.       , ..., 1.       , 1.       ,
          1.       ],
         [1.       , 1.       , 1.       , ..., 1.       , 1.       ,
          1.       ],
         [1.       , 1.       , 1.       , ..., 1.       , 1.       ,
          0.9998831]],

        ...,

        [[1.       , 1.       , 1.       , ..., 1.       , 1.       ,
          1.       ],
         [1.       , 1.       , 1.       , ..., 1.       , 1.       ,
          1.       ],
         [1.       , 0.       , 1.       , ..., 1.       , 1.       ,
          1.       ],
         ...,
         [1.       , 1.       , 1.       , ..., 1.       , 1.       ,
          1.       ],
         [1.       , 1.       , 1.       , ..., 1.       , 1.       ,
          1.       ],
         [1.       , 1.       , 1.       , ..., 1.       , 1.       ,
          0.9998831]],

        [[1.       , 1.       , 1.       , ..., 1.       , 1.       ,
          1.       ],
         [1.       , 1.       , 1.       , ..., 1.       , 1.       ,
          1.       ],
         [1.       , 0.       , 1.       , ..., 1.       , 1.       ,
          1.       ],
         ...,
         [1.       , 1.       , 1.       , ..., 1.       , 1.       ,
          1.       ],
         [1.       , 1.       , 1.       , ..., 1.       , 1.       ,
          1.       ],
         [1.       , 1.       , 1.       , ..., 1.       , 1.       ,
          0.9998831]],

        [[1.       , 1.       , 1.       , ..., 1.       , 1.       ,
          1.       ],
         [1.       , 1.       , 1.       , ..., 1.       , 1.       ,
          1.       ],
         [1.       , 0.       , 1.       , ..., 1.       , 1.       ,
          1.       ],
         ...,
         [1.       , 1.       , 1.       , ..., 1.       , 1.       ,
          1.       ],
         [1.       , 1.       , 1.       , ..., 1.       , 1.       ,
          1.       ],
         [1.       , 1.       , 1.       , ..., 1.       , 1.       ,
          0.9998831]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [3], 'to': [15]}
tf node:
{'name': 'log', 'output': array([[[[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,        -inf,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        , -0.00011689]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,        -inf,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        , -0.00011689]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,        -inf,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        , -0.00011689]],

        ...,

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,        -inf,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        , -0.00011689]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,        -inf,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        , -0.00011689]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,        -inf,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        , -0.00011689]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [4], 'to': [16]}
ms node:
{'name': 'log', 'output': array([[[[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06,           -inf, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.1850089e-04]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06,           -inf, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.1850089e-04]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06,           -inf, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.1850089e-04]],

        ...,

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06,           -inf, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.1850089e-04]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06,           -inf, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.1850089e-04]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06,           -inf, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.1850089e-04]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [4], 'to': [16]}
torch node:
{'name': 'log', 'output': array([[[[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,        -inf,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        , -0.00011701]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,        -inf,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        , -0.00011701]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,        -inf,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        , -0.00011701]],

        ...,

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,        -inf,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        , -0.00011701]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,        -inf,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        , -0.00011701]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,        -inf,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        , -0.00011701]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [4], 'to': [16]}

generate models:129

analyse output arrays in iter:140

pre layer res:
17:add
{'name': 'add', 'output': array([[[[2285798.5 , 3164301.5 , 2972993.  , ..., 3653371.5 ,
          1692544.8 , 4464993.  ],
         [3553541.  , 1754786.2 , 2648312.5 , ...,  970489.56,
          1929313.9 , 1928486.5 ],
         [2491471.  , 3702459.  , 4282971.  , ..., 3125002.  ,
          1785352.9 , 2115572.  ],
         ...,
         [3335014.5 , 1534758.6 , 2012846.  , ..., 2438188.  ,
          3185519.5 , 1848290.6 ],
         [3824277.2 , 2010596.5 , 1211126.5 , ..., 2186756.5 ,
          2583936.8 , 2923915.5 ],
         [2391008.5 , 3654959.2 , 1390005.  , ..., 1888427.2 ,
          2509145.8 , 1910206.2 ]],

        [[2927986.  , 2872937.5 , 3344265.8 , ..., 2605883.5 ,
           556280.06, 4490263.5 ],
         [4022096.8 , 2455114.8 , 2879251.5 , ..., 1188950.4 ,
          2580809.2 , 2013701.1 ],
         [3322236.  , 4174872.8 , 2507872.2 , ..., 3160998.5 ,
          2289924.5 , 2313360.8 ],
         ...,
         [1785803.5 , 1532585.5 , 2132298.8 , ..., 2944271.2 ,
          2651122.8 , 1604672.8 ],
         [3975341.  , 2441994.  , 1559122.4 , ..., 2120094.  ,
          2523855.  , 1966070.4 ],
         [3426427.  , 2974784.8 , 1800967.5 , ..., 1592755.2 ,
          2349832.  , 1645079.2 ]],

        [[2013030.  , 3725608.5 , 3298735.  , ..., 2647137.  ,
          1558893.  , 4423602.5 ],
         [2581644.2 , 3328619.8 , 2141594.8 , ...,  713067.3 ,
          3202592.5 , 2978446.  ],
         [2167331.5 , 3605650.5 , 3294066.2 , ..., 2694068.2 ,
          2543128.8 , 1869338.  ],
         ...,
         [1759659.6 , 1898042.2 , 2327177.5 , ..., 3210259.5 ,
          1879209.5 , 2369065.  ],
         [3993115.5 , 2925777.2 , 2313297.2 , ..., 2679221.5 ,
          1969375.6 , 2201461.5 ],
         [1849173.5 , 1416720.9 , 2189335.5 , ..., 2500961.2 ,
          3286224.8 , 1485024.1 ]],

        ...,

        [[2927986.  , 2872938.8 , 3344267.8 , ..., 2605881.8 ,
           556278.06, 4490264.  ],
         [4022097.  , 2455115.5 , 2879253.5 , ..., 1188948.4 ,
          2580811.  , 2013701.1 ],
         [3322237.  , 4174870.8 , 2507873.  , ..., 3160998.5 ,
          2289923.5 , 2313359.5 ],
         ...,
         [1785803.5 , 1532585.8 , 2132299.8 , ..., 2944271.2 ,
          2651122.5 , 1604673.1 ],
         [3975341.  , 2441994.  , 1559124.  , ..., 2120093.8 ,
          2523856.8 , 1966070.8 ],
         [3426425.  , 2974784.8 , 1800966.5 , ..., 1592755.2 ,
          2349832.  , 1645079.2 ]],

        [[2013030.  , 3725607.5 , 3298735.  , ..., 2647135.5 ,
          1558894.  , 4423603.  ],
         [2581645.2 , 3328619.5 , 2141594.8 , ...,  713065.94,
          3202592.5 , 2978447.8 ],
         [2167333.  , 3605648.5 , 3294066.  , ..., 2694067.  ,
          2543128.8 , 1869339.2 ],
         ...,
         [1759659.6 , 1898040.2 , 2327177.5 , ..., 3210259.5 ,
          1879209.5 , 2369065.  ],
         [3993115.5 , 2925777.2 , 2313295.2 , ..., 2679223.  ,
          1969376.9 , 2201461.5 ],
         [1849172.  , 1416720.9 , 2189336.5 , ..., 2500962.  ,
          3286222.8 , 1485024.6 ]],

        [[3196460.  , 1775098.6 , 3965409.  , ..., 2184794.8 ,
          1671316.9 , 5013835.5 ],
         [2126977.  , 2774070.5 , 2733471.  , ..., 1030407.6 ,
          3135077.  , 2965140.5 ],
         [4800057.  , 2771298.2 , 3110453.8 , ..., 2076880.8 ,
          3494023.2 , 1803661.4 ],
         ...,
         [2191308.8 , 1455681.1 , 2523331.  , ..., 3337205.  ,
          3094064.5 , 2622991.  ],
         [4058837.5 , 2131641.  ,  936732.75, ..., 2193822.8 ,
          1738400.9 , 3155333.5 ],
         [2220766.5 , 2134662.  , 1250533.6 , ..., 2330376.  ,
          2326992.  , 2135800.8 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [11, 20], 'to': [21]}
tf node:
{'name': 'cos', 'output': array([[[[ 0.68368995,  0.15545325, -0.9801954 , ...,  0.66986465,
           0.6535795 , -0.26798746],
         [-0.7474887 ,  0.82974535,  0.9874642 , ...,  0.2420447 ,
           0.5357315 ,  0.5402703 ],
         [ 0.8916335 , -0.58041555,  0.9993431 , ..., -0.9952785 ,
          -0.09273471, -0.05484473],
         ...,
         [ 0.9637938 , -0.88116986, -0.77284205, ..., -0.46855527,
           0.45544198, -0.8468798 ],
         [-0.6932396 , -0.6915607 ,  0.12024862, ...,  0.78507054,
          -0.34699702, -0.7901242 ],
         [ 0.43570095,  0.48964575,  0.49996853, ..., -0.98046905,
           0.9491961 ,  0.10668945]],

        [[-0.9413139 ,  0.28309706, -0.89136404, ...,  0.06187114,
          -0.17693833, -0.67621225],
         [-0.8782478 , -0.5962905 ,  0.77597255, ..., -0.47774148,
          -0.9523781 , -0.99713683],
         [-0.19674064, -0.6615845 , -0.09555002, ..., -0.9739871 ,
           0.32975003,  0.30014345],
         ...,
         [-0.95926315, -0.9342484 ,  0.75512195, ..., -0.44411463,
          -0.2511592 , -0.8082505 ],
         [ 0.47830388, -0.864242  ,  0.9787533 , ..., -0.9295901 ,
           0.999976  ,  0.41807643],
         [ 0.27412158, -0.32334143,  0.72885185, ...,  0.6899014 ,
          -0.7213347 , -0.99938446]],

        [[-0.45347384,  0.99847174,  0.9930317 , ...,  0.92648214,
          -0.98595965,  0.28412378],
         [-0.9380657 , -0.22969118, -0.7727599 , ...,  0.38244176,
          -0.89687467, -0.8222198 ],
         [-0.99085236,  0.8085116 ,  0.8954127 , ..., -0.18129495,
          -0.997399  , -0.7417819 ],
         ...,
         [-0.9851331 ,  0.34632197,  0.32437652, ..., -0.49254847,
          -0.9929052 , -0.8279836 ],
         [ 0.90439355,  0.8500802 , -0.3553644 , ..., -0.5639688 ,
           0.6637753 , -0.9919178 ],
         [ 0.79718965,  0.6834575 , -0.9129185 , ..., -0.56425774,
           0.85451716,  0.90510637]],

        ...,

        [[-0.9413139 , -0.820896  , -0.04123547, ...,  0.9710725 ,
          -0.82131815, -0.24023598],
         [-0.73263526,  0.11089917, -0.89647305, ...,  0.9976288 ,
           0.46979418, -0.99713683],
         [-0.9313243 , -0.40653917, -0.74843293, ..., -0.9739871 ,
          -0.61624134, -0.8105889 ],
         ...,
         [-0.95926315, -0.81697494,  0.9596494 , ..., -0.44411463,
          -0.00387762, -0.5364077 ],
         [ 0.47830388, -0.864242  , -0.25776616, ..., -0.80949956,
          -0.17142367,  0.7217496 ],
         [-0.98854166, -0.32334143, -0.1823308 , ...,  0.6899014 ,
          -0.7213347 , -0.99938446]],

        [[-0.45347384,  0.5859805 ,  0.9930317 , ..., -0.30985922,
          -0.39220437, -0.21032518],
         [-0.79837286,  0.01823862, -0.7727599 , ...,  0.9807283 ,
          -0.89687467, -0.41349798],
         [ 0.06452233,  0.19864401,  0.75742304, ...,  0.87609243,
          -0.997399  , -0.87032866],
         ...,
         [-0.9851331 , -0.997147  ,  0.32437652, ..., -0.49254847,
          -0.9929052 , -0.8279836 ],
         [ 0.90439355,  0.8500802 , -0.70206183, ..., -0.86362106,
           0.9190792 , -0.9919178 ],
         [ 0.6586076 ,  0.6834575 , -0.14981243, ..., -0.97562116,
          -0.8279148 ,  0.9981502 ]],

        [[-0.84228677, -0.18340278, -0.9381502 , ...,  0.746375  ,
          -0.5470738 , -0.28697824],
         [ 0.8213623 ,  0.97914577, -0.8806544 , ..., -0.97847515,
           0.99995416,  0.10996522],
         [ 0.30107576,  0.39870092,  0.84576845, ...,  0.5228998 ,
           0.90073174, -0.71376085],
         ...,
         [-0.7315312 ,  0.57041764, -0.8026663 , ..., -0.47147438,
          -0.53889936,  0.99452335],
         [ 0.9484375 ,  0.29675746, -0.60032696, ..., -0.09454646,
           0.8363881 ,  0.8870612 ],
         [ 0.97717196,  0.9983549 , -0.7787723 , ...,  0.6357897 ,
          -0.1832772 ,  0.01996741]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [17], 'to': [22]}
ms node:
{'name': 'cos', 'output': array([[[[ 0.68368995,  0.15545325, -0.9801954 , ...,  0.66986465,
           0.6535795 , -0.26798746],
         [-0.7474886 ,  0.7536852 ,  0.9874642 , ...,  0.24204472,
           0.53573143,  0.43114224],
         [ 0.8916335 , -0.5804155 ,  0.9993431 , ..., -0.9952785 ,
          -0.09273471, -0.05484474],
         ...,
         [ 0.9637938 , -0.8811698 , -0.772842  , ..., -0.46855527,
           0.45544198, -0.8468798 ],
         [-0.6932396 , -0.6915606 ,  0.12024862, ...,  0.78507054,
          -0.34699705, -0.7901242 ],
         [ 0.43570095,  0.48964575,  0.49996853, ..., -0.98046905,
           0.9491961 ,  0.10668945]],

        [[-0.9413139 ,  0.28309706, -0.89136404, ...,  0.06187114,
          -0.17693833, -0.67621225],
         [-0.9692552 , -0.5962905 ,  0.77597255, ..., -0.47774145,
          -0.9523781 , -0.99713683],
         [-0.19674063, -0.66158444, -0.09555002, ..., -0.9739871 ,
           0.32975006,  0.30014345],
         ...,
         [-0.95926315, -0.9342484 ,  0.7551219 , ..., -0.44411463,
          -0.25115916, -0.8082505 ],
         [ 0.47830388, -0.8642421 ,  0.9787533 , ..., -0.9295901 ,
           0.999976  ,  0.41807643],
         [ 0.27412155, -0.3233414 ,  0.72885185, ...,  0.6899014 ,
          -0.7213347 , -0.99938446]],

        [[-0.4534738 ,  0.99847174,  0.9930317 , ...,  0.92648214,
          -0.98595965,  0.28412378],
         [-0.9380657 , -0.22969118, -0.77275985, ...,  0.38244176,
          -0.89687467, -0.8222198 ],
         [-0.99085236,  0.8085116 ,  0.8954127 , ..., -0.18129495,
          -0.997399  , -0.7417819 ],
         ...,
         [-0.9851331 ,  0.34632197,  0.32437652, ..., -0.49254847,
          -0.9929052 , -0.8279836 ],
         [ 0.90439355,  0.8500802 , -0.3553644 , ..., -0.5639687 ,
           0.6637753 , -0.9919178 ],
         [ 0.79718965,  0.6834575 , -0.9129185 , ..., -0.56425774,
           0.85451716,  0.9051063 ]],

        ...,

        [[-0.40327284,  0.70825386,  0.20723999, ...,  0.9710725 ,
          -0.82131815, -0.24023598],
         [-0.9692552 ,  0.11089916,  0.9977255 , ...,  0.9976288 ,
           0.98587745, -0.8528853 ],
         [-0.9313243 , -0.18860795, -0.7484329 , ...,  0.6446877 ,
          -0.8291757 ,  0.72072184],
         ...,
         [-0.7560195 , -0.8824972 ,  0.89384115, ..., -0.925141  ,
          -0.9832874 , -0.5364077 ],
         [ 0.47830388, -0.890276  , -0.9523071 , ..., -0.42892212,
          -0.17142367, -0.06861927],
         [-0.98854166, -0.3233414 , -0.8181787 , ...,  0.6899014 ,
           0.19305277, -0.9596366 ]],

        [[ 0.27572215,  0.15860224,  0.9930317 , ...,  0.922092  ,
           0.01143387, -0.9900603 ],
         [-0.79837286,  0.58376086,  0.35865062, ...,  0.96661043,
          -0.75957   , -0.99444044],
         [ 0.51742595, -0.9635651 ,  0.9992566 , ..., -0.7992849 ,
          -0.997399  ,  0.42967317],
         ...,
         [-0.9468975 , -0.7810543 ,  0.73816925, ...,  0.9963204 ,
          -0.97033334, -0.8279836 ],
         [-0.7643571 ,  0.8500802 , -0.70206183, ...,  0.81780773,
           0.9610392 ,  0.29740983],
         [-0.9992095 ,  0.6834575 ,  0.34254217, ..., -0.2879244 ,
          -0.94093436,  0.9981502 ]],

        [[ 0.99738693,  0.04284105, -0.9381502 , ..., -0.7879062 ,
           0.74827445, -0.34338787],
         [ 0.82136226, -0.22273652, -0.99997926, ..., -0.9142507 ,
           0.06118434,  0.10996522],
         [ 0.30107576, -0.05166949,  0.9980292 , ..., -0.8794715 ,
           0.90073174,  0.8054568 ],
         ...,
         [-0.7315312 ,  0.57041764,  0.538156  , ..., -0.11717565,
          -0.53889936, -0.28011075],
         [-0.9495289 ,  0.05127289, -0.60032696, ...,  0.46734083,
           0.8982012 ,  0.7178108 ],
         [-0.9484496 ,  0.5876607 , -0.38269013, ..., -0.29307216,
           0.8751186 ,  0.01996741]]]], dtype=float32), 'output_shape': (1, 128, 8, 8), 'from': [17], 'to': [22]}
torch node:
{'name': 'cos', 'output': array([[[[ 0.68368995,  0.15545325, -0.9801954 , ...,  0.66986465,
           0.6535795 , -0.26798746],
         [-0.7474886 ,  0.7536852 ,  0.9874642 , ...,  0.24204472,
           0.53573143,  0.43114224],
         [ 0.8916335 , -0.5804155 ,  0.9993431 , ..., -0.9952785 ,
          -0.09273471, -0.05484474],
         ...,
         [ 0.9637938 , -0.8811698 , -0.772842  , ..., -0.46855527,
           0.45544198, -0.8468798 ],
         [-0.6932396 , -0.6915606 ,  0.12024862, ...,  0.78507054,
          -0.34699705, -0.7901242 ],
         [ 0.43570095,  0.48964575,  0.49996853, ..., -0.98046905,
           0.9491961 ,  0.10668945]],

        [[-0.9413139 ,  0.28309706, -0.89136404, ...,  0.06187114,
          -0.17693833, -0.67621225],
         [-0.9692552 , -0.5962905 ,  0.77597255, ..., -0.47774145,
          -0.9523781 , -0.99713683],
         [-0.19674063, -0.66158444, -0.09555002, ..., -0.9739871 ,
           0.32975006,  0.30014345],
         ...,
         [-0.95926315, -0.9342484 ,  0.7551219 , ..., -0.44411463,
          -0.25115916, -0.8082505 ],
         [ 0.47830388, -0.8642421 ,  0.9787533 , ..., -0.9295901 ,
           0.999976  ,  0.41807643],
         [ 0.27412155, -0.3233414 ,  0.72885185, ...,  0.6899014 ,
          -0.7213347 , -0.99938446]],

        [[-0.4534738 ,  0.99847174,  0.9930317 , ...,  0.92648214,
          -0.98595965,  0.28412378],
         [-0.9380657 , -0.22969119, -0.77275985, ...,  0.38244176,
          -0.89687467, -0.8222198 ],
         [-0.99085236,  0.8085116 ,  0.8954127 , ..., -0.18129495,
          -0.997399  , -0.7417819 ],
         ...,
         [-0.9851331 ,  0.34632197,  0.32437652, ..., -0.49254847,
          -0.9929052 , -0.8279836 ],
         [ 0.90439355,  0.8500802 , -0.3553644 , ..., -0.5639687 ,
           0.6637753 , -0.9919178 ],
         [ 0.79718965,  0.6834575 , -0.9129185 , ..., -0.56425774,
           0.85451716,  0.9051063 ]],

        ...,

        [[-0.9413139 , -0.820896  , -0.04123546, ...,  0.9710725 ,
          -0.82131815, -0.24023598],
         [-0.7326352 ,  0.11089917, -0.89647305, ...,  0.9976288 ,
           0.46979418, -0.99713683],
         [-0.9313243 , -0.4065392 , -0.7484329 , ..., -0.9739871 ,
          -0.61624134, -0.93027323],
         ...,
         [-0.95926315, -0.81697494,  0.9596494 , ..., -0.44411463,
          -0.00387762, -0.5364077 ],
         [ 0.47830388, -0.8642421 , -0.25776616, ..., -0.80949956,
          -0.17142367,  0.7217496 ],
         [-0.98854166, -0.3233414 , -0.18233082, ...,  0.6899014 ,
          -0.7213347 , -0.99938446]],

        [[-0.4534738 ,  0.5859805 ,  0.9930317 , ..., -0.30985922,
          -0.3922044 , -0.21032518],
         [-0.79837286,  0.01823862, -0.77275985, ...,  0.9807283 ,
          -0.89687467, -0.41349798],
         [ 0.06452233,  0.19864401,  0.75742304, ...,  0.87609243,
          -0.997399  , -0.9249368 ],
         ...,
         [-0.9851331 , -0.997147  ,  0.32437652, ..., -0.49254847,
          -0.9929052 , -0.8279836 ],
         [ 0.90439355,  0.8500802 , -0.70206183, ..., -0.86362106,
           0.9190792 , -0.9919178 ],
         [ 0.6586076 ,  0.6834575 , -0.14981243, ..., -0.97562116,
          -0.8279148 ,  0.9981502 ]],

        [[-0.84228677, -0.18340276, -0.9381502 , ...,  0.746375  ,
          -0.5470738 , -0.28697827],
         [ 0.8213623 ,  0.97914577, -0.8806544 , ..., -0.97847515,
           0.99995416,  0.10996522],
         [ 0.30107576,  0.3987009 ,  0.84576845, ...,  0.5228998 ,
           0.90073174, -0.79551274],
         ...,
         [-0.8774716 ,  0.57041764, -0.8026663 , ..., -0.47147438,
          -0.53889936,  0.99452335],
         [ 0.9484375 ,  0.2967575 , -0.60032696, ..., -0.09454645,
           0.83638805,  0.8870611 ],
         [ 0.97717196,  0.9983549 , -0.7787723 , ...,  0.6357897 ,
          -0.1832772 ,  0.01996741]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 8, 8]), 'from': [17], 'to': [22]}

generate models:133

analyse output arrays in iter:142

pre layer res:
13:square
{'name': 'square', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [17], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [13], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [13], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [13], 'to': []}

generate models:135

analyse output arrays in iter:149

pre layer res:
13:empty_seq_operator
{'name': 'empty_seq_operator', 'output': array([[[[2466154.8, 3260831.8, 2923421.8, ..., 2123220. , 2624131. ,
          3811616.5],
         [3716631. , 1955616.1, 4505408.5, ..., 4410007. , 4631324.5,
          2511229.2],
         [3963304.2, 3298698. , 2730013.5, ..., 1963876.2, 3067071.8,
          5051947. ],
         ...,
         [2377501. , 2373714. , 3454263. , ..., 3391798.2, 3741736.8,
          3798464.2],
         [2985184.2, 1705284.9, 1909451.6, ..., 3065727.8, 3483095. ,
          4174072. ],
         [2910527.8, 3372832.8, 3774711.2, ..., 2054976.1, 2690914.5,
          3526761.5]],

        [[2466154.8, 3260831.8, 2923421.8, ..., 2123220. , 2624131. ,
          3811616.5],
         [3716631. , 1955616.1, 4505408.5, ..., 4410007. , 4631324.5,
          2511229.2],
         [3963304.2, 3298698. , 2730013.5, ..., 1963876.2, 3067071.8,
          5051947. ],
         ...,
         [2377501. , 2373714. , 3454263. , ..., 3391798.2, 3741736.8,
          3798464.2],
         [2985184.2, 1705284.9, 1909451.6, ..., 3065727.8, 3483095. ,
          4174072. ],
         [2910527.8, 3372832.8, 3774711.2, ..., 2054976.1, 2690914.5,
          3526761.5]],

        [[2466154.8, 3260831.8, 2923421.8, ..., 2123220. , 2624131. ,
          3811616.5],
         [3716631. , 1955616.1, 4505408.5, ..., 4410007. , 4631324.5,
          2511229.2],
         [3963304.2, 3298698. , 2730013.5, ..., 1963876.2, 3067071.8,
          5051947. ],
         ...,
         [2377501. , 2373714. , 3454263. , ..., 3391798.2, 3741736.8,
          3798464.2],
         [2985184.2, 1705284.9, 1909451.6, ..., 3065727.8, 3483095. ,
          4174072. ],
         [2910527.8, 3372832.8, 3774711.2, ..., 2054976.1, 2690914.5,
          3526761.5]],

        ...,

        [[2466154.8, 3260831.8, 2923421.8, ..., 2123220. , 2624131. ,
          3811616.5],
         [3716631. , 1955616.1, 4505408.5, ..., 4410007. , 4631324.5,
          2511229.2],
         [3963304.2, 3298698. , 2730013.5, ..., 1963876.2, 3067071.8,
          5051947. ],
         ...,
         [2377501. , 2373714. , 3454263. , ..., 3391798.2, 3741736.8,
          3798464.2],
         [2985184.2, 1705284.9, 1909451.6, ..., 3065727.8, 3483095. ,
          4174072. ],
         [2910527.8, 3372832.8, 3774711.2, ..., 2054976.1, 2690914.5,
          3526761.5]],

        [[2466154.8, 3260831.8, 2923421.8, ..., 2123220. , 2624131. ,
          3811616.5],
         [3716631. , 1955616.1, 4505408.5, ..., 4410007. , 4631324.5,
          2511229.2],
         [3963304.2, 3298698. , 2730013.5, ..., 1963876.2, 3067071.8,
          5051947. ],
         ...,
         [2377501. , 2373714. , 3454263. , ..., 3391798.2, 3741736.8,
          3798464.2],
         [2985184.2, 1705284.9, 1909451.6, ..., 3065727.8, 3483095. ,
          4174072. ],
         [2910527.8, 3372832.8, 3774711.2, ..., 2054976.1, 2690914.5,
          3526761.5]],

        [[2466154.8, 3260831.8, 2923421.8, ..., 2123220. , 2624131. ,
          3811616.5],
         [3716631. , 1955616.1, 4505408.5, ..., 4410007. , 4631324.5,
          2511229.2],
         [3963304.2, 3298698. , 2730013.5, ..., 1963876.2, 3067071.8,
          5051947. ],
         ...,
         [2377501. , 2373714. , 3454263. , ..., 3391798.2, 3741736.8,
          3798464.2],
         [2985184.2, 1705284.9, 1909451.6, ..., 3065727.8, 3483095. ,
          4174072. ],
         [2910527.8, 3372832.8, 3774711.2, ..., 2054976.1, 2690914.5,
          3526761.5]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [9], 'to': [14]}
tf node:
{'name': 'cos', 'output': array([[[[-0.19421482, -0.9986087 ,  0.9902395 , ...,  0.9658253 ,
          -0.87621796, -0.78182065],
         [ 0.33697224,  0.9857335 ,  0.97802997, ..., -0.8546687 ,
           0.38420612, -0.954163  ],
         [-0.972171  ,  0.83592   ,  0.62164366, ..., -0.7591466 ,
          -0.6853253 , -0.5213638 ],
         ...,
         [ 0.97402287, -0.40627608,  0.98085946, ..., -0.9644877 ,
           0.80720764, -0.6448753 ],
         [ 0.47859877, -0.9941415 , -0.5105895 , ..., -0.15279372,
           0.22738424,  0.35863304],
         [ 0.7221311 ,  0.9996205 ,  0.9588472 , ..., -0.7775561 ,
          -0.5574634 , -0.9868579 ]],

        [[-0.19421482, -0.9986087 ,  0.9902395 , ...,  0.9658253 ,
          -0.87621796, -0.78182065],
         [ 0.33697224,  0.9857335 ,  0.97802997, ..., -0.8546687 ,
           0.38420612, -0.954163  ],
         [-0.972171  ,  0.83592   ,  0.62164366, ..., -0.7591466 ,
          -0.6853253 , -0.5213638 ],
         ...,
         [ 0.97402287, -0.40627608,  0.98085946, ..., -0.9644877 ,
           0.80720764, -0.6448753 ],
         [ 0.47859877, -0.9941415 , -0.5105895 , ..., -0.15279372,
           0.22738424,  0.35863304],
         [ 0.7221311 ,  0.9996205 ,  0.9588472 , ..., -0.7775561 ,
          -0.5574634 , -0.9868579 ]],

        [[-0.19421482, -0.9986087 ,  0.9902395 , ...,  0.9658253 ,
          -0.87621796, -0.78182065],
         [ 0.33697224,  0.9857335 ,  0.97802997, ..., -0.8546687 ,
           0.38420612, -0.954163  ],
         [-0.972171  ,  0.83592   ,  0.62164366, ..., -0.7591466 ,
          -0.6853253 , -0.5213638 ],
         ...,
         [ 0.97402287, -0.40627608,  0.98085946, ..., -0.9644877 ,
           0.80720764, -0.6448753 ],
         [ 0.47859877, -0.9941415 , -0.5105895 , ..., -0.15279372,
           0.22738424,  0.35863304],
         [ 0.7221311 ,  0.9996205 ,  0.9588472 , ..., -0.7775561 ,
          -0.5574634 , -0.9868579 ]],

        ...,

        [[-0.19421482, -0.9986087 ,  0.9902395 , ...,  0.9658253 ,
          -0.87621796, -0.78182065],
         [ 0.33697224,  0.9857335 ,  0.97802997, ..., -0.8546687 ,
           0.38420612, -0.954163  ],
         [-0.972171  ,  0.83592   ,  0.62164366, ..., -0.7591466 ,
          -0.6853253 , -0.5213638 ],
         ...,
         [ 0.97402287, -0.40627608,  0.98085946, ..., -0.9644877 ,
           0.80720764, -0.6448753 ],
         [ 0.47859877, -0.9941415 , -0.5105895 , ..., -0.15279372,
           0.22738424,  0.35863304],
         [ 0.7221311 ,  0.9996205 ,  0.9588472 , ..., -0.7775561 ,
          -0.5574634 , -0.9868579 ]],

        [[-0.19421482, -0.9986087 ,  0.9902395 , ...,  0.9658253 ,
          -0.87621796, -0.78182065],
         [ 0.33697224,  0.9857335 ,  0.97802997, ..., -0.8546687 ,
           0.38420612, -0.954163  ],
         [-0.972171  ,  0.83592   ,  0.62164366, ..., -0.7591466 ,
          -0.6853253 , -0.5213638 ],
         ...,
         [ 0.97402287, -0.40627608,  0.98085946, ..., -0.9644877 ,
           0.80720764, -0.6448753 ],
         [ 0.47859877, -0.9941415 , -0.5105895 , ..., -0.15279372,
           0.22738424,  0.35863304],
         [ 0.7221311 ,  0.9996205 ,  0.9588472 , ..., -0.7775561 ,
          -0.5574634 , -0.9868579 ]],

        [[-0.19421482, -0.9986087 ,  0.9902395 , ...,  0.9658253 ,
          -0.87621796, -0.78182065],
         [ 0.33697224,  0.9857335 ,  0.97802997, ..., -0.8546687 ,
           0.38420612, -0.954163  ],
         [-0.972171  ,  0.83592   ,  0.62164366, ..., -0.7591466 ,
          -0.6853253 , -0.5213638 ],
         ...,
         [ 0.97402287, -0.40627608,  0.98085946, ..., -0.9644877 ,
           0.80720764, -0.6448753 ],
         [ 0.47859877, -0.9941415 , -0.5105895 , ..., -0.15279372,
           0.22738424,  0.35863304],
         [ 0.7221311 ,  0.9996205 ,  0.9588472 , ..., -0.7775561 ,
          -0.5574634 , -0.9868579 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [13], 'to': [10]}
ms node:
{'name': 'cos', 'output': array([[[[-0.19421482, -0.9986087 ,  0.9902395 , ...,  0.9658253 ,
          -0.8762179 , -0.6032585 ],
         [ 0.33697224,  0.9857335 ,  0.97802997, ..., -0.8546687 ,
           0.38420612, -0.954163  ],
         [-0.972171  ,  0.83592   ,  0.62164366, ..., -0.7591466 ,
          -0.6853253 , -0.5213638 ],
         ...,
         [ 0.97402287, -0.40627608,  0.98085946, ..., -0.9644877 ,
           0.8072076 , -0.6448753 ],
         [ 0.47859877, -0.9941415 , -0.5105895 , ..., -0.15279372,
           0.22738424,  0.35863304],
         [ 0.7221311 ,  0.9996205 ,  0.9588472 , ..., -0.77755606,
          -0.5574634 , -0.9868579 ]],

        [[-0.19421482, -0.9986087 ,  0.9902395 , ...,  0.9658253 ,
          -0.8762179 , -0.6032585 ],
         [ 0.33697224,  0.9857335 ,  0.97802997, ..., -0.8546687 ,
           0.38420612, -0.954163  ],
         [-0.972171  ,  0.83592   ,  0.62164366, ..., -0.7591466 ,
          -0.6853253 , -0.5213638 ],
         ...,
         [ 0.97402287, -0.40627608,  0.98085946, ..., -0.9644877 ,
           0.8072076 , -0.6448753 ],
         [ 0.47859877, -0.9941415 , -0.5105895 , ..., -0.15279372,
           0.22738424,  0.35863304],
         [ 0.7221311 ,  0.9996205 ,  0.9588472 , ..., -0.77755606,
          -0.5574634 , -0.9868579 ]],

        [[-0.19421482, -0.9986087 ,  0.9902395 , ...,  0.9658253 ,
          -0.8762179 , -0.6032585 ],
         [ 0.33697224,  0.9857335 ,  0.97802997, ..., -0.8546687 ,
           0.38420612, -0.954163  ],
         [-0.972171  ,  0.83592   ,  0.62164366, ..., -0.7591466 ,
          -0.6853253 , -0.5213638 ],
         ...,
         [ 0.97402287, -0.40627608,  0.98085946, ..., -0.9644877 ,
           0.8072076 , -0.6448753 ],
         [ 0.47859877, -0.9941415 , -0.5105895 , ..., -0.15279372,
           0.22738424,  0.35863304],
         [ 0.7221311 ,  0.9996205 ,  0.9588472 , ..., -0.77755606,
          -0.5574634 , -0.9868579 ]],

        ...,

        [[-0.19421482, -0.9986087 ,  0.9902395 , ...,  0.9658253 ,
          -0.8762179 , -0.6032585 ],
         [ 0.33697224,  0.9857335 ,  0.97802997, ..., -0.8546687 ,
           0.38420612, -0.954163  ],
         [-0.972171  ,  0.83592   ,  0.62164366, ..., -0.7591466 ,
          -0.6853253 , -0.5213638 ],
         ...,
         [ 0.97402287, -0.40627608,  0.98085946, ..., -0.9644877 ,
           0.8072076 , -0.6448753 ],
         [ 0.47859877, -0.9941415 , -0.5105895 , ..., -0.15279372,
           0.22738424,  0.35863304],
         [ 0.7221311 ,  0.9996205 ,  0.9588472 , ..., -0.77755606,
          -0.5574634 , -0.9868579 ]],

        [[-0.4308703 , -0.9986087 , -0.28535065, ..., -0.9406622 ,
           0.7994413 , -0.14704534],
         [ 0.5316215 ,  0.99902695,  0.97802997, ..., -0.9656927 ,
          -0.51064986,  0.5853065 ],
         [-0.5567363 ,  0.97962797,  0.21896474, ...,  0.3696141 ,
          -0.6853253 , -0.5213638 ],
         ...,
         [-0.8138647 ,  0.97153467,  0.7457381 , ..., -0.96486014,
           0.99635357, -0.6448753 ],
         [ 0.47859877,  0.9994458 ,  0.779757  , ..., -0.15279372,
           0.69078636,  0.9656608 ],
         [ 0.7221311 ,  0.864043  ,  0.5363439 , ..., -0.77755606,
          -0.05024423, -0.991676  ]],

        [[-0.4308703 , -0.9986087 , -0.28535065, ..., -0.9406622 ,
           0.7994413 , -0.14704534],
         [ 0.5316215 ,  0.99902695,  0.97802997, ..., -0.9656927 ,
          -0.51064986,  0.5853065 ],
         [-0.5567363 ,  0.97962797,  0.21896474, ...,  0.3696141 ,
          -0.6853253 , -0.5213638 ],
         ...,
         [-0.8138647 ,  0.97153467,  0.7457381 , ..., -0.96486014,
           0.99635357, -0.6448753 ],
         [ 0.47859877,  0.9994458 ,  0.779757  , ..., -0.15279372,
           0.69078636,  0.9656608 ],
         [ 0.7221311 ,  0.864043  ,  0.5363439 , ..., -0.77755606,
          -0.05024423, -0.991676  ]]]], dtype=float32), 'output_shape': (1, 128, 8, 8), 'from': [13], 'to': [10]}
torch node:
{'name': 'cos', 'output': array([[[[-0.19421482, -0.9986087 ,  0.9902395 , ...,  0.9658253 ,
          -0.8762179 , -0.6032585 ],
         [ 0.33697224,  0.9857335 ,  0.97802997, ..., -0.8546687 ,
           0.38420612, -0.954163  ],
         [-0.972171  ,  0.83592   ,  0.62164366, ..., -0.7591466 ,
          -0.6853253 , -0.5213638 ],
         ...,
         [ 0.97402287, -0.40627608,  0.98085946, ..., -0.9644877 ,
           0.8072076 , -0.6448753 ],
         [ 0.47859877, -0.9941415 , -0.5105895 , ..., -0.15279372,
           0.22738424,  0.35863304],
         [ 0.7221311 ,  0.9996205 ,  0.9588472 , ..., -0.77755606,
          -0.5574634 , -0.9868579 ]],

        [[-0.19421482, -0.9986087 ,  0.9902395 , ...,  0.9658253 ,
          -0.8762179 , -0.6032585 ],
         [ 0.33697224,  0.9857335 ,  0.97802997, ..., -0.8546687 ,
           0.38420612, -0.954163  ],
         [-0.972171  ,  0.83592   ,  0.62164366, ..., -0.7591466 ,
          -0.6853253 , -0.5213638 ],
         ...,
         [ 0.97402287, -0.40627608,  0.98085946, ..., -0.9644877 ,
           0.8072076 , -0.6448753 ],
         [ 0.47859877, -0.9941415 , -0.5105895 , ..., -0.15279372,
           0.22738424,  0.35863304],
         [ 0.7221311 ,  0.9996205 ,  0.9588472 , ..., -0.77755606,
          -0.5574634 , -0.9868579 ]],

        [[-0.19421482, -0.9986087 ,  0.9902395 , ...,  0.9658253 ,
          -0.8762179 , -0.6032585 ],
         [ 0.33697224,  0.9857335 ,  0.97802997, ..., -0.8546687 ,
           0.38420612, -0.954163  ],
         [-0.972171  ,  0.83592   ,  0.62164366, ..., -0.7591466 ,
          -0.6853253 , -0.5213638 ],
         ...,
         [ 0.97402287, -0.40627608,  0.98085946, ..., -0.9644877 ,
           0.8072076 , -0.6448753 ],
         [ 0.47859877, -0.9941415 , -0.5105895 , ..., -0.15279372,
           0.22738424,  0.35863304],
         [ 0.7221311 ,  0.9996205 ,  0.9588472 , ..., -0.77755606,
          -0.5574634 , -0.9868579 ]],

        ...,

        [[-0.19421482, -0.9986087 ,  0.9902395 , ...,  0.9658253 ,
          -0.8762179 , -0.6032585 ],
         [ 0.33697224,  0.9857335 ,  0.97802997, ..., -0.8546687 ,
           0.38420612, -0.954163  ],
         [-0.972171  ,  0.83592   ,  0.62164366, ..., -0.7591466 ,
          -0.6853253 , -0.5213638 ],
         ...,
         [ 0.97402287, -0.40627608,  0.98085946, ..., -0.9644877 ,
           0.8072076 , -0.6448753 ],
         [ 0.47859877, -0.9941415 , -0.5105895 , ..., -0.15279372,
           0.22738424,  0.35863304],
         [ 0.7221311 ,  0.9996205 ,  0.9588472 , ..., -0.77755606,
          -0.5574634 , -0.9868579 ]],

        [[-0.19421482, -0.9986087 ,  0.9902395 , ...,  0.9658253 ,
          -0.8762179 , -0.6032585 ],
         [ 0.33697224,  0.9857335 ,  0.97802997, ..., -0.8546687 ,
           0.38420612, -0.954163  ],
         [-0.972171  ,  0.83592   ,  0.62164366, ..., -0.7591466 ,
          -0.6853253 , -0.5213638 ],
         ...,
         [ 0.97402287, -0.40627608,  0.98085946, ..., -0.9644877 ,
           0.8072076 , -0.6448753 ],
         [ 0.47859877, -0.9941415 , -0.5105895 , ..., -0.15279372,
           0.22738424,  0.35863304],
         [ 0.7221311 ,  0.9996205 ,  0.9588472 , ..., -0.77755606,
          -0.5574634 , -0.9868579 ]],

        [[-0.19421482, -0.9986087 ,  0.9902395 , ...,  0.9658253 ,
          -0.8762179 , -0.6032585 ],
         [ 0.33697224,  0.9857335 ,  0.97802997, ..., -0.8546687 ,
           0.38420612, -0.954163  ],
         [-0.972171  ,  0.83592   ,  0.62164366, ..., -0.7591466 ,
          -0.6853253 , -0.5213638 ],
         ...,
         [ 0.97402287, -0.40627608,  0.98085946, ..., -0.9644877 ,
           0.8072076 , -0.6448753 ],
         [ 0.47859877, -0.9941415 , -0.5105895 , ..., -0.15279372,
           0.22738424,  0.35863304],
         [ 0.7221311 ,  0.9996205 ,  0.9588472 , ..., -0.77755606,
          -0.5574634 , -0.9868579 ]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 8, 8]), 'from': [13], 'to': [10]}

generate models:141

analyse output arrays in iter:165

pre layer res:
5:conv2d
{'name': 'conv2d', 'output': array([[[[475.99362, 510.47067, 499.5137 , ..., 586.56683, 640.07416,
          595.1137 ],
         [579.9283 , 584.6852 , 543.83545, ..., 547.2847 , 599.4145 ,
          542.3534 ],
         [     -inf, 622.5621 , 610.5976 , ..., 464.99945, 473.8794 ,
          589.99963],
         ...,
         [547.6548 , 544.2677 , 577.4028 , ..., 577.1095 , 556.8494 ,
               -inf],
         [526.0723 , 584.2774 , 568.28735, ..., 546.27515, 530.6112 ,
          583.18744],
         [570.80695, 539.13916, 145.99063, ..., 514.6011 , 595.4097 ,
          448.64984]],

        [[475.99362, 510.47067, 499.5137 , ..., 586.56683, 640.07416,
          595.1137 ],
         [579.9283 , 584.6852 , 543.83545, ..., 547.2847 , 599.4145 ,
          542.3534 ],
         [     -inf, 622.5621 , 610.5976 , ..., 464.99945, 473.8794 ,
          589.99963],
         ...,
         [547.6548 , 544.2677 , 577.4028 , ..., 577.1095 , 556.8494 ,
               -inf],
         [526.0723 , 584.2774 , 568.28735, ..., 546.27515, 530.6112 ,
          583.18744],
         [570.80695, 539.13916, 145.99063, ..., 514.6011 , 595.4097 ,
          448.64984]],

        [[475.99362, 510.47067, 499.5137 , ..., 586.56683, 640.07416,
          595.1137 ],
         [579.9283 , 584.6852 , 543.83545, ..., 547.2847 , 599.4145 ,
          542.3534 ],
         [     -inf, 622.5621 , 610.5976 , ..., 464.99945, 473.8794 ,
          589.99963],
         ...,
         [547.6548 , 544.2677 , 577.4028 , ..., 577.1095 , 556.8494 ,
               -inf],
         [526.0723 , 584.2774 , 568.28735, ..., 546.27515, 530.6112 ,
          583.18744],
         [570.80695, 539.13916, 145.99063, ..., 514.6011 , 595.4097 ,
          448.64984]],

        ...,

        [[475.99362, 510.47067, 499.5137 , ..., 586.56683, 640.07416,
          595.1137 ],
         [579.9283 , 584.6852 , 543.83545, ..., 547.2847 , 599.4145 ,
          542.3534 ],
         [     -inf, 622.5621 , 610.5976 , ..., 464.99945, 473.8794 ,
          589.99963],
         ...,
         [547.6548 , 544.2677 , 577.4028 , ..., 577.1095 , 556.8494 ,
               -inf],
         [526.0723 , 584.2774 , 568.28735, ..., 546.27515, 530.6112 ,
          583.18744],
         [570.80695, 539.13916, 145.99063, ..., 514.6011 , 595.4097 ,
          448.64984]],

        [[475.99362, 510.47067, 499.5137 , ..., 586.56683, 640.07416,
          595.1137 ],
         [579.9283 , 584.6852 , 543.83545, ..., 547.2847 , 599.4145 ,
          542.3534 ],
         [     -inf, 622.5621 , 610.5976 , ..., 464.99945, 473.8794 ,
          589.99963],
         ...,
         [547.6548 , 544.2677 , 577.4028 , ..., 577.1095 , 556.8494 ,
               -inf],
         [526.0723 , 584.2774 , 568.28735, ..., 546.27515, 530.6112 ,
          583.18744],
         [570.80695, 539.13916, 145.99063, ..., 514.6011 , 595.4097 ,
          448.64984]],

        [[475.99362, 510.47067, 499.5137 , ..., 586.56683, 640.07416,
          595.1137 ],
         [579.9283 , 584.6852 , 543.83545, ..., 547.2847 , 599.4145 ,
          542.3534 ],
         [     -inf, 622.5621 , 610.5976 , ..., 464.99945, 473.8794 ,
          589.99963],
         ...,
         [547.6548 , 544.2677 , 577.4028 , ..., 577.1095 , 556.8494 ,
               -inf],
         [526.0723 , 584.2774 , 568.28735, ..., 546.27515, 530.6112 ,
          583.18744],
         [570.80695, 539.13916, 145.99063, ..., 514.6011 , 595.4097 ,
          448.64984]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [20], 'to': [11]}
tf node:
{'name': 'sin', 'output': array([[[[-9.9910402e-01,  9.9927300e-01, -4.7047177e-04, ...,
           7.9011261e-01, -7.2479975e-01, -9.7631049e-01],
         [ 9.5401525e-01,  3.4190854e-01, -3.3341178e-01, ...,
           6.0327989e-01,  5.8890808e-01,  9.0952319e-01],
         [           nan,  5.0270694e-01,  9.0382272e-01, ...,
           4.3724008e-02,  4.8038724e-01, -5.8086020e-01],
         ...,
         [ 8.5088283e-01, -6.9769228e-01, -6.0540712e-01, ...,
          -8.0964744e-01, -7.0861024e-01,            nan],
         [-9.8958623e-01, -5.8794856e-02,  3.3435124e-01, ...,
          -3.5412219e-01,  3.1262225e-01, -9.1227090e-01],
         [-8.2086116e-01, -9.3729144e-01,  9.9563885e-01, ...,
          -5.8113360e-01, -9.9696571e-01,  5.6291473e-01]],

        [[-9.9910402e-01,  9.9927300e-01, -4.7047177e-04, ...,
           7.9011261e-01, -7.2479975e-01, -9.7631049e-01],
         [ 9.5401525e-01,  3.4190854e-01, -3.3341178e-01, ...,
           6.0327989e-01,  5.8890808e-01,  9.0952319e-01],
         [           nan,  5.0270694e-01,  9.0382272e-01, ...,
           4.3724008e-02,  4.8038724e-01, -5.8086020e-01],
         ...,
         [ 8.5088283e-01, -6.9769228e-01, -6.0540712e-01, ...,
          -8.0964744e-01, -7.0861024e-01,            nan],
         [-9.8958623e-01, -5.8794856e-02,  3.3435124e-01, ...,
          -3.5412219e-01,  3.1262225e-01, -9.1227090e-01],
         [-8.2086116e-01, -9.3729144e-01,  9.9563885e-01, ...,
          -5.8113360e-01, -9.9696571e-01,  5.6291473e-01]],

        [[-9.9910402e-01,  9.9927300e-01, -4.7047177e-04, ...,
           7.9011261e-01, -7.2479975e-01, -9.7631049e-01],
         [ 9.5401525e-01,  3.4190854e-01, -3.3341178e-01, ...,
           6.0327989e-01,  5.8890808e-01,  9.0952319e-01],
         [           nan,  5.0270694e-01,  9.0382272e-01, ...,
           4.3724008e-02,  4.8038724e-01, -5.8086020e-01],
         ...,
         [ 8.5088283e-01, -6.9769228e-01, -6.0540712e-01, ...,
          -8.0964744e-01, -7.0861024e-01,            nan],
         [-9.8958623e-01, -5.8794856e-02,  3.3435124e-01, ...,
          -3.5412219e-01,  3.1262225e-01, -9.1227090e-01],
         [-8.2086116e-01, -9.3729144e-01,  9.9563885e-01, ...,
          -5.8113360e-01, -9.9696571e-01,  5.6291473e-01]],

        ...,

        [[-9.9910402e-01,  9.9927300e-01, -4.7047177e-04, ...,
           7.9011261e-01, -7.2479975e-01, -9.7631049e-01],
         [ 9.5401525e-01,  3.4190854e-01, -3.3341178e-01, ...,
           6.0327989e-01,  5.8890808e-01,  9.0952319e-01],
         [           nan,  5.0270694e-01,  9.0382272e-01, ...,
           4.3724008e-02,  4.8038724e-01, -5.8086020e-01],
         ...,
         [ 8.5088283e-01, -6.9769228e-01, -6.0540712e-01, ...,
          -8.0964744e-01, -7.0861024e-01,            nan],
         [-9.8958623e-01, -5.8794856e-02,  3.3435124e-01, ...,
          -3.5412219e-01,  3.1262225e-01, -9.1227090e-01],
         [-8.2086116e-01, -9.3729144e-01,  9.9563885e-01, ...,
          -5.8113360e-01, -9.9696571e-01,  5.6291473e-01]],

        [[-9.9910402e-01,  9.9927300e-01, -4.7047177e-04, ...,
           7.9011261e-01, -7.2479975e-01, -9.7631049e-01],
         [ 9.5401525e-01,  3.4190854e-01, -3.3341178e-01, ...,
           6.0327989e-01,  5.8890808e-01,  9.0952319e-01],
         [           nan,  5.0270694e-01,  9.0382272e-01, ...,
           4.3724008e-02,  4.8038724e-01, -5.8086020e-01],
         ...,
         [ 8.5088283e-01, -6.9769228e-01, -6.0540712e-01, ...,
          -8.0964744e-01, -7.0861024e-01,            nan],
         [-9.8958623e-01, -5.8794856e-02,  3.3435124e-01, ...,
          -3.5412219e-01,  3.1262225e-01, -9.1227090e-01],
         [-8.2086116e-01, -9.3729144e-01,  9.9563885e-01, ...,
          -5.8113360e-01, -9.9696571e-01,  5.6291473e-01]],

        [[-9.9910402e-01,  9.9927300e-01, -4.7047177e-04, ...,
           7.9011261e-01, -7.2479975e-01, -9.7631049e-01],
         [ 9.5401525e-01,  3.4190854e-01, -3.3341178e-01, ...,
           6.0327989e-01,  5.8890808e-01,  9.0952319e-01],
         [           nan,  5.0270694e-01,  9.0382272e-01, ...,
           4.3724008e-02,  4.8038724e-01, -5.8086020e-01],
         ...,
         [ 8.5088283e-01, -6.9769228e-01, -6.0540712e-01, ...,
          -8.0964744e-01, -7.0861024e-01,            nan],
         [-9.8958623e-01, -5.8794856e-02,  3.3435124e-01, ...,
          -3.5412219e-01,  3.1262225e-01, -9.1227090e-01],
         [-8.2086116e-01, -9.3729144e-01,  9.9563885e-01, ...,
          -5.8113360e-01, -9.9696571e-01,  5.6291473e-01]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [5], 'to': [6]}
ms node:
{'name': 'sin', 'output': array([[[[-9.9914235e-01,  9.9927300e-01, -4.7047177e-04, ...,
           7.9011261e-01, -7.2479969e-01, -9.7631049e-01],
         [ 9.5399696e-01,  3.4173647e-01, -3.3254853e-01, ...,
           6.0327989e-01,  5.8821726e-01,  9.0952319e-01],
         [           nan,  5.0270694e-01,  9.0379661e-01, ...,
           4.3754496e-02,  4.8046753e-01, -5.8086026e-01],
         ...,
         [ 8.5088283e-01, -6.9769228e-01, -6.0545570e-01, ...,
          -8.0964744e-01, -7.0861018e-01,            nan],
         [-9.8958623e-01, -5.8916714e-02,  3.3435124e-01, ...,
          -3.5406509e-01,  3.1268021e-01, -9.1227090e-01],
         [-8.2086110e-01, -9.3729144e-01,  9.9564171e-01, ...,
          -5.8113360e-01, -9.9696571e-01,  5.6364602e-01]],

        [[-9.9914235e-01,  9.9927300e-01, -4.7047177e-04, ...,
           7.9011261e-01, -7.2479969e-01, -9.7631049e-01],
         [ 9.5399696e-01,  3.4173647e-01, -3.3254853e-01, ...,
           6.0327989e-01,  5.8821726e-01,  9.0952319e-01],
         [           nan,  5.0270694e-01,  9.0379661e-01, ...,
           4.3754496e-02,  4.8046753e-01, -5.8086026e-01],
         ...,
         [ 8.5088283e-01, -6.9769228e-01, -6.0545570e-01, ...,
          -8.0964744e-01, -7.0861018e-01,            nan],
         [-9.8958623e-01, -5.8916714e-02,  3.3435124e-01, ...,
          -3.5406509e-01,  3.1268021e-01, -9.1227090e-01],
         [-8.2086110e-01, -9.3729144e-01,  9.9564171e-01, ...,
          -5.8113360e-01, -9.9696571e-01,  5.6364602e-01]],

        [[-9.9914235e-01,  9.9927300e-01, -4.7047177e-04, ...,
           7.9011261e-01, -7.2479969e-01, -9.7631049e-01],
         [ 9.5399696e-01,  3.4173647e-01, -3.3254853e-01, ...,
           6.0327989e-01,  5.8821726e-01,  9.0952319e-01],
         [           nan,  5.0270694e-01,  9.0379661e-01, ...,
           4.3754496e-02,  4.8046753e-01, -5.8086026e-01],
         ...,
         [ 8.5088283e-01, -6.9769228e-01, -6.0545570e-01, ...,
          -8.0964744e-01, -7.0861018e-01,            nan],
         [-9.8958623e-01, -5.8916714e-02,  3.3435124e-01, ...,
          -3.5406509e-01,  3.1268021e-01, -9.1227090e-01],
         [-8.2086110e-01, -9.3729144e-01,  9.9564171e-01, ...,
          -5.8113360e-01, -9.9696571e-01,  5.6364602e-01]],

        ...,

        [[-9.9914235e-01,  9.9927300e-01, -4.7047177e-04, ...,
           7.9011261e-01, -7.2479969e-01, -9.7631049e-01],
         [ 9.5399696e-01,  3.4173647e-01, -3.3254853e-01, ...,
           6.0327989e-01,  5.8821726e-01,  9.0952319e-01],
         [           nan,  5.0270694e-01,  9.0379661e-01, ...,
           4.3754496e-02,  4.8046753e-01, -5.8086026e-01],
         ...,
         [ 8.5088283e-01, -6.9769228e-01, -6.0545570e-01, ...,
          -8.0964744e-01, -7.0861018e-01,            nan],
         [-9.8958623e-01, -5.8916714e-02,  3.3435124e-01, ...,
          -3.5406509e-01,  3.1268021e-01, -9.1227090e-01],
         [-8.2086110e-01, -9.3729144e-01,  9.9564171e-01, ...,
          -5.8113360e-01, -9.9696571e-01,  5.6364602e-01]],

        [[-9.9912459e-01,  9.9927300e-01, -4.7047177e-04, ...,
           7.8988808e-01, -7.2479969e-01, -9.7638965e-01],
         [ 9.5394200e-01,  3.4162176e-01, -3.3289388e-01, ...,
           6.0293907e-01,  5.8831596e-01,  9.0949786e-01],
         [           nan,  5.0239038e-01,  9.0377045e-01, ...,
           4.3358143e-02,  4.8017308e-01, -5.8110863e-01],
         ...,
         [ 8.5101104e-01, -6.9764853e-01, -6.0521275e-01, ...,
          -8.0961162e-01, -7.0869631e-01,            nan],
         [-9.8958623e-01, -5.8916714e-02,  3.3452383e-01, ...,
          -3.5395092e-01,  3.1273821e-01, -9.1227090e-01],
         [-8.2089597e-01, -9.3720633e-01,  9.9564594e-01, ...,
          -5.8148128e-01, -9.9699885e-01,  5.6331825e-01]],

        [[-9.9912459e-01,  9.9927300e-01, -4.7047177e-04, ...,
           7.8988808e-01, -7.2479969e-01, -9.7638965e-01],
         [ 9.5394200e-01,  3.4162176e-01, -3.3289388e-01, ...,
           6.0293907e-01,  5.8831596e-01,  9.0949786e-01],
         [           nan,  5.0239038e-01,  9.0377045e-01, ...,
           4.3358143e-02,  4.8017308e-01, -5.8110863e-01],
         ...,
         [ 8.5101104e-01, -6.9764853e-01, -6.0521275e-01, ...,
          -8.0961162e-01, -7.0869631e-01,            nan],
         [-9.8958623e-01, -5.8916714e-02,  3.3452383e-01, ...,
          -3.5395092e-01,  3.1273821e-01, -9.1227090e-01],
         [-8.2089597e-01, -9.3720633e-01,  9.9564594e-01, ...,
          -5.8148128e-01, -9.9699885e-01,  5.6331825e-01]]]],
      dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [5], 'to': [6]}
torch node:
{'name': 'sin', 'output': array([[[[-9.9910402e-01,  9.9927300e-01, -4.7047177e-04, ...,
           7.9011261e-01, -7.2479969e-01, -9.7631049e-01],
         [ 9.5401525e-01,  3.4190854e-01, -3.3341181e-01, ...,
           6.0327989e-01,  5.8890808e-01,  9.0952319e-01],
         [           nan,  5.0270694e-01,  9.0379661e-01, ...,
           4.3724008e-02,  4.8038721e-01, -5.8086026e-01],
         ...,
         [ 8.5088283e-01, -6.9769228e-01, -6.0540712e-01, ...,
          -8.0964744e-01, -7.0861018e-01,            nan],
         [-9.8958623e-01, -5.8794856e-02,  3.3435124e-01, ...,
          -3.5412216e-01,  3.1262225e-01, -9.1227090e-01],
         [-8.2086110e-01, -9.3729144e-01,  9.9563885e-01, ...,
          -5.8113360e-01, -9.9696571e-01,  5.6291479e-01]],

        [[-9.9910402e-01,  9.9927300e-01, -4.7047177e-04, ...,
           7.9011261e-01, -7.2479969e-01, -9.7631049e-01],
         [ 9.5401525e-01,  3.4190854e-01, -3.3341181e-01, ...,
           6.0327989e-01,  5.8890808e-01,  9.0952319e-01],
         [           nan,  5.0270694e-01,  9.0379661e-01, ...,
           4.3724008e-02,  4.8038721e-01, -5.8086026e-01],
         ...,
         [ 8.5088283e-01, -6.9769228e-01, -6.0540712e-01, ...,
          -8.0964744e-01, -7.0861018e-01,            nan],
         [-9.8958623e-01, -5.8794856e-02,  3.3435124e-01, ...,
          -3.5412216e-01,  3.1262225e-01, -9.1227090e-01],
         [-8.2086110e-01, -9.3729144e-01,  9.9563885e-01, ...,
          -5.8113360e-01, -9.9696571e-01,  5.6291479e-01]],

        [[-9.9910402e-01,  9.9927300e-01, -4.7047177e-04, ...,
           7.9011261e-01, -7.2479969e-01, -9.7631049e-01],
         [ 9.5401525e-01,  3.4190854e-01, -3.3341181e-01, ...,
           6.0327989e-01,  5.8890808e-01,  9.0952319e-01],
         [           nan,  5.0270694e-01,  9.0379661e-01, ...,
           4.3724008e-02,  4.8038721e-01, -5.8086026e-01],
         ...,
         [ 8.5088283e-01, -6.9769228e-01, -6.0540712e-01, ...,
          -8.0964744e-01, -7.0861018e-01,            nan],
         [-9.8958623e-01, -5.8794856e-02,  3.3435124e-01, ...,
          -3.5412216e-01,  3.1262225e-01, -9.1227090e-01],
         [-8.2086110e-01, -9.3729144e-01,  9.9563885e-01, ...,
          -5.8113360e-01, -9.9696571e-01,  5.6291479e-01]],

        ...,

        [[-9.9910402e-01,  9.9927300e-01, -4.7047177e-04, ...,
           7.9011261e-01, -7.2479969e-01, -9.7631049e-01],
         [ 9.5401525e-01,  3.4190854e-01, -3.3341181e-01, ...,
           6.0327989e-01,  5.8890808e-01,  9.0952319e-01],
         [           nan,  5.0270694e-01,  9.0379661e-01, ...,
           4.3724008e-02,  4.8038721e-01, -5.8086026e-01],
         ...,
         [ 8.5088283e-01, -6.9769228e-01, -6.0540712e-01, ...,
          -8.0964744e-01, -7.0861018e-01,            nan],
         [-9.8958623e-01, -5.8794856e-02,  3.3435124e-01, ...,
          -3.5412216e-01,  3.1262225e-01, -9.1227090e-01],
         [-8.2086110e-01, -9.3729144e-01,  9.9563885e-01, ...,
          -5.8113360e-01, -9.9696571e-01,  5.6291479e-01]],

        [[-9.9912202e-01,  9.9927181e-01, -5.0098938e-04, ...,
           7.8988808e-01, -7.2479969e-01, -9.7638965e-01],
         [ 9.5397866e-01,  3.4202325e-01, -3.3300897e-01, ...,
           6.0293907e-01,  5.8856273e-01,  9.0949786e-01],
         [           nan,  5.0239038e-01,  9.0377045e-01, ...,
           4.3297168e-02,  4.8001248e-01, -5.8110863e-01],
         ...,
         [ 8.5097897e-01, -6.9764853e-01, -6.0511559e-01, ...,
          -8.0957580e-01, -7.0869631e-01,            nan],
         [-9.8958623e-01, -5.8794856e-02,  3.3452383e-01, ...,
          -3.5406509e-01,  3.1256428e-01, -9.1227090e-01],
         [-8.2089597e-01, -9.3720633e-01,  9.9564171e-01, ...,
          -5.8148128e-01, -9.9699414e-01,  5.6324261e-01]],

        [[-9.9912202e-01,  9.9927181e-01, -5.0098938e-04, ...,
           7.8988808e-01, -7.2479969e-01, -9.7638965e-01],
         [ 9.5397866e-01,  3.4202325e-01, -3.3300897e-01, ...,
           6.0293907e-01,  5.8856273e-01,  9.0949786e-01],
         [           nan,  5.0239038e-01,  9.0377045e-01, ...,
           4.3297168e-02,  4.8001248e-01, -5.8110863e-01],
         ...,
         [ 8.5097897e-01, -6.9764853e-01, -6.0511559e-01, ...,
          -8.0957580e-01, -7.0869631e-01,            nan],
         [-9.8958623e-01, -5.8794856e-02,  3.3452383e-01, ...,
          -3.5406509e-01,  3.1256428e-01, -9.1227090e-01],
         [-8.2089597e-01, -9.3720633e-01,  9.9564171e-01, ...,
          -5.8148128e-01, -9.9699414e-01,  5.6324261e-01]]]],
      dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [5], 'to': [6]}

generate models:157

analyse output arrays in iter:176

pre layer res:
7:conv2d
{'name': 'conv2d', 'output': array([[[[404.9396 , 405.6021 , 406.98013, ..., 407.21332, 405.9698 ,
          403.95914],
         [404.87494, 405.6017 , 406.99405, ..., 407.19745, 405.92487,
          403.92804],
         [404.9396 , 405.6021 , 406.98013, ..., 407.21332, 405.9698 ,
          403.95914],
         ...,
         [404.87494, 405.6017 , 406.99405, ..., 407.19745, 405.92487,
          403.92804],
         [404.9396 , 405.6021 , 406.98013, ..., 407.21332, 405.9698 ,
          403.95914],
         [404.87494, 405.6017 , 406.99405, ..., 407.19745, 405.92487,
          403.92804]],

        [[404.9396 , 405.6021 , 406.98013, ..., 407.21332, 405.9698 ,
          403.95914],
         [404.87494, 405.6017 , 406.99405, ..., 407.19745, 405.92487,
          403.92804],
         [404.9396 , 405.6021 , 406.98013, ..., 407.21332, 405.9698 ,
          403.95914],
         ...,
         [404.87494, 405.6017 , 406.99405, ..., 407.19745, 405.92487,
          403.92804],
         [404.9396 , 405.6021 , 406.98013, ..., 407.21332, 405.9698 ,
          403.95914],
         [404.87494, 405.6017 , 406.99405, ..., 407.19745, 405.92487,
          403.92804]],

        [[404.9396 , 405.6021 , 406.98013, ..., 407.21332, 405.9698 ,
          403.95914],
         [404.87494, 405.6017 , 406.99405, ..., 407.19745, 405.92487,
          403.92804],
         [404.9396 , 405.6021 , 406.98013, ..., 407.21332, 405.9698 ,
          403.95914],
         ...,
         [404.87494, 405.6017 , 406.99405, ..., 407.19745, 405.92487,
          403.92804],
         [404.9396 , 405.6021 , 406.98013, ..., 407.21332, 405.9698 ,
          403.95914],
         [404.87494, 405.6017 , 406.99405, ..., 407.19745, 405.92487,
          403.92804]],

        ...,

        [[404.9396 , 405.6021 , 406.98013, ..., 407.21332, 405.9698 ,
          403.95914],
         [404.87494, 405.6017 , 406.99405, ..., 407.19745, 405.92487,
          403.92804],
         [404.9396 , 405.6021 , 406.98013, ..., 407.21332, 405.9698 ,
          403.95914],
         ...,
         [404.87494, 405.6017 , 406.99405, ..., 407.19745, 405.92487,
          403.92804],
         [404.9396 , 405.6021 , 406.98013, ..., 407.21332, 405.9698 ,
          403.95914],
         [404.87494, 405.6017 , 406.99405, ..., 407.19745, 405.92487,
          403.92804]],

        [[404.9396 , 405.6021 , 406.98013, ..., 407.21332, 405.9698 ,
          403.95914],
         [404.87494, 405.6017 , 406.99405, ..., 407.19745, 405.92487,
          403.92804],
         [404.9396 , 405.6021 , 406.98013, ..., 407.21332, 405.9698 ,
          403.95914],
         ...,
         [404.87494, 405.6017 , 406.99405, ..., 407.19745, 405.92487,
          403.92804],
         [404.9396 , 405.6021 , 406.98013, ..., 407.21332, 405.9698 ,
          403.95914],
         [404.87494, 405.6017 , 406.99405, ..., 407.19745, 405.92487,
          403.92804]],

        [[404.9396 , 405.6021 , 406.98013, ..., 407.21332, 405.9698 ,
          403.95914],
         [404.87494, 405.6017 , 406.99405, ..., 407.19745, 405.92487,
          403.92804],
         [404.9396 , 405.6021 , 406.98013, ..., 407.21332, 405.9698 ,
          403.95914],
         ...,
         [404.87494, 405.6017 , 406.99405, ..., 407.19745, 405.92487,
          403.92804],
         [404.9396 , 405.6021 , 406.98013, ..., 407.21332, 405.9698 ,
          403.95914],
         [404.87494, 405.6017 , 406.99405, ..., 407.19745, 405.92487,
          403.92804]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [17], 'to': [32]}
tf node:
{'name': 'sin', 'output': array([[[[ 0.32011098, -0.33033594, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         [ 0.3806632 , -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ],
         [ 0.32011098, -0.33033594, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         ...,
         [ 0.3806632 , -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ],
         [ 0.32011098, -0.33033594, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         [ 0.3806632 , -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ]],

        [[ 0.32011098, -0.33033594, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         [ 0.3806632 , -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ],
         [ 0.32011098, -0.33033594, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         ...,
         [ 0.3806632 , -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ],
         [ 0.32011098, -0.33033594, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         [ 0.3806632 , -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ]],

        [[ 0.32011098, -0.33033594, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         [ 0.3806632 , -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ],
         [ 0.32011098, -0.33033594, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         ...,
         [ 0.3806632 , -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ],
         [ 0.32011098, -0.33033594, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         [ 0.3806632 , -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ]],

        ...,

        [[ 0.32011098, -0.33033594, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         [ 0.3806632 , -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ],
         [ 0.32011098, -0.33033594, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         ...,
         [ 0.3806632 , -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ],
         [ 0.32011098, -0.33033594, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         [ 0.3806632 , -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ]],

        [[ 0.32011098, -0.33033594, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         [ 0.3806632 , -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ],
         [ 0.32011098, -0.33033594, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         ...,
         [ 0.3806632 , -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ],
         [ 0.32011098, -0.33033594, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         [ 0.3806632 , -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ]],

        [[ 0.32011098, -0.33033594, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         [ 0.3806632 , -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ],
         [ 0.32011098, -0.33033594, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         ...,
         [ 0.3806632 , -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ],
         [ 0.32011098, -0.33033594, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         [ 0.3806632 , -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [7], 'to': [8]}
ms node:
{'name': 'sin', 'output': array([[[[ 0.32011095, -0.33033597, -0.98966646, ..., -0.9297477 ,
          -0.64752746,  0.9652283 ],
         [ 0.38066316, -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126533 ,  0.9728894 ],
         [ 0.32011095, -0.33033597, -0.98966646, ..., -0.9297477 ,
          -0.64752746,  0.9652283 ],
         ...,
         [ 0.38066316, -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126533 ,  0.9728894 ],
         [ 0.32011095, -0.33033597, -0.98966646, ..., -0.9297477 ,
          -0.64752746,  0.9652283 ],
         [ 0.38066316, -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126533 ,  0.9728894 ]],

        [[ 0.32011095, -0.33033597, -0.98966646, ..., -0.9297477 ,
          -0.64752746,  0.9652283 ],
         [ 0.38066316, -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126533 ,  0.9728894 ],
         [ 0.32011095, -0.33033597, -0.98966646, ..., -0.9297477 ,
          -0.64752746,  0.9652283 ],
         ...,
         [ 0.38066316, -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126533 ,  0.9728894 ],
         [ 0.32011095, -0.33033597, -0.98966646, ..., -0.9297477 ,
          -0.64752746,  0.9652283 ],
         [ 0.38066316, -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126533 ,  0.9728894 ]],

        [[ 0.32011095, -0.33033597, -0.98966646, ..., -0.9297477 ,
          -0.64752746,  0.9652283 ],
         [ 0.38066316, -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126533 ,  0.9728894 ],
         [ 0.32011095, -0.33033597, -0.98966646, ..., -0.9297477 ,
          -0.64752746,  0.9652283 ],
         ...,
         [ 0.38066316, -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126533 ,  0.9728894 ],
         [ 0.32011095, -0.33033597, -0.98966646, ..., -0.9297477 ,
          -0.64752746,  0.9652283 ],
         [ 0.38066316, -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126533 ,  0.9728894 ]],

        ...,

        [[ 0.32011095, -0.33033597, -0.98966646, ..., -0.9297477 ,
          -0.64752746,  0.9652283 ],
         [ 0.38066316, -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126533 ,  0.9728894 ],
         [ 0.32011095, -0.33033597, -0.98966646, ..., -0.9297477 ,
          -0.64752746,  0.9652283 ],
         ...,
         [ 0.38066316, -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126533 ,  0.9728894 ],
         [ 0.32011095, -0.33033597, -0.98966646, ..., -0.9297477 ,
          -0.64752746,  0.9652283 ],
         [ 0.38066316, -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126533 ,  0.9728894 ]],

        [[ 0.32077584, -0.3301055 , -0.98956996, ..., -0.92964655,
          -0.64785296,  0.9653399 ],
         [ 0.38134035, -0.32973102, -0.9874696 , ..., -0.9353655 ,
          -0.612991  ,  0.9729882 ],
         [ 0.32077584, -0.3301055 , -0.98956996, ..., -0.92964655,
          -0.64785296,  0.9653399 ],
         ...,
         [ 0.38134035, -0.32973102, -0.9874696 , ..., -0.9353655 ,
          -0.612991  ,  0.9729882 ],
         [ 0.32077584, -0.3301055 , -0.98956996, ..., -0.92964655,
          -0.64785296,  0.9653399 ],
         [ 0.38134035, -0.32973102, -0.9874696 , ..., -0.9353655 ,
          -0.612991  ,  0.9729882 ]],

        [[ 0.32077584, -0.3301055 , -0.98956996, ..., -0.92964655,
          -0.64785296,  0.9653399 ],
         [ 0.38134035, -0.32973102, -0.9874696 , ..., -0.9353655 ,
          -0.612991  ,  0.9729882 ],
         [ 0.32077584, -0.3301055 , -0.98956996, ..., -0.92964655,
          -0.64785296,  0.9653399 ],
         ...,
         [ 0.38134035, -0.32973102, -0.9874696 , ..., -0.9353655 ,
          -0.612991  ,  0.9729882 ],
         [ 0.32077584, -0.3301055 , -0.98956996, ..., -0.92964655,
          -0.64785296,  0.9653399 ],
         [ 0.38134035, -0.32973102, -0.9874696 , ..., -0.9353655 ,
          -0.612991  ,  0.9729882 ]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [7], 'to': [8]}
torch node:
{'name': 'sin', 'output': array([[[[ 0.32011095, -0.33033597, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         [ 0.38066316, -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ],
         [ 0.32011095, -0.33033597, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         ...,
         [ 0.38066316, -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ],
         [ 0.32011095, -0.33033597, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         [ 0.38066316, -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ]],

        [[ 0.32011095, -0.33033597, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         [ 0.38066316, -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ],
         [ 0.32011095, -0.33033597, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         ...,
         [ 0.38066316, -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ],
         [ 0.32011095, -0.33033597, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         [ 0.38066316, -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ]],

        [[ 0.32011095, -0.33033597, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         [ 0.38066316, -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ],
         [ 0.32011095, -0.33033597, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         ...,
         [ 0.38066316, -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ],
         [ 0.32011095, -0.33033597, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         [ 0.38066316, -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ]],

        ...,

        [[ 0.32011095, -0.33033597, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         [ 0.38066316, -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ],
         [ 0.32011095, -0.33033597, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         ...,
         [ 0.38066316, -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ],
         [ 0.32011095, -0.33033597, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         [ 0.38066316, -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ]],

        [[ 0.32011095, -0.33033597, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         [ 0.38066316, -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ],
         [ 0.32011095, -0.33033597, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         ...,
         [ 0.38066316, -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ],
         [ 0.32011095, -0.33033597, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         [ 0.38066316, -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ]],

        [[ 0.32011095, -0.33033597, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         [ 0.38066316, -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ],
         [ 0.32011095, -0.33033597, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         ...,
         [ 0.38066316, -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ],
         [ 0.32011095, -0.33033597, -0.98966646, ..., -0.92974776,
          -0.64752746,  0.9652283 ],
         [ 0.38066316, -0.32996148, -0.98757535, ..., -0.9354734 ,
          -0.6126534 ,  0.9728894 ]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [7], 'to': [8]}

generate models:167

analyse output arrays in iter:194

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[8189.563 , 8108.3145, 7841.656 , ..., 8148.2495, 8125.8145,
          7326.937 ],
         [8181.656 , 8187.0605, 8179.2505, ..., 8188.813 , 8155.6245,
          8190.748 ],
         [8109.563 , 8182.469 , 8191.092 , ..., 8164.031 , 8181.813 ,
          8101.562 ],
         ...,
         [7603.0317, 8185.188 , 7075.281 , ..., 8177.563 , 8191.717 ,
          8049.377 ],
         [7737.3433, 8191.998 , 7892.3755, ..., 8091.3745, 7983.656 ,
          8041.906 ],
         [8168.4043, 7997.0293, 8191.4395, ..., 8183.4707, 8174.092 ,
          8191.9707]],

        [[8189.563 , 8108.3145, 7841.656 , ..., 8148.2495, 8125.8145,
          7326.937 ],
         [8181.656 , 8187.0605, 8179.2505, ..., 8188.813 , 8155.6245,
          8190.748 ],
         [8109.563 , 8182.469 , 8191.092 , ..., 8164.031 , 8181.813 ,
          8101.562 ],
         ...,
         [7603.0317, 8185.188 , 7075.281 , ..., 8177.563 , 8191.717 ,
          8049.377 ],
         [7737.3433, 8191.998 , 7892.3755, ..., 8091.3745, 7983.656 ,
          8041.906 ],
         [8168.4043, 7997.0293, 8191.4395, ..., 8183.4707, 8174.092 ,
          8191.9707]],

        [[8189.563 , 8108.3145, 7841.656 , ..., 8148.2495, 8125.8145,
          7326.937 ],
         [8181.656 , 8187.0605, 8179.2505, ..., 8188.813 , 8155.6245,
          8190.748 ],
         [8109.563 , 8182.469 , 8191.092 , ..., 8164.031 , 8181.813 ,
          8101.562 ],
         ...,
         [7603.0317, 8185.188 , 7075.281 , ..., 8177.563 , 8191.717 ,
          8049.377 ],
         [7737.3433, 8191.998 , 7892.3755, ..., 8091.3745, 7983.656 ,
          8041.906 ],
         [8168.4043, 7997.0293, 8191.4395, ..., 8183.4707, 8174.092 ,
          8191.9707]],

        ...,

        [[8189.563 , 8108.3145, 7841.656 , ..., 8148.2495, 8125.8145,
          7326.937 ],
         [8181.656 , 8187.0605, 8179.2505, ..., 8188.813 , 8155.6245,
          8190.748 ],
         [8109.563 , 8182.469 , 8191.092 , ..., 8164.031 , 8181.813 ,
          8101.562 ],
         ...,
         [7603.0317, 8185.188 , 7075.281 , ..., 8177.563 , 8191.717 ,
          8049.377 ],
         [7737.3433, 8191.998 , 7892.3755, ..., 8091.3745, 7983.656 ,
          8041.906 ],
         [8168.4043, 7997.0293, 8191.4395, ..., 8183.4707, 8174.092 ,
          8191.9707]],

        [[8189.563 , 8108.3145, 7841.656 , ..., 8148.2495, 8125.8145,
          7326.937 ],
         [8181.656 , 8187.0605, 8179.2505, ..., 8188.813 , 8155.6245,
          8190.748 ],
         [8109.563 , 8182.469 , 8191.092 , ..., 8164.031 , 8181.813 ,
          8101.562 ],
         ...,
         [7603.0317, 8185.188 , 7075.281 , ..., 8177.563 , 8191.717 ,
          8049.377 ],
         [7737.3433, 8191.998 , 7892.3755, ..., 8091.3745, 7983.656 ,
          8041.906 ],
         [8168.4043, 7997.0293, 8191.4395, ..., 8183.4707, 8174.092 ,
          8191.9707]],

        [[8189.563 , 8108.3145, 7841.656 , ..., 8148.2495, 8125.8145,
          7326.937 ],
         [8181.656 , 8187.0605, 8179.2505, ..., 8188.813 , 8155.6245,
          8190.748 ],
         [8109.563 , 8182.469 , 8191.092 , ..., 8164.031 , 8181.813 ,
          8101.562 ],
         ...,
         [7603.0317, 8185.188 , 7075.281 , ..., 8177.563 , 8191.717 ,
          8049.377 ],
         [7737.3433, 8191.998 , 7892.3755, ..., 8091.3745, 7983.656 ,
          8041.906 ],
         [8168.4043, 7997.0293, 8191.4395, ..., 8183.4707, 8174.092 ,
          8191.9707]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [11], 'to': [14]}
tf node:
{'name': 'cos', 'output': array([[[[-0.84240806, -0.990741  ,  0.9712194 , ...,  0.50463974,
          -0.0849521 ,  0.7364806 ],
         [ 0.5829092 ,  0.9975446 ,  0.1137678 , ..., -0.24908629,
           0.9987511 , -0.8161967 ],
         [-0.44255596, -0.19000968, -0.57372564, ..., -0.5664992 ,
           0.44849253, -0.8222507 ],
         ...,
         [ 0.9295829 , -0.22960386,  0.9154765 , ..., -0.99999636,
           0.01395219,  0.81586397],
         [-0.92127734,  0.29093373,  0.76821864, ...,  0.20124857,
          -0.6457212 ,  0.8411277 ],
         [ 0.96551096,  0.10500325, -0.2603562 , ..., -0.9293458 ,
           0.94529855,  0.2646673 ]],

        [[-0.84240806, -0.990741  ,  0.9712194 , ...,  0.50463974,
          -0.0849521 ,  0.7364806 ],
         [ 0.5829092 ,  0.9975446 ,  0.1137678 , ..., -0.24908629,
           0.9987511 , -0.8161967 ],
         [-0.44255596, -0.19000968, -0.57372564, ..., -0.5664992 ,
           0.44849253, -0.8222507 ],
         ...,
         [ 0.9295829 , -0.22960386,  0.9154765 , ..., -0.99999636,
           0.01395219,  0.81586397],
         [-0.92127734,  0.29093373,  0.76821864, ...,  0.20124857,
          -0.6457212 ,  0.8411277 ],
         [ 0.96551096,  0.10500325, -0.2603562 , ..., -0.9293458 ,
           0.94529855,  0.2646673 ]],

        [[-0.84240806, -0.990741  ,  0.9712194 , ...,  0.50463974,
          -0.0849521 ,  0.7364806 ],
         [ 0.5829092 ,  0.9975446 ,  0.1137678 , ..., -0.24908629,
           0.9987511 , -0.8161967 ],
         [-0.44255596, -0.19000968, -0.57372564, ..., -0.5664992 ,
           0.44849253, -0.8222507 ],
         ...,
         [ 0.9295829 , -0.22960386,  0.9154765 , ..., -0.99999636,
           0.01395219,  0.81586397],
         [-0.92127734,  0.29093373,  0.76821864, ...,  0.20124857,
          -0.6457212 ,  0.8411277 ],
         [ 0.96551096,  0.10500325, -0.2603562 , ..., -0.9293458 ,
           0.94529855,  0.2646673 ]],

        ...,

        [[-0.84240806, -0.990741  ,  0.9712194 , ...,  0.50463974,
          -0.0849521 ,  0.7364806 ],
         [ 0.5829092 ,  0.9975446 ,  0.1137678 , ..., -0.24908629,
           0.9987511 , -0.8161967 ],
         [-0.44255596, -0.19000968, -0.57372564, ..., -0.5664992 ,
           0.44849253, -0.8222507 ],
         ...,
         [ 0.9295829 , -0.22960386,  0.9154765 , ..., -0.99999636,
           0.01395219,  0.81586397],
         [-0.92127734,  0.29093373,  0.76821864, ...,  0.20124857,
          -0.6457212 ,  0.8411277 ],
         [ 0.96551096,  0.10500325, -0.2603562 , ..., -0.9293458 ,
           0.94529855,  0.2646673 ]],

        [[-0.84240806, -0.990741  ,  0.9712194 , ...,  0.50463974,
          -0.0849521 ,  0.7364806 ],
         [ 0.5829092 ,  0.9975446 ,  0.1137678 , ..., -0.24908629,
           0.9987511 , -0.8161967 ],
         [-0.44255596, -0.19000968, -0.57372564, ..., -0.5664992 ,
           0.44849253, -0.8222507 ],
         ...,
         [ 0.9295829 , -0.22960386,  0.9154765 , ..., -0.99999636,
           0.01395219,  0.81586397],
         [-0.92127734,  0.29093373,  0.76821864, ...,  0.20124857,
          -0.6457212 ,  0.8411277 ],
         [ 0.96551096,  0.10500325, -0.2603562 , ..., -0.9293458 ,
           0.94529855,  0.2646673 ]],

        [[-0.84240806, -0.990741  ,  0.9712194 , ...,  0.50463974,
          -0.0849521 ,  0.7364806 ],
         [ 0.5829092 ,  0.9975446 ,  0.1137678 , ..., -0.24908629,
           0.9987511 , -0.8161967 ],
         [-0.44255596, -0.19000968, -0.57372564, ..., -0.5664992 ,
           0.44849253, -0.8222507 ],
         ...,
         [ 0.9295829 , -0.22960386,  0.9154765 , ..., -0.99999636,
           0.01395219,  0.81586397],
         [-0.92127734,  0.29093373,  0.76821864, ...,  0.20124857,
          -0.6457212 ,  0.8411277 ],
         [ 0.96551096,  0.10500325, -0.2603562 , ..., -0.9293458 ,
           0.94529855,  0.2646673 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [9], 'to': [12]}
ms node:
{'name': 'cos', 'output': array([[[[-0.84240806, -0.99080724,  0.9712194 , ...,  0.50463974,
          -0.08543861,  0.7364806 ],
         [ 0.5829092 ,  0.9975787 ,  0.1137678 , ..., -0.24908629,
           0.9987511 , -0.81647867],
         [-0.44255596, -0.19000968, -0.57412547, ..., -0.5664992 ,
           0.44849253, -0.82225066],
         ...,
         [ 0.9295829 , -0.22960386,  0.9154765 , ..., -0.99999636,
           0.01346395,  0.8155815 ],
         [-0.92127734,  0.29046655,  0.7682186 , ...,  0.20124857,
          -0.6457212 ,  0.84112763],
         [ 0.965638  ,  0.10451765, -0.25988472, ..., -0.9295259 ,
           0.94513917,  0.26513812]],

        [[-0.84240806, -0.99080724,  0.9712194 , ...,  0.50463974,
          -0.08543861,  0.7364806 ],
         [ 0.5829092 ,  0.9975787 ,  0.1137678 , ..., -0.24908629,
           0.9987511 , -0.81647867],
         [-0.44255596, -0.19000968, -0.57412547, ..., -0.5664992 ,
           0.44849253, -0.82225066],
         ...,
         [ 0.9295829 , -0.22960386,  0.9154765 , ..., -0.99999636,
           0.01346395,  0.8155815 ],
         [-0.92127734,  0.29046655,  0.7682186 , ...,  0.20124857,
          -0.6457212 ,  0.84112763],
         [ 0.965638  ,  0.10451765, -0.25988472, ..., -0.9295259 ,
           0.94513917,  0.26513812]],

        [[-0.84240806, -0.99080724,  0.9712194 , ...,  0.50463974,
          -0.08543861,  0.7364806 ],
         [ 0.5829092 ,  0.9975787 ,  0.1137678 , ..., -0.24908629,
           0.9987511 , -0.81647867],
         [-0.44255596, -0.19000968, -0.57412547, ..., -0.5664992 ,
           0.44849253, -0.82225066],
         ...,
         [ 0.9295829 , -0.22960386,  0.9154765 , ..., -0.99999636,
           0.01346395,  0.8155815 ],
         [-0.92127734,  0.29046655,  0.7682186 , ...,  0.20124857,
          -0.6457212 ,  0.84112763],
         [ 0.965638  ,  0.10451765, -0.25988472, ..., -0.9295259 ,
           0.94513917,  0.26513812]],

        ...,

        [[-0.84240806, -0.99080724,  0.9712194 , ...,  0.50463974,
          -0.08543861,  0.7364806 ],
         [ 0.5829092 ,  0.9975787 ,  0.1137678 , ..., -0.24908629,
           0.9987511 , -0.81647867],
         [-0.44255596, -0.19000968, -0.57412547, ..., -0.5664992 ,
           0.44849253, -0.82225066],
         ...,
         [ 0.9295829 , -0.22960386,  0.9154765 , ..., -0.99999636,
           0.01346395,  0.8155815 ],
         [-0.92127734,  0.29046655,  0.7682186 , ...,  0.20124857,
          -0.6457212 ,  0.84112763],
         [ 0.965638  ,  0.10451765, -0.25988472, ..., -0.9295259 ,
           0.94513917,  0.26513812]],

        [[-0.84240806, -0.99106956,  0.9712194 , ...,  0.50463974,
          -0.08738443,  0.7364806 ],
         [ 0.5829092 ,  0.9977781 ,  0.1137678 , ..., -0.24908629,
           0.9987511 , -0.81760484],
         [-0.44255596, -0.19000968, -0.5757235 , ..., -0.5664992 ,
           0.44849253, -0.82225066],
         ...,
         [ 0.9295829 , -0.22960386,  0.9154765 , ..., -0.99999636,
           0.01151098,  0.81388277],
         [-0.92127734,  0.28859708,  0.7682186 , ...,  0.20124857,
          -0.6457212 ,  0.84112763],
         [ 0.9661437 ,  0.10257503, -0.25799823, ..., -0.9302444 ,
           0.94417804,  0.26702085]],

        [[-0.84240806, -0.99106956,  0.9712194 , ...,  0.50463974,
          -0.08738443,  0.7364806 ],
         [ 0.5829092 ,  0.9977781 ,  0.1137678 , ..., -0.24908629,
           0.9987511 , -0.81760484],
         [-0.44255596, -0.19000968, -0.5757235 , ..., -0.5664992 ,
           0.44849253, -0.82225066],
         ...,
         [ 0.9295829 , -0.22960386,  0.9154765 , ..., -0.99999636,
           0.01151098,  0.81388277],
         [-0.92127734,  0.28859708,  0.7682186 , ...,  0.20124857,
          -0.6457212 ,  0.84112763],
         [ 0.9661437 ,  0.10257503, -0.25799823, ..., -0.9302444 ,
           0.94417804,  0.26702085]]]], dtype=float32), 'output_shape': (1, 128, 8, 8), 'from': [9], 'to': [12]}
torch node:
{'name': 'cos', 'output': array([[[[-0.84240806, -0.990741  ,  0.9712194 , ...,  0.50463974,
          -0.0849521 ,  0.73648053],
         [ 0.5829092 ,  0.9975446 ,  0.1137678 , ..., -0.24908629,
           0.9987511 , -0.8161967 ],
         [-0.44255596, -0.19000968, -0.57372564, ..., -0.5664992 ,
           0.44849253, -0.82225066],
         ...,
         [ 0.9295829 , -0.22960386,  0.9154765 , ..., -0.99999636,
           0.01395219,  0.8158639 ],
         [-0.92127734,  0.29093373,  0.7682186 , ...,  0.20124857,
          -0.6457212 ,  0.84112763],
         [ 0.96551096,  0.10500325, -0.26035622, ..., -0.9293457 ,
           0.94529855,  0.2646673 ]],

        [[-0.84240806, -0.990741  ,  0.9712194 , ...,  0.50463974,
          -0.0849521 ,  0.73648053],
         [ 0.5829092 ,  0.9975446 ,  0.1137678 , ..., -0.24908629,
           0.9987511 , -0.8161967 ],
         [-0.44255596, -0.19000968, -0.57372564, ..., -0.5664992 ,
           0.44849253, -0.82225066],
         ...,
         [ 0.9295829 , -0.22960386,  0.9154765 , ..., -0.99999636,
           0.01395219,  0.8158639 ],
         [-0.92127734,  0.29093373,  0.7682186 , ...,  0.20124857,
          -0.6457212 ,  0.84112763],
         [ 0.96551096,  0.10500325, -0.26035622, ..., -0.9293457 ,
           0.94529855,  0.2646673 ]],

        [[-0.84240806, -0.990741  ,  0.9712194 , ...,  0.50463974,
          -0.0849521 ,  0.73648053],
         [ 0.5829092 ,  0.9975446 ,  0.1137678 , ..., -0.24908629,
           0.9987511 , -0.8161967 ],
         [-0.44255596, -0.19000968, -0.57372564, ..., -0.5664992 ,
           0.44849253, -0.82225066],
         ...,
         [ 0.9295829 , -0.22960386,  0.9154765 , ..., -0.99999636,
           0.01395219,  0.8158639 ],
         [-0.92127734,  0.29093373,  0.7682186 , ...,  0.20124857,
          -0.6457212 ,  0.84112763],
         [ 0.96551096,  0.10500325, -0.26035622, ..., -0.9293457 ,
           0.94529855,  0.2646673 ]],

        ...,

        [[-0.84240806, -0.990741  ,  0.9712194 , ...,  0.50463974,
          -0.0849521 ,  0.73648053],
         [ 0.5829092 ,  0.9975446 ,  0.1137678 , ..., -0.24908629,
           0.9987511 , -0.8161967 ],
         [-0.44255596, -0.19000968, -0.57372564, ..., -0.5664992 ,
           0.44849253, -0.82225066],
         ...,
         [ 0.9295829 , -0.22960386,  0.9154765 , ..., -0.99999636,
           0.01395219,  0.8158639 ],
         [-0.92127734,  0.29093373,  0.7682186 , ...,  0.20124857,
          -0.6457212 ,  0.84112763],
         [ 0.96551096,  0.10500325, -0.26035622, ..., -0.9293457 ,
           0.94529855,  0.2646673 ]],

        [[-0.84240806, -0.9910043 ,  0.9712194 , ...,  0.50463974,
          -0.086898  ,  0.73648053],
         [ 0.5829092 ,  0.9976795 ,  0.1137678 , ..., -0.24908629,
           0.9987511 , -0.81732357],
         [-0.44255596, -0.19000968, -0.57532424, ..., -0.5664992 ,
           0.44849253, -0.82225066],
         ...,
         [ 0.9295829 , -0.22960386,  0.9154765 , ..., -0.99999636,
           0.01199923,  0.81473297],
         [-0.92127734,  0.28906453,  0.7682186 , ...,  0.20124857,
          -0.6457212 ,  0.84112763],
         [ 0.96601766,  0.10306071, -0.25846994, ..., -0.9300651 ,
           0.9446596 ,  0.26655027]],

        [[-0.84240806, -0.9910043 ,  0.9712194 , ...,  0.50463974,
          -0.086898  ,  0.73648053],
         [ 0.5829092 ,  0.9976795 ,  0.1137678 , ..., -0.24908629,
           0.9987511 , -0.81732357],
         [-0.44255596, -0.19000968, -0.57532424, ..., -0.5664992 ,
           0.44849253, -0.82225066],
         ...,
         [ 0.9295829 , -0.22960386,  0.9154765 , ..., -0.99999636,
           0.01199923,  0.81473297],
         [-0.92127734,  0.28906453,  0.7682186 , ...,  0.20124857,
          -0.6457212 ,  0.84112763],
         [ 0.96601766,  0.10306071, -0.25846994, ..., -0.9300651 ,
           0.9446596 ,  0.26655027]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 8, 8]), 'from': [9], 'to': [12]}

generate models:183

analyse output arrays in iter:201

pre layer res:
12:add
{'name': 'add', 'output': array([[[[          inf, 3.6889716e+12, 1.6877844e+19, ...,
                    inf, 2.9548060e+13,           inf],
         [          inf, 2.7562590e+23, 9.8040159e+11, ...,
          3.1635354e+12,           inf, 2.2695542e+29],
         [2.2488597e+27,           inf, 4.7898439e+30, ...,
                    inf, 8.5072799e+22,           inf],
         ...,
         [          inf,           inf, 2.7372791e+12, ...,
                    inf,           inf, 2.8797963e+12],
         [4.3450145e+11,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf, 1.1717157e+12,           inf]],

        [[4.8135973e+36, 6.6010281e+36, 6.1691597e+33, ...,
          2.1904945e+32, 1.1793531e+29,           inf],
         [3.5065325e+12, 1.1952600e+12,           inf, ...,
          3.1662554e+12,           inf,           inf],
         [          inf, 3.1053663e+20, 3.1376395e+12, ...,
          3.8012925e+20,           inf, 1.9235565e+32],
         ...,
         [          inf, 3.2612062e+16,           inf, ...,
                    inf,           inf, 2.8801790e+12],
         [          inf,           inf,           inf, ...,
          1.1517443e+38, 1.4154468e+20, 5.3810541e+11],
         [1.7663927e+17,           inf,           inf, ...,
                    inf, 1.1717157e+12, 2.5711242e+37]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [9.8867269e+34, 1.1952595e+12, 4.0625917e+11, ...,
                    inf, 6.6574374e+18,           inf],
         [3.7917797e+36,           inf, 2.6305806e+29, ...,
                    inf, 1.1515422e+38,           inf],
         ...,
         [          inf,           inf,           inf, ...,
          5.6663652e+12,           inf, 2.8797963e+12],
         [          inf,           inf,           inf, ...,
          3.2096893e+12, 2.2539865e+34, 5.3810541e+11],
         [3.7721548e+34,           inf,           inf, ...,
                    inf, 1.1717157e+12,           inf]],

        ...,

        [[4.8135973e+36, 6.6010281e+36, 6.1691597e+33, ...,
          2.1904945e+32, 1.1793531e+29,           inf],
         [3.5065325e+12, 1.1952600e+12,           inf, ...,
          3.1662554e+12,           inf,           inf],
         [          inf, 3.1053663e+20, 3.1376395e+12, ...,
          3.8012925e+20,           inf, 1.9235565e+32],
         ...,
         [          inf, 3.2612062e+16,           inf, ...,
                    inf,           inf, 2.8801790e+12],
         [          inf,           inf,           inf, ...,
          1.1517443e+38, 1.4154468e+20, 5.3810541e+11],
         [1.7663927e+17,           inf,           inf, ...,
                    inf, 1.1717157e+12, 2.5711242e+37]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [9.8867269e+34, 1.1952595e+12, 4.0625917e+11, ...,
                    inf, 6.6574374e+18,           inf],
         [3.7917797e+36,           inf, 2.6305806e+29, ...,
                    inf, 1.1515422e+38,           inf],
         ...,
         [          inf,           inf,           inf, ...,
          5.6663652e+12,           inf, 2.8797963e+12],
         [          inf,           inf,           inf, ...,
          3.2096893e+12, 2.2539865e+34, 5.3810541e+11],
         [3.7721548e+34,           inf,           inf, ...,
                    inf, 1.1717157e+12,           inf]],

        [[          inf, 9.1639200e+21, 7.6219637e+14, ...,
                    inf,           inf, 7.6706826e+12],
         [3.5065325e+12,           inf,           inf, ...,
                    inf, 1.4448457e+12,           inf],
         [          inf,           inf, 3.1376395e+12, ...,
                    inf, 3.6111424e+12, 2.0206959e+38],
         ...,
         [          inf,           inf,           inf, ...,
          7.2514223e+23,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
          1.0587098e+12, 2.0142126e+20, 1.0193362e+13]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [17, 18], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [12], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [12], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [12], 'to': []}

generate models:190

analyse output arrays in iter:209

pre layer res:
6:relu
{'name': 'relu', 'output': array([[[[8.84996094e+03, 1.18066084e+04, 6.86737451e+03, ...,
          9.56797852e+03, 7.23818701e+03, 4.61024902e+03],
         [1.48131240e+04, 6.81968018e+03, 1.11881465e+04, ...,
          9.98389551e+03, 1.01543359e+04, 1.38638613e+04],
         [           inf,            inf, 3.79395337e+03, ...,
          7.39106445e+03, 9.08035254e+03,            inf],
         ...,
         [1.11049207e+03, 2.11756035e+04, 7.94021826e+03, ...,
                     inf,            inf,            inf],
         [1.79842480e+04, 7.30799951e+03, 1.00000000e+00, ...,
          5.75599121e+03, 1.93892930e+04, 8.69416723e+25],
         [1.59674990e+04, 2.80685909e+37, 1.23726260e+04, ...,
          2.81424042e+18, 9.74171191e+03, 4.92089099e+28]],

        [[           inf, 1.18066084e+04, 6.86737451e+03, ...,
          9.56797852e+03, 2.21230932e+30, 4.61024902e+03],
         [7.45203364e+36, 6.81968018e+03, 1.11881465e+04, ...,
                     inf, 7.12612708e+11, 7.79598889e+10],
         [1.19606926e+02, 1.00416494e+04, 4.05916821e+30, ...,
          7.39106445e+03,            inf, 9.32902100e+02],
         ...,
         [1.11049207e+03, 4.98581299e+03,            inf, ...,
          7.65100049e+03, 2.10037645e+18, 1.05001746e+18],
         [1.79842480e+04, 7.30799951e+03,            inf, ...,
          1.81141510e+22,            inf,            inf],
         [           inf, 1.87166211e+04,            inf, ...,
          1.39709766e+04, 9.74171191e+03, 3.17140649e+03]],

        [[6.56722375e+05, 1.18066084e+04, 6.87254102e+03, ...,
          9.56797852e+03,            inf,            inf],
         [           inf, 6.81968018e+03, 6.82908123e+11, ...,
          3.73510440e+07, 1.86589886e+26,            inf],
         [           inf,            inf, 3.79395337e+03, ...,
          7.39106445e+03, 2.18460438e+05, 6.53813380e+16],
         ...,
         [1.11049207e+03, 4.98581299e+03, 7.94021826e+03, ...,
          7.65100049e+03, 2.45316525e+06, 4.87143322e+09],
         [1.79842480e+04, 2.33665789e+17,            inf, ...,
          5.75599121e+03,            inf,            inf],
         [4.60489063e+23, 1.87166211e+04, 1.23726260e+04, ...,
          1.69160763e+35, 9.74171191e+03,            inf]],

        ...,

        [[           inf, 1.18066084e+04, 6.86737451e+03, ...,
          9.56797852e+03, 2.21230932e+30, 4.61024902e+03],
         [7.45203364e+36, 6.81968018e+03, 1.11881465e+04, ...,
                     inf, 7.12612708e+11, 7.79598889e+10],
         [1.19606926e+02, 1.00416494e+04, 4.05916821e+30, ...,
          7.39106445e+03,            inf, 9.32902100e+02],
         ...,
         [1.11049207e+03, 4.98581299e+03,            inf, ...,
          7.65100049e+03, 2.10037645e+18, 1.05001746e+18],
         [1.79842480e+04, 7.30799951e+03,            inf, ...,
          1.81141510e+22,            inf,            inf],
         [           inf, 1.87166211e+04,            inf, ...,
          1.39709766e+04, 9.74171191e+03, 3.17140649e+03]],

        [[6.56722375e+05, 1.18066084e+04, 6.87254102e+03, ...,
          9.56797852e+03,            inf,            inf],
         [           inf, 6.81968018e+03, 6.82908123e+11, ...,
          3.73510440e+07, 1.86589886e+26,            inf],
         [           inf,            inf, 3.79395337e+03, ...,
          7.39106445e+03, 2.18460438e+05, 6.53813380e+16],
         ...,
         [1.11049207e+03, 4.98581299e+03, 7.94021826e+03, ...,
          7.65100049e+03, 2.45316525e+06, 4.87143322e+09],
         [1.79842480e+04, 2.33665789e+17,            inf, ...,
          5.75599121e+03,            inf,            inf],
         [4.60489063e+23, 1.87166211e+04, 1.23726260e+04, ...,
          1.69160763e+35, 9.74171191e+03,            inf]],

        [[9.99105371e+03, 1.18066084e+04, 6.86737451e+03, ...,
          9.56797852e+03, 7.23818701e+03, 4.61024902e+03],
         [1.48131240e+04, 6.81968018e+03, 1.11881465e+04, ...,
                     inf, 4.39558966e+14, 1.38638613e+04],
         [1.19606926e+02, 1.01871181e+06, 1.36111410e+37, ...,
          7.39106445e+03, 9.08035254e+03, 9.32902100e+02],
         ...,
         [           inf, 4.98581299e+03,            inf, ...,
          7.65100049e+03, 3.26519136e+21, 7.80461719e+04],
         [           inf,            inf, 1.00000000e+00, ...,
          5.75599121e+03,            inf, 4.50871826e+03],
         [4.38374654e+27, 1.87166211e+04, 1.71140156e+04, ...,
                     inf, 9.74171191e+03, 3.17140649e+03]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [15], 'to': [11]}
tf node:
{'name': 'cos', 'output': array([[[[-0.99554455,  0.8760409 ,  0.98921067, ...,  0.25523344,
           0.9990986 , -0.03818642],
         [-0.87045926, -0.75346816, -0.59378225, ...,  0.996309  ,
           0.75935113, -0.9999162 ],
         [        nan,         nan,  0.46199197, ..., -0.45086622,
           0.4086972 ,         nan],
         ...,
         [-0.06089991,  0.29720676, -0.15652396, ...,         nan,
                  nan,         nan],
         [-0.19955269,  0.79304826,  0.5403023 , ...,  0.82900536,
           0.81568205, -0.9971574 ],
         [-0.34699166,  0.23795973,  0.5112938 , ..., -0.99957705,
          -0.9334422 , -0.3422468 ]],

        [[        nan,  0.8760409 ,  0.98921067, ...,  0.25523344,
          -0.57174516, -0.03818642],
         [ 0.9351726 , -0.75346816, -0.59378225, ...,         nan,
          -0.4482037 , -0.34839678],
         [ 0.9744797 ,  0.43631852,  0.396994  , ..., -0.45086622,
                  nan, -0.9886334 ],
         ...,
         [-0.06089991, -0.9944456 ,         nan, ..., -0.34141275,
           0.2217278 , -0.3844367 ],
         [-0.19955269,  0.79304826,         nan, ...,  0.32223344,
                  nan,         nan],
         [        nan,  0.55041397,         nan, ..., -0.9510958 ,
          -0.9334422 , -0.03128456]],

        [[-0.76154613,  0.8760409 ,  0.30228215, ...,  0.25523344,
                  nan,         nan],
         [        nan, -0.75346816, -0.29023945, ..., -0.20120506,
           0.6327823 ,         nan],
         [        nan,         nan,  0.46199197, ..., -0.45086622,
           0.9332088 , -0.30976665],
         ...,
         [-0.06089991, -0.9944456 , -0.15652396, ..., -0.34141275,
          -0.71046984, -0.11565705],
         [-0.19955269, -0.27005   ,         nan, ...,  0.82900536,
                  nan,         nan],
         [-0.37578323,  0.55041397,  0.5112938 , ..., -0.55331004,
          -0.9334422 ,         nan]],

        ...,

        [[        nan,  0.8760409 ,  0.98921067, ...,  0.25523344,
          -0.57174516, -0.03818642],
         [ 0.9351726 , -0.75346816, -0.59378225, ...,         nan,
          -0.4482037 , -0.34839678],
         [ 0.9744797 ,  0.43631852,  0.396994  , ..., -0.45086622,
                  nan, -0.9886334 ],
         ...,
         [-0.06089991, -0.9944456 ,         nan, ..., -0.34141275,
           0.2217278 , -0.3844367 ],
         [-0.19955269,  0.79304826,         nan, ...,  0.32223344,
                  nan,         nan],
         [        nan,  0.55041397,         nan, ..., -0.9510958 ,
          -0.9334422 , -0.03128456]],

        [[-0.76154613,  0.8760409 ,  0.30228215, ...,  0.25523344,
                  nan,         nan],
         [        nan, -0.75346816, -0.29023945, ..., -0.20120506,
           0.6327823 ,         nan],
         [        nan,         nan,  0.46199197, ..., -0.45086622,
           0.9332088 , -0.30976665],
         ...,
         [-0.06089991, -0.9944456 , -0.15652396, ..., -0.34141275,
          -0.71046984, -0.11565705],
         [-0.19955269, -0.27005   ,         nan, ...,  0.82900536,
                  nan,         nan],
         [-0.37578323,  0.55041397,  0.5112938 , ..., -0.55331004,
          -0.9334422 ,         nan]],

        [[ 0.70450383,  0.8760409 ,  0.98921067, ...,  0.25523344,
           0.9990986 , -0.03818642],
         [-0.87045926, -0.75346816, -0.59378225, ...,         nan,
           0.65311736, -0.9999162 ],
         [ 0.9744797 ,  0.9916793 ,  0.8253467 , ..., -0.45086622,
           0.4086972 , -0.9886334 ],
         ...,
         [        nan, -0.9944456 ,         nan, ..., -0.34141275,
          -0.9870621 , -0.9153508 ],
         [        nan,         nan,  0.5403023 , ...,  0.82900536,
                  nan, -0.86138624],
         [-0.99724317,  0.55041397,  0.18850985, ...,         nan,
          -0.9334422 , -0.03128456]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [6], 'to': [21]}
ms node:
{'name': 'cos', 'output': array([[[[-0.99554455,  0.8760409 ,  0.98921067, ...,  0.25523344,
           0.9990986 , -0.03818642],
         [-0.87045926, -0.75346816, -0.59378225, ...,  0.996309  ,
           0.7593511 , -0.9999162 ],
         [        nan,         nan,  0.46199197, ..., -0.451302  ,
           0.4086972 ,         nan],
         ...,
         [-0.06089991,  0.29907107, -0.15652394, ...,         nan,
                  nan,         nan],
         [-0.19955269,  0.79304826,  0.5403023 , ...,  0.82900536,
           0.815682  , -0.79173166],
         [-0.34699166,  0.00755559,  0.5112938 , ..., -0.17525575,
          -0.9334422 ,  0.99465597]],

        [[        nan,  0.8760409 ,  0.98921067, ...,  0.25523344,
          -0.99592596, -0.03818642],
         [-0.9990582 , -0.75346816, -0.59378225, ...,         nan,
          -0.44820374,  0.79425496],
         [ 0.9744797 ,  0.43631855,  0.9598278 , ..., -0.451302  ,
                  nan, -0.9886242 ],
         ...,
         [-0.06089991, -0.9944456 ,         nan, ..., -0.34141272,
           0.7177454 ,  0.9931078 ],
         [-0.19955269,  0.79304826,         nan, ...,  0.64660335,
                  nan,         nan],
         [        nan,  0.55041397,         nan, ..., -0.9510958 ,
          -0.9334422 , -0.03128455]],

        [[-0.76154613,  0.8760409 ,  0.30228215, ...,  0.25523344,
                  nan,         nan],
         [        nan, -0.75346816, -0.45276994, ..., -0.60980886,
           0.9771167 ,         nan],
         [        nan,         nan,  0.46199197, ..., -0.451302  ,
           0.9439806 ,  0.98297876],
         ...,
         [-0.06089991, -0.9944456 , -0.15652394, ..., -0.34141272,
          -0.51427805,  0.19427568],
         [-0.19955269,  0.24472405,         nan, ...,  0.82900536,
                  nan,         nan],
         [ 0.833323  ,  0.55041397,  0.5112938 , ...,  0.7667998 ,
          -0.9334422 ,         nan]],

        ...,

        [[        nan,  0.8760409 ,  0.98921067, ...,  0.25523344,
          -0.99592596, -0.03818642],
         [-0.695293  , -0.75346816, -0.59378225, ...,         nan,
           0.75135255, -0.99837124],
         [ 0.9744797 ,  0.43631855, -0.5207205 , ..., -0.451302  ,
                  nan, -0.9886242 ],
         ...,
         [-0.06089991, -0.9944456 ,         nan, ..., -0.34141272,
          -0.2025364 ,  0.15830007],
         [-0.19955269,  0.79304826,         nan, ...,  0.64660335,
                  nan,         nan],
         [        nan,  0.55041397,         nan, ..., -0.9510958 ,
          -0.9334422 , -0.03128455]],

        [[-0.9007888 ,  0.87791795,  0.30228215, ...,  0.2561775 ,
                  nan,         nan],
         [        nan, -0.7508941 , -0.7126216 , ..., -0.9203918 ,
          -0.54094875,         nan],
         [        nan,         nan,  0.46199197, ..., -0.4534793 ,
          -0.82411236,  0.6577499 ],
         ...,
         [-0.06089991, -0.9944456 , -0.15652394, ..., -0.34141272,
          -0.9985723 ,  0.8096882 ],
         [-0.19955269,  0.77679527,         nan, ...,  0.8306402 ,
                  nan,         nan],
         [ 0.833323  ,  0.54714847,  0.5112938 , ..., -0.9219014 ,
          -0.9348363 ,         nan]],

        [[ 0.70658004,  0.87791795,  0.98921067, ...,  0.2561775 ,
           0.9990986 , -0.03916225],
         [-0.87045926, -0.7508941 , -0.58826804, ...,         nan,
           0.6531169 , -0.99999493],
         [ 0.9744797 , -0.64759755, -0.99035597, ..., -0.4534793 ,
           0.40691385, -0.98857826],
         ...,
         [        nan, -0.9944456 ,         nan, ..., -0.34141272,
           0.728256  , -0.5334111 ],
         [        nan,         nan,  0.5403023 , ...,  0.8306402 ,
                  nan, -0.86138624],
         [ 0.95070857,  0.54714847,  0.19617645, ...,         nan,
          -0.9348363 , -0.03128455]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [6], 'to': [21]}
torch node:
{'name': 'cos', 'output': array([[[[-0.99554455,  0.8760409 ,  0.98921067, ...,  0.25523344,
           0.9990986 , -0.03818642],
         [-0.87045926, -0.75346816, -0.59378225, ...,  0.996309  ,
           0.7593511 , -0.9999162 ],
         [        nan,         nan,  0.461992  , ..., -0.45086622,
           0.4086972 ,         nan],
         ...,
         [-0.06089991,  0.29907107, -0.15652394, ...,         nan,
                  nan,         nan],
         [-0.19955269,  0.79304826,  0.54030234, ...,  0.82900536,
           0.815682  , -0.9971574 ],
         [-0.34699166,  0.23795973,  0.5112938 , ..., -0.99957705,
          -0.9334422 , -0.3422468 ]],

        [[        nan,  0.8760409 ,  0.98921067, ...,  0.25523344,
          -0.5717451 , -0.03818642],
         [ 0.9351727 , -0.75346816, -0.59378225, ...,         nan,
          -0.44820374, -0.99827737],
         [ 0.9744797 ,  0.43631855,  0.396994  , ..., -0.45086622,
                  nan, -0.9886334 ],
         ...,
         [-0.06089991, -0.9944456 ,         nan, ..., -0.34141272,
           0.2217278 , -0.38443673],
         [-0.19955269,  0.79304826,         nan, ..., -0.1901893 ,
                  nan,         nan],
         [        nan,  0.55041397,         nan, ..., -0.9510958 ,
          -0.9334422 , -0.03128455]],

        [[-0.76154613,  0.8760409 ,  0.30228215, ...,  0.25523344,
                  nan,         nan],
         [        nan, -0.75346816, -0.29023945, ..., -0.20120506,
           0.6327823 ,         nan],
         [        nan,         nan,  0.461992  , ..., -0.45086622,
           0.93870926,  0.7139907 ],
         ...,
         [-0.06089991, -0.9944456 , -0.15652394, ..., -0.34141272,
          -0.71046984, -0.11565705],
         [-0.19955269, -0.8117908 ,         nan, ...,  0.82900536,
                  nan,         nan],
         [-0.37578323,  0.55041397,  0.5112938 , ..., -0.55331   ,
          -0.9334422 ,         nan]],

        ...,

        [[        nan,  0.8760409 ,  0.98921067, ...,  0.25523344,
          -0.5717451 , -0.03818642],
         [ 0.9351727 , -0.75346816, -0.59378225, ...,         nan,
          -0.44820374, -0.99827737],
         [ 0.9744797 ,  0.43631855,  0.396994  , ..., -0.45086622,
                  nan, -0.9886334 ],
         ...,
         [-0.06089991, -0.9944456 ,         nan, ..., -0.34141272,
           0.2217278 , -0.38443673],
         [-0.19955269,  0.79304826,         nan, ..., -0.1901893 ,
                  nan,         nan],
         [        nan,  0.55041397,         nan, ..., -0.9510958 ,
          -0.9334422 , -0.03128455]],

        [[-0.76154613,  0.87791795,  0.30228215, ...,  0.2561775 ,
                  nan,         nan],
         [        nan, -0.7508941 , -0.29023945, ..., -0.20120506,
           0.6327823 ,         nan],
         [        nan,         nan,  0.461992  , ..., -0.4526087 ,
           0.93870926,  0.7139907 ],
         ...,
         [-0.06089991, -0.9944456 , -0.15652394, ..., -0.34141272,
          -0.71046984, -0.11565705],
         [-0.19955269, -0.8117908 ,         nan, ...,  0.8303682 ,
                  nan,         nan],
         [-0.37578323,  0.54714847,  0.5112938 , ..., -0.55331   ,
          -0.9348363 ,         nan]],

        [[ 0.70658004,  0.87791795,  0.98921067, ...,  0.2561775 ,
           0.9990986 , -0.03916225],
         [-0.87045926, -0.7508941 , -0.58826804, ...,         nan,
           0.59876734, -0.99999136],
         [ 0.9744797 ,  0.9916793 ,  0.8253467 , ..., -0.4526087 ,
           0.40691385, -0.9885967 ],
         ...,
         [        nan, -0.9944456 ,         nan, ..., -0.34141272,
          -0.9870621 , -0.9121771 ],
         [        nan,         nan,  0.54030234, ...,  0.8303682 ,
                  nan, -0.86138624],
         [-0.99724317,  0.54714847,  0.18850985, ...,         nan,
          -0.9348363 , -0.03128455]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [6], 'to': [21]}

generate models:196

analyse output arrays in iter:213

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[0.0000000e+00, 6.2389834e+03, 6.1191670e+03, ...,
          1.1397537e-03, 6.3044578e-15, 2.3156520e-13],
         [0.0000000e+00, 6.2389795e+03, 2.7292336e-34, ...,
          6.2389834e+03, 1.6989257e-03, 0.0000000e+00],
         [6.7041865e-11, 0.0000000e+00, 6.2389834e+03, ...,
          6.2389795e+03, 1.1641908e-10, 2.0437457e-02],
         ...,
         [6.2389834e+03, 5.3654413e-18, 1.4878347e-17, ...,
          1.3546131e-14, 6.2389834e+03, 1.4194704e-32],
         [8.0870195e-05, 6.2389834e+03, 6.2389834e+03, ...,
          8.5054004e-27, 2.0214514e-14, 6.2389834e+03],
         [1.2043720e-17, 1.7077478e-19, 6.2389834e+03, ...,
          6.2389834e+03, 4.4039874e-03, 6.2389810e+03]],

        [[0.0000000e+00, 6.2389834e+03, 6.1191670e+03, ...,
          1.1397537e-03, 6.3044578e-15, 2.3156520e-13],
         [0.0000000e+00, 6.2389795e+03, 2.7292336e-34, ...,
          6.2389834e+03, 1.6989257e-03, 0.0000000e+00],
         [6.7041865e-11, 0.0000000e+00, 6.2389834e+03, ...,
          6.2389795e+03, 1.1641908e-10, 2.0437457e-02],
         ...,
         [6.2389834e+03, 5.3654413e-18, 1.4878347e-17, ...,
          1.3546131e-14, 6.2389834e+03, 1.4194704e-32],
         [8.0870195e-05, 6.2389834e+03, 6.2389834e+03, ...,
          8.5054004e-27, 2.0214514e-14, 6.2389834e+03],
         [1.2043720e-17, 1.7077478e-19, 6.2389834e+03, ...,
          6.2389834e+03, 4.4039874e-03, 6.2389810e+03]],

        [[0.0000000e+00, 6.2389834e+03, 6.1191670e+03, ...,
          1.1397537e-03, 6.3044578e-15, 2.3156520e-13],
         [0.0000000e+00, 6.2389795e+03, 2.7292336e-34, ...,
          6.2389834e+03, 1.6989257e-03, 0.0000000e+00],
         [6.7041865e-11, 0.0000000e+00, 6.2389834e+03, ...,
          6.2389795e+03, 1.1641908e-10, 2.0437457e-02],
         ...,
         [6.2389834e+03, 5.3654413e-18, 1.4878347e-17, ...,
          1.3546131e-14, 6.2389834e+03, 1.4194704e-32],
         [8.0870195e-05, 6.2389834e+03, 6.2389834e+03, ...,
          8.5054004e-27, 2.0214514e-14, 6.2389834e+03],
         [1.2043720e-17, 1.7077478e-19, 6.2389834e+03, ...,
          6.2389834e+03, 4.4039874e-03, 6.2389810e+03]],

        ...,

        [[0.0000000e+00, 6.2389834e+03, 6.1191670e+03, ...,
          1.1397537e-03, 6.3044578e-15, 2.3156520e-13],
         [0.0000000e+00, 6.2389795e+03, 2.7292336e-34, ...,
          6.2389834e+03, 1.6989257e-03, 0.0000000e+00],
         [6.7041865e-11, 0.0000000e+00, 6.2389834e+03, ...,
          6.2389795e+03, 1.1641908e-10, 2.0437457e-02],
         ...,
         [6.2389834e+03, 5.3654413e-18, 1.4878347e-17, ...,
          1.3546131e-14, 6.2389834e+03, 1.4194704e-32],
         [8.0870195e-05, 6.2389834e+03, 6.2389834e+03, ...,
          8.5054004e-27, 2.0214514e-14, 6.2389834e+03],
         [1.2043720e-17, 1.7077478e-19, 6.2389834e+03, ...,
          6.2389834e+03, 4.4039874e-03, 6.2389810e+03]],

        [[0.0000000e+00, 6.2389834e+03, 6.1191670e+03, ...,
          1.1397537e-03, 6.3044578e-15, 2.3156520e-13],
         [0.0000000e+00, 6.2389795e+03, 2.7292336e-34, ...,
          6.2389834e+03, 1.6989257e-03, 0.0000000e+00],
         [6.7041865e-11, 0.0000000e+00, 6.2389834e+03, ...,
          6.2389795e+03, 1.1641908e-10, 2.0437457e-02],
         ...,
         [6.2389834e+03, 5.3654413e-18, 1.4878347e-17, ...,
          1.3546131e-14, 6.2389834e+03, 1.4194704e-32],
         [8.0870195e-05, 6.2389834e+03, 6.2389834e+03, ...,
          8.5054004e-27, 2.0214514e-14, 6.2389834e+03],
         [1.2043720e-17, 1.7077478e-19, 6.2389834e+03, ...,
          6.2389834e+03, 4.4039874e-03, 6.2389810e+03]],

        [[0.0000000e+00, 6.2389834e+03, 6.1191670e+03, ...,
          1.1397537e-03, 6.3044578e-15, 2.3156520e-13],
         [0.0000000e+00, 6.2389795e+03, 2.7292336e-34, ...,
          6.2389834e+03, 1.6989257e-03, 0.0000000e+00],
         [6.7041865e-11, 0.0000000e+00, 6.2389834e+03, ...,
          6.2389795e+03, 1.1641908e-10, 2.0437457e-02],
         ...,
         [6.2389834e+03, 5.3654413e-18, 1.4878347e-17, ...,
          1.3546131e-14, 6.2389834e+03, 1.4194704e-32],
         [8.0870195e-05, 6.2389834e+03, 6.2389834e+03, ...,
          8.5054004e-27, 2.0214514e-14, 6.2389834e+03],
         [1.2043720e-17, 1.7077478e-19, 6.2389834e+03, ...,
          6.2389834e+03, 4.4039874e-03, 6.2389810e+03]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [8], 'to': [11]}
tf node:
{'name': 'log', 'output': array([[[[       -inf,   8.738572 ,   8.719181 , ...,  -6.776943 ,
          -32.69752  , -29.093916 ],
         [       -inf,   8.738572 , -77.283875 , ...,   8.738572 ,
           -6.377759 ,        -inf],
         [-23.425703 ,        -inf,   8.738572 , ...,   8.738572 ,
          -22.873825 ,  -3.8903859],
         ...,
         [  8.738572 , -39.766552 , -38.746624 , ..., -31.932676 ,
            8.738572 , -73.332436 ],
         [ -9.422666 ,   8.738572 ,   8.738572 , ..., -60.029095 ,
          -31.532375 ,   8.738572 ],
         [-38.95799  , -43.21394  ,   8.738572 , ...,   8.738572 ,
           -5.425245 ,   8.738572 ]],

        [[       -inf,   8.738572 ,   8.719181 , ...,  -6.776943 ,
          -32.69752  , -29.093916 ],
         [       -inf,   8.738572 , -77.283875 , ...,   8.738572 ,
           -6.377759 ,        -inf],
         [-23.425703 ,        -inf,   8.738572 , ...,   8.738572 ,
          -22.873825 ,  -3.8903859],
         ...,
         [  8.738572 , -39.766552 , -38.746624 , ..., -31.932676 ,
            8.738572 , -73.332436 ],
         [ -9.422666 ,   8.738572 ,   8.738572 , ..., -60.029095 ,
          -31.532375 ,   8.738572 ],
         [-38.95799  , -43.21394  ,   8.738572 , ...,   8.738572 ,
           -5.425245 ,   8.738572 ]],

        [[       -inf,   8.738572 ,   8.719181 , ...,  -6.776943 ,
          -32.69752  , -29.093916 ],
         [       -inf,   8.738572 , -77.283875 , ...,   8.738572 ,
           -6.377759 ,        -inf],
         [-23.425703 ,        -inf,   8.738572 , ...,   8.738572 ,
          -22.873825 ,  -3.8903859],
         ...,
         [  8.738572 , -39.766552 , -38.746624 , ..., -31.932676 ,
            8.738572 , -73.332436 ],
         [ -9.422666 ,   8.738572 ,   8.738572 , ..., -60.029095 ,
          -31.532375 ,   8.738572 ],
         [-38.95799  , -43.21394  ,   8.738572 , ...,   8.738572 ,
           -5.425245 ,   8.738572 ]],

        ...,

        [[       -inf,   8.738572 ,   8.719181 , ...,  -6.776943 ,
          -32.69752  , -29.093916 ],
         [       -inf,   8.738572 , -77.283875 , ...,   8.738572 ,
           -6.377759 ,        -inf],
         [-23.425703 ,        -inf,   8.738572 , ...,   8.738572 ,
          -22.873825 ,  -3.8903859],
         ...,
         [  8.738572 , -39.766552 , -38.746624 , ..., -31.932676 ,
            8.738572 , -73.332436 ],
         [ -9.422666 ,   8.738572 ,   8.738572 , ..., -60.029095 ,
          -31.532375 ,   8.738572 ],
         [-38.95799  , -43.21394  ,   8.738572 , ...,   8.738572 ,
           -5.425245 ,   8.738572 ]],

        [[       -inf,   8.738572 ,   8.719181 , ...,  -6.776943 ,
          -32.69752  , -29.093916 ],
         [       -inf,   8.738572 , -77.283875 , ...,   8.738572 ,
           -6.377759 ,        -inf],
         [-23.425703 ,        -inf,   8.738572 , ...,   8.738572 ,
          -22.873825 ,  -3.8903859],
         ...,
         [  8.738572 , -39.766552 , -38.746624 , ..., -31.932676 ,
            8.738572 , -73.332436 ],
         [ -9.422666 ,   8.738572 ,   8.738572 , ..., -60.029095 ,
          -31.532375 ,   8.738572 ],
         [-38.95799  , -43.21394  ,   8.738572 , ...,   8.738572 ,
           -5.425245 ,   8.738572 ]],

        [[       -inf,   8.738572 ,   8.719181 , ...,  -6.776943 ,
          -32.69752  , -29.093916 ],
         [       -inf,   8.738572 , -77.283875 , ...,   8.738572 ,
           -6.377759 ,        -inf],
         [-23.425703 ,        -inf,   8.738572 , ...,   8.738572 ,
          -22.873825 ,  -3.8903859],
         ...,
         [  8.738572 , -39.766552 , -38.746624 , ..., -31.932676 ,
            8.738572 , -73.332436 ],
         [ -9.422666 ,   8.738572 ,   8.738572 , ..., -60.029095 ,
          -31.532375 ,   8.738572 ],
         [-38.95799  , -43.21394  ,   8.738572 , ...,   8.738572 ,
           -5.425245 ,   8.738572 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [9], 'to': [15]}
ms node:
{'name': 'log', 'output': array([[[[       -inf,   8.73857  ,   8.719181 , ...,  -6.7769575,
          -32.697525 , -29.093912 ],
         [       -inf,   8.738569 , -77.28388  , ...,   8.73857  ,
           -6.3777533,        -inf],
         [-23.425707 ,        -inf,   8.73857  , ...,   8.738569 ,
          -22.873823 ,  -3.890381 ],
         ...,
         [  8.73857  , -39.76656  , -38.746613 , ..., -31.932674 ,
            8.73857  , -73.33243  ],
         [ -9.4226675,   8.73857  ,   8.73857  , ..., -60.02911  ,
          -31.53239  ,   8.73857  ],
         [-38.957985 , -43.213955 ,   8.73857  , ...,   8.73857  ,
           -5.425237 ,   8.73857  ]],

        [[       -inf,   8.73857  ,   8.719181 , ...,  -6.7769575,
          -32.697525 , -29.093912 ],
         [       -inf,   8.738569 , -77.28388  , ...,   8.73857  ,
           -6.3777533,        -inf],
         [-23.425707 ,        -inf,   8.73857  , ...,   8.738569 ,
          -22.873823 ,  -3.890381 ],
         ...,
         [  8.73857  , -39.76656  , -38.746613 , ..., -31.932674 ,
            8.73857  , -73.33243  ],
         [ -9.4226675,   8.73857  ,   8.73857  , ..., -60.02911  ,
          -31.53239  ,   8.73857  ],
         [-38.957985 , -43.213955 ,   8.73857  , ...,   8.73857  ,
           -5.425237 ,   8.73857  ]],

        [[       -inf,   8.73857  ,   8.719181 , ...,  -6.7769575,
          -32.697525 , -29.093912 ],
         [       -inf,   8.738569 , -77.28388  , ...,   8.73857  ,
           -6.3777533,        -inf],
         [-23.425707 ,        -inf,   8.73857  , ...,   8.738569 ,
          -22.873823 ,  -3.890381 ],
         ...,
         [  8.73857  , -39.76656  , -38.746613 , ..., -31.932674 ,
            8.73857  , -73.33243  ],
         [ -9.4226675,   8.73857  ,   8.73857  , ..., -60.02911  ,
          -31.53239  ,   8.73857  ],
         [-38.957985 , -43.213955 ,   8.73857  , ...,   8.73857  ,
           -5.425237 ,   8.73857  ]],

        ...,

        [[       -inf,   8.73857  ,   8.719181 , ...,  -6.7769575,
          -32.697525 , -29.093912 ],
         [       -inf,   8.738569 , -77.28388  , ...,   8.73857  ,
           -6.3777533,        -inf],
         [-23.425707 ,        -inf,   8.73857  , ...,   8.738569 ,
          -22.873823 ,  -3.890381 ],
         ...,
         [  8.73857  , -39.76656  , -38.746613 , ..., -31.932674 ,
            8.73857  , -73.33243  ],
         [ -9.4226675,   8.73857  ,   8.73857  , ..., -60.02911  ,
          -31.53239  ,   8.73857  ],
         [-38.957985 , -43.213955 ,   8.73857  , ...,   8.73857  ,
           -5.425237 ,   8.73857  ]],

        [[       -inf,   8.738569 ,   8.719179 , ...,  -6.776958 ,
          -32.697525 , -29.093914 ],
         [       -inf,   8.738568 , -77.28388  , ...,   8.738569 ,
           -6.3777547,        -inf],
         [-23.425707 ,        -inf,   8.738569 , ...,   8.738568 ,
          -22.873825 ,  -3.8903801],
         ...,
         [  8.738569 , -39.76656  , -38.746616 , ..., -31.932674 ,
            8.738569 , -73.33243  ],
         [ -9.422668 ,   8.738569 ,   8.738569 , ..., -60.02911  ,
          -31.53239  ,   8.738569 ],
         [-38.957985 , -43.213955 ,   8.738569 , ...,   8.738569 ,
           -5.4252367,   8.738568 ]],

        [[       -inf,   8.738569 ,   8.719179 , ...,  -6.776958 ,
          -32.697525 , -29.093914 ],
         [       -inf,   8.738568 , -77.28388  , ...,   8.738569 ,
           -6.3777547,        -inf],
         [-23.425707 ,        -inf,   8.738569 , ...,   8.738568 ,
          -22.873825 ,  -3.8903801],
         ...,
         [  8.738569 , -39.76656  , -38.746616 , ..., -31.932674 ,
            8.738569 , -73.33243  ],
         [ -9.422668 ,   8.738569 ,   8.738569 , ..., -60.02911  ,
          -31.53239  ,   8.738569 ],
         [-38.957985 , -43.213955 ,   8.738569 , ...,   8.738569 ,
           -5.4252367,   8.738568 ]]]], dtype=float32), 'output_shape': (1, 128, 8, 8), 'from': [9], 'to': [15]}
torch node:
{'name': 'log', 'output': array([[[[       -inf,   8.738572 ,   8.719181 , ...,  -6.776943 ,
          -32.69752  , -29.093914 ],
         [       -inf,   8.738572 , -77.283875 , ...,   8.738572 ,
           -6.377759 ,        -inf],
         [-23.425703 ,        -inf,   8.738572 , ...,   8.738572 ,
          -22.873825 ,  -3.8903859],
         ...,
         [  8.738572 , -39.766552 , -38.746624 , ..., -31.932676 ,
            8.738572 , -73.332436 ],
         [ -9.422666 ,   8.738572 ,   8.738572 , ..., -60.029095 ,
          -31.532375 ,   8.738572 ],
         [-38.95799  , -43.21394  ,   8.738572 , ...,   8.738572 ,
           -5.425245 ,   8.738572 ]],

        [[       -inf,   8.738572 ,   8.719181 , ...,  -6.776943 ,
          -32.69752  , -29.093914 ],
         [       -inf,   8.738572 , -77.283875 , ...,   8.738572 ,
           -6.377759 ,        -inf],
         [-23.425703 ,        -inf,   8.738572 , ...,   8.738572 ,
          -22.873825 ,  -3.8903859],
         ...,
         [  8.738572 , -39.766552 , -38.746624 , ..., -31.932676 ,
            8.738572 , -73.332436 ],
         [ -9.422666 ,   8.738572 ,   8.738572 , ..., -60.029095 ,
          -31.532375 ,   8.738572 ],
         [-38.95799  , -43.21394  ,   8.738572 , ...,   8.738572 ,
           -5.425245 ,   8.738572 ]],

        [[       -inf,   8.738572 ,   8.719181 , ...,  -6.776943 ,
          -32.69752  , -29.093914 ],
         [       -inf,   8.738572 , -77.283875 , ...,   8.738572 ,
           -6.377759 ,        -inf],
         [-23.425703 ,        -inf,   8.738572 , ...,   8.738572 ,
          -22.873825 ,  -3.8903859],
         ...,
         [  8.738572 , -39.766552 , -38.746624 , ..., -31.932676 ,
            8.738572 , -73.332436 ],
         [ -9.422666 ,   8.738572 ,   8.738572 , ..., -60.029095 ,
          -31.532375 ,   8.738572 ],
         [-38.95799  , -43.21394  ,   8.738572 , ...,   8.738572 ,
           -5.425245 ,   8.738572 ]],

        ...,

        [[       -inf,   8.738572 ,   8.719181 , ...,  -6.776943 ,
          -32.69752  , -29.093914 ],
         [       -inf,   8.738572 , -77.283875 , ...,   8.738572 ,
           -6.377759 ,        -inf],
         [-23.425703 ,        -inf,   8.738572 , ...,   8.738572 ,
          -22.873825 ,  -3.8903859],
         ...,
         [  8.738572 , -39.766552 , -38.746624 , ..., -31.932676 ,
            8.738572 , -73.332436 ],
         [ -9.422666 ,   8.738572 ,   8.738572 , ..., -60.029095 ,
          -31.532375 ,   8.738572 ],
         [-38.95799  , -43.21394  ,   8.738572 , ...,   8.738572 ,
           -5.425245 ,   8.738572 ]],

        [[       -inf,   8.738572 ,   8.719181 , ...,  -6.776943 ,
          -32.69752  , -29.093914 ],
         [       -inf,   8.738572 , -77.283875 , ...,   8.738572 ,
           -6.377759 ,        -inf],
         [-23.425703 ,        -inf,   8.738572 , ...,   8.738572 ,
          -22.873825 ,  -3.8903859],
         ...,
         [  8.738572 , -39.766552 , -38.746624 , ..., -31.932676 ,
            8.738572 , -73.332436 ],
         [ -9.422666 ,   8.738572 ,   8.738572 , ..., -60.029095 ,
          -31.532375 ,   8.738572 ],
         [-38.95799  , -43.21394  ,   8.738572 , ...,   8.738572 ,
           -5.425245 ,   8.738572 ]],

        [[       -inf,   8.738572 ,   8.719181 , ...,  -6.776943 ,
          -32.69752  , -29.093914 ],
         [       -inf,   8.738572 , -77.283875 , ...,   8.738572 ,
           -6.377759 ,        -inf],
         [-23.425703 ,        -inf,   8.738572 , ...,   8.738572 ,
          -22.873825 ,  -3.8903859],
         ...,
         [  8.738572 , -39.766552 , -38.746624 , ..., -31.932676 ,
            8.738572 , -73.332436 ],
         [ -9.422666 ,   8.738572 ,   8.738572 , ..., -60.029095 ,
          -31.532375 ,   8.738572 ],
         [-38.95799  , -43.21394  ,   8.738572 , ...,   8.738572 ,
           -5.425245 ,   8.738572 ]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 8, 8]), 'from': [9], 'to': [15]}

generate models:200

analyse output arrays in iter:217

pre layer res:
22:reshape
{'name': 'reshape', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [21], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [22], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [22], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [22], 'to': []}

generate models:204

analyse output arrays in iter:219

pre layer res:
0:conv2d
{'name': 'conv2d', 'output': array([[[[-2.8058882 , -1.677557  ,  1.3094904 , ..., -2.058537  ,
           1.3722351 ,  0.4045471 ],
         [ 0.8674431 ,  0.2500431 ,  2.4397361 , ...,  0.3596222 ,
          -1.6494626 , -1.2204353 ],
         [-1.5073733 , -1.4320925 ,  0.28525513, ..., -2.6808126 ,
           2.4263144 , -1.0720717 ],
         ...,
         [ 1.6811807 , -0.17486757,  2.716636  , ...,  0.7153375 ,
          -0.49275434, -0.89121854],
         [-1.223122  , -0.86711943, -1.2406746 , ..., -0.79970145,
          -0.19095778, -2.2843368 ],
         [-1.209584  ,  0.9535728 , -0.81173134, ..., -2.5373127 ,
           1.4099567 , -0.6227934 ]],

        [[-2.8058882 , -1.677557  ,  1.3094904 , ..., -2.058537  ,
           1.3722351 ,  0.4045471 ],
         [ 0.8674431 ,  0.2500431 ,  2.4397361 , ...,  0.3596222 ,
          -1.6494626 , -1.2204353 ],
         [-1.5073733 , -1.4320925 ,  0.28525513, ..., -2.6808126 ,
           2.4263144 , -1.0720717 ],
         ...,
         [ 1.6811807 , -0.17486757,  2.716636  , ...,  0.7153375 ,
          -0.49275434, -0.89121854],
         [-1.223122  , -0.86711943, -1.2406746 , ..., -0.79970145,
          -0.19095778, -2.2843368 ],
         [-1.209584  ,  0.9535728 , -0.81173134, ..., -2.5373127 ,
           1.4099567 , -0.6227934 ]],

        [[-2.8058882 , -1.677557  ,  1.3094904 , ..., -2.058537  ,
           1.3722351 ,  0.4045471 ],
         [ 0.8674431 ,  0.2500431 ,  2.4397361 , ...,  0.3596222 ,
          -1.6494626 , -1.2204353 ],
         [-1.5073733 , -1.4320925 ,  0.28525513, ..., -2.6808126 ,
           2.4263144 , -1.0720717 ],
         ...,
         [ 1.6811807 , -0.17486757,  2.716636  , ...,  0.7153375 ,
          -0.49275434, -0.89121854],
         [-1.223122  , -0.86711943, -1.2406746 , ..., -0.79970145,
          -0.19095778, -2.2843368 ],
         [-1.209584  ,  0.9535728 , -0.81173134, ..., -2.5373127 ,
           1.4099567 , -0.6227934 ]],

        ...,

        [[-2.8058882 , -1.677557  ,  1.3094904 , ..., -2.058537  ,
           1.3722351 ,  0.4045471 ],
         [ 0.8674431 ,  0.2500431 ,  2.4397361 , ...,  0.3596222 ,
          -1.6494626 , -1.2204353 ],
         [-1.5073733 , -1.4320925 ,  0.28525513, ..., -2.6808126 ,
           2.4263144 , -1.0720717 ],
         ...,
         [ 1.6811807 , -0.17486757,  2.716636  , ...,  0.7153375 ,
          -0.49275434, -0.89121854],
         [-1.223122  , -0.86711943, -1.2406746 , ..., -0.79970145,
          -0.19095778, -2.2843368 ],
         [-1.209584  ,  0.9535728 , -0.81173134, ..., -2.5373127 ,
           1.4099567 , -0.6227934 ]],

        [[-2.8058882 , -1.677557  ,  1.3094904 , ..., -2.058537  ,
           1.3722351 ,  0.4045471 ],
         [ 0.8674431 ,  0.2500431 ,  2.4397361 , ...,  0.3596222 ,
          -1.6494626 , -1.2204353 ],
         [-1.5073733 , -1.4320925 ,  0.28525513, ..., -2.6808126 ,
           2.4263144 , -1.0720717 ],
         ...,
         [ 1.6811807 , -0.17486757,  2.716636  , ...,  0.7153375 ,
          -0.49275434, -0.89121854],
         [-1.223122  , -0.86711943, -1.2406746 , ..., -0.79970145,
          -0.19095778, -2.2843368 ],
         [-1.209584  ,  0.9535728 , -0.81173134, ..., -2.5373127 ,
           1.4099567 , -0.6227934 ]],

        [[-2.8058882 , -1.677557  ,  1.3094904 , ..., -2.058537  ,
           1.3722351 ,  0.4045471 ],
         [ 0.8674431 ,  0.2500431 ,  2.4397361 , ...,  0.3596222 ,
          -1.6494626 , -1.2204353 ],
         [-1.5073733 , -1.4320925 ,  0.28525513, ..., -2.6808126 ,
           2.4263144 , -1.0720717 ],
         ...,
         [ 1.6811807 , -0.17486757,  2.716636  , ...,  0.7153375 ,
          -0.49275434, -0.89121854],
         [-1.223122  , -0.86711943, -1.2406746 , ..., -0.79970145,
          -0.19095778, -2.2843368 ],
         [-1.209584  ,  0.9535728 , -0.81173134, ..., -2.5373127 ,
           1.4099567 , -0.6227934 ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [], 'to': [17]}
tf node:
{'name': 'log', 'output': array([[[[        nan,         nan,  0.2696381 , ...,         nan,
           0.31644085, -0.9049871 ],
         [-0.14220537, -1.386122  ,  0.8918899 , ..., -1.0227013 ,
                  nan,         nan],
         [        nan,         nan, -1.2543713 , ...,         nan,
           0.8863734 ,         nan],
         ...,
         [ 0.5194963 ,         nan,  0.9993943 , ..., -0.3350008 ,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan, -0.04753949,         nan, ...,         nan,
           0.343559  ,         nan]],

        [[        nan,         nan,  0.2696381 , ...,         nan,
           0.31644085, -0.9049871 ],
         [-0.14220537, -1.386122  ,  0.8918899 , ..., -1.0227013 ,
                  nan,         nan],
         [        nan,         nan, -1.2543713 , ...,         nan,
           0.8863734 ,         nan],
         ...,
         [ 0.5194963 ,         nan,  0.9993943 , ..., -0.3350008 ,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan, -0.04753949,         nan, ...,         nan,
           0.343559  ,         nan]],

        [[        nan,         nan,  0.2696381 , ...,         nan,
           0.31644085, -0.9049871 ],
         [-0.14220537, -1.386122  ,  0.8918899 , ..., -1.0227013 ,
                  nan,         nan],
         [        nan,         nan, -1.2543713 , ...,         nan,
           0.8863734 ,         nan],
         ...,
         [ 0.5194963 ,         nan,  0.9993943 , ..., -0.3350008 ,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan, -0.04753949,         nan, ...,         nan,
           0.343559  ,         nan]],

        ...,

        [[        nan,         nan,  0.2696381 , ...,         nan,
           0.31644085, -0.9049871 ],
         [-0.14220537, -1.386122  ,  0.8918899 , ..., -1.0227013 ,
                  nan,         nan],
         [        nan,         nan, -1.2543713 , ...,         nan,
           0.8863734 ,         nan],
         ...,
         [ 0.5194963 ,         nan,  0.9993943 , ..., -0.3350008 ,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan, -0.04753949,         nan, ...,         nan,
           0.343559  ,         nan]],

        [[        nan,         nan,  0.2696381 , ...,         nan,
           0.31644085, -0.9049871 ],
         [-0.14220537, -1.386122  ,  0.8918899 , ..., -1.0227013 ,
                  nan,         nan],
         [        nan,         nan, -1.2543713 , ...,         nan,
           0.8863734 ,         nan],
         ...,
         [ 0.5194963 ,         nan,  0.9993943 , ..., -0.3350008 ,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan, -0.04753949,         nan, ...,         nan,
           0.343559  ,         nan]],

        [[        nan,         nan,  0.2696381 , ...,         nan,
           0.31644085, -0.9049871 ],
         [-0.14220537, -1.386122  ,  0.8918899 , ..., -1.0227013 ,
                  nan,         nan],
         [        nan,         nan, -1.2543713 , ...,         nan,
           0.8863734 ,         nan],
         ...,
         [ 0.5194963 ,         nan,  0.9993943 , ..., -0.3350008 ,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan, -0.04753949,         nan, ...,         nan,
           0.343559  ,         nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [0], 'to': [1]}
ms node:
{'name': 'log', 'output': array([[[[        nan,         nan,  0.2696409 , ...,         nan,
           0.3164389 , -0.90498954],
         [-0.14220637, -1.3861234 ,  0.8918907 , ..., -1.0227013 ,
                  nan,         nan],
         [        nan,         nan, -1.2543745 , ...,         nan,
           0.8863719 ,         nan],
         ...,
         [ 0.51949304,         nan,  0.9993924 , ..., -0.33499795,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan, -0.04753947,         nan, ...,         nan,
           0.34356186,         nan]],

        [[        nan,         nan,  0.2696409 , ...,         nan,
           0.3164389 , -0.90498954],
         [-0.14220637, -1.3861234 ,  0.8918907 , ..., -1.0227013 ,
                  nan,         nan],
         [        nan,         nan, -1.2543745 , ...,         nan,
           0.8863719 ,         nan],
         ...,
         [ 0.51949304,         nan,  0.9993924 , ..., -0.33499795,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan, -0.04753947,         nan, ...,         nan,
           0.34356186,         nan]],

        [[        nan,         nan,  0.2696409 , ...,         nan,
           0.3164389 , -0.90498954],
         [-0.14220637, -1.3861234 ,  0.8918907 , ..., -1.0227013 ,
                  nan,         nan],
         [        nan,         nan, -1.2543745 , ...,         nan,
           0.8863719 ,         nan],
         ...,
         [ 0.51949304,         nan,  0.9993924 , ..., -0.33499795,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan, -0.04753947,         nan, ...,         nan,
           0.34356186,         nan]],

        ...,

        [[        nan,         nan,  0.2696409 , ...,         nan,
           0.3164389 , -0.90498954],
         [-0.14220637, -1.3861234 ,  0.8918907 , ..., -1.0227013 ,
                  nan,         nan],
         [        nan,         nan, -1.2543745 , ...,         nan,
           0.8863719 ,         nan],
         ...,
         [ 0.51949304,         nan,  0.9993924 , ..., -0.33499795,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan, -0.04753947,         nan, ...,         nan,
           0.34356186,         nan]],

        [[        nan,         nan,  0.2696409 , ...,         nan,
           0.3164389 , -0.90498954],
         [-0.14220637, -1.3861234 ,  0.8918907 , ..., -1.0227013 ,
                  nan,         nan],
         [        nan,         nan, -1.2543745 , ...,         nan,
           0.8863719 ,         nan],
         ...,
         [ 0.51949304,         nan,  0.9993924 , ..., -0.33499795,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan, -0.04753947,         nan, ...,         nan,
           0.34356186,         nan]],

        [[        nan,         nan,  0.2696409 , ...,         nan,
           0.3164389 , -0.90498954],
         [-0.14220637, -1.3861234 ,  0.8918907 , ..., -1.0227013 ,
                  nan,         nan],
         [        nan,         nan, -1.2543745 , ...,         nan,
           0.8863719 ,         nan],
         ...,
         [ 0.51949304,         nan,  0.9993924 , ..., -0.33499795,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan, -0.04753947,         nan, ...,         nan,
           0.34356186,         nan]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [0], 'to': [1]}
torch node:
{'name': 'log', 'output': array([[[[        nan,         nan,  0.2696381 , ...,         nan,
           0.31644085, -0.9049871 ],
         [-0.14220537, -1.386122  ,  0.89188987, ..., -1.0227013 ,
                  nan,         nan],
         [        nan,         nan, -1.2543713 , ...,         nan,
           0.8863734 ,         nan],
         ...,
         [ 0.5194963 ,         nan,  0.9993943 , ..., -0.33500078,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan, -0.04753949,         nan, ...,         nan,
           0.343559  ,         nan]],

        [[        nan,         nan,  0.2696381 , ...,         nan,
           0.31644085, -0.9049871 ],
         [-0.14220537, -1.386122  ,  0.89188987, ..., -1.0227013 ,
                  nan,         nan],
         [        nan,         nan, -1.2543713 , ...,         nan,
           0.8863734 ,         nan],
         ...,
         [ 0.5194963 ,         nan,  0.9993943 , ..., -0.33500078,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan, -0.04753949,         nan, ...,         nan,
           0.343559  ,         nan]],

        [[        nan,         nan,  0.2696381 , ...,         nan,
           0.31644085, -0.9049871 ],
         [-0.14220537, -1.386122  ,  0.89188987, ..., -1.0227013 ,
                  nan,         nan],
         [        nan,         nan, -1.2543713 , ...,         nan,
           0.8863734 ,         nan],
         ...,
         [ 0.5194963 ,         nan,  0.9993943 , ..., -0.33500078,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan, -0.04753949,         nan, ...,         nan,
           0.343559  ,         nan]],

        ...,

        [[        nan,         nan,  0.2696381 , ...,         nan,
           0.31644085, -0.9049871 ],
         [-0.14220537, -1.386122  ,  0.89188987, ..., -1.0227013 ,
                  nan,         nan],
         [        nan,         nan, -1.2543713 , ...,         nan,
           0.8863734 ,         nan],
         ...,
         [ 0.5194963 ,         nan,  0.9993943 , ..., -0.33500078,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan, -0.04753949,         nan, ...,         nan,
           0.343559  ,         nan]],

        [[        nan,         nan,  0.2696381 , ...,         nan,
           0.31644085, -0.9049871 ],
         [-0.14220537, -1.386122  ,  0.89188987, ..., -1.0227013 ,
                  nan,         nan],
         [        nan,         nan, -1.2543713 , ...,         nan,
           0.8863734 ,         nan],
         ...,
         [ 0.5194963 ,         nan,  0.9993943 , ..., -0.33500078,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan, -0.04753949,         nan, ...,         nan,
           0.343559  ,         nan]],

        [[        nan,         nan,  0.2696381 , ...,         nan,
           0.31644085, -0.9049871 ],
         [-0.14220537, -1.386122  ,  0.89188987, ..., -1.0227013 ,
                  nan,         nan],
         [        nan,         nan, -1.2543713 , ...,         nan,
           0.8863734 ,         nan],
         ...,
         [ 0.5194963 ,         nan,  0.9993943 , ..., -0.33500078,
                  nan,         nan],
         [        nan,         nan,         nan, ...,         nan,
                  nan,         nan],
         [        nan, -0.04753949,         nan, ...,         nan,
           0.343559  ,         nan]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [0], 'to': [1]}

generate models:206

analyse output arrays in iter:224

pre layer res:
0:conv2d
{'name': 'conv2d', 'output': array([[[[ 1.5559192 ,  0.66212445, -1.0634853 , ..., -2.911032  ,
          -1.0707965 ,  0.4140219 ],
         [-0.5565742 ,  2.2100148 , -0.74238265, ...,  0.09101576,
           1.32435   ,  1.2759043 ],
         [ 2.3540177 ,  1.1215692 ,  1.8824475 , ...,  0.5860227 ,
           0.46936318, -1.0545211 ],
         ...,
         [ 1.0187593 , -0.04923415,  0.5789764 , ..., -3.6597443 ,
           0.7686222 ,  2.3938074 ],
         [-1.646601  ,  0.13715401,  1.0394179 , ..., -1.9867203 ,
          -0.72378564, -1.5262337 ],
         [ 1.2958692 , -0.6143146 , -4.205751  , ..., -0.82749677,
           1.8829143 ,  1.259635  ]],

        [[ 1.5559192 ,  0.66212445, -1.0634853 , ..., -2.911032  ,
          -1.0707965 ,  0.4140219 ],
         [-0.5565742 ,  2.2100148 , -0.74238265, ...,  0.09101576,
           1.32435   ,  1.2759043 ],
         [ 2.3540177 ,  1.1215692 ,  1.8824475 , ...,  0.5860227 ,
           0.46936318, -1.0545211 ],
         ...,
         [ 1.0187593 , -0.04923415,  0.5789764 , ..., -3.6597443 ,
           0.7686222 ,  2.3938074 ],
         [-1.646601  ,  0.13715401,  1.0394179 , ..., -1.9867203 ,
          -0.72378564, -1.5262337 ],
         [ 1.2958692 , -0.6143146 , -4.205751  , ..., -0.82749677,
           1.8829143 ,  1.259635  ]],

        [[ 1.5559192 ,  0.66212445, -1.0634853 , ..., -2.911032  ,
          -1.0707965 ,  0.4140219 ],
         [-0.5565742 ,  2.2100148 , -0.74238265, ...,  0.09101576,
           1.32435   ,  1.2759043 ],
         [ 2.3540177 ,  1.1215692 ,  1.8824475 , ...,  0.5860227 ,
           0.46936318, -1.0545211 ],
         ...,
         [ 1.0187593 , -0.04923415,  0.5789764 , ..., -3.6597443 ,
           0.7686222 ,  2.3938074 ],
         [-1.646601  ,  0.13715401,  1.0394179 , ..., -1.9867203 ,
          -0.72378564, -1.5262337 ],
         [ 1.2958692 , -0.6143146 , -4.205751  , ..., -0.82749677,
           1.8829143 ,  1.259635  ]],

        ...,

        [[ 1.5559192 ,  0.66212445, -1.0634853 , ..., -2.911032  ,
          -1.0707965 ,  0.4140219 ],
         [-0.5565742 ,  2.2100148 , -0.74238265, ...,  0.09101576,
           1.32435   ,  1.2759043 ],
         [ 2.3540177 ,  1.1215692 ,  1.8824475 , ...,  0.5860227 ,
           0.46936318, -1.0545211 ],
         ...,
         [ 1.0187593 , -0.04923415,  0.5789764 , ..., -3.6597443 ,
           0.7686222 ,  2.3938074 ],
         [-1.646601  ,  0.13715401,  1.0394179 , ..., -1.9867203 ,
          -0.72378564, -1.5262337 ],
         [ 1.2958692 , -0.6143146 , -4.205751  , ..., -0.82749677,
           1.8829143 ,  1.259635  ]],

        [[ 1.5559192 ,  0.66212445, -1.0634853 , ..., -2.911032  ,
          -1.0707965 ,  0.4140219 ],
         [-0.5565742 ,  2.2100148 , -0.74238265, ...,  0.09101576,
           1.32435   ,  1.2759043 ],
         [ 2.3540177 ,  1.1215692 ,  1.8824475 , ...,  0.5860227 ,
           0.46936318, -1.0545211 ],
         ...,
         [ 1.0187593 , -0.04923415,  0.5789764 , ..., -3.6597443 ,
           0.7686222 ,  2.3938074 ],
         [-1.646601  ,  0.13715401,  1.0394179 , ..., -1.9867203 ,
          -0.72378564, -1.5262337 ],
         [ 1.2958692 , -0.6143146 , -4.205751  , ..., -0.82749677,
           1.8829143 ,  1.259635  ]],

        [[ 1.5559192 ,  0.66212445, -1.0634853 , ..., -2.911032  ,
          -1.0707965 ,  0.4140219 ],
         [-0.5565742 ,  2.2100148 , -0.74238265, ...,  0.09101576,
           1.32435   ,  1.2759043 ],
         [ 2.3540177 ,  1.1215692 ,  1.8824475 , ...,  0.5860227 ,
           0.46936318, -1.0545211 ],
         ...,
         [ 1.0187593 , -0.04923415,  0.5789764 , ..., -3.6597443 ,
           0.7686222 ,  2.3938074 ],
         [-1.646601  ,  0.13715401,  1.0394179 , ..., -1.9867203 ,
          -0.72378564, -1.5262337 ],
         [ 1.2958692 , -0.6143146 , -4.205751  , ..., -0.82749677,
           1.8829143 ,  1.259635  ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [], 'to': [21]}
tf node:
{'name': 'log', 'output': array([[[[ 0.4420665 , -0.41230175,         nan, ...,         nan,
                  nan, -0.8818364 ],
         [        nan,  0.7929992 ,         nan, ..., -2.3967226 ,
           0.28092176,  0.24365517],
         [ 0.85612357,  0.11472873,  0.63257277, ..., -0.53439677,
          -0.7563784 ,         nan],
         ...,
         [ 0.01858547,         nan, -0.5464936 , ...,         nan,
          -0.2631557 ,  0.87288517],
         [        nan, -1.9866508 ,  0.03866081, ...,         nan,
                  nan,         nan],
         [ 0.25918168,         nan,         nan, ...,         nan,
           0.6328207 ,  0.23082197]],

        [[ 0.4420665 , -0.41230175,         nan, ...,         nan,
                  nan, -0.8818364 ],
         [        nan,  0.7929992 ,         nan, ..., -2.3967226 ,
           0.28092176,  0.24365517],
         [ 0.85612357,  0.11472873,  0.63257277, ..., -0.53439677,
          -0.7563784 ,         nan],
         ...,
         [ 0.01858547,         nan, -0.5464936 , ...,         nan,
          -0.2631557 ,  0.87288517],
         [        nan, -1.9866508 ,  0.03866081, ...,         nan,
                  nan,         nan],
         [ 0.25918168,         nan,         nan, ...,         nan,
           0.6328207 ,  0.23082197]],

        [[ 0.4420665 , -0.41230175,         nan, ...,         nan,
                  nan, -0.8818364 ],
         [        nan,  0.7929992 ,         nan, ..., -2.3967226 ,
           0.28092176,  0.24365517],
         [ 0.85612357,  0.11472873,  0.63257277, ..., -0.53439677,
          -0.7563784 ,         nan],
         ...,
         [ 0.01858547,         nan, -0.5464936 , ...,         nan,
          -0.2631557 ,  0.87288517],
         [        nan, -1.9866508 ,  0.03866081, ...,         nan,
                  nan,         nan],
         [ 0.25918168,         nan,         nan, ...,         nan,
           0.6328207 ,  0.23082197]],

        ...,

        [[ 0.4420665 , -0.41230175,         nan, ...,         nan,
                  nan, -0.8818364 ],
         [        nan,  0.7929992 ,         nan, ..., -2.3967226 ,
           0.28092176,  0.24365517],
         [ 0.85612357,  0.11472873,  0.63257277, ..., -0.53439677,
          -0.7563784 ,         nan],
         ...,
         [ 0.01858547,         nan, -0.5464936 , ...,         nan,
          -0.2631557 ,  0.87288517],
         [        nan, -1.9866508 ,  0.03866081, ...,         nan,
                  nan,         nan],
         [ 0.25918168,         nan,         nan, ...,         nan,
           0.6328207 ,  0.23082197]],

        [[ 0.4420665 , -0.41230175,         nan, ...,         nan,
                  nan, -0.8818364 ],
         [        nan,  0.7929992 ,         nan, ..., -2.3967226 ,
           0.28092176,  0.24365517],
         [ 0.85612357,  0.11472873,  0.63257277, ..., -0.53439677,
          -0.7563784 ,         nan],
         ...,
         [ 0.01858547,         nan, -0.5464936 , ...,         nan,
          -0.2631557 ,  0.87288517],
         [        nan, -1.9866508 ,  0.03866081, ...,         nan,
                  nan,         nan],
         [ 0.25918168,         nan,         nan, ...,         nan,
           0.6328207 ,  0.23082197]],

        [[ 0.4420665 , -0.41230175,         nan, ...,         nan,
                  nan, -0.8818364 ],
         [        nan,  0.7929992 ,         nan, ..., -2.3967226 ,
           0.28092176,  0.24365517],
         [ 0.85612357,  0.11472873,  0.63257277, ..., -0.53439677,
          -0.7563784 ,         nan],
         ...,
         [ 0.01858547,         nan, -0.5464936 , ...,         nan,
          -0.2631557 ,  0.87288517],
         [        nan, -1.9866508 ,  0.03866081, ...,         nan,
                  nan,         nan],
         [ 0.25918168,         nan,         nan, ...,         nan,
           0.6328207 ,  0.23082197]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [0], 'to': [1]}
ms node:
{'name': 'log', 'output': array([[[[ 0.44206426, -0.41230366,         nan, ...,         nan,
                  nan, -0.8818388 ],
         [        nan,  0.7929998 ,         nan, ..., -2.3967228 ,
           0.28091985,  0.24365799],
         [ 0.8561221 ,  0.11472932,  0.6325728 , ..., -0.53439826,
          -0.7563784 ,         nan],
         ...,
         [ 0.01858404,         nan, -0.5464951 , ...,         nan,
          -0.2631579 ,  0.8728837 ],
         [        nan, -1.9866502 ,  0.03866422, ...,         nan,
                  nan,         nan],
         [ 0.2591845 ,         nan,         nan, ...,         nan,
           0.6328208 ,  0.23082478]],

        [[ 0.44206426, -0.41230366,         nan, ...,         nan,
                  nan, -0.8818388 ],
         [        nan,  0.7929998 ,         nan, ..., -2.3967228 ,
           0.28091985,  0.24365799],
         [ 0.8561221 ,  0.11472932,  0.6325728 , ..., -0.53439826,
          -0.7563784 ,         nan],
         ...,
         [ 0.01858404,         nan, -0.5464951 , ...,         nan,
          -0.2631579 ,  0.8728837 ],
         [        nan, -1.9866502 ,  0.03866422, ...,         nan,
                  nan,         nan],
         [ 0.2591845 ,         nan,         nan, ...,         nan,
           0.6328208 ,  0.23082478]],

        [[ 0.44206426, -0.41230366,         nan, ...,         nan,
                  nan, -0.8818388 ],
         [        nan,  0.7929998 ,         nan, ..., -2.3967228 ,
           0.28091985,  0.24365799],
         [ 0.8561221 ,  0.11472932,  0.6325728 , ..., -0.53439826,
          -0.7563784 ,         nan],
         ...,
         [ 0.01858404,         nan, -0.5464951 , ...,         nan,
          -0.2631579 ,  0.8728837 ],
         [        nan, -1.9866502 ,  0.03866422, ...,         nan,
                  nan,         nan],
         [ 0.2591845 ,         nan,         nan, ...,         nan,
           0.6328208 ,  0.23082478]],

        ...,

        [[ 0.44206426, -0.41230366,         nan, ...,         nan,
                  nan, -0.8818388 ],
         [        nan,  0.7929998 ,         nan, ..., -2.3967228 ,
           0.28091985,  0.24365799],
         [ 0.8561221 ,  0.11472932,  0.6325728 , ..., -0.53439826,
          -0.7563784 ,         nan],
         ...,
         [ 0.01858404,         nan, -0.5464951 , ...,         nan,
          -0.2631579 ,  0.8728837 ],
         [        nan, -1.9866502 ,  0.03866422, ...,         nan,
                  nan,         nan],
         [ 0.2591845 ,         nan,         nan, ...,         nan,
           0.6328208 ,  0.23082478]],

        [[ 0.44206426, -0.41230366,         nan, ...,         nan,
                  nan, -0.8818388 ],
         [        nan,  0.7929998 ,         nan, ..., -2.3967228 ,
           0.28091985,  0.24365799],
         [ 0.8561221 ,  0.11472932,  0.6325728 , ..., -0.53439826,
          -0.7563784 ,         nan],
         ...,
         [ 0.01858404,         nan, -0.5464951 , ...,         nan,
          -0.2631579 ,  0.8728837 ],
         [        nan, -1.9866502 ,  0.03866422, ...,         nan,
                  nan,         nan],
         [ 0.2591845 ,         nan,         nan, ...,         nan,
           0.6328208 ,  0.23082478]],

        [[ 0.44206426, -0.41230366,         nan, ...,         nan,
                  nan, -0.8818388 ],
         [        nan,  0.7929998 ,         nan, ..., -2.3967228 ,
           0.28091985,  0.24365799],
         [ 0.8561221 ,  0.11472932,  0.6325728 , ..., -0.53439826,
          -0.7563784 ,         nan],
         ...,
         [ 0.01858404,         nan, -0.5464951 , ...,         nan,
          -0.2631579 ,  0.8728837 ],
         [        nan, -1.9866502 ,  0.03866422, ...,         nan,
                  nan,         nan],
         [ 0.2591845 ,         nan,         nan, ...,         nan,
           0.6328208 ,  0.23082478]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [0], 'to': [1]}
torch node:
{'name': 'log', 'output': array([[[[ 0.4420665 , -0.41230175,         nan, ...,         nan,
                  nan, -0.8818364 ],
         [        nan,  0.7929992 ,         nan, ..., -2.3967226 ,
           0.28092176,  0.24365517],
         [ 0.85612357,  0.11472873,  0.63257277, ..., -0.53439677,
          -0.7563784 ,         nan],
         ...,
         [ 0.01858547,         nan, -0.5464936 , ...,         nan,
          -0.2631557 ,  0.87288517],
         [        nan, -1.9866508 ,  0.03866081, ...,         nan,
                  nan,         nan],
         [ 0.25918168,         nan,         nan, ...,         nan,
           0.6328207 ,  0.23082197]],

        [[ 0.4420665 , -0.41230175,         nan, ...,         nan,
                  nan, -0.8818364 ],
         [        nan,  0.7929992 ,         nan, ..., -2.3967226 ,
           0.28092176,  0.24365517],
         [ 0.85612357,  0.11472873,  0.63257277, ..., -0.53439677,
          -0.7563784 ,         nan],
         ...,
         [ 0.01858547,         nan, -0.5464936 , ...,         nan,
          -0.2631557 ,  0.87288517],
         [        nan, -1.9866508 ,  0.03866081, ...,         nan,
                  nan,         nan],
         [ 0.25918168,         nan,         nan, ...,         nan,
           0.6328207 ,  0.23082197]],

        [[ 0.4420665 , -0.41230175,         nan, ...,         nan,
                  nan, -0.8818364 ],
         [        nan,  0.7929992 ,         nan, ..., -2.3967226 ,
           0.28092176,  0.24365517],
         [ 0.85612357,  0.11472873,  0.63257277, ..., -0.53439677,
          -0.7563784 ,         nan],
         ...,
         [ 0.01858547,         nan, -0.5464936 , ...,         nan,
          -0.2631557 ,  0.87288517],
         [        nan, -1.9866508 ,  0.03866081, ...,         nan,
                  nan,         nan],
         [ 0.25918168,         nan,         nan, ...,         nan,
           0.6328207 ,  0.23082197]],

        ...,

        [[ 0.4420665 , -0.41230175,         nan, ...,         nan,
                  nan, -0.8818364 ],
         [        nan,  0.7929992 ,         nan, ..., -2.3967226 ,
           0.28092176,  0.24365517],
         [ 0.85612357,  0.11472873,  0.63257277, ..., -0.53439677,
          -0.7563784 ,         nan],
         ...,
         [ 0.01858547,         nan, -0.5464936 , ...,         nan,
          -0.2631557 ,  0.87288517],
         [        nan, -1.9866508 ,  0.03866081, ...,         nan,
                  nan,         nan],
         [ 0.25918168,         nan,         nan, ...,         nan,
           0.6328207 ,  0.23082197]],

        [[ 0.4420665 , -0.41230175,         nan, ...,         nan,
                  nan, -0.8818364 ],
         [        nan,  0.7929992 ,         nan, ..., -2.3967226 ,
           0.28092176,  0.24365517],
         [ 0.85612357,  0.11472873,  0.63257277, ..., -0.53439677,
          -0.7563784 ,         nan],
         ...,
         [ 0.01858547,         nan, -0.5464936 , ...,         nan,
          -0.2631557 ,  0.87288517],
         [        nan, -1.9866508 ,  0.03866081, ...,         nan,
                  nan,         nan],
         [ 0.25918168,         nan,         nan, ...,         nan,
           0.6328207 ,  0.23082197]],

        [[ 0.4420665 , -0.41230175,         nan, ...,         nan,
                  nan, -0.8818364 ],
         [        nan,  0.7929992 ,         nan, ..., -2.3967226 ,
           0.28092176,  0.24365517],
         [ 0.85612357,  0.11472873,  0.63257277, ..., -0.53439677,
          -0.7563784 ,         nan],
         ...,
         [ 0.01858547,         nan, -0.5464936 , ...,         nan,
          -0.2631557 ,  0.87288517],
         [        nan, -1.9866508 ,  0.03866081, ...,         nan,
                  nan,         nan],
         [ 0.25918168,         nan,         nan, ...,         nan,
           0.6328207 ,  0.23082197]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [0], 'to': [1]}

generate models:211

analyse output arrays in iter:235

pre layer res:
12:log
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [9], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [12], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [12], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [12], 'to': []}

generate models:222

analyse output arrays in iter:252

pre layer res:
13:cos
{'name': 'cos', 'output': array([[[[ 1.        ,  1.        ,  1.        , ...,  0.5394827 ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.93720967, ...,  1.        ,
           0.80547327,  0.45702726],
         [ 1.        ,  1.        ,  0.5874358 , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           0.92022955,  1.        ],
         [ 0.7162154 ,  1.        ,  1.        , ...,  1.        ,
          -0.42870995,  1.        ],
         [ 1.        , -0.05709538,  1.        , ...,  0.65167236,
           1.        , -0.3062621 ]],

        [[ 1.        ,  1.        ,  1.        , ...,  0.5394827 ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.93720967, ...,  1.        ,
           0.80547327,  0.45702726],
         [ 1.        ,  1.        ,  0.5874358 , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           0.92022955,  1.        ],
         [ 0.7162154 ,  1.        ,  1.        , ...,  1.        ,
          -0.42870995,  1.        ],
         [ 1.        , -0.05709538,  1.        , ...,  0.65167236,
           1.        , -0.3062621 ]],

        [[ 1.        ,  1.        ,  1.        , ...,  0.5394827 ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.93720967, ...,  1.        ,
           0.80547327,  0.45702726],
         [ 1.        ,  1.        ,  0.5874358 , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           0.92022955,  1.        ],
         [ 0.7162154 ,  1.        ,  1.        , ...,  1.        ,
          -0.42870995,  1.        ],
         [ 1.        , -0.05709538,  1.        , ...,  0.65167236,
           1.        , -0.3062621 ]],

        ...,

        [[ 1.        ,  1.        ,  1.        , ...,  0.5394827 ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.93720967, ...,  1.        ,
           0.80547327,  0.45702726],
         [ 1.        ,  1.        ,  0.5874358 , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           0.92022955,  1.        ],
         [ 0.7162154 ,  1.        ,  1.        , ...,  1.        ,
          -0.42870995,  1.        ],
         [ 1.        , -0.05709538,  1.        , ...,  0.65167236,
           1.        , -0.3062621 ]],

        [[ 1.        ,  1.        ,  1.        , ...,  0.5394827 ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.93720967, ...,  1.        ,
           0.80547327,  0.45702726],
         [ 1.        ,  1.        ,  0.5874358 , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           0.92022955,  1.        ],
         [ 0.7162154 ,  1.        ,  1.        , ...,  1.        ,
          -0.42870995,  1.        ],
         [ 1.        , -0.05709538,  1.        , ...,  0.65167236,
           1.        , -0.3062621 ]],

        [[ 1.        ,  1.        ,  1.        , ...,  0.5394827 ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  0.93720967, ...,  1.        ,
           0.80547327,  0.45702726],
         [ 1.        ,  1.        ,  0.5874358 , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           0.92022955,  1.        ],
         [ 0.7162154 ,  1.        ,  1.        , ...,  1.        ,
          -0.42870995,  1.        ],
         [ 1.        , -0.05709538,  1.        , ...,  0.65167236,
           1.        , -0.3062621 ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [1], 'to': [19]}
tf node:
{'name': 'log', 'output': array([[[[ 0.        ,  0.        ,  0.        , ..., -0.6171445 ,
           0.        ,  0.        ],
         [ 0.        ,  0.        , -0.06484826, ...,  0.        ,
          -0.21632527, -0.7830123 ],
         [ 0.        ,  0.        , -0.5319884 , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
          -0.08313213,  0.        ],
         [-0.33377436,  0.        ,  0.        , ...,  0.        ,
                  nan,  0.        ],
         [ 0.        ,         nan,  0.        , ..., -0.42821336,
           0.        ,         nan]],

        [[ 0.        ,  0.        ,  0.        , ..., -0.6171445 ,
           0.        ,  0.        ],
         [ 0.        ,  0.        , -0.06484826, ...,  0.        ,
          -0.21632527, -0.7830123 ],
         [ 0.        ,  0.        , -0.5319884 , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
          -0.08313213,  0.        ],
         [-0.33377436,  0.        ,  0.        , ...,  0.        ,
                  nan,  0.        ],
         [ 0.        ,         nan,  0.        , ..., -0.42821336,
           0.        ,         nan]],

        [[ 0.        ,  0.        ,  0.        , ..., -0.6171445 ,
           0.        ,  0.        ],
         [ 0.        ,  0.        , -0.06484826, ...,  0.        ,
          -0.21632527, -0.7830123 ],
         [ 0.        ,  0.        , -0.5319884 , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
          -0.08313213,  0.        ],
         [-0.33377436,  0.        ,  0.        , ...,  0.        ,
                  nan,  0.        ],
         [ 0.        ,         nan,  0.        , ..., -0.42821336,
           0.        ,         nan]],

        ...,

        [[ 0.        ,  0.        ,  0.        , ..., -0.6171445 ,
           0.        ,  0.        ],
         [ 0.        ,  0.        , -0.06484826, ...,  0.        ,
          -0.21632527, -0.7830123 ],
         [ 0.        ,  0.        , -0.5319884 , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
          -0.08313213,  0.        ],
         [-0.33377436,  0.        ,  0.        , ...,  0.        ,
                  nan,  0.        ],
         [ 0.        ,         nan,  0.        , ..., -0.42821336,
           0.        ,         nan]],

        [[ 0.        ,  0.        ,  0.        , ..., -0.6171445 ,
           0.        ,  0.        ],
         [ 0.        ,  0.        , -0.06484826, ...,  0.        ,
          -0.21632527, -0.7830123 ],
         [ 0.        ,  0.        , -0.5319884 , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
          -0.08313213,  0.        ],
         [-0.33377436,  0.        ,  0.        , ...,  0.        ,
                  nan,  0.        ],
         [ 0.        ,         nan,  0.        , ..., -0.42821336,
           0.        ,         nan]],

        [[ 0.        ,  0.        ,  0.        , ..., -0.6171445 ,
           0.        ,  0.        ],
         [ 0.        ,  0.        , -0.06484826, ...,  0.        ,
          -0.21632527, -0.7830123 ],
         [ 0.        ,  0.        , -0.5319884 , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
          -0.08313213,  0.        ],
         [-0.33377436,  0.        ,  0.        , ...,  0.        ,
                  nan,  0.        ],
         [ 0.        ,         nan,  0.        , ..., -0.42821336,
           0.        ,         nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [13], 'to': [2]}
ms node:
{'name': 'log', 'output': array([[[[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -6.1714745e-01, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -6.4848237e-02, ...,
          -1.4305115e-06, -2.1632774e-01, -7.8301322e-01],
         [-1.4305115e-06, -1.4305115e-06, -5.3198981e-01, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -8.3133116e-02, -1.4305115e-06],
         [-3.3377159e-01, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06,            nan, -1.4305115e-06],
         [-1.4305115e-06,            nan, -1.4305115e-06, ...,
          -4.2821056e-01, -1.4305115e-06,            nan]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -6.1714745e-01, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -6.4848237e-02, ...,
          -1.4305115e-06, -2.1632774e-01, -7.8301322e-01],
         [-1.4305115e-06, -1.4305115e-06, -5.3198981e-01, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -8.3133116e-02, -1.4305115e-06],
         [-3.3377159e-01, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06,            nan, -1.4305115e-06],
         [-1.4305115e-06,            nan, -1.4305115e-06, ...,
          -4.2821056e-01, -1.4305115e-06,            nan]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -6.1714745e-01, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -6.4848237e-02, ...,
          -1.4305115e-06, -2.1632774e-01, -7.8301322e-01],
         [-1.4305115e-06, -1.4305115e-06, -5.3198981e-01, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -8.3133116e-02, -1.4305115e-06],
         [-3.3377159e-01, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06,            nan, -1.4305115e-06],
         [-1.4305115e-06,            nan, -1.4305115e-06, ...,
          -4.2821056e-01, -1.4305115e-06,            nan]],

        ...,

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -6.1714745e-01, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -6.4848237e-02, ...,
          -1.4305115e-06, -2.1632774e-01, -7.8301322e-01],
         [-1.4305115e-06, -1.4305115e-06, -5.3198981e-01, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -8.3133116e-02, -1.4305115e-06],
         [-3.3377159e-01, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06,            nan, -1.4305115e-06],
         [-1.4305115e-06,            nan, -1.4305115e-06, ...,
          -4.2821056e-01, -1.4305115e-06,            nan]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -6.1714745e-01, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -6.4848237e-02, ...,
          -1.4305115e-06, -2.1632774e-01, -7.8301322e-01],
         [-1.4305115e-06, -1.4305115e-06, -5.3198981e-01, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -8.3133116e-02, -1.4305115e-06],
         [-3.3377159e-01, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06,            nan, -1.4305115e-06],
         [-1.4305115e-06,            nan, -1.4305115e-06, ...,
          -4.2821056e-01, -1.4305115e-06,            nan]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -6.1714745e-01, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -6.4848237e-02, ...,
          -1.4305115e-06, -2.1632774e-01, -7.8301322e-01],
         [-1.4305115e-06, -1.4305115e-06, -5.3198981e-01, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -8.3133116e-02, -1.4305115e-06],
         [-3.3377159e-01, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06,            nan, -1.4305115e-06],
         [-1.4305115e-06,            nan, -1.4305115e-06, ...,
          -4.2821056e-01, -1.4305115e-06,            nan]]]],
      dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [13], 'to': [2]}
torch node:
{'name': 'log', 'output': array([[[[ 0.        ,  0.        ,  0.        , ..., -0.6171445 ,
           0.        ,  0.        ],
         [ 0.        ,  0.        , -0.06484826, ...,  0.        ,
          -0.21632534, -0.7830123 ],
         [ 0.        ,  0.        , -0.5319884 , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
          -0.08313213,  0.        ],
         [-0.33377445,  0.        ,  0.        , ...,  0.        ,
                  nan,  0.        ],
         [ 0.        ,         nan,  0.        , ..., -0.42821336,
           0.        ,         nan]],

        [[ 0.        ,  0.        ,  0.        , ..., -0.6171445 ,
           0.        ,  0.        ],
         [ 0.        ,  0.        , -0.06484826, ...,  0.        ,
          -0.21632534, -0.7830123 ],
         [ 0.        ,  0.        , -0.5319884 , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
          -0.08313213,  0.        ],
         [-0.33377445,  0.        ,  0.        , ...,  0.        ,
                  nan,  0.        ],
         [ 0.        ,         nan,  0.        , ..., -0.42821336,
           0.        ,         nan]],

        [[ 0.        ,  0.        ,  0.        , ..., -0.6171445 ,
           0.        ,  0.        ],
         [ 0.        ,  0.        , -0.06484826, ...,  0.        ,
          -0.21632534, -0.7830123 ],
         [ 0.        ,  0.        , -0.5319884 , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
          -0.08313213,  0.        ],
         [-0.33377445,  0.        ,  0.        , ...,  0.        ,
                  nan,  0.        ],
         [ 0.        ,         nan,  0.        , ..., -0.42821336,
           0.        ,         nan]],

        ...,

        [[ 0.        ,  0.        ,  0.        , ..., -0.6171445 ,
           0.        ,  0.        ],
         [ 0.        ,  0.        , -0.06484826, ...,  0.        ,
          -0.21632534, -0.7830123 ],
         [ 0.        ,  0.        , -0.5319884 , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
          -0.08313213,  0.        ],
         [-0.33377445,  0.        ,  0.        , ...,  0.        ,
                  nan,  0.        ],
         [ 0.        ,         nan,  0.        , ..., -0.42821336,
           0.        ,         nan]],

        [[ 0.        ,  0.        ,  0.        , ..., -0.6171445 ,
           0.        ,  0.        ],
         [ 0.        ,  0.        , -0.06484826, ...,  0.        ,
          -0.21632534, -0.7830123 ],
         [ 0.        ,  0.        , -0.5319884 , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
          -0.08313213,  0.        ],
         [-0.33377445,  0.        ,  0.        , ...,  0.        ,
                  nan,  0.        ],
         [ 0.        ,         nan,  0.        , ..., -0.42821336,
           0.        ,         nan]],

        [[ 0.        ,  0.        ,  0.        , ..., -0.6171445 ,
           0.        ,  0.        ],
         [ 0.        ,  0.        , -0.06484826, ...,  0.        ,
          -0.21632534, -0.7830123 ],
         [ 0.        ,  0.        , -0.5319884 , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
          -0.08313213,  0.        ],
         [-0.33377445,  0.        ,  0.        , ...,  0.        ,
                  nan,  0.        ],
         [ 0.        ,         nan,  0.        , ..., -0.42821336,
           0.        ,         nan]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [13], 'to': [2]}

generate models:238

analyse output arrays in iter:257

pre layer res:
7:conv2d
{'name': 'conv2d', 'output': array([[[[1.3704069e+10, 0.0000000e+00, 2.3475315e+09, ...,
          1.8959274e+10, 2.1355379e+10, 1.0804790e+10],
         [2.4706212e+10, 1.2923377e+09, 2.0286689e+10, ...,
          8.0890394e+09, 4.0059469e+09, 3.9860511e+10],
         [1.9165181e+09, 5.5642230e+09, 1.5230303e+10, ...,
          1.9718586e+10, 6.8604590e+09, 0.0000000e+00],
         ...,
         [6.0283991e+09, 5.3320340e+09, 2.1814482e+09, ...,
          2.9956698e+10, 1.4784624e+10, 2.9260978e+10],
         [1.9861447e+10, 4.6454825e+09, 6.2360950e+09, ...,
          3.8937631e+09, 1.6127249e+09, 0.0000000e+00],
         [2.7674558e+10, 2.0042043e+10, 3.7398979e+10, ...,
          1.0047965e+10, 1.0257782e+10, 0.0000000e+00]],

        [[1.3704069e+10, 0.0000000e+00, 2.3475315e+09, ...,
          1.8959274e+10, 2.1355379e+10, 1.0804790e+10],
         [2.4706212e+10, 1.2923377e+09, 2.0286689e+10, ...,
          8.0890394e+09, 4.0059469e+09, 3.9860511e+10],
         [1.9165181e+09, 5.5642230e+09, 1.5230303e+10, ...,
          1.9718586e+10, 6.8604590e+09, 0.0000000e+00],
         ...,
         [6.0283991e+09, 5.3320340e+09, 2.1814482e+09, ...,
          2.9956698e+10, 1.4784624e+10, 2.9260978e+10],
         [1.9861447e+10, 4.6454825e+09, 6.2360950e+09, ...,
          3.8937631e+09, 1.6127249e+09, 0.0000000e+00],
         [2.7674558e+10, 2.0042043e+10, 3.7398979e+10, ...,
          1.0047965e+10, 1.0257782e+10, 0.0000000e+00]],

        [[1.3704069e+10, 0.0000000e+00, 2.3475315e+09, ...,
          1.8959274e+10, 2.1355379e+10, 1.0804790e+10],
         [2.4706212e+10, 1.2923377e+09, 2.0286689e+10, ...,
          8.0890394e+09, 4.0059469e+09, 3.9860511e+10],
         [1.9165181e+09, 5.5642230e+09, 1.5230303e+10, ...,
          1.9718586e+10, 6.8604590e+09, 0.0000000e+00],
         ...,
         [6.0283991e+09, 5.3320340e+09, 2.1814482e+09, ...,
          2.9956698e+10, 1.4784624e+10, 2.9260978e+10],
         [1.9861447e+10, 4.6454825e+09, 6.2360950e+09, ...,
          3.8937631e+09, 1.6127249e+09, 0.0000000e+00],
         [2.7674558e+10, 2.0042043e+10, 3.7398979e+10, ...,
          1.0047965e+10, 1.0257782e+10, 0.0000000e+00]],

        ...,

        [[1.3704069e+10, 0.0000000e+00, 2.3475315e+09, ...,
          1.8959274e+10, 2.1355379e+10, 1.0804790e+10],
         [2.4706212e+10, 1.2923377e+09, 2.0286689e+10, ...,
          8.0890394e+09, 4.0059469e+09, 3.9860511e+10],
         [1.9165181e+09, 5.5642230e+09, 1.5230303e+10, ...,
          1.9718586e+10, 6.8604590e+09, 0.0000000e+00],
         ...,
         [6.0283991e+09, 5.3320340e+09, 2.1814482e+09, ...,
          2.9956698e+10, 1.4784624e+10, 2.9260978e+10],
         [1.9861447e+10, 4.6454825e+09, 6.2360950e+09, ...,
          3.8937631e+09, 1.6127249e+09, 0.0000000e+00],
         [2.7674558e+10, 2.0042043e+10, 3.7398979e+10, ...,
          1.0047965e+10, 1.0257782e+10, 0.0000000e+00]],

        [[1.3704069e+10, 0.0000000e+00, 2.3475315e+09, ...,
          1.8959274e+10, 2.1355379e+10, 1.0804790e+10],
         [2.4706212e+10, 1.2923377e+09, 2.0286689e+10, ...,
          8.0890394e+09, 4.0059469e+09, 3.9860511e+10],
         [1.9165181e+09, 5.5642230e+09, 1.5230303e+10, ...,
          1.9718586e+10, 6.8604590e+09, 0.0000000e+00],
         ...,
         [6.0283991e+09, 5.3320340e+09, 2.1814482e+09, ...,
          2.9956698e+10, 1.4784624e+10, 2.9260978e+10],
         [1.9861447e+10, 4.6454825e+09, 6.2360950e+09, ...,
          3.8937631e+09, 1.6127249e+09, 0.0000000e+00],
         [2.7674558e+10, 2.0042043e+10, 3.7398979e+10, ...,
          1.0047965e+10, 1.0257782e+10, 0.0000000e+00]],

        [[1.3704069e+10, 0.0000000e+00, 2.3475315e+09, ...,
          1.8959274e+10, 2.1355379e+10, 1.0804790e+10],
         [2.4706212e+10, 1.2923377e+09, 2.0286689e+10, ...,
          8.0890394e+09, 4.0059469e+09, 3.9860511e+10],
         [1.9165181e+09, 5.5642230e+09, 1.5230303e+10, ...,
          1.9718586e+10, 6.8604590e+09, 0.0000000e+00],
         ...,
         [6.0283991e+09, 5.3320340e+09, 2.1814482e+09, ...,
          2.9956698e+10, 1.4784624e+10, 2.9260978e+10],
         [1.9861447e+10, 4.6454825e+09, 6.2360950e+09, ...,
          3.8937631e+09, 1.6127249e+09, 0.0000000e+00],
         [2.7674558e+10, 2.0042043e+10, 3.7398979e+10, ...,
          1.0047965e+10, 1.0257782e+10, 0.0000000e+00]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [15], 'to': [12]}
tf node:
{'name': 'cos', 'output': array([[[[ 0.87931687,  1.        , -0.9845979 , ...,  0.9967534 ,
           0.2760603 ,  0.6375418 ],
         [-0.8493761 , -0.68194556,  0.734805  , ...,  0.99843633,
          -0.2147346 , -0.03445002],
         [ 0.6232553 ,  0.8239013 ,  0.5290745 , ..., -0.01044962,
           0.9998746 ,  1.        ],
         ...,
         [-0.49465525, -0.98615795,  0.6162674 , ...,  0.08504407,
           0.0654752 , -0.8590466 ],
         [-0.05272236, -0.2198347 ,  0.9913618 , ...,  0.6495266 ,
           0.9563541 ,  1.        ],
         [-0.90814424, -0.9999824 , -0.8503794 , ...,  0.9532348 ,
          -0.07458734,  1.        ]],

        [[ 0.87931687,  1.        , -0.9845979 , ...,  0.9967534 ,
           0.2760603 ,  0.6375418 ],
         [-0.8493761 , -0.68194556,  0.734805  , ...,  0.99843633,
          -0.2147346 , -0.03445002],
         [ 0.6232553 ,  0.8239013 ,  0.5290745 , ..., -0.01044962,
           0.9998746 ,  1.        ],
         ...,
         [-0.49465525, -0.98615795,  0.6162674 , ...,  0.08504407,
           0.0654752 , -0.8590466 ],
         [-0.05272236, -0.2198347 ,  0.9913618 , ...,  0.6495266 ,
           0.9563541 ,  1.        ],
         [-0.90814424, -0.9999824 , -0.8503794 , ...,  0.9532348 ,
          -0.07458734,  1.        ]],

        [[ 0.87931687,  1.        , -0.9845979 , ...,  0.9967534 ,
           0.2760603 ,  0.6375418 ],
         [-0.8493761 , -0.68194556,  0.734805  , ...,  0.99843633,
          -0.2147346 , -0.03445002],
         [ 0.6232553 ,  0.8239013 ,  0.5290745 , ..., -0.01044962,
           0.9998746 ,  1.        ],
         ...,
         [-0.49465525, -0.98615795,  0.6162674 , ...,  0.08504407,
           0.0654752 , -0.8590466 ],
         [-0.05272236, -0.2198347 ,  0.9913618 , ...,  0.6495266 ,
           0.9563541 ,  1.        ],
         [-0.90814424, -0.9999824 , -0.8503794 , ...,  0.9532348 ,
          -0.07458734,  1.        ]],

        ...,

        [[ 0.87931687,  1.        , -0.9845979 , ...,  0.9967534 ,
           0.2760603 ,  0.6375418 ],
         [-0.8493761 , -0.68194556,  0.734805  , ...,  0.99843633,
          -0.2147346 , -0.03445002],
         [ 0.6232553 ,  0.8239013 ,  0.5290745 , ..., -0.01044962,
           0.9998746 ,  1.        ],
         ...,
         [-0.49465525, -0.98615795,  0.6162674 , ...,  0.08504407,
           0.0654752 , -0.8590466 ],
         [-0.05272236, -0.2198347 ,  0.9913618 , ...,  0.6495266 ,
           0.9563541 ,  1.        ],
         [-0.90814424, -0.9999824 , -0.8503794 , ...,  0.9532348 ,
          -0.07458734,  1.        ]],

        [[ 0.87931687,  1.        , -0.9845979 , ...,  0.9967534 ,
           0.2760603 ,  0.6375418 ],
         [-0.8493761 , -0.68194556,  0.734805  , ...,  0.99843633,
          -0.2147346 , -0.03445002],
         [ 0.6232553 ,  0.8239013 ,  0.5290745 , ..., -0.01044962,
           0.9998746 ,  1.        ],
         ...,
         [-0.49465525, -0.98615795,  0.6162674 , ...,  0.08504407,
           0.0654752 , -0.8590466 ],
         [-0.05272236, -0.2198347 ,  0.9913618 , ...,  0.6495266 ,
           0.9563541 ,  1.        ],
         [-0.90814424, -0.9999824 , -0.8503794 , ...,  0.9532348 ,
          -0.07458734,  1.        ]],

        [[ 0.87931687,  1.        , -0.9845979 , ...,  0.9967534 ,
           0.2760603 ,  0.6375418 ],
         [-0.8493761 , -0.68194556,  0.734805  , ...,  0.99843633,
          -0.2147346 , -0.03445002],
         [ 0.6232553 ,  0.8239013 ,  0.5290745 , ..., -0.01044962,
           0.9998746 ,  1.        ],
         ...,
         [-0.49465525, -0.98615795,  0.6162674 , ...,  0.08504407,
           0.0654752 , -0.8590466 ],
         [-0.05272236, -0.2198347 ,  0.9913618 , ...,  0.6495266 ,
           0.9563541 ,  1.        ],
         [-0.90814424, -0.9999824 , -0.8503794 , ...,  0.9532348 ,
          -0.07458734,  1.        ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [7], 'to': [8]}
ms node:
{'name': 'cos', 'output': array([[[[ 0.9436962 ,  1.        , -0.9845979 , ...,  0.84925795,
           0.7934843 ,  0.6375418 ],
         [-0.8493761 ,  0.99988633,  0.734805  , ..., -0.9997198 ,
          -0.9673545 , -0.03445002],
         [ 0.6232553 , -0.66646206,  0.23682772, ...,  0.5862081 ,
           0.9998746 ,  1.        ],
         ...,
         [-0.49465525, -0.98615795,  0.6162674 , ...,  0.08504406,
           0.0654752 , -0.9541469 ],
         [-0.05272236, -0.2198347 , -0.3069572 , ...,  0.73389155,
          -0.87334836,  1.        ],
         [-0.90814424, -0.8004531 , -0.8503794 , ...,  0.9532348 ,
          -0.07458735,  1.        ]],

        [[ 0.9436962 ,  1.        , -0.9845979 , ...,  0.84925795,
           0.7934843 ,  0.6375418 ],
         [-0.8493761 ,  0.99988633,  0.734805  , ..., -0.9997198 ,
          -0.9673545 , -0.03445002],
         [ 0.6232553 , -0.66646206,  0.23682772, ...,  0.5862081 ,
           0.9998746 ,  1.        ],
         ...,
         [-0.49465525, -0.98615795,  0.6162674 , ...,  0.08504406,
           0.0654752 , -0.9541469 ],
         [-0.05272236, -0.2198347 , -0.3069572 , ...,  0.73389155,
          -0.87334836,  1.        ],
         [-0.90814424, -0.8004531 , -0.8503794 , ...,  0.9532348 ,
          -0.07458735,  1.        ]],

        [[ 0.9436962 ,  1.        , -0.9845979 , ...,  0.84925795,
           0.7934843 ,  0.6375418 ],
         [-0.8493761 ,  0.99988633,  0.734805  , ..., -0.9997198 ,
          -0.9673545 , -0.03445002],
         [ 0.6232553 , -0.66646206,  0.23682772, ...,  0.5862081 ,
           0.9998746 ,  1.        ],
         ...,
         [-0.49465525, -0.98615795,  0.6162674 , ...,  0.08504406,
           0.0654752 , -0.9541469 ],
         [-0.05272236, -0.2198347 , -0.3069572 , ...,  0.73389155,
          -0.87334836,  1.        ],
         [-0.90814424, -0.8004531 , -0.8503794 , ...,  0.9532348 ,
          -0.07458735,  1.        ]],

        ...,

        [[ 0.9436962 ,  1.        , -0.9845979 , ...,  0.84925795,
           0.7934843 ,  0.6375418 ],
         [-0.8493761 ,  0.99988633,  0.734805  , ..., -0.9997198 ,
          -0.9673545 , -0.03445002],
         [ 0.6232553 , -0.66646206,  0.23682772, ...,  0.5862081 ,
           0.9998746 ,  1.        ],
         ...,
         [-0.49465525, -0.98615795,  0.6162674 , ...,  0.08504406,
           0.0654752 , -0.9541469 ],
         [-0.05272236, -0.2198347 , -0.3069572 , ...,  0.73389155,
          -0.87334836,  1.        ],
         [-0.90814424, -0.8004531 , -0.8503794 , ...,  0.9532348 ,
          -0.07458735,  1.        ]],

        [[-0.46188062,  1.        ,  0.0563036 , ..., -0.32900453,
           0.7934843 ,  0.5073425 ],
         [ 0.981033  ,  0.7579588 , -0.5222419 , ..., -0.8987254 ,
           0.5476937 , -0.8964345 ],
         [-0.8061989 , -0.8663581 ,  0.07980933, ...,  0.5685658 ,
           0.08491632,  1.        ],
         ...,
         [ 0.27499765, -0.57138556,  0.6162674 , ..., -0.9997769 ,
           0.5759837 ,  0.6229321 ],
         [ 0.99950415,  0.14156534, -0.53426135, ...,  0.05157158,
          -0.01792733,  1.        ],
         [ 0.886646  , -0.94786274, -0.1290475 , ..., -0.7214552 ,
          -0.07458735,  1.        ]],

        [[-0.46188062,  1.        ,  0.0563036 , ..., -0.32900453,
           0.7934843 ,  0.5073425 ],
         [ 0.981033  ,  0.7579588 , -0.5222419 , ..., -0.8987254 ,
           0.5476937 , -0.8964345 ],
         [-0.8061989 , -0.8663581 ,  0.07980933, ...,  0.5685658 ,
           0.08491632,  1.        ],
         ...,
         [ 0.27499765, -0.57138556,  0.6162674 , ..., -0.9997769 ,
           0.5759837 ,  0.6229321 ],
         [ 0.99950415,  0.14156534, -0.53426135, ...,  0.05157158,
          -0.01792733,  1.        ],
         [ 0.886646  , -0.94786274, -0.1290475 , ..., -0.7214552 ,
          -0.07458735,  1.        ]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [7], 'to': [8]}
torch node:
{'name': 'cos', 'output': array([[[[ 0.87931687,  1.        , -0.9845979 , ...,  0.84925795,
           0.7934843 ,  0.6375418 ],
         [-0.8493761 , -0.68194556,  0.734805  , ..., -0.9997198 ,
          -0.9673545 , -0.03445002],
         [ 0.6232553 ,  0.8239013 ,  0.5290745 , ...,  0.5862081 ,
           0.9998746 ,  1.        ],
         ...,
         [-0.49465525, -0.98615795,  0.6162674 , ...,  0.08504406,
           0.0654752 , -0.6556129 ],
         [-0.05272236, -0.2198347 , -0.9777932 , ...,  0.73389155,
          -0.87334836,  1.        ],
         [-0.90814424, -0.9999824 , -0.8503794 , ...,  0.9532348 ,
          -0.07458735,  1.        ]],

        [[ 0.87931687,  1.        , -0.9845979 , ...,  0.84925795,
           0.7934843 ,  0.6375418 ],
         [-0.8493761 , -0.68194556,  0.734805  , ..., -0.9997198 ,
          -0.9673545 , -0.03445002],
         [ 0.6232553 ,  0.8239013 ,  0.5290745 , ...,  0.5862081 ,
           0.9998746 ,  1.        ],
         ...,
         [-0.49465525, -0.98615795,  0.6162674 , ...,  0.08504406,
           0.0654752 , -0.6556129 ],
         [-0.05272236, -0.2198347 , -0.9777932 , ...,  0.73389155,
          -0.87334836,  1.        ],
         [-0.90814424, -0.9999824 , -0.8503794 , ...,  0.9532348 ,
          -0.07458735,  1.        ]],

        [[ 0.87931687,  1.        , -0.9845979 , ...,  0.84925795,
           0.7934843 ,  0.6375418 ],
         [-0.8493761 , -0.68194556,  0.734805  , ..., -0.9997198 ,
          -0.9673545 , -0.03445002],
         [ 0.6232553 ,  0.8239013 ,  0.5290745 , ...,  0.5862081 ,
           0.9998746 ,  1.        ],
         ...,
         [-0.49465525, -0.98615795,  0.6162674 , ...,  0.08504406,
           0.0654752 , -0.6556129 ],
         [-0.05272236, -0.2198347 , -0.9777932 , ...,  0.73389155,
          -0.87334836,  1.        ],
         [-0.90814424, -0.9999824 , -0.8503794 , ...,  0.9532348 ,
          -0.07458735,  1.        ]],

        ...,

        [[ 0.87931687,  1.        , -0.9845979 , ...,  0.84925795,
           0.7934843 ,  0.6375418 ],
         [-0.8493761 , -0.68194556,  0.734805  , ..., -0.9997198 ,
          -0.9673545 , -0.03445002],
         [ 0.6232553 ,  0.8239013 ,  0.5290745 , ...,  0.5862081 ,
           0.9998746 ,  1.        ],
         ...,
         [-0.49465525, -0.98615795,  0.6162674 , ...,  0.08504406,
           0.0654752 , -0.6556129 ],
         [-0.05272236, -0.2198347 , -0.9777932 , ...,  0.73389155,
          -0.87334836,  1.        ],
         [-0.90814424, -0.9999824 , -0.8503794 , ...,  0.9532348 ,
          -0.07458735,  1.        ]],

        [[ 0.87931687,  1.        , -0.9845979 , ...,  0.84925795,
           0.7934843 ,  0.6375418 ],
         [-0.8493761 , -0.68194556,  0.734805  , ..., -0.9997198 ,
          -0.9673545 , -0.03445002],
         [ 0.6232553 ,  0.8239013 ,  0.5290745 , ...,  0.5862081 ,
           0.9998746 ,  1.        ],
         ...,
         [-0.49465525, -0.98615795,  0.6162674 , ...,  0.08504406,
           0.0654752 , -0.6556129 ],
         [-0.05272236, -0.2198347 , -0.9777932 , ...,  0.73389155,
          -0.87334836,  1.        ],
         [-0.90814424, -0.9999824 , -0.8503794 , ...,  0.9532348 ,
          -0.07458735,  1.        ]],

        [[ 0.87931687,  1.        , -0.9845979 , ...,  0.84925795,
           0.7934843 ,  0.6375418 ],
         [-0.8493761 , -0.68194556,  0.734805  , ..., -0.9997198 ,
          -0.9673545 , -0.03445002],
         [ 0.6232553 ,  0.8239013 ,  0.5290745 , ...,  0.5862081 ,
           0.9998746 ,  1.        ],
         ...,
         [-0.49465525, -0.98615795,  0.6162674 , ...,  0.08504406,
           0.0654752 , -0.6556129 ],
         [-0.05272236, -0.2198347 , -0.9777932 , ...,  0.73389155,
          -0.87334836,  1.        ],
         [-0.90814424, -0.9999824 , -0.8503794 , ...,  0.9532348 ,
          -0.07458735,  1.        ]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [7], 'to': [8]}

generate models:243

analyse output arrays in iter:272

pre layer res:
21:slice
{'name': 'slice', 'output': array([[     -inf,      -inf,      -inf, ..., 3.7699695,      -inf,
             -inf]], dtype=float32), 'output_shape': TensorShape([1, 25088]), 'from': [32], 'to': [27]}
tf node:
{'name': 'log', 'output': array([[      nan,       nan,       nan, ..., 1.3270669,       nan,
              nan]], dtype=float32), 'output_shape': TensorShape([1, 25088]), 'from': [21], 'to': [28]}
ms node:
{'name': 'log', 'output': array([[      nan,       nan,       nan, ..., 1.3270663,       nan,
              nan]], dtype=float32), 'output_shape': (1, 25088), 'from': [21], 'to': [28]}
torch node:
{'name': 'log', 'output': array([[      nan,       nan,       nan, ..., 1.3270669,       nan,
              nan]], dtype=float32), 'output_shape': torch.Size([1, 25088]), 'from': [21], 'to': [28]}

generate models:258

analyse output arrays in iter:275

pre layer res:
16:reshape
{'name': 'reshape', 'output': array([[[[          inf, 1.0000000e+00, 1.7082750e+37, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 1.8538555e+15, 1.0000000e+00, ...,
          1.0000000e+00,           inf, 1.3744189e+22],
         [2.4088215e+20, 1.7886244e+06, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00,           inf],
         ...,
         [1.0000000e+00, 5.7341317e+21, 4.9275227e+36, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00,           inf,           inf, ...,
          1.5122227e+20, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00,           inf, 7.3349058e+21, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00]],

        [[3.1807018e+06, 1.0000000e+00, 8.6910651e+36, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [          inf,           inf,           inf, ...,
                    inf, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 5.1507748e+27, 1.5317947e+09, ...,
                    inf, 1.0395107e+12, 1.0000000e+00],
         ...,
         [1.0000000e+00, 1.5891513e+16, 4.3387212e+24, ...,
          2.4508536e+33, 1.0000000e+00,           inf],
         [8.2216791e+02, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 4.3566952e+07],
         [1.0000000e+00, 1.0000000e+00, 1.6873493e+22, ...,
          1.0000000e+00,           inf,           inf]],

        [[1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          2.1138980e+27,           inf, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00,           inf, 1.0000000e+00],
         [1.0000000e+00, 2.3632909e+02, 1.0000000e+00, ...,
          7.2318340e+11, 1.0000000e+00,           inf],
         ...,
         [2.4466977e+19, 1.0000000e+00, 2.2439095e+22, ...,
          1.8830578e+01, 1.0000000e+00,           inf],
         [1.0000000e+00, 7.5369531e+05, 7.7187640e+09, ...,
          2.2014510e+09, 1.0000000e+00, 5.1852724e+26],
         [1.0000000e+00,           inf, 1.0000000e+00, ...,
                    inf, 1.0000000e+00,           inf]],

        ...,

        [[3.1807018e+06, 1.0000000e+00, 8.6910651e+36, ...,
          1.0000000e+00, 1.0000000e+00, 1.0000000e+00],
         [          inf,           inf,           inf, ...,
                    inf, 1.0000000e+00, 1.0000000e+00],
         [1.0000000e+00, 5.1507748e+27, 1.5317947e+09, ...,
                    inf, 1.0395107e+12, 1.0000000e+00],
         ...,
         [1.0000000e+00, 1.5891513e+16, 4.3387212e+24, ...,
          2.4508536e+33, 1.0000000e+00,           inf],
         [8.2216791e+02, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00, 1.0000000e+00, 4.3566952e+07],
         [1.0000000e+00, 1.0000000e+00, 1.6873493e+22, ...,
          1.0000000e+00,           inf,           inf]],

        [[1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          2.1138980e+27,           inf, 1.0000000e+00],
         [1.0000000e+00, 1.0000000e+00, 1.0000000e+00, ...,
          1.0000000e+00,           inf, 1.0000000e+00],
         [1.0000000e+00, 2.3632909e+02, 1.0000000e+00, ...,
          7.2318340e+11, 1.0000000e+00,           inf],
         ...,
         [2.4466977e+19, 1.0000000e+00, 2.2439095e+22, ...,
          1.8830578e+01, 1.0000000e+00,           inf],
         [1.0000000e+00, 7.5369531e+05, 7.7187640e+09, ...,
          2.2014510e+09, 1.0000000e+00, 5.1852724e+26],
         [1.0000000e+00,           inf, 1.0000000e+00, ...,
                    inf, 1.0000000e+00,           inf]],

        [[1.0000000e+00, 1.0000000e+00, 4.7289374e+02, ...,
          1.0000000e+00, 3.4385334e+05, 3.9997793e+04],
         [1.0000000e+00,           inf, 1.0000000e+00, ...,
          1.1903517e+32, 1.0000000e+00, 3.0993242e+16],
         [          inf, 1.0000000e+00, 2.9562102e+30, ...,
          1.0067405e+38, 1.0000000e+00, 1.0000000e+00],
         ...,
         [          inf, 1.0000000e+00, 1.0000000e+00, ...,
                    inf, 1.0000000e+00, 1.0000000e+00],
         [          inf,           inf,           inf, ...,
                    inf, 1.0000000e+00,           inf],
         [          inf,           inf,           inf, ...,
          1.0000000e+00,           inf,           inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [15], 'to': [24]}
tf node:
{'name': 'cos', 'output': array([[[[        nan,  0.5403023 ,  0.9977312 , ...,  0.5403023 ,
           0.5403023 ,  0.5403023 ],
         [ 0.5403023 ,  0.39129236,  0.5403023 , ...,  0.5403023 ,
                  nan,  0.80896246],
         [-0.5369962 , -0.8463952 ,  0.5403023 , ...,  0.5403023 ,
           0.5403023 ,         nan],
         ...,
         [ 0.5403023 , -0.38837716,  0.699103  , ...,  0.5403023 ,
           0.5403023 ,  0.5403023 ],
         [ 0.5403023 ,         nan,         nan, ..., -0.27346015,
           0.5403023 ,  0.5403023 ],
         [ 0.5403023 ,         nan,  0.98706716, ...,  0.5403023 ,
           0.5403023 ,  0.5403023 ]],

        [[-0.8306433 ,  0.5403023 ,  0.03612222, ...,  0.5403023 ,
           0.5403023 ,  0.5403023 ],
         [        nan,         nan,         nan, ...,         nan,
           0.5403023 ,  0.5403023 ],
         [ 0.5403023 , -0.959354  , -0.7982018 , ...,         nan,
           0.42616445,  0.5403023 ],
         ...,
         [ 0.5403023 , -0.6095172 , -0.19887275, ..., -0.9589949 ,
           0.5403023 ,         nan],
         [ 0.59834087,  0.5403023 ,  0.5403023 , ...,  0.5403023 ,
           0.5403023 ,  0.1019078 ],
         [ 0.5403023 ,  0.5403023 , -0.9998546 , ...,  0.5403023 ,
                  nan,         nan]],

        [[ 0.5403023 ,  0.5403023 ,  0.5403023 , ..., -0.05728453,
                  nan,  0.5403023 ],
         [ 0.5403023 ,  0.5403023 ,  0.5403023 , ...,  0.5403023 ,
                  nan,  0.5403023 ],
         [ 0.5403023 , -0.75859827,  0.5403023 , ..., -0.05369423,
           0.5403023 ,         nan],
         ...,
         [-0.5106218 ,  0.5403023 ,  0.57960564, ...,  0.99981993,
           0.5403023 ,         nan],
         [ 0.5403023 , -0.50671166, -0.01714339, ...,  0.80094904,
           0.5403023 , -0.29958826],
         [ 0.5403023 ,         nan,  0.5403023 , ...,         nan,
           0.5403023 ,         nan]],

        ...,

        [[-0.8306433 ,  0.5403023 ,  0.03612222, ...,  0.5403023 ,
           0.5403023 ,  0.5403023 ],
         [        nan,         nan,         nan, ...,         nan,
           0.5403023 ,  0.5403023 ],
         [ 0.5403023 , -0.959354  , -0.7982018 , ...,         nan,
           0.42616445,  0.5403023 ],
         ...,
         [ 0.5403023 , -0.6095172 , -0.19887275, ..., -0.9589949 ,
           0.5403023 ,         nan],
         [ 0.59834087,  0.5403023 ,  0.5403023 , ...,  0.5403023 ,
           0.5403023 ,  0.1019078 ],
         [ 0.5403023 ,  0.5403023 , -0.9998546 , ...,  0.5403023 ,
                  nan,         nan]],

        [[ 0.5403023 ,  0.5403023 ,  0.5403023 , ..., -0.05728453,
                  nan,  0.5403023 ],
         [ 0.5403023 ,  0.5403023 ,  0.5403023 , ...,  0.5403023 ,
                  nan,  0.5403023 ],
         [ 0.5403023 , -0.75859827,  0.5403023 , ..., -0.05369423,
           0.5403023 ,         nan],
         ...,
         [-0.5106218 ,  0.5403023 ,  0.57960564, ...,  0.99981993,
           0.5403023 ,         nan],
         [ 0.5403023 , -0.50671166, -0.01714339, ...,  0.80094904,
           0.5403023 , -0.29958826],
         [ 0.5403023 ,         nan,  0.5403023 , ...,         nan,
           0.5403023 ,         nan]],

        [[ 0.5403023 ,  0.5403023 , -0.08394453, ...,  0.5403023 ,
           0.9675697 ,  0.56966615],
         [ 0.5403023 ,         nan,  0.5403023 , ..., -0.84560853,
           0.5403023 , -0.83737475],
         [        nan,  0.5403023 , -0.06209238, ...,  0.6037633 ,
           0.5403023 ,  0.5403023 ],
         ...,
         [        nan,  0.5403023 ,  0.5403023 , ...,         nan,
           0.5403023 ,  0.5403023 ],
         [        nan,         nan,         nan, ...,         nan,
           0.5403023 ,         nan],
         [        nan,         nan,         nan, ...,  0.5403023 ,
                  nan,         nan]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [16], 'to': [13]}
ms node:
{'name': 'cos', 'output': array([[[[        nan,  0.5403023 , -0.8753858 , ...,  0.5403023 ,
           0.5403023 ,  0.5403023 ],
         [ 0.5403023 ,  0.95527947,  0.5403023 , ...,  0.5403023 ,
                  nan, -0.43553942],
         [ 0.99981254, -0.6883265 ,  0.5403023 , ...,  0.5403023 ,
           0.5403023 ,         nan],
         ...,
         [ 0.5403023 , -0.9682115 , -0.7901265 , ...,  0.5403023 ,
           0.5403023 ,  0.5403023 ],
         [ 0.5403023 ,         nan,         nan, ..., -0.91346365,
           0.5403023 ,  0.5403023 ],
         [ 0.5403023 ,         nan, -0.7428528 , ...,  0.5403023 ,
           0.5403023 ,  0.5403023 ]],

        [[ 0.9009069 ,  0.5403023 , -0.39949074, ...,  0.5403023 ,
           0.5403023 ,  0.5403023 ],
         [        nan,         nan,         nan, ...,         nan,
           0.5403023 ,  0.5403023 ],
         [ 0.5403023 ,  0.9951364 ,  0.9874167 , ...,         nan,
           0.9217816 ,  0.5403023 ],
         ...,
         [ 0.5403023 ,  0.62509125, -0.89092094, ..., -0.9081552 ,
           0.5403023 ,         nan],
         [ 0.59824306,  0.5403023 ,  0.5403023 , ...,  0.5403023 ,
           0.5403023 ,  0.1019078 ],
         [ 0.5403023 ,  0.5403023 , -0.97766   , ...,  0.5403023 ,
                  nan,         nan]],

        [[ 0.5403023 ,  0.5403023 ,  0.5403023 , ..., -0.49393997,
                  nan,  0.5403023 ],
         [ 0.5403023 ,  0.5403023 ,  0.5403023 , ...,  0.5403023 ,
                  nan,  0.5403023 ],
         [ 0.5403023 , -0.7586082 ,  0.5403023 , ..., -0.65230876,
           0.5403023 ,         nan],
         ...,
         [ 0.67683244,  0.5403023 ,  0.8961538 , ...,  0.9998199 ,
           0.5403023 ,         nan],
         [ 0.5403023 , -0.50671166, -0.17543666, ...,  0.566388  ,
           0.5403023 ,  0.9926189 ],
         [ 0.5403023 ,         nan,  0.5403023 , ...,         nan,
           0.5403023 ,         nan]],

        ...,

        [[-0.9999593 ,  0.5403023 , -0.9205658 , ...,  0.5403023 ,
           0.5403023 ,  0.5403023 ],
         [        nan,         nan,         nan, ...,         nan,
           0.5403023 ,  0.5403023 ],
         [ 0.5403023 , -0.4844037 ,  0.10108244, ...,         nan,
          -0.8976449 ,  0.5403023 ],
         ...,
         [ 0.5403023 ,  0.62509125,  0.7051088 , ..., -0.9081552 ,
           0.5403023 ,         nan],
         [ 0.59824306,  0.5403023 ,  0.5403023 , ...,  0.5403023 ,
           0.5403023 ,  0.1019078 ],
         [ 0.5403023 ,  0.5403023 ,  0.83793783, ...,  0.5403023 ,
                  nan,         nan]],

        [[ 0.5403023 ,  0.5403023 ,  0.5403023 , ...,  0.24221037,
                  nan,  0.5403023 ],
         [ 0.5403023 ,  0.5403023 ,  0.5403023 , ...,  0.5403023 ,
                  nan,  0.5403023 ],
         [ 0.5403023 , -0.7586082 ,  0.5403023 , ..., -0.9896757 ,
           0.5403023 ,         nan],
         ...,
         [ 0.9912225 ,  0.5403023 ,  0.9997626 , ...,  0.9998206 ,
           0.5403023 ,         nan],
         [ 0.5403023 , -0.30939007, -0.17543666, ..., -0.15617321,
           0.5403023 , -0.6111513 ],
         [ 0.5403023 ,         nan,  0.5403023 , ...,         nan,
           0.5403023 ,         nan]],

        [[ 0.5403023 ,  0.5403023 , -0.08345795, ...,  0.5403023 ,
          -0.92223924,  0.3302499 ],
         [ 0.5403023 ,         nan,  0.5403023 , ..., -0.09299152,
           0.5403023 , -0.37909287],
         [        nan,  0.5403023 , -0.6532858 , ...,  0.5990588 ,
           0.5403023 ,  0.5403023 ],
         ...,
         [        nan,  0.5403023 ,  0.5403023 , ...,         nan,
           0.5403023 ,  0.5403023 ],
         [        nan,         nan,         nan, ...,         nan,
           0.5403023 ,         nan],
         [        nan,         nan,         nan, ...,  0.5403023 ,
                  nan,         nan]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [16], 'to': [13]}
torch node:
{'name': 'cos', 'output': array([[[[        nan,  0.54030234,  0.54678696, ...,  0.54030234,
           0.54030234,  0.54030234],
         [ 0.54030234, -0.44978994,  0.54030234, ...,  0.54030234,
                  nan,  0.9940688 ],
         [-0.16529478, -0.84639513,  0.54030234, ...,  0.54030234,
           0.54030234,         nan],
         ...,
         [ 0.54030234, -0.38837716,  0.8619251 , ...,  0.54030234,
           0.54030234,  0.54030234],
         [ 0.54030234,         nan,         nan, ..., -0.27346015,
           0.54030234,  0.54030234],
         [ 0.54030234,         nan,  0.91279376, ...,  0.54030234,
           0.54030234,  0.54030234]],

        [[ 0.9009069 ,  0.54030234,  0.5362216 , ...,  0.54030234,
           0.54030234,  0.54030234],
         [        nan,         nan,         nan, ...,         nan,
           0.54030234,  0.54030234],
         [ 0.54030234, -0.9593539 , -0.7982018 , ...,         nan,
           0.42616445,  0.54030234],
         ...,
         [ 0.54030234, -0.60951716, -0.19887276, ..., -0.9095412 ,
           0.54030234,         nan],
         [ 0.59829193,  0.54030234,  0.54030234, ...,  0.54030234,
           0.54030234,  0.1019078 ],
         [ 0.54030234,  0.54030234, -0.9998546 , ...,  0.54030234,
                  nan,         nan]],

        [[ 0.54030234,  0.54030234,  0.54030234, ..., -0.05728453,
                  nan,  0.54030234],
         [ 0.54030234,  0.54030234,  0.54030234, ...,  0.54030234,
                  nan,  0.54030234],
         [ 0.54030234, -0.7586082 ,  0.54030234, ..., -0.65230876,
           0.54030234,         nan],
         ...,
         [-0.5106218 ,  0.54030234,  0.57960564, ...,  0.99981993,
           0.54030234,         nan],
         [ 0.54030234, -0.50671166, -0.01714339, ...,  0.80094904,
           0.54030234, -0.29958826],
         [ 0.54030234,         nan,  0.54030234, ...,         nan,
           0.54030234,         nan]],

        ...,

        [[ 0.9009069 ,  0.54030234,  0.5362216 , ...,  0.54030234,
           0.54030234,  0.54030234],
         [        nan,         nan,         nan, ...,         nan,
           0.54030234,  0.54030234],
         [ 0.54030234, -0.9593539 , -0.7982018 , ...,         nan,
           0.42616445,  0.54030234],
         ...,
         [ 0.54030234, -0.60951716, -0.19887276, ..., -0.9095412 ,
           0.54030234,         nan],
         [ 0.59829193,  0.54030234,  0.54030234, ...,  0.54030234,
           0.54030234,  0.1019078 ],
         [ 0.54030234,  0.54030234, -0.9998546 , ...,  0.54030234,
                  nan,         nan]],

        [[ 0.54030234,  0.54030234,  0.54030234, ..., -0.05728453,
                  nan,  0.54030234],
         [ 0.54030234,  0.54030234,  0.54030234, ...,  0.54030234,
                  nan,  0.54030234],
         [ 0.54030234, -0.7586082 ,  0.54030234, ..., -0.65230876,
           0.54030234,         nan],
         ...,
         [-0.5106218 ,  0.54030234,  0.57960564, ...,  0.99981993,
           0.54030234,         nan],
         [ 0.54030234, -0.50671166, -0.01714339, ...,  0.80094904,
           0.54030234, -0.29958826],
         [ 0.54030234,         nan,  0.54030234, ...,         nan,
           0.54030234,         nan]],

        [[ 0.54030234,  0.54030234, -0.08394452, ...,  0.54030234,
           0.9749899 ,  0.56966615],
         [ 0.54030234,         nan,  0.54030234, ..., -0.84560853,
           0.54030234, -0.7300878 ],
         [        nan,  0.54030234, -0.06209238, ...,  0.6037633 ,
           0.54030234,  0.54030234],
         ...,
         [        nan,  0.54030234,  0.54030234, ...,         nan,
           0.54030234,  0.54030234],
         [        nan,         nan,         nan, ...,         nan,
           0.54030234,         nan],
         [        nan,         nan,         nan, ...,  0.54030234,
                  nan,         nan]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [16], 'to': [13]}

generate models:260

analyse output arrays in iter:277

pre layer res:
15:exp
{'name': 'exp', 'output': array([[[[      inf,       inf,       inf, ...,       inf,  1.      ,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ..., 10.071652,       inf,
                inf],
         [      inf,       inf,       inf, ...,  1.      ,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf]],

        [[      inf,       inf,       inf, ...,       inf,  1.      ,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ..., 10.071652,       inf,
                inf],
         [      inf,       inf,       inf, ...,  1.      ,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf]],

        [[      inf,       inf,       inf, ...,       inf,  1.      ,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ..., 10.071652,       inf,
                inf],
         [      inf,       inf,       inf, ...,  1.      ,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf]],

        ...,

        [[      inf,       inf,       inf, ...,       inf,  1.      ,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ..., 10.071652,       inf,
                inf],
         [      inf,       inf,       inf, ...,  1.      ,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf]],

        [[      inf,       inf,       inf, ...,       inf,  1.      ,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ..., 10.071652,       inf,
                inf],
         [      inf,       inf,       inf, ...,  1.      ,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf]],

        [[      inf,       inf,       inf, ...,       inf,  1.      ,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ..., 10.071652,       inf,
                inf],
         [      inf,       inf,       inf, ...,  1.      ,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [4], 'to': [17]}
tf node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [15], 'to': [5]}
ms node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan,  0., nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ...,  0., nan, nan],
         [nan, nan, nan, ...,  0., nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan,  0., nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ...,  0., nan, nan],
         [nan, nan, nan, ...,  0., nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan,  0., nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ...,  0., nan, nan],
         [nan, nan, nan, ...,  0., nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan,  0., nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ...,  0., nan, nan],
         [nan, nan, nan, ...,  0., nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan,  0., nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ...,  0., nan, nan],
         [nan, nan, nan, ...,  0., nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan,  0., nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ...,  0., nan, nan],
         [nan, nan, nan, ...,  0., nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [15], 'to': [5]}
torch node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [15], 'to': [5]}

generate models:262

analyse output arrays in iter:285

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [8], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [9], 'to': []}

generate models:270

analyse output arrays in iter:291

pre layer res:
11:add
{'name': 'add', 'output': array([[[[ 518433.72,  290763.88, 1645662.2 , ...,  880633.1 ,
           963032.6 ,  389625.56],
         [ 852794.1 ,  860508.4 , 1157220.5 , ...,  423884.38,
           272505.22, 1582303.5 ],
         [ 590568.6 , 1392695.  , 1152289.8 , ...,  723903.6 ,
           504623.47, 1076460.5 ],
         ...,
         [1702626.6 ,  368806.62,  621127.75, ..., 1432714.6 ,
          1512857.  ,  264816.84],
         [ 561325.3 ,  934883.3 ,  711898.94, ..., 1926673.8 ,
           553985.8 , 1623779.8 ],
         [2221710.2 ,  685432.8 , 1828177.1 , ..., 1967142.2 ,
          1033723.56, 1689800.4 ]],

        [[ 518436.28,  290763.97, 1645661.6 , ...,  880633.1 ,
           963034.1 ,  389622.6 ],
         [ 852793.  ,  860508.4 , 1157220.5 , ...,  423883.06,
           272505.56, 1582304.8 ],
         [ 590568.6 , 1392695.  , 1152290.  , ...,  723903.6 ,
           504621.72, 1076460.5 ],
         ...,
         [1702625.9 ,  368804.62,  621127.75, ..., 1432714.9 ,
          1512855.1 ,  264819.1 ],
         [ 561326.94,  934883.3 ,  711899.25, ..., 1926673.2 ,
           553985.1 , 1623781.6 ],
         [2221710.2 ,  685433.94, 1828177.1 , ..., 1967140.9 ,
          1033724.8 , 1689800.4 ]],

        [[ 518437.22,  290765.97, 1645661.6 , ...,  880633.1 ,
           963030.94,  389623.78],
         [ 852794.06,  860511.2 , 1157222.1 , ...,  423883.06,
           272504.7 , 1582303.2 ],
         [ 590568.6 , 1392695.  , 1152289.1 , ...,  723904.9 ,
           504621.72, 1076460.5 ],
         ...,
         [1702624.8 ,  368804.62,  621128.4 , ..., 1432714.6 ,
          1512854.8 ,  264817.38],
         [ 561327.4 ,  934883.4 ,  711898.75, ..., 1926671.5 ,
           553985.75, 1623781.4 ],
         [2221710.2 ,  685436.2 , 1828177.2 , ..., 1967143.9 ,
          1033721.4 , 1689802.1 ]],

        ...,

        [[ 518179.97,  290620.03, 1644859.  , ...,  880202.4 ,
           962560.06,  389431.72],
         [ 852376.06,  860087.94, 1156656.1 , ...,  423675.97,
           272371.97, 1581530.8 ],
         [ 590280.75, 1392014.8 , 1151727.9 , ...,  723549.7 ,
           504376.03, 1075936.1 ],
         ...,
         [1701792.1 ,  368623.72,  620823.94, ..., 1432016.1 ,
          1512117.5 ,  264685.97],
         [ 561052.3 ,  934426.1 ,  711552.06, ..., 1925732.1 ,
           553714.9 , 1622986.9 ],
         [2220625.  ,  685099.  , 1827284.2 , ..., 1966180.2 ,
          1033216.06, 1688976.4 ]],

        [[ 518179.97,  290620.03, 1644859.  , ...,  880202.4 ,
           962560.06,  389431.72],
         [ 852376.06,  860087.94, 1156656.1 , ...,  423675.97,
           272371.97, 1581530.8 ],
         [ 590280.75, 1392014.8 , 1151727.9 , ...,  723549.7 ,
           504376.03, 1075936.1 ],
         ...,
         [1701792.1 ,  368623.72,  620823.94, ..., 1432016.1 ,
          1512117.5 ,  264685.97],
         [ 561052.3 ,  934426.1 ,  711552.06, ..., 1925732.1 ,
           553714.9 , 1622986.9 ],
         [2220625.  ,  685099.  , 1827284.2 , ..., 1966180.2 ,
          1033216.06, 1688976.4 ]],

        [[ 518179.97,  290620.03, 1644859.  , ...,  880202.4 ,
           962560.06,  389431.72],
         [ 852376.06,  860087.94, 1156656.1 , ...,  423675.97,
           272371.97, 1581530.8 ],
         [ 590280.75, 1392014.8 , 1151727.9 , ...,  723549.7 ,
           504376.03, 1075936.1 ],
         ...,
         [1701792.1 ,  368623.72,  620823.94, ..., 1432016.1 ,
          1512117.5 ,  264685.97],
         [ 561052.3 ,  934426.1 ,  711552.06, ..., 1925732.1 ,
           553714.9 , 1622986.9 ],
         [2220625.  ,  685099.  , 1827284.2 , ..., 1966180.2 ,
          1033216.06, 1688976.4 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [19, 23], 'to': [15]}
tf node:
{'name': 'sin', 'output': array([[[[ 0.9701196 , -0.05011131,  0.98017097, ...,  0.66081315,
           0.5743496 , -0.8632048 ],
         [ 0.58557963,  0.8491853 ,  0.75908935, ...,  0.9627435 ,
          -0.3244072 ,  0.46238667],
         [-0.5041457 ,  0.96293235, -0.6354206 , ..., -0.84351593,
           0.90628844,  0.06039599],
         ...,
         [ 0.34695032,  0.6008533 , -0.31918192, ..., -0.65946615,
          -0.8755221 , -0.5374343 ],
         [-0.9474345 ,  0.95027983,  0.9954937 , ..., -0.8128329 ,
          -0.48429623, -0.4467258 ],
         [ 0.8714361 ,  0.12699592,  0.4467466 , ...,  0.5206093 ,
           0.97559005,  0.49556664]],

        [[-0.9447322 , -0.14338638,  0.9108216 , ...,  0.66081315,
          -0.77593166,  0.7635164 ],
         [ 0.98387975,  0.8491853 ,  0.75908935, ...,  0.50736284,
          -0.62422174, -0.6956433 ],
         [-0.5041457 ,  0.96293235, -0.80670387, ..., -0.84351593,
           0.254349  ,  0.06039599],
         ...,
         [ 0.8931574 ,  0.47681215, -0.31918192, ..., -0.824947  ,
           0.72324157,  0.9937556 ],
         [-0.2681506 ,  0.95027983,  0.9764336 , ..., -0.43406406,
           0.18093924, -0.7197835 ],
         [ 0.8714361 ,  0.9497198 ,  0.4467466 , ...,  0.938765  ,
           0.5160221 ,  0.49556664]],

        [[-0.8233655 , -0.8402317 ,  0.9108216 , ...,  0.66081315,
           0.7461652 , -0.31338847],
         [ 0.63506675, -0.6329424 , -0.6911557 , ...,  0.50736284,
           0.19951704,  0.6673799 ],
         [-0.5041457 ,  0.96293235, -0.06351029, ...,  0.24372411,
           0.254349  ,  0.06039599],
         ...,
         [ 0.7908981 ,  0.47681215, -0.8133376 , ..., -0.65946615,
           0.9259278 , -0.03613383],
         [ 0.16526549,  0.92897475,  0.9603698 , ...,  0.96382546,
          -0.42870477, -0.86915463],
         [ 0.8714361 , -0.35297337,  0.33171937, ..., -0.88074625,
          -0.7433788 ,  0.7663278 ]],

        ...,

        [[-0.57017463, -0.6591173 ,  0.36497253, ..., -0.36170414,
           0.9342611 , -0.10638727],
         [-0.75540507,  0.9997911 , -0.24717584, ...,  0.70575404,
           0.8264223 ,  0.38839778],
         [ 0.58358115,  0.17699814,  0.9162584 , ..., -0.05864011,
          -0.37657702, -0.32537276],
         ...,
         [-0.72382396,  0.9731275 ,  0.9479878 , ...,  0.339441  ,
          -0.15853937,  0.48336956],
         [ 0.99997467, -0.2288481 ,  0.17511034, ..., -0.9734382 ,
           0.25221944,  0.66727865],
         [ 0.33576003, -0.62594205,  0.9026174 , ...,  0.9391723 ,
           0.3468313 , -0.37485248]],

        [[-0.57017463, -0.6591173 ,  0.36497253, ..., -0.36170414,
           0.9342611 , -0.10638727],
         [-0.75540507,  0.9997911 , -0.24717584, ...,  0.70575404,
           0.8264223 ,  0.38839778],
         [ 0.58358115,  0.17699814,  0.9162584 , ..., -0.05864011,
          -0.37657702, -0.32537276],
         ...,
         [-0.72382396,  0.9731275 ,  0.9479878 , ...,  0.339441  ,
          -0.15853937,  0.48336956],
         [ 0.99997467, -0.2288481 ,  0.17511034, ..., -0.9734382 ,
           0.25221944,  0.66727865],
         [ 0.33576003, -0.62594205,  0.9026174 , ...,  0.9391723 ,
           0.3468313 , -0.37485248]],

        [[-0.57017463, -0.6591173 ,  0.36497253, ..., -0.36170414,
           0.9342611 , -0.10638727],
         [-0.75540507,  0.9997911 , -0.24717584, ...,  0.70575404,
           0.8264223 ,  0.38839778],
         [ 0.58358115,  0.17699814,  0.9162584 , ..., -0.05864011,
          -0.37657702, -0.32537276],
         ...,
         [-0.72382396,  0.9731275 ,  0.9479878 , ...,  0.339441  ,
          -0.15853937,  0.48336956],
         [ 0.99997467, -0.2288481 ,  0.17511034, ..., -0.9734382 ,
           0.25221944,  0.66727865],
         [ 0.33576003, -0.62594205,  0.9026174 , ...,  0.9391723 ,
           0.3468313 , -0.37485248]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [11], 'to': [9]}
ms node:
{'name': 'sin', 'output': array([[[[ 0.9701196 , -0.05011131,  0.980171  , ...,  0.66081315,
           0.5743496 , -0.8632048 ],
         [ 0.58557963,  0.8491852 ,  0.75908935, ...,  0.96274346,
          -0.3244072 ,  0.46238667],
         [-0.5041457 ,  0.96293235, -0.63542056, ..., -0.84351593,
           0.9062884 ,  0.06039599],
         ...,
         [ 0.34695032,  0.6008533 , -0.3191819 , ..., -0.6594661 ,
          -0.8755221 , -0.5374343 ],
         [-0.9474345 ,  0.96787405,  0.9954937 , ..., -0.73386824,
          -0.48429626, -0.4467258 ],
         [ 0.8714361 ,  0.1269959 ,  0.4467466 , ...,  0.5206093 ,
           0.97559005,  0.49556667]],

        [[-0.9447321 , -0.14338638,  0.9108216 , ...,  0.66081315,
          -0.77593166,  0.7635164 ],
         [ 0.98387975,  0.8491852 ,  0.75908935, ...,  0.50736284,
          -0.62422174, -0.6956433 ],
         [-0.5041457 ,  0.96293235, -0.80670387, ..., -0.84351593,
           0.254349  ,  0.06039599],
         ...,
         [ 0.8931574 ,  0.47681215, -0.3191819 , ..., -0.82494694,
           0.72324157,  0.9937556 ],
         [-0.2681506 ,  0.96787405,  0.9764336 , ..., -0.31836012,
           0.18093924, -0.7197835 ],
         [ 0.8714361 ,  0.9497198 ,  0.4467466 , ...,  0.938765  ,
           0.5160221 ,  0.49556667]],

        [[-0.8233655 , -0.84023166,  0.9108216 , ...,  0.66081315,
           0.74616516, -0.31338844],
         [ 0.63506675, -0.6329424 , -0.6911557 , ...,  0.50736284,
           0.19951704,  0.6673799 ],
         [-0.5041457 ,  0.96293235, -0.06351029, ...,  0.24372411,
           0.254349  ,  0.06039599],
         ...,
         [ 0.7908981 ,  0.47681215, -0.8133376 , ..., -0.6594661 ,
           0.9259278 , -0.03613383],
         [ 0.16526549,  0.95027983,  0.9603698 , ...,  0.98953545,
          -0.42870477, -0.86915463],
         [ 0.8714361 , -0.35297337,  0.33171937, ..., -0.8807462 ,
          -0.7433788 ,  0.7663278 ]],

        ...,

        [[-0.57017463, -0.6591173 ,  0.3649725 , ..., -0.36170417,
           0.93426114, -0.10638727],
         [-0.755405  ,  0.9997911 , -0.24717584, ...,  0.705754  ,
           0.8264223 ,  0.38839775],
         [ 0.58358115,  0.17699814,  0.9162584 , ..., -0.05864011,
          -0.37657702, -0.32537276],
         ...,
         [-0.7238239 ,  0.9731275 ,  0.94798774, ...,  0.33944103,
          -0.15853938,  0.4833696 ],
         [ 0.99997467, -0.1675995 ,  0.17511034, ..., -0.9943874 ,
           0.25221944,  0.66727865],
         [ 0.33576003, -0.62594205,  0.9026174 , ...,  0.9391723 ,
           0.3468313 , -0.37485248]],

        [[-0.57017463, -0.6591173 , -0.1068065 , ..., -0.95554346,
           0.95470935, -0.34907985],
         [-0.755405  ,  0.9997911 , -0.24717584, ...,  0.68327373,
           0.8264223 ,  0.11742887],
         [ 0.96634763, -0.8117044 ,  0.9162584 , ...,  0.48277986,
          -0.37657702, -0.32537276],
         ...,
         [-0.7238239 ,  0.99984425,  0.94798774, ...,  0.33944103,
           0.7991043 ,  0.4833696 ],
         [ 0.9671275 , -0.9753272 ,  0.17511034, ...,  0.9429525 ,
           0.84414756, -0.332503  ],
         [ 0.88773984,  0.2582024 , -0.909635  , ..., -0.6719251 ,
           0.3468313 , -0.13383484]],

        [[-0.57017463, -0.6591173 , -0.1068065 , ..., -0.95554346,
           0.95470935, -0.34907985],
         [-0.755405  ,  0.9997911 , -0.24717584, ...,  0.68327373,
           0.8264223 ,  0.11742887],
         [ 0.96634763, -0.8117044 ,  0.9162584 , ...,  0.48277986,
          -0.37657702, -0.32537276],
         ...,
         [-0.7238239 ,  0.99984425,  0.94798774, ...,  0.33944103,
           0.7991043 ,  0.4833696 ],
         [ 0.9671275 , -0.9753272 ,  0.17511034, ...,  0.9429525 ,
           0.84414756, -0.332503  ],
         [ 0.88773984,  0.2582024 , -0.909635  , ..., -0.6719251 ,
           0.3468313 , -0.13383484]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [11], 'to': [9]}
torch node:
{'name': 'sin', 'output': array([[[[ 0.9701196 , -0.05011131,  0.980171  , ...,  0.66081315,
           0.5743496 , -0.8632048 ],
         [ 0.58557963,  0.8491852 ,  0.75908935, ...,  0.96274346,
          -0.3244072 ,  0.46238667],
         [-0.5041457 ,  0.96293235, -0.63542056, ..., -0.84351593,
           0.9062884 ,  0.06039599],
         ...,
         [ 0.34695032,  0.6008533 , -0.3191819 , ..., -0.6594661 ,
          -0.8755221 , -0.5374343 ],
         [-0.9474345 ,  0.96787405,  0.9954937 , ..., -0.73386824,
          -0.48429626, -0.4467258 ],
         [ 0.8714361 ,  0.1269959 ,  0.4467466 , ...,  0.5206093 ,
           0.97559005,  0.49556667]],

        [[-0.9447321 , -0.14338638,  0.9108216 , ...,  0.66081315,
          -0.77593166,  0.7635164 ],
         [ 0.98387975,  0.8491852 ,  0.75908935, ...,  0.50736284,
          -0.62422174, -0.6956433 ],
         [-0.5041457 ,  0.96293235, -0.80670387, ..., -0.84351593,
           0.254349  ,  0.06039599],
         ...,
         [ 0.8931574 ,  0.47681215, -0.3191819 , ..., -0.82494694,
           0.72324157,  0.9937556 ],
         [-0.2681506 ,  0.96787405,  0.9764336 , ..., -0.31836012,
           0.18093924, -0.7197835 ],
         [ 0.8714361 ,  0.9497198 ,  0.4467466 , ...,  0.938765  ,
           0.5160221 ,  0.49556667]],

        [[-0.8233655 , -0.84023166,  0.9108216 , ...,  0.66081315,
           0.74616516, -0.31338844],
         [ 0.63506675, -0.6329424 , -0.6911557 , ...,  0.50736284,
           0.19951704,  0.6673799 ],
         [-0.5041457 ,  0.96293235, -0.06351029, ...,  0.24372411,
           0.254349  ,  0.06039599],
         ...,
         [ 0.7908981 ,  0.47681215, -0.8133376 , ..., -0.6594661 ,
           0.9259278 , -0.03613383],
         [ 0.16526549,  0.95027983,  0.9603698 , ...,  0.98953545,
          -0.42870477, -0.86915463],
         [ 0.8714361 , -0.35297337,  0.33171937, ..., -0.8807462 ,
          -0.7433788 ,  0.7663278 ]],

        ...,

        [[-0.57017463, -0.6591173 ,  0.3649725 , ..., -0.36170417,
           0.93426114, -0.10638727],
         [-0.755405  ,  0.9997911 , -0.24717584, ...,  0.705754  ,
           0.8264223 ,  0.38839775],
         [ 0.58358115,  0.17699814,  0.9162584 , ..., -0.05864011,
          -0.37657702, -0.32537276],
         ...,
         [-0.7238239 ,  0.9731275 ,  0.94798774, ...,  0.33944103,
          -0.15853938,  0.4833696 ],
         [ 0.99997467, -0.1675995 ,  0.17511034, ..., -0.9943874 ,
           0.25221944,  0.66727865],
         [ 0.33576003, -0.62594205,  0.9026174 , ...,  0.9391723 ,
           0.3468313 , -0.37485248]],

        [[-0.57017463, -0.6591173 ,  0.3649725 , ..., -0.36170417,
           0.93426114, -0.10638727],
         [-0.755405  ,  0.9997911 , -0.24717584, ...,  0.705754  ,
           0.8264223 ,  0.38839775],
         [ 0.58358115,  0.17699814,  0.9162584 , ..., -0.05864011,
          -0.37657702, -0.32537276],
         ...,
         [-0.7238239 ,  0.9731275 ,  0.94798774, ...,  0.33944103,
          -0.15853938,  0.4833696 ],
         [ 0.99997467, -0.1675995 ,  0.17511034, ..., -0.9943874 ,
           0.25221944,  0.66727865],
         [ 0.33576003, -0.62594205,  0.9026174 , ...,  0.9391723 ,
           0.3468313 , -0.37485248]],

        [[-0.57017463, -0.6591173 ,  0.3649725 , ..., -0.36170417,
           0.93426114, -0.10638727],
         [-0.755405  ,  0.9997911 , -0.24717584, ...,  0.705754  ,
           0.8264223 ,  0.38839775],
         [ 0.58358115,  0.17699814,  0.9162584 , ..., -0.05864011,
          -0.37657702, -0.32537276],
         ...,
         [-0.7238239 ,  0.9731275 ,  0.94798774, ...,  0.33944103,
          -0.15853938,  0.4833696 ],
         [ 0.99997467, -0.1675995 ,  0.17511034, ..., -0.9943874 ,
           0.25221944,  0.66727865],
         [ 0.33576003, -0.62594205,  0.9026174 , ...,  0.9391723 ,
           0.3468313 , -0.37485248]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [11], 'to': [9]}

pre layer res:
17:add
{'name': 'add', 'output': array([[126.508675,  70.95216 , 401.5762  , ..., 480.02536 , 252.25023 ,
        412.34824 ]], dtype=float32), 'output_shape': TensorShape([1, 16384]), 'from': [12, 12], 'to': [16, 20]}
tf node:
{'name': 'sin', 'output': array([[ 0.7479502 ,  0.96474355, -0.52068853, ...,  0.5958438 ,
         0.7973048 , -0.7170763 ]], dtype=float32), 'output_shape': TensorShape([1, 16384]), 'from': [17], 'to': [13]}
ms node:
{'name': 'sin', 'output': array([[ 0.7479502 ,  0.96474355, -0.52068853, ...,  0.5958438 ,
         0.7974429 , -0.71733147]], dtype=float32), 'output_shape': (1, 16384), 'from': [17], 'to': [13]}
torch node:
{'name': 'sin', 'output': array([[ 0.7479502 ,  0.96474355, -0.52068853, ...,  0.5958438 ,
         0.7973048 , -0.7170763 ]], dtype=float32), 'output_shape': torch.Size([1, 16384]), 'from': [17], 'to': [13]}

generate models:276

analyse output arrays in iter:295

pre layer res:
17:transpose
{'name': 'transpose', 'output': array([[[[4.7194276, 3.1241856,      -inf, ...,      -inf,      -inf,
               -inf],
         [3.8748024,      -inf, 4.241552 , ...,      -inf, 3.578634 ,
               -inf],
         [5.047406 ,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [4.8306713, 3.8943963,      -inf, ...,      -inf, 5.169702 ,
          4.9501796],
         [4.958664 , 5.0385137, 3.490896 , ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf, 4.2566414, ...,      -inf,      -inf,
               -inf]],

        [[4.7194276, 3.1241856,      -inf, ...,      -inf,      -inf,
               -inf],
         [3.8748024,      -inf, 4.241552 , ...,      -inf, 3.578634 ,
               -inf],
         [5.047406 ,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [4.8306713, 3.8943963,      -inf, ...,      -inf, 5.169702 ,
          4.9501796],
         [4.958664 , 5.0385137, 3.490896 , ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf, 4.2566414, ...,      -inf,      -inf,
               -inf]],

        [[4.7194276, 3.1241856,      -inf, ...,      -inf,      -inf,
               -inf],
         [3.8748024,      -inf, 4.241552 , ...,      -inf, 3.578634 ,
               -inf],
         [5.047406 ,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [4.8306713, 3.8943963,      -inf, ...,      -inf, 5.169702 ,
          4.9501796],
         [4.958664 , 5.0385137, 3.490896 , ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf, 4.2566414, ...,      -inf,      -inf,
               -inf]],

        ...,

        [[4.7194276, 3.1241856,      -inf, ...,      -inf,      -inf,
               -inf],
         [3.8748024,      -inf, 4.241552 , ...,      -inf, 3.578634 ,
               -inf],
         [5.047406 ,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [4.8306713, 3.8943963,      -inf, ...,      -inf, 5.169702 ,
          4.9501796],
         [4.958664 , 5.0385137, 3.490896 , ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf, 4.2566414, ...,      -inf,      -inf,
               -inf]],

        [[4.7194276, 3.1241856,      -inf, ...,      -inf,      -inf,
               -inf],
         [3.8748024,      -inf, 4.241552 , ...,      -inf, 3.578634 ,
               -inf],
         [5.047406 ,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [4.8306713, 3.8943963,      -inf, ...,      -inf, 5.169702 ,
          4.9501796],
         [4.958664 , 5.0385137, 3.490896 , ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf, 4.2566414, ...,      -inf,      -inf,
               -inf]],

        [[4.7194276, 3.1241856,      -inf, ...,      -inf,      -inf,
               -inf],
         [3.8748024,      -inf, 4.241552 , ...,      -inf, 3.578634 ,
               -inf],
         [5.047406 ,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [4.8306713, 3.8943963,      -inf, ...,      -inf, 5.169702 ,
          4.9501796],
         [4.958664 , 5.0385137, 3.490896 , ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf, 4.2566414, ...,      -inf,      -inf,
               -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [18], 'to': [4]}
tf node:
{'name': 'maxpool2d', 'output': array([[[[ 4.7194276e+00,  5.4319324e+00,  2.8713248e+00, ...,
           5.3590741e+00,  5.3968539e+00,  3.5786340e+00],
         [ 5.0474062e+00,  4.7286620e+00,  4.7441974e+00, ...,
           4.9588103e+00,  5.1120110e+00,  2.7698967e+00],
         [ 4.4342060e+00,  4.1472178e+00,  5.0349469e+00, ...,
           4.6062388e+00,  4.3811145e+00,  4.8389416e+00],
         ...,
         [ 4.8373003e+00,  4.9493995e+00,  5.5219488e+00, ...,
           4.4644809e+00,  4.5391760e+00,  4.9277024e+00],
         [ 4.8306713e+00,  5.2437844e+00, -8.7595761e-02, ...,
           4.9192562e+00,  3.2605526e+00,  5.2527623e+00],
         [ 5.0385137e+00,  4.2950840e+00,  4.6033583e+00, ...,
           4.6978002e+00,  4.9136767e+00, -3.4028235e+38]],

        [[ 4.7194276e+00,  5.4319324e+00,  2.8713248e+00, ...,
           5.3590741e+00,  5.3968539e+00,  3.5786340e+00],
         [ 5.0474062e+00,  4.7286620e+00,  4.7441974e+00, ...,
           4.9588103e+00,  5.1120110e+00,  2.7698967e+00],
         [ 4.4342060e+00,  4.1472178e+00,  5.0349469e+00, ...,
           4.6062388e+00,  4.3811145e+00,  4.8389416e+00],
         ...,
         [ 4.8373003e+00,  4.9493995e+00,  5.5219488e+00, ...,
           4.4644809e+00,  4.5391760e+00,  4.9277024e+00],
         [ 4.8306713e+00,  5.2437844e+00, -8.7595761e-02, ...,
           4.9192562e+00,  3.2605526e+00,  5.2527623e+00],
         [ 5.0385137e+00,  4.2950840e+00,  4.6033583e+00, ...,
           4.6978002e+00,  4.9136767e+00, -3.4028235e+38]],

        [[ 4.7194276e+00,  5.4319324e+00,  2.8713248e+00, ...,
           5.3590741e+00,  5.3968539e+00,  3.5786340e+00],
         [ 5.0474062e+00,  4.7286620e+00,  4.7441974e+00, ...,
           4.9588103e+00,  5.1120110e+00,  2.7698967e+00],
         [ 4.4342060e+00,  4.1472178e+00,  5.0349469e+00, ...,
           4.6062388e+00,  4.3811145e+00,  4.8389416e+00],
         ...,
         [ 4.8373003e+00,  4.9493995e+00,  5.5219488e+00, ...,
           4.4644809e+00,  4.5391760e+00,  4.9277024e+00],
         [ 4.8306713e+00,  5.2437844e+00, -8.7595761e-02, ...,
           4.9192562e+00,  3.2605526e+00,  5.2527623e+00],
         [ 5.0385137e+00,  4.2950840e+00,  4.6033583e+00, ...,
           4.6978002e+00,  4.9136767e+00, -3.4028235e+38]],

        ...,

        [[ 4.7194276e+00,  5.4319324e+00,  2.8713248e+00, ...,
           5.3590741e+00,  5.3968539e+00,  3.5786340e+00],
         [ 5.0474062e+00,  4.7286620e+00,  4.7441974e+00, ...,
           4.9588103e+00,  5.1120110e+00,  2.7698967e+00],
         [ 4.4342060e+00,  4.1472178e+00,  5.0349469e+00, ...,
           4.6062388e+00,  4.3811145e+00,  4.8389416e+00],
         ...,
         [ 4.8373003e+00,  4.9493995e+00,  5.5219488e+00, ...,
           4.4644809e+00,  4.5391760e+00,  4.9277024e+00],
         [ 4.8306713e+00,  5.2437844e+00, -8.7595761e-02, ...,
           4.9192562e+00,  3.2605526e+00,  5.2527623e+00],
         [ 5.0385137e+00,  4.2950840e+00,  4.6033583e+00, ...,
           4.6978002e+00,  4.9136767e+00, -3.4028235e+38]],

        [[ 4.7194276e+00,  5.4319324e+00,  2.8713248e+00, ...,
           5.3590741e+00,  5.3968539e+00,  3.5786340e+00],
         [ 5.0474062e+00,  4.7286620e+00,  4.7441974e+00, ...,
           4.9588103e+00,  5.1120110e+00,  2.7698967e+00],
         [ 4.4342060e+00,  4.1472178e+00,  5.0349469e+00, ...,
           4.6062388e+00,  4.3811145e+00,  4.8389416e+00],
         ...,
         [ 4.8373003e+00,  4.9493995e+00,  5.5219488e+00, ...,
           4.4644809e+00,  4.5391760e+00,  4.9277024e+00],
         [ 4.8306713e+00,  5.2437844e+00, -8.7595761e-02, ...,
           4.9192562e+00,  3.2605526e+00,  5.2527623e+00],
         [ 5.0385137e+00,  4.2950840e+00,  4.6033583e+00, ...,
           4.6978002e+00,  4.9136767e+00, -3.4028235e+38]],

        [[ 4.7194276e+00,  5.4319324e+00,  2.8713248e+00, ...,
           5.3590741e+00,  5.3968539e+00,  3.5786340e+00],
         [ 5.0474062e+00,  4.7286620e+00,  4.7441974e+00, ...,
           4.9588103e+00,  5.1120110e+00,  2.7698967e+00],
         [ 4.4342060e+00,  4.1472178e+00,  5.0349469e+00, ...,
           4.6062388e+00,  4.3811145e+00,  4.8389416e+00],
         ...,
         [ 4.8373003e+00,  4.9493995e+00,  5.5219488e+00, ...,
           4.4644809e+00,  4.5391760e+00,  4.9277024e+00],
         [ 4.8306713e+00,  5.2437844e+00, -8.7595761e-02, ...,
           4.9192562e+00,  3.2605526e+00,  5.2527623e+00],
         [ 5.0385137e+00,  4.2950840e+00,  4.6033583e+00, ...,
           4.6978002e+00,  4.9136767e+00, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [17], 'to': [16]}
ms node:
{'name': 'maxpool2d', 'output': array([[[[ 4.7194266e+00,  5.4319315e+00,  2.8713253e+00, ...,
           5.3590708e+00,  5.3968530e+00,  3.5786345e+00],
         [ 5.0474048e+00,  4.7286611e+00,  4.7441964e+00, ...,
           4.9588108e+00,  5.1120138e+00,  2.7698953e+00],
         [ 4.4342041e+00,  4.1472163e+00,  5.0349455e+00, ...,
           4.6062365e+00,  4.3811154e+00,  4.8389401e+00],
         ...,
         [ 4.8372989e+00,  4.9493999e+00,  5.5219474e+00, ...,
           4.4644790e+00,  4.5391760e+00,  4.9276996e+00],
         [ 4.8306699e+00,  5.2437844e+00, -8.7596744e-02, ...,
           4.9192533e+00,  3.2605503e+00,  5.2527623e+00],
         [ 5.0385122e+00,  4.2950811e+00,  4.6033564e+00, ...,
           4.6977968e+00,  4.9136739e+00, -3.4028235e+38]],

        [[ 4.7194266e+00,  5.4319315e+00,  2.8713253e+00, ...,
           5.3590708e+00,  5.3968530e+00,  3.5786345e+00],
         [ 5.0474048e+00,  4.7286611e+00,  4.7441964e+00, ...,
           4.9588108e+00,  5.1120138e+00,  2.7698953e+00],
         [ 4.4342041e+00,  4.1472163e+00,  5.0349455e+00, ...,
           4.6062365e+00,  4.3811154e+00,  4.8389401e+00],
         ...,
         [ 4.8372989e+00,  4.9493999e+00,  5.5219474e+00, ...,
           4.4644790e+00,  4.5391760e+00,  4.9276996e+00],
         [ 4.8306699e+00,  5.2437844e+00, -8.7596744e-02, ...,
           4.9192533e+00,  3.2605503e+00,  5.2527623e+00],
         [ 5.0385122e+00,  4.2950811e+00,  4.6033564e+00, ...,
           4.6977968e+00,  4.9136739e+00, -3.4028235e+38]],

        [[ 4.7194266e+00,  5.4319315e+00,  2.8713253e+00, ...,
           5.3590708e+00,  5.3968530e+00,  3.5786345e+00],
         [ 5.0474048e+00,  4.7286611e+00,  4.7441964e+00, ...,
           4.9588108e+00,  5.1120138e+00,  2.7698953e+00],
         [ 4.4342041e+00,  4.1472163e+00,  5.0349455e+00, ...,
           4.6062365e+00,  4.3811154e+00,  4.8389401e+00],
         ...,
         [ 4.8372989e+00,  4.9493999e+00,  5.5219474e+00, ...,
           4.4644790e+00,  4.5391760e+00,  4.9276996e+00],
         [ 4.8306699e+00,  5.2437844e+00, -8.7596744e-02, ...,
           4.9192533e+00,  3.2605503e+00,  5.2527623e+00],
         [ 5.0385122e+00,  4.2950811e+00,  4.6033564e+00, ...,
           4.6977968e+00,  4.9136739e+00, -3.4028235e+38]],

        ...,

        [[ 4.7194266e+00,  5.4319315e+00,  2.8713253e+00, ...,
           5.3590708e+00,  5.3968530e+00,  3.5786345e+00],
         [ 5.0474048e+00,  4.7286611e+00,  4.7441964e+00, ...,
           4.9588108e+00,  5.1120138e+00,  2.7698953e+00],
         [ 4.4342041e+00,  4.1472163e+00,  5.0349455e+00, ...,
           4.6062365e+00,  4.3811154e+00,  4.8389401e+00],
         ...,
         [ 4.8372989e+00,  4.9493999e+00,  5.5219474e+00, ...,
           4.4644790e+00,  4.5391760e+00,  4.9276996e+00],
         [ 4.8306699e+00,  5.2437844e+00, -8.7596744e-02, ...,
           4.9192533e+00,  3.2605503e+00,  5.2527623e+00],
         [ 5.0385122e+00,  4.2950811e+00,  4.6033564e+00, ...,
           4.6977968e+00,  4.9136739e+00, -3.4028235e+38]],

        [[ 4.7194266e+00,  5.4319310e+00,  2.8713253e+00, ...,
           5.3590703e+00,  5.3968530e+00,  3.5786350e+00],
         [ 5.0474052e+00,  4.7286615e+00,  4.7441964e+00, ...,
           4.9588108e+00,  5.1120129e+00,  2.7698963e+00],
         [ 4.4342041e+00,  4.1472158e+00,  5.0349455e+00, ...,
           4.6062365e+00,  4.3811145e+00,  4.8389411e+00],
         ...,
         [ 4.8372989e+00,  4.9493995e+00,  5.5219474e+00, ...,
           4.4644785e+00,  4.5391750e+00,  4.9276996e+00],
         [ 4.8306708e+00,  5.2437835e+00, -8.7595835e-02, ...,
           4.9192529e+00,  3.2605495e+00,  5.2527618e+00],
         [ 5.0385127e+00,  4.2950811e+00,  4.6033568e+00, ...,
           4.6977968e+00,  4.9136729e+00, -3.4028235e+38]],

        [[ 4.7194266e+00,  5.4319310e+00,  2.8713253e+00, ...,
           5.3590703e+00,  5.3968530e+00,  3.5786350e+00],
         [ 5.0474052e+00,  4.7286615e+00,  4.7441964e+00, ...,
           4.9588108e+00,  5.1120129e+00,  2.7698963e+00],
         [ 4.4342041e+00,  4.1472158e+00,  5.0349455e+00, ...,
           4.6062365e+00,  4.3811145e+00,  4.8389411e+00],
         ...,
         [ 4.8372989e+00,  4.9493995e+00,  5.5219474e+00, ...,
           4.4644785e+00,  4.5391750e+00,  4.9276996e+00],
         [ 4.8306708e+00,  5.2437835e+00, -8.7595835e-02, ...,
           4.9192529e+00,  3.2605495e+00,  5.2527618e+00],
         [ 5.0385127e+00,  4.2950811e+00,  4.6033568e+00, ...,
           4.6977968e+00,  4.9136729e+00, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [17], 'to': [16]}
torch node:
{'name': 'maxpool2d', 'output': array([[[[ 4.7194276 ,  5.4319324 ,  2.8713248 , ...,  5.359074  ,
           5.396854  ,  3.578634  ],
         [ 5.047406  ,  4.728662  ,  4.7441974 , ...,  4.9588103 ,
           5.112011  ,  2.7698967 ],
         [ 4.434206  ,  4.1472178 ,  5.034947  , ...,  4.606239  ,
           4.3811145 ,  4.8389416 ],
         ...,
         [ 4.8373003 ,  4.9493995 ,  5.521949  , ...,  4.464481  ,
           4.539176  ,  4.9277024 ],
         [ 4.8306713 ,  5.2437844 , -0.08759576, ...,  4.919256  ,
           3.2605526 ,  5.2527623 ],
         [ 5.0385137 ,  4.295084  ,  4.6033583 , ...,  4.6978    ,
           4.9136767 ,        -inf]],

        [[ 4.7194276 ,  5.4319324 ,  2.8713248 , ...,  5.359074  ,
           5.396854  ,  3.578634  ],
         [ 5.047406  ,  4.728662  ,  4.7441974 , ...,  4.9588103 ,
           5.112011  ,  2.7698967 ],
         [ 4.434206  ,  4.1472178 ,  5.034947  , ...,  4.606239  ,
           4.3811145 ,  4.8389416 ],
         ...,
         [ 4.8373003 ,  4.9493995 ,  5.521949  , ...,  4.464481  ,
           4.539176  ,  4.9277024 ],
         [ 4.8306713 ,  5.2437844 , -0.08759576, ...,  4.919256  ,
           3.2605526 ,  5.2527623 ],
         [ 5.0385137 ,  4.295084  ,  4.6033583 , ...,  4.6978    ,
           4.9136767 ,        -inf]],

        [[ 4.7194276 ,  5.4319324 ,  2.8713248 , ...,  5.359074  ,
           5.396854  ,  3.578634  ],
         [ 5.047406  ,  4.728662  ,  4.7441974 , ...,  4.9588103 ,
           5.112011  ,  2.7698967 ],
         [ 4.434206  ,  4.1472178 ,  5.034947  , ...,  4.606239  ,
           4.3811145 ,  4.8389416 ],
         ...,
         [ 4.8373003 ,  4.9493995 ,  5.521949  , ...,  4.464481  ,
           4.539176  ,  4.9277024 ],
         [ 4.8306713 ,  5.2437844 , -0.08759576, ...,  4.919256  ,
           3.2605526 ,  5.2527623 ],
         [ 5.0385137 ,  4.295084  ,  4.6033583 , ...,  4.6978    ,
           4.9136767 ,        -inf]],

        ...,

        [[ 4.7194276 ,  5.4319324 ,  2.8713248 , ...,  5.359074  ,
           5.396854  ,  3.578634  ],
         [ 5.047406  ,  4.728662  ,  4.7441974 , ...,  4.9588103 ,
           5.112011  ,  2.7698967 ],
         [ 4.434206  ,  4.1472178 ,  5.034947  , ...,  4.606239  ,
           4.3811145 ,  4.8389416 ],
         ...,
         [ 4.8373003 ,  4.9493995 ,  5.521949  , ...,  4.464481  ,
           4.539176  ,  4.9277024 ],
         [ 4.8306713 ,  5.2437844 , -0.08759576, ...,  4.919256  ,
           3.2605526 ,  5.2527623 ],
         [ 5.0385137 ,  4.295084  ,  4.6033583 , ...,  4.6978    ,
           4.9136767 ,        -inf]],

        [[ 4.7194276 ,  5.4319324 ,  2.8713248 , ...,  5.359074  ,
           5.396854  ,  3.578634  ],
         [ 5.047406  ,  4.728662  ,  4.7441974 , ...,  4.9588103 ,
           5.112011  ,  2.7698967 ],
         [ 4.434206  ,  4.1472178 ,  5.034947  , ...,  4.606239  ,
           4.3811145 ,  4.8389416 ],
         ...,
         [ 4.8373003 ,  4.9493995 ,  5.521949  , ...,  4.464481  ,
           4.539176  ,  4.9277024 ],
         [ 4.8306713 ,  5.2437844 , -0.08759576, ...,  4.919256  ,
           3.2605526 ,  5.2527623 ],
         [ 5.0385137 ,  4.295084  ,  4.6033583 , ...,  4.6978    ,
           4.9136767 ,        -inf]],

        [[ 4.7194276 ,  5.4319324 ,  2.8713248 , ...,  5.359074  ,
           5.396854  ,  3.578634  ],
         [ 5.047406  ,  4.728662  ,  4.7441974 , ...,  4.9588103 ,
           5.112011  ,  2.7698967 ],
         [ 4.434206  ,  4.1472178 ,  5.034947  , ...,  4.606239  ,
           4.3811145 ,  4.8389416 ],
         ...,
         [ 4.8373003 ,  4.9493995 ,  5.521949  , ...,  4.464481  ,
           4.539176  ,  4.9277024 ],
         [ 4.8306713 ,  5.2437844 , -0.08759576, ...,  4.919256  ,
           3.2605526 ,  5.2527623 ],
         [ 5.0385137 ,  4.295084  ,  4.6033583 , ...,  4.6978    ,
           4.9136767 ,        -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [17], 'to': [16]}

generate models:280

analyse output arrays in iter:304

pre layer res:
12:transpose
{'name': 'transpose', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [11], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [12], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [12], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [12], 'to': []}

generate models:289

analyse output arrays in iter:307

pre layer res:
27:reshape
{'name': 'reshape', 'output': array([[[[      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf]],

        [[      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf]],

        [[      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf]],

        ...,

        [[32768.   , 32768.   , 32768.   , ..., 32768.   , 16384.   ,
          32768.   ],
         [32768.   , 32768.   , 32768.   , ..., 32768.   , 32768.   ,
          32768.   ],
         [32768.   , 32768.   , 32768.   , ..., 32768.   , 32768.   ,
          32768.   ],
         ...,
         [32768.   , 32768.   , 32768.   , ..., 16384.   , 32768.   ,
          16384.   ],
         [32768.   , 32768.   , 32768.   , ..., 32768.   , 32768.   ,
          32768.   ],
         [32768.   , 32768.   , 32768.   , ..., 32768.   , 32768.   ,
          32768.   ]],

        [[32768.   , 32768.   , 32768.   , ..., 32768.   , 32768.   ,
          32768.   ],
         [32768.   , 32768.   , 32768.   , ..., 32768.   , 32768.   ,
          32768.   ],
         [32768.   , 32768.   , 32768.   , ..., 16384.   , 32768.   ,
          32768.   ],
         ...,
         [32768.   , 32768.   , 32768.   , ..., 32768.   , 32768.   ,
          32768.   ],
         [32768.   , 32768.   , 32768.   , ..., 32768.   , 32768.   ,
          32768.   ],
         [32768.   , 32768.   , 32768.   , ..., 32768.   , 32768.   ,
          32768.   ]],

        [[32768.   , 32768.   , 32768.   , ..., 32768.   , 16384.   ,
          32768.   ],
         [32768.   , 16384.   , 32768.   , ..., 32768.   , 32768.   ,
          32768.   ],
         [32767.998, 32768.   , 32768.   , ..., 32768.   , 32768.   ,
          32768.   ],
         ...,
         [32768.   , 32768.   , 32768.   , ..., 32768.   , 32768.   ,
          32768.   ],
         [32768.   , 32768.   , 32768.   , ..., 16384.   , 32768.   ,
          32768.   ],
         [32768.   , 32768.   , 32768.   , ..., 32768.   , 32768.   ,
          32768.   ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [28], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [27], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [27], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [27], 'to': []}

generate models:292

analyse output arrays in iter:310

pre layer res:
7:conv2d
{'name': 'conv2d', 'output': array([[[[ 741231.3  ,   77780.9  ,  510915.97 , ...,   75916.1  ,
          1169041.8  , 1622094.8  ],
         [1458945.5  ,  397335.9  , 1098928.4  , ...,  822145.94 ,
           533509.06 ,   35546.176],
         [ 720146.9  , 1812559.6  ,  284961.8  , ...,  532496.75 ,
           158098.78 ,  383670.9  ],
         ...,
         [1143841.8  ,  704637.56 ,  630255.2  , ...,   85461.625,
           681877.6  ,  331435.7  ],
         [1008952.1  ,  468871.97 ,       0.   , ...,  557231.75 ,
           871049.94 ,       0.   ],
         [ 735368.2  ,   60593.004,  322421.53 , ...,  188166.02 ,
           776277.8  ,  624407.2  ]],

        [[ 741231.3  ,   77780.9  ,  510915.97 , ...,   75916.1  ,
          1169041.8  , 1622094.8  ],
         [1458945.5  ,  397335.9  , 1098928.4  , ...,  822145.94 ,
           533509.06 ,   35546.176],
         [ 720146.9  , 1812559.6  ,  284961.8  , ...,  532496.75 ,
           158098.78 ,  383670.9  ],
         ...,
         [1143841.8  ,  704637.56 ,  630255.2  , ...,   85461.625,
           681877.6  ,  331435.7  ],
         [1008952.1  ,  468871.97 ,       0.   , ...,  557231.75 ,
           871049.94 ,       0.   ],
         [ 735368.2  ,   60593.004,  322421.53 , ...,  188166.02 ,
           776277.8  ,  624407.2  ]],

        [[ 741231.3  ,   77780.9  ,  510915.97 , ...,   75916.1  ,
          1169041.8  , 1622094.8  ],
         [1458945.5  ,  397335.9  , 1098928.4  , ...,  822145.94 ,
           533509.06 ,   35546.176],
         [ 720146.9  , 1812559.6  ,  284961.8  , ...,  532496.75 ,
           158098.78 ,  383670.9  ],
         ...,
         [1143841.8  ,  704637.56 ,  630255.2  , ...,   85461.625,
           681877.6  ,  331435.7  ],
         [1008952.1  ,  468871.97 ,       0.   , ...,  557231.75 ,
           871049.94 ,       0.   ],
         [ 735368.2  ,   60593.004,  322421.53 , ...,  188166.02 ,
           776277.8  ,  624407.2  ]],

        ...,

        [[ 741231.3  ,   77780.9  ,  510915.97 , ...,   75916.1  ,
          1169041.8  , 1622094.8  ],
         [1458945.5  ,  397335.9  , 1098928.4  , ...,  822145.94 ,
           533509.06 ,   35546.176],
         [ 720146.9  , 1812559.6  ,  284961.8  , ...,  532496.75 ,
           158098.78 ,  383670.9  ],
         ...,
         [1143841.8  ,  704637.56 ,  630255.2  , ...,   85461.625,
           681877.6  ,  331435.7  ],
         [1008952.1  ,  468871.97 ,       0.   , ...,  557231.75 ,
           871049.94 ,       0.   ],
         [ 735368.2  ,   60593.004,  322421.53 , ...,  188166.02 ,
           776277.8  ,  624407.2  ]],

        [[ 741231.3  ,   77780.9  ,  510915.97 , ...,   75916.1  ,
          1169041.8  , 1622094.8  ],
         [1458945.5  ,  397335.9  , 1098928.4  , ...,  822145.94 ,
           533509.06 ,   35546.176],
         [ 720146.9  , 1812559.6  ,  284961.8  , ...,  532496.75 ,
           158098.78 ,  383670.9  ],
         ...,
         [1143841.8  ,  704637.56 ,  630255.2  , ...,   85461.625,
           681877.6  ,  331435.7  ],
         [1008952.1  ,  468871.97 ,       0.   , ...,  557231.75 ,
           871049.94 ,       0.   ],
         [ 735368.2  ,   60593.004,  322421.53 , ...,  188166.02 ,
           776277.8  ,  624407.2  ]],

        [[ 741231.3  ,   77780.9  ,  510915.97 , ...,   75916.1  ,
          1169041.8  , 1622094.8  ],
         [1458945.5  ,  397335.9  , 1098928.4  , ...,  822145.94 ,
           533509.06 ,   35546.176],
         [ 720146.9  , 1812559.6  ,  284961.8  , ...,  532496.75 ,
           158098.78 ,  383670.9  ],
         ...,
         [1143841.8  ,  704637.56 ,  630255.2  , ...,   85461.625,
           681877.6  ,  331435.7  ],
         [1008952.1  ,  468871.97 ,       0.   , ...,  557231.75 ,
           871049.94 ,       0.   ],
         [ 735368.2  ,   60593.004,  322421.53 , ...,  188166.02 ,
           776277.8  ,  624407.2  ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [6], 'to': [20]}
tf node:
{'name': 'cos', 'output': array([[[[-0.69654936,  0.22142588,  0.32053384, ..., -0.8847162 ,
           0.14521255, -0.80015945],
         [-0.76255095,  0.98621964,  0.7416794 , ..., -0.84467775,
          -0.79214877, -0.5856666 ],
         [ 0.917526  ,  0.4482009 ,  0.87310386, ..., -0.99800414,
           0.2938437 ,  0.72356874],
         ...,
         [ 0.90846545, -0.9487788 ,  0.1346784 , ..., -0.6371169 ,
           0.3410867 , -0.69373167],
         [-0.19948328, -0.2578304 ,  1.        , ...,  0.3829142 ,
           0.82078934,  1.        ],
         [-0.9936348 , -0.44788632,  0.99247104, ..., -0.94808465,
          -0.95311624, -0.99817866]],

        [[-0.69654936,  0.22142588,  0.32053384, ..., -0.8847162 ,
           0.14521255, -0.80015945],
         [-0.76255095,  0.98621964,  0.7416794 , ..., -0.84467775,
          -0.79214877, -0.5856666 ],
         [ 0.917526  ,  0.4482009 ,  0.87310386, ..., -0.99800414,
           0.2938437 ,  0.72356874],
         ...,
         [ 0.90846545, -0.9487788 ,  0.1346784 , ..., -0.6371169 ,
           0.3410867 , -0.69373167],
         [-0.19948328, -0.2578304 ,  1.        , ...,  0.3829142 ,
           0.82078934,  1.        ],
         [-0.9936348 , -0.44788632,  0.99247104, ..., -0.94808465,
          -0.95311624, -0.99817866]],

        [[-0.69654936,  0.22142588,  0.32053384, ..., -0.8847162 ,
           0.14521255, -0.80015945],
         [-0.76255095,  0.98621964,  0.7416794 , ..., -0.84467775,
          -0.79214877, -0.5856666 ],
         [ 0.917526  ,  0.4482009 ,  0.87310386, ..., -0.99800414,
           0.2938437 ,  0.72356874],
         ...,
         [ 0.90846545, -0.9487788 ,  0.1346784 , ..., -0.6371169 ,
           0.3410867 , -0.69373167],
         [-0.19948328, -0.2578304 ,  1.        , ...,  0.3829142 ,
           0.82078934,  1.        ],
         [-0.9936348 , -0.44788632,  0.99247104, ..., -0.94808465,
          -0.95311624, -0.99817866]],

        ...,

        [[-0.69654936,  0.22142588,  0.32053384, ..., -0.8847162 ,
           0.14521255, -0.80015945],
         [-0.76255095,  0.98621964,  0.7416794 , ..., -0.84467775,
          -0.79214877, -0.5856666 ],
         [ 0.917526  ,  0.4482009 ,  0.87310386, ..., -0.99800414,
           0.2938437 ,  0.72356874],
         ...,
         [ 0.90846545, -0.9487788 ,  0.1346784 , ..., -0.6371169 ,
           0.3410867 , -0.69373167],
         [-0.19948328, -0.2578304 ,  1.        , ...,  0.3829142 ,
           0.82078934,  1.        ],
         [-0.9936348 , -0.44788632,  0.99247104, ..., -0.94808465,
          -0.95311624, -0.99817866]],

        [[-0.69654936,  0.22142588,  0.32053384, ..., -0.8847162 ,
           0.14521255, -0.80015945],
         [-0.76255095,  0.98621964,  0.7416794 , ..., -0.84467775,
          -0.79214877, -0.5856666 ],
         [ 0.917526  ,  0.4482009 ,  0.87310386, ..., -0.99800414,
           0.2938437 ,  0.72356874],
         ...,
         [ 0.90846545, -0.9487788 ,  0.1346784 , ..., -0.6371169 ,
           0.3410867 , -0.69373167],
         [-0.19948328, -0.2578304 ,  1.        , ...,  0.3829142 ,
           0.82078934,  1.        ],
         [-0.9936348 , -0.44788632,  0.99247104, ..., -0.94808465,
          -0.95311624, -0.99817866]],

        [[-0.69654936,  0.22142588,  0.32053384, ..., -0.8847162 ,
           0.14521255, -0.80015945],
         [-0.76255095,  0.98621964,  0.7416794 , ..., -0.84467775,
          -0.79214877, -0.5856666 ],
         [ 0.917526  ,  0.4482009 ,  0.87310386, ..., -0.99800414,
           0.2938437 ,  0.72356874],
         ...,
         [ 0.90846545, -0.9487788 ,  0.1346784 , ..., -0.6371169 ,
           0.3410867 , -0.69373167],
         [-0.19948328, -0.2578304 ,  1.        , ...,  0.3829142 ,
           0.82078934,  1.        ],
         [-0.9936348 , -0.44788632,  0.99247104, ..., -0.94808465,
          -0.95311624, -0.99817866]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [7], 'to': [8]}
ms node:
{'name': 'cos', 'output': array([[[[-0.6965493 ,  0.22142588,  0.32053384, ..., -0.8847162 ,
           0.14521256, -0.8001594 ],
         [-0.76255095,  0.98621964,  0.7416794 , ..., -0.84467775,
          -0.7921487 , -0.5856666 ],
         [ 0.917526  ,  0.4482009 ,  0.8731038 , ..., -0.99800414,
           0.2938437 ,  0.72356874],
         ...,
         [ 0.90846545, -0.9487788 ,  0.1346784 , ..., -0.6371169 ,
           0.34108672, -0.69373167],
         [-0.19948328, -0.2578304 ,  1.        , ...,  0.3829142 ,
           0.8207893 ,  1.        ],
         [-0.9936348 , -0.44788632,  0.99247104, ..., -0.94808465,
          -0.95311624, -0.99817866]],

        [[-0.6965493 ,  0.22142588,  0.32053384, ..., -0.8847162 ,
           0.14521256, -0.8001594 ],
         [-0.76255095,  0.98621964,  0.7416794 , ..., -0.84467775,
          -0.7921487 , -0.5856666 ],
         [ 0.917526  ,  0.4482009 ,  0.8731038 , ..., -0.99800414,
           0.2938437 ,  0.72356874],
         ...,
         [ 0.90846545, -0.9487788 ,  0.1346784 , ..., -0.6371169 ,
           0.34108672, -0.69373167],
         [-0.19948328, -0.2578304 ,  1.        , ...,  0.3829142 ,
           0.8207893 ,  1.        ],
         [-0.9936348 , -0.44788632,  0.99247104, ..., -0.94808465,
          -0.95311624, -0.99817866]],

        [[-0.6965493 ,  0.22142588,  0.32053384, ..., -0.8847162 ,
           0.14521256, -0.8001594 ],
         [-0.76255095,  0.98621964,  0.7416794 , ..., -0.84467775,
          -0.7921487 , -0.5856666 ],
         [ 0.917526  ,  0.4482009 ,  0.8731038 , ..., -0.99800414,
           0.2938437 ,  0.72356874],
         ...,
         [ 0.90846545, -0.9487788 ,  0.1346784 , ..., -0.6371169 ,
           0.34108672, -0.69373167],
         [-0.19948328, -0.2578304 ,  1.        , ...,  0.3829142 ,
           0.8207893 ,  1.        ],
         [-0.9936348 , -0.44788632,  0.99247104, ..., -0.94808465,
          -0.95311624, -0.99817866]],

        ...,

        [[-0.6965493 ,  0.22142588,  0.32053384, ..., -0.8847162 ,
           0.14521256, -0.8001594 ],
         [-0.76255095,  0.98621964,  0.7416794 , ..., -0.84467775,
          -0.7921487 , -0.5856666 ],
         [ 0.917526  ,  0.4482009 ,  0.8731038 , ..., -0.99800414,
           0.2938437 ,  0.72356874],
         ...,
         [ 0.90846545, -0.9487788 ,  0.1346784 , ..., -0.6371169 ,
           0.34108672, -0.69373167],
         [-0.19948328, -0.2578304 ,  1.        , ...,  0.3829142 ,
           0.8207893 ,  1.        ],
         [-0.9936348 , -0.44788632,  0.99247104, ..., -0.94808465,
          -0.95311624, -0.99817866]],

        [[-0.98468834,  0.3191561 ,  0.32053384, ..., -0.9274172 ,
           0.9476726 ,  0.19615877],
         [-0.6992483 ,  0.96640146,  0.9358173 , ..., -0.19225825,
          -0.03931147, -0.560055  ],
         [ 0.83037406,  0.2131049 ,  0.8055084 , ..., -0.77327317,
           0.18774968,  0.9261067 ],
         ...,
         [-0.46656418, -0.99327356,  0.81201065, ..., -0.71744454,
           0.5103336 , -0.8663801 ],
         [-0.07575792, -0.2578304 ,  1.        , ...,  0.5483993 ,
           0.86930835,  1.        ],
         [-0.9999267 , -0.44788632,  0.98747116, ..., -0.94300014,
          -0.49111757, -0.6426347 ]],

        [[-0.98468834,  0.3191561 ,  0.32053384, ..., -0.9274172 ,
           0.9476726 ,  0.19615877],
         [-0.6992483 ,  0.96640146,  0.9358173 , ..., -0.19225825,
          -0.03931147, -0.560055  ],
         [ 0.83037406,  0.2131049 ,  0.8055084 , ..., -0.77327317,
           0.18774968,  0.9261067 ],
         ...,
         [-0.46656418, -0.99327356,  0.81201065, ..., -0.71744454,
           0.5103336 , -0.8663801 ],
         [-0.07575792, -0.2578304 ,  1.        , ...,  0.5483993 ,
           0.86930835,  1.        ],
         [-0.9999267 , -0.44788632,  0.98747116, ..., -0.94300014,
          -0.49111757, -0.6426347 ]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [7], 'to': [8]}
torch node:
{'name': 'cos', 'output': array([[[[-0.69654936,  0.22142588,  0.32053384, ..., -0.8847162 ,
           0.14521256, -0.8001594 ],
         [-0.76255095,  0.98621964,  0.7416794 , ..., -0.84467775,
          -0.7921487 , -0.5856666 ],
         [ 0.917526  ,  0.4482009 ,  0.8731038 , ..., -0.99800414,
           0.2938437 ,  0.72356874],
         ...,
         [ 0.90846545, -0.9487788 ,  0.1346784 , ..., -0.6371169 ,
           0.34108672, -0.69373167],
         [-0.19948328, -0.2578304 ,  1.        , ...,  0.3829142 ,
           0.8207893 ,  1.        ],
         [-0.9936348 , -0.44788632,  0.99247104, ..., -0.94808465,
          -0.95311624, -0.99817866]],

        [[-0.69654936,  0.22142588,  0.32053384, ..., -0.8847162 ,
           0.14521256, -0.8001594 ],
         [-0.76255095,  0.98621964,  0.7416794 , ..., -0.84467775,
          -0.7921487 , -0.5856666 ],
         [ 0.917526  ,  0.4482009 ,  0.8731038 , ..., -0.99800414,
           0.2938437 ,  0.72356874],
         ...,
         [ 0.90846545, -0.9487788 ,  0.1346784 , ..., -0.6371169 ,
           0.34108672, -0.69373167],
         [-0.19948328, -0.2578304 ,  1.        , ...,  0.3829142 ,
           0.8207893 ,  1.        ],
         [-0.9936348 , -0.44788632,  0.99247104, ..., -0.94808465,
          -0.95311624, -0.99817866]],

        [[-0.69654936,  0.22142588,  0.32053384, ..., -0.8847162 ,
           0.14521256, -0.8001594 ],
         [-0.76255095,  0.98621964,  0.7416794 , ..., -0.84467775,
          -0.7921487 , -0.5856666 ],
         [ 0.917526  ,  0.4482009 ,  0.8731038 , ..., -0.99800414,
           0.2938437 ,  0.72356874],
         ...,
         [ 0.90846545, -0.9487788 ,  0.1346784 , ..., -0.6371169 ,
           0.34108672, -0.69373167],
         [-0.19948328, -0.2578304 ,  1.        , ...,  0.3829142 ,
           0.8207893 ,  1.        ],
         [-0.9936348 , -0.44788632,  0.99247104, ..., -0.94808465,
          -0.95311624, -0.99817866]],

        ...,

        [[-0.69654936,  0.22142588,  0.32053384, ..., -0.8847162 ,
           0.14521256, -0.8001594 ],
         [-0.76255095,  0.98621964,  0.7416794 , ..., -0.84467775,
          -0.7921487 , -0.5856666 ],
         [ 0.917526  ,  0.4482009 ,  0.8731038 , ..., -0.99800414,
           0.2938437 ,  0.72356874],
         ...,
         [ 0.90846545, -0.9487788 ,  0.1346784 , ..., -0.6371169 ,
           0.34108672, -0.69373167],
         [-0.19948328, -0.2578304 ,  1.        , ...,  0.3829142 ,
           0.8207893 ,  1.        ],
         [-0.9936348 , -0.44788632,  0.99247104, ..., -0.94808465,
          -0.95311624, -0.99817866]],

        [[-0.69654936,  0.22142588,  0.32053384, ..., -0.8847162 ,
           0.14521256, -0.8001594 ],
         [-0.76255095,  0.98621964,  0.7416794 , ..., -0.84467775,
          -0.7921487 , -0.5856666 ],
         [ 0.917526  ,  0.4482009 ,  0.8731038 , ..., -0.99800414,
           0.2938437 ,  0.72356874],
         ...,
         [ 0.90846545, -0.9487788 ,  0.1346784 , ..., -0.6371169 ,
           0.34108672, -0.69373167],
         [-0.19948328, -0.2578304 ,  1.        , ...,  0.3829142 ,
           0.8207893 ,  1.        ],
         [-0.9936348 , -0.44788632,  0.99247104, ..., -0.94808465,
          -0.95311624, -0.99817866]],

        [[-0.69654936,  0.22142588,  0.32053384, ..., -0.8847162 ,
           0.14521256, -0.8001594 ],
         [-0.76255095,  0.98621964,  0.7416794 , ..., -0.84467775,
          -0.7921487 , -0.5856666 ],
         [ 0.917526  ,  0.4482009 ,  0.8731038 , ..., -0.99800414,
           0.2938437 ,  0.72356874],
         ...,
         [ 0.90846545, -0.9487788 ,  0.1346784 , ..., -0.6371169 ,
           0.34108672, -0.69373167],
         [-0.19948328, -0.2578304 ,  1.        , ...,  0.3829142 ,
           0.8207893 ,  1.        ],
         [-0.9936348 , -0.44788632,  0.99247104, ..., -0.94808465,
          -0.95311624, -0.99817866]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [7], 'to': [8]}

generate models:295

analyse output arrays in iter:319

pre layer res:
6:relu
{'name': 'relu', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [14], 'to': [11]}
tf node:
{'name': 'log', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [6], 'to': [7]}
ms node:
{'name': 'log', 'output': array([[[[88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         ...,
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284]],

        [[88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         ...,
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284]],

        [[88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         ...,
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284]],

        ...,

        [[88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         ...,
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284]],

        [[88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         ...,
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284]],

        [[88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         ...,
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284],
         [88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284,
          88.72284]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [6], 'to': [7]}
torch node:
{'name': 'log', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [6], 'to': [7]}

generate models:304

analyse output arrays in iter:333

pre layer res:
7:conv2d
{'name': 'conv2d', 'output': array([[[[1.8849251e+24, 4.5922426e+24, 1.3286103e-10, ...,
          6.7020960e+08, 1.3142498e-28,           inf],
         [4.8096362e+26, 9.8007476e+14, 9.0827640e+06, ...,
          1.9986114e+35,           inf, 1.4290291e+05],
         [8.1473283e+30, 3.1224750e+23, 2.2109050e+17, ...,
          1.9284621e+10, 1.7299812e+01,           inf],
         ...,
         [          inf, 1.2329866e+29, 5.2258035e-17, ...,
          1.2858158e+12, 4.9379931e+13,           inf],
         [8.7063825e+37, 6.6961818e+00,           inf, ...,
          1.1788199e+05,           inf,           inf],
         [          inf, 1.6415173e+17, 4.2579460e+21, ...,
          1.3944108e+09, 1.7593466e+30, 4.2622355e+17]],

        [[1.8849251e+24, 4.5922426e+24, 1.3286103e-10, ...,
          6.7020960e+08, 1.3142498e-28,           inf],
         [4.8096362e+26, 9.8007476e+14, 9.0827640e+06, ...,
          1.9986114e+35,           inf, 1.4290291e+05],
         [8.1473283e+30, 3.1224750e+23, 2.2109050e+17, ...,
          1.9284621e+10, 1.7299812e+01,           inf],
         ...,
         [          inf, 1.2329866e+29, 5.2258035e-17, ...,
          1.2858158e+12, 4.9379931e+13,           inf],
         [8.7063825e+37, 6.6961818e+00,           inf, ...,
          1.1788199e+05,           inf,           inf],
         [          inf, 1.6415173e+17, 4.2579460e+21, ...,
          1.3944108e+09, 1.7593466e+30, 4.2622355e+17]],

        [[1.8849251e+24, 4.5922426e+24, 1.3286103e-10, ...,
          6.7020960e+08, 1.3142498e-28,           inf],
         [4.8096362e+26, 9.8007476e+14, 9.0827640e+06, ...,
          1.9986114e+35,           inf, 1.4290291e+05],
         [8.1473283e+30, 3.1224750e+23, 2.2109050e+17, ...,
          1.9284621e+10, 1.7299812e+01,           inf],
         ...,
         [          inf, 1.2329866e+29, 5.2258035e-17, ...,
          1.2858158e+12, 4.9379931e+13,           inf],
         [8.7063825e+37, 6.6961818e+00,           inf, ...,
          1.1788199e+05,           inf,           inf],
         [          inf, 1.6415173e+17, 4.2579460e+21, ...,
          1.3944108e+09, 1.7593466e+30, 4.2622355e+17]],

        ...,

        [[1.8849251e+24, 4.5922426e+24, 1.3286103e-10, ...,
          6.7020960e+08, 1.3142498e-28,           inf],
         [4.8096362e+26, 9.8007476e+14, 9.0827640e+06, ...,
          1.9986114e+35,           inf, 1.4290291e+05],
         [8.1473283e+30, 3.1224750e+23, 2.2109050e+17, ...,
          1.9284621e+10, 1.7299812e+01,           inf],
         ...,
         [          inf, 1.2329866e+29, 5.2258035e-17, ...,
          1.2858158e+12, 4.9379931e+13,           inf],
         [8.7063825e+37, 6.6961818e+00,           inf, ...,
          1.1788199e+05,           inf,           inf],
         [          inf, 1.6415173e+17, 4.2579460e+21, ...,
          1.3944108e+09, 1.7593466e+30, 4.2622355e+17]],

        [[1.8849251e+24, 4.5922426e+24, 1.3286103e-10, ...,
          6.7020960e+08, 1.3142498e-28,           inf],
         [4.8096362e+26, 9.8007476e+14, 9.0827640e+06, ...,
          1.9986114e+35,           inf, 1.4290291e+05],
         [8.1473283e+30, 3.1224750e+23, 2.2109050e+17, ...,
          1.9284621e+10, 1.7299812e+01,           inf],
         ...,
         [          inf, 1.2329866e+29, 5.2258035e-17, ...,
          1.2858158e+12, 4.9379931e+13,           inf],
         [8.7063825e+37, 6.6961818e+00,           inf, ...,
          1.1788199e+05,           inf,           inf],
         [          inf, 1.6415173e+17, 4.2579460e+21, ...,
          1.3944108e+09, 1.7593466e+30, 4.2622355e+17]],

        [[1.8849251e+24, 4.5922426e+24, 1.3286103e-10, ...,
          6.7020960e+08, 1.3142498e-28,           inf],
         [4.8096362e+26, 9.8007476e+14, 9.0827640e+06, ...,
          1.9986114e+35,           inf, 1.4290291e+05],
         [8.1473283e+30, 3.1224750e+23, 2.2109050e+17, ...,
          1.9284621e+10, 1.7299812e+01,           inf],
         ...,
         [          inf, 1.2329866e+29, 5.2258035e-17, ...,
          1.2858158e+12, 4.9379931e+13,           inf],
         [8.7063825e+37, 6.6961818e+00,           inf, ...,
          1.1788199e+05,           inf,           inf],
         [          inf, 1.6415173e+17, 4.2579460e+21, ...,
          1.3944108e+09, 1.7593466e+30, 4.2622355e+17]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [6], 'to': [11]}
tf node:
{'name': 'log', 'output': array([[[[ 55.89593  ,  56.78641  , -22.741718 , ...,  20.323101 ,
          -64.19912  ,         inf],
         [ 61.437836 ,  34.51865  ,  16.021889 , ...,  81.28293  ,
                  inf,  11.869921 ],
         [ 71.17524  ,  54.098083 ,  39.937347 , ...,  23.682573 ,
            2.8506956,         inf],
         ...,
         [        inf,  66.984406 , -37.490337 , ...,  27.882414 ,
           31.530565 ,         inf],
         [ 87.3597   ,   1.9015375,         inf, ...,  11.67744  ,
                  inf,         inf],
         [        inf,  39.63957  ,  49.803074 , ...,  21.055738 ,
           69.642494 ,  40.593742 ]],

        [[ 55.89593  ,  56.78641  , -22.741718 , ...,  20.323101 ,
          -64.19912  ,         inf],
         [ 61.437836 ,  34.51865  ,  16.021889 , ...,  81.28293  ,
                  inf,  11.869921 ],
         [ 71.17524  ,  54.098083 ,  39.937347 , ...,  23.682573 ,
            2.8506956,         inf],
         ...,
         [        inf,  66.984406 , -37.490337 , ...,  27.882414 ,
           31.530565 ,         inf],
         [ 87.3597   ,   1.9015375,         inf, ...,  11.67744  ,
                  inf,         inf],
         [        inf,  39.63957  ,  49.803074 , ...,  21.055738 ,
           69.642494 ,  40.593742 ]],

        [[ 55.89593  ,  56.78641  , -22.741718 , ...,  20.323101 ,
          -64.19912  ,         inf],
         [ 61.437836 ,  34.51865  ,  16.021889 , ...,  81.28293  ,
                  inf,  11.869921 ],
         [ 71.17524  ,  54.098083 ,  39.937347 , ...,  23.682573 ,
            2.8506956,         inf],
         ...,
         [        inf,  66.984406 , -37.490337 , ...,  27.882414 ,
           31.530565 ,         inf],
         [ 87.3597   ,   1.9015375,         inf, ...,  11.67744  ,
                  inf,         inf],
         [        inf,  39.63957  ,  49.803074 , ...,  21.055738 ,
           69.642494 ,  40.593742 ]],

        ...,

        [[ 55.89593  ,  56.78641  , -22.741718 , ...,  20.323101 ,
          -64.19912  ,         inf],
         [ 61.437836 ,  34.51865  ,  16.021889 , ...,  81.28293  ,
                  inf,  11.869921 ],
         [ 71.17524  ,  54.098083 ,  39.937347 , ...,  23.682573 ,
            2.8506956,         inf],
         ...,
         [        inf,  66.984406 , -37.490337 , ...,  27.882414 ,
           31.530565 ,         inf],
         [ 87.3597   ,   1.9015375,         inf, ...,  11.67744  ,
                  inf,         inf],
         [        inf,  39.63957  ,  49.803074 , ...,  21.055738 ,
           69.642494 ,  40.593742 ]],

        [[ 55.89593  ,  56.78641  , -22.741718 , ...,  20.323101 ,
          -64.19912  ,         inf],
         [ 61.437836 ,  34.51865  ,  16.021889 , ...,  81.28293  ,
                  inf,  11.869921 ],
         [ 71.17524  ,  54.098083 ,  39.937347 , ...,  23.682573 ,
            2.8506956,         inf],
         ...,
         [        inf,  66.984406 , -37.490337 , ...,  27.882414 ,
           31.530565 ,         inf],
         [ 87.3597   ,   1.9015375,         inf, ...,  11.67744  ,
                  inf,         inf],
         [        inf,  39.63957  ,  49.803074 , ...,  21.055738 ,
           69.642494 ,  40.593742 ]],

        [[ 55.89593  ,  56.78641  , -22.741718 , ...,  20.323101 ,
          -64.19912  ,         inf],
         [ 61.437836 ,  34.51865  ,  16.021889 , ...,  81.28293  ,
                  inf,  11.869921 ],
         [ 71.17524  ,  54.098083 ,  39.937347 , ...,  23.682573 ,
            2.8506956,         inf],
         ...,
         [        inf,  66.984406 , -37.490337 , ...,  27.882414 ,
           31.530565 ,         inf],
         [ 87.3597   ,   1.9015375,         inf, ...,  11.67744  ,
                  inf,         inf],
         [        inf,  39.63957  ,  49.803074 , ...,  21.055738 ,
           69.642494 ,  40.593742 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [7], 'to': [8]}
ms node:
{'name': 'log', 'output': array([[[[ 55.89591  ,  56.78639  , -22.74173  , ...,  20.323101 ,
          -64.19912  ,  88.72284  ],
         [ 61.437813 ,  34.518623 ,  16.02189  , ...,  81.28292  ,
           88.72284  ,  11.869923 ],
         [ 71.17521  ,  54.098072 ,  39.93733  , ...,  23.682564 ,
            2.8506973,  88.72284  ],
         ...,
         [ 88.72284  ,  66.98438  , -37.490337 , ...,  27.882404 ,
           31.530558 ,  88.72284  ],
         [ 87.35968  ,   1.9015315,  88.72284  , ...,  11.677437 ,
           88.72284  ,  88.72284  ],
         [ 88.72284  ,  39.639565 ,  49.803055 , ...,  21.05574  ,
           69.64248  ,  40.593735 ]],

        [[ 55.89591  ,  56.78639  , -22.74173  , ...,  20.323101 ,
          -64.19912  ,  88.72284  ],
         [ 61.437813 ,  34.518623 ,  16.02189  , ...,  81.28292  ,
           88.72284  ,  11.869923 ],
         [ 71.17521  ,  54.098072 ,  39.93733  , ...,  23.682564 ,
            2.8506973,  88.72284  ],
         ...,
         [ 88.72284  ,  66.98438  , -37.490337 , ...,  27.882404 ,
           31.530558 ,  88.72284  ],
         [ 87.35968  ,   1.9015315,  88.72284  , ...,  11.677437 ,
           88.72284  ,  88.72284  ],
         [ 88.72284  ,  39.639565 ,  49.803055 , ...,  21.05574  ,
           69.64248  ,  40.593735 ]],

        [[ 55.89591  ,  56.78639  , -22.74173  , ...,  20.323101 ,
          -64.19912  ,  88.72284  ],
         [ 61.437813 ,  34.518623 ,  16.02189  , ...,  81.28292  ,
           88.72284  ,  11.869923 ],
         [ 71.17521  ,  54.098072 ,  39.93733  , ...,  23.682564 ,
            2.8506973,  88.72284  ],
         ...,
         [ 88.72284  ,  66.98438  , -37.490337 , ...,  27.882404 ,
           31.530558 ,  88.72284  ],
         [ 87.35968  ,   1.9015315,  88.72284  , ...,  11.677437 ,
           88.72284  ,  88.72284  ],
         [ 88.72284  ,  39.639565 ,  49.803055 , ...,  21.05574  ,
           69.64248  ,  40.593735 ]],

        ...,

        [[ 55.89591  ,  56.78639  , -22.74173  , ...,  20.323101 ,
          -64.19912  ,  88.72284  ],
         [ 61.437813 ,  34.518623 ,  16.02189  , ...,  81.28292  ,
           88.72284  ,  11.869923 ],
         [ 71.17521  ,  54.098072 ,  39.93733  , ...,  23.682564 ,
            2.8506973,  88.72284  ],
         ...,
         [ 88.72284  ,  66.98438  , -37.490337 , ...,  27.882404 ,
           31.530558 ,  88.72284  ],
         [ 87.35968  ,   1.9015315,  88.72284  , ...,  11.677437 ,
           88.72284  ,  88.72284  ],
         [ 88.72284  ,  39.639565 ,  49.803055 , ...,  21.05574  ,
           69.64248  ,  40.593735 ]],

        [[ 55.89591  ,  56.78639  , -22.74173  , ...,  20.323101 ,
          -64.19912  ,  88.72284  ],
         [ 61.437813 ,  34.518623 ,  16.02189  , ...,  81.28292  ,
           88.72284  ,  11.869922 ],
         [ 71.17522  ,  54.098072 ,  39.93733  , ...,  23.682564 ,
            2.850696 ,  88.72284  ],
         ...,
         [ 88.72284  ,  66.98438  , -37.49034  , ...,  27.882404 ,
           31.530558 ,  88.72284  ],
         [ 87.35968  ,   1.9015315,  88.72284  , ...,  11.677435 ,
           88.72284  ,  88.72284  ],
         [ 88.72284  ,  39.639565 ,  49.803055 , ...,  21.05574  ,
           69.64248  ,  40.593735 ]],

        [[ 55.89591  ,  56.78639  , -22.74173  , ...,  20.323101 ,
          -64.19912  ,  88.72284  ],
         [ 61.437813 ,  34.518623 ,  16.02189  , ...,  81.28292  ,
           88.72284  ,  11.869922 ],
         [ 71.17522  ,  54.098072 ,  39.93733  , ...,  23.682564 ,
            2.850696 ,  88.72284  ],
         ...,
         [ 88.72284  ,  66.98438  , -37.49034  , ...,  27.882404 ,
           31.530558 ,  88.72284  ],
         [ 87.35968  ,   1.9015315,  88.72284  , ...,  11.677435 ,
           88.72284  ,  88.72284  ],
         [ 88.72284  ,  39.639565 ,  49.803055 , ...,  21.05574  ,
           69.64248  ,  40.593735 ]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [7], 'to': [8]}
torch node:
{'name': 'log', 'output': array([[[[ 55.89591  ,  56.78639  , -22.741726 , ...,  20.323101 ,
          -64.19912  ,         inf],
         [ 61.437813 ,  34.518627 ,  16.021893 , ...,  81.28292  ,
                  inf,  11.8699255],
         [ 71.17522  ,  54.09807  ,  39.937332 , ...,  23.682562 ,
            2.8507001,         inf],
         ...,
         [        inf,  66.98438  , -37.490337 , ...,  27.882406 ,
           31.530556 ,         inf],
         [ 87.35969  ,   1.9015347,         inf, ...,  11.677438 ,
                  inf,         inf],
         [        inf,  39.63957  ,  49.80305  , ...,  21.055737 ,
           69.64247  ,  40.59374  ]],

        [[ 55.89591  ,  56.78639  , -22.741726 , ...,  20.323101 ,
          -64.19912  ,         inf],
         [ 61.437813 ,  34.518627 ,  16.021893 , ...,  81.28292  ,
                  inf,  11.8699255],
         [ 71.17522  ,  54.09807  ,  39.937332 , ...,  23.682562 ,
            2.8507001,         inf],
         ...,
         [        inf,  66.98438  , -37.490337 , ...,  27.882406 ,
           31.530556 ,         inf],
         [ 87.35969  ,   1.9015347,         inf, ...,  11.677438 ,
                  inf,         inf],
         [        inf,  39.63957  ,  49.80305  , ...,  21.055737 ,
           69.64247  ,  40.59374  ]],

        [[ 55.89591  ,  56.78639  , -22.741726 , ...,  20.323101 ,
          -64.19912  ,         inf],
         [ 61.437813 ,  34.518627 ,  16.021893 , ...,  81.28292  ,
                  inf,  11.8699255],
         [ 71.17522  ,  54.09807  ,  39.937332 , ...,  23.682562 ,
            2.8507001,         inf],
         ...,
         [        inf,  66.98438  , -37.490337 , ...,  27.882406 ,
           31.530556 ,         inf],
         [ 87.35969  ,   1.9015347,         inf, ...,  11.677438 ,
                  inf,         inf],
         [        inf,  39.63957  ,  49.80305  , ...,  21.055737 ,
           69.64247  ,  40.59374  ]],

        ...,

        [[ 55.89591  ,  56.78639  , -22.741726 , ...,  20.323101 ,
          -64.19912  ,         inf],
         [ 61.437813 ,  34.518627 ,  16.021893 , ...,  81.28292  ,
                  inf,  11.8699255],
         [ 71.17522  ,  54.09807  ,  39.937332 , ...,  23.682562 ,
            2.8507001,         inf],
         ...,
         [        inf,  66.98438  , -37.490337 , ...,  27.882406 ,
           31.530556 ,         inf],
         [ 87.35969  ,   1.9015347,         inf, ...,  11.677438 ,
                  inf,         inf],
         [        inf,  39.63957  ,  49.80305  , ...,  21.055737 ,
           69.64247  ,  40.59374  ]],

        [[ 55.89591  ,  56.78639  , -22.741726 , ...,  20.323101 ,
          -64.19912  ,         inf],
         [ 61.437813 ,  34.518627 ,  16.021893 , ...,  81.28292  ,
                  inf,  11.8699255],
         [ 71.17522  ,  54.09807  ,  39.937332 , ...,  23.682562 ,
            2.8507001,         inf],
         ...,
         [        inf,  66.98438  , -37.490337 , ...,  27.882406 ,
           31.530556 ,         inf],
         [ 87.35969  ,   1.9015347,         inf, ...,  11.677438 ,
                  inf,         inf],
         [        inf,  39.63957  ,  49.80305  , ...,  21.055737 ,
           69.64247  ,  40.59374  ]],

        [[ 55.89591  ,  56.78639  , -22.741726 , ...,  20.323101 ,
          -64.19912  ,         inf],
         [ 61.437813 ,  34.518627 ,  16.021893 , ...,  81.28292  ,
                  inf,  11.8699255],
         [ 71.17522  ,  54.09807  ,  39.937332 , ...,  23.682562 ,
            2.8507001,         inf],
         ...,
         [        inf,  66.98438  , -37.490337 , ...,  27.882406 ,
           31.530556 ,         inf],
         [ 87.35969  ,   1.9015347,         inf, ...,  11.677438 ,
                  inf,         inf],
         [        inf,  39.63957  ,  49.80305  , ...,  21.055737 ,
           69.64247  ,  40.59374  ]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [7], 'to': [8]}

pre layer res:
3:relu
{'name': 'relu', 'output': array([[[[  0.       , 193.17511  ,  25.506989 , ...,  29.068733 ,
           44.26319  ,   0.       ],
         [ 38.121483 , 165.1842   ,   0.       , ...,  96.73878  ,
            0.       ,  96.51561  ],
         [  0.       ,   0.       ,  24.79017  , ...,  39.752693 ,
           42.688076 ,  57.008236 ],
         ...,
         [  0.       ,   0.       ,   0.       , ..., 139.36914  ,
          116.30075  ,  39.95256  ],
         [  0.       ,   0.       ,   0.       , ...,   8.1892395,
            0.       ,  29.764065 ],
         [  0.       ,  83.12141  ,  37.308586 , ..., 114.3525   ,
            0.       ,  63.549026 ]],

        [[  0.       , 193.17511  ,  25.506989 , ...,  29.068733 ,
           44.26319  ,   0.       ],
         [ 38.121483 , 165.1842   ,   0.       , ...,  96.73878  ,
            0.       ,  96.51561  ],
         [  0.       ,   0.       ,  24.79017  , ...,  39.752693 ,
           42.688076 ,  57.008236 ],
         ...,
         [  0.       ,   0.       ,   0.       , ..., 139.36914  ,
          116.30075  ,  39.95256  ],
         [  0.       ,   0.       ,   0.       , ...,   8.1892395,
            0.       ,  29.764065 ],
         [  0.       ,  83.12141  ,  37.308586 , ..., 114.3525   ,
            0.       ,  63.549026 ]],

        [[  0.       , 193.17511  ,  25.506989 , ...,  29.068733 ,
           44.26319  ,   0.       ],
         [ 38.121483 , 165.1842   ,   0.       , ...,  96.73878  ,
            0.       ,  96.51561  ],
         [  0.       ,   0.       ,  24.79017  , ...,  39.752693 ,
           42.688076 ,  57.008236 ],
         ...,
         [  0.       ,   0.       ,   0.       , ..., 139.36914  ,
          116.30075  ,  39.95256  ],
         [  0.       ,   0.       ,   0.       , ...,   8.1892395,
            0.       ,  29.764065 ],
         [  0.       ,  83.12141  ,  37.308586 , ..., 114.3525   ,
            0.       ,  63.549026 ]],

        ...,

        [[  0.       , 193.17511  ,  25.506989 , ...,  29.068733 ,
           44.26319  ,   0.       ],
         [ 38.121483 , 165.1842   ,   0.       , ...,  96.73878  ,
            0.       ,  96.51561  ],
         [  0.       ,   0.       ,  24.79017  , ...,  39.752693 ,
           42.688076 ,  57.008236 ],
         ...,
         [  0.       ,   0.       ,   0.       , ..., 139.36914  ,
          116.30075  ,  39.95256  ],
         [  0.       ,   0.       ,   0.       , ...,   8.1892395,
            0.       ,  29.764065 ],
         [  0.       ,  83.12141  ,  37.308586 , ..., 114.3525   ,
            0.       ,  63.549026 ]],

        [[  0.       , 193.17511  ,  25.506989 , ...,  29.068733 ,
           44.26319  ,   0.       ],
         [ 38.121483 , 165.1842   ,   0.       , ...,  96.73878  ,
            0.       ,  96.51561  ],
         [  0.       ,   0.       ,  24.79017  , ...,  39.752693 ,
           42.688076 ,  57.008236 ],
         ...,
         [  0.       ,   0.       ,   0.       , ..., 139.36914  ,
          116.30075  ,  39.95256  ],
         [  0.       ,   0.       ,   0.       , ...,   8.1892395,
            0.       ,  29.764065 ],
         [  0.       ,  83.12141  ,  37.308586 , ..., 114.3525   ,
            0.       ,  63.549026 ]],

        [[  0.       , 193.17511  ,  25.506989 , ...,  29.068733 ,
           44.26319  ,   0.       ],
         [ 38.121483 , 165.1842   ,   0.       , ...,  96.73878  ,
            0.       ,  96.51561  ],
         [  0.       ,   0.       ,  24.79017  , ...,  39.752693 ,
           42.688076 ,  57.008236 ],
         ...,
         [  0.       ,   0.       ,   0.       , ..., 139.36914  ,
          116.30075  ,  39.95256  ],
         [  0.       ,   0.       ,   0.       , ...,   8.1892395,
            0.       ,  29.764065 ],
         [  0.       ,  83.12141  ,  37.308586 , ..., 114.3525   ,
            0.       ,  63.549026 ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [2], 'to': [20]}
tf node:
{'name': 'cos', 'output': array([[[[ 1.        , -0.03283243,  0.93078303, ..., -0.70071346,
           0.960808  ,  1.        ],
         [ 0.91211957, -0.24797536,  1.        , ..., -0.7957235 ,
           1.        , -0.6419462 ],
         [ 1.        ,  1.        ,  0.9418943 , ..., -0.46424767,
           0.27306262,  0.8962441 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.4184449 ,
          -0.9980896 , -0.6308531 ],
         [ 1.        ,  1.        ,  1.        , ..., -0.3290127 ,
           1.        , -0.08097667],
         [ 1.        ,  0.13042614,  0.9247091 , ...,  0.3104163 ,
           1.        ,  0.7536666 ]],

        [[ 1.        , -0.03283243,  0.93078303, ..., -0.70071346,
           0.960808  ,  1.        ],
         [ 0.91211957, -0.24797536,  1.        , ..., -0.7957235 ,
           1.        , -0.6419462 ],
         [ 1.        ,  1.        ,  0.9418943 , ..., -0.46424767,
           0.27306262,  0.8962441 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.4184449 ,
          -0.9980896 , -0.6308531 ],
         [ 1.        ,  1.        ,  1.        , ..., -0.3290127 ,
           1.        , -0.08097667],
         [ 1.        ,  0.13042614,  0.9247091 , ...,  0.3104163 ,
           1.        ,  0.7536666 ]],

        [[ 1.        , -0.03283243,  0.93078303, ..., -0.70071346,
           0.960808  ,  1.        ],
         [ 0.91211957, -0.24797536,  1.        , ..., -0.7957235 ,
           1.        , -0.6419462 ],
         [ 1.        ,  1.        ,  0.9418943 , ..., -0.46424767,
           0.27306262,  0.8962441 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.4184449 ,
          -0.9980896 , -0.6308531 ],
         [ 1.        ,  1.        ,  1.        , ..., -0.3290127 ,
           1.        , -0.08097667],
         [ 1.        ,  0.13042614,  0.9247091 , ...,  0.3104163 ,
           1.        ,  0.7536666 ]],

        ...,

        [[ 1.        , -0.03283243,  0.93078303, ..., -0.70071346,
           0.960808  ,  1.        ],
         [ 0.91211957, -0.24797536,  1.        , ..., -0.7957235 ,
           1.        , -0.6419462 ],
         [ 1.        ,  1.        ,  0.9418943 , ..., -0.46424767,
           0.27306262,  0.8962441 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.4184449 ,
          -0.9980896 , -0.6308531 ],
         [ 1.        ,  1.        ,  1.        , ..., -0.3290127 ,
           1.        , -0.08097667],
         [ 1.        ,  0.13042614,  0.9247091 , ...,  0.3104163 ,
           1.        ,  0.7536666 ]],

        [[ 1.        , -0.03283243,  0.93078303, ..., -0.70071346,
           0.960808  ,  1.        ],
         [ 0.91211957, -0.24797536,  1.        , ..., -0.7957235 ,
           1.        , -0.6419462 ],
         [ 1.        ,  1.        ,  0.9418943 , ..., -0.46424767,
           0.27306262,  0.8962441 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.4184449 ,
          -0.9980896 , -0.6308531 ],
         [ 1.        ,  1.        ,  1.        , ..., -0.3290127 ,
           1.        , -0.08097667],
         [ 1.        ,  0.13042614,  0.9247091 , ...,  0.3104163 ,
           1.        ,  0.7536666 ]],

        [[ 1.        , -0.03283243,  0.93078303, ..., -0.70071346,
           0.960808  ,  1.        ],
         [ 0.91211957, -0.24797536,  1.        , ..., -0.7957235 ,
           1.        , -0.6419462 ],
         [ 1.        ,  1.        ,  0.9418943 , ..., -0.46424767,
           0.27306262,  0.8962441 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.4184449 ,
          -0.9980896 , -0.6308531 ],
         [ 1.        ,  1.        ,  1.        , ..., -0.3290127 ,
           1.        , -0.08097667],
         [ 1.        ,  0.13042614,  0.9247091 , ...,  0.3104163 ,
           1.        ,  0.7536666 ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [3], 'to': [4]}
ms node:
{'name': 'cos', 'output': array([[[[ 1.        , -0.03283243,  0.93078303, ..., -0.70071346,
           0.960808  ,  1.        ],
         [ 0.91211957, -0.24797536,  1.        , ..., -0.7957235 ,
           1.        , -0.6419462 ],
         [ 1.        ,  1.        ,  0.9418943 , ..., -0.46424767,
           0.27306262,  0.8962441 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.41844493,
          -0.9980896 , -0.6308531 ],
         [ 1.        ,  1.        ,  1.        , ..., -0.3290127 ,
           1.        , -0.08097666],
         [ 1.        ,  0.13042612,  0.9247091 , ...,  0.3104163 ,
           1.        ,  0.7536665 ]],

        [[ 1.        , -0.03283243,  0.93078303, ..., -0.70071346,
           0.960808  ,  1.        ],
         [ 0.91211957, -0.24797536,  1.        , ..., -0.7957235 ,
           1.        , -0.6419462 ],
         [ 1.        ,  1.        ,  0.9418943 , ..., -0.46424767,
           0.27306262,  0.8962441 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.41844493,
          -0.9980896 , -0.6308531 ],
         [ 1.        ,  1.        ,  1.        , ..., -0.3290127 ,
           1.        , -0.08097666],
         [ 1.        ,  0.13042612,  0.9247091 , ...,  0.3104163 ,
           1.        ,  0.7536665 ]],

        [[ 1.        , -0.03283243,  0.93078303, ..., -0.70071346,
           0.960808  ,  1.        ],
         [ 0.91211957, -0.24797536,  1.        , ..., -0.7957235 ,
           1.        , -0.6419462 ],
         [ 1.        ,  1.        ,  0.9418943 , ..., -0.46424767,
           0.27306262,  0.8962441 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.41844493,
          -0.9980896 , -0.6308531 ],
         [ 1.        ,  1.        ,  1.        , ..., -0.3290127 ,
           1.        , -0.08097666],
         [ 1.        ,  0.13042612,  0.9247091 , ...,  0.3104163 ,
           1.        ,  0.7536665 ]],

        ...,

        [[ 1.        , -0.03283243,  0.93078303, ..., -0.70071346,
           0.960808  ,  1.        ],
         [ 0.91211957, -0.24797536,  1.        , ..., -0.7957235 ,
           1.        , -0.6419462 ],
         [ 1.        ,  1.        ,  0.9418943 , ..., -0.46424767,
           0.27306262,  0.8962441 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.41844493,
          -0.9980896 , -0.6308531 ],
         [ 1.        ,  1.        ,  1.        , ..., -0.3290127 ,
           1.        , -0.08097666],
         [ 1.        ,  0.13042612,  0.9247091 , ...,  0.3104163 ,
           1.        ,  0.7536665 ]],

        [[ 1.        , -0.03269517,  0.93077815, ..., -0.700708  ,
           0.9608069 ,  1.        ],
         [ 0.9121274 , -0.24787189,  1.        , ..., -0.7957235 ,
           1.        , -0.64194036],
         [ 1.        ,  1.        ,  0.94189686, ..., -0.46425104,
           0.27309197,  0.89626783],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.41844493,
          -0.998091  , -0.6308531 ],
         [ 1.        ,  1.        ,  1.        , ..., -0.3290127 ,
           1.        , -0.08095575],
         [ 1.        ,  0.13047151,  0.9247076 , ...,  0.31045258,
           1.        ,  0.7536966 ]],

        [[ 1.        , -0.03269517,  0.93077815, ..., -0.700708  ,
           0.9608069 ,  1.        ],
         [ 0.9121274 , -0.24787189,  1.        , ..., -0.7957235 ,
           1.        , -0.64194036],
         [ 1.        ,  1.        ,  0.94189686, ..., -0.46425104,
           0.27309197,  0.89626783],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.41844493,
          -0.998091  , -0.6308531 ],
         [ 1.        ,  1.        ,  1.        , ..., -0.3290127 ,
           1.        , -0.08095575],
         [ 1.        ,  0.13047151,  0.9247076 , ...,  0.31045258,
           1.        ,  0.7536966 ]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [3], 'to': [4]}
torch node:
{'name': 'cos', 'output': array([[[[ 1.        , -0.03283243,  0.93078303, ..., -0.70071346,
           0.960808  ,  1.        ],
         [ 0.91211957, -0.24797536,  1.        , ..., -0.7957235 ,
           1.        , -0.6419462 ],
         [ 1.        ,  1.        ,  0.9418943 , ..., -0.46424767,
           0.27306262,  0.8962441 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.41844493,
          -0.9980896 , -0.6308531 ],
         [ 1.        ,  1.        ,  1.        , ..., -0.3290127 ,
           1.        , -0.08097666],
         [ 1.        ,  0.13042612,  0.9247091 , ...,  0.3104163 ,
           1.        ,  0.7536665 ]],

        [[ 1.        , -0.03283243,  0.93078303, ..., -0.70071346,
           0.960808  ,  1.        ],
         [ 0.91211957, -0.24797536,  1.        , ..., -0.7957235 ,
           1.        , -0.6419462 ],
         [ 1.        ,  1.        ,  0.9418943 , ..., -0.46424767,
           0.27306262,  0.8962441 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.41844493,
          -0.9980896 , -0.6308531 ],
         [ 1.        ,  1.        ,  1.        , ..., -0.3290127 ,
           1.        , -0.08097666],
         [ 1.        ,  0.13042612,  0.9247091 , ...,  0.3104163 ,
           1.        ,  0.7536665 ]],

        [[ 1.        , -0.03283243,  0.93078303, ..., -0.70071346,
           0.960808  ,  1.        ],
         [ 0.91211957, -0.24797536,  1.        , ..., -0.7957235 ,
           1.        , -0.6419462 ],
         [ 1.        ,  1.        ,  0.9418943 , ..., -0.46424767,
           0.27306262,  0.8962441 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.41844493,
          -0.9980896 , -0.6308531 ],
         [ 1.        ,  1.        ,  1.        , ..., -0.3290127 ,
           1.        , -0.08097666],
         [ 1.        ,  0.13042612,  0.9247091 , ...,  0.3104163 ,
           1.        ,  0.7536665 ]],

        ...,

        [[ 1.        , -0.03283243,  0.93078303, ..., -0.70071346,
           0.960808  ,  1.        ],
         [ 0.91211957, -0.24797536,  1.        , ..., -0.7957235 ,
           1.        , -0.6419462 ],
         [ 1.        ,  1.        ,  0.9418943 , ..., -0.46424767,
           0.27306262,  0.8962441 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.41844493,
          -0.9980896 , -0.6308531 ],
         [ 1.        ,  1.        ,  1.        , ..., -0.3290127 ,
           1.        , -0.08097666],
         [ 1.        ,  0.13042612,  0.9247091 , ...,  0.3104163 ,
           1.        ,  0.7536665 ]],

        [[ 1.        , -0.03283243,  0.93078303, ..., -0.70071346,
           0.960808  ,  1.        ],
         [ 0.91211957, -0.24797536,  1.        , ..., -0.7957235 ,
           1.        , -0.6419462 ],
         [ 1.        ,  1.        ,  0.9418943 , ..., -0.46424767,
           0.27306262,  0.8962441 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.41844493,
          -0.9980896 , -0.6308531 ],
         [ 1.        ,  1.        ,  1.        , ..., -0.3290127 ,
           1.        , -0.08097666],
         [ 1.        ,  0.13042612,  0.9247091 , ...,  0.3104163 ,
           1.        ,  0.7536665 ]],

        [[ 1.        , -0.03283243,  0.93078303, ..., -0.70071346,
           0.960808  ,  1.        ],
         [ 0.91211957, -0.24797536,  1.        , ..., -0.7957235 ,
           1.        , -0.6419462 ],
         [ 1.        ,  1.        ,  0.9418943 , ..., -0.46424767,
           0.27306262,  0.8962441 ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  0.41844493,
          -0.9980896 , -0.6308531 ],
         [ 1.        ,  1.        ,  1.        , ..., -0.3290127 ,
           1.        , -0.08097666],
         [ 1.        ,  0.13042612,  0.9247091 , ...,  0.3104163 ,
           1.        ,  0.7536665 ]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [3], 'to': [4]}

generate models:318

analyse output arrays in iter:350

pre layer res:
20:relu
{'name': 'relu', 'output': array([[[[1333777.2  ,  855858.44 ,  247357.48 , ..., 1625935.6  ,
           871498.25 , 1135681.9  ],
         [1267994.6  , 1332577.2  , 1512017.1  , ...,  834125.5  ,
          1504526.9  ,  387136.03 ],
         [1083486.1  , 1220529.4  , 1018534.   , ...,  873098.4  ,
           776005.8  ,  120384.99 ],
         ...,
         [ 972128.1  , 2272564.8  , 1747931.5  , ...,  809682.44 ,
           595163.5  , 2217780.5  ],
         [  22037.982,  980085.9  ,       0.   , ..., 1092209.9  ,
          1028360.06 , 1548833.1  ],
         [1067061.9  ,  492218.94 , 1831851.5  , ...,  914234.25 ,
          1000760.06 , 1100655.9  ]],

        [[1333777.2  ,  855858.44 ,  247357.48 , ..., 1625935.6  ,
           871498.25 , 1135681.9  ],
         [1267994.6  , 1332577.2  , 1512017.1  , ...,  834125.5  ,
          1504526.9  ,  387136.03 ],
         [1083486.1  , 1220529.4  , 1018534.   , ...,  873098.4  ,
           776005.8  ,  120384.99 ],
         ...,
         [ 972128.1  , 2272564.8  , 1747931.5  , ...,  809682.44 ,
           595163.5  , 2217780.5  ],
         [  22037.982,  980085.9  ,       0.   , ..., 1092209.9  ,
          1028360.06 , 1548833.1  ],
         [1067061.9  ,  492218.94 , 1831851.5  , ...,  914234.25 ,
          1000760.06 , 1100655.9  ]],

        [[1333777.2  ,  855858.44 ,  247357.48 , ..., 1625935.6  ,
           871498.25 , 1135681.9  ],
         [1267994.6  , 1332577.2  , 1512017.1  , ...,  834125.5  ,
          1504526.9  ,  387136.03 ],
         [1083486.1  , 1220529.4  , 1018534.   , ...,  873098.4  ,
           776005.8  ,  120384.99 ],
         ...,
         [ 972128.1  , 2272564.8  , 1747931.5  , ...,  809682.44 ,
           595163.5  , 2217780.5  ],
         [  22037.982,  980085.9  ,       0.   , ..., 1092209.9  ,
          1028360.06 , 1548833.1  ],
         [1067061.9  ,  492218.94 , 1831851.5  , ...,  914234.25 ,
          1000760.06 , 1100655.9  ]],

        ...,

        [[1333777.2  ,  855858.44 ,  247357.48 , ..., 1625935.6  ,
           871498.25 , 1135681.9  ],
         [1267994.6  , 1332577.2  , 1512017.1  , ...,  834125.5  ,
          1504526.9  ,  387136.03 ],
         [1083486.1  , 1220529.4  , 1018534.   , ...,  873098.4  ,
           776005.8  ,  120384.99 ],
         ...,
         [ 972128.1  , 2272564.8  , 1747931.5  , ...,  809682.44 ,
           595163.5  , 2217780.5  ],
         [  22037.982,  980085.9  ,       0.   , ..., 1092209.9  ,
          1028360.06 , 1548833.1  ],
         [1067061.9  ,  492218.94 , 1831851.5  , ...,  914234.25 ,
          1000760.06 , 1100655.9  ]],

        [[1333777.2  ,  855858.44 ,  247357.48 , ..., 1625935.6  ,
           871498.25 , 1135681.9  ],
         [1267994.6  , 1332577.2  , 1512017.1  , ...,  834125.5  ,
          1504526.9  ,  387136.03 ],
         [1083486.1  , 1220529.4  , 1018534.   , ...,  873098.4  ,
           776005.8  ,  120384.99 ],
         ...,
         [ 972128.1  , 2272564.8  , 1747931.5  , ...,  809682.44 ,
           595163.5  , 2217780.5  ],
         [  22037.982,  980085.9  ,       0.   , ..., 1092209.9  ,
          1028360.06 , 1548833.1  ],
         [1067061.9  ,  492218.94 , 1831851.5  , ...,  914234.25 ,
          1000760.06 , 1100655.9  ]],

        [[1333777.2  ,  855858.44 ,  247357.48 , ..., 1625935.6  ,
           871498.25 , 1135681.9  ],
         [1267994.6  , 1332577.2  , 1512017.1  , ...,  834125.5  ,
          1504526.9  ,  387136.03 ],
         [1083486.1  , 1220529.4  , 1018534.   , ...,  873098.4  ,
           776005.8  ,  120384.99 ],
         ...,
         [ 972128.1  , 2272564.8  , 1747931.5  , ...,  809682.44 ,
           595163.5  , 2217780.5  ],
         [  22037.982,  980085.9  ,       0.   , ..., 1092209.9  ,
          1028360.06 , 1548833.1  ],
         [1067061.9  ,  492218.94 , 1831851.5  , ...,  914234.25 ,
          1000760.06 , 1100655.9  ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [21], 'to': [13]}
tf node:
{'name': 'sin', 'output': array([[[[ 0.9988363 ,  0.5924268 ,  0.8650259 , ..., -0.9340329 ,
           0.99962074,  0.6651391 ],
         [-0.6488875 ,  0.99919426, -0.00324623, ...,  0.9439983 ,
          -0.6414295 , -0.6519405 ],
         [ 0.8839574 ,  0.97829527, -0.9832249 , ..., -0.46966833,
           0.84743595, -0.7435061 ],
         ...,
         [-0.02253961, -0.51735204, -0.37738875, ..., -0.23489417,
           0.97305924, -0.9915276 ],
         [ 0.2859935 , -0.0732014 ,  0.        , ..., -0.5903241 ,
          -0.5210254 ,  0.32172772],
         [ 0.8822651 ,  0.46507636,  0.983712  , ..., -0.58762556,
          -0.53159815, -0.8962251 ]],

        [[ 0.9988363 ,  0.5924268 ,  0.8650259 , ..., -0.9340329 ,
           0.99962074,  0.6651391 ],
         [-0.6488875 ,  0.99919426, -0.00324623, ...,  0.9439983 ,
          -0.6414295 , -0.6519405 ],
         [ 0.8839574 ,  0.97829527, -0.9832249 , ..., -0.46966833,
           0.84743595, -0.7435061 ],
         ...,
         [-0.02253961, -0.51735204, -0.37738875, ..., -0.23489417,
           0.97305924, -0.9915276 ],
         [ 0.2859935 , -0.0732014 ,  0.        , ..., -0.5903241 ,
          -0.5210254 ,  0.32172772],
         [ 0.8822651 ,  0.46507636,  0.983712  , ..., -0.58762556,
          -0.53159815, -0.8962251 ]],

        [[ 0.9988363 ,  0.5924268 ,  0.8650259 , ..., -0.9340329 ,
           0.99962074,  0.6651391 ],
         [-0.6488875 ,  0.99919426, -0.00324623, ...,  0.9439983 ,
          -0.6414295 , -0.6519405 ],
         [ 0.8839574 ,  0.97829527, -0.9832249 , ..., -0.46966833,
           0.84743595, -0.7435061 ],
         ...,
         [-0.02253961, -0.51735204, -0.37738875, ..., -0.23489417,
           0.97305924, -0.9915276 ],
         [ 0.2859935 , -0.0732014 ,  0.        , ..., -0.5903241 ,
          -0.5210254 ,  0.32172772],
         [ 0.8822651 ,  0.46507636,  0.983712  , ..., -0.58762556,
          -0.53159815, -0.8962251 ]],

        ...,

        [[ 0.9988363 ,  0.5924268 ,  0.8650259 , ..., -0.9340329 ,
           0.99962074,  0.6651391 ],
         [-0.6488875 ,  0.99919426, -0.00324623, ...,  0.9439983 ,
          -0.6414295 , -0.6519405 ],
         [ 0.8839574 ,  0.97829527, -0.9832249 , ..., -0.46966833,
           0.84743595, -0.7435061 ],
         ...,
         [-0.02253961, -0.51735204, -0.37738875, ..., -0.23489417,
           0.97305924, -0.9915276 ],
         [ 0.2859935 , -0.0732014 ,  0.        , ..., -0.5903241 ,
          -0.5210254 ,  0.32172772],
         [ 0.8822651 ,  0.46507636,  0.983712  , ..., -0.58762556,
          -0.53159815, -0.8962251 ]],

        [[ 0.9988363 ,  0.5924268 ,  0.8650259 , ..., -0.9340329 ,
           0.99962074,  0.6651391 ],
         [-0.6488875 ,  0.99919426, -0.00324623, ...,  0.9439983 ,
          -0.6414295 , -0.6519405 ],
         [ 0.8839574 ,  0.97829527, -0.9832249 , ..., -0.46966833,
           0.84743595, -0.7435061 ],
         ...,
         [-0.02253961, -0.51735204, -0.37738875, ..., -0.23489417,
           0.97305924, -0.9915276 ],
         [ 0.2859935 , -0.0732014 ,  0.        , ..., -0.5903241 ,
          -0.5210254 ,  0.32172772],
         [ 0.8822651 ,  0.46507636,  0.983712  , ..., -0.58762556,
          -0.53159815, -0.8962251 ]],

        [[ 0.9988363 ,  0.5924268 ,  0.8650259 , ..., -0.9340329 ,
           0.99962074,  0.6651391 ],
         [-0.6488875 ,  0.99919426, -0.00324623, ...,  0.9439983 ,
          -0.6414295 , -0.6519405 ],
         [ 0.8839574 ,  0.97829527, -0.9832249 , ..., -0.46966833,
           0.84743595, -0.7435061 ],
         ...,
         [-0.02253961, -0.51735204, -0.37738875, ..., -0.23489417,
           0.97305924, -0.9915276 ],
         [ 0.2859935 , -0.0732014 ,  0.        , ..., -0.5903241 ,
          -0.5210254 ,  0.32172772],
         [ 0.8822651 ,  0.46507636,  0.983712  , ..., -0.58762556,
          -0.53159815, -0.8962251 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [20], 'to': [8]}
ms node:
{'name': 'sin', 'output': array([[[[ 0.9988363 ,  0.5924268 ,  0.8650259 , ..., -0.9340329 ,
           0.99962074,  0.6651391 ],
         [-0.64888746,  0.99919426, -0.00324623, ...,  0.9439983 ,
          -0.6414295 , -0.6519405 ],
         [ 0.8839573 ,  0.97829527, -0.9832249 , ..., -0.46966833,
           0.8474359 , -0.7435061 ],
         ...,
         [ 0.03994785, -0.51735204, -0.2589886 , ..., -0.2951473 ,
           0.97305924, -0.9915276 ],
         [ 0.2859935 , -0.0732014 ,  0.        , ..., -0.5903241 ,
          -0.5210254 ,  0.32172772],
         [ 0.8822651 ,  0.46507636,  0.983712  , ..., -0.58762556,
          -0.5315982 , -0.89622504]],

        [[ 0.9988363 ,  0.5924268 ,  0.8650259 , ..., -0.9340329 ,
           0.99962074,  0.6651391 ],
         [-0.64888746,  0.99919426, -0.00324623, ...,  0.9439983 ,
          -0.6414295 , -0.6519405 ],
         [ 0.8839573 ,  0.97829527, -0.9832249 , ..., -0.46966833,
           0.8474359 , -0.7435061 ],
         ...,
         [ 0.03994785, -0.51735204, -0.2589886 , ..., -0.2951473 ,
           0.97305924, -0.9915276 ],
         [ 0.2859935 , -0.0732014 ,  0.        , ..., -0.5903241 ,
          -0.5210254 ,  0.32172772],
         [ 0.8822651 ,  0.46507636,  0.983712  , ..., -0.58762556,
          -0.5315982 , -0.89622504]],

        [[ 0.9988363 ,  0.5924268 ,  0.8650259 , ..., -0.9340329 ,
           0.99962074,  0.6651391 ],
         [-0.64888746,  0.99919426, -0.00324623, ...,  0.9439983 ,
          -0.6414295 , -0.6519405 ],
         [ 0.8839573 ,  0.97829527, -0.9832249 , ..., -0.46966833,
           0.8474359 , -0.7435061 ],
         ...,
         [ 0.03994785, -0.51735204, -0.2589886 , ..., -0.2951473 ,
           0.97305924, -0.9915276 ],
         [ 0.2859935 , -0.0732014 ,  0.        , ..., -0.5903241 ,
          -0.5210254 ,  0.32172772],
         [ 0.8822651 ,  0.46507636,  0.983712  , ..., -0.58762556,
          -0.5315982 , -0.89622504]],

        ...,

        [[ 0.9988363 ,  0.5924268 ,  0.8650259 , ..., -0.9340329 ,
           0.99962074,  0.6651391 ],
         [-0.64888746,  0.99919426, -0.00324623, ...,  0.9439983 ,
          -0.6414295 , -0.6519405 ],
         [ 0.8839573 ,  0.97829527, -0.9832249 , ..., -0.46966833,
           0.8474359 , -0.7435061 ],
         ...,
         [ 0.03994785, -0.51735204, -0.2589886 , ..., -0.2951473 ,
           0.97305924, -0.9915276 ],
         [ 0.2859935 , -0.0732014 ,  0.        , ..., -0.5903241 ,
          -0.5210254 ,  0.32172772],
         [ 0.8822651 ,  0.46507636,  0.983712  , ..., -0.58762556,
          -0.5315982 , -0.89622504]],

        [[ 0.4741909 ,  0.8772124 ,  0.5450527 , ..., -0.738297  ,
           0.10555737, -0.8533199 ],
         [-0.5489616 ,  0.39461714,  0.8397126 , ..., -0.2015642 ,
          -0.99212724, -0.6519405 ],
         [-0.7108744 , -0.01293143,  0.5227961 , ...,  0.8789161 ,
           0.25817895, -0.7435061 ],
         ...,
         [ 0.16421138,  0.92662936,  0.1200917 , ...,  0.8136425 ,
           0.97909117,  0.96327394],
         [ 0.30279234,  0.98584807,  0.        , ..., -0.5932841 ,
          -0.5210254 , -0.6229016 ],
         [-0.6204746 , -0.3813712 , -0.9154622 , ...,  0.87205166,
          -0.5315982 , -0.89622504]],

        [[ 0.4741909 ,  0.8772124 ,  0.5450527 , ..., -0.738297  ,
           0.10555737, -0.8533199 ],
         [-0.5489616 ,  0.39461714,  0.8397126 , ..., -0.2015642 ,
          -0.99212724, -0.6519405 ],
         [-0.7108744 , -0.01293143,  0.5227961 , ...,  0.8789161 ,
           0.25817895, -0.7435061 ],
         ...,
         [ 0.16421138,  0.92662936,  0.1200917 , ...,  0.8136425 ,
           0.97909117,  0.96327394],
         [ 0.30279234,  0.98584807,  0.        , ..., -0.5932841 ,
          -0.5210254 , -0.6229016 ],
         [-0.6204746 , -0.3813712 , -0.9154622 , ...,  0.87205166,
          -0.5315982 , -0.89622504]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [20], 'to': [8]}
torch node:
{'name': 'sin', 'output': array([[[[ 0.9988363 ,  0.5924268 ,  0.8650259 , ..., -0.9340329 ,
           0.99962074,  0.6651391 ],
         [-0.64888746,  0.99919426, -0.00324623, ...,  0.9439983 ,
          -0.6414295 , -0.6519405 ],
         [ 0.8839573 ,  0.97829527, -0.9832249 , ..., -0.46966833,
           0.8474359 , -0.7435061 ],
         ...,
         [ 0.03994785, -0.51735204, -0.2589886 , ..., -0.2951473 ,
           0.97305924, -0.9915276 ],
         [ 0.2859935 , -0.0732014 ,  0.        , ..., -0.5903241 ,
          -0.5210254 ,  0.32172772],
         [ 0.8822651 ,  0.46507636,  0.983712  , ..., -0.58762556,
          -0.5315982 , -0.89622504]],

        [[ 0.9988363 ,  0.5924268 ,  0.8650259 , ..., -0.9340329 ,
           0.99962074,  0.6651391 ],
         [-0.64888746,  0.99919426, -0.00324623, ...,  0.9439983 ,
          -0.6414295 , -0.6519405 ],
         [ 0.8839573 ,  0.97829527, -0.9832249 , ..., -0.46966833,
           0.8474359 , -0.7435061 ],
         ...,
         [ 0.03994785, -0.51735204, -0.2589886 , ..., -0.2951473 ,
           0.97305924, -0.9915276 ],
         [ 0.2859935 , -0.0732014 ,  0.        , ..., -0.5903241 ,
          -0.5210254 ,  0.32172772],
         [ 0.8822651 ,  0.46507636,  0.983712  , ..., -0.58762556,
          -0.5315982 , -0.89622504]],

        [[ 0.9988363 ,  0.5924268 ,  0.8650259 , ..., -0.9340329 ,
           0.99962074,  0.6651391 ],
         [-0.64888746,  0.99919426, -0.00324623, ...,  0.9439983 ,
          -0.6414295 , -0.6519405 ],
         [ 0.8839573 ,  0.97829527, -0.9832249 , ..., -0.46966833,
           0.8474359 , -0.7435061 ],
         ...,
         [ 0.03994785, -0.51735204, -0.2589886 , ..., -0.2951473 ,
           0.97305924, -0.9915276 ],
         [ 0.2859935 , -0.0732014 ,  0.        , ..., -0.5903241 ,
          -0.5210254 ,  0.32172772],
         [ 0.8822651 ,  0.46507636,  0.983712  , ..., -0.58762556,
          -0.5315982 , -0.89622504]],

        ...,

        [[ 0.9988363 ,  0.5924268 ,  0.8650259 , ..., -0.9340329 ,
           0.99962074,  0.6651391 ],
         [-0.64888746,  0.99919426, -0.00324623, ...,  0.9439983 ,
          -0.6414295 , -0.6519405 ],
         [ 0.8839573 ,  0.97829527, -0.9832249 , ..., -0.46966833,
           0.8474359 , -0.7435061 ],
         ...,
         [ 0.03994785, -0.51735204, -0.2589886 , ..., -0.2951473 ,
           0.97305924, -0.9915276 ],
         [ 0.2859935 , -0.0732014 ,  0.        , ..., -0.5903241 ,
          -0.5210254 ,  0.32172772],
         [ 0.8822651 ,  0.46507636,  0.983712  , ..., -0.58762556,
          -0.5315982 , -0.89622504]],

        [[ 0.9988363 ,  0.5924268 ,  0.8650259 , ..., -0.9340329 ,
           0.99962074,  0.6651391 ],
         [-0.64888746,  0.99919426, -0.00324623, ...,  0.9439983 ,
          -0.6414295 , -0.6519405 ],
         [ 0.8839573 ,  0.97829527, -0.9832249 , ..., -0.46966833,
           0.8474359 , -0.7435061 ],
         ...,
         [ 0.03994785, -0.51735204, -0.2589886 , ..., -0.2951473 ,
           0.97305924, -0.9915276 ],
         [ 0.2859935 , -0.0732014 ,  0.        , ..., -0.5903241 ,
          -0.5210254 ,  0.32172772],
         [ 0.8822651 ,  0.46507636,  0.983712  , ..., -0.58762556,
          -0.5315982 , -0.89622504]],

        [[ 0.9988363 ,  0.5924268 ,  0.8650259 , ..., -0.9340329 ,
           0.99962074,  0.6651391 ],
         [-0.64888746,  0.99919426, -0.00324623, ...,  0.9439983 ,
          -0.6414295 , -0.6519405 ],
         [ 0.8839573 ,  0.97829527, -0.9832249 , ..., -0.46966833,
           0.8474359 , -0.7435061 ],
         ...,
         [ 0.03994785, -0.51735204, -0.2589886 , ..., -0.2951473 ,
           0.97305924, -0.9915276 ],
         [ 0.2859935 , -0.0732014 ,  0.        , ..., -0.5903241 ,
          -0.5210254 ,  0.32172772],
         [ 0.8822651 ,  0.46507636,  0.983712  , ..., -0.58762556,
          -0.5315982 , -0.89622504]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [20], 'to': [8]}

generate models:334

analyse output arrays in iter:359

pre layer res:
7:conv2d
{'name': 'conv2d', 'output': array([[[[835.4377 , 955.5229 , 848.97064, ..., 814.244  , 890.617  ,
          846.9118 ],
         [924.4061 , 840.2187 , 860.95123, ..., 943.07074, 925.0463 ,
          791.04144],
         [881.5001 , 830.41174, 947.47485, ..., 762.7962 , 911.7193 ,
          906.31305],
         ...,
         [886.1307 , 883.8205 , 886.67957, ..., 791.836  , 911.0314 ,
               -inf],
         [853.1972 , 887.101  , 911.1463 , ..., 896.65405, 879.74164,
          986.5254 ],
         [874.937  , 916.08386, 806.2505 , ..., 888.7053 , 894.92926,
          800.34326]],

        [[835.4377 , 955.5229 , 848.97064, ..., 814.244  , 890.617  ,
          846.9118 ],
         [924.4061 , 840.2187 , 860.95123, ..., 943.07074, 925.0463 ,
          791.04144],
         [881.5001 , 830.41174, 947.47485, ..., 762.7962 , 911.7193 ,
          906.31305],
         ...,
         [886.1307 , 883.8205 , 886.67957, ..., 791.836  , 911.0314 ,
               -inf],
         [853.1972 , 887.101  , 911.1463 , ..., 896.65405, 879.74164,
          986.5254 ],
         [874.937  , 916.08386, 806.2505 , ..., 888.7053 , 894.92926,
          800.34326]],

        [[835.4377 , 955.5229 , 848.97064, ..., 814.244  , 890.617  ,
          846.9118 ],
         [924.4061 , 840.2187 , 860.95123, ..., 943.07074, 925.0463 ,
          791.04144],
         [881.5001 , 830.41174, 947.47485, ..., 762.7962 , 911.7193 ,
          906.31305],
         ...,
         [886.1307 , 883.8205 , 886.67957, ..., 791.836  , 911.0314 ,
               -inf],
         [853.1972 , 887.101  , 911.1463 , ..., 896.65405, 879.74164,
          986.5254 ],
         [874.937  , 916.08386, 806.2505 , ..., 888.7053 , 894.92926,
          800.34326]],

        ...,

        [[835.4377 , 955.5229 , 848.97064, ..., 814.244  , 890.617  ,
          846.9118 ],
         [924.4061 , 840.2187 , 860.95123, ..., 943.07074, 925.0463 ,
          791.04144],
         [881.5001 , 830.41174, 947.47485, ..., 762.7962 , 911.7193 ,
          906.31305],
         ...,
         [886.1307 , 883.8205 , 886.67957, ..., 791.836  , 911.0314 ,
               -inf],
         [853.1972 , 887.101  , 911.1463 , ..., 896.65405, 879.74164,
          986.5254 ],
         [874.937  , 916.08386, 806.2505 , ..., 888.7053 , 894.92926,
          800.34326]],

        [[835.4377 , 955.5229 , 848.97064, ..., 814.244  , 890.617  ,
          846.9118 ],
         [924.4061 , 840.2187 , 860.95123, ..., 943.07074, 925.0463 ,
          791.04144],
         [881.5001 , 830.41174, 947.47485, ..., 762.7962 , 911.7193 ,
          906.31305],
         ...,
         [886.1307 , 883.8205 , 886.67957, ..., 791.836  , 911.0314 ,
               -inf],
         [853.1972 , 887.101  , 911.1463 , ..., 896.65405, 879.74164,
          986.5254 ],
         [874.937  , 916.08386, 806.2505 , ..., 888.7053 , 894.92926,
          800.34326]],

        [[835.4377 , 955.5229 , 848.97064, ..., 814.244  , 890.617  ,
          846.9118 ],
         [924.4061 , 840.2187 , 860.95123, ..., 943.07074, 925.0463 ,
          791.04144],
         [881.5001 , 830.41174, 947.47485, ..., 762.7962 , 911.7193 ,
          906.31305],
         ...,
         [886.1307 , 883.8205 , 886.67957, ..., 791.836  , 911.0314 ,
               -inf],
         [853.1972 , 887.101  , 911.1463 , ..., 896.65405, 879.74164,
          986.5254 ],
         [874.937  , 916.08386, 806.2505 , ..., 888.7053 , 894.92926,
          800.34326]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [16], 'to': [15]}
tf node:
{'name': 'log', 'output': array([[[[6.727956 , 6.862259 , 6.7440248, ..., 6.70226  , 6.7919145,
          6.7415967],
         [6.8291516, 6.733662 , 6.758038 , ..., 6.849141 , 6.829844 ,
          6.6733503],
         [6.7816253, 6.7219214, 6.8538003, ..., 6.636991 , 6.8153324,
          6.809385 ],
         ...,
         [6.7868643, 6.784254 , 6.7874837, ..., 6.6743546, 6.8145776,
                nan],
         [6.7489905, 6.787959 , 6.8147035, ..., 6.7986703, 6.7796283,
          6.894189 ],
         [6.774152 , 6.820108 , 6.6923943, ..., 6.789766 , 6.796745 ,
          6.685041 ]],

        [[6.727956 , 6.862259 , 6.7440248, ..., 6.70226  , 6.7919145,
          6.7415967],
         [6.8291516, 6.733662 , 6.758038 , ..., 6.849141 , 6.829844 ,
          6.6733503],
         [6.7816253, 6.7219214, 6.8538003, ..., 6.636991 , 6.8153324,
          6.809385 ],
         ...,
         [6.7868643, 6.784254 , 6.7874837, ..., 6.6743546, 6.8145776,
                nan],
         [6.7489905, 6.787959 , 6.8147035, ..., 6.7986703, 6.7796283,
          6.894189 ],
         [6.774152 , 6.820108 , 6.6923943, ..., 6.789766 , 6.796745 ,
          6.685041 ]],

        [[6.727956 , 6.862259 , 6.7440248, ..., 6.70226  , 6.7919145,
          6.7415967],
         [6.8291516, 6.733662 , 6.758038 , ..., 6.849141 , 6.829844 ,
          6.6733503],
         [6.7816253, 6.7219214, 6.8538003, ..., 6.636991 , 6.8153324,
          6.809385 ],
         ...,
         [6.7868643, 6.784254 , 6.7874837, ..., 6.6743546, 6.8145776,
                nan],
         [6.7489905, 6.787959 , 6.8147035, ..., 6.7986703, 6.7796283,
          6.894189 ],
         [6.774152 , 6.820108 , 6.6923943, ..., 6.789766 , 6.796745 ,
          6.685041 ]],

        ...,

        [[6.727956 , 6.862259 , 6.7440248, ..., 6.70226  , 6.7919145,
          6.7415967],
         [6.8291516, 6.733662 , 6.758038 , ..., 6.849141 , 6.829844 ,
          6.6733503],
         [6.7816253, 6.7219214, 6.8538003, ..., 6.636991 , 6.8153324,
          6.809385 ],
         ...,
         [6.7868643, 6.784254 , 6.7874837, ..., 6.6743546, 6.8145776,
                nan],
         [6.7489905, 6.787959 , 6.8147035, ..., 6.7986703, 6.7796283,
          6.894189 ],
         [6.774152 , 6.820108 , 6.6923943, ..., 6.789766 , 6.796745 ,
          6.685041 ]],

        [[6.727956 , 6.862259 , 6.7440248, ..., 6.70226  , 6.7919145,
          6.7415967],
         [6.8291516, 6.733662 , 6.758038 , ..., 6.849141 , 6.829844 ,
          6.6733503],
         [6.7816253, 6.7219214, 6.8538003, ..., 6.636991 , 6.8153324,
          6.809385 ],
         ...,
         [6.7868643, 6.784254 , 6.7874837, ..., 6.6743546, 6.8145776,
                nan],
         [6.7489905, 6.787959 , 6.8147035, ..., 6.7986703, 6.7796283,
          6.894189 ],
         [6.774152 , 6.820108 , 6.6923943, ..., 6.789766 , 6.796745 ,
          6.685041 ]],

        [[6.727956 , 6.862259 , 6.7440248, ..., 6.70226  , 6.7919145,
          6.7415967],
         [6.8291516, 6.733662 , 6.758038 , ..., 6.849141 , 6.829844 ,
          6.6733503],
         [6.7816253, 6.7219214, 6.8538003, ..., 6.636991 , 6.8153324,
          6.809385 ],
         ...,
         [6.7868643, 6.784254 , 6.7874837, ..., 6.6743546, 6.8145776,
                nan],
         [6.7489905, 6.787959 , 6.8147035, ..., 6.7986703, 6.7796283,
          6.894189 ],
         [6.774152 , 6.820108 , 6.6923943, ..., 6.789766 , 6.796745 ,
          6.685041 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [7], 'to': [8]}
ms node:
{'name': 'log', 'output': array([[[[6.7279534, 6.8622575, 6.7440214, ..., 6.702256 , 6.791913 ,
          6.7415943],
         [6.8291507, 6.7336597, 6.758034 , ..., 6.84914  , 6.8298416,
          6.673348 ],
         [6.7816243, 6.7219195, 6.8538003, ..., 6.636989 , 6.815331 ,
          6.809384 ],
         ...,
         [6.7868633, 6.784253 , 6.7874827, ..., 6.674352 , 6.814576 ,
                nan],
         [6.748987 , 6.7879577, 6.8147025, ..., 6.798669 , 6.779625 ,
          6.894189 ],
         [6.7741485, 6.8201075, 6.6923923, ..., 6.789765 , 6.796744 ,
          6.685038 ]],

        [[6.7279534, 6.8622575, 6.7440214, ..., 6.702256 , 6.791913 ,
          6.7415943],
         [6.8291507, 6.7336597, 6.758034 , ..., 6.84914  , 6.8298416,
          6.673348 ],
         [6.7816243, 6.7219195, 6.8538003, ..., 6.636989 , 6.815331 ,
          6.809384 ],
         ...,
         [6.7868633, 6.784253 , 6.7874827, ..., 6.674352 , 6.814576 ,
                nan],
         [6.748987 , 6.7879577, 6.8147025, ..., 6.798669 , 6.779625 ,
          6.894189 ],
         [6.7741485, 6.8201075, 6.6923923, ..., 6.789765 , 6.796744 ,
          6.685038 ]],

        [[6.7279534, 6.8622575, 6.7440214, ..., 6.702256 , 6.791913 ,
          6.7415943],
         [6.8291507, 6.7336597, 6.758034 , ..., 6.84914  , 6.8298416,
          6.673348 ],
         [6.7816243, 6.7219195, 6.8538003, ..., 6.636989 , 6.815331 ,
          6.809384 ],
         ...,
         [6.7868633, 6.784253 , 6.7874827, ..., 6.674352 , 6.814576 ,
                nan],
         [6.748987 , 6.7879577, 6.8147025, ..., 6.798669 , 6.779625 ,
          6.894189 ],
         [6.7741485, 6.8201075, 6.6923923, ..., 6.789765 , 6.796744 ,
          6.685038 ]],

        ...,

        [[6.7279534, 6.8622575, 6.7440214, ..., 6.702256 , 6.791913 ,
          6.7415943],
         [6.8291507, 6.7336597, 6.758034 , ..., 6.84914  , 6.8298416,
          6.673348 ],
         [6.7816243, 6.7219195, 6.8538003, ..., 6.636989 , 6.815331 ,
          6.809384 ],
         ...,
         [6.7868633, 6.784253 , 6.7874827, ..., 6.674352 , 6.814576 ,
                nan],
         [6.748987 , 6.7879577, 6.8147025, ..., 6.798669 , 6.779625 ,
          6.894189 ],
         [6.7741485, 6.8201075, 6.6923923, ..., 6.789765 , 6.796744 ,
          6.685038 ]],

        [[6.7279534, 6.8622565, 6.744023 , ..., 6.702257 , 6.7919126,
          6.7415924],
         [6.82915  , 6.7336597, 6.758033 , ..., 6.8491406, 6.82984  ,
          6.67335  ],
         [6.7816243, 6.7219176, 6.8537984, ..., 6.636988 , 6.815332 ,
          6.8093843],
         ...,
         [6.7868614, 6.784253 , 6.7874823, ..., 6.674352 , 6.814576 ,
                nan],
         [6.7489886, 6.787957 , 6.8147006, ..., 6.7986674, 6.7796245,
          6.894191 ],
         [6.774148 , 6.820106 , 6.692393 , ..., 6.7897663, 6.796744 ,
          6.6850376]],

        [[6.7279534, 6.8622565, 6.744023 , ..., 6.702257 , 6.7919126,
          6.7415924],
         [6.82915  , 6.7336597, 6.758033 , ..., 6.8491406, 6.82984  ,
          6.67335  ],
         [6.7816243, 6.7219176, 6.8537984, ..., 6.636988 , 6.815332 ,
          6.8093843],
         ...,
         [6.7868614, 6.784253 , 6.7874823, ..., 6.674352 , 6.814576 ,
                nan],
         [6.7489886, 6.787957 , 6.8147006, ..., 6.7986674, 6.7796245,
          6.894191 ],
         [6.774148 , 6.820106 , 6.692393 , ..., 6.7897663, 6.796744 ,
          6.6850376]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [7], 'to': [8]}
torch node:
{'name': 'log', 'output': array([[[[6.727956 , 6.862259 , 6.7440248, ..., 6.70226  , 6.7919145,
          6.7415967],
         [6.8291516, 6.733662 , 6.758038 , ..., 6.849141 , 6.829844 ,
          6.6733503],
         [6.7816253, 6.7219214, 6.8538003, ..., 6.636991 , 6.815332 ,
          6.809385 ],
         ...,
         [6.7868643, 6.784254 , 6.7874837, ..., 6.674354 , 6.814577 ,
                nan],
         [6.7489905, 6.787959 , 6.8147035, ..., 6.7986703, 6.7796283,
          6.894189 ],
         [6.774152 , 6.820108 , 6.6923943, ..., 6.789766 , 6.796745 ,
          6.6850405]],

        [[6.727956 , 6.862259 , 6.7440248, ..., 6.70226  , 6.7919145,
          6.7415967],
         [6.8291516, 6.733662 , 6.758038 , ..., 6.849141 , 6.829844 ,
          6.6733503],
         [6.7816253, 6.7219214, 6.8538003, ..., 6.636991 , 6.815332 ,
          6.809385 ],
         ...,
         [6.7868643, 6.784254 , 6.7874837, ..., 6.674354 , 6.814577 ,
                nan],
         [6.7489905, 6.787959 , 6.8147035, ..., 6.7986703, 6.7796283,
          6.894189 ],
         [6.774152 , 6.820108 , 6.6923943, ..., 6.789766 , 6.796745 ,
          6.6850405]],

        [[6.727956 , 6.862259 , 6.7440248, ..., 6.70226  , 6.7919145,
          6.7415967],
         [6.8291516, 6.733662 , 6.758038 , ..., 6.849141 , 6.829844 ,
          6.6733503],
         [6.7816253, 6.7219214, 6.8538003, ..., 6.636991 , 6.815332 ,
          6.809385 ],
         ...,
         [6.7868643, 6.784254 , 6.7874837, ..., 6.674354 , 6.814577 ,
                nan],
         [6.7489905, 6.787959 , 6.8147035, ..., 6.7986703, 6.7796283,
          6.894189 ],
         [6.774152 , 6.820108 , 6.6923943, ..., 6.789766 , 6.796745 ,
          6.6850405]],

        ...,

        [[6.727956 , 6.862259 , 6.7440248, ..., 6.70226  , 6.7919145,
          6.7415967],
         [6.8291516, 6.733662 , 6.758038 , ..., 6.849141 , 6.829844 ,
          6.6733503],
         [6.7816253, 6.7219214, 6.8538003, ..., 6.636991 , 6.815332 ,
          6.809385 ],
         ...,
         [6.7868643, 6.784254 , 6.7874837, ..., 6.674354 , 6.814577 ,
                nan],
         [6.7489905, 6.787959 , 6.8147035, ..., 6.7986703, 6.7796283,
          6.894189 ],
         [6.774152 , 6.820108 , 6.6923943, ..., 6.789766 , 6.796745 ,
          6.6850405]],

        [[6.727956 , 6.862259 , 6.7440248, ..., 6.70226  , 6.7919145,
          6.7415967],
         [6.8291516, 6.733662 , 6.758038 , ..., 6.849141 , 6.829844 ,
          6.6733503],
         [6.7816253, 6.7219214, 6.8538003, ..., 6.636991 , 6.815332 ,
          6.809385 ],
         ...,
         [6.7868643, 6.784254 , 6.7874837, ..., 6.674354 , 6.814577 ,
                nan],
         [6.7489905, 6.787959 , 6.8147035, ..., 6.7986703, 6.7796283,
          6.894189 ],
         [6.774152 , 6.820108 , 6.6923943, ..., 6.789766 , 6.796745 ,
          6.6850405]],

        [[6.727956 , 6.862259 , 6.7440248, ..., 6.70226  , 6.7919145,
          6.7415967],
         [6.8291516, 6.733662 , 6.758038 , ..., 6.849141 , 6.829844 ,
          6.6733503],
         [6.7816253, 6.7219214, 6.8538003, ..., 6.636991 , 6.815332 ,
          6.809385 ],
         ...,
         [6.7868643, 6.784254 , 6.7874837, ..., 6.674354 , 6.814577 ,
                nan],
         [6.7489905, 6.787959 , 6.8147035, ..., 6.7986703, 6.7796283,
          6.894189 ],
         [6.774152 , 6.820108 , 6.6923943, ..., 6.789766 , 6.796745 ,
          6.6850405]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [7], 'to': [8]}

generate models:343

analyse output arrays in iter:371

pre layer res:
19:exp
{'name': 'exp', 'output': array([[[[0.4066489,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ..., 0.7653371,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf]],

        [[0.4066489,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ..., 0.7653371,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf]],

        [[0.4066489,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ..., 0.7653371,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf]],

        ...,

        [[1.       ,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ..., 1.       ,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf]],

        [[1.       ,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ..., 1.       ,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf]],

        [[1.       ,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ..., 1.       ,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         ...,
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf],
         [      inf,       inf,       inf, ...,       inf,       inf,
                inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [9], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [19], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [19], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [19], 'to': []}

pre layer res:
4:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[  9.19983 , 216.87405 ,  76.91115 , ..., 148.36775 ,
          123.03854 , 192.1097  ],
         [210.12328 , 104.12403 , 169.70508 , ...,  49.61939 ,
           17.433945, 128.33533 ],
         [173.67879 ,  26.599863,  24.287968, ...,   0.      ,
            0.      , 287.81952 ],
         ...,
         [ 61.091812,  84.50878 ,  43.46241 , ..., 145.39801 ,
           87.01412 , 167.09676 ],
         [  0.      , 194.2929  ,  27.013548, ..., 149.43546 ,
          198.26141 , 173.09248 ],
         [ 94.9595  ,  53.67071 , 105.91932 , ..., 122.11633 ,
          112.29883 , 109.0684  ]],

        [[  9.19983 , 216.87405 ,  76.91115 , ..., 148.36775 ,
          123.03854 , 192.1097  ],
         [210.12328 , 104.12403 , 169.70508 , ...,  49.61939 ,
           17.433945, 128.33533 ],
         [173.67879 ,  26.599863,  24.287968, ...,   0.      ,
            0.      , 287.81952 ],
         ...,
         [ 61.091812,  84.50878 ,  43.46241 , ..., 145.39801 ,
           87.01412 , 167.09676 ],
         [  0.      , 194.2929  ,  27.013548, ..., 149.43546 ,
          198.26141 , 173.09248 ],
         [ 94.9595  ,  53.67071 , 105.91932 , ..., 122.11633 ,
          112.29883 , 109.0684  ]],

        [[  9.19983 , 216.87405 ,  76.91115 , ..., 148.36775 ,
          123.03854 , 192.1097  ],
         [210.12328 , 104.12403 , 169.70508 , ...,  49.61939 ,
           17.433945, 128.33533 ],
         [173.67879 ,  26.599863,  24.287968, ...,   0.      ,
            0.      , 287.81952 ],
         ...,
         [ 61.091812,  84.50878 ,  43.46241 , ..., 145.39801 ,
           87.01412 , 167.09676 ],
         [  0.      , 194.2929  ,  27.013548, ..., 149.43546 ,
          198.26141 , 173.09248 ],
         [ 94.9595  ,  53.67071 , 105.91932 , ..., 122.11633 ,
          112.29883 , 109.0684  ]],

        ...,

        [[  9.19983 , 216.87405 ,  76.91115 , ..., 148.36775 ,
          123.03854 , 192.1097  ],
         [210.12328 , 104.12403 , 169.70508 , ...,  49.61939 ,
           17.433945, 128.33533 ],
         [173.67879 ,  26.599863,  24.287968, ...,   0.      ,
            0.      , 287.81952 ],
         ...,
         [ 61.091812,  84.50878 ,  43.46241 , ..., 145.39801 ,
           87.01412 , 167.09676 ],
         [  0.      , 194.2929  ,  27.013548, ..., 149.43546 ,
          198.26141 , 173.09248 ],
         [ 94.9595  ,  53.67071 , 105.91932 , ..., 122.11633 ,
          112.29883 , 109.0684  ]],

        [[  9.19983 , 216.87405 ,  76.91115 , ..., 148.36775 ,
          123.03854 , 192.1097  ],
         [210.12328 , 104.12403 , 169.70508 , ...,  49.61939 ,
           17.433945, 128.33533 ],
         [173.67879 ,  26.599863,  24.287968, ...,   0.      ,
            0.      , 287.81952 ],
         ...,
         [ 61.091812,  84.50878 ,  43.46241 , ..., 145.39801 ,
           87.01412 , 167.09676 ],
         [  0.      , 194.2929  ,  27.013548, ..., 149.43546 ,
          198.26141 , 173.09248 ],
         [ 94.9595  ,  53.67071 , 105.91932 , ..., 122.11633 ,
          112.29883 , 109.0684  ]],

        [[  9.19983 , 216.87405 ,  76.91115 , ..., 148.36775 ,
          123.03854 , 192.1097  ],
         [210.12328 , 104.12403 , 169.70508 , ...,  49.61939 ,
           17.433945, 128.33533 ],
         [173.67879 ,  26.599863,  24.287968, ...,   0.      ,
            0.      , 287.81952 ],
         ...,
         [ 61.091812,  84.50878 ,  43.46241 , ..., 145.39801 ,
           87.01412 , 167.09676 ],
         [  0.      , 194.2929  ,  27.013548, ..., 149.43546 ,
          198.26141 , 173.09248 ],
         [ 94.9595  ,  53.67071 , 105.91932 , ..., 122.11633 ,
          112.29883 , 109.0684  ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [3], 'to': [13]}
tf node:
{'name': 'cos', 'output': array([[[[-0.9748057 , -0.99458015,  0.05783964, ..., -0.7564701 ,
          -0.8695874 , -0.89041346],
         [-0.9346823 , -0.8998052 ,  0.9982556 , ...,  0.79844165,
           0.15456298, -0.8915811 ],
         [-0.6284859 ,  0.10348888,  0.6639007 , ...,  1.        ,
           1.        ,  0.35581988],
         ...,
         [-0.16843781, -0.9510377 ,  0.8678753 , ...,  0.63348436,
           0.5812988 , -0.82963353],
         [ 1.        ,  0.8842774 , -0.3050685 , ...,  0.20826848,
          -0.94239515, -0.9538807 ],
         [ 0.7572373 , -0.96544874,  0.62565064, ..., -0.9187946 ,
           0.6977767 , -0.6314727 ]],

        [[-0.9748057 , -0.99458015,  0.05783964, ..., -0.7564701 ,
          -0.8695874 , -0.89041346],
         [-0.9346823 , -0.8998052 ,  0.9982556 , ...,  0.79844165,
           0.15456298, -0.8915811 ],
         [-0.6284859 ,  0.10348888,  0.6639007 , ...,  1.        ,
           1.        ,  0.35581988],
         ...,
         [-0.16843781, -0.9510377 ,  0.8678753 , ...,  0.63348436,
           0.5812988 , -0.82963353],
         [ 1.        ,  0.8842774 , -0.3050685 , ...,  0.20826848,
          -0.94239515, -0.9538807 ],
         [ 0.7572373 , -0.96544874,  0.62565064, ..., -0.9187946 ,
           0.6977767 , -0.6314727 ]],

        [[-0.9748057 , -0.99458015,  0.05783964, ..., -0.7564701 ,
          -0.8695874 , -0.89041346],
         [-0.9346823 , -0.8998052 ,  0.9982556 , ...,  0.79844165,
           0.15456298, -0.8915811 ],
         [-0.6284859 ,  0.10348888,  0.6639007 , ...,  1.        ,
           1.        ,  0.35581988],
         ...,
         [-0.16843781, -0.9510377 ,  0.8678753 , ...,  0.63348436,
           0.5812988 , -0.82963353],
         [ 1.        ,  0.8842774 , -0.3050685 , ...,  0.20826848,
          -0.94239515, -0.9538807 ],
         [ 0.7572373 , -0.96544874,  0.62565064, ..., -0.9187946 ,
           0.6977767 , -0.6314727 ]],

        ...,

        [[-0.9748057 , -0.99458015,  0.05783964, ..., -0.7564701 ,
          -0.8695874 , -0.89041346],
         [-0.9346823 , -0.8998052 ,  0.9982556 , ...,  0.79844165,
           0.15456298, -0.8915811 ],
         [-0.6284859 ,  0.10348888,  0.6639007 , ...,  1.        ,
           1.        ,  0.35581988],
         ...,
         [-0.16843781, -0.9510377 ,  0.8678753 , ...,  0.63348436,
           0.5812988 , -0.82963353],
         [ 1.        ,  0.8842774 , -0.3050685 , ...,  0.20826848,
          -0.94239515, -0.9538807 ],
         [ 0.7572373 , -0.96544874,  0.62565064, ..., -0.9187946 ,
           0.6977767 , -0.6314727 ]],

        [[-0.9748057 , -0.99458015,  0.05783964, ..., -0.7564701 ,
          -0.8695874 , -0.89041346],
         [-0.9346823 , -0.8998052 ,  0.9982556 , ...,  0.79844165,
           0.15456298, -0.8915811 ],
         [-0.6284859 ,  0.10348888,  0.6639007 , ...,  1.        ,
           1.        ,  0.35581988],
         ...,
         [-0.16843781, -0.9510377 ,  0.8678753 , ...,  0.63348436,
           0.5812988 , -0.82963353],
         [ 1.        ,  0.8842774 , -0.3050685 , ...,  0.20826848,
          -0.94239515, -0.9538807 ],
         [ 0.7572373 , -0.96544874,  0.62565064, ..., -0.9187946 ,
           0.6977767 , -0.6314727 ]],

        [[-0.9748057 , -0.99458015,  0.05783964, ..., -0.7564701 ,
          -0.8695874 , -0.89041346],
         [-0.9346823 , -0.8998052 ,  0.9982556 , ...,  0.79844165,
           0.15456298, -0.8915811 ],
         [-0.6284859 ,  0.10348888,  0.6639007 , ...,  1.        ,
           1.        ,  0.35581988],
         ...,
         [-0.16843781, -0.9510377 ,  0.8678753 , ...,  0.63348436,
           0.5812988 , -0.82963353],
         [ 1.        ,  0.8842774 , -0.3050685 , ...,  0.20826848,
          -0.94239515, -0.9538807 ],
         [ 0.7572373 , -0.96544874,  0.62565064, ..., -0.9187946 ,
           0.6977767 , -0.6314727 ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [4], 'to': [5, 15]}
ms node:
{'name': 'cos', 'output': array([[[[-0.9748057 , -0.99458015,  0.05783964, ..., -0.7564701 ,
          -0.8695874 , -0.89041346],
         [-0.9346823 , -0.8998052 ,  0.9982556 , ...,  0.79844165,
           0.15456298, -0.8915811 ],
         [-0.62848586,  0.10348888,  0.6639007 , ...,  1.        ,
           1.        ,  0.3558199 ],
         ...,
         [-0.1684378 , -0.9510377 ,  0.8678752 , ...,  0.63348436,
           0.5812988 , -0.82963353],
         [ 1.        ,  0.8842774 , -0.3050685 , ...,  0.20826848,
          -0.94239515, -0.9538807 ],
         [ 0.75723726, -0.96544874,  0.6256506 , ..., -0.9187946 ,
           0.6977767 , -0.63147265]],

        [[-0.9748057 , -0.99458015,  0.05783964, ..., -0.7564701 ,
          -0.8695874 , -0.89041346],
         [-0.9346823 , -0.8998052 ,  0.9982556 , ...,  0.79844165,
           0.15456298, -0.8915811 ],
         [-0.62848586,  0.10348888,  0.6639007 , ...,  1.        ,
           1.        ,  0.3558199 ],
         ...,
         [-0.1684378 , -0.9510377 ,  0.8678752 , ...,  0.63348436,
           0.5812988 , -0.82963353],
         [ 1.        ,  0.8842774 , -0.3050685 , ...,  0.20826848,
          -0.94239515, -0.9538807 ],
         [ 0.75723726, -0.96544874,  0.6256506 , ..., -0.9187946 ,
           0.6977767 , -0.63147265]],

        [[-0.9748057 , -0.99458015,  0.05783964, ..., -0.7564701 ,
          -0.8695874 , -0.89041346],
         [-0.9346823 , -0.8998052 ,  0.9982556 , ...,  0.79844165,
           0.15456298, -0.8915811 ],
         [-0.62848586,  0.10348888,  0.6639007 , ...,  1.        ,
           1.        ,  0.3558199 ],
         ...,
         [-0.1684378 , -0.9510377 ,  0.8678752 , ...,  0.63348436,
           0.5812988 , -0.82963353],
         [ 1.        ,  0.8842774 , -0.3050685 , ...,  0.20826848,
          -0.94239515, -0.9538807 ],
         [ 0.75723726, -0.96544874,  0.6256506 , ..., -0.9187946 ,
           0.6977767 , -0.63147265]],

        ...,

        [[-0.9748057 , -0.99458015,  0.05783964, ..., -0.7564701 ,
          -0.8695874 , -0.89041346],
         [-0.9346823 , -0.8998052 ,  0.9982556 , ...,  0.79844165,
           0.15456298, -0.8915811 ],
         [-0.62848586,  0.10348888,  0.6639007 , ...,  1.        ,
           1.        ,  0.3558199 ],
         ...,
         [-0.1684378 , -0.9510377 ,  0.8678752 , ...,  0.63348436,
           0.5812988 , -0.82963353],
         [ 1.        ,  0.8842774 , -0.3050685 , ...,  0.20826848,
          -0.94239515, -0.9538807 ],
         [ 0.75723726, -0.96544874,  0.6256506 , ..., -0.9187946 ,
           0.6977767 , -0.63147265]],

        [[-0.9748057 , -0.9945786 ,  0.05783202, ..., -0.75651   ,
          -0.8696025 , -0.890344  ],
         [-0.9347257 , -0.89980185,  0.9982556 , ...,  0.79844165,
           0.15454791, -0.8915328 ],
         [-0.6284384 ,  0.10347939,  0.66390204, ...,  1.        ,
           1.        ,  0.35576287],
         ...,
         [-0.16842276, -0.9510377 ,  0.8678771 , ...,  0.63351977,
           0.58127403, -0.82959944],
         [ 1.        ,  0.88424176, -0.3050685 , ...,  0.20819385,
          -0.9424513 , -0.953899  ],
         [ 0.75721735, -0.9654398 ,  0.625603  , ..., -0.91883975,
           0.6977767 , -0.6314963 ]],

        [[-0.9748057 , -0.9945786 ,  0.05783202, ..., -0.75651   ,
          -0.8696025 , -0.890344  ],
         [-0.9347257 , -0.89980185,  0.9982556 , ...,  0.79844165,
           0.15454791, -0.8915328 ],
         [-0.6284384 ,  0.10347939,  0.66390204, ...,  1.        ,
           1.        ,  0.35576287],
         ...,
         [-0.16842276, -0.9510377 ,  0.8678771 , ...,  0.63351977,
           0.58127403, -0.82959944],
         [ 1.        ,  0.88424176, -0.3050685 , ...,  0.20819385,
          -0.9424513 , -0.953899  ],
         [ 0.75721735, -0.9654398 ,  0.625603  , ..., -0.91883975,
           0.6977767 , -0.6314963 ]]]], dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [4], 'to': [5, 15]}
torch node:
{'name': 'cos', 'output': array([[[[-0.9748057 , -0.99458015,  0.05783964, ..., -0.7564701 ,
          -0.8695874 , -0.89041346],
         [-0.9346823 , -0.8998052 ,  0.9982556 , ...,  0.79844165,
           0.15456298, -0.8915811 ],
         [-0.62848586,  0.10348888,  0.6639007 , ...,  1.        ,
           1.        ,  0.3558199 ],
         ...,
         [-0.16843781, -0.9510377 ,  0.8678752 , ...,  0.63348436,
           0.5812988 , -0.82963353],
         [ 1.        ,  0.8842774 , -0.3050685 , ...,  0.20826848,
          -0.94239515, -0.9538807 ],
         [ 0.75723726, -0.96544874,  0.6256506 , ..., -0.9187946 ,
           0.6977767 , -0.63147265]],

        [[-0.9748057 , -0.99458015,  0.05783964, ..., -0.7564701 ,
          -0.8695874 , -0.89041346],
         [-0.9346823 , -0.8998052 ,  0.9982556 , ...,  0.79844165,
           0.15456298, -0.8915811 ],
         [-0.62848586,  0.10348888,  0.6639007 , ...,  1.        ,
           1.        ,  0.3558199 ],
         ...,
         [-0.16843781, -0.9510377 ,  0.8678752 , ...,  0.63348436,
           0.5812988 , -0.82963353],
         [ 1.        ,  0.8842774 , -0.3050685 , ...,  0.20826848,
          -0.94239515, -0.9538807 ],
         [ 0.75723726, -0.96544874,  0.6256506 , ..., -0.9187946 ,
           0.6977767 , -0.63147265]],

        [[-0.9748057 , -0.99458015,  0.05783964, ..., -0.7564701 ,
          -0.8695874 , -0.89041346],
         [-0.9346823 , -0.8998052 ,  0.9982556 , ...,  0.79844165,
           0.15456298, -0.8915811 ],
         [-0.62848586,  0.10348888,  0.6639007 , ...,  1.        ,
           1.        ,  0.3558199 ],
         ...,
         [-0.16843781, -0.9510377 ,  0.8678752 , ...,  0.63348436,
           0.5812988 , -0.82963353],
         [ 1.        ,  0.8842774 , -0.3050685 , ...,  0.20826848,
          -0.94239515, -0.9538807 ],
         [ 0.75723726, -0.96544874,  0.6256506 , ..., -0.9187946 ,
           0.6977767 , -0.63147265]],

        ...,

        [[-0.9748057 , -0.99458015,  0.05783964, ..., -0.7564701 ,
          -0.8695874 , -0.89041346],
         [-0.9346823 , -0.8998052 ,  0.9982556 , ...,  0.79844165,
           0.15456298, -0.8915811 ],
         [-0.62848586,  0.10348888,  0.6639007 , ...,  1.        ,
           1.        ,  0.3558199 ],
         ...,
         [-0.16843781, -0.9510377 ,  0.8678752 , ...,  0.63348436,
           0.5812988 , -0.82963353],
         [ 1.        ,  0.8842774 , -0.3050685 , ...,  0.20826848,
          -0.94239515, -0.9538807 ],
         [ 0.75723726, -0.96544874,  0.6256506 , ..., -0.9187946 ,
           0.6977767 , -0.63147265]],

        [[-0.9748057 , -0.99458015,  0.05783964, ..., -0.7564701 ,
          -0.8695874 , -0.89041346],
         [-0.9346823 , -0.8998052 ,  0.9982556 , ...,  0.79844165,
           0.15456298, -0.8915811 ],
         [-0.62848586,  0.10348888,  0.6639007 , ...,  1.        ,
           1.        ,  0.3558199 ],
         ...,
         [-0.16843781, -0.9510377 ,  0.8678752 , ...,  0.63348436,
           0.5812988 , -0.82963353],
         [ 1.        ,  0.8842774 , -0.3050685 , ...,  0.20826848,
          -0.94239515, -0.9538807 ],
         [ 0.75723726, -0.96544874,  0.6256506 , ..., -0.9187946 ,
           0.6977767 , -0.63147265]],

        [[-0.9748057 , -0.99458015,  0.05783964, ..., -0.7564701 ,
          -0.8695874 , -0.89041346],
         [-0.9346823 , -0.8998052 ,  0.9982556 , ...,  0.79844165,
           0.15456298, -0.8915811 ],
         [-0.62848586,  0.10348888,  0.6639007 , ...,  1.        ,
           1.        ,  0.3558199 ],
         ...,
         [-0.16843781, -0.9510377 ,  0.8678752 , ...,  0.63348436,
           0.5812988 , -0.82963353],
         [ 1.        ,  0.8842774 , -0.3050685 , ...,  0.20826848,
          -0.94239515, -0.9538807 ],
         [ 0.75723726, -0.96544874,  0.6256506 , ..., -0.9187946 ,
           0.6977767 , -0.63147265]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [4], 'to': [5, 15]}

generate models:355

analyse output arrays in iter:376

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [19], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [9], 'to': []}

generate models:360

analyse the exceptions in iter:385
torch exception:
{'id': 26, 'name': 'flatten', 'frame_work': 'torch', 'input_datas': [tensor([0.])]}
Dimension out of range (expected to be in range of [-1, 0], but got 1)

generate models:368

analyse output arrays in iter:387

pre layer res:
20:add
{'name': 'add', 'output': array([[[[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf]],

        ...,

        [[1.6121032e+06, 7.4930588e+05, 1.8834079e+06, ...,
          3.8904456e+05, 9.3158496e+03, 1.7758874e+06],
         [2.4433209e+05, 2.2144030e+06, 2.2622368e+06, ...,
          4.6900479e+03, 6.0260600e+05, 2.3255078e+06],
         [8.7649594e+05, 1.6240206e+06, 2.8406242e+06, ...,
          2.8876262e+06, 1.9461064e+06, 1.1642156e+04],
         ...,
         [7.2309881e+05, 7.4090225e+05, 2.3803980e+06, ...,
          1.1461176e+06, 1.0196309e+06, 9.4320840e+03],
         [4.8558750e+06, 1.2721102e+06, 3.0620965e+06, ...,
          3.0432125e+06, 6.8808038e+05, 1.5986061e+06],
         [1.6757259e+06, 1.0110287e+06, 2.6392818e+06, ...,
          4.0557648e+06, 1.7581301e+06, 2.9681278e+06]],

        [[4.2193115e+06, 1.8489656e+06, 2.0836342e+06, ...,
          3.7275835e+06, 1.2677861e+06, 2.1876828e+06],
         [6.6039038e+05, 1.2612468e+05, 2.1145220e+06, ...,
          1.9152032e+06, 1.6119394e+06, 3.6302912e+06],
         [7.5589625e+05, 7.9345350e+05, 3.8525200e+06, ...,
          1.5064479e+06, 1.1086024e+06, 4.3271355e+06],
         ...,
         [1.1393050e+06, 9.5872631e+05, 1.8248569e+06, ...,
          2.0901422e+06, 3.9832248e+06, 2.0027394e+05],
         [3.1163602e+06, 1.7496044e+06, 1.1733616e+06, ...,
          1.4103814e+06, 1.1566352e+06, 1.1685109e+06],
         [2.0304788e+06, 2.0857885e+06, 1.1526450e+06, ...,
          2.0514973e+05, 1.1925171e+06, 4.2381750e+06]],

        [[2.0766994e+06, 1.3164521e+06, 1.7061584e+06, ...,
          2.1295608e+06, 4.0323212e+05, 3.5372748e+06],
         [2.0189062e+05, 2.0081665e+06, 1.1053524e+04, ...,
          3.0612318e+06, 3.4730920e+06, 4.0732668e+06],
         [2.4040128e+06, 1.9957216e+06, 2.2743958e+06, ...,
          9.1326600e+05, 3.2424908e+06, 2.5477889e+05],
         ...,
         [1.9059592e+06, 1.4822658e+05, 2.4253575e+06, ...,
          2.4271730e+06, 4.2313935e+06, 2.0852529e+06],
         [1.1926761e+06, 1.1855239e+06, 1.7010850e+06, ...,
          1.8750969e+06, 1.5438170e+06, 1.4284704e+06],
         [1.3137885e+06, 6.8013200e+05, 7.2145362e+05, ...,
          4.4230845e+06, 1.5826249e+04, 3.7553258e+06]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [13, 23], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [20], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [20], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [20], 'to': []}

generate models:370

analyse output arrays in iter:424

pre layer res:
0:conv2d
{'name': 'conv2d', 'output': array([[[[ 0.10881299, -1.3069404 ,  0.7962532 , ...,  2.4226382 ,
           0.495659  , -1.5678986 ],
         [-1.3002094 , -3.560759  ,  1.6533034 , ..., -0.22059116,
          -1.5983965 , -3.6996741 ],
         [ 0.01236671, -0.7835672 , -0.6997069 , ..., -0.6336762 ,
          -2.8640518 , -1.2182078 ],
         ...,
         [ 1.9764259 ,  1.1688597 ,  1.8699257 , ..., -0.04706821,
           0.6550077 , -2.785224  ],
         [ 2.86836   , -2.5735006 , -0.11480707, ..., -1.1935699 ,
           1.9416842 , -3.2087235 ],
         [ 2.1026995 , -0.33860904, -0.6230205 , ...,  2.75739   ,
           1.2929716 ,  0.4329445 ]],

        [[ 0.10881299, -1.3069404 ,  0.7962532 , ...,  2.4226382 ,
           0.495659  , -1.5678986 ],
         [-1.3002094 , -3.560759  ,  1.6533034 , ..., -0.22059116,
          -1.5983965 , -3.6996741 ],
         [ 0.01236671, -0.7835672 , -0.6997069 , ..., -0.6336762 ,
          -2.8640518 , -1.2182078 ],
         ...,
         [ 1.9764259 ,  1.1688597 ,  1.8699257 , ..., -0.04706821,
           0.6550077 , -2.785224  ],
         [ 2.86836   , -2.5735006 , -0.11480707, ..., -1.1935699 ,
           1.9416842 , -3.2087235 ],
         [ 2.1026995 , -0.33860904, -0.6230205 , ...,  2.75739   ,
           1.2929716 ,  0.4329445 ]],

        [[ 0.10881299, -1.3069404 ,  0.7962532 , ...,  2.4226382 ,
           0.495659  , -1.5678986 ],
         [-1.3002094 , -3.560759  ,  1.6533034 , ..., -0.22059116,
          -1.5983965 , -3.6996741 ],
         [ 0.01236671, -0.7835672 , -0.6997069 , ..., -0.6336762 ,
          -2.8640518 , -1.2182078 ],
         ...,
         [ 1.9764259 ,  1.1688597 ,  1.8699257 , ..., -0.04706821,
           0.6550077 , -2.785224  ],
         [ 2.86836   , -2.5735006 , -0.11480707, ..., -1.1935699 ,
           1.9416842 , -3.2087235 ],
         [ 2.1026995 , -0.33860904, -0.6230205 , ...,  2.75739   ,
           1.2929716 ,  0.4329445 ]],

        ...,

        [[ 0.10881299, -1.3069404 ,  0.7962532 , ...,  2.4226382 ,
           0.495659  , -1.5678986 ],
         [-1.3002094 , -3.560759  ,  1.6533034 , ..., -0.22059116,
          -1.5983965 , -3.6996741 ],
         [ 0.01236671, -0.7835672 , -0.6997069 , ..., -0.6336762 ,
          -2.8640518 , -1.2182078 ],
         ...,
         [ 1.9764259 ,  1.1688597 ,  1.8699257 , ..., -0.04706821,
           0.6550077 , -2.785224  ],
         [ 2.86836   , -2.5735006 , -0.11480707, ..., -1.1935699 ,
           1.9416842 , -3.2087235 ],
         [ 2.1026995 , -0.33860904, -0.6230205 , ...,  2.75739   ,
           1.2929716 ,  0.4329445 ]],

        [[ 0.10881299, -1.3069404 ,  0.7962532 , ...,  2.4226382 ,
           0.495659  , -1.5678986 ],
         [-1.3002094 , -3.560759  ,  1.6533034 , ..., -0.22059116,
          -1.5983965 , -3.6996741 ],
         [ 0.01236671, -0.7835672 , -0.6997069 , ..., -0.6336762 ,
          -2.8640518 , -1.2182078 ],
         ...,
         [ 1.9764259 ,  1.1688597 ,  1.8699257 , ..., -0.04706821,
           0.6550077 , -2.785224  ],
         [ 2.86836   , -2.5735006 , -0.11480707, ..., -1.1935699 ,
           1.9416842 , -3.2087235 ],
         [ 2.1026995 , -0.33860904, -0.6230205 , ...,  2.75739   ,
           1.2929716 ,  0.4329445 ]],

        [[ 0.10881299, -1.3069404 ,  0.7962532 , ...,  2.4226382 ,
           0.495659  , -1.5678986 ],
         [-1.3002094 , -3.560759  ,  1.6533034 , ..., -0.22059116,
          -1.5983965 , -3.6996741 ],
         [ 0.01236671, -0.7835672 , -0.6997069 , ..., -0.6336762 ,
          -2.8640518 , -1.2182078 ],
         ...,
         [ 1.9764259 ,  1.1688597 ,  1.8699257 , ..., -0.04706821,
           0.6550077 , -2.785224  ],
         [ 2.86836   , -2.5735006 , -0.11480707, ..., -1.1935699 ,
           1.9416842 , -3.2087235 ],
         [ 2.1026995 , -0.33860904, -0.6230205 , ...,  2.75739   ,
           1.2929716 ,  0.4329445 ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [], 'to': [12]}
tf node:
{'name': 'log', 'output': array([[[[-2.2181246 ,         nan, -0.22783805, ...,  0.8848571 ,
          -0.7018671 ,         nan],
         [        nan,         nan,  0.5027753 , ...,         nan,
                  nan,         nan],
         [-4.392747  ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [ 0.6812901 ,  0.15602867,  0.6258987 , ...,         nan,
          -0.42310825,         nan],
         [ 1.0537405 ,         nan,         nan, ...,         nan,
           0.66355574,         nan],
         [ 0.743222  ,         nan,         nan, ...,  1.0142846 ,
           0.25694314, -0.8371457 ]],

        [[-2.2181246 ,         nan, -0.22783805, ...,  0.8848571 ,
          -0.7018671 ,         nan],
         [        nan,         nan,  0.5027753 , ...,         nan,
                  nan,         nan],
         [-4.392747  ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [ 0.6812901 ,  0.15602867,  0.6258987 , ...,         nan,
          -0.42310825,         nan],
         [ 1.0537405 ,         nan,         nan, ...,         nan,
           0.66355574,         nan],
         [ 0.743222  ,         nan,         nan, ...,  1.0142846 ,
           0.25694314, -0.8371457 ]],

        [[-2.2181246 ,         nan, -0.22783805, ...,  0.8848571 ,
          -0.7018671 ,         nan],
         [        nan,         nan,  0.5027753 , ...,         nan,
                  nan,         nan],
         [-4.392747  ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [ 0.6812901 ,  0.15602867,  0.6258987 , ...,         nan,
          -0.42310825,         nan],
         [ 1.0537405 ,         nan,         nan, ...,         nan,
           0.66355574,         nan],
         [ 0.743222  ,         nan,         nan, ...,  1.0142846 ,
           0.25694314, -0.8371457 ]],

        ...,

        [[-2.2181246 ,         nan, -0.22783805, ...,  0.8848571 ,
          -0.7018671 ,         nan],
         [        nan,         nan,  0.5027753 , ...,         nan,
                  nan,         nan],
         [-4.392747  ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [ 0.6812901 ,  0.15602867,  0.6258987 , ...,         nan,
          -0.42310825,         nan],
         [ 1.0537405 ,         nan,         nan, ...,         nan,
           0.66355574,         nan],
         [ 0.743222  ,         nan,         nan, ...,  1.0142846 ,
           0.25694314, -0.8371457 ]],

        [[-2.2181246 ,         nan, -0.22783805, ...,  0.8848571 ,
          -0.7018671 ,         nan],
         [        nan,         nan,  0.5027753 , ...,         nan,
                  nan,         nan],
         [-4.392747  ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [ 0.6812901 ,  0.15602867,  0.6258987 , ...,         nan,
          -0.42310825,         nan],
         [ 1.0537405 ,         nan,         nan, ...,         nan,
           0.66355574,         nan],
         [ 0.743222  ,         nan,         nan, ...,  1.0142846 ,
           0.25694314, -0.8371457 ]],

        [[-2.2181246 ,         nan, -0.22783805, ...,  0.8848571 ,
          -0.7018671 ,         nan],
         [        nan,         nan,  0.5027753 , ...,         nan,
                  nan,         nan],
         [-4.392747  ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [ 0.6812901 ,  0.15602867,  0.6258987 , ...,         nan,
          -0.42310825,         nan],
         [ 1.0537405 ,         nan,         nan, ...,         nan,
           0.66355574,         nan],
         [ 0.743222  ,         nan,         nan, ...,  1.0142846 ,
           0.25694314, -0.8371457 ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [0], 'to': [15]}
ms node:
{'name': 'log', 'output': array([[[[-2.2181256 ,         nan, -0.22784045, ...,  0.8848556 ,
          -0.70186853,         nan],
         [        nan,         nan,  0.5027729 , ...,         nan,
                  nan,         nan],
         [-4.3927493 ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [ 0.68128866,  0.1560272 ,  0.6258987 , ...,         nan,
          -0.42310545,         nan],
         [ 1.0537434 ,         nan,         nan, ...,         nan,
           0.6635543 ,         nan],
         [ 0.7432254 ,         nan,         nan, ...,  1.0142875 ,
           0.25694597, -0.8371467 ]],

        [[-2.2181256 ,         nan, -0.22784045, ...,  0.8848556 ,
          -0.70186853,         nan],
         [        nan,         nan,  0.5027729 , ...,         nan,
                  nan,         nan],
         [-4.3927493 ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [ 0.68128866,  0.1560272 ,  0.6258987 , ...,         nan,
          -0.42310545,         nan],
         [ 1.0537434 ,         nan,         nan, ...,         nan,
           0.6635543 ,         nan],
         [ 0.7432254 ,         nan,         nan, ...,  1.0142875 ,
           0.25694597, -0.8371467 ]],

        [[-2.2181256 ,         nan, -0.22784045, ...,  0.8848556 ,
          -0.70186853,         nan],
         [        nan,         nan,  0.5027729 , ...,         nan,
                  nan,         nan],
         [-4.3927493 ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [ 0.68128866,  0.1560272 ,  0.6258987 , ...,         nan,
          -0.42310545,         nan],
         [ 1.0537434 ,         nan,         nan, ...,         nan,
           0.6635543 ,         nan],
         [ 0.7432254 ,         nan,         nan, ...,  1.0142875 ,
           0.25694597, -0.8371467 ]],

        ...,

        [[-2.2181256 ,         nan, -0.22784045, ...,  0.8848556 ,
          -0.70186853,         nan],
         [        nan,         nan,  0.5027729 , ...,         nan,
                  nan,         nan],
         [-4.3927493 ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [ 0.68128866,  0.1560272 ,  0.6258987 , ...,         nan,
          -0.42310545,         nan],
         [ 1.0537434 ,         nan,         nan, ...,         nan,
           0.6635543 ,         nan],
         [ 0.7432254 ,         nan,         nan, ...,  1.0142875 ,
           0.25694597, -0.8371467 ]],

        [[-2.2181256 ,         nan, -0.22784045, ...,  0.8848556 ,
          -0.70186853,         nan],
         [        nan,         nan,  0.5027729 , ...,         nan,
                  nan,         nan],
         [-4.3927493 ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [ 0.68128866,  0.1560272 ,  0.6258987 , ...,         nan,
          -0.42310545,         nan],
         [ 1.0537434 ,         nan,         nan, ...,         nan,
           0.6635543 ,         nan],
         [ 0.7432254 ,         nan,         nan, ...,  1.0142875 ,
           0.25694597, -0.8371467 ]],

        [[-2.2181256 ,         nan, -0.22784045, ...,  0.8848556 ,
          -0.70186853,         nan],
         [        nan,         nan,  0.5027729 , ...,         nan,
                  nan,         nan],
         [-4.3927493 ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [ 0.68128866,  0.1560272 ,  0.6258987 , ...,         nan,
          -0.42310545,         nan],
         [ 1.0537434 ,         nan,         nan, ...,         nan,
           0.6635543 ,         nan],
         [ 0.7432254 ,         nan,         nan, ...,  1.0142875 ,
           0.25694597, -0.8371467 ]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [0], 'to': [15]}
torch node:
{'name': 'log', 'output': array([[[[-2.2181246 ,         nan, -0.22783805, ...,  0.8848571 ,
          -0.7018671 ,         nan],
         [        nan,         nan,  0.5027753 , ...,         nan,
                  nan,         nan],
         [-4.392747  ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [ 0.6812901 ,  0.15602867,  0.6258987 , ...,         nan,
          -0.42310825,         nan],
         [ 1.0537405 ,         nan,         nan, ...,         nan,
           0.66355574,         nan],
         [ 0.743222  ,         nan,         nan, ...,  1.0142846 ,
           0.25694314, -0.8371457 ]],

        [[-2.2181246 ,         nan, -0.22783805, ...,  0.8848571 ,
          -0.7018671 ,         nan],
         [        nan,         nan,  0.5027753 , ...,         nan,
                  nan,         nan],
         [-4.392747  ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [ 0.6812901 ,  0.15602867,  0.6258987 , ...,         nan,
          -0.42310825,         nan],
         [ 1.0537405 ,         nan,         nan, ...,         nan,
           0.66355574,         nan],
         [ 0.743222  ,         nan,         nan, ...,  1.0142846 ,
           0.25694314, -0.8371457 ]],

        [[-2.2181246 ,         nan, -0.22783805, ...,  0.8848571 ,
          -0.7018671 ,         nan],
         [        nan,         nan,  0.5027753 , ...,         nan,
                  nan,         nan],
         [-4.392747  ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [ 0.6812901 ,  0.15602867,  0.6258987 , ...,         nan,
          -0.42310825,         nan],
         [ 1.0537405 ,         nan,         nan, ...,         nan,
           0.66355574,         nan],
         [ 0.743222  ,         nan,         nan, ...,  1.0142846 ,
           0.25694314, -0.8371457 ]],

        ...,

        [[-2.2181246 ,         nan, -0.22783805, ...,  0.8848571 ,
          -0.7018671 ,         nan],
         [        nan,         nan,  0.5027753 , ...,         nan,
                  nan,         nan],
         [-4.392747  ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [ 0.6812901 ,  0.15602867,  0.6258987 , ...,         nan,
          -0.42310825,         nan],
         [ 1.0537405 ,         nan,         nan, ...,         nan,
           0.66355574,         nan],
         [ 0.743222  ,         nan,         nan, ...,  1.0142846 ,
           0.25694314, -0.8371457 ]],

        [[-2.2181246 ,         nan, -0.22783805, ...,  0.8848571 ,
          -0.7018671 ,         nan],
         [        nan,         nan,  0.5027753 , ...,         nan,
                  nan,         nan],
         [-4.392747  ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [ 0.6812901 ,  0.15602867,  0.6258987 , ...,         nan,
          -0.42310825,         nan],
         [ 1.0537405 ,         nan,         nan, ...,         nan,
           0.66355574,         nan],
         [ 0.743222  ,         nan,         nan, ...,  1.0142846 ,
           0.25694314, -0.8371457 ]],

        [[-2.2181246 ,         nan, -0.22783805, ...,  0.8848571 ,
          -0.7018671 ,         nan],
         [        nan,         nan,  0.5027753 , ...,         nan,
                  nan,         nan],
         [-4.392747  ,         nan,         nan, ...,         nan,
                  nan,         nan],
         ...,
         [ 0.6812901 ,  0.15602867,  0.6258987 , ...,         nan,
          -0.42310825,         nan],
         [ 1.0537405 ,         nan,         nan, ...,         nan,
           0.66355574,         nan],
         [ 0.743222  ,         nan,         nan, ...,  1.0142846 ,
           0.25694314, -0.8371457 ]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [0], 'to': [15]}

generate models:406

analyse output arrays in iter:426

pre layer res:
18:log
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [11], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [18], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [18], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [18], 'to': []}

pre layer res:
2:conv2d
{'name': 'conv2d', 'output': array([[[[1.27655029e+00, 2.27043243e+02, 9.20800400e+01, ...,
          0.00000000e+00, 1.00527411e+01, 0.00000000e+00],
         [0.00000000e+00, 4.98088417e+01, 1.30267609e+02, ...,
          1.28505737e+02, 1.13087044e+02, 0.00000000e+00],
         [0.00000000e+00, 3.16497860e+01, 0.00000000e+00, ...,
          5.00151558e+01, 8.14358521e+01, 0.00000000e+00],
         ...,
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          1.25989914e-01, 9.84474106e+01, 0.00000000e+00],
         [7.78617048e+00, 4.72534370e+01, 1.15484344e+02, ...,
          0.00000000e+00, 0.00000000e+00, 3.61440697e+01],
         [0.00000000e+00, 2.80357685e+01, 0.00000000e+00, ...,
          5.31733274e+00, 2.08703518e+01, 1.33242294e+02]],

        [[1.27655029e+00, 2.27043243e+02, 9.20800400e+01, ...,
          0.00000000e+00, 1.00527411e+01, 0.00000000e+00],
         [0.00000000e+00, 4.98088417e+01, 1.30267609e+02, ...,
          1.28505737e+02, 1.13087044e+02, 0.00000000e+00],
         [0.00000000e+00, 3.16497860e+01, 0.00000000e+00, ...,
          5.00151558e+01, 8.14358521e+01, 0.00000000e+00],
         ...,
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          1.25989914e-01, 9.84474106e+01, 0.00000000e+00],
         [7.78617048e+00, 4.72534370e+01, 1.15484344e+02, ...,
          0.00000000e+00, 0.00000000e+00, 3.61440697e+01],
         [0.00000000e+00, 2.80357685e+01, 0.00000000e+00, ...,
          5.31733274e+00, 2.08703518e+01, 1.33242294e+02]],

        [[1.27655029e+00, 2.27043243e+02, 9.20800400e+01, ...,
          0.00000000e+00, 1.00527411e+01, 0.00000000e+00],
         [0.00000000e+00, 4.98088417e+01, 1.30267609e+02, ...,
          1.28505737e+02, 1.13087044e+02, 0.00000000e+00],
         [0.00000000e+00, 3.16497860e+01, 0.00000000e+00, ...,
          5.00151558e+01, 8.14358521e+01, 0.00000000e+00],
         ...,
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          1.25989914e-01, 9.84474106e+01, 0.00000000e+00],
         [7.78617048e+00, 4.72534370e+01, 1.15484344e+02, ...,
          0.00000000e+00, 0.00000000e+00, 3.61440697e+01],
         [0.00000000e+00, 2.80357685e+01, 0.00000000e+00, ...,
          5.31733274e+00, 2.08703518e+01, 1.33242294e+02]],

        ...,

        [[1.27655029e+00, 2.27043243e+02, 9.20800400e+01, ...,
          0.00000000e+00, 1.00527411e+01, 0.00000000e+00],
         [0.00000000e+00, 4.98088417e+01, 1.30267609e+02, ...,
          1.28505737e+02, 1.13087044e+02, 0.00000000e+00],
         [0.00000000e+00, 3.16497860e+01, 0.00000000e+00, ...,
          5.00151558e+01, 8.14358521e+01, 0.00000000e+00],
         ...,
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          1.25989914e-01, 9.84474106e+01, 0.00000000e+00],
         [7.78617048e+00, 4.72534370e+01, 1.15484344e+02, ...,
          0.00000000e+00, 0.00000000e+00, 3.61440697e+01],
         [0.00000000e+00, 2.80357685e+01, 0.00000000e+00, ...,
          5.31733274e+00, 2.08703518e+01, 1.33242294e+02]],

        [[1.27655029e+00, 2.27043243e+02, 9.20800400e+01, ...,
          0.00000000e+00, 1.00527411e+01, 0.00000000e+00],
         [0.00000000e+00, 4.98088417e+01, 1.30267609e+02, ...,
          1.28505737e+02, 1.13087044e+02, 0.00000000e+00],
         [0.00000000e+00, 3.16497860e+01, 0.00000000e+00, ...,
          5.00151558e+01, 8.14358521e+01, 0.00000000e+00],
         ...,
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          1.25989914e-01, 9.84474106e+01, 0.00000000e+00],
         [7.78617048e+00, 4.72534370e+01, 1.15484344e+02, ...,
          0.00000000e+00, 0.00000000e+00, 3.61440697e+01],
         [0.00000000e+00, 2.80357685e+01, 0.00000000e+00, ...,
          5.31733274e+00, 2.08703518e+01, 1.33242294e+02]],

        [[1.27655029e+00, 2.27043243e+02, 9.20800400e+01, ...,
          0.00000000e+00, 1.00527411e+01, 0.00000000e+00],
         [0.00000000e+00, 4.98088417e+01, 1.30267609e+02, ...,
          1.28505737e+02, 1.13087044e+02, 0.00000000e+00],
         [0.00000000e+00, 3.16497860e+01, 0.00000000e+00, ...,
          5.00151558e+01, 8.14358521e+01, 0.00000000e+00],
         ...,
         [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, ...,
          1.25989914e-01, 9.84474106e+01, 0.00000000e+00],
         [7.78617048e+00, 4.72534370e+01, 1.15484344e+02, ...,
          0.00000000e+00, 0.00000000e+00, 3.61440697e+01],
         [0.00000000e+00, 2.80357685e+01, 0.00000000e+00, ...,
          5.31733274e+00, 2.08703518e+01, 1.33242294e+02]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [1], 'to': [13]}
tf node:
{'name': 'sin', 'output': array([[[[ 0.95702106,  0.7503374 , -0.8270577 , ...,  0.        ,
          -0.58749765,  0.        ],
         [ 0.        , -0.44093555, -0.99412113, ...,  0.29510126,
          -0.01029159,  0.        ],
         [ 0.        ,  0.23173365,  0.        , ..., -0.24772045,
          -0.24309659,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.12565686,
          -0.8713948 ,  0.        ],
         [ 0.9977017 , -0.12918518,  0.68498546, ...,  0.        ,
           0.        , -0.9998759 ],
         [ 0.        ,  0.23630887,  0.        , ..., -0.8225341 ,
           0.9004473 ,  0.9623183 ]],

        [[ 0.95702106,  0.7503374 , -0.8270577 , ...,  0.        ,
          -0.58749765,  0.        ],
         [ 0.        , -0.44093555, -0.99412113, ...,  0.29510126,
          -0.01029159,  0.        ],
         [ 0.        ,  0.23173365,  0.        , ..., -0.24772045,
          -0.24309659,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.12565686,
          -0.8713948 ,  0.        ],
         [ 0.9977017 , -0.12918518,  0.68498546, ...,  0.        ,
           0.        , -0.9998759 ],
         [ 0.        ,  0.23630887,  0.        , ..., -0.8225341 ,
           0.9004473 ,  0.9623183 ]],

        [[ 0.95702106,  0.7503374 , -0.8270577 , ...,  0.        ,
          -0.58749765,  0.        ],
         [ 0.        , -0.44093555, -0.99412113, ...,  0.29510126,
          -0.01029159,  0.        ],
         [ 0.        ,  0.23173365,  0.        , ..., -0.24772045,
          -0.24309659,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.12565686,
          -0.8713948 ,  0.        ],
         [ 0.9977017 , -0.12918518,  0.68498546, ...,  0.        ,
           0.        , -0.9998759 ],
         [ 0.        ,  0.23630887,  0.        , ..., -0.8225341 ,
           0.9004473 ,  0.9623183 ]],

        ...,

        [[ 0.95702106,  0.7503374 , -0.8270577 , ...,  0.        ,
          -0.58749765,  0.        ],
         [ 0.        , -0.44093555, -0.99412113, ...,  0.29510126,
          -0.01029159,  0.        ],
         [ 0.        ,  0.23173365,  0.        , ..., -0.24772045,
          -0.24309659,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.12565686,
          -0.8713948 ,  0.        ],
         [ 0.9977017 , -0.12918518,  0.68498546, ...,  0.        ,
           0.        , -0.9998759 ],
         [ 0.        ,  0.23630887,  0.        , ..., -0.8225341 ,
           0.9004473 ,  0.9623183 ]],

        [[ 0.95702106,  0.7503374 , -0.8270577 , ...,  0.        ,
          -0.58749765,  0.        ],
         [ 0.        , -0.44093555, -0.99412113, ...,  0.29510126,
          -0.01029159,  0.        ],
         [ 0.        ,  0.23173365,  0.        , ..., -0.24772045,
          -0.24309659,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.12565686,
          -0.8713948 ,  0.        ],
         [ 0.9977017 , -0.12918518,  0.68498546, ...,  0.        ,
           0.        , -0.9998759 ],
         [ 0.        ,  0.23630887,  0.        , ..., -0.8225341 ,
           0.9004473 ,  0.9623183 ]],

        [[ 0.95702106,  0.7503374 , -0.8270577 , ...,  0.        ,
          -0.58749765,  0.        ],
         [ 0.        , -0.44093555, -0.99412113, ...,  0.29510126,
          -0.01029159,  0.        ],
         [ 0.        ,  0.23173365,  0.        , ..., -0.24772045,
          -0.24309659,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.12565686,
          -0.8713948 ,  0.        ],
         [ 0.9977017 , -0.12918518,  0.68498546, ...,  0.        ,
           0.        , -0.9998759 ],
         [ 0.        ,  0.23630887,  0.        , ..., -0.8225341 ,
           0.9004473 ,  0.9623183 ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [2], 'to': [3]}
ms node:
{'name': 'sin', 'output': array([[[[ 0.95702106,  0.7503374 , -0.8270577 , ...,  0.        ,
          -0.58749765,  0.        ],
         [ 0.        , -0.44093555, -0.99412113, ...,  0.29510126,
          -0.01029159,  0.        ],
         [ 0.        ,  0.23173364,  0.        , ..., -0.24772045,
          -0.2430966 ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.12565686,
          -0.8713948 ,  0.        ],
         [ 0.9977017 , -0.12918518,  0.68498546, ...,  0.        ,
           0.        , -0.9998759 ],
         [ 0.        ,  0.23630887,  0.        , ..., -0.8225341 ,
           0.9004473 ,  0.9623183 ]],

        [[ 0.95702106,  0.7503374 , -0.8270577 , ...,  0.        ,
          -0.58749765,  0.        ],
         [ 0.        , -0.44093555, -0.99412113, ...,  0.29510126,
          -0.01029159,  0.        ],
         [ 0.        ,  0.23173364,  0.        , ..., -0.24772045,
          -0.2430966 ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.12565686,
          -0.8713948 ,  0.        ],
         [ 0.9977017 , -0.12918518,  0.68498546, ...,  0.        ,
           0.        , -0.9998759 ],
         [ 0.        ,  0.23630887,  0.        , ..., -0.8225341 ,
           0.9004473 ,  0.9623183 ]],

        [[ 0.95702106,  0.7503374 , -0.8270577 , ...,  0.        ,
          -0.58749765,  0.        ],
         [ 0.        , -0.44093555, -0.99412113, ...,  0.29510126,
          -0.01029159,  0.        ],
         [ 0.        ,  0.23173364,  0.        , ..., -0.24772045,
          -0.2430966 ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.12565686,
          -0.8713948 ,  0.        ],
         [ 0.9977017 , -0.12918518,  0.68498546, ...,  0.        ,
           0.        , -0.9998759 ],
         [ 0.        ,  0.23630887,  0.        , ..., -0.8225341 ,
           0.9004473 ,  0.9623183 ]],

        ...,

        [[ 0.95702106,  0.7503374 , -0.8270577 , ...,  0.        ,
          -0.58749765,  0.        ],
         [ 0.        , -0.44093555, -0.99412113, ...,  0.29510126,
          -0.01029159,  0.        ],
         [ 0.        ,  0.23173364,  0.        , ..., -0.24772045,
          -0.2430966 ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.12565686,
          -0.8713948 ,  0.        ],
         [ 0.9977017 , -0.12918518,  0.68498546, ...,  0.        ,
           0.        , -0.9998759 ],
         [ 0.        ,  0.23630887,  0.        , ..., -0.8225341 ,
           0.9004473 ,  0.9623183 ]],

        [[ 0.95702106,  0.7504786 , -0.82703626, ...,  0.        ,
          -0.5875031 ,  0.        ],
         [ 0.        , -0.44093555, -0.9941244 , ...,  0.2952033 ,
          -0.01019241,  0.        ],
         [ 0.        ,  0.23173921,  0.        , ..., -0.24770197,
          -0.2431336 ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.12565686,
          -0.87143224,  0.        ],
         [ 0.9977022 , -0.1292041 ,  0.6850077 , ...,  0.        ,
           0.        , -0.9998755 ],
         [ 0.        ,  0.23630702,  0.        , ..., -0.8225325 ,
           0.90045065,  0.9623473 ]],

        [[ 0.95702106,  0.7504786 , -0.82703626, ...,  0.        ,
          -0.5875031 ,  0.        ],
         [ 0.        , -0.44093555, -0.9941244 , ...,  0.2952033 ,
          -0.01019241,  0.        ],
         [ 0.        ,  0.23173921,  0.        , ..., -0.24770197,
          -0.2431336 ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.12565686,
          -0.87143224,  0.        ],
         [ 0.9977022 , -0.1292041 ,  0.6850077 , ...,  0.        ,
           0.        , -0.9998755 ],
         [ 0.        ,  0.23630702,  0.        , ..., -0.8225325 ,
           0.90045065,  0.9623473 ]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [2], 'to': [3]}
torch node:
{'name': 'sin', 'output': array([[[[ 0.95702106,  0.7503374 , -0.8270577 , ...,  0.        ,
          -0.58749765,  0.        ],
         [ 0.        , -0.44093555, -0.99412113, ...,  0.29510126,
          -0.01029159,  0.        ],
         [ 0.        ,  0.23173365,  0.        , ..., -0.24772045,
          -0.2430966 ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.12565686,
          -0.8713948 ,  0.        ],
         [ 0.9977017 , -0.12918518,  0.6849854 , ...,  0.        ,
           0.        , -0.9998759 ],
         [ 0.        ,  0.23630887,  0.        , ..., -0.8225341 ,
           0.9004473 ,  0.9623183 ]],

        [[ 0.95702106,  0.7503374 , -0.8270577 , ...,  0.        ,
          -0.58749765,  0.        ],
         [ 0.        , -0.44093555, -0.99412113, ...,  0.29510126,
          -0.01029159,  0.        ],
         [ 0.        ,  0.23173365,  0.        , ..., -0.24772045,
          -0.2430966 ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.12565686,
          -0.8713948 ,  0.        ],
         [ 0.9977017 , -0.12918518,  0.6849854 , ...,  0.        ,
           0.        , -0.9998759 ],
         [ 0.        ,  0.23630887,  0.        , ..., -0.8225341 ,
           0.9004473 ,  0.9623183 ]],

        [[ 0.95702106,  0.7503374 , -0.8270577 , ...,  0.        ,
          -0.58749765,  0.        ],
         [ 0.        , -0.44093555, -0.99412113, ...,  0.29510126,
          -0.01029159,  0.        ],
         [ 0.        ,  0.23173365,  0.        , ..., -0.24772045,
          -0.2430966 ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.12565686,
          -0.8713948 ,  0.        ],
         [ 0.9977017 , -0.12918518,  0.6849854 , ...,  0.        ,
           0.        , -0.9998759 ],
         [ 0.        ,  0.23630887,  0.        , ..., -0.8225341 ,
           0.9004473 ,  0.9623183 ]],

        ...,

        [[ 0.95702106,  0.7503374 , -0.8270577 , ...,  0.        ,
          -0.58749765,  0.        ],
         [ 0.        , -0.44093555, -0.99412113, ...,  0.29510126,
          -0.01029159,  0.        ],
         [ 0.        ,  0.23173365,  0.        , ..., -0.24772045,
          -0.2430966 ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.12565686,
          -0.8713948 ,  0.        ],
         [ 0.9977017 , -0.12918518,  0.6849854 , ...,  0.        ,
           0.        , -0.9998759 ],
         [ 0.        ,  0.23630887,  0.        , ..., -0.8225341 ,
           0.9004473 ,  0.9623183 ]],

        [[ 0.95702106,  0.7503374 , -0.8270577 , ...,  0.        ,
          -0.58749765,  0.        ],
         [ 0.        , -0.44093555, -0.99412113, ...,  0.29510126,
          -0.01029159,  0.        ],
         [ 0.        ,  0.23173365,  0.        , ..., -0.24772045,
          -0.2430966 ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.12565686,
          -0.8713948 ,  0.        ],
         [ 0.9977017 , -0.12918518,  0.6849854 , ...,  0.        ,
           0.        , -0.9998759 ],
         [ 0.        ,  0.23630887,  0.        , ..., -0.8225341 ,
           0.9004473 ,  0.9623183 ]],

        [[ 0.95702106,  0.7503374 , -0.8270577 , ...,  0.        ,
          -0.58749765,  0.        ],
         [ 0.        , -0.44093555, -0.99412113, ...,  0.29510126,
          -0.01029159,  0.        ],
         [ 0.        ,  0.23173365,  0.        , ..., -0.24772045,
          -0.2430966 ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.12565686,
          -0.8713948 ,  0.        ],
         [ 0.9977017 , -0.12918518,  0.6849854 , ...,  0.        ,
           0.        , -0.9998759 ],
         [ 0.        ,  0.23630887,  0.        , ..., -0.8225341 ,
           0.9004473 ,  0.9623183 ]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [2], 'to': [3]}

generate models:408

analyse output arrays in iter:427

pre layer res:
5:conv2d
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [16], 'to': [13]}
tf node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [5], 'to': [11]}
ms node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [5], 'to': [11]}
torch node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [5], 'to': [11]}

generate models:409

analyse output arrays in iter:439

pre layer res:
19:add
{'name': 'add', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [9, 22], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [19], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [19], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [19], 'to': []}

generate models:421

analyse output arrays in iter:443

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[ 981567.94, 1162529.8 , 1167669.5 , ..., 1777140.6 ,
          1853823.9 , 2062300.  ],
         [2114000.2 , 1614907.1 , 1329983.9 , ..., 1784879.6 ,
          1566229.  , 1584623.9 ],
         [ 878525.6 , 1217946.8 , 1791988.6 , ..., 1568453.  ,
          2056143.9 , 2045088.  ],
         ...,
         [2214571.5 , 1013237.94, 1418961.1 , ...,  861618.4 ,
          1508207.9 , 1331781.1 ],
         [2552291.2 , 1199834.4 , 1510126.9 , ..., 1530110.9 ,
          1729792.1 , 1145407.9 ],
         [1156293.6 , 1455391.9 , 1853024.4 , ..., 1624416.1 ,
          2068628.  , 1490928.1 ]],

        [[ 981567.94, 1162529.8 , 1167669.5 , ..., 1777140.6 ,
          1853823.9 , 2062300.  ],
         [2114000.2 , 1614907.1 , 1329983.9 , ..., 1784879.6 ,
          1566229.  , 1584623.9 ],
         [ 878525.6 , 1217946.8 , 1791988.6 , ..., 1568453.  ,
          2056143.9 , 2045088.  ],
         ...,
         [2214571.5 , 1013237.94, 1418961.1 , ...,  861618.4 ,
          1508207.9 , 1331781.1 ],
         [2552291.2 , 1199834.4 , 1510126.9 , ..., 1530110.9 ,
          1729792.1 , 1145407.9 ],
         [1156293.6 , 1455391.9 , 1853024.4 , ..., 1624416.1 ,
          2068628.  , 1490928.1 ]],

        [[ 981567.94, 1162529.8 , 1167669.5 , ..., 1777140.6 ,
          1853823.9 , 2062300.  ],
         [2114000.2 , 1614907.1 , 1329983.9 , ..., 1784879.6 ,
          1566229.  , 1584623.9 ],
         [ 878525.6 , 1217946.8 , 1791988.6 , ..., 1568453.  ,
          2056143.9 , 2045088.  ],
         ...,
         [2214571.5 , 1013237.94, 1418961.1 , ...,  861618.4 ,
          1508207.9 , 1331781.1 ],
         [2552291.2 , 1199834.4 , 1510126.9 , ..., 1530110.9 ,
          1729792.1 , 1145407.9 ],
         [1156293.6 , 1455391.9 , 1853024.4 , ..., 1624416.1 ,
          2068628.  , 1490928.1 ]],

        ...,

        [[ 981567.94, 1162529.8 , 1167669.5 , ..., 1777140.6 ,
          1853823.9 , 2062300.  ],
         [2114000.2 , 1614907.1 , 1329983.9 , ..., 1784879.6 ,
          1566229.  , 1584623.9 ],
         [ 878525.6 , 1217946.8 , 1791988.6 , ..., 1568453.  ,
          2056143.9 , 2045088.  ],
         ...,
         [2214571.5 , 1013237.94, 1418961.1 , ...,  861618.4 ,
          1508207.9 , 1331781.1 ],
         [2552291.2 , 1199834.4 , 1510126.9 , ..., 1530110.9 ,
          1729792.1 , 1145407.9 ],
         [1156293.6 , 1455391.9 , 1853024.4 , ..., 1624416.1 ,
          2068628.  , 1490928.1 ]],

        [[ 981567.94, 1162529.8 , 1167669.5 , ..., 1777140.6 ,
          1853823.9 , 2062300.  ],
         [2114000.2 , 1614907.1 , 1329983.9 , ..., 1784879.6 ,
          1566229.  , 1584623.9 ],
         [ 878525.6 , 1217946.8 , 1791988.6 , ..., 1568453.  ,
          2056143.9 , 2045088.  ],
         ...,
         [2214571.5 , 1013237.94, 1418961.1 , ...,  861618.4 ,
          1508207.9 , 1331781.1 ],
         [2552291.2 , 1199834.4 , 1510126.9 , ..., 1530110.9 ,
          1729792.1 , 1145407.9 ],
         [1156293.6 , 1455391.9 , 1853024.4 , ..., 1624416.1 ,
          2068628.  , 1490928.1 ]],

        [[ 981567.94, 1162529.8 , 1167669.5 , ..., 1777140.6 ,
          1853823.9 , 2062300.  ],
         [2114000.2 , 1614907.1 , 1329983.9 , ..., 1784879.6 ,
          1566229.  , 1584623.9 ],
         [ 878525.6 , 1217946.8 , 1791988.6 , ..., 1568453.  ,
          2056143.9 , 2045088.  ],
         ...,
         [2214571.5 , 1013237.94, 1418961.1 , ...,  861618.4 ,
          1508207.9 , 1331781.1 ],
         [2552291.2 , 1199834.4 , 1510126.9 , ..., 1530110.9 ,
          1729792.1 , 1145407.9 ],
         [1156293.6 , 1455391.9 , 1853024.4 , ..., 1624416.1 ,
          2068628.  , 1490928.1 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [8], 'to': [20]}
tf node:
{'name': 'sin', 'output': array([[[[ 0.64112675,  0.7854963 ,  0.7167141 , ..., -0.9759691 ,
           0.9945184 ,  0.9976722 ],
         [-0.5330919 ,  0.29957193, -0.04986004, ...,  0.5082692 ,
           0.5217691 , -0.9852684 ],
         [-0.9426799 ,  0.99963254, -0.8176682 , ...,  0.29678547,
           0.24007261, -0.7531864 ],
         ...,
         [ 0.00663143, -0.8873226 , -0.8969163 , ..., -0.8954134 ,
          -0.997398  , -0.30399457],
         [-0.9931438 , -0.43526593,  0.8335657 , ..., -0.9673765 ,
          -0.20453934,  0.89054215],
         [-0.8232317 , -0.92734635, -0.06936704, ..., -0.7865526 ,
           0.72197056, -0.4866381 ]],

        [[ 0.64112675,  0.7854963 ,  0.7167141 , ..., -0.9759691 ,
           0.9945184 ,  0.9976722 ],
         [-0.5330919 ,  0.29957193, -0.04986004, ...,  0.5082692 ,
           0.5217691 , -0.9852684 ],
         [-0.9426799 ,  0.99963254, -0.8176682 , ...,  0.29678547,
           0.24007261, -0.7531864 ],
         ...,
         [ 0.00663143, -0.8873226 , -0.8969163 , ..., -0.8954134 ,
          -0.997398  , -0.30399457],
         [-0.9931438 , -0.43526593,  0.8335657 , ..., -0.9673765 ,
          -0.20453934,  0.89054215],
         [-0.8232317 , -0.92734635, -0.06936704, ..., -0.7865526 ,
           0.72197056, -0.4866381 ]],

        [[ 0.64112675,  0.7854963 ,  0.7167141 , ..., -0.9759691 ,
           0.9945184 ,  0.9976722 ],
         [-0.5330919 ,  0.29957193, -0.04986004, ...,  0.5082692 ,
           0.5217691 , -0.9852684 ],
         [-0.9426799 ,  0.99963254, -0.8176682 , ...,  0.29678547,
           0.24007261, -0.7531864 ],
         ...,
         [ 0.00663143, -0.8873226 , -0.8969163 , ..., -0.8954134 ,
          -0.997398  , -0.30399457],
         [-0.9931438 , -0.43526593,  0.8335657 , ..., -0.9673765 ,
          -0.20453934,  0.89054215],
         [-0.8232317 , -0.92734635, -0.06936704, ..., -0.7865526 ,
           0.72197056, -0.4866381 ]],

        ...,

        [[ 0.64112675,  0.7854963 ,  0.7167141 , ..., -0.9759691 ,
           0.9945184 ,  0.9976722 ],
         [-0.5330919 ,  0.29957193, -0.04986004, ...,  0.5082692 ,
           0.5217691 , -0.9852684 ],
         [-0.9426799 ,  0.99963254, -0.8176682 , ...,  0.29678547,
           0.24007261, -0.7531864 ],
         ...,
         [ 0.00663143, -0.8873226 , -0.8969163 , ..., -0.8954134 ,
          -0.997398  , -0.30399457],
         [-0.9931438 , -0.43526593,  0.8335657 , ..., -0.9673765 ,
          -0.20453934,  0.89054215],
         [-0.8232317 , -0.92734635, -0.06936704, ..., -0.7865526 ,
           0.72197056, -0.4866381 ]],

        [[ 0.64112675,  0.7854963 ,  0.7167141 , ..., -0.9759691 ,
           0.9945184 ,  0.9976722 ],
         [-0.5330919 ,  0.29957193, -0.04986004, ...,  0.5082692 ,
           0.5217691 , -0.9852684 ],
         [-0.9426799 ,  0.99963254, -0.8176682 , ...,  0.29678547,
           0.24007261, -0.7531864 ],
         ...,
         [ 0.00663143, -0.8873226 , -0.8969163 , ..., -0.8954134 ,
          -0.997398  , -0.30399457],
         [-0.9931438 , -0.43526593,  0.8335657 , ..., -0.9673765 ,
          -0.20453934,  0.89054215],
         [-0.8232317 , -0.92734635, -0.06936704, ..., -0.7865526 ,
           0.72197056, -0.4866381 ]],

        [[ 0.64112675,  0.7854963 ,  0.7167141 , ..., -0.9759691 ,
           0.9945184 ,  0.9976722 ],
         [-0.5330919 ,  0.29957193, -0.04986004, ...,  0.5082692 ,
           0.5217691 , -0.9852684 ],
         [-0.9426799 ,  0.99963254, -0.8176682 , ...,  0.29678547,
           0.24007261, -0.7531864 ],
         ...,
         [ 0.00663143, -0.8873226 , -0.8969163 , ..., -0.8954134 ,
          -0.997398  , -0.30399457],
         [-0.9931438 , -0.43526593,  0.8335657 , ..., -0.9673765 ,
          -0.20453934,  0.89054215],
         [-0.8232317 , -0.92734635, -0.06936704, ..., -0.7865526 ,
           0.72197056, -0.4866381 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [9], 'to': [11]}
ms node:
{'name': 'sin', 'output': array([[[[ 0.64112675,  0.7854963 ,  0.7167141 , ..., -0.9759691 ,
           0.9945184 ,  0.9976722 ],
         [-0.5330919 ,  0.29957193, -0.04986004, ...,  0.50826913,
           0.41133973, -0.9852684 ],
         [-0.9426799 ,  0.99963254, -0.8176682 , ...,  0.17541243,
           0.2400726 , -0.75318635],
         ...,
         [ 0.00663143, -0.8873226 , -0.8969162 , ..., -0.8954134 ,
          -0.997398  , -0.30399457],
         [-0.9931438 , -0.43526593,  0.83356565, ..., -0.9673765 ,
          -0.20453934,  0.89054215],
         [-0.8232317 , -0.92734635, -0.06936704, ..., -0.7865526 ,
           0.72197056, -0.48663813]],

        [[ 0.64112675,  0.7854963 ,  0.7167141 , ..., -0.9759691 ,
           0.9945184 ,  0.9976722 ],
         [-0.5330919 ,  0.29957193, -0.04986004, ...,  0.50826913,
           0.41133973, -0.9852684 ],
         [-0.9426799 ,  0.99963254, -0.8176682 , ...,  0.17541243,
           0.2400726 , -0.75318635],
         ...,
         [ 0.00663143, -0.8873226 , -0.8969162 , ..., -0.8954134 ,
          -0.997398  , -0.30399457],
         [-0.9931438 , -0.43526593,  0.83356565, ..., -0.9673765 ,
          -0.20453934,  0.89054215],
         [-0.8232317 , -0.92734635, -0.06936704, ..., -0.7865526 ,
           0.72197056, -0.48663813]],

        [[ 0.64112675,  0.7854963 ,  0.7167141 , ..., -0.9759691 ,
           0.9945184 ,  0.9976722 ],
         [-0.5330919 ,  0.29957193, -0.04986004, ...,  0.50826913,
           0.41133973, -0.9852684 ],
         [-0.9426799 ,  0.99963254, -0.8176682 , ...,  0.17541243,
           0.2400726 , -0.75318635],
         ...,
         [ 0.00663143, -0.8873226 , -0.8969162 , ..., -0.8954134 ,
          -0.997398  , -0.30399457],
         [-0.9931438 , -0.43526593,  0.83356565, ..., -0.9673765 ,
          -0.20453934,  0.89054215],
         [-0.8232317 , -0.92734635, -0.06936704, ..., -0.7865526 ,
           0.72197056, -0.48663813]],

        ...,

        [[ 0.64112675,  0.7854963 ,  0.7167141 , ..., -0.9759691 ,
           0.9945184 ,  0.9976722 ],
         [-0.5330919 ,  0.29957193, -0.04986004, ...,  0.50826913,
           0.41133973, -0.9852684 ],
         [-0.9426799 ,  0.99963254, -0.8176682 , ...,  0.17541243,
           0.2400726 , -0.75318635],
         ...,
         [ 0.00663143, -0.8873226 , -0.8969162 , ..., -0.8954134 ,
          -0.997398  , -0.30399457],
         [-0.9931438 , -0.43526593,  0.83356565, ..., -0.9673765 ,
          -0.20453934,  0.89054215],
         [-0.8232317 , -0.92734635, -0.06936704, ..., -0.7865526 ,
           0.72197056, -0.48663813]],

        [[ 0.64112675, -0.6605134 ,  0.9946711 , ...,  0.9938165 ,
           0.9945184 , -0.69552016],
         [-0.5330919 ,  0.44605145, -0.04986004, ...,  0.70553213,
           0.450807  , -0.9852684 ],
         [ 0.32586622,  0.890256  ,  0.7505814 , ...,  0.6558197 ,
           0.2400726 , -0.75318635],
         ...,
         [-0.14768198, -0.17419308, -0.78571236, ...,  0.43779182,
          -0.997398  , -0.72351646],
         [ 0.9997017 , -0.7347741 , -0.01446827, ..., -0.30949485,
          -0.20453934,  0.89054215],
         [-0.92250174, -0.92734635,  0.17959742, ..., -0.7865526 ,
          -0.0731732 , -0.48663813]],

        [[ 0.64112675, -0.6605134 ,  0.9946711 , ...,  0.9938165 ,
           0.9945184 , -0.69552016],
         [-0.5330919 ,  0.44605145, -0.04986004, ...,  0.70553213,
           0.450807  , -0.9852684 ],
         [ 0.32586622,  0.890256  ,  0.7505814 , ...,  0.6558197 ,
           0.2400726 , -0.75318635],
         ...,
         [-0.14768198, -0.17419308, -0.78571236, ...,  0.43779182,
          -0.997398  , -0.72351646],
         [ 0.9997017 , -0.7347741 , -0.01446827, ..., -0.30949485,
          -0.20453934,  0.89054215],
         [-0.92250174, -0.92734635,  0.17959742, ..., -0.7865526 ,
          -0.0731732 , -0.48663813]]]], dtype=float32), 'output_shape': (1, 128, 8, 8), 'from': [9], 'to': [11]}
torch node:
{'name': 'sin', 'output': array([[[[ 0.64112675,  0.7854963 ,  0.7167141 , ..., -0.9759691 ,
           0.9945184 ,  0.9976722 ],
         [-0.5330919 ,  0.29957193, -0.04986004, ...,  0.50826913,
           0.41133973, -0.9852684 ],
         [-0.9426799 ,  0.99963254, -0.8176682 , ...,  0.17541243,
           0.2400726 , -0.75318635],
         ...,
         [ 0.00663143, -0.8873226 , -0.8969162 , ..., -0.8954134 ,
          -0.997398  , -0.30399457],
         [-0.9931438 , -0.43526593,  0.83356565, ..., -0.9673765 ,
          -0.20453934,  0.89054215],
         [-0.8232317 , -0.92734635, -0.06936704, ..., -0.7865526 ,
           0.72197056, -0.48663813]],

        [[ 0.64112675,  0.7854963 ,  0.7167141 , ..., -0.9759691 ,
           0.9945184 ,  0.9976722 ],
         [-0.5330919 ,  0.29957193, -0.04986004, ...,  0.50826913,
           0.41133973, -0.9852684 ],
         [-0.9426799 ,  0.99963254, -0.8176682 , ...,  0.17541243,
           0.2400726 , -0.75318635],
         ...,
         [ 0.00663143, -0.8873226 , -0.8969162 , ..., -0.8954134 ,
          -0.997398  , -0.30399457],
         [-0.9931438 , -0.43526593,  0.83356565, ..., -0.9673765 ,
          -0.20453934,  0.89054215],
         [-0.8232317 , -0.92734635, -0.06936704, ..., -0.7865526 ,
           0.72197056, -0.48663813]],

        [[ 0.64112675,  0.7854963 ,  0.7167141 , ..., -0.9759691 ,
           0.9945184 ,  0.9976722 ],
         [-0.5330919 ,  0.29957193, -0.04986004, ...,  0.50826913,
           0.41133973, -0.9852684 ],
         [-0.9426799 ,  0.99963254, -0.8176682 , ...,  0.17541243,
           0.2400726 , -0.75318635],
         ...,
         [ 0.00663143, -0.8873226 , -0.8969162 , ..., -0.8954134 ,
          -0.997398  , -0.30399457],
         [-0.9931438 , -0.43526593,  0.83356565, ..., -0.9673765 ,
          -0.20453934,  0.89054215],
         [-0.8232317 , -0.92734635, -0.06936704, ..., -0.7865526 ,
           0.72197056, -0.48663813]],

        ...,

        [[ 0.64112675,  0.7854963 ,  0.7167141 , ..., -0.9759691 ,
           0.9945184 ,  0.9976722 ],
         [-0.5330919 ,  0.29957193, -0.04986004, ...,  0.50826913,
           0.41133973, -0.9852684 ],
         [-0.9426799 ,  0.99963254, -0.8176682 , ...,  0.17541243,
           0.2400726 , -0.75318635],
         ...,
         [ 0.00663143, -0.8873226 , -0.8969162 , ..., -0.8954134 ,
          -0.997398  , -0.30399457],
         [-0.9931438 , -0.43526593,  0.83356565, ..., -0.9673765 ,
          -0.20453934,  0.89054215],
         [-0.8232317 , -0.92734635, -0.06936704, ..., -0.7865526 ,
           0.72197056, -0.48663813]],

        [[ 0.64112675,  0.7854963 ,  0.7167141 , ..., -0.9759691 ,
           0.9945184 ,  0.9976722 ],
         [-0.5330919 ,  0.29957193, -0.04986004, ...,  0.50826913,
           0.41133973, -0.9852684 ],
         [-0.9426799 ,  0.99963254, -0.8176682 , ...,  0.17541243,
           0.2400726 , -0.75318635],
         ...,
         [ 0.00663143, -0.8873226 , -0.8969162 , ..., -0.8954134 ,
          -0.997398  , -0.30399457],
         [-0.9931438 , -0.43526593,  0.83356565, ..., -0.9673765 ,
          -0.20453934,  0.89054215],
         [-0.8232317 , -0.92734635, -0.06936704, ..., -0.7865526 ,
           0.72197056, -0.48663813]],

        [[ 0.64112675,  0.7854963 ,  0.7167141 , ..., -0.9759691 ,
           0.9945184 ,  0.9976722 ],
         [-0.5330919 ,  0.29957193, -0.04986004, ...,  0.50826913,
           0.41133973, -0.9852684 ],
         [-0.9426799 ,  0.99963254, -0.8176682 , ...,  0.17541243,
           0.2400726 , -0.75318635],
         ...,
         [ 0.00663143, -0.8873226 , -0.8969162 , ..., -0.8954134 ,
          -0.997398  , -0.30399457],
         [-0.9931438 , -0.43526593,  0.83356565, ..., -0.9673765 ,
          -0.20453934,  0.89054215],
         [-0.8232317 , -0.92734635, -0.06936704, ..., -0.7865526 ,
           0.72197056, -0.48663813]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 8, 8]), 'from': [9], 'to': [11]}

generate models:425

analyse the exceptions in iter:445
torch exception:
{'id': 20, 'name': 'flatten', 'frame_work': 'torch', 'input_datas': [tensor([61000.5352], grad_fn=<SumBackward1>)]}
Dimension out of range (expected to be in range of [-1, 0], but got 1)

generate models:427

analyse output arrays in iter:457

pre layer res:
16:flatten
{'name': 'flatten', 'output': array([[0.        , 0.        , 0.        , ..., 0.67792094, 0.        ,
        3.2007887 ]], dtype=float32), 'output_shape': TensorShape([1, 65536]), 'from': [1], 'to': [19]}
tf node:
{'name': 'log', 'output': array([[       -inf,        -inf,        -inf, ..., -0.38872463,
               -inf,  1.1633973 ]], dtype=float32), 'output_shape': TensorShape([1, 65536]), 'from': [16], 'to': [17]}
ms node:
{'name': 'log', 'output': array([[       -inf,        -inf,        -inf, ..., -0.38872653,
               -inf,  1.1633948 ]], dtype=float32), 'output_shape': (1, 65536), 'from': [16], 'to': [17]}
torch node:
{'name': 'log', 'output': array([[       -inf,        -inf,        -inf, ..., -0.38872463,
               -inf,  1.1633973 ]], dtype=float32), 'output_shape': torch.Size([1, 65536]), 'from': [16], 'to': [17]}

generate models:438

analyse output arrays in iter:459

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[8228.718 , 8071.2783, 8174.6436, ..., 7622.8228, 8216.3955,
          8234.115 ],
         [7101.64  , 7729.1675, 8069.145 , ..., 8202.627 , 7927.126 ,
          7515.0474],
         [8253.958 , 8256.357 , 8178.912 , ..., 7252.688 , 8203.571 ,
          8247.405 ],
         ...,
         [7899.9204, 8268.918 , 8232.579 , ..., 8195.607 , 8108.6724,
          3663.0178],
         [8136.896 , 8129.21  , 8117.8403, ..., 7557.1074, 8145.5234,
          8044.933 ],
         [8105.252 , 8251.987 , 8201.006 , ..., 8192.816 , 7539.602 ,
          8201.852 ]],

        [[8228.718 , 8071.2783, 8174.6436, ..., 7622.8228, 8216.3955,
          8234.115 ],
         [7101.64  , 7729.1675, 8069.145 , ..., 8202.627 , 7927.126 ,
          7515.0474],
         [8253.958 , 8256.357 , 8178.912 , ..., 7252.688 , 8203.571 ,
          8247.405 ],
         ...,
         [7899.9204, 8268.918 , 8232.579 , ..., 8195.607 , 8108.6724,
          3663.0178],
         [8136.896 , 8129.21  , 8117.8403, ..., 7557.1074, 8145.5234,
          8044.933 ],
         [8105.252 , 8251.987 , 8201.006 , ..., 8192.816 , 7539.602 ,
          8201.852 ]],

        [[8228.718 , 8071.2783, 8174.6436, ..., 7622.8228, 8216.3955,
          8234.115 ],
         [7101.64  , 7729.1675, 8069.145 , ..., 8202.627 , 7927.126 ,
          7515.0474],
         [8253.958 , 8256.357 , 8178.912 , ..., 7252.688 , 8203.571 ,
          8247.405 ],
         ...,
         [7899.9204, 8268.918 , 8232.579 , ..., 8195.607 , 8108.6724,
          3663.0178],
         [8136.896 , 8129.21  , 8117.8403, ..., 7557.1074, 8145.5234,
          8044.933 ],
         [8105.252 , 8251.987 , 8201.006 , ..., 8192.816 , 7539.602 ,
          8201.852 ]],

        ...,

        [[8228.718 , 8071.2783, 8174.6436, ..., 7622.8228, 8216.3955,
          8234.115 ],
         [7101.64  , 7729.1675, 8069.145 , ..., 8202.627 , 7927.126 ,
          7515.0474],
         [8253.958 , 8256.357 , 8178.912 , ..., 7252.688 , 8203.571 ,
          8247.405 ],
         ...,
         [7899.9204, 8268.918 , 8232.579 , ..., 8195.607 , 8108.6724,
          3663.0178],
         [8136.896 , 8129.21  , 8117.8403, ..., 7557.1074, 8145.5234,
          8044.933 ],
         [8105.252 , 8251.987 , 8201.006 , ..., 8192.816 , 7539.602 ,
          8201.852 ]],

        [[8228.718 , 8071.2783, 8174.6436, ..., 7622.8228, 8216.3955,
          8234.115 ],
         [7101.64  , 7729.1675, 8069.145 , ..., 8202.627 , 7927.126 ,
          7515.0474],
         [8253.958 , 8256.357 , 8178.912 , ..., 7252.688 , 8203.571 ,
          8247.405 ],
         ...,
         [7899.9204, 8268.918 , 8232.579 , ..., 8195.607 , 8108.6724,
          3663.0178],
         [8136.896 , 8129.21  , 8117.8403, ..., 7557.1074, 8145.5234,
          8044.933 ],
         [8105.252 , 8251.987 , 8201.006 , ..., 8192.816 , 7539.602 ,
          8201.852 ]],

        [[8228.718 , 8071.2783, 8174.6436, ..., 7622.8228, 8216.3955,
          8234.115 ],
         [7101.64  , 7729.1675, 8069.145 , ..., 8202.627 , 7927.126 ,
          7515.0474],
         [8253.958 , 8256.357 , 8178.912 , ..., 7252.688 , 8203.571 ,
          8247.405 ],
         ...,
         [7899.9204, 8268.918 , 8232.579 , ..., 8195.607 , 8108.6724,
          3663.0178],
         [8136.896 , 8129.21  , 8117.8403, ..., 7557.1074, 8145.5234,
          8044.933 ],
         [8105.252 , 8251.987 , 8201.006 , ..., 8192.816 , 7539.602 ,
          8201.852 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [8], 'to': [11]}
tf node:
{'name': 'cos', 'output': array([[[[-0.63203984, -0.86442375,  0.97601295, ...,  0.249167  ,
          -0.4260097 , -0.9999996 ],
         [-0.06988627,  0.6603192 ,  0.03570363, ..., -0.99744743,
          -0.6311887 ,  0.936692  ],
         [-0.54525185,  0.96843356, -0.22248659, ..., -0.31584534,
          -0.64262986, -0.74879265],
         ...,
         [-0.37619177,  0.96986884, -0.03554534, ..., -0.691082  ,
          -0.9755197 ,  0.9968644 ],
         [ 0.9854111 ,  0.33251566,  0.9993846 , ...,  0.00629362,
          -0.8101941 , -0.7739884 ],
         [ 0.99837065, -0.5598461 ,  0.12146217, ...,  0.8972769 ,
           0.97582805, -0.6623419 ]],

        [[-0.63203984, -0.86442375,  0.97601295, ...,  0.249167  ,
          -0.4260097 , -0.9999996 ],
         [-0.06988627,  0.6603192 ,  0.03570363, ..., -0.99744743,
          -0.6311887 ,  0.936692  ],
         [-0.54525185,  0.96843356, -0.22248659, ..., -0.31584534,
          -0.64262986, -0.74879265],
         ...,
         [-0.37619177,  0.96986884, -0.03554534, ..., -0.691082  ,
          -0.9755197 ,  0.9968644 ],
         [ 0.9854111 ,  0.33251566,  0.9993846 , ...,  0.00629362,
          -0.8101941 , -0.7739884 ],
         [ 0.99837065, -0.5598461 ,  0.12146217, ...,  0.8972769 ,
           0.97582805, -0.6623419 ]],

        [[-0.63203984, -0.86442375,  0.97601295, ...,  0.249167  ,
          -0.4260097 , -0.9999996 ],
         [-0.06988627,  0.6603192 ,  0.03570363, ..., -0.99744743,
          -0.6311887 ,  0.936692  ],
         [-0.54525185,  0.96843356, -0.22248659, ..., -0.31584534,
          -0.64262986, -0.74879265],
         ...,
         [-0.37619177,  0.96986884, -0.03554534, ..., -0.691082  ,
          -0.9755197 ,  0.9968644 ],
         [ 0.9854111 ,  0.33251566,  0.9993846 , ...,  0.00629362,
          -0.8101941 , -0.7739884 ],
         [ 0.99837065, -0.5598461 ,  0.12146217, ...,  0.8972769 ,
           0.97582805, -0.6623419 ]],

        ...,

        [[-0.63203984, -0.86442375,  0.97601295, ...,  0.249167  ,
          -0.4260097 , -0.9999996 ],
         [-0.06988627,  0.6603192 ,  0.03570363, ..., -0.99744743,
          -0.6311887 ,  0.936692  ],
         [-0.54525185,  0.96843356, -0.22248659, ..., -0.31584534,
          -0.64262986, -0.74879265],
         ...,
         [-0.37619177,  0.96986884, -0.03554534, ..., -0.691082  ,
          -0.9755197 ,  0.9968644 ],
         [ 0.9854111 ,  0.33251566,  0.9993846 , ...,  0.00629362,
          -0.8101941 , -0.7739884 ],
         [ 0.99837065, -0.5598461 ,  0.12146217, ...,  0.8972769 ,
           0.97582805, -0.6623419 ]],

        [[-0.63203984, -0.86442375,  0.97601295, ...,  0.249167  ,
          -0.4260097 , -0.9999996 ],
         [-0.06988627,  0.6603192 ,  0.03570363, ..., -0.99744743,
          -0.6311887 ,  0.936692  ],
         [-0.54525185,  0.96843356, -0.22248659, ..., -0.31584534,
          -0.64262986, -0.74879265],
         ...,
         [-0.37619177,  0.96986884, -0.03554534, ..., -0.691082  ,
          -0.9755197 ,  0.9968644 ],
         [ 0.9854111 ,  0.33251566,  0.9993846 , ...,  0.00629362,
          -0.8101941 , -0.7739884 ],
         [ 0.99837065, -0.5598461 ,  0.12146217, ...,  0.8972769 ,
           0.97582805, -0.6623419 ]],

        [[-0.63203984, -0.86442375,  0.97601295, ...,  0.249167  ,
          -0.4260097 , -0.9999996 ],
         [-0.06988627,  0.6603192 ,  0.03570363, ..., -0.99744743,
          -0.6311887 ,  0.936692  ],
         [-0.54525185,  0.96843356, -0.22248659, ..., -0.31584534,
          -0.64262986, -0.74879265],
         ...,
         [-0.37619177,  0.96986884, -0.03554534, ..., -0.691082  ,
          -0.9755197 ,  0.9968644 ],
         [ 0.9854111 ,  0.33251566,  0.9993846 , ...,  0.00629362,
          -0.8101941 , -0.7739884 ],
         [ 0.99837065, -0.5598461 ,  0.12146217, ...,  0.8972769 ,
           0.97582805, -0.6623419 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [9], 'to': [13]}
ms node:
{'name': 'cos', 'output': array([[[[-6.3128275e-01, -8.6417818e-01,  9.7611916e-01, ...,
           2.4443524e-01, -4.2600971e-01, -9.9999958e-01],
         [-7.4269362e-02,  6.8274802e-01,  3.5703626e-02, ...,
          -9.9751669e-01, -6.3308042e-01,  9.4717520e-01],
         [-5.4525185e-01,  9.6843356e-01, -2.2248659e-01, ...,
          -3.1630859e-01, -6.3963211e-01, -7.4814498e-01],
         ...,
         [-3.7302271e-01,  9.6986884e-01, -3.7497163e-02, ...,
          -6.9037580e-01, -9.7562695e-01,  9.9672771e-01],
         [ 9.8623037e-01,  3.3251566e-01,  9.9949867e-01, ...,
           9.2257088e-04, -8.1076610e-01, -7.7614814e-01],
         [ 9.9837065e-01, -5.5984610e-01,  1.2146217e-01, ...,
           8.9770758e-01,  9.7431135e-01, -6.6234189e-01]],

        [[-6.3128275e-01, -8.6417818e-01,  9.7611916e-01, ...,
           2.4443524e-01, -4.2600971e-01, -9.9999958e-01],
         [-7.4269362e-02,  6.8274802e-01,  3.5703626e-02, ...,
          -9.9751669e-01, -6.3308042e-01,  9.4717520e-01],
         [-5.4525185e-01,  9.6843356e-01, -2.2248659e-01, ...,
          -3.1630859e-01, -6.3963211e-01, -7.4814498e-01],
         ...,
         [-3.7302271e-01,  9.6986884e-01, -3.7497163e-02, ...,
          -6.9037580e-01, -9.7562695e-01,  9.9672771e-01],
         [ 9.8623037e-01,  3.3251566e-01,  9.9949867e-01, ...,
           9.2257088e-04, -8.1076610e-01, -7.7614814e-01],
         [ 9.9837065e-01, -5.5984610e-01,  1.2146217e-01, ...,
           8.9770758e-01,  9.7431135e-01, -6.6234189e-01]],

        [[-6.3128275e-01, -8.6417818e-01,  9.7611916e-01, ...,
           2.4443524e-01, -4.2600971e-01, -9.9999958e-01],
         [-7.4269362e-02,  6.8274802e-01,  3.5703626e-02, ...,
          -9.9751669e-01, -6.3308042e-01,  9.4717520e-01],
         [-5.4525185e-01,  9.6843356e-01, -2.2248659e-01, ...,
          -3.1630859e-01, -6.3963211e-01, -7.4814498e-01],
         ...,
         [-3.7302271e-01,  9.6986884e-01, -3.7497163e-02, ...,
          -6.9037580e-01, -9.7562695e-01,  9.9672771e-01],
         [ 9.8623037e-01,  3.3251566e-01,  9.9949867e-01, ...,
           9.2257088e-04, -8.1076610e-01, -7.7614814e-01],
         [ 9.9837065e-01, -5.5984610e-01,  1.2146217e-01, ...,
           8.9770758e-01,  9.7431135e-01, -6.6234189e-01]],

        ...,

        [[-6.3128275e-01, -8.6417818e-01,  9.7611916e-01, ...,
           2.4443524e-01, -4.2600971e-01, -9.9999958e-01],
         [-7.4269362e-02,  6.8274802e-01,  3.5703626e-02, ...,
          -9.9751669e-01, -6.3308042e-01,  9.4717520e-01],
         [-5.4525185e-01,  9.6843356e-01, -2.2248659e-01, ...,
          -3.1630859e-01, -6.3963211e-01, -7.4814498e-01],
         ...,
         [-3.7302271e-01,  9.6986884e-01, -3.7497163e-02, ...,
          -6.9037580e-01, -9.7562695e-01,  9.9672771e-01],
         [ 9.8623037e-01,  3.3251566e-01,  9.9949867e-01, ...,
           9.2257088e-04, -8.1076610e-01, -7.7614814e-01],
         [ 9.9837065e-01, -5.5984610e-01,  1.2146217e-01, ...,
           8.9770758e-01,  9.7431135e-01, -6.6234189e-01]],

        [[-6.3279629e-01, -8.6540407e-01,  9.7547853e-01, ...,
           2.4443524e-01, -4.3394479e-01, -9.9997723e-01],
         [-7.5730078e-02,  6.8559694e-01,  3.1311564e-02, ...,
          -9.9809718e-01, -6.3647604e-01,  9.4701850e-01],
         [-5.5341196e-01,  9.6915972e-01, -2.3199669e-01, ...,
          -3.1908649e-01, -6.4038247e-01, -7.4879259e-01],
         ...,
         [-3.6939555e-01,  9.7081310e-01, -3.7497163e-02, ...,
          -6.8966901e-01, -9.7584081e-01,  9.9674737e-01],
         [ 9.8614949e-01,  3.3895481e-01,  9.9951398e-01, ...,
          -5.4250588e-03, -8.1474864e-01, -7.7584016e-01],
         [ 9.9845314e-01, -5.6227124e-01,  1.3114955e-01, ...,
           8.9984822e-01,  9.7442120e-01, -6.5720499e-01]],

        [[-6.3279629e-01, -8.6540407e-01,  9.7547853e-01, ...,
           2.4443524e-01, -4.3394479e-01, -9.9997723e-01],
         [-7.5730078e-02,  6.8559694e-01,  3.1311564e-02, ...,
          -9.9809718e-01, -6.3647604e-01,  9.4701850e-01],
         [-5.5341196e-01,  9.6915972e-01, -2.3199669e-01, ...,
          -3.1908649e-01, -6.4038247e-01, -7.4879259e-01],
         ...,
         [-3.6939555e-01,  9.7081310e-01, -3.7497163e-02, ...,
          -6.8966901e-01, -9.7584081e-01,  9.9674737e-01],
         [ 9.8614949e-01,  3.3895481e-01,  9.9951398e-01, ...,
          -5.4250588e-03, -8.1474864e-01, -7.7584016e-01],
         [ 9.9845314e-01, -5.6227124e-01,  1.3114955e-01, ...,
           8.9984822e-01,  9.7442120e-01, -6.5720499e-01]]]],
      dtype=float32), 'output_shape': (1, 128, 8, 8), 'from': [9], 'to': [13]}
torch node:
{'name': 'cos', 'output': array([[[[-0.63128275, -0.86442375,  0.97611916, ...,  0.24963985,
          -0.4260097 , -0.9999996 ],
         [-0.06988627,  0.6606858 ,  0.03570363, ..., -0.9975167 ,
          -0.6315673 ,  0.936692  ],
         [-0.54525185,  0.96843356, -0.22248659, ..., -0.3163086 ,
          -0.64262986, -0.7487926 ],
         ...,
         [-0.3761918 ,  0.96986884, -0.03749716, ..., -0.6903758 ,
          -0.9755197 ,  0.9968644 ],
         [ 0.9854111 ,  0.33251566,  0.9993846 , ...,  0.00580535,
          -0.81076604, -0.77306   ],
         [ 0.99837065, -0.5598461 ,  0.12146217, ...,  0.8972769 ,
           0.97582805, -0.6623419 ]],

        [[-0.63128275, -0.86442375,  0.97611916, ...,  0.24963985,
          -0.4260097 , -0.9999996 ],
         [-0.06988627,  0.6606858 ,  0.03570363, ..., -0.9975167 ,
          -0.6315673 ,  0.936692  ],
         [-0.54525185,  0.96843356, -0.22248659, ..., -0.3163086 ,
          -0.64262986, -0.7487926 ],
         ...,
         [-0.3761918 ,  0.96986884, -0.03749716, ..., -0.6903758 ,
          -0.9755197 ,  0.9968644 ],
         [ 0.9854111 ,  0.33251566,  0.9993846 , ...,  0.00580535,
          -0.81076604, -0.77306   ],
         [ 0.99837065, -0.5598461 ,  0.12146217, ...,  0.8972769 ,
           0.97582805, -0.6623419 ]],

        [[-0.63128275, -0.86442375,  0.97611916, ...,  0.24963985,
          -0.4260097 , -0.9999996 ],
         [-0.06988627,  0.6606858 ,  0.03570363, ..., -0.9975167 ,
          -0.6315673 ,  0.936692  ],
         [-0.54525185,  0.96843356, -0.22248659, ..., -0.3163086 ,
          -0.64262986, -0.7487926 ],
         ...,
         [-0.3761918 ,  0.96986884, -0.03749716, ..., -0.6903758 ,
          -0.9755197 ,  0.9968644 ],
         [ 0.9854111 ,  0.33251566,  0.9993846 , ...,  0.00580535,
          -0.81076604, -0.77306   ],
         [ 0.99837065, -0.5598461 ,  0.12146217, ...,  0.8972769 ,
           0.97582805, -0.6623419 ]],

        ...,

        [[-0.63128275, -0.86442375,  0.97611916, ...,  0.24963985,
          -0.4260097 , -0.9999996 ],
         [-0.06988627,  0.6606858 ,  0.03570363, ..., -0.9975167 ,
          -0.6315673 ,  0.936692  ],
         [-0.54525185,  0.96843356, -0.22248659, ..., -0.3163086 ,
          -0.64262986, -0.7487926 ],
         ...,
         [-0.3761918 ,  0.96986884, -0.03749716, ..., -0.6903758 ,
          -0.9755197 ,  0.9968644 ],
         [ 0.9854111 ,  0.33251566,  0.9993846 , ...,  0.00580535,
          -0.81076604, -0.77306   ],
         [ 0.99837065, -0.5598461 ,  0.12146217, ...,  0.8972769 ,
           0.97582805, -0.6623419 ]],

        [[-0.63128275, -0.86442375,  0.97611916, ...,  0.24963985,
          -0.4260097 , -0.9999996 ],
         [-0.06988627,  0.6606858 ,  0.03570363, ..., -0.9975167 ,
          -0.6315673 ,  0.936692  ],
         [-0.54525185,  0.96843356, -0.22248659, ..., -0.3163086 ,
          -0.64262986, -0.7487926 ],
         ...,
         [-0.3761918 ,  0.96986884, -0.03749716, ..., -0.6903758 ,
          -0.9755197 ,  0.9968644 ],
         [ 0.9854111 ,  0.33251566,  0.9993846 , ...,  0.00580535,
          -0.81076604, -0.77306   ],
         [ 0.99837065, -0.5598461 ,  0.12146217, ...,  0.8972769 ,
           0.97582805, -0.6623419 ]],

        [[-0.63128275, -0.86442375,  0.97611916, ...,  0.24963985,
          -0.4260097 , -0.9999996 ],
         [-0.06988627,  0.6606858 ,  0.03570363, ..., -0.9975167 ,
          -0.6315673 ,  0.936692  ],
         [-0.54525185,  0.96843356, -0.22248659, ..., -0.3163086 ,
          -0.64262986, -0.7487926 ],
         ...,
         [-0.3761918 ,  0.96986884, -0.03749716, ..., -0.6903758 ,
          -0.9755197 ,  0.9968644 ],
         [ 0.9854111 ,  0.33251566,  0.9993846 , ...,  0.00580535,
          -0.81076604, -0.77306   ],
         [ 0.99837065, -0.5598461 ,  0.12146217, ...,  0.8972769 ,
           0.97582805, -0.6623419 ]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 8, 8]), 'from': [9], 'to': [13]}

pre layer res:
2:conv2d
{'name': 'conv2d', 'output': array([[[[  11.099604 ,    1.6031036,   30.965363 , ...,   38.430916 ,
           167.5341   ,  -59.100582 ],
         [-214.22725  ,   60.625538 ,   75.06346  , ...,   40.86995  ,
            44.218254 ,   24.171144 ],
         [  15.440598 , -185.90431  ,  -42.165997 , ...,  -11.588201 ,
           121.19482  ,  -45.534157 ],
         ...,
         [  63.438534 ,   -4.656769 ,  261.06665  , ...,   98.82974  ,
          -207.28313  ,  -42.457123 ],
         [  41.75455  ,  -49.0699   ,   10.286619 , ...,   64.58812  ,
           -63.794144 ,  217.91693  ],
         [-102.56604  ,  -53.281986 , -118.97157  , ...,  -20.138792 ,
            26.408897 ,   34.90893  ]],

        [[  11.099604 ,    1.6031036,   30.965363 , ...,   38.430916 ,
           167.5341   ,  -59.100582 ],
         [-214.22725  ,   60.625538 ,   75.06346  , ...,   40.86995  ,
            44.218254 ,   24.171144 ],
         [  15.440598 , -185.90431  ,  -42.165997 , ...,  -11.588201 ,
           121.19482  ,  -45.534157 ],
         ...,
         [  63.438534 ,   -4.656769 ,  261.06665  , ...,   98.82974  ,
          -207.28313  ,  -42.457123 ],
         [  41.75455  ,  -49.0699   ,   10.286619 , ...,   64.58812  ,
           -63.794144 ,  217.91693  ],
         [-102.56604  ,  -53.281986 , -118.97157  , ...,  -20.138792 ,
            26.408897 ,   34.90893  ]],

        [[  11.099604 ,    1.6031036,   30.965363 , ...,   38.430916 ,
           167.5341   ,  -59.100582 ],
         [-214.22725  ,   60.625538 ,   75.06346  , ...,   40.86995  ,
            44.218254 ,   24.171144 ],
         [  15.440598 , -185.90431  ,  -42.165997 , ...,  -11.588201 ,
           121.19482  ,  -45.534157 ],
         ...,
         [  63.438534 ,   -4.656769 ,  261.06665  , ...,   98.82974  ,
          -207.28313  ,  -42.457123 ],
         [  41.75455  ,  -49.0699   ,   10.286619 , ...,   64.58812  ,
           -63.794144 ,  217.91693  ],
         [-102.56604  ,  -53.281986 , -118.97157  , ...,  -20.138792 ,
            26.408897 ,   34.90893  ]],

        ...,

        [[  11.099604 ,    1.6031036,   30.965363 , ...,   38.430916 ,
           167.5341   ,  -59.100582 ],
         [-214.22725  ,   60.625538 ,   75.06346  , ...,   40.86995  ,
            44.218254 ,   24.171144 ],
         [  15.440598 , -185.90431  ,  -42.165997 , ...,  -11.588201 ,
           121.19482  ,  -45.534157 ],
         ...,
         [  63.438534 ,   -4.656769 ,  261.06665  , ...,   98.82974  ,
          -207.28313  ,  -42.457123 ],
         [  41.75455  ,  -49.0699   ,   10.286619 , ...,   64.58812  ,
           -63.794144 ,  217.91693  ],
         [-102.56604  ,  -53.281986 , -118.97157  , ...,  -20.138792 ,
            26.408897 ,   34.90893  ]],

        [[  11.099604 ,    1.6031036,   30.965363 , ...,   38.430916 ,
           167.5341   ,  -59.100582 ],
         [-214.22725  ,   60.625538 ,   75.06346  , ...,   40.86995  ,
            44.218254 ,   24.171144 ],
         [  15.440598 , -185.90431  ,  -42.165997 , ...,  -11.588201 ,
           121.19482  ,  -45.534157 ],
         ...,
         [  63.438534 ,   -4.656769 ,  261.06665  , ...,   98.82974  ,
          -207.28313  ,  -42.457123 ],
         [  41.75455  ,  -49.0699   ,   10.286619 , ...,   64.58812  ,
           -63.794144 ,  217.91693  ],
         [-102.56604  ,  -53.281986 , -118.97157  , ...,  -20.138792 ,
            26.408897 ,   34.90893  ]],

        [[  11.099604 ,    1.6031036,   30.965363 , ...,   38.430916 ,
           167.5341   ,  -59.100582 ],
         [-214.22725  ,   60.625538 ,   75.06346  , ...,   40.86995  ,
            44.218254 ,   24.171144 ],
         [  15.440598 , -185.90431  ,  -42.165997 , ...,  -11.588201 ,
           121.19482  ,  -45.534157 ],
         ...,
         [  63.438534 ,   -4.656769 ,  261.06665  , ...,   98.82974  ,
          -207.28313  ,  -42.457123 ],
         [  41.75455  ,  -49.0699   ,   10.286619 , ...,   64.58812  ,
           -63.794144 ,  217.91693  ],
         [-102.56604  ,  -53.281986 , -118.97157  , ...,  -20.138792 ,
            26.408897 ,   34.90893  ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [1], 'to': [19]}
tf node:
{'name': 'sin', 'output': array([[[[-0.9945938 ,  0.99947816, -0.43547332, ...,  0.6682129 ,
          -0.8571408 , -0.5560937 ],
         [-0.5637745 , -0.80476385, -0.32854477, ..., -0.02924068,
           0.23377351, -0.8201063 ],
         [ 0.2641917 ,  0.5229818 ,  0.97001487, ...,  0.8294767 ,
           0.97050023, -0.9998207 ],
         ...,
         [ 0.57014364,  0.9984536 , -0.3093031 , ..., -0.9915066 ,
           0.06194861,  0.9989595 ],
         [-0.7918587 ,  0.9304291 , -0.75904256, ...,  0.98284966,
          -0.8205031 , -0.91155005],
         [-0.8941448 , -0.12476291,  0.39764428, ..., -0.9606231 ,
           0.95690674, -0.34422436]],

        [[-0.9945938 ,  0.99947816, -0.43547332, ...,  0.6682129 ,
          -0.8571408 , -0.5560937 ],
         [-0.5637745 , -0.80476385, -0.32854477, ..., -0.02924068,
           0.23377351, -0.8201063 ],
         [ 0.2641917 ,  0.5229818 ,  0.97001487, ...,  0.8294767 ,
           0.97050023, -0.9998207 ],
         ...,
         [ 0.57014364,  0.9984536 , -0.3093031 , ..., -0.9915066 ,
           0.06194861,  0.9989595 ],
         [-0.7918587 ,  0.9304291 , -0.75904256, ...,  0.98284966,
          -0.8205031 , -0.91155005],
         [-0.8941448 , -0.12476291,  0.39764428, ..., -0.9606231 ,
           0.95690674, -0.34422436]],

        [[-0.9945938 ,  0.99947816, -0.43547332, ...,  0.6682129 ,
          -0.8571408 , -0.5560937 ],
         [-0.5637745 , -0.80476385, -0.32854477, ..., -0.02924068,
           0.23377351, -0.8201063 ],
         [ 0.2641917 ,  0.5229818 ,  0.97001487, ...,  0.8294767 ,
           0.97050023, -0.9998207 ],
         ...,
         [ 0.57014364,  0.9984536 , -0.3093031 , ..., -0.9915066 ,
           0.06194861,  0.9989595 ],
         [-0.7918587 ,  0.9304291 , -0.75904256, ...,  0.98284966,
          -0.8205031 , -0.91155005],
         [-0.8941448 , -0.12476291,  0.39764428, ..., -0.9606231 ,
           0.95690674, -0.34422436]],

        ...,

        [[-0.9945938 ,  0.99947816, -0.43547332, ...,  0.6682129 ,
          -0.8571408 , -0.5560937 ],
         [-0.5637745 , -0.80476385, -0.32854477, ..., -0.02924068,
           0.23377351, -0.8201063 ],
         [ 0.2641917 ,  0.5229818 ,  0.97001487, ...,  0.8294767 ,
           0.97050023, -0.9998207 ],
         ...,
         [ 0.57014364,  0.9984536 , -0.3093031 , ..., -0.9915066 ,
           0.06194861,  0.9989595 ],
         [-0.7918587 ,  0.9304291 , -0.75904256, ...,  0.98284966,
          -0.8205031 , -0.91155005],
         [-0.8941448 , -0.12476291,  0.39764428, ..., -0.9606231 ,
           0.95690674, -0.34422436]],

        [[-0.9945938 ,  0.99947816, -0.43547332, ...,  0.6682129 ,
          -0.8571408 , -0.5560937 ],
         [-0.5637745 , -0.80476385, -0.32854477, ..., -0.02924068,
           0.23377351, -0.8201063 ],
         [ 0.2641917 ,  0.5229818 ,  0.97001487, ...,  0.8294767 ,
           0.97050023, -0.9998207 ],
         ...,
         [ 0.57014364,  0.9984536 , -0.3093031 , ..., -0.9915066 ,
           0.06194861,  0.9989595 ],
         [-0.7918587 ,  0.9304291 , -0.75904256, ...,  0.98284966,
          -0.8205031 , -0.91155005],
         [-0.8941448 , -0.12476291,  0.39764428, ..., -0.9606231 ,
           0.95690674, -0.34422436]],

        [[-0.9945938 ,  0.99947816, -0.43547332, ...,  0.6682129 ,
          -0.8571408 , -0.5560937 ],
         [-0.5637745 , -0.80476385, -0.32854477, ..., -0.02924068,
           0.23377351, -0.8201063 ],
         [ 0.2641917 ,  0.5229818 ,  0.97001487, ...,  0.8294767 ,
           0.97050023, -0.9998207 ],
         ...,
         [ 0.57014364,  0.9984536 , -0.3093031 , ..., -0.9915066 ,
           0.06194861,  0.9989595 ],
         [-0.7918587 ,  0.9304291 , -0.75904256, ...,  0.98284966,
          -0.8205031 , -0.91155005],
         [-0.8941448 , -0.12476291,  0.39764428, ..., -0.9606231 ,
           0.95690674, -0.34422436]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [2], 'to': [3]}
ms node:
{'name': 'sin', 'output': array([[[[-0.9945938 ,  0.99947816, -0.4354733 , ...,  0.66821283,
          -0.8571408 , -0.5560937 ],
         [-0.56377447, -0.8047638 , -0.32854477, ..., -0.02924068,
           0.23377351, -0.82010627],
         [ 0.2641917 ,  0.5229818 ,  0.97001487, ...,  0.82947665,
           0.97050023, -0.9998207 ],
         ...,
         [ 0.57014364,  0.9984536 , -0.30930313, ..., -0.9915066 ,
           0.06194862,  0.9989595 ],
         [-0.7918586 ,  0.9304291 , -0.75904256, ...,  0.98284966,
          -0.8205031 , -0.91155005],
         [-0.8941447 , -0.12476292,  0.39764425, ..., -0.9606231 ,
           0.9569067 , -0.34422436]],

        [[-0.9945938 ,  0.99947816, -0.4354733 , ...,  0.66821283,
          -0.8571408 , -0.5560937 ],
         [-0.56377447, -0.8047638 , -0.32854477, ..., -0.02924068,
           0.23377351, -0.82010627],
         [ 0.2641917 ,  0.5229818 ,  0.97001487, ...,  0.82947665,
           0.97050023, -0.9998207 ],
         ...,
         [ 0.57014364,  0.9984536 , -0.30930313, ..., -0.9915066 ,
           0.06194862,  0.9989595 ],
         [-0.7918586 ,  0.9304291 , -0.75904256, ...,  0.98284966,
          -0.8205031 , -0.91155005],
         [-0.8941447 , -0.12476292,  0.39764425, ..., -0.9606231 ,
           0.9569067 , -0.34422436]],

        [[-0.9945938 ,  0.99947816, -0.4354733 , ...,  0.66821283,
          -0.8571408 , -0.5560937 ],
         [-0.56377447, -0.8047638 , -0.32854477, ..., -0.02924068,
           0.23377351, -0.82010627],
         [ 0.2641917 ,  0.5229818 ,  0.97001487, ...,  0.82947665,
           0.97050023, -0.9998207 ],
         ...,
         [ 0.57014364,  0.9984536 , -0.30930313, ..., -0.9915066 ,
           0.06194862,  0.9989595 ],
         [-0.7918586 ,  0.9304291 , -0.75904256, ...,  0.98284966,
          -0.8205031 , -0.91155005],
         [-0.8941447 , -0.12476292,  0.39764425, ..., -0.9606231 ,
           0.9569067 , -0.34422436]],

        ...,

        [[-0.9945938 ,  0.99947816, -0.4354733 , ...,  0.66821283,
          -0.8571408 , -0.5560937 ],
         [-0.56377447, -0.8047638 , -0.32854477, ..., -0.02924068,
           0.23377351, -0.82010627],
         [ 0.2641917 ,  0.5229818 ,  0.97001487, ...,  0.82947665,
           0.97050023, -0.9998207 ],
         ...,
         [ 0.57014364,  0.9984536 , -0.30930313, ..., -0.9915066 ,
           0.06194862,  0.9989595 ],
         [-0.7918586 ,  0.9304291 , -0.75904256, ...,  0.98284966,
          -0.8205031 , -0.91155005],
         [-0.8941447 , -0.12476292,  0.39764425, ..., -0.9606231 ,
           0.9569067 , -0.34422436]],

        [[-0.9945944 ,  0.99947816, -0.43544754, ...,  0.6682185 ,
          -0.8571093 , -0.55609685],
         [-0.56362325, -0.8047887 , -0.32855916, ..., -0.0292483 ,
           0.2337698 , -0.82010627],
         [ 0.26420456,  0.5229818 ,  0.9700112 , ...,  0.8294745 ,
           0.97050023, -0.99982035],
         ...,
         [ 0.57019067,  0.9984536 , -0.30950627, ..., -0.9915175 ,
           0.06200953,  0.9989583 ],
         [-0.79184467,  0.9304137 , -0.75904197, ...,  0.9828511 ,
          -0.82047695, -0.9115312 ],
         [-0.8941174 , -0.12476292,  0.39772126, ..., -0.9606231 ,
           0.95690006, -0.34422436]],

        [[-0.9945944 ,  0.99947816, -0.43544754, ...,  0.6682185 ,
          -0.8571093 , -0.55609685],
         [-0.56362325, -0.8047887 , -0.32855916, ..., -0.0292483 ,
           0.2337698 , -0.82010627],
         [ 0.26420456,  0.5229818 ,  0.9700112 , ...,  0.8294745 ,
           0.97050023, -0.99982035],
         ...,
         [ 0.57019067,  0.9984536 , -0.30950627, ..., -0.9915175 ,
           0.06200953,  0.9989583 ],
         [-0.79184467,  0.9304137 , -0.75904197, ...,  0.9828511 ,
          -0.82047695, -0.9115312 ],
         [-0.8941174 , -0.12476292,  0.39772126, ..., -0.9606231 ,
           0.95690006, -0.34422436]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [2], 'to': [3]}
torch node:
{'name': 'sin', 'output': array([[[[-0.9945938 ,  0.99947816, -0.43547332, ...,  0.66821283,
          -0.8571408 , -0.5560937 ],
         [-0.56377447, -0.8047638 , -0.32854477, ..., -0.02924068,
           0.23377351, -0.82010627],
         [ 0.2641917 ,  0.5229818 ,  0.97001487, ...,  0.82947665,
           0.97050023, -0.9998207 ],
         ...,
         [ 0.57014364,  0.9984536 , -0.30930313, ..., -0.9915066 ,
           0.06194862,  0.9989595 ],
         [-0.7918586 ,  0.9304291 , -0.75904256, ...,  0.98284966,
          -0.8205031 , -0.91155005],
         [-0.8941447 , -0.12476292,  0.39764425, ..., -0.9606231 ,
           0.95690674, -0.34422436]],

        [[-0.9945938 ,  0.99947816, -0.43547332, ...,  0.66821283,
          -0.8571408 , -0.5560937 ],
         [-0.56377447, -0.8047638 , -0.32854477, ..., -0.02924068,
           0.23377351, -0.82010627],
         [ 0.2641917 ,  0.5229818 ,  0.97001487, ...,  0.82947665,
           0.97050023, -0.9998207 ],
         ...,
         [ 0.57014364,  0.9984536 , -0.30930313, ..., -0.9915066 ,
           0.06194862,  0.9989595 ],
         [-0.7918586 ,  0.9304291 , -0.75904256, ...,  0.98284966,
          -0.8205031 , -0.91155005],
         [-0.8941447 , -0.12476292,  0.39764425, ..., -0.9606231 ,
           0.95690674, -0.34422436]],

        [[-0.9945938 ,  0.99947816, -0.43547332, ...,  0.66821283,
          -0.8571408 , -0.5560937 ],
         [-0.56377447, -0.8047638 , -0.32854477, ..., -0.02924068,
           0.23377351, -0.82010627],
         [ 0.2641917 ,  0.5229818 ,  0.97001487, ...,  0.82947665,
           0.97050023, -0.9998207 ],
         ...,
         [ 0.57014364,  0.9984536 , -0.30930313, ..., -0.9915066 ,
           0.06194862,  0.9989595 ],
         [-0.7918586 ,  0.9304291 , -0.75904256, ...,  0.98284966,
          -0.8205031 , -0.91155005],
         [-0.8941447 , -0.12476292,  0.39764425, ..., -0.9606231 ,
           0.95690674, -0.34422436]],

        ...,

        [[-0.9945938 ,  0.99947816, -0.43547332, ...,  0.66821283,
          -0.8571408 , -0.5560937 ],
         [-0.56377447, -0.8047638 , -0.32854477, ..., -0.02924068,
           0.23377351, -0.82010627],
         [ 0.2641917 ,  0.5229818 ,  0.97001487, ...,  0.82947665,
           0.97050023, -0.9998207 ],
         ...,
         [ 0.57014364,  0.9984536 , -0.30930313, ..., -0.9915066 ,
           0.06194862,  0.9989595 ],
         [-0.7918586 ,  0.9304291 , -0.75904256, ...,  0.98284966,
          -0.8205031 , -0.91155005],
         [-0.8941447 , -0.12476292,  0.39764425, ..., -0.9606231 ,
           0.95690674, -0.34422436]],

        [[-0.9945938 ,  0.99947816, -0.43547332, ...,  0.66821283,
          -0.8571408 , -0.5560937 ],
         [-0.56377447, -0.8047638 , -0.32854477, ..., -0.02924068,
           0.23377351, -0.82010627],
         [ 0.2641917 ,  0.5229818 ,  0.97001487, ...,  0.82947665,
           0.97050023, -0.9998207 ],
         ...,
         [ 0.57014364,  0.9984536 , -0.30930313, ..., -0.9915066 ,
           0.06194862,  0.9989595 ],
         [-0.7918586 ,  0.9304291 , -0.75904256, ...,  0.98284966,
          -0.8205031 , -0.91155005],
         [-0.8941447 , -0.12476292,  0.39764425, ..., -0.9606231 ,
           0.95690674, -0.34422436]],

        [[-0.9945938 ,  0.99947816, -0.43547332, ...,  0.66821283,
          -0.8571408 , -0.5560937 ],
         [-0.56377447, -0.8047638 , -0.32854477, ..., -0.02924068,
           0.23377351, -0.82010627],
         [ 0.2641917 ,  0.5229818 ,  0.97001487, ...,  0.82947665,
           0.97050023, -0.9998207 ],
         ...,
         [ 0.57014364,  0.9984536 , -0.30930313, ..., -0.9915066 ,
           0.06194862,  0.9989595 ],
         [-0.7918586 ,  0.9304291 , -0.75904256, ...,  0.98284966,
          -0.8205031 , -0.91155005],
         [-0.8941447 , -0.12476292,  0.39764425, ..., -0.9606231 ,
           0.95690674, -0.34422436]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [2], 'to': [3]}

generate models:440

analyse output arrays in iter:460

pre layer res:
19:log
{'name': 'log', 'output': array([[[[0.44163665, 0.44228083, 0.4472994 , ...,       -inf,
                -inf,       -inf],
         [0.4431944 , 0.4463653 ,       -inf, ...,       -inf,
          0.42054603, 0.4472965 ],
         [      -inf, 0.44893306,       -inf, ...,       -inf,
          0.44968456,       -inf],
         ...,
         [      -inf,       -inf, 0.37585995, ..., 0.44115546,
                -inf,       -inf],
         [0.40126252,       -inf, 0.44780582, ..., 0.44683832,
                -inf, 0.43454963],
         [      -inf,       -inf,       -inf, ...,       -inf,
          0.4377024 ,       -inf]],

        [[0.44163665, 0.44228083, 0.4472994 , ...,       -inf,
                -inf,       -inf],
         [0.4431944 , 0.4463653 ,       -inf, ...,       -inf,
          0.42054603, 0.4472965 ],
         [      -inf, 0.44893306,       -inf, ...,       -inf,
          0.44968456,       -inf],
         ...,
         [      -inf,       -inf, 0.37585995, ..., 0.44115546,
                -inf,       -inf],
         [0.40126252,       -inf, 0.44780582, ..., 0.44683832,
                -inf, 0.43454963],
         [      -inf,       -inf,       -inf, ...,       -inf,
          0.4377024 ,       -inf]],

        [[0.44163665, 0.44228083, 0.4472994 , ...,       -inf,
                -inf,       -inf],
         [0.4431944 , 0.4463653 ,       -inf, ...,       -inf,
          0.42054603, 0.4472965 ],
         [      -inf, 0.44893306,       -inf, ...,       -inf,
          0.44968456,       -inf],
         ...,
         [      -inf,       -inf, 0.37585995, ..., 0.44115546,
                -inf,       -inf],
         [0.40126252,       -inf, 0.44780582, ..., 0.44683832,
                -inf, 0.43454963],
         [      -inf,       -inf,       -inf, ...,       -inf,
          0.4377024 ,       -inf]],

        ...,

        [[0.44163665, 0.44228083, 0.4472994 , ...,       -inf,
                -inf,       -inf],
         [0.4431944 , 0.4463653 ,       -inf, ...,       -inf,
          0.42054603, 0.4472965 ],
         [      -inf, 0.44893306,       -inf, ...,       -inf,
          0.44968456,       -inf],
         ...,
         [      -inf,       -inf, 0.37585995, ..., 0.44115546,
                -inf,       -inf],
         [0.40126252,       -inf, 0.44780582, ..., 0.44683832,
                -inf, 0.43454963],
         [      -inf,       -inf,       -inf, ...,       -inf,
          0.4377024 ,       -inf]],

        [[0.44163665, 0.44228083, 0.4472994 , ...,       -inf,
                -inf,       -inf],
         [0.4431944 , 0.4463653 ,       -inf, ...,       -inf,
          0.42054603, 0.4472965 ],
         [      -inf, 0.44893306,       -inf, ...,       -inf,
          0.44968456,       -inf],
         ...,
         [      -inf,       -inf, 0.37585995, ..., 0.44115546,
                -inf,       -inf],
         [0.40126252,       -inf, 0.44780582, ..., 0.44683832,
                -inf, 0.43454963],
         [      -inf,       -inf,       -inf, ...,       -inf,
          0.4377024 ,       -inf]],

        [[0.44163665, 0.44228083, 0.4472994 , ...,       -inf,
                -inf,       -inf],
         [0.4431944 , 0.4463653 ,       -inf, ...,       -inf,
          0.42054603, 0.4472965 ],
         [      -inf, 0.44893306,       -inf, ...,       -inf,
          0.44968456,       -inf],
         ...,
         [      -inf,       -inf, 0.37585995, ..., 0.44115546,
                -inf,       -inf],
         [0.40126252,       -inf, 0.44780582, ..., 0.44683832,
                -inf, 0.43454963],
         [      -inf,       -inf,       -inf, ...,       -inf,
          0.4377024 ,       -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [11], 'to': [4]}
tf node:
{'name': 'maxpool2d', 'output': array([[[[ 4.4636530e-01,  4.4764566e-01,  3.8949600e-01, ...,
           4.4776475e-01,  4.2926276e-01,  4.4729650e-01],
         [ 4.4893306e-01,  4.3848944e-01,  4.4900125e-01, ...,
           4.4688225e-01, -3.4028235e+38,  4.4968456e-01],
         [ 4.1397586e-01,  4.4578680e-01,  4.4558588e-01, ...,
           4.3180150e-01,  4.2161474e-01,  4.4502357e-01],
         ...,
         [ 3.2706362e-01,  4.4594952e-01,  4.4215497e-01, ...,
           4.4136450e-01,  4.4695300e-01,  4.4732857e-01],
         [-3.4028235e+38,  3.7585995e-01,  4.4767675e-01, ...,
           4.4781563e-01,  4.4115546e-01,  4.4796151e-01],
         [ 4.0126252e-01,  4.4780582e-01,  4.4659758e-01, ...,
           4.4924909e-01,  4.4715220e-01,  4.3770239e-01]],

        [[ 4.4636530e-01,  4.4764566e-01,  3.8949600e-01, ...,
           4.4776475e-01,  4.2926276e-01,  4.4729650e-01],
         [ 4.4893306e-01,  4.3848944e-01,  4.4900125e-01, ...,
           4.4688225e-01, -3.4028235e+38,  4.4968456e-01],
         [ 4.1397586e-01,  4.4578680e-01,  4.4558588e-01, ...,
           4.3180150e-01,  4.2161474e-01,  4.4502357e-01],
         ...,
         [ 3.2706362e-01,  4.4594952e-01,  4.4215497e-01, ...,
           4.4136450e-01,  4.4695300e-01,  4.4732857e-01],
         [-3.4028235e+38,  3.7585995e-01,  4.4767675e-01, ...,
           4.4781563e-01,  4.4115546e-01,  4.4796151e-01],
         [ 4.0126252e-01,  4.4780582e-01,  4.4659758e-01, ...,
           4.4924909e-01,  4.4715220e-01,  4.3770239e-01]],

        [[ 4.4636530e-01,  4.4764566e-01,  3.8949600e-01, ...,
           4.4776475e-01,  4.2926276e-01,  4.4729650e-01],
         [ 4.4893306e-01,  4.3848944e-01,  4.4900125e-01, ...,
           4.4688225e-01, -3.4028235e+38,  4.4968456e-01],
         [ 4.1397586e-01,  4.4578680e-01,  4.4558588e-01, ...,
           4.3180150e-01,  4.2161474e-01,  4.4502357e-01],
         ...,
         [ 3.2706362e-01,  4.4594952e-01,  4.4215497e-01, ...,
           4.4136450e-01,  4.4695300e-01,  4.4732857e-01],
         [-3.4028235e+38,  3.7585995e-01,  4.4767675e-01, ...,
           4.4781563e-01,  4.4115546e-01,  4.4796151e-01],
         [ 4.0126252e-01,  4.4780582e-01,  4.4659758e-01, ...,
           4.4924909e-01,  4.4715220e-01,  4.3770239e-01]],

        ...,

        [[ 4.4636530e-01,  4.4764566e-01,  3.8949600e-01, ...,
           4.4776475e-01,  4.2926276e-01,  4.4729650e-01],
         [ 4.4893306e-01,  4.3848944e-01,  4.4900125e-01, ...,
           4.4688225e-01, -3.4028235e+38,  4.4968456e-01],
         [ 4.1397586e-01,  4.4578680e-01,  4.4558588e-01, ...,
           4.3180150e-01,  4.2161474e-01,  4.4502357e-01],
         ...,
         [ 3.2706362e-01,  4.4594952e-01,  4.4215497e-01, ...,
           4.4136450e-01,  4.4695300e-01,  4.4732857e-01],
         [-3.4028235e+38,  3.7585995e-01,  4.4767675e-01, ...,
           4.4781563e-01,  4.4115546e-01,  4.4796151e-01],
         [ 4.0126252e-01,  4.4780582e-01,  4.4659758e-01, ...,
           4.4924909e-01,  4.4715220e-01,  4.3770239e-01]],

        [[ 4.4636530e-01,  4.4764566e-01,  3.8949600e-01, ...,
           4.4776475e-01,  4.2926276e-01,  4.4729650e-01],
         [ 4.4893306e-01,  4.3848944e-01,  4.4900125e-01, ...,
           4.4688225e-01, -3.4028235e+38,  4.4968456e-01],
         [ 4.1397586e-01,  4.4578680e-01,  4.4558588e-01, ...,
           4.3180150e-01,  4.2161474e-01,  4.4502357e-01],
         ...,
         [ 3.2706362e-01,  4.4594952e-01,  4.4215497e-01, ...,
           4.4136450e-01,  4.4695300e-01,  4.4732857e-01],
         [-3.4028235e+38,  3.7585995e-01,  4.4767675e-01, ...,
           4.4781563e-01,  4.4115546e-01,  4.4796151e-01],
         [ 4.0126252e-01,  4.4780582e-01,  4.4659758e-01, ...,
           4.4924909e-01,  4.4715220e-01,  4.3770239e-01]],

        [[ 4.4636530e-01,  4.4764566e-01,  3.8949600e-01, ...,
           4.4776475e-01,  4.2926276e-01,  4.4729650e-01],
         [ 4.4893306e-01,  4.3848944e-01,  4.4900125e-01, ...,
           4.4688225e-01, -3.4028235e+38,  4.4968456e-01],
         [ 4.1397586e-01,  4.4578680e-01,  4.4558588e-01, ...,
           4.3180150e-01,  4.2161474e-01,  4.4502357e-01],
         ...,
         [ 3.2706362e-01,  4.4594952e-01,  4.4215497e-01, ...,
           4.4136450e-01,  4.4695300e-01,  4.4732857e-01],
         [-3.4028235e+38,  3.7585995e-01,  4.4767675e-01, ...,
           4.4781563e-01,  4.4115546e-01,  4.4796151e-01],
         [ 4.0126252e-01,  4.4780582e-01,  4.4659758e-01, ...,
           4.4924909e-01,  4.4715220e-01,  4.3770239e-01]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [19], 'to': [5]}
ms node:
{'name': 'maxpool2d', 'output': array([[[[ 4.4636288e-01,  4.4764325e-01,  3.8949594e-01, ...,
           4.4776234e-01,  4.2926043e-01,  4.4729400e-01],
         [ 4.4893056e-01,  4.3848723e-01,  4.4899884e-01, ...,
           4.4687983e-01, -3.4028235e+38,  4.4968215e-01],
         [ 4.1397363e-01,  4.4578451e-01,  4.4558358e-01, ...,
           4.3179929e-01,  4.2161244e-01,  4.4502133e-01],
         ...,
         [ 3.2706639e-01,  4.4594729e-01,  4.4215274e-01, ...,
           4.4136226e-01,  4.4695053e-01,  4.4732618e-01],
         [-3.4028235e+38,  3.7585989e-01,  4.4767433e-01, ...,
           4.4781321e-01,  4.4115317e-01,  4.4795910e-01],
         [ 4.0126237e-01,  4.4780338e-01,  4.4659516e-01, ...,
           4.4924667e-01,  4.4714981e-01,  4.3770015e-01]],

        [[ 4.4636288e-01,  4.4764325e-01,  3.8949594e-01, ...,
           4.4776234e-01,  4.2926043e-01,  4.4729400e-01],
         [ 4.4893056e-01,  4.3848723e-01,  4.4899884e-01, ...,
           4.4687983e-01, -3.4028235e+38,  4.4968215e-01],
         [ 4.1397363e-01,  4.4578451e-01,  4.4558358e-01, ...,
           4.3179929e-01,  4.2161244e-01,  4.4502133e-01],
         ...,
         [ 3.2706639e-01,  4.4594729e-01,  4.4215274e-01, ...,
           4.4136226e-01,  4.4695053e-01,  4.4732618e-01],
         [-3.4028235e+38,  3.7585989e-01,  4.4767433e-01, ...,
           4.4781321e-01,  4.4115317e-01,  4.4795910e-01],
         [ 4.0126237e-01,  4.4780338e-01,  4.4659516e-01, ...,
           4.4924667e-01,  4.4714981e-01,  4.3770015e-01]],

        [[ 4.4636288e-01,  4.4764325e-01,  3.8949594e-01, ...,
           4.4776234e-01,  4.2926043e-01,  4.4729400e-01],
         [ 4.4893056e-01,  4.3848723e-01,  4.4899884e-01, ...,
           4.4687983e-01, -3.4028235e+38,  4.4968215e-01],
         [ 4.1397363e-01,  4.4578451e-01,  4.4558358e-01, ...,
           4.3179929e-01,  4.2161244e-01,  4.4502133e-01],
         ...,
         [ 3.2706639e-01,  4.4594729e-01,  4.4215274e-01, ...,
           4.4136226e-01,  4.4695053e-01,  4.4732618e-01],
         [-3.4028235e+38,  3.7585989e-01,  4.4767433e-01, ...,
           4.4781321e-01,  4.4115317e-01,  4.4795910e-01],
         [ 4.0126237e-01,  4.4780338e-01,  4.4659516e-01, ...,
           4.4924667e-01,  4.4714981e-01,  4.3770015e-01]],

        ...,

        [[ 4.4636288e-01,  4.4764325e-01,  3.8949594e-01, ...,
           4.4776234e-01,  4.2926043e-01,  4.4729400e-01],
         [ 4.4893056e-01,  4.3848723e-01,  4.4899884e-01, ...,
           4.4687983e-01, -3.4028235e+38,  4.4968215e-01],
         [ 4.1397363e-01,  4.4578451e-01,  4.4558358e-01, ...,
           4.3179929e-01,  4.2161244e-01,  4.4502133e-01],
         ...,
         [ 3.2706639e-01,  4.4594729e-01,  4.4215274e-01, ...,
           4.4136226e-01,  4.4695053e-01,  4.4732618e-01],
         [-3.4028235e+38,  3.7585989e-01,  4.4767433e-01, ...,
           4.4781321e-01,  4.4115317e-01,  4.4795910e-01],
         [ 4.0126237e-01,  4.4780338e-01,  4.4659516e-01, ...,
           4.4924667e-01,  4.4714981e-01,  4.3770015e-01]],

        [[ 4.4636288e-01,  4.4764325e-01,  3.8949594e-01, ...,
           4.4776234e-01,  4.2926052e-01,  4.4729400e-01],
         [ 4.4893056e-01,  4.3848723e-01,  4.4899884e-01, ...,
           4.4687983e-01, -3.4028235e+38,  4.4968215e-01],
         [ 4.1397363e-01,  4.4578451e-01,  4.4558358e-01, ...,
           4.3179929e-01,  4.2161244e-01,  4.4502133e-01],
         ...,
         [ 3.2706639e-01,  4.4594729e-01,  4.4215274e-01, ...,
           4.4136226e-01,  4.4695053e-01,  4.4732618e-01],
         [-3.4028235e+38,  3.7585998e-01,  4.4767433e-01, ...,
           4.4781321e-01,  4.4115317e-01,  4.4795910e-01],
         [ 4.0126237e-01,  4.4780338e-01,  4.4659516e-01, ...,
           4.4924667e-01,  4.4714981e-01,  4.3770015e-01]],

        [[ 4.4636288e-01,  4.4764325e-01,  3.8949594e-01, ...,
           4.4776234e-01,  4.2926052e-01,  4.4729400e-01],
         [ 4.4893056e-01,  4.3848723e-01,  4.4899884e-01, ...,
           4.4687983e-01, -3.4028235e+38,  4.4968215e-01],
         [ 4.1397363e-01,  4.4578451e-01,  4.4558358e-01, ...,
           4.3179929e-01,  4.2161244e-01,  4.4502133e-01],
         ...,
         [ 3.2706639e-01,  4.4594729e-01,  4.4215274e-01, ...,
           4.4136226e-01,  4.4695053e-01,  4.4732618e-01],
         [-3.4028235e+38,  3.7585998e-01,  4.4767433e-01, ...,
           4.4781321e-01,  4.4115317e-01,  4.4795910e-01],
         [ 4.0126237e-01,  4.4780338e-01,  4.4659516e-01, ...,
           4.4924667e-01,  4.4714981e-01,  4.3770015e-01]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [19], 'to': [5]}
torch node:
{'name': 'maxpool2d', 'output': array([[[[0.4463653 , 0.44764566, 0.389496  , ..., 0.44776475,
          0.42926267, 0.44729644],
         [0.448933  , 0.43848944, 0.44900125, ..., 0.44688225,
                -inf, 0.44968456],
         [0.41397586, 0.4457867 , 0.4455858 , ..., 0.4318015 ,
          0.42161465, 0.44502357],
         ...,
         [0.32706353, 0.44594952, 0.44215488, ..., 0.4413645 ,
          0.44695294, 0.44732857],
         [      -inf, 0.37585995, 0.44767675, ..., 0.44781563,
          0.4411554 , 0.4479615 ],
         [0.40126243, 0.44780582, 0.44659758, ..., 0.4492491 ,
          0.4471522 , 0.4377024 ]],

        [[0.4463653 , 0.44764566, 0.389496  , ..., 0.44776475,
          0.42926267, 0.44729644],
         [0.448933  , 0.43848944, 0.44900125, ..., 0.44688225,
                -inf, 0.44968456],
         [0.41397586, 0.4457867 , 0.4455858 , ..., 0.4318015 ,
          0.42161465, 0.44502357],
         ...,
         [0.32706353, 0.44594952, 0.44215488, ..., 0.4413645 ,
          0.44695294, 0.44732857],
         [      -inf, 0.37585995, 0.44767675, ..., 0.44781563,
          0.4411554 , 0.4479615 ],
         [0.40126243, 0.44780582, 0.44659758, ..., 0.4492491 ,
          0.4471522 , 0.4377024 ]],

        [[0.4463653 , 0.44764566, 0.389496  , ..., 0.44776475,
          0.42926267, 0.44729644],
         [0.448933  , 0.43848944, 0.44900125, ..., 0.44688225,
                -inf, 0.44968456],
         [0.41397586, 0.4457867 , 0.4455858 , ..., 0.4318015 ,
          0.42161465, 0.44502357],
         ...,
         [0.32706353, 0.44594952, 0.44215488, ..., 0.4413645 ,
          0.44695294, 0.44732857],
         [      -inf, 0.37585995, 0.44767675, ..., 0.44781563,
          0.4411554 , 0.4479615 ],
         [0.40126243, 0.44780582, 0.44659758, ..., 0.4492491 ,
          0.4471522 , 0.4377024 ]],

        ...,

        [[0.4463653 , 0.44764566, 0.389496  , ..., 0.44776475,
          0.42926267, 0.44729644],
         [0.448933  , 0.43848944, 0.44900125, ..., 0.44688225,
                -inf, 0.44968456],
         [0.41397586, 0.4457867 , 0.4455858 , ..., 0.4318015 ,
          0.42161465, 0.44502357],
         ...,
         [0.32706353, 0.44594952, 0.44215488, ..., 0.4413645 ,
          0.44695294, 0.44732857],
         [      -inf, 0.37585995, 0.44767675, ..., 0.44781563,
          0.4411554 , 0.4479615 ],
         [0.40126243, 0.44780582, 0.44659758, ..., 0.4492491 ,
          0.4471522 , 0.4377024 ]],

        [[0.4463653 , 0.44764566, 0.389496  , ..., 0.44776475,
          0.42926267, 0.44729644],
         [0.448933  , 0.43848944, 0.44900125, ..., 0.44688225,
                -inf, 0.44968456],
         [0.41397586, 0.4457867 , 0.4455858 , ..., 0.4318015 ,
          0.42161465, 0.44502357],
         ...,
         [0.32706353, 0.44594952, 0.44215488, ..., 0.4413645 ,
          0.44695294, 0.44732857],
         [      -inf, 0.37585995, 0.44767675, ..., 0.44781563,
          0.4411554 , 0.4479615 ],
         [0.40126243, 0.44780582, 0.44659758, ..., 0.4492491 ,
          0.4471522 , 0.4377024 ]],

        [[0.4463653 , 0.44764566, 0.389496  , ..., 0.44776475,
          0.42926267, 0.44729644],
         [0.448933  , 0.43848944, 0.44900125, ..., 0.44688225,
                -inf, 0.44968456],
         [0.41397586, 0.4457867 , 0.4455858 , ..., 0.4318015 ,
          0.42161465, 0.44502357],
         ...,
         [0.32706353, 0.44594952, 0.44215488, ..., 0.4413645 ,
          0.44695294, 0.44732857],
         [      -inf, 0.37585995, 0.44767675, ..., 0.44781563,
          0.4411554 , 0.4479615 ],
         [0.40126243, 0.44780582, 0.44659758, ..., 0.4492491 ,
          0.4471522 , 0.4377024 ]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [19], 'to': [5]}

pre layer res:
22:reshape
{'name': 'reshape', 'output': array([[[[ 8416.661 ,  7781.2007, 13118.178 , ...,       -inf,
           9752.293 , 11775.707 ],
         [12419.3   ,  9677.995 ,  9735.491 , ...,  8726.001 ,
          14525.094 ,  8729.002 ],
         [17737.527 ,  6316.926 , 15792.815 , ..., 14069.645 ,
           7938.991 ,  7490.1255],
         ...,
         [19864.2   ,  9993.432 ,  3553.6958, ...,  7735.823 ,
           6039.4463, 14371.725 ],
         [12308.52  ,  9314.533 , 15102.56  , ...,  3742.2048,
          12716.19  ,  5285.496 ],
         [ 6259.612 , 17365.332 ,  9489.714 , ...,  7924.635 ,
          18307.094 , 11340.54  ]],

        [[      -inf, 11393.91  ,  3667.5874, ..., 13399.098 ,
                -inf,  7499.9014],
         [13206.52  , 14959.717 , 13052.864 , ..., 13091.167 ,
           8310.745 ,  9662.943 ],
         [11539.713 ,  4467.322 , 15674.206 , ...,  7918.8804,
           7402.235 ,  6477.084 ],
         ...,
         [ 7949.952 , 13576.536 ,  9394.833 , ...,  8499.591 ,
          13273.389 ,  3685.698 ],
         [16823.836 ,  6256.4185, 10333.401 , ...,  8637.899 ,
                -inf,  4956.839 ],
         [19326.557 ,  4386.93  , 14507.5625, ..., 10011.993 ,
           9090.682 , 13884.6455]],

        [[ 9399.963 ,  6134.955 ,  3695.4907, ...,  4131.5986,
          11773.216 ,  4276.906 ],
         [13219.826 , 12315.874 ,  5627.881 , ..., 19043.979 ,
                -inf, 14671.137 ],
         [ 6447.2554,  7149.182 ,  6911.509 , ...,       -inf,
          10554.362 ,  9799.6   ],
         ...,
         [13795.719 ,  5918.211 , 13816.455 , ...,  7646.2285,
          10895.743 , 15417.455 ],
         [10655.639 , 12668.823 ,       -inf, ...,  3559.8145,
           3692.6018, 10235.918 ],
         [ 4379.224 , 17868.258 ,  3446.3945, ..., 14973.924 ,
          10765.964 , 14023.422 ]],

        ...,

        [[      -inf, 11393.91  ,  3667.5874, ..., 13399.098 ,
                -inf,  7499.9014],
         [13206.52  , 14959.717 , 13052.864 , ..., 13091.167 ,
           8310.745 ,  9662.943 ],
         [11539.713 ,  4467.322 , 15674.206 , ...,  7918.8804,
           7402.235 ,  6477.084 ],
         ...,
         [ 7949.952 , 13576.536 ,  9394.833 , ...,  8499.591 ,
          13273.389 ,  3685.698 ],
         [16823.836 ,  6256.4185, 10333.401 , ...,  8637.899 ,
                -inf,  4956.839 ],
         [19326.557 ,  4386.93  , 14507.5625, ..., 10011.993 ,
           9090.682 , 13884.6455]],

        [[ 9399.963 ,  6134.955 ,  3695.4907, ...,  4131.5986,
          11773.216 ,  4276.906 ],
         [13219.826 , 12315.874 ,  5627.881 , ..., 19043.979 ,
                -inf, 14671.137 ],
         [ 6447.2554,  7149.182 ,  6911.509 , ...,       -inf,
          10554.362 ,  9799.6   ],
         ...,
         [13795.719 ,  5918.211 , 13816.455 , ...,  7646.2285,
          10895.743 , 15417.455 ],
         [10655.639 , 12668.823 ,       -inf, ...,  3559.8145,
           3692.6018, 10235.918 ],
         [ 4379.224 , 17868.258 ,  3446.3945, ..., 14973.924 ,
          10765.964 , 14023.422 ]],

        [[ 9314.553 ,       -inf, 21015.957 , ...,  7237.355 ,
          21166.918 ,  8164.1367],
         [16119.223 ,  3679.5547,  4784.995 , ...,  5145.8564,
          12379.282 ,  4897.199 ],
         [ 7691.8877, 17348.502 ,  9153.115 , ...,       -inf,
          16539.9   ,       -inf],
         ...,
         [ 7549.078 ,  5831.12  ,       -inf, ...,  4636.395 ,
          16450.389 , 14228.912 ],
         [ 4619.6597, 13421.333 , 11664.183 , ..., 14397.048 ,
           7528.776 , 12171.231 ],
         [ 8889.676 , 13914.433 ,  8018.1445, ...,  9454.425 ,
          14006.287 ,  8325.06  ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [21], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan,       nan, ...,      -inf,       nan,
                nan],
         [8413988. ,       nan,       nan, ...,       nan,       nan,
                nan],
         [5710682.5,       nan,       nan, ...,       nan,       nan,
                nan]],

        [[      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan,       nan, ...,      -inf,       nan,
                nan],
         [8413988. ,       nan,       nan, ...,       nan,       nan,
                nan],
         [5710682.5,       nan,       nan, ...,       nan,       nan,
                nan]],

        [[      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan,       nan, ...,      -inf,       nan,
                nan],
         [8413988. ,       nan,       nan, ...,       nan,       nan,
                nan],
         [5710682.5,       nan,       nan, ...,       nan,       nan,
                nan]],

        ...,

        [[      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan,       nan, ...,      -inf,       nan,
                nan],
         [8413988. ,       nan,       nan, ...,       nan,       nan,
                nan],
         [5710682.5,       nan,       nan, ...,       nan,       nan,
                nan]],

        [[      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan,       nan, ...,      -inf,       nan,
                nan],
         [8413988. ,       nan,       nan, ...,       nan,       nan,
                nan],
         [5710682.5,       nan,       nan, ...,       nan,       nan,
                nan]],

        [[      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         [      nan,       nan,       nan, ...,       nan,       nan,
                nan],
         ...,
         [      nan,       nan,       nan, ...,      -inf,       nan,
                nan],
         [8413988. ,       nan,       nan, ...,       nan,       nan,
                nan],
         [5710682.5,       nan,       nan, ...,       nan,       nan,
                nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [22], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [8413968. ,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [5710671. ,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [8413968. ,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [5710671. ,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [8413968. ,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [5710671. ,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        ...,

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [8413968. ,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [5710671. ,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [8413969. ,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [5710671.5,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [8413969. ,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [5710671.5,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [22], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         ...,
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [8413984.,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [5710681.,     -inf,     -inf, ...,     -inf,     -inf,
              -inf]],

        [[    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         ...,
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [8413984.,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [5710681.,     -inf,     -inf, ...,     -inf,     -inf,
              -inf]],

        [[    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         ...,
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [8413984.,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [5710681.,     -inf,     -inf, ...,     -inf,     -inf,
              -inf]],

        ...,

        [[    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         ...,
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [8413984.,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [5710681.,     -inf,     -inf, ...,     -inf,     -inf,
              -inf]],

        [[    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         ...,
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [8413984.,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [5710681.,     -inf,     -inf, ...,     -inf,     -inf,
              -inf]],

        [[    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         ...,
         [    -inf,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [8413984.,     -inf,     -inf, ...,     -inf,     -inf,
              -inf],
         [5710681.,     -inf,     -inf, ...,     -inf,     -inf,
              -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [22], 'to': []}

generate models:441

analyse output arrays in iter:461

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [8], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [9], 'to': []}

pre layer res:
17:sum
{'name': 'sum', 'output': array([1440537.2], dtype=float32), 'output_shape': TensorShape([1]), 'from': [15], 'to': [29]}
tf node:
{'name': 'sin', 'output': array([-0.7028534], dtype=float32), 'output_shape': TensorShape([1]), 'from': [17], 'to': [18]}
ms node:
{'name': 'sin', 'output': array([-0.6788649], dtype=float32), 'output_shape': (1,), 'from': [17], 'to': [18]}
torch node:
{'name': 'sin', 'output': array([-0.78605497], dtype=float32), 'output_shape': torch.Size([1]), 'from': [17], 'to': [18]}

generate models:442

analyse output arrays in iter:467

pre layer res:
7:conv2d
{'name': 'conv2d', 'output': array([[[[      0.  , 1088167.6 , 1597872.4 , ..., 1414404.8 ,
          1381409.2 , 1699236.  ],
         [1414613.9 ,       0.  , 1224879.9 , ...,  673783.94,
          1518394.5 , 1067570.  ],
         [1504586.5 , 1496068.5 , 1753199.9 , ..., 1886847.9 ,
          1255920.1 , 1854859.5 ],
         ...,
         [1087777.9 , 1832300.2 ,  745672.56, ..., 1623733.1 ,
          1280671.9 , 1072206.1 ],
         [1557889.1 , 1610624.1 , 1559572.4 , ..., 1460304.1 ,
          1617552.1 , 1346553.9 ],
         [      0.  ,  560879.94, 1412826.2 , ..., 1406090.1 ,
          1591173.2 , 1541764.4 ]],

        [[      0.  , 1088167.6 , 1597872.4 , ..., 1414404.8 ,
          1381409.2 , 1699236.  ],
         [1414613.9 ,       0.  , 1224879.9 , ...,  673783.94,
          1518394.5 , 1067570.  ],
         [1504586.5 , 1496068.5 , 1753199.9 , ..., 1886847.9 ,
          1255920.1 , 1854859.5 ],
         ...,
         [1087777.9 , 1832300.2 ,  745672.56, ..., 1623733.1 ,
          1280671.9 , 1072206.1 ],
         [1557889.1 , 1610624.1 , 1559572.4 , ..., 1460304.1 ,
          1617552.1 , 1346553.9 ],
         [      0.  ,  560879.94, 1412826.2 , ..., 1406090.1 ,
          1591173.2 , 1541764.4 ]],

        [[      0.  , 1088167.6 , 1597872.4 , ..., 1414404.8 ,
          1381409.2 , 1699236.  ],
         [1414613.9 ,       0.  , 1224879.9 , ...,  673783.94,
          1518394.5 , 1067570.  ],
         [1504586.5 , 1496068.5 , 1753199.9 , ..., 1886847.9 ,
          1255920.1 , 1854859.5 ],
         ...,
         [1087777.9 , 1832300.2 ,  745672.56, ..., 1623733.1 ,
          1280671.9 , 1072206.1 ],
         [1557889.1 , 1610624.1 , 1559572.4 , ..., 1460304.1 ,
          1617552.1 , 1346553.9 ],
         [      0.  ,  560879.94, 1412826.2 , ..., 1406090.1 ,
          1591173.2 , 1541764.4 ]],

        ...,

        [[      0.  , 1088167.6 , 1597872.4 , ..., 1414404.8 ,
          1381409.2 , 1699236.  ],
         [1414613.9 ,       0.  , 1224879.9 , ...,  673783.94,
          1518394.5 , 1067570.  ],
         [1504586.5 , 1496068.5 , 1753199.9 , ..., 1886847.9 ,
          1255920.1 , 1854859.5 ],
         ...,
         [1087777.9 , 1832300.2 ,  745672.56, ..., 1623733.1 ,
          1280671.9 , 1072206.1 ],
         [1557889.1 , 1610624.1 , 1559572.4 , ..., 1460304.1 ,
          1617552.1 , 1346553.9 ],
         [      0.  ,  560879.94, 1412826.2 , ..., 1406090.1 ,
          1591173.2 , 1541764.4 ]],

        [[      0.  , 1088167.6 , 1597872.4 , ..., 1414404.8 ,
          1381409.2 , 1699236.  ],
         [1414613.9 ,       0.  , 1224879.9 , ...,  673783.94,
          1518394.5 , 1067570.  ],
         [1504586.5 , 1496068.5 , 1753199.9 , ..., 1886847.9 ,
          1255920.1 , 1854859.5 ],
         ...,
         [1087777.9 , 1832300.2 ,  745672.56, ..., 1623733.1 ,
          1280671.9 , 1072206.1 ],
         [1557889.1 , 1610624.1 , 1559572.4 , ..., 1460304.1 ,
          1617552.1 , 1346553.9 ],
         [      0.  ,  560879.94, 1412826.2 , ..., 1406090.1 ,
          1591173.2 , 1541764.4 ]],

        [[      0.  , 1088167.6 , 1597872.4 , ..., 1414404.8 ,
          1381409.2 , 1699236.  ],
         [1414613.9 ,       0.  , 1224879.9 , ...,  673783.94,
          1518394.5 , 1067570.  ],
         [1504586.5 , 1496068.5 , 1753199.9 , ..., 1886847.9 ,
          1255920.1 , 1854859.5 ],
         ...,
         [1087777.9 , 1832300.2 ,  745672.56, ..., 1623733.1 ,
          1280671.9 , 1072206.1 ],
         [1557889.1 , 1610624.1 , 1559572.4 , ..., 1460304.1 ,
          1617552.1 , 1346553.9 ],
         [      0.  ,  560879.94, 1412826.2 , ..., 1406090.1 ,
          1591173.2 , 1541764.4 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [6], 'to': [16]}
tf node:
{'name': 'cos', 'output': array([[[[ 1.        , -0.04039817, -0.22984667, ..., -0.9988913 ,
           0.768224  ,  0.36157072],
         [ 0.253389  ,  1.        , -0.38674298, ...,  0.96163386,
           0.9981197 ,  0.9643971 ],
         [-0.7237187 , -0.32701227, -0.8947814 , ...,  0.50270724,
           0.7940757 ,  0.9339568 ],
         ...,
         [ 0.151516  , -0.627613  , -0.9869401 , ...,  0.57188696,
          -0.05893363,  0.8263989 ],
         [ 0.03161711,  0.2545083 , -0.5745383 , ..., -0.7293503 ,
          -0.86519444, -0.27690402],
         [ 1.        ,  0.39446017, -0.19612233, ...,  0.34566635,
           0.85081923, -0.88040394]],

        [[ 1.        , -0.04039817, -0.22984667, ..., -0.9988913 ,
           0.768224  ,  0.36157072],
         [ 0.253389  ,  1.        , -0.38674298, ...,  0.96163386,
           0.9981197 ,  0.9643971 ],
         [-0.7237187 , -0.32701227, -0.8947814 , ...,  0.50270724,
           0.7940757 ,  0.9339568 ],
         ...,
         [ 0.151516  , -0.627613  , -0.9869401 , ...,  0.57188696,
          -0.05893363,  0.8263989 ],
         [ 0.03161711,  0.2545083 , -0.5745383 , ..., -0.7293503 ,
          -0.86519444, -0.27690402],
         [ 1.        ,  0.39446017, -0.19612233, ...,  0.34566635,
           0.85081923, -0.88040394]],

        [[ 1.        , -0.04039817, -0.22984667, ..., -0.9988913 ,
           0.768224  ,  0.36157072],
         [ 0.253389  ,  1.        , -0.38674298, ...,  0.96163386,
           0.9981197 ,  0.9643971 ],
         [-0.7237187 , -0.32701227, -0.8947814 , ...,  0.50270724,
           0.7940757 ,  0.9339568 ],
         ...,
         [ 0.151516  , -0.627613  , -0.9869401 , ...,  0.57188696,
          -0.05893363,  0.8263989 ],
         [ 0.03161711,  0.2545083 , -0.5745383 , ..., -0.7293503 ,
          -0.86519444, -0.27690402],
         [ 1.        ,  0.39446017, -0.19612233, ...,  0.34566635,
           0.85081923, -0.88040394]],

        ...,

        [[ 1.        , -0.04039817, -0.22984667, ..., -0.9988913 ,
           0.768224  ,  0.36157072],
         [ 0.253389  ,  1.        , -0.38674298, ...,  0.96163386,
           0.9981197 ,  0.9643971 ],
         [-0.7237187 , -0.32701227, -0.8947814 , ...,  0.50270724,
           0.7940757 ,  0.9339568 ],
         ...,
         [ 0.151516  , -0.627613  , -0.9869401 , ...,  0.57188696,
          -0.05893363,  0.8263989 ],
         [ 0.03161711,  0.2545083 , -0.5745383 , ..., -0.7293503 ,
          -0.86519444, -0.27690402],
         [ 1.        ,  0.39446017, -0.19612233, ...,  0.34566635,
           0.85081923, -0.88040394]],

        [[ 1.        , -0.04039817, -0.22984667, ..., -0.9988913 ,
           0.768224  ,  0.36157072],
         [ 0.253389  ,  1.        , -0.38674298, ...,  0.96163386,
           0.9981197 ,  0.9643971 ],
         [-0.7237187 , -0.32701227, -0.8947814 , ...,  0.50270724,
           0.7940757 ,  0.9339568 ],
         ...,
         [ 0.151516  , -0.627613  , -0.9869401 , ...,  0.57188696,
          -0.05893363,  0.8263989 ],
         [ 0.03161711,  0.2545083 , -0.5745383 , ..., -0.7293503 ,
          -0.86519444, -0.27690402],
         [ 1.        ,  0.39446017, -0.19612233, ...,  0.34566635,
           0.85081923, -0.88040394]],

        [[ 1.        , -0.04039817, -0.22984667, ..., -0.9988913 ,
           0.768224  ,  0.36157072],
         [ 0.253389  ,  1.        , -0.38674298, ...,  0.96163386,
           0.9981197 ,  0.9643971 ],
         [-0.7237187 , -0.32701227, -0.8947814 , ...,  0.50270724,
           0.7940757 ,  0.9339568 ],
         ...,
         [ 0.151516  , -0.627613  , -0.9869401 , ...,  0.57188696,
          -0.05893363,  0.8263989 ],
         [ 0.03161711,  0.2545083 , -0.5745383 , ..., -0.7293503 ,
          -0.86519444, -0.27690402],
         [ 1.        ,  0.39446017, -0.19612233, ...,  0.34566635,
           0.85081923, -0.88040394]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [7], 'to': [8]}
ms node:
{'name': 'cos', 'output': array([[[[ 1.        , -0.04039817,  0.99980927, ..., -0.9988913 ,
           0.9088549 ,  0.36157075],
         [ 0.253389  ,  1.        , -0.38674295, ...,  0.95977384,
           0.9754915 , -0.6401908 ],
         [-0.8670406 ,  0.6185215 , -0.8947814 , ...,  0.7009493 ,
           0.7940757 ,  0.9339568 ],
         ...,
         [ 0.9456185 , -0.9240272 , -0.7888918 , ...,  0.6696996 ,
          -0.30407548,  0.8263989 ],
         [ 0.03161711,  0.2545083 ,  0.9888232 , ..., -0.7293503 ,
          -0.962355  ,  0.77642804],
         [ 1.        ,  0.39446017, -0.07233865, ...,  0.34566635,
           0.97368205,  0.82392687]],

        [[ 1.        , -0.04039817,  0.99980927, ..., -0.9988913 ,
           0.9088549 ,  0.36157075],
         [ 0.253389  ,  1.        , -0.38674295, ...,  0.95977384,
           0.9754915 , -0.6401908 ],
         [-0.8670406 ,  0.6185215 , -0.8947814 , ...,  0.7009493 ,
           0.7940757 ,  0.9339568 ],
         ...,
         [ 0.9456185 , -0.9240272 , -0.7888918 , ...,  0.6696996 ,
          -0.30407548,  0.8263989 ],
         [ 0.03161711,  0.2545083 ,  0.9888232 , ..., -0.7293503 ,
          -0.962355  ,  0.77642804],
         [ 1.        ,  0.39446017, -0.07233865, ...,  0.34566635,
           0.97368205,  0.82392687]],

        [[ 1.        , -0.04039817,  0.99980927, ..., -0.9988913 ,
           0.9088549 ,  0.36157075],
         [ 0.253389  ,  1.        , -0.38674295, ...,  0.95977384,
           0.9754915 , -0.6401908 ],
         [-0.8670406 ,  0.6185215 , -0.8947814 , ...,  0.7009493 ,
           0.7940757 ,  0.9339568 ],
         ...,
         [ 0.9456185 , -0.9240272 , -0.7888918 , ...,  0.6696996 ,
          -0.30407548,  0.8263989 ],
         [ 0.03161711,  0.2545083 ,  0.9888232 , ..., -0.7293503 ,
          -0.962355  ,  0.77642804],
         [ 1.        ,  0.39446017, -0.07233865, ...,  0.34566635,
           0.97368205,  0.82392687]],

        ...,

        [[ 1.        , -0.04039817,  0.99980927, ..., -0.9988913 ,
           0.9088549 ,  0.36157075],
         [ 0.253389  ,  1.        , -0.38674295, ...,  0.95977384,
           0.9754915 , -0.6401908 ],
         [-0.8670406 ,  0.6185215 , -0.8947814 , ...,  0.7009493 ,
           0.7940757 ,  0.9339568 ],
         ...,
         [ 0.9456185 , -0.9240272 , -0.7888918 , ...,  0.6696996 ,
          -0.30407548,  0.8263989 ],
         [ 0.03161711,  0.2545083 ,  0.9888232 , ..., -0.7293503 ,
          -0.962355  ,  0.77642804],
         [ 1.        ,  0.39446017, -0.07233865, ...,  0.34566635,
           0.97368205,  0.82392687]],

        [[ 1.        , -0.16465592, -0.7336887 , ..., -0.6041533 ,
           0.9088549 ,  0.6025086 ],
         [ 0.774175  ,  1.        , -0.38674295, ...,  0.66215855,
          -0.02605301, -0.64180225],
         [ 0.97013056,  0.09956768, -0.8947814 , ...,  0.8556097 ,
           0.7940757 , -0.9912927 ],
         ...,
         [ 0.9787944 ,  0.9175565 , -0.7888918 , ..., -0.90243864,
          -0.30407548, -0.7013702 ],
         [ 0.9154491 ,  0.37309182,  0.9996962 , ..., -0.6383647 ,
          -0.9950299 , -0.758509  ],
         [ 1.        ,  0.39446017,  0.9370187 , ...,  0.7917349 ,
          -0.9591932 ,  0.92202795]],

        [[ 1.        , -0.16465592, -0.7336887 , ..., -0.6041533 ,
           0.9088549 ,  0.6025086 ],
         [ 0.774175  ,  1.        , -0.38674295, ...,  0.66215855,
          -0.02605301, -0.64180225],
         [ 0.97013056,  0.09956768, -0.8947814 , ...,  0.8556097 ,
           0.7940757 , -0.9912927 ],
         ...,
         [ 0.9787944 ,  0.9175565 , -0.7888918 , ..., -0.90243864,
          -0.30407548, -0.7013702 ],
         [ 0.9154491 ,  0.37309182,  0.9996962 , ..., -0.6383647 ,
          -0.9950299 , -0.758509  ],
         [ 1.        ,  0.39446017,  0.9370187 , ...,  0.7917349 ,
          -0.9591932 ,  0.92202795]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [7], 'to': [8]}
torch node:
{'name': 'cos', 'output': array([[[[ 1.        , -0.04039817, -0.22984667, ..., -0.9988913 ,
           0.76822394,  0.36157075],
         [ 0.253389  ,  1.        , -0.38674295, ...,  0.96163386,
           0.9981197 ,  0.9643971 ],
         [-0.72371864, -0.32701227, -0.8947814 , ...,  0.50270724,
           0.7940757 ,  0.9339568 ],
         ...,
         [ 0.15151599, -0.627613  , -0.9869401 , ...,  0.5718869 ,
          -0.05893363,  0.8263989 ],
         [ 0.03161711,  0.2545083 , -0.5745383 , ..., -0.7293503 ,
          -0.86519444, -0.27690402],
         [ 1.        ,  0.39446017, -0.19612233, ...,  0.34566635,
           0.85081923, -0.88040394]],

        [[ 1.        , -0.04039817, -0.22984667, ..., -0.9988913 ,
           0.76822394,  0.36157075],
         [ 0.253389  ,  1.        , -0.38674295, ...,  0.96163386,
           0.9981197 ,  0.9643971 ],
         [-0.72371864, -0.32701227, -0.8947814 , ...,  0.50270724,
           0.7940757 ,  0.9339568 ],
         ...,
         [ 0.15151599, -0.627613  , -0.9869401 , ...,  0.5718869 ,
          -0.05893363,  0.8263989 ],
         [ 0.03161711,  0.2545083 , -0.5745383 , ..., -0.7293503 ,
          -0.86519444, -0.27690402],
         [ 1.        ,  0.39446017, -0.19612233, ...,  0.34566635,
           0.85081923, -0.88040394]],

        [[ 1.        , -0.04039817, -0.22984667, ..., -0.9988913 ,
           0.76822394,  0.36157075],
         [ 0.253389  ,  1.        , -0.38674295, ...,  0.96163386,
           0.9981197 ,  0.9643971 ],
         [-0.72371864, -0.32701227, -0.8947814 , ...,  0.50270724,
           0.7940757 ,  0.9339568 ],
         ...,
         [ 0.15151599, -0.627613  , -0.9869401 , ...,  0.5718869 ,
          -0.05893363,  0.8263989 ],
         [ 0.03161711,  0.2545083 , -0.5745383 , ..., -0.7293503 ,
          -0.86519444, -0.27690402],
         [ 1.        ,  0.39446017, -0.19612233, ...,  0.34566635,
           0.85081923, -0.88040394]],

        ...,

        [[ 1.        , -0.04039817, -0.22984667, ..., -0.9988913 ,
           0.76822394,  0.36157075],
         [ 0.253389  ,  1.        , -0.38674295, ...,  0.96163386,
           0.9981197 ,  0.9643971 ],
         [-0.72371864, -0.32701227, -0.8947814 , ...,  0.50270724,
           0.7940757 ,  0.9339568 ],
         ...,
         [ 0.15151599, -0.627613  , -0.9869401 , ...,  0.5718869 ,
          -0.05893363,  0.8263989 ],
         [ 0.03161711,  0.2545083 , -0.5745383 , ..., -0.7293503 ,
          -0.86519444, -0.27690402],
         [ 1.        ,  0.39446017, -0.19612233, ...,  0.34566635,
           0.85081923, -0.88040394]],

        [[ 1.        , -0.04039817, -0.22984667, ..., -0.9988913 ,
           0.76822394,  0.36157075],
         [ 0.253389  ,  1.        , -0.38674295, ...,  0.96163386,
           0.9981197 ,  0.9643971 ],
         [-0.72371864, -0.32701227, -0.8947814 , ...,  0.50270724,
           0.7940757 ,  0.9339568 ],
         ...,
         [ 0.15151599, -0.627613  , -0.9869401 , ...,  0.5718869 ,
          -0.05893363,  0.8263989 ],
         [ 0.03161711,  0.2545083 , -0.5745383 , ..., -0.7293503 ,
          -0.86519444, -0.27690402],
         [ 1.        ,  0.39446017, -0.19612233, ...,  0.34566635,
           0.85081923, -0.88040394]],

        [[ 1.        , -0.04039817, -0.22984667, ..., -0.9988913 ,
           0.76822394,  0.36157075],
         [ 0.253389  ,  1.        , -0.38674295, ...,  0.96163386,
           0.9981197 ,  0.9643971 ],
         [-0.72371864, -0.32701227, -0.8947814 , ...,  0.50270724,
           0.7940757 ,  0.9339568 ],
         ...,
         [ 0.15151599, -0.627613  , -0.9869401 , ...,  0.5718869 ,
          -0.05893363,  0.8263989 ],
         [ 0.03161711,  0.2545083 , -0.5745383 , ..., -0.7293503 ,
          -0.86519444, -0.27690402],
         [ 1.        ,  0.39446017, -0.19612233, ...,  0.34566635,
           0.85081923, -0.88040394]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [7], 'to': [8]}

generate models:448

analyse output arrays in iter:475

pre layer res:
19:add
{'name': 'add', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [11, 23], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [19], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [19], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [19], 'to': []}

generate models:456

analyse output arrays in iter:476

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [15], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [9], 'to': []}

pre layer res:
17:pad
{'name': 'pad', 'output': array([[92.3687 ,  0.     , 81.01776, ...,  0.     ,  0.     ,  0.     ]],
      dtype=float32), 'output_shape': TensorShape([1, 32768]), 'from': [16], 'to': [21]}
tf node:
{'name': 'sin', 'output': array([[-0.9528553,  0.       , -0.6159945, ...,  0.       ,  0.       ,
         0.       ]], dtype=float32), 'output_shape': TensorShape([1, 32768]), 'from': [17], 'to': [18]}
ms node:
{'name': 'sin', 'output': array([[-0.9528553 ,  0.        , -0.61601853, ...,  0.        ,
         0.        ,  0.        ]], dtype=float32), 'output_shape': (1, 32768), 'from': [17], 'to': [18]}
torch node:
{'name': 'sin', 'output': array([[-0.9528553 ,  0.        , -0.61599445, ...,  0.        ,
         0.        ,  0.        ]], dtype=float32), 'output_shape': torch.Size([1, 32768]), 'from': [17], 'to': [18]}

generate models:457

analyse output arrays in iter:485

pre layer res:
13:add
{'name': 'add', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [9, 16], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [13], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [13], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [13], 'to': []}

generate models:466

final statics:
total operators:28
tensorflow --> nums:62,distinct_bugs:5
mindspore --> nums:51,distinct_bugs:5
torch --> nums:41,distinct_bugs:6
tensorflow --> 
log:10
cos:17
conv2d:27
sin:7
softmax:1
mindspore --> 
log:13
cos:20
sin:16
conv2d:1
softmax:1
torch --> 
log:11
cos:17
sin:7
maxpool2d:3
softmax:1
flatten:2

generate models:479
