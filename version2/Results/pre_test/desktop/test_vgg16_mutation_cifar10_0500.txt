
final statics:
total operators:28
tensorflow --> nums:0,distinct_bugs:0
mindspore --> nums:0,distinct_bugs:0
torch --> nums:0,distinct_bugs:0
tensorflow --> 
mindspore --> 
torch --> 

generate models:10

analyse output arrays in iter:17

pre layer res:
17:softmax
{'name': 'softmax', 'output': array([[[[3.12502559e-30, 6.22068069e-18, 2.21838494e-08, ...,
          0.00000000e+00, 0.00000000e+00, 1.00000000e+00],
         [1.89211081e-27, 2.10060875e-12, 1.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [4.20398498e-27, 1.54519556e-37, 4.26486543e-19, ...,
          3.59873973e-20, 0.00000000e+00, 0.00000000e+00],
         ...,
         [3.76189031e-28, 0.00000000e+00, 0.00000000e+00, ...,
          9.99999881e-01, 0.00000000e+00, 8.76256542e-33],
         [1.02035775e-22, 0.00000000e+00, 0.00000000e+00, ...,
          7.95206123e-11, 6.73153743e-29, 0.00000000e+00],
         [4.34167857e-09, 1.00000000e+00, 0.00000000e+00, ...,
          4.85967820e-12, 1.61852007e-11, 7.37672019e-30]],

        [[3.12502559e-30, 6.22068069e-18, 2.21838494e-08, ...,
          0.00000000e+00, 0.00000000e+00, 1.00000000e+00],
         [1.89211081e-27, 2.10060875e-12, 1.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [4.20398498e-27, 1.54519556e-37, 4.26486543e-19, ...,
          3.59873973e-20, 0.00000000e+00, 0.00000000e+00],
         ...,
         [3.76189031e-28, 0.00000000e+00, 0.00000000e+00, ...,
          9.99999881e-01, 0.00000000e+00, 8.76256542e-33],
         [1.02035775e-22, 0.00000000e+00, 0.00000000e+00, ...,
          7.95206123e-11, 6.73153743e-29, 0.00000000e+00],
         [4.34167857e-09, 1.00000000e+00, 0.00000000e+00, ...,
          4.85967820e-12, 1.61852007e-11, 7.37672019e-30]],

        [[3.12502559e-30, 6.22068069e-18, 2.21838494e-08, ...,
          0.00000000e+00, 0.00000000e+00, 1.00000000e+00],
         [1.89211081e-27, 2.10060875e-12, 1.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [4.20398498e-27, 1.54519556e-37, 4.26486543e-19, ...,
          3.59873973e-20, 0.00000000e+00, 0.00000000e+00],
         ...,
         [3.76189031e-28, 0.00000000e+00, 0.00000000e+00, ...,
          9.99999881e-01, 0.00000000e+00, 8.76256542e-33],
         [1.02035775e-22, 0.00000000e+00, 0.00000000e+00, ...,
          7.95206123e-11, 6.73153743e-29, 0.00000000e+00],
         [4.34167857e-09, 1.00000000e+00, 0.00000000e+00, ...,
          4.85967820e-12, 1.61852007e-11, 7.37672019e-30]],

        ...,

        [[3.12502559e-30, 6.22068069e-18, 2.21838494e-08, ...,
          0.00000000e+00, 0.00000000e+00, 1.00000000e+00],
         [1.89211081e-27, 2.10060875e-12, 1.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [4.20398498e-27, 1.54519556e-37, 4.26486543e-19, ...,
          3.59873973e-20, 0.00000000e+00, 0.00000000e+00],
         ...,
         [3.76189031e-28, 0.00000000e+00, 0.00000000e+00, ...,
          9.99999881e-01, 0.00000000e+00, 8.76256542e-33],
         [1.02035775e-22, 0.00000000e+00, 0.00000000e+00, ...,
          7.95206123e-11, 6.73153743e-29, 0.00000000e+00],
         [4.34167857e-09, 1.00000000e+00, 0.00000000e+00, ...,
          4.85967820e-12, 1.61852007e-11, 7.37672019e-30]],

        [[3.12502559e-30, 6.22068069e-18, 2.21838494e-08, ...,
          0.00000000e+00, 0.00000000e+00, 1.00000000e+00],
         [1.89211081e-27, 2.10060875e-12, 1.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [4.20398498e-27, 1.54519556e-37, 4.26486543e-19, ...,
          3.59873973e-20, 0.00000000e+00, 0.00000000e+00],
         ...,
         [3.76189031e-28, 0.00000000e+00, 0.00000000e+00, ...,
          9.99999881e-01, 0.00000000e+00, 8.76256542e-33],
         [1.02035775e-22, 0.00000000e+00, 0.00000000e+00, ...,
          7.95206123e-11, 6.73153743e-29, 0.00000000e+00],
         [4.34167857e-09, 1.00000000e+00, 0.00000000e+00, ...,
          4.85967820e-12, 1.61852007e-11, 7.37672019e-30]],

        [[3.12502559e-30, 6.22068069e-18, 2.21838494e-08, ...,
          0.00000000e+00, 0.00000000e+00, 1.00000000e+00],
         [1.89211081e-27, 2.10060875e-12, 1.00000000e+00, ...,
          0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
         [4.20398498e-27, 1.54519556e-37, 4.26486543e-19, ...,
          3.59873973e-20, 0.00000000e+00, 0.00000000e+00],
         ...,
         [3.76189031e-28, 0.00000000e+00, 0.00000000e+00, ...,
          9.99999881e-01, 0.00000000e+00, 8.76256542e-33],
         [1.02035775e-22, 0.00000000e+00, 0.00000000e+00, ...,
          7.95206123e-11, 6.73153743e-29, 0.00000000e+00],
         [4.34167857e-09, 1.00000000e+00, 0.00000000e+00, ...,
          4.85967820e-12, 1.61852007e-11, 7.37672019e-30]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [9], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[2.6887842e-10, 1.2800000e+02, 1.2800000e+02, ...,
          3.0787940e-34, 1.2800000e+02, 1.2800000e+02],
         [2.6887886e-10, 1.2800000e+02, 2.5600000e+02, ...,
          4.6063844e-18, 1.2800000e+02, 1.2800000e+02],
         [2.6887836e-10, 1.2800056e+02, 3.8399966e+02, ...,
          4.6063939e-18, 4.6063844e-18, 0.0000000e+00],
         ...,
         [1.3060652e-20, 1.3060653e-20, 6.1535933e-12, ...,
          3.8399994e+02, 2.5599997e+02, 8.6175142e-27],
         [1.2800000e+02, 1.2800000e+02, 1.2800000e+02, ...,
          2.5599998e+02, 1.2799999e+02, 2.0717061e-09],
         [1.2800000e+02, 1.2800000e+02, 1.2800000e+02, ...,
          1.2800000e+02, 1.2872417e-08, 2.0717061e-09]],

        [[2.6887842e-10, 1.2800000e+02, 1.2800000e+02, ...,
          3.0787940e-34, 1.2800000e+02, 1.2800000e+02],
         [2.6887886e-10, 1.2800000e+02, 2.5600000e+02, ...,
          4.6063844e-18, 1.2800000e+02, 1.2800000e+02],
         [2.6887836e-10, 1.2800056e+02, 3.8399966e+02, ...,
          4.6063939e-18, 4.6063844e-18, 0.0000000e+00],
         ...,
         [1.3060652e-20, 1.3060653e-20, 6.1535933e-12, ...,
          3.8399994e+02, 2.5599997e+02, 8.6175142e-27],
         [1.2800000e+02, 1.2800000e+02, 1.2800000e+02, ...,
          2.5599998e+02, 1.2799999e+02, 2.0717061e-09],
         [1.2800000e+02, 1.2800000e+02, 1.2800000e+02, ...,
          1.2800000e+02, 1.2872417e-08, 2.0717061e-09]],

        [[2.6887842e-10, 1.2800000e+02, 1.2800000e+02, ...,
          3.0787940e-34, 1.2800000e+02, 1.2800000e+02],
         [2.6887886e-10, 1.2800000e+02, 2.5600000e+02, ...,
          4.6063844e-18, 1.2800000e+02, 1.2800000e+02],
         [2.6887836e-10, 1.2800056e+02, 3.8399966e+02, ...,
          4.6063939e-18, 4.6063844e-18, 0.0000000e+00],
         ...,
         [1.3060652e-20, 1.3060653e-20, 6.1535933e-12, ...,
          3.8399994e+02, 2.5599997e+02, 8.6175142e-27],
         [1.2800000e+02, 1.2800000e+02, 1.2800000e+02, ...,
          2.5599998e+02, 1.2799999e+02, 2.0717061e-09],
         [1.2800000e+02, 1.2800000e+02, 1.2800000e+02, ...,
          1.2800000e+02, 1.2872417e-08, 2.0717061e-09]],

        ...,

        [[2.6887842e-10, 1.2800000e+02, 1.2800000e+02, ...,
          3.0787940e-34, 1.2800000e+02, 1.2800000e+02],
         [2.6887886e-10, 1.2800000e+02, 2.5600000e+02, ...,
          4.6063844e-18, 1.2800000e+02, 1.2800000e+02],
         [2.6887836e-10, 1.2800056e+02, 3.8399966e+02, ...,
          4.6063939e-18, 4.6063844e-18, 0.0000000e+00],
         ...,
         [1.3060652e-20, 1.3060653e-20, 6.1535933e-12, ...,
          3.8399994e+02, 2.5599997e+02, 8.6175142e-27],
         [1.2800000e+02, 1.2800000e+02, 1.2800000e+02, ...,
          2.5599998e+02, 1.2799999e+02, 2.0717061e-09],
         [1.2800000e+02, 1.2800000e+02, 1.2800000e+02, ...,
          1.2800000e+02, 1.2872417e-08, 2.0717061e-09]],

        [[2.6887842e-10, 1.2800000e+02, 1.2800000e+02, ...,
          3.0787940e-34, 1.2800000e+02, 1.2800000e+02],
         [2.6887886e-10, 1.2800000e+02, 2.5600000e+02, ...,
          4.6063844e-18, 1.2800000e+02, 1.2800000e+02],
         [2.6887836e-10, 1.2800056e+02, 3.8399966e+02, ...,
          4.6063939e-18, 4.6063844e-18, 0.0000000e+00],
         ...,
         [1.3060652e-20, 1.3060653e-20, 6.1535933e-12, ...,
          3.8399994e+02, 2.5599997e+02, 8.6175142e-27],
         [1.2800000e+02, 1.2800000e+02, 1.2800000e+02, ...,
          2.5599998e+02, 1.2799999e+02, 2.0717061e-09],
         [1.2800000e+02, 1.2800000e+02, 1.2800000e+02, ...,
          1.2800000e+02, 1.2872417e-08, 2.0717061e-09]],

        [[2.6887842e-10, 1.2800000e+02, 1.2800000e+02, ...,
          3.0787940e-34, 1.2800000e+02, 1.2800000e+02],
         [2.6887886e-10, 1.2800000e+02, 2.5600000e+02, ...,
          4.6063844e-18, 1.2800000e+02, 1.2800000e+02],
         [2.6887836e-10, 1.2800056e+02, 3.8399966e+02, ...,
          4.6063939e-18, 4.6063844e-18, 0.0000000e+00],
         ...,
         [1.3060652e-20, 1.3060653e-20, 6.1535933e-12, ...,
          3.8399994e+02, 2.5599997e+02, 8.6175142e-27],
         [1.2800000e+02, 1.2800000e+02, 1.2800000e+02, ...,
          2.5599998e+02, 1.2799999e+02, 2.0717061e-09],
         [1.2800000e+02, 1.2800000e+02, 1.2800000e+02, ...,
          1.2800000e+02, 1.2872417e-08, 2.0717061e-09]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [17], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[2.68845918e-10, 1.28000000e+02, 1.28000000e+02, ...,
          3.08445241e-34, 1.28000000e+02, 1.28000000e+02],
         [2.68845918e-10, 1.28000000e+02, 2.56000000e+02, ...,
          4.60582561e-18, 1.28000000e+02, 1.28000000e+02],
         [2.68845057e-10, 1.28000671e+02, 3.84000000e+02, ...,
          4.60582561e-18, 4.60582561e-18, 0.00000000e+00],
         ...,
         [1.30717963e-20, 1.30717963e-20, 6.16035434e-12, ...,
          3.84000000e+02, 2.56000000e+02, 8.60908558e-27],
         [1.28000000e+02, 1.28000000e+02, 1.28000000e+02, ...,
          2.56000000e+02, 1.27999985e+02, 2.07145257e-09],
         [1.28000000e+02, 1.28000000e+02, 1.28000000e+02, ...,
          1.28000000e+02, 1.28560682e-08, 2.07145257e-09]],

        [[2.68845918e-10, 1.28000000e+02, 1.28000000e+02, ...,
          3.08445241e-34, 1.28000000e+02, 1.28000000e+02],
         [2.68845918e-10, 1.28000000e+02, 2.56000000e+02, ...,
          4.60582561e-18, 1.28000000e+02, 1.28000000e+02],
         [2.68845057e-10, 1.28000671e+02, 3.84000000e+02, ...,
          4.60582561e-18, 4.60582561e-18, 0.00000000e+00],
         ...,
         [1.30717963e-20, 1.30717963e-20, 6.16035434e-12, ...,
          3.84000000e+02, 2.56000000e+02, 8.60908558e-27],
         [1.28000000e+02, 1.28000000e+02, 1.28000000e+02, ...,
          2.56000000e+02, 1.27999985e+02, 2.07145257e-09],
         [1.28000000e+02, 1.28000000e+02, 1.28000000e+02, ...,
          1.28000000e+02, 1.28560682e-08, 2.07145257e-09]],

        [[2.68845918e-10, 1.28000000e+02, 1.28000000e+02, ...,
          3.08445241e-34, 1.28000000e+02, 1.28000000e+02],
         [2.68845918e-10, 1.28000000e+02, 2.56000000e+02, ...,
          4.60582561e-18, 1.28000000e+02, 1.28000000e+02],
         [2.68845057e-10, 1.28000671e+02, 3.84000000e+02, ...,
          4.60582561e-18, 4.60582561e-18, 0.00000000e+00],
         ...,
         [1.30717963e-20, 1.30717963e-20, 6.16035434e-12, ...,
          3.84000000e+02, 2.56000000e+02, 8.60908558e-27],
         [1.28000000e+02, 1.28000000e+02, 1.28000000e+02, ...,
          2.56000000e+02, 1.27999985e+02, 2.07145257e-09],
         [1.28000000e+02, 1.28000000e+02, 1.28000000e+02, ...,
          1.28000000e+02, 1.28560682e-08, 2.07145257e-09]],

        ...,

        [[2.68845918e-10, 1.28000000e+02, 1.28000000e+02, ...,
          3.08445241e-34, 1.28000000e+02, 1.28000000e+02],
         [2.68845918e-10, 1.28000000e+02, 2.56000000e+02, ...,
          4.60582561e-18, 1.28000000e+02, 1.28000000e+02],
         [2.68845057e-10, 1.28000671e+02, 3.84000000e+02, ...,
          4.60582561e-18, 4.60582561e-18, 0.00000000e+00],
         ...,
         [1.30717963e-20, 1.30717963e-20, 6.16035434e-12, ...,
          3.84000000e+02, 2.56000000e+02, 8.60908558e-27],
         [1.28000000e+02, 1.28000000e+02, 1.28000000e+02, ...,
          2.56000000e+02, 1.27999985e+02, 2.07145257e-09],
         [1.28000000e+02, 1.28000000e+02, 1.28000000e+02, ...,
          1.28000000e+02, 1.28560682e-08, 2.07145257e-09]],

        [[2.68845918e-10, 1.28000000e+02, 1.28000000e+02, ...,
          3.08445172e-34, 1.28000000e+02, 1.28000000e+02],
         [2.68845918e-10, 1.28000000e+02, 2.56000000e+02, ...,
          4.60582520e-18, 1.28000000e+02, 1.28000000e+02],
         [2.68845113e-10, 1.28000641e+02, 3.84000000e+02, ...,
          4.60582520e-18, 4.60582561e-18, 0.00000000e+00],
         ...,
         [1.30717930e-20, 1.30717930e-20, 6.16035478e-12, ...,
          3.84000000e+02, 2.56000000e+02, 8.60908558e-27],
         [1.28000000e+02, 1.28000000e+02, 1.28000000e+02, ...,
          2.56000000e+02, 1.27999985e+02, 2.07145257e-09],
         [1.28000000e+02, 1.28000000e+02, 1.28000000e+02, ...,
          1.28000000e+02, 1.28560682e-08, 2.07145257e-09]],

        [[2.68845918e-10, 1.28000000e+02, 1.28000000e+02, ...,
          3.08445172e-34, 1.28000000e+02, 1.28000000e+02],
         [2.68845918e-10, 1.28000000e+02, 2.56000000e+02, ...,
          4.60582520e-18, 1.28000000e+02, 1.28000000e+02],
         [2.68845113e-10, 1.28000641e+02, 3.84000000e+02, ...,
          4.60582520e-18, 4.60582561e-18, 0.00000000e+00],
         ...,
         [1.30717930e-20, 1.30717930e-20, 6.16035478e-12, ...,
          3.84000000e+02, 2.56000000e+02, 8.60908558e-27],
         [1.28000000e+02, 1.28000000e+02, 1.28000000e+02, ...,
          2.56000000e+02, 1.27999985e+02, 2.07145257e-09],
         [1.28000000e+02, 1.28000000e+02, 1.28000000e+02, ...,
          1.28000000e+02, 1.28560682e-08, 2.07145257e-09]]]],
      dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [17], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[2.70030054e-10, 1.28000000e+02, 1.28000000e+02, ...,
          3.08221598e-34, 1.28000000e+02, 1.28000000e+02],
         [2.70030054e-10, 1.28000000e+02, 2.56000000e+02, ...,
          4.61482823e-18, 1.28000000e+02, 1.28000000e+02],
         [2.70029221e-10, 1.28000671e+02, 3.84000000e+02, ...,
          4.61482823e-18, 4.61482864e-18, 2.33176064e-42],
         ...,
         [1.29922553e-20, 1.29922553e-20, 6.16486896e-12, ...,
          3.84000000e+02, 2.56000000e+02, 8.58913988e-27],
         [1.28000000e+02, 1.28000000e+02, 1.28000000e+02, ...,
          2.56000000e+02, 1.27999985e+02, 2.07448969e-09],
         [1.28000000e+02, 1.28000000e+02, 1.28000000e+02, ...,
          1.28000000e+02, 1.28281368e-08, 2.07448969e-09]],

        [[2.70030054e-10, 1.28000000e+02, 1.28000000e+02, ...,
          3.08221598e-34, 1.28000000e+02, 1.28000000e+02],
         [2.70030054e-10, 1.28000000e+02, 2.56000000e+02, ...,
          4.61482823e-18, 1.28000000e+02, 1.28000000e+02],
         [2.70029221e-10, 1.28000671e+02, 3.84000000e+02, ...,
          4.61482823e-18, 4.61482864e-18, 2.33176064e-42],
         ...,
         [1.29922553e-20, 1.29922553e-20, 6.16486896e-12, ...,
          3.84000000e+02, 2.56000000e+02, 8.58913988e-27],
         [1.28000000e+02, 1.28000000e+02, 1.28000000e+02, ...,
          2.56000000e+02, 1.27999985e+02, 2.07448969e-09],
         [1.28000000e+02, 1.28000000e+02, 1.28000000e+02, ...,
          1.28000000e+02, 1.28281368e-08, 2.07448969e-09]],

        [[2.70030054e-10, 1.28000000e+02, 1.28000000e+02, ...,
          3.08221598e-34, 1.28000000e+02, 1.28000000e+02],
         [2.70030054e-10, 1.28000000e+02, 2.56000000e+02, ...,
          4.61482823e-18, 1.28000000e+02, 1.28000000e+02],
         [2.70029221e-10, 1.28000671e+02, 3.84000000e+02, ...,
          4.61482823e-18, 4.61482864e-18, 2.33176064e-42],
         ...,
         [1.29922553e-20, 1.29922553e-20, 6.16486896e-12, ...,
          3.84000000e+02, 2.56000000e+02, 8.58913988e-27],
         [1.28000000e+02, 1.28000000e+02, 1.28000000e+02, ...,
          2.56000000e+02, 1.27999985e+02, 2.07448969e-09],
         [1.28000000e+02, 1.28000000e+02, 1.28000000e+02, ...,
          1.28000000e+02, 1.28281368e-08, 2.07448969e-09]],

        ...,

        [[2.70030054e-10, 1.28000000e+02, 1.28000000e+02, ...,
          3.08221598e-34, 1.28000000e+02, 1.28000000e+02],
         [2.70030054e-10, 1.28000000e+02, 2.56000000e+02, ...,
          4.61482823e-18, 1.28000000e+02, 1.28000000e+02],
         [2.70029221e-10, 1.28000671e+02, 3.84000000e+02, ...,
          4.61482823e-18, 4.61482864e-18, 2.33176064e-42],
         ...,
         [1.29922553e-20, 1.29922553e-20, 6.16486896e-12, ...,
          3.84000000e+02, 2.56000000e+02, 8.58913988e-27],
         [1.28000000e+02, 1.28000000e+02, 1.28000000e+02, ...,
          2.56000000e+02, 1.27999985e+02, 2.07448969e-09],
         [1.28000000e+02, 1.28000000e+02, 1.28000000e+02, ...,
          1.28000000e+02, 1.28281368e-08, 2.07448969e-09]],

        [[2.70030054e-10, 1.28000000e+02, 1.28000000e+02, ...,
          3.08221598e-34, 1.28000000e+02, 1.28000000e+02],
         [2.70030054e-10, 1.28000000e+02, 2.56000000e+02, ...,
          4.61482823e-18, 1.28000000e+02, 1.28000000e+02],
         [2.70029221e-10, 1.28000671e+02, 3.84000000e+02, ...,
          4.61482823e-18, 4.61482864e-18, 2.33176064e-42],
         ...,
         [1.29922553e-20, 1.29922553e-20, 6.16486896e-12, ...,
          3.84000000e+02, 2.56000000e+02, 8.58913988e-27],
         [1.28000000e+02, 1.28000000e+02, 1.28000000e+02, ...,
          2.56000000e+02, 1.27999985e+02, 2.07448969e-09],
         [1.28000000e+02, 1.28000000e+02, 1.28000000e+02, ...,
          1.28000000e+02, 1.28281368e-08, 2.07448969e-09]],

        [[2.70030054e-10, 1.28000000e+02, 1.28000000e+02, ...,
          3.08221598e-34, 1.28000000e+02, 1.28000000e+02],
         [2.70030054e-10, 1.28000000e+02, 2.56000000e+02, ...,
          4.61482823e-18, 1.28000000e+02, 1.28000000e+02],
         [2.70029221e-10, 1.28000671e+02, 3.84000000e+02, ...,
          4.61482823e-18, 4.61482864e-18, 2.33176064e-42],
         ...,
         [1.29922553e-20, 1.29922553e-20, 6.16486896e-12, ...,
          3.84000000e+02, 2.56000000e+02, 8.58913988e-27],
         [1.28000000e+02, 1.28000000e+02, 1.28000000e+02, ...,
          2.56000000e+02, 1.27999985e+02, 2.07448969e-09],
         [1.28000000e+02, 1.28000000e+02, 1.28000000e+02, ...,
          1.28000000e+02, 1.28281368e-08, 2.07448969e-09]]]],
      dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [17], 'to': []}

generate models:17

analyse output arrays in iter:18

pre layer res:
21:reshape
{'name': 'reshape', 'output': array([[[[36952.742, 55435.152, 55426.81 , ..., 55435.516, 55424.734,
          36951.22 ],
         [36952.742, 55435.152, 55426.81 , ..., 55435.516, 55424.734,
          36951.22 ],
         [36952.742, 55435.152, 55426.81 , ..., 55435.516, 55424.734,
          36951.22 ],
         ...,
         [36952.74 , 55435.145, 55426.805, ..., 55435.516, 55424.734,
          36951.22 ],
         [36952.742, 55435.152, 55426.81 , ..., 55435.51 , 55424.73 ,
          36951.215],
         [36952.74 , 55435.15 , 55426.8  , ..., 55435.516, 55424.734,
          36951.22 ]],

        [[36952.742, 55435.152, 55426.81 , ..., 55435.51 , 55424.73 ,
          36951.215],
         [36952.74 , 55435.15 , 55426.805, ..., 55435.516, 55424.734,
          36951.22 ],
         [36952.742, 55435.152, 55426.81 , ..., 55435.51 , 55424.73 ,
          36951.215],
         ...,
         [36952.74 , 55435.15 , 55426.805, ..., 55435.51 , 55424.73 ,
          36951.22 ],
         [36952.742, 55435.152, 55426.81 , ..., 55435.51 , 55424.73 ,
          36951.215],
         [36952.74 , 55435.15 , 55426.805, ..., 55435.51 , 55424.727,
          36951.215]],

        [[36952.742, 55435.152, 55426.81 , ..., 55435.51 , 55424.73 ,
          36951.215],
         [36952.74 , 55435.15 , 55426.805, ..., 55435.508, 55424.727,
          36951.21 ],
         [36952.742, 55435.152, 55426.81 , ..., 55435.51 , 55424.73 ,
          36951.21 ],
         ...,
         [36952.74 , 55435.15 , 55426.805, ..., 55435.51 , 55424.73 ,
          36951.215],
         [36952.742, 55435.152, 55426.81 , ..., 55435.51 , 55424.73 ,
          36951.215],
         [36952.74 , 55435.15 , 55426.8  , ..., 55435.508, 55424.727,
          36951.215]],

        ...,

        [[    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         ...,
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ]],

        [[    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         ...,
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ]],

        [[    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         ...,
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [20], 'to': [17]}
tf node:
{'name': 'sin', 'output': array([[[[ 0.9710041 , -0.9839911 ,  0.30562383, ..., -0.85644335,
           0.68658423, -0.19282614],
         [ 0.9710041 , -0.9839911 ,  0.30562383, ..., -0.85644335,
           0.68658423, -0.19282614],
         [ 0.9710041 , -0.9839911 ,  0.30562383, ..., -0.85644335,
           0.68658423, -0.19282614],
         ...,
         [ 0.9700629 , -0.98535335,  0.30934083, ..., -0.85644335,
           0.68658423, -0.19282614],
         [ 0.9710041 , -0.9839911 ,  0.30562383, ..., -0.8584534 ,
           0.68373895, -0.1966576 ],
         [ 0.9700629 , -0.98467976,  0.31305313, ..., -0.85644335,
           0.68658423, -0.19282614]],

        [[ 0.9710041 , -0.9839911 ,  0.30562383, ..., -0.8584534 ,
           0.68373895, -0.1966576 ],
         [ 0.9700629 , -0.98467976,  0.30934083, ..., -0.85644335,
           0.68658423, -0.19282614],
         [ 0.9710041 , -0.9839911 ,  0.30562383, ..., -0.8584534 ,
           0.68373895, -0.1966576 ],
         ...,
         [ 0.9700629 , -0.98467976,  0.30934083, ..., -0.8584534 ,
           0.68373895, -0.19282614],
         [ 0.9710041 , -0.9839911 ,  0.30562383, ..., -0.8584534 ,
           0.68373895, -0.1966576 ],
         [ 0.9700629 , -0.98467976,  0.30934083, ..., -0.8584534 ,
           0.6808832 , -0.1966576 ]],

        [[ 0.9710041 , -0.9839911 ,  0.30562383, ..., -0.8584534 ,
           0.68373895, -0.1966576 ],
         [ 0.9700629 , -0.98467976,  0.30934083, ..., -0.8604503 ,
           0.6808832 , -0.20048605],
         [ 0.9710041 , -0.9839911 ,  0.30562383, ..., -0.8584534 ,
           0.68373895, -0.20048605],
         ...,
         [ 0.9700629 , -0.98467976,  0.30934083, ..., -0.8584534 ,
           0.68373895, -0.1966576 ],
         [ 0.9710041 , -0.9839911 ,  0.30562383, ..., -0.8584534 ,
           0.68373895, -0.1966576 ],
         [ 0.9700629 , -0.98467976,  0.31305313, ..., -0.8604503 ,
           0.6808832 , -0.1966576 ]],

        ...,

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [21], 'to': [9]}
ms node:
{'name': 'sin', 'output': array([[[[ 0.97634   , -0.9787507 ,  0.29817587, ..., -0.8523841 ,
           0.69786006, -0.18515445],
         [ 0.97634   , -0.9787507 ,  0.29817587, ..., -0.8523841 ,
           0.69786006, -0.18515445],
         [ 0.97634   , -0.9787507 ,  0.29817587, ..., -0.8523841 ,
           0.69786006, -0.18515445],
         ...,
         [ 0.9754878 , -0.98032284,  0.30190215, ..., -0.8523841 ,
           0.69786006, -0.18515445],
         [ 0.97634   , -0.9787507 ,  0.29817587, ..., -0.85442024,
           0.695057  , -0.18899173],
         [ 0.9754878 , -0.9795442 ,  0.30562383, ..., -0.8523841 ,
           0.69786006, -0.18515445]],

        [[ 0.97634   , -0.9787507 ,  0.29817587, ..., -0.85442024,
           0.695057  , -0.18899173],
         [ 0.9754878 , -0.9795442 ,  0.30190215, ..., -0.8523841 ,
           0.69786006, -0.18515445],
         [ 0.97634   , -0.9787507 ,  0.29817587, ..., -0.85442024,
           0.695057  , -0.18899173],
         ...,
         [ 0.9754878 , -0.9795442 ,  0.30190215, ..., -0.85442024,
           0.695057  , -0.18515445],
         [ 0.97634   , -0.9787507 ,  0.29817587, ..., -0.85442024,
           0.695057  , -0.18899173],
         [ 0.9754878 , -0.9795442 ,  0.30190215, ..., -0.85442024,
           0.6922432 , -0.18899173]],

        [[ 0.97634   , -0.9787507 ,  0.29817587, ..., -0.85442024,
           0.695057  , -0.18899173],
         [ 0.9754878 , -0.9795442 ,  0.30190215, ..., -0.85644335,
           0.6922432 , -0.19282614],
         [ 0.97634   , -0.9787507 ,  0.29817587, ..., -0.85442024,
           0.695057  , -0.19282614],
         ...,
         [ 0.9754878 , -0.9795442 ,  0.30190215, ..., -0.85442024,
           0.695057  , -0.18899173],
         [ 0.97634   , -0.9787507 ,  0.29817587, ..., -0.85442024,
           0.695057  , -0.18899173],
         [ 0.9754878 , -0.9795442 ,  0.30562383, ..., -0.85644335,
           0.6922432 , -0.18899173]],

        ...,

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [21], 'to': [9]}
torch node:
{'name': 'sin', 'output': array([[[[ 0.97284216, -0.98032284,  0.28697   , ..., -0.8043557 ,
           0.72529846, -0.20048605],
         [ 0.97284216, -0.98032284,  0.28697   , ..., -0.8043557 ,
           0.72529846, -0.20048605],
         [ 0.97284216, -0.98032284,  0.28697   , ..., -0.8043557 ,
           0.72529846, -0.20048605],
         ...,
         [ 0.97193056, -0.98183507,  0.29070973, ..., -0.8043557 ,
           0.72529846, -0.20048605],
         [ 0.97284216, -0.98032284,  0.28697   , ..., -0.8066704 ,
           0.72260374, -0.20431146],
         [ 0.97193056, -0.98108643,  0.29444507, ..., -0.8043557 ,
           0.72529846, -0.20048605]],

        [[ 0.97284216, -0.98032284,  0.28697   , ..., -0.8066704 ,
           0.72260374, -0.20431146],
         [ 0.97193056, -0.98108643,  0.29070973, ..., -0.8043557 ,
           0.72529846, -0.20048605],
         [ 0.97284216, -0.98032284,  0.28697   , ..., -0.8066704 ,
           0.72260374, -0.20431146],
         ...,
         [ 0.97193056, -0.98108643,  0.29070973, ..., -0.8066704 ,
           0.72260374, -0.20048605],
         [ 0.97284216, -0.98032284,  0.28697   , ..., -0.8066704 ,
           0.72260374, -0.20431146],
         [ 0.97193056, -0.98108643,  0.29070973, ..., -0.8066704 ,
           0.719898  , -0.20431146]],

        [[ 0.97284216, -0.98032284,  0.28697   , ..., -0.8066704 ,
           0.72260374, -0.20431146],
         [ 0.97193056, -0.98108643,  0.29070973, ..., -0.8089729 ,
           0.719898  , -0.20813374],
         [ 0.97284216, -0.98032284,  0.28697   , ..., -0.8066704 ,
           0.72260374, -0.20813374],
         ...,
         [ 0.97193056, -0.98108643,  0.29070973, ..., -0.8066704 ,
           0.72260374, -0.20431146],
         [ 0.97284216, -0.98032284,  0.28697   , ..., -0.8066704 ,
           0.72260374, -0.20431146],
         [ 0.97193056, -0.98108643,  0.29444507, ..., -0.8089729 ,
           0.719898  , -0.20431146]],

        ...,

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [21], 'to': [9]}

generate models:18

analyse output arrays in iter:26

pre layer res:
19:exp
{'name': 'exp', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         ...,
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]],

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         ...,
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]],

        [[ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         ...,
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.],
         [ 1.,  1.,  1., ...,  1.,  1.,  1.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [9], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [19], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [19], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [19], 'to': []}

generate models:26

analyse output arrays in iter:31

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [11], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [9], 'to': []}

pre layer res:
1:relu
{'name': 'relu', 'output': array([[[[0.96018714, 0.        , 1.        , ..., 0.8578186 ,
          0.        , 0.9182947 ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.42423362, 0.        , ..., 0.6125244 ,
          0.3672633 , 0.        ],
         ...,
         [0.8090276 , 0.9775333 , 0.        , ..., 0.96945935,
          0.99937326, 0.        ],
         [0.        , 0.9410365 , 0.        , ..., 0.6195206 ,
          0.        , 0.74215424],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.525322  ]],

        [[0.96018714, 0.        , 1.        , ..., 0.8578186 ,
          0.        , 0.9182947 ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.42423362, 0.        , ..., 0.6125244 ,
          0.3672633 , 0.        ],
         ...,
         [0.8090276 , 0.9775333 , 0.        , ..., 0.96945935,
          0.99937326, 0.        ],
         [0.        , 0.9410365 , 0.        , ..., 0.6195206 ,
          0.        , 0.74215424],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.525322  ]],

        [[0.96018714, 0.        , 1.        , ..., 0.8578186 ,
          0.        , 0.9182947 ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.42423362, 0.        , ..., 0.6125244 ,
          0.3672633 , 0.        ],
         ...,
         [0.8090276 , 0.9775333 , 0.        , ..., 0.96945935,
          0.99937326, 0.        ],
         [0.        , 0.9410365 , 0.        , ..., 0.6195206 ,
          0.        , 0.74215424],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.525322  ]],

        ...,

        [[0.96018714, 0.        , 1.        , ..., 0.8578186 ,
          0.        , 0.9182947 ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.42423362, 0.        , ..., 0.6125244 ,
          0.3672633 , 0.        ],
         ...,
         [0.8090276 , 0.9775333 , 0.        , ..., 0.96945935,
          0.99937326, 0.        ],
         [0.        , 0.9410365 , 0.        , ..., 0.6195206 ,
          0.        , 0.74215424],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.525322  ]],

        [[0.96018714, 0.        , 1.        , ..., 0.8578186 ,
          0.        , 0.9182947 ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.42423362, 0.        , ..., 0.6125244 ,
          0.3672633 , 0.        ],
         ...,
         [0.8090276 , 0.9775333 , 0.        , ..., 0.96945935,
          0.99937326, 0.        ],
         [0.        , 0.9410365 , 0.        , ..., 0.6195206 ,
          0.        , 0.74215424],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.525322  ]],

        [[0.96018714, 0.        , 1.        , ..., 0.8578186 ,
          0.        , 0.9182947 ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.42423362, 0.        , ..., 0.6125244 ,
          0.3672633 , 0.        ],
         ...,
         [0.8090276 , 0.9775333 , 0.        , ..., 0.96945935,
          0.99937326, 0.        ],
         [0.        , 0.9410365 , 0.        , ..., 0.6195206 ,
          0.        , 0.74215424],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.525322  ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [12], 'to': [14]}
tf node:
{'name': 'log', 'output': array([[[[-4.0627077e-02,           -inf,  0.0000000e+00, ...,
          -1.5336262e-01,           -inf, -8.5236885e-02],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf, -8.5747099e-01,           -inf, ...,
          -4.9016652e-01, -1.0016763e+00,           -inf],
         ...,
         [-2.1192223e-01, -2.2722941e-02,           -inf, ...,
          -3.1016730e-02, -6.2693935e-04,           -inf],
         [          -inf, -6.0773328e-02,           -inf, ...,
          -4.7880933e-01,           -inf, -2.9819819e-01],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -6.4374381e-01]],

        [[-4.0627077e-02,           -inf,  0.0000000e+00, ...,
          -1.5336262e-01,           -inf, -8.5236885e-02],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf, -8.5747099e-01,           -inf, ...,
          -4.9016652e-01, -1.0016763e+00,           -inf],
         ...,
         [-2.1192223e-01, -2.2722941e-02,           -inf, ...,
          -3.1016730e-02, -6.2693935e-04,           -inf],
         [          -inf, -6.0773328e-02,           -inf, ...,
          -4.7880933e-01,           -inf, -2.9819819e-01],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -6.4374381e-01]],

        [[-4.0627077e-02,           -inf,  0.0000000e+00, ...,
          -1.5336262e-01,           -inf, -8.5236885e-02],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf, -8.5747099e-01,           -inf, ...,
          -4.9016652e-01, -1.0016763e+00,           -inf],
         ...,
         [-2.1192223e-01, -2.2722941e-02,           -inf, ...,
          -3.1016730e-02, -6.2693935e-04,           -inf],
         [          -inf, -6.0773328e-02,           -inf, ...,
          -4.7880933e-01,           -inf, -2.9819819e-01],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -6.4374381e-01]],

        ...,

        [[-4.0627077e-02,           -inf,  0.0000000e+00, ...,
          -1.5336262e-01,           -inf, -8.5236885e-02],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf, -8.5747099e-01,           -inf, ...,
          -4.9016652e-01, -1.0016763e+00,           -inf],
         ...,
         [-2.1192223e-01, -2.2722941e-02,           -inf, ...,
          -3.1016730e-02, -6.2693935e-04,           -inf],
         [          -inf, -6.0773328e-02,           -inf, ...,
          -4.7880933e-01,           -inf, -2.9819819e-01],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -6.4374381e-01]],

        [[-4.0627077e-02,           -inf,  0.0000000e+00, ...,
          -1.5336262e-01,           -inf, -8.5236885e-02],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf, -8.5747099e-01,           -inf, ...,
          -4.9016652e-01, -1.0016763e+00,           -inf],
         ...,
         [-2.1192223e-01, -2.2722941e-02,           -inf, ...,
          -3.1016730e-02, -6.2693935e-04,           -inf],
         [          -inf, -6.0773328e-02,           -inf, ...,
          -4.7880933e-01,           -inf, -2.9819819e-01],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -6.4374381e-01]],

        [[-4.0627077e-02,           -inf,  0.0000000e+00, ...,
          -1.5336262e-01,           -inf, -8.5236885e-02],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf, -8.5747099e-01,           -inf, ...,
          -4.9016652e-01, -1.0016763e+00,           -inf],
         ...,
         [-2.1192223e-01, -2.2722941e-02,           -inf, ...,
          -3.1016730e-02, -6.2693935e-04,           -inf],
         [          -inf, -6.0773328e-02,           -inf, ...,
          -4.7880933e-01,           -inf, -2.9819819e-01],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -6.4374381e-01]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [1], 'to': [2]}
ms node:
{'name': 'log', 'output': array([[[[-4.0627055e-02,           -inf, -1.4305115e-06, ...,
          -1.5336591e-01,           -inf, -8.5237876e-02],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf, -8.5747427e-01,           -inf, ...,
          -4.9016571e-01, -1.0016763e+00,           -inf],
         ...,
         [-2.1192464e-01, -2.2724371e-02,           -inf, ...,
          -3.1018158e-02, -6.2836986e-04,           -inf],
         [          -inf, -6.0773306e-02,           -inf, ...,
          -4.7880852e-01,           -inf, -2.9819831e-01],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -6.4374053e-01]],

        [[-4.0627055e-02,           -inf, -1.4305115e-06, ...,
          -1.5336591e-01,           -inf, -8.5237876e-02],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf, -8.5747427e-01,           -inf, ...,
          -4.9016571e-01, -1.0016763e+00,           -inf],
         ...,
         [-2.1192464e-01, -2.2724371e-02,           -inf, ...,
          -3.1018158e-02, -6.2836986e-04,           -inf],
         [          -inf, -6.0773306e-02,           -inf, ...,
          -4.7880852e-01,           -inf, -2.9819831e-01],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -6.4374053e-01]],

        [[-4.0627055e-02,           -inf, -1.4305115e-06, ...,
          -1.5336591e-01,           -inf, -8.5237876e-02],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf, -8.5747427e-01,           -inf, ...,
          -4.9016571e-01, -1.0016763e+00,           -inf],
         ...,
         [-2.1192464e-01, -2.2724371e-02,           -inf, ...,
          -3.1018158e-02, -6.2836986e-04,           -inf],
         [          -inf, -6.0773306e-02,           -inf, ...,
          -4.7880852e-01,           -inf, -2.9819831e-01],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -6.4374053e-01]],

        ...,

        [[-4.0627055e-02,           -inf, -1.4305115e-06, ...,
          -1.5336591e-01,           -inf, -8.5237876e-02],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf, -8.5747427e-01,           -inf, ...,
          -4.9016571e-01, -1.0016763e+00,           -inf],
         ...,
         [-2.1192464e-01, -2.2724371e-02,           -inf, ...,
          -3.1018158e-02, -6.2836986e-04,           -inf],
         [          -inf, -6.0773306e-02,           -inf, ...,
          -4.7880852e-01,           -inf, -2.9819831e-01],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -6.4374053e-01]],

        [[-4.0627055e-02,           -inf, -1.4305115e-06, ...,
          -1.5336591e-01,           -inf, -8.5237876e-02],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf, -8.5747427e-01,           -inf, ...,
          -4.9016571e-01, -1.0016763e+00,           -inf],
         ...,
         [-2.1192464e-01, -2.2724371e-02,           -inf, ...,
          -3.1018158e-02, -6.2836986e-04,           -inf],
         [          -inf, -6.0773306e-02,           -inf, ...,
          -4.7880852e-01,           -inf, -2.9819831e-01],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -6.4374053e-01]],

        [[-4.0627055e-02,           -inf, -1.4305115e-06, ...,
          -1.5336591e-01,           -inf, -8.5237876e-02],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf, -8.5747427e-01,           -inf, ...,
          -4.9016571e-01, -1.0016763e+00,           -inf],
         ...,
         [-2.1192464e-01, -2.2724371e-02,           -inf, ...,
          -3.1018158e-02, -6.2836986e-04,           -inf],
         [          -inf, -6.0773306e-02,           -inf, ...,
          -4.7880852e-01,           -inf, -2.9819831e-01],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -6.4374053e-01]]]],
      dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [1], 'to': [2]}
torch node:
{'name': 'log', 'output': array([[[[-4.0627077e-02,           -inf,  0.0000000e+00, ...,
          -1.5336262e-01,           -inf, -8.5236885e-02],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf, -8.5747099e-01,           -inf, ...,
          -4.9016652e-01, -1.0016763e+00,           -inf],
         ...,
         [-2.1192223e-01, -2.2722941e-02,           -inf, ...,
          -3.1016730e-02, -6.2693935e-04,           -inf],
         [          -inf, -6.0773328e-02,           -inf, ...,
          -4.7880933e-01,           -inf, -2.9819825e-01],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -6.4374381e-01]],

        [[-4.0627077e-02,           -inf,  0.0000000e+00, ...,
          -1.5336262e-01,           -inf, -8.5236885e-02],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf, -8.5747099e-01,           -inf, ...,
          -4.9016652e-01, -1.0016763e+00,           -inf],
         ...,
         [-2.1192223e-01, -2.2722941e-02,           -inf, ...,
          -3.1016730e-02, -6.2693935e-04,           -inf],
         [          -inf, -6.0773328e-02,           -inf, ...,
          -4.7880933e-01,           -inf, -2.9819825e-01],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -6.4374381e-01]],

        [[-4.0627077e-02,           -inf,  0.0000000e+00, ...,
          -1.5336262e-01,           -inf, -8.5236885e-02],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf, -8.5747099e-01,           -inf, ...,
          -4.9016652e-01, -1.0016763e+00,           -inf],
         ...,
         [-2.1192223e-01, -2.2722941e-02,           -inf, ...,
          -3.1016730e-02, -6.2693935e-04,           -inf],
         [          -inf, -6.0773328e-02,           -inf, ...,
          -4.7880933e-01,           -inf, -2.9819825e-01],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -6.4374381e-01]],

        ...,

        [[-4.0627077e-02,           -inf,  0.0000000e+00, ...,
          -1.5336262e-01,           -inf, -8.5236885e-02],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf, -8.5747099e-01,           -inf, ...,
          -4.9016652e-01, -1.0016763e+00,           -inf],
         ...,
         [-2.1192223e-01, -2.2722941e-02,           -inf, ...,
          -3.1016730e-02, -6.2693935e-04,           -inf],
         [          -inf, -6.0773328e-02,           -inf, ...,
          -4.7880933e-01,           -inf, -2.9819825e-01],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -6.4374381e-01]],

        [[-4.0627077e-02,           -inf,  0.0000000e+00, ...,
          -1.5336262e-01,           -inf, -8.5236885e-02],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf, -8.5747099e-01,           -inf, ...,
          -4.9016652e-01, -1.0016763e+00,           -inf],
         ...,
         [-2.1192223e-01, -2.2722941e-02,           -inf, ...,
          -3.1016730e-02, -6.2693935e-04,           -inf],
         [          -inf, -6.0773328e-02,           -inf, ...,
          -4.7880933e-01,           -inf, -2.9819825e-01],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -6.4374381e-01]],

        [[-4.0627077e-02,           -inf,  0.0000000e+00, ...,
          -1.5336262e-01,           -inf, -8.5236885e-02],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf, -8.5747099e-01,           -inf, ...,
          -4.9016652e-01, -1.0016763e+00,           -inf],
         ...,
         [-2.1192223e-01, -2.2722941e-02,           -inf, ...,
          -3.1016730e-02, -6.2693935e-04,           -inf],
         [          -inf, -6.0773328e-02,           -inf, ...,
          -4.7880933e-01,           -inf, -2.9819825e-01],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -6.4374381e-01]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [1], 'to': [2]}

generate models:31

final statics:
total operators:28
tensorflow --> nums:4,distinct_bugs:2
mindspore --> nums:3,distinct_bugs:3
torch --> nums:2,distinct_bugs:2
tensorflow --> 
conv2d:3
sin:1
mindspore --> 
conv2d:1
sin:1
log:1
torch --> 
conv2d:1
sin:1

generate models:49

analyse output arrays in iter:71

pre layer res:
14:log
{'name': 'log', 'output': array([[[[19.232054, 18.947836, 18.897356, ..., 18.623915, 19.010166,
          19.38234 ],
         [19.232054, 18.947836, 18.897356, ..., 18.623915, 19.010166,
          19.38234 ],
         [19.232054, 18.947836, 18.897356, ..., 18.623915, 19.010166,
          19.38234 ],
         ...,
         [19.232054, 18.947836, 18.897356, ..., 18.623915, 19.010166,
          19.38234 ],
         [19.232054, 18.947836, 18.897356, ..., 18.623915, 19.010166,
          19.38234 ],
         [19.232054, 18.947836, 18.897356, ..., 18.623915, 19.010166,
          19.38234 ]],

        [[19.232054, 18.947836, 18.897356, ..., 18.623915, 19.010166,
          19.38234 ],
         [19.232054, 18.947836, 18.897356, ..., 18.623915, 19.010166,
          19.38234 ],
         [19.232054, 18.947836, 18.897356, ..., 18.623915, 19.010166,
          19.38234 ],
         ...,
         [19.232054, 18.947836, 18.897356, ..., 18.623915, 19.010166,
          19.38234 ],
         [19.232054, 18.947836, 18.897356, ..., 18.623915, 19.010166,
          19.38234 ],
         [19.232054, 18.947836, 18.897356, ..., 18.623915, 19.010166,
          19.38234 ]],

        [[19.232054, 18.947836, 18.897356, ..., 18.623915, 19.010166,
          19.38234 ],
         [19.232054, 18.947836, 18.897356, ..., 18.623915, 19.010166,
          19.38234 ],
         [19.232054, 18.947836, 18.897356, ..., 18.623915, 19.010166,
          19.38234 ],
         ...,
         [19.232054, 18.947836, 18.897356, ..., 18.623915, 19.010166,
          19.38234 ],
         [19.232054, 18.947836, 18.897356, ..., 18.623915, 19.010166,
          19.38234 ],
         [19.232054, 18.947836, 18.897356, ..., 18.623915, 19.010166,
          19.38234 ]],

        ...,

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [19], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [14], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [14], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [14], 'to': []}

generate models:69

analyse output arrays in iter:76

pre layer res:
14:log
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [11], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [14], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [14], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [14], 'to': []}

generate models:74

analyse output arrays in iter:79

pre layer res:
11:sin
{'name': 'sin', 'output': array([[[[-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ],
         [-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ],
         [-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ],
         ...,
         [-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ],
         [-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ],
         [-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ]],

        [[-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ],
         [-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ],
         [-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ],
         ...,
         [-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ],
         [-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ],
         [-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ]],

        [[-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ],
         [-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ],
         [-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ],
         ...,
         [-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ],
         [-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ],
         [-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ]],

        ...,

        [[-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ],
         [-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ],
         [-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ],
         ...,
         [-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ],
         [-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ],
         [-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ]],

        [[-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ],
         [-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ],
         [-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ],
         ...,
         [-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ],
         [-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ],
         [-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ]],

        [[-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ],
         [-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ],
         [-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ],
         ...,
         [-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ],
         [-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ],
         [-0.8465153 ,  0.99203664,  0.78398275, ...,  0.06626604,
           0.7057977 , -0.9941824 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [5], 'to': [13]}
tf node:
{'name': 'log', 'output': array([[[[        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan],
         ...,
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan]],

        [[        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan],
         ...,
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan]],

        [[        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan],
         ...,
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan]],

        ...,

        [[        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan],
         ...,
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan]],

        [[        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan],
         ...,
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan]],

        [[        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan],
         ...,
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842667,         nan]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [11], 'to': [21]}
ms node:
{'name': 'log', 'output': array([[[[        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan],
         [        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan],
         [        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan],
         ...,
         [        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan],
         [        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan],
         [        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan]],

        [[        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan],
         [        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan],
         [        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan],
         ...,
         [        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan],
         [        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan],
         [        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan]],

        [[        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan],
         [        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan],
         [        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan],
         ...,
         [        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan],
         [        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan],
         [        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan]],

        ...,

        [[        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan],
         [        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan],
         [        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan],
         ...,
         [        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan],
         [        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan],
         [        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan]],

        [[        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan],
         [        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan],
         [        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan],
         ...,
         [        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan],
         [        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan],
         [        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan]],

        [[        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan],
         [        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan],
         [        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan],
         ...,
         [        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan],
         [        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan],
         [        nan, -0.00799667, -0.24337067, ..., -2.7140741 ,
          -0.3484239 ,         nan]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [11], 'to': [21]}
torch node:
{'name': 'log', 'output': array([[[[        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan],
         ...,
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan]],

        [[        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan],
         ...,
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan]],

        [[        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan],
         ...,
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan]],

        ...,

        [[        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan],
         ...,
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan]],

        [[        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan],
         ...,
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan]],

        [[        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan],
         ...,
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan],
         [        nan, -0.00799524, -0.24336825, ..., -2.7140777 ,
          -0.34842676,         nan]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [11], 'to': [21]}

generate models:77

final statics:
total operators:28
tensorflow --> nums:7,distinct_bugs:3
mindspore --> nums:4,distinct_bugs:3
torch --> nums:3,distinct_bugs:3
tensorflow --> 
conv2d:5
sin:1
log:1
mindspore --> 
conv2d:1
sin:1
log:2
torch --> 
conv2d:1
sin:1
log:1

generate models:95

analyse output arrays in iter:103

pre layer res:
18:flatten
{'name': 'flatten', 'output': array([[148.41316 , 148.41316 , 148.41316 , ..., 403.4288  , 403.4288  ,
          7.389056]], dtype=float32), 'output_shape': TensorShape([1, 65536]), 'from': [11], 'to': [21]}
tf node:
{'name': 'cos', 'output': array([[-0.72600096, -0.72600096, -0.72600096, ...,  0.26273286,
         0.26273286,  0.44835615]], dtype=float32), 'output_shape': TensorShape([1, 65536]), 'from': [18], 'to': [19]}
ms node:
{'name': 'cos', 'output': array([[-0.72601146, -0.72601146, -0.72601146, ...,  0.2627623 ,
         0.2627623 ,  0.44835657]], dtype=float32), 'output_shape': (1, 65536), 'from': [18], 'to': [19]}
torch node:
{'name': 'cos', 'output': array([[-0.72600096, -0.72600096, -0.72600096, ...,  0.26273286,
         0.26273286,  0.44835615]], dtype=float32), 'output_shape': torch.Size([1, 65536]), 'from': [18], 'to': [19]}

generate models:99

analyse output arrays in iter:113

pre layer res:
11:log
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [15], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [11], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [11], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [11], 'to': []}

pre layer res:
18:flatten
{'name': 'flatten', 'output': array([[inf, inf, inf, ..., inf, inf, inf]], dtype=float32), 'output_shape': TensorShape([1, 2048]), 'from': [17], 'to': [21]}
tf node:
{'name': 'softmax', 'output': array([[nan, nan, nan, ..., nan, nan, nan]], dtype=float32), 'output_shape': TensorShape([1, 2048]), 'from': [18], 'to': [19]}
ms node:
{'name': 'softmax', 'output': array([[nan, nan, nan, ..., nan, nan, nan]], dtype=float32), 'output_shape': (1, 2048), 'from': [18], 'to': [19]}
torch node:
{'name': 'softmax', 'output': array([[nan, nan, nan, ..., nan, nan, nan]], dtype=float32), 'output_shape': torch.Size([1, 2048]), 'from': [18], 'to': [19]}

generate models:108

analyse output arrays in iter:121

pre layer res:
11:log
{'name': 'log', 'output': array([[[[4.0054846,      -inf,      -inf, ..., 2.3450036, 2.8043687,
               -inf],
         [4.14882  ,      -inf, 4.1511936, ...,      -inf, 1.7809949,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf, 3.9595428,
          2.446637 ],
         ...,
         [     -inf, 3.7128575, 4.143131 , ...,      -inf, 3.6089306,
          3.1573591],
         [     -inf,      -inf,      -inf, ..., 3.3905861, 3.946961 ,
               -inf],
         [3.8988953,      -inf, 4.14883  , ...,      -inf, 3.657229 ,
          3.3905861]],

        [[4.0054846,      -inf,      -inf, ..., 2.3450036, 2.8043687,
               -inf],
         [4.14882  ,      -inf, 4.1511936, ...,      -inf, 1.7809949,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf, 3.9595428,
          2.446637 ],
         ...,
         [     -inf, 3.7128575, 4.143131 , ...,      -inf, 3.6089306,
          3.1573591],
         [     -inf,      -inf,      -inf, ..., 3.3905861, 3.946961 ,
               -inf],
         [3.8988953,      -inf, 4.14883  , ...,      -inf, 3.657229 ,
          3.3905861]],

        [[4.0054846,      -inf,      -inf, ..., 2.3450036, 2.8043687,
               -inf],
         [4.14882  ,      -inf, 4.1511936, ...,      -inf, 1.7809949,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf, 3.9595428,
          2.446637 ],
         ...,
         [     -inf, 3.7128575, 4.143131 , ...,      -inf, 3.6089306,
          3.1573591],
         [     -inf,      -inf,      -inf, ..., 3.3905861, 3.946961 ,
               -inf],
         [3.8988953,      -inf, 4.14883  , ...,      -inf, 3.657229 ,
          3.3905861]],

        ...,

        [[4.0054846,      -inf,      -inf, ..., 2.3450036, 2.8043687,
               -inf],
         [4.14882  ,      -inf, 4.1511936, ...,      -inf, 1.7809949,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf, 3.9595428,
          2.446637 ],
         ...,
         [     -inf, 3.7128575, 4.143131 , ...,      -inf, 3.6089306,
          3.1573591],
         [     -inf,      -inf,      -inf, ..., 3.3905861, 3.946961 ,
               -inf],
         [3.8988953,      -inf, 4.14883  , ...,      -inf, 3.657229 ,
          3.3905861]],

        [[4.0054846,      -inf,      -inf, ..., 2.3450036, 2.8043687,
               -inf],
         [4.14882  ,      -inf, 4.1511936, ...,      -inf, 1.7809949,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf, 3.9595428,
          2.446637 ],
         ...,
         [     -inf, 3.7128575, 4.143131 , ...,      -inf, 3.6089306,
          3.1573591],
         [     -inf,      -inf,      -inf, ..., 3.3905861, 3.946961 ,
               -inf],
         [3.8988953,      -inf, 4.14883  , ...,      -inf, 3.657229 ,
          3.3905861]],

        [[4.0054846,      -inf,      -inf, ..., 2.3450036, 2.8043687,
               -inf],
         [4.14882  ,      -inf, 4.1511936, ...,      -inf, 1.7809949,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf, 3.9595428,
          2.446637 ],
         ...,
         [     -inf, 3.7128575, 4.143131 , ...,      -inf, 3.6089306,
          3.1573591],
         [     -inf,      -inf,      -inf, ..., 3.3905861, 3.946961 ,
               -inf],
         [3.8988953,      -inf, 4.14883  , ...,      -inf, 3.657229 ,
          3.3905861]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [24], 'to': [4, 16]}
tf node:
{'name': 'maxpool2d', 'output': array([[[[ 4.1488199e+00,  4.1511936e+00,  4.0490212e+00, ...,
           4.1549654e+00,  4.0881739e+00,  2.8043687e+00],
         [-3.4028235e+38,  4.0810938e+00,  4.1549654e+00, ...,
          -3.4028235e+38,  3.3907013e+00,  3.9717009e+00],
         [ 2.9846356e+00,  4.0159159e+00,  4.0400486e+00, ...,
           3.5006087e+00,  3.9717009e+00,  4.1511936e+00],
         ...,
         [ 4.1574717e+00,  4.1415133e+00,  4.0533748e+00, ...,
          -3.4028235e+38, -3.4028235e+38,  3.7732227e+00],
         [ 4.0490212e+00,  4.1431308e+00,  4.1278663e+00, ...,
           3.9595847e+00,  3.4708641e+00,  4.1579051e+00],
         [ 3.8988953e+00,  4.1488299e+00,  4.1579022e+00, ...,
           4.0400796e+00,  3.8360815e+00,  3.9469609e+00]],

        [[ 4.1488199e+00,  4.1511936e+00,  4.0490212e+00, ...,
           4.1549654e+00,  4.0881739e+00,  2.8043687e+00],
         [-3.4028235e+38,  4.0810938e+00,  4.1549654e+00, ...,
          -3.4028235e+38,  3.3907013e+00,  3.9717009e+00],
         [ 2.9846356e+00,  4.0159159e+00,  4.0400486e+00, ...,
           3.5006087e+00,  3.9717009e+00,  4.1511936e+00],
         ...,
         [ 4.1574717e+00,  4.1415133e+00,  4.0533748e+00, ...,
          -3.4028235e+38, -3.4028235e+38,  3.7732227e+00],
         [ 4.0490212e+00,  4.1431308e+00,  4.1278663e+00, ...,
           3.9595847e+00,  3.4708641e+00,  4.1579051e+00],
         [ 3.8988953e+00,  4.1488299e+00,  4.1579022e+00, ...,
           4.0400796e+00,  3.8360815e+00,  3.9469609e+00]],

        [[ 4.1488199e+00,  4.1511936e+00,  4.0490212e+00, ...,
           4.1549654e+00,  4.0881739e+00,  2.8043687e+00],
         [-3.4028235e+38,  4.0810938e+00,  4.1549654e+00, ...,
          -3.4028235e+38,  3.3907013e+00,  3.9717009e+00],
         [ 2.9846356e+00,  4.0159159e+00,  4.0400486e+00, ...,
           3.5006087e+00,  3.9717009e+00,  4.1511936e+00],
         ...,
         [ 4.1574717e+00,  4.1415133e+00,  4.0533748e+00, ...,
          -3.4028235e+38, -3.4028235e+38,  3.7732227e+00],
         [ 4.0490212e+00,  4.1431308e+00,  4.1278663e+00, ...,
           3.9595847e+00,  3.4708641e+00,  4.1579051e+00],
         [ 3.8988953e+00,  4.1488299e+00,  4.1579022e+00, ...,
           4.0400796e+00,  3.8360815e+00,  3.9469609e+00]],

        ...,

        [[ 4.1488199e+00,  4.1511936e+00,  4.0490212e+00, ...,
           4.1549654e+00,  4.0881739e+00,  2.8043687e+00],
         [-3.4028235e+38,  4.0810938e+00,  4.1549654e+00, ...,
          -3.4028235e+38,  3.3907013e+00,  3.9717009e+00],
         [ 2.9846356e+00,  4.0159159e+00,  4.0400486e+00, ...,
           3.5006087e+00,  3.9717009e+00,  4.1511936e+00],
         ...,
         [ 4.1574717e+00,  4.1415133e+00,  4.0533748e+00, ...,
          -3.4028235e+38, -3.4028235e+38,  3.7732227e+00],
         [ 4.0490212e+00,  4.1431308e+00,  4.1278663e+00, ...,
           3.9595847e+00,  3.4708641e+00,  4.1579051e+00],
         [ 3.8988953e+00,  4.1488299e+00,  4.1579022e+00, ...,
           4.0400796e+00,  3.8360815e+00,  3.9469609e+00]],

        [[ 4.1488199e+00,  4.1511936e+00,  4.0490212e+00, ...,
           4.1549654e+00,  4.0881739e+00,  2.8043687e+00],
         [-3.4028235e+38,  4.0810938e+00,  4.1549654e+00, ...,
          -3.4028235e+38,  3.3907013e+00,  3.9717009e+00],
         [ 2.9846356e+00,  4.0159159e+00,  4.0400486e+00, ...,
           3.5006087e+00,  3.9717009e+00,  4.1511936e+00],
         ...,
         [ 4.1574717e+00,  4.1415133e+00,  4.0533748e+00, ...,
          -3.4028235e+38, -3.4028235e+38,  3.7732227e+00],
         [ 4.0490212e+00,  4.1431308e+00,  4.1278663e+00, ...,
           3.9595847e+00,  3.4708641e+00,  4.1579051e+00],
         [ 3.8988953e+00,  4.1488299e+00,  4.1579022e+00, ...,
           4.0400796e+00,  3.8360815e+00,  3.9469609e+00]],

        [[ 4.1488199e+00,  4.1511936e+00,  4.0490212e+00, ...,
           4.1549654e+00,  4.0881739e+00,  2.8043687e+00],
         [-3.4028235e+38,  4.0810938e+00,  4.1549654e+00, ...,
          -3.4028235e+38,  3.3907013e+00,  3.9717009e+00],
         [ 2.9846356e+00,  4.0159159e+00,  4.0400486e+00, ...,
           3.5006087e+00,  3.9717009e+00,  4.1511936e+00],
         ...,
         [ 4.1574717e+00,  4.1415133e+00,  4.0533748e+00, ...,
          -3.4028235e+38, -3.4028235e+38,  3.7732227e+00],
         [ 4.0490212e+00,  4.1431308e+00,  4.1278663e+00, ...,
           3.9595847e+00,  3.4708641e+00,  4.1579051e+00],
         [ 3.8988953e+00,  4.1488299e+00,  4.1579022e+00, ...,
           4.0400796e+00,  3.8360815e+00,  3.9469609e+00]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [11], 'to': [15]}
ms node:
{'name': 'maxpool2d', 'output': array([[[[ 4.1488185e+00,  4.1511922e+00,  4.0490203e+00, ...,
           4.1549640e+00,  4.0881739e+00,  2.8043723e+00],
         [-3.4028235e+38,  4.0810938e+00,  4.1549640e+00, ...,
          -3.4028235e+38,  3.3907013e+00,  3.9716976e+00],
         [ 2.9846365e+00,  4.0159149e+00,  4.0400476e+00, ...,
           3.5006120e+00,  3.9716976e+00,  4.1511922e+00],
         ...,
         [ 4.1574702e+00,  4.1415119e+00,  4.0533738e+00, ...,
          -3.4028235e+38, -3.4028235e+38,  3.7732208e+00],
         [ 4.0490203e+00,  4.1431293e+00,  4.1278648e+00, ...,
           3.9595823e+00,  3.4708626e+00,  4.1579037e+00],
         [ 3.8988931e+00,  4.1488285e+00,  4.1579008e+00, ...,
           4.0400786e+00,  3.8360815e+00,  3.9469585e+00]],

        [[ 4.1488185e+00,  4.1511922e+00,  4.0490203e+00, ...,
           4.1549640e+00,  4.0881739e+00,  2.8043723e+00],
         [-3.4028235e+38,  4.0810938e+00,  4.1549640e+00, ...,
          -3.4028235e+38,  3.3907013e+00,  3.9716976e+00],
         [ 2.9846365e+00,  4.0159149e+00,  4.0400476e+00, ...,
           3.5006120e+00,  3.9716976e+00,  4.1511922e+00],
         ...,
         [ 4.1574702e+00,  4.1415119e+00,  4.0533738e+00, ...,
          -3.4028235e+38, -3.4028235e+38,  3.7732208e+00],
         [ 4.0490203e+00,  4.1431293e+00,  4.1278648e+00, ...,
           3.9595823e+00,  3.4708626e+00,  4.1579037e+00],
         [ 3.8988931e+00,  4.1488285e+00,  4.1579008e+00, ...,
           4.0400786e+00,  3.8360815e+00,  3.9469585e+00]],

        [[ 4.1488185e+00,  4.1511922e+00,  4.0490203e+00, ...,
           4.1549640e+00,  4.0881739e+00,  2.8043723e+00],
         [-3.4028235e+38,  4.0810938e+00,  4.1549640e+00, ...,
          -3.4028235e+38,  3.3907013e+00,  3.9716976e+00],
         [ 2.9846365e+00,  4.0159149e+00,  4.0400476e+00, ...,
           3.5006120e+00,  3.9716976e+00,  4.1511922e+00],
         ...,
         [ 4.1574702e+00,  4.1415119e+00,  4.0533738e+00, ...,
          -3.4028235e+38, -3.4028235e+38,  3.7732208e+00],
         [ 4.0490203e+00,  4.1431293e+00,  4.1278648e+00, ...,
           3.9595823e+00,  3.4708626e+00,  4.1579037e+00],
         [ 3.8988931e+00,  4.1488285e+00,  4.1579008e+00, ...,
           4.0400786e+00,  3.8360815e+00,  3.9469585e+00]],

        ...,

        [[ 4.1488185e+00,  4.1511922e+00,  4.0490203e+00, ...,
           4.1549640e+00,  4.0881739e+00,  2.8043723e+00],
         [-3.4028235e+38,  4.0810938e+00,  4.1549640e+00, ...,
          -3.4028235e+38,  3.3907013e+00,  3.9716976e+00],
         [ 2.9846365e+00,  4.0159149e+00,  4.0400476e+00, ...,
           3.5006120e+00,  3.9716976e+00,  4.1511922e+00],
         ...,
         [ 4.1574702e+00,  4.1415119e+00,  4.0533738e+00, ...,
          -3.4028235e+38, -3.4028235e+38,  3.7732208e+00],
         [ 4.0490203e+00,  4.1431293e+00,  4.1278648e+00, ...,
           3.9595823e+00,  3.4708626e+00,  4.1579037e+00],
         [ 3.8988931e+00,  4.1488285e+00,  4.1579008e+00, ...,
           4.0400786e+00,  3.8360815e+00,  3.9469585e+00]],

        [[ 4.1488194e+00,  4.1511917e+00,  4.0490203e+00, ...,
           4.1549644e+00,  4.0881748e+00,  2.8043718e+00],
         [-3.4028235e+38,  4.0810938e+00,  4.1549644e+00, ...,
          -3.4028235e+38,  3.3907013e+00,  3.9716978e+00],
         [ 2.9846365e+00,  4.0159140e+00,  4.0400476e+00, ...,
           3.5006123e+00,  3.9716978e+00,  4.1511917e+00],
         ...,
         [ 4.1574712e+00,  4.1415114e+00,  4.0533733e+00, ...,
          -3.4028235e+38, -3.4028235e+38,  3.7732210e+00],
         [ 4.0490203e+00,  4.1431293e+00,  4.1278648e+00, ...,
           3.9595823e+00,  3.4708617e+00,  4.1579032e+00],
         [ 3.8988931e+00,  4.1488276e+00,  4.1579008e+00, ...,
           4.0400791e+00,  3.8360820e+00,  3.9469581e+00]],

        [[ 4.1488194e+00,  4.1511917e+00,  4.0490203e+00, ...,
           4.1549644e+00,  4.0881748e+00,  2.8043718e+00],
         [-3.4028235e+38,  4.0810938e+00,  4.1549644e+00, ...,
          -3.4028235e+38,  3.3907013e+00,  3.9716978e+00],
         [ 2.9846365e+00,  4.0159140e+00,  4.0400476e+00, ...,
           3.5006123e+00,  3.9716978e+00,  4.1511917e+00],
         ...,
         [ 4.1574712e+00,  4.1415114e+00,  4.0533733e+00, ...,
          -3.4028235e+38, -3.4028235e+38,  3.7732210e+00],
         [ 4.0490203e+00,  4.1431293e+00,  4.1278648e+00, ...,
           3.9595823e+00,  3.4708617e+00,  4.1579032e+00],
         [ 3.8988931e+00,  4.1488276e+00,  4.1579008e+00, ...,
           4.0400791e+00,  3.8360820e+00,  3.9469581e+00]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [11], 'to': [15]}
torch node:
{'name': 'maxpool2d', 'output': array([[[[4.14882  , 4.1511936, 4.0490212, ..., 4.1549654, 4.088174 ,
          2.804369 ],
         [     -inf, 4.081094 , 4.1549654, ...,      -inf, 3.3907013,
          3.971701 ],
         [2.9846356, 4.015916 , 4.0400486, ..., 3.5006087, 3.971701 ,
          4.1511936],
         ...,
         [4.1574717, 4.1415133, 4.053375 , ...,      -inf,      -inf,
          3.7732227],
         [4.0490212, 4.143131 , 4.1278663, ..., 3.9595847, 3.470864 ,
          4.157905 ],
         [3.8988953, 4.14883  , 4.1579022, ..., 4.0400796, 3.8360815,
          3.946961 ]],

        [[4.14882  , 4.1511936, 4.0490212, ..., 4.1549654, 4.088174 ,
          2.804369 ],
         [     -inf, 4.081094 , 4.1549654, ...,      -inf, 3.3907013,
          3.971701 ],
         [2.9846356, 4.015916 , 4.0400486, ..., 3.5006087, 3.971701 ,
          4.1511936],
         ...,
         [4.1574717, 4.1415133, 4.053375 , ...,      -inf,      -inf,
          3.7732227],
         [4.0490212, 4.143131 , 4.1278663, ..., 3.9595847, 3.470864 ,
          4.157905 ],
         [3.8988953, 4.14883  , 4.1579022, ..., 4.0400796, 3.8360815,
          3.946961 ]],

        [[4.14882  , 4.1511936, 4.0490212, ..., 4.1549654, 4.088174 ,
          2.804369 ],
         [     -inf, 4.081094 , 4.1549654, ...,      -inf, 3.3907013,
          3.971701 ],
         [2.9846356, 4.015916 , 4.0400486, ..., 3.5006087, 3.971701 ,
          4.1511936],
         ...,
         [4.1574717, 4.1415133, 4.053375 , ...,      -inf,      -inf,
          3.7732227],
         [4.0490212, 4.143131 , 4.1278663, ..., 3.9595847, 3.470864 ,
          4.157905 ],
         [3.8988953, 4.14883  , 4.1579022, ..., 4.0400796, 3.8360815,
          3.946961 ]],

        ...,

        [[4.14882  , 4.1511936, 4.0490212, ..., 4.1549654, 4.088174 ,
          2.804369 ],
         [     -inf, 4.081094 , 4.1549654, ...,      -inf, 3.3907013,
          3.971701 ],
         [2.9846356, 4.015916 , 4.0400486, ..., 3.5006087, 3.971701 ,
          4.1511936],
         ...,
         [4.1574717, 4.1415133, 4.053375 , ...,      -inf,      -inf,
          3.7732227],
         [4.0490212, 4.143131 , 4.1278663, ..., 3.9595847, 3.470864 ,
          4.157905 ],
         [3.8988953, 4.14883  , 4.1579022, ..., 4.0400796, 3.8360815,
          3.946961 ]],

        [[4.14882  , 4.1511936, 4.0490212, ..., 4.1549654, 4.088174 ,
          2.804369 ],
         [     -inf, 4.081094 , 4.1549654, ...,      -inf, 3.3907013,
          3.971701 ],
         [2.9846356, 4.015916 , 4.0400486, ..., 3.5006087, 3.971701 ,
          4.1511936],
         ...,
         [4.1574717, 4.1415133, 4.053375 , ...,      -inf,      -inf,
          3.7732227],
         [4.0490212, 4.143131 , 4.1278663, ..., 3.9595847, 3.470864 ,
          4.157905 ],
         [3.8988953, 4.14883  , 4.1579022, ..., 4.0400796, 3.8360815,
          3.946961 ]],

        [[4.14882  , 4.1511936, 4.0490212, ..., 4.1549654, 4.088174 ,
          2.804369 ],
         [     -inf, 4.081094 , 4.1549654, ...,      -inf, 3.3907013,
          3.971701 ],
         [2.9846356, 4.015916 , 4.0400486, ..., 3.5006087, 3.971701 ,
          4.1511936],
         ...,
         [4.1574717, 4.1415133, 4.053375 , ...,      -inf,      -inf,
          3.7732227],
         [4.0490212, 4.143131 , 4.1278663, ..., 3.9595847, 3.470864 ,
          4.157905 ],
         [3.8988953, 4.14883  , 4.1579022, ..., 4.0400796, 3.8360815,
          3.946961 ]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [11], 'to': [15]}

pre layer res:
7:conv2d
{'name': 'conv2d', 'output': array([[[[    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         ...,
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         [    0.   ,     0.   ,     0.   , ...,     0.   , 87661.99 ,
              0.   ],
         [86256.695,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ]],

        [[    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         ...,
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         [    0.   ,     0.   ,     0.   , ...,     0.   , 87661.99 ,
              0.   ],
         [86256.695,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ]],

        [[    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         ...,
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         [    0.   ,     0.   ,     0.   , ...,     0.   , 87661.99 ,
              0.   ],
         [86256.695,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ]],

        ...,

        [[    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         ...,
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         [    0.   ,     0.   ,     0.   , ...,     0.   , 87661.99 ,
              0.   ],
         [86256.695,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ]],

        [[    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         ...,
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         [    0.   ,     0.   ,     0.   , ...,     0.   , 87661.99 ,
              0.   ],
         [86256.695,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ]],

        [[    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         ...,
         [    0.   ,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ],
         [    0.   ,     0.   ,     0.   , ...,     0.   , 87661.99 ,
              0.   ],
         [86256.695,     0.   ,     0.   , ...,     0.   ,     0.   ,
              0.   ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [6], 'to': [22]}
tf node:
{'name': 'sin', 'output': array([[[[ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         ...,
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
          -0.8464158,  0.       ],
         [ 0.9033065,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ]],

        [[ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         ...,
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
          -0.8464158,  0.       ],
         [ 0.9033065,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ]],

        [[ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         ...,
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
          -0.8464158,  0.       ],
         [ 0.9033065,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ]],

        ...,

        [[ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         ...,
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
          -0.8464158,  0.       ],
         [ 0.9033065,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ]],

        [[ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         ...,
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
          -0.8464158,  0.       ],
         [ 0.9033065,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ]],

        [[ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         ...,
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
          -0.8464158,  0.       ],
         [ 0.9033065,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [7], 'to': [14]}
ms node:
{'name': 'sin', 'output': array([[[[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
          -0.8546328 ,  0.        ],
         [ 0.9033065 ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
          -0.8546328 ,  0.        ],
         [ 0.9033065 ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
          -0.8546328 ,  0.        ],
         [ 0.9033065 ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ]],

        ...,

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
          -0.8546328 ,  0.        ],
         [ 0.9033065 ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
          -0.86264116,  0.        ],
         [ 0.885864  ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ]],

        [[ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         ...,
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ],
         [ 0.        ,  0.        ,  0.        , ...,  0.        ,
          -0.86264116,  0.        ],
         [ 0.885864  ,  0.        ,  0.        , ...,  0.        ,
           0.        ,  0.        ]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [7], 'to': [14]}
torch node:
{'name': 'sin', 'output': array([[[[ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         ...,
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
          -0.8464158,  0.       ],
         [ 0.9033065,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ]],

        [[ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         ...,
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
          -0.8464158,  0.       ],
         [ 0.9033065,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ]],

        [[ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         ...,
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
          -0.8464158,  0.       ],
         [ 0.9033065,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ]],

        ...,

        [[ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         ...,
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
          -0.8464158,  0.       ],
         [ 0.9033065,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ]],

        [[ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         ...,
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
          -0.8464158,  0.       ],
         [ 0.9033065,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ]],

        [[ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         ...,
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
          -0.8464158,  0.       ],
         [ 0.9033065,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [7], 'to': [14]}

generate models:116

analyse the exceptions in iter:124
torch exception:
{'id': 29, 'name': 'flatten', 'frame_work': 'torch', 'input_datas': [tensor([2397728.,       0.,       0.,  ...,       0.,       0.,       0.],
       grad_fn=<ConstantPadNdBackward0>)]}
Dimension out of range (expected to be in range of [-1, 0], but got 1)

generate models:119

analyse output arrays in iter:127

pre layer res:
17:exp
{'name': 'exp', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [8], 'to': [18]}
tf node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [17], 'to': [9]}
ms node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [17], 'to': [9]}
torch node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [17], 'to': [9]}

generate models:122

analyse output arrays in iter:128

pre layer res:
11:empty_seq_operator
{'name': 'empty_seq_operator', 'output': array([[[[25733.998, 25734.748, 25734.998, ..., 25735.484, 25735.436,
          25735.516],
         [25733.824, 25734.744, 25734.984, ..., 25735.484, 25735.436,
          25735.506],
         [25732.176, 25733.748, 25734.484, ..., 25735.436, 25735.436,
          25735.506],
         ...,
         [25734.672, 25734.686, 25734.748, ..., 25735.502, 25735.176,
          25735.078],
         [25734.676, 25734.814, 25734.998, ..., 25735.484, 25735.248,
          25735.186],
         [25734.734, 25734.828, 25735.002, ..., 25735.256, 25735.252,
          25735.244]],

        [[25733.998, 25734.748, 25734.998, ..., 25735.484, 25735.436,
          25735.516],
         [25733.824, 25734.744, 25734.984, ..., 25735.484, 25735.436,
          25735.506],
         [25732.176, 25733.748, 25734.484, ..., 25735.436, 25735.436,
          25735.506],
         ...,
         [25734.672, 25734.686, 25734.748, ..., 25735.502, 25735.176,
          25735.078],
         [25734.676, 25734.814, 25734.998, ..., 25735.484, 25735.248,
          25735.186],
         [25734.734, 25734.828, 25735.002, ..., 25735.256, 25735.252,
          25735.244]],

        [[25733.998, 25734.748, 25734.998, ..., 25735.484, 25735.436,
          25735.516],
         [25733.824, 25734.744, 25734.984, ..., 25735.484, 25735.436,
          25735.506],
         [25732.176, 25733.748, 25734.484, ..., 25735.436, 25735.436,
          25735.506],
         ...,
         [25734.672, 25734.686, 25734.748, ..., 25735.502, 25735.176,
          25735.078],
         [25734.676, 25734.814, 25734.998, ..., 25735.484, 25735.248,
          25735.186],
         [25734.734, 25734.828, 25735.002, ..., 25735.256, 25735.252,
          25735.244]],

        ...,

        [[25733.998, 25734.748, 25734.998, ..., 25735.484, 25735.436,
          25735.516],
         [25733.824, 25734.744, 25734.984, ..., 25735.484, 25735.436,
          25735.506],
         [25732.176, 25733.748, 25734.484, ..., 25735.436, 25735.436,
          25735.506],
         ...,
         [25734.672, 25734.686, 25734.748, ..., 25735.502, 25735.176,
          25735.078],
         [25734.676, 25734.814, 25734.998, ..., 25735.484, 25735.248,
          25735.186],
         [25734.734, 25734.828, 25735.002, ..., 25735.256, 25735.252,
          25735.244]],

        [[25733.998, 25734.748, 25734.998, ..., 25735.484, 25735.436,
          25735.516],
         [25733.824, 25734.744, 25734.984, ..., 25735.484, 25735.436,
          25735.506],
         [25732.176, 25733.748, 25734.484, ..., 25735.436, 25735.436,
          25735.506],
         ...,
         [25734.672, 25734.686, 25734.748, ..., 25735.502, 25735.176,
          25735.078],
         [25734.676, 25734.814, 25734.998, ..., 25735.484, 25735.248,
          25735.186],
         [25734.734, 25734.828, 25735.002, ..., 25735.256, 25735.252,
          25735.244]],

        [[25733.998, 25734.748, 25734.998, ..., 25735.484, 25735.436,
          25735.516],
         [25733.824, 25734.744, 25734.984, ..., 25735.484, 25735.436,
          25735.506],
         [25732.176, 25733.748, 25734.484, ..., 25735.436, 25735.436,
          25735.506],
         ...,
         [25734.672, 25734.686, 25734.748, ..., 25735.502, 25735.176,
          25735.078],
         [25734.676, 25734.814, 25734.998, ..., 25735.484, 25735.248,
          25735.186],
         [25734.734, 25734.828, 25735.002, ..., 25735.256, 25735.252,
          25735.244]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [12], 'to': [18]}
tf node:
{'name': 'softmax', 'output': array([[[[0.02040482, 0.04319701, 0.05546606, ..., 0.09020631,
          0.0859075 , 0.09306976],
         [0.017313  , 0.04343996, 0.05523595, ..., 0.09106869,
          0.08672879, 0.09304641],
         [0.00376909, 0.01815779, 0.03791807, ..., 0.09816009,
          0.09816009, 0.1053104 ],
         ...,
         [0.03603065, 0.03652664, 0.0388824 , ..., 0.08263623,
          0.05963701, 0.05408842],
         [0.0347423 , 0.03991012, 0.04795311, ..., 0.07798775,
          0.06157301, 0.05784249],
         [0.03854243, 0.04233058, 0.05036709, ..., 0.06492575,
          0.06467261, 0.06416933]],

        [[0.02040482, 0.04319701, 0.05546606, ..., 0.09020631,
          0.0859075 , 0.09306976],
         [0.017313  , 0.04343996, 0.05523595, ..., 0.09106869,
          0.08672879, 0.09304641],
         [0.00376909, 0.01815779, 0.03791807, ..., 0.09816009,
          0.09816009, 0.1053104 ],
         ...,
         [0.03603065, 0.03652664, 0.0388824 , ..., 0.08263623,
          0.05963701, 0.05408842],
         [0.0347423 , 0.03991012, 0.04795311, ..., 0.07798775,
          0.06157301, 0.05784249],
         [0.03854243, 0.04233058, 0.05036709, ..., 0.06492575,
          0.06467261, 0.06416933]],

        [[0.02040482, 0.04319701, 0.05546606, ..., 0.09020631,
          0.0859075 , 0.09306976],
         [0.017313  , 0.04343996, 0.05523595, ..., 0.09106869,
          0.08672879, 0.09304641],
         [0.00376909, 0.01815779, 0.03791807, ..., 0.09816009,
          0.09816009, 0.1053104 ],
         ...,
         [0.03603065, 0.03652664, 0.0388824 , ..., 0.08263623,
          0.05963701, 0.05408842],
         [0.0347423 , 0.03991012, 0.04795311, ..., 0.07798775,
          0.06157301, 0.05784249],
         [0.03854243, 0.04233058, 0.05036709, ..., 0.06492575,
          0.06467261, 0.06416933]],

        ...,

        [[0.02040482, 0.04319701, 0.05546606, ..., 0.09020631,
          0.0859075 , 0.09306976],
         [0.017313  , 0.04343996, 0.05523595, ..., 0.09106869,
          0.08672879, 0.09304641],
         [0.00376909, 0.01815779, 0.03791807, ..., 0.09816009,
          0.09816009, 0.1053104 ],
         ...,
         [0.03603065, 0.03652664, 0.0388824 , ..., 0.08263623,
          0.05963701, 0.05408842],
         [0.0347423 , 0.03991012, 0.04795311, ..., 0.07798775,
          0.06157301, 0.05784249],
         [0.03854243, 0.04233058, 0.05036709, ..., 0.06492575,
          0.06467261, 0.06416933]],

        [[0.02040482, 0.04319701, 0.05546606, ..., 0.09020631,
          0.0859075 , 0.09306976],
         [0.017313  , 0.04343996, 0.05523595, ..., 0.09106869,
          0.08672879, 0.09304641],
         [0.00376909, 0.01815779, 0.03791807, ..., 0.09816009,
          0.09816009, 0.1053104 ],
         ...,
         [0.03603065, 0.03652664, 0.0388824 , ..., 0.08263623,
          0.05963701, 0.05408842],
         [0.0347423 , 0.03991012, 0.04795311, ..., 0.07798775,
          0.06157301, 0.05784249],
         [0.03854243, 0.04233058, 0.05036709, ..., 0.06492575,
          0.06467261, 0.06416933]],

        [[0.02040482, 0.04319701, 0.05546606, ..., 0.09020631,
          0.0859075 , 0.09306976],
         [0.017313  , 0.04343996, 0.05523595, ..., 0.09106869,
          0.08672879, 0.09304641],
         [0.00376909, 0.01815779, 0.03791807, ..., 0.09816009,
          0.09816009, 0.1053104 ],
         ...,
         [0.03603065, 0.03652664, 0.0388824 , ..., 0.08263623,
          0.05963701, 0.05408842],
         [0.0347423 , 0.03991012, 0.04795311, ..., 0.07798775,
          0.06157301, 0.05784249],
         [0.03854243, 0.04233058, 0.05036709, ..., 0.06492575,
          0.06467261, 0.06416933]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [11], 'to': [8]}
ms node:
{'name': 'softmax', 'output': array([[[[0.0204374 , 0.04326597, 0.0555546 , ..., 0.09035031,
          0.08604465, 0.09231244],
         [0.01714807, 0.04344835, 0.05524662, ..., 0.09108628,
          0.08674555, 0.09306439],
         [0.00376909, 0.01815779, 0.03791807, ..., 0.09816009,
          0.09816009, 0.1053104 ],
         ...,
         [0.03603065, 0.03652664, 0.0388824 , ..., 0.08263623,
          0.059637  , 0.05408842],
         [0.03485158, 0.04003566, 0.04810395, ..., 0.07823307,
          0.0617667 , 0.05802444],
         [0.03854243, 0.04233058, 0.05036709, ..., 0.06492573,
          0.06467261, 0.06416932]],

        [[0.0204374 , 0.04326597, 0.0555546 , ..., 0.09035031,
          0.08604465, 0.09231244],
         [0.01714807, 0.04344835, 0.05524662, ..., 0.09108628,
          0.08674555, 0.09306439],
         [0.00376909, 0.01815779, 0.03791807, ..., 0.09816009,
          0.09816009, 0.1053104 ],
         ...,
         [0.03603065, 0.03652664, 0.0388824 , ..., 0.08263623,
          0.059637  , 0.05408842],
         [0.03485158, 0.04003566, 0.04810395, ..., 0.07823307,
          0.0617667 , 0.05802444],
         [0.03854243, 0.04233058, 0.05036709, ..., 0.06492573,
          0.06467261, 0.06416932]],

        [[0.0204374 , 0.04326597, 0.0555546 , ..., 0.09035031,
          0.08604465, 0.09231244],
         [0.01714807, 0.04344835, 0.05524662, ..., 0.09108628,
          0.08674555, 0.09306439],
         [0.00376909, 0.01815779, 0.03791807, ..., 0.09816009,
          0.09816009, 0.1053104 ],
         ...,
         [0.03603065, 0.03652664, 0.0388824 , ..., 0.08263623,
          0.059637  , 0.05408842],
         [0.03485158, 0.04003566, 0.04810395, ..., 0.07823307,
          0.0617667 , 0.05802444],
         [0.03854243, 0.04233058, 0.05036709, ..., 0.06492573,
          0.06467261, 0.06416932]],

        ...,

        [[0.0204374 , 0.04326597, 0.0555546 , ..., 0.09035031,
          0.08604465, 0.09231244],
         [0.01714807, 0.04344835, 0.05524662, ..., 0.09108628,
          0.08674555, 0.09306439],
         [0.00376909, 0.01815779, 0.03791807, ..., 0.09816009,
          0.09816009, 0.1053104 ],
         ...,
         [0.03603065, 0.03652664, 0.0388824 , ..., 0.08263623,
          0.059637  , 0.05408842],
         [0.03485158, 0.04003566, 0.04810395, ..., 0.07823307,
          0.0617667 , 0.05802444],
         [0.03854243, 0.04233058, 0.05036709, ..., 0.06492573,
          0.06467261, 0.06416932]],

        [[0.02071012, 0.04392905, 0.05629595, ..., 0.09031278,
          0.084841  , 0.09427799],
         [0.01791478, 0.04382294, 0.0551814 , ..., 0.09097876,
          0.08546664, 0.09497321],
         [0.00364113, 0.01820452, 0.03749943, ..., 0.09575815,
          0.09575815, 0.10640948],
         ...,
         [0.03456784, 0.0355261 , 0.03894166, ..., 0.08276214,
          0.05743974, 0.05665978],
         [0.03350569, 0.04121271, 0.04808852, ..., 0.07699548,
          0.06174689, 0.0563311 ],
         [0.0376977 , 0.04390126, 0.05003899, ..., 0.06488185,
          0.06425132, 0.06337886]],

        [[0.02071012, 0.04392905, 0.05629595, ..., 0.09031278,
          0.084841  , 0.09427799],
         [0.01791478, 0.04382294, 0.0551814 , ..., 0.09097876,
          0.08546664, 0.09497321],
         [0.00364113, 0.01820452, 0.03749943, ..., 0.09575815,
          0.09575815, 0.10640948],
         ...,
         [0.03456784, 0.0355261 , 0.03894166, ..., 0.08276214,
          0.05743974, 0.05665978],
         [0.03350569, 0.04121271, 0.04808852, ..., 0.07699548,
          0.06174689, 0.0563311 ],
         [0.0376977 , 0.04390126, 0.05003899, ..., 0.06488185,
          0.06425132, 0.06337886]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [11], 'to': [8]}
torch node:
{'name': 'softmax', 'output': array([[[[0.0204374 , 0.04326597, 0.0555546 , ..., 0.09035031,
          0.08604465, 0.09231244],
         [0.01714806, 0.04344835, 0.05524663, ..., 0.09108628,
          0.08674555, 0.09306439],
         [0.00376909, 0.01815779, 0.03791807, ..., 0.09816008,
          0.09816008, 0.1053104 ],
         ...,
         [0.03603065, 0.03652664, 0.03888241, ..., 0.08263623,
          0.059637  , 0.05408842],
         [0.03485159, 0.04003567, 0.04810396, ..., 0.07823308,
          0.0617667 , 0.05802444],
         [0.03854243, 0.04233058, 0.05036708, ..., 0.06492574,
          0.06467262, 0.06416933]],

        [[0.0204374 , 0.04326597, 0.0555546 , ..., 0.09035031,
          0.08604465, 0.09231244],
         [0.01714806, 0.04344835, 0.05524663, ..., 0.09108628,
          0.08674555, 0.09306439],
         [0.00376909, 0.01815779, 0.03791807, ..., 0.09816008,
          0.09816008, 0.1053104 ],
         ...,
         [0.03603065, 0.03652664, 0.03888241, ..., 0.08263623,
          0.059637  , 0.05408842],
         [0.03485159, 0.04003567, 0.04810396, ..., 0.07823308,
          0.0617667 , 0.05802444],
         [0.03854243, 0.04233058, 0.05036708, ..., 0.06492574,
          0.06467262, 0.06416933]],

        [[0.0204374 , 0.04326597, 0.0555546 , ..., 0.09035031,
          0.08604465, 0.09231244],
         [0.01714806, 0.04344835, 0.05524663, ..., 0.09108628,
          0.08674555, 0.09306439],
         [0.00376909, 0.01815779, 0.03791807, ..., 0.09816008,
          0.09816008, 0.1053104 ],
         ...,
         [0.03603065, 0.03652664, 0.03888241, ..., 0.08263623,
          0.059637  , 0.05408842],
         [0.03485159, 0.04003567, 0.04810396, ..., 0.07823308,
          0.0617667 , 0.05802444],
         [0.03854243, 0.04233058, 0.05036708, ..., 0.06492574,
          0.06467262, 0.06416933]],

        ...,

        [[0.0204374 , 0.04326597, 0.0555546 , ..., 0.09035031,
          0.08604465, 0.09231244],
         [0.01714806, 0.04344835, 0.05524663, ..., 0.09108628,
          0.08674555, 0.09306439],
         [0.00376909, 0.01815779, 0.03791807, ..., 0.09816008,
          0.09816008, 0.1053104 ],
         ...,
         [0.03603065, 0.03652664, 0.03888241, ..., 0.08263623,
          0.059637  , 0.05408842],
         [0.03485159, 0.04003567, 0.04810396, ..., 0.07823308,
          0.0617667 , 0.05802444],
         [0.03854243, 0.04233058, 0.05036708, ..., 0.06492574,
          0.06467262, 0.06416933]],

        [[0.0204374 , 0.04326597, 0.0555546 , ..., 0.09035031,
          0.08604465, 0.09231244],
         [0.01714806, 0.04344835, 0.05524663, ..., 0.09108628,
          0.08674555, 0.09306439],
         [0.00376909, 0.01815779, 0.03791807, ..., 0.09816008,
          0.09816008, 0.1053104 ],
         ...,
         [0.03603065, 0.03652664, 0.03888241, ..., 0.08263623,
          0.059637  , 0.05408842],
         [0.03485159, 0.04003567, 0.04810396, ..., 0.07823308,
          0.0617667 , 0.05802444],
         [0.03854243, 0.04233058, 0.05036708, ..., 0.06492574,
          0.06467262, 0.06416933]],

        [[0.0204374 , 0.04326597, 0.0555546 , ..., 0.09035031,
          0.08604465, 0.09231244],
         [0.01714806, 0.04344835, 0.05524663, ..., 0.09108628,
          0.08674555, 0.09306439],
         [0.00376909, 0.01815779, 0.03791807, ..., 0.09816008,
          0.09816008, 0.1053104 ],
         ...,
         [0.03603065, 0.03652664, 0.03888241, ..., 0.08263623,
          0.059637  , 0.05408842],
         [0.03485159, 0.04003567, 0.04810396, ..., 0.07823308,
          0.0617667 , 0.05802444],
         [0.03854243, 0.04233058, 0.05036708, ..., 0.06492574,
          0.06467262, 0.06416933]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [11], 'to': [8]}

generate models:123

analyse output arrays in iter:138

pre layer res:
6:relu
{'name': 'relu', 'output': array([[[[1. , 1. , 1. , ..., 1. , 1. , 1. ],
         [1. , 1. , 1. , ..., 1. , 1. , 1. ],
         [1. , 1. , 1. , ..., 1. , 1. , 1. ],
         ...,
         [1. , 1. , 1. , ..., 1. , 1. , 1. ],
         [1. , 1. , 1. , ..., 1. , 1. , 1. ],
         [1. , 1. , 1. , ..., 1. , 1. , 1. ]],

        [[1. , 1. , 1. , ..., 1. , 1. , 1. ],
         [1. , 1. , 1. , ..., 1. , 1. , 1. ],
         [1. , 1. , 1. , ..., 1. , 1. , 1. ],
         ...,
         [1. , 1. , 1. , ..., 1. , 1. , 1. ],
         [1. , 1. , 1. , ..., 1. , 1. , 1. ],
         [1. , 1. , 1. , ..., 1. , 1. , 1. ]],

        [[1. , 1. , 1. , ..., 1. , 1. , 1. ],
         [1. , 1. , 1. , ..., 1. , 1. , 1. ],
         [1. , 1. , 1. , ..., 1. , 1. , 1. ],
         ...,
         [1. , 1. , 1. , ..., 1. , 1. , 1. ],
         [1. , 1. , 1. , ..., 1. , 1. , 1. ],
         [1. , 1. , 1. , ..., 1. , 1. , 1. ]],

        ...,

        [[0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         ...,
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5]],

        [[0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         ...,
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5]],

        [[0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         ...,
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5],
         [0.5, 0.5, 0.5, ..., 0.5, 0.5, 0.5]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [17], 'to': [14]}
tf node:
{'name': 'log', 'output': array([[[[ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         ...,
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ]],

        [[ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         ...,
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ]],

        [[ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         ...,
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ]],

        ...,

        [[-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         ...,
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472]],

        [[-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         ...,
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472]],

        [[-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         ...,
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [6], 'to': [16]}
ms node:
{'name': 'log', 'output': array([[[[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        ...,

        [[-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         ...,
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01]],

        [[-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         ...,
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01]],

        [[-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         ...,
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01],
         [-6.9314861e-01, -6.9314861e-01, -6.9314861e-01, ...,
          -6.9314861e-01, -6.9314861e-01, -6.9314861e-01]]]],
      dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [6], 'to': [16]}
torch node:
{'name': 'log', 'output': array([[[[ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         ...,
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ]],

        [[ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         ...,
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ]],

        [[ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         ...,
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ],
         [ 0.       ,  0.       ,  0.       , ...,  0.       ,
           0.       ,  0.       ]],

        ...,

        [[-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         ...,
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472]],

        [[-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         ...,
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472]],

        [[-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         ...,
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472],
         [-0.6931472, -0.6931472, -0.6931472, ..., -0.6931472,
          -0.6931472, -0.6931472]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [6], 'to': [16]}

generate models:133

analyse output arrays in iter:139

pre layer res:
20:sum
{'name': 'sum', 'output': array([inf], dtype=float32), 'output_shape': TensorShape([1]), 'from': [14], 'to': [26]}
tf node:
{'name': 'sin', 'output': array([nan], dtype=float32), 'output_shape': TensorShape([1]), 'from': [20], 'to': [21]}
ms node:
{'name': 'sin', 'output': array([nan], dtype=float32), 'output_shape': (1,), 'from': [20], 'to': [21]}
torch node:
{'name': 'sin', 'output': array([nan], dtype=float32), 'output_shape': torch.Size([1]), 'from': [20], 'to': [21]}

generate models:134

analyse output arrays in iter:143

pre layer res:
28:log
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [25], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [28], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [28], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [28], 'to': []}

generate models:138

analyse output arrays in iter:154

pre layer res:
21:add
{'name': 'add', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [29, 34], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [21], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [21], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [21], 'to': []}

generate models:148

analyse output arrays in iter:179

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [8], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [9], 'to': []}

generate models:172

analyse output arrays in iter:180

pre layer res:
17:log
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [9], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [17], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [17], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [17], 'to': []}

generate models:173

analyse output arrays in iter:200

pre layer res:
19:add
{'name': 'add', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [22, 26], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [19], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [19], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [19], 'to': []}

generate models:193

analyse output arrays in iter:204

pre layer res:
1:relu
{'name': 'relu', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [14], 'to': [19]}
tf node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [1], 'to': [2]}
ms node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [1], 'to': [2]}
torch node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [1], 'to': [2]}

generate models:197

analyse output arrays in iter:209

pre layer res:
8:relu
{'name': 'relu', 'output': array([[[[1802.672  , 2880.2722 , 5819.442  , ..., 6235.6084 ,
          6225.496  , 6225.496  ],
         [6173.004  , 5732.232  , 5732.232  , ..., 4845.9736 ,
          6235.6084 , 4913.9995 ],
         [3548.9463 ,  398.58328, 6219.5205 , ..., 5991.558  ,
          6173.004  , 2880.2722 ],
         ...,
         [6139.129  , 6235.6084 , 6048.6245 , ..., 5819.442  ,
          5819.442  , 5819.442  ],
         [5357.539  , 5357.539  , 5991.6294 , ..., 6232.371  ,
          6139.129  , 5819.442  ],
         [5526.919  , 4263.938  , 6235.6084 , ..., 5819.442  ,
          5074.355  , 1462.4855 ]],

        [[1802.672  , 2880.2722 , 5819.442  , ..., 6235.6084 ,
          6225.496  , 6225.496  ],
         [6173.004  , 5732.232  , 5732.232  , ..., 4845.9736 ,
          6235.6084 , 4913.9995 ],
         [3548.9463 ,  398.58328, 6219.5205 , ..., 5991.558  ,
          6173.004  , 2880.2722 ],
         ...,
         [6139.129  , 6235.6084 , 6048.6245 , ..., 5819.442  ,
          5819.442  , 5819.442  ],
         [5357.539  , 5357.539  , 5991.6294 , ..., 6232.371  ,
          6139.129  , 5819.442  ],
         [5526.919  , 4263.938  , 6235.6084 , ..., 5819.442  ,
          5074.355  , 1462.4855 ]],

        [[1802.672  , 2880.2722 , 5819.442  , ..., 6235.6084 ,
          6225.496  , 6225.496  ],
         [6173.004  , 5732.232  , 5732.232  , ..., 4845.9736 ,
          6235.6084 , 4913.9995 ],
         [3548.9463 ,  398.58328, 6219.5205 , ..., 5991.558  ,
          6173.004  , 2880.2722 ],
         ...,
         [6139.129  , 6235.6084 , 6048.6245 , ..., 5819.442  ,
          5819.442  , 5819.442  ],
         [5357.539  , 5357.539  , 5991.6294 , ..., 6232.371  ,
          6139.129  , 5819.442  ],
         [5526.919  , 4263.938  , 6235.6084 , ..., 5819.442  ,
          5074.355  , 1462.4855 ]],

        ...,

        [[1802.672  , 2880.2722 , 5819.442  , ..., 6235.6084 ,
          6225.496  , 6225.496  ],
         [6173.004  , 5732.232  , 5732.232  , ..., 4845.9736 ,
          6235.6084 , 4913.9995 ],
         [3548.9463 ,  398.58328, 6219.5205 , ..., 5991.558  ,
          6173.004  , 2880.2722 ],
         ...,
         [6139.129  , 6235.6084 , 6048.6245 , ..., 5819.442  ,
          5819.442  , 5819.442  ],
         [5357.539  , 5357.539  , 5991.6294 , ..., 6232.371  ,
          6139.129  , 5819.442  ],
         [5526.919  , 4263.938  , 6235.6084 , ..., 5819.442  ,
          5074.355  , 1462.4855 ]],

        [[1802.672  , 2880.2722 , 5819.442  , ..., 6235.6084 ,
          6225.496  , 6225.496  ],
         [6173.004  , 5732.232  , 5732.232  , ..., 4845.9736 ,
          6235.6084 , 4913.9995 ],
         [3548.9463 ,  398.58328, 6219.5205 , ..., 5991.558  ,
          6173.004  , 2880.2722 ],
         ...,
         [6139.129  , 6235.6084 , 6048.6245 , ..., 5819.442  ,
          5819.442  , 5819.442  ],
         [5357.539  , 5357.539  , 5991.6294 , ..., 6232.371  ,
          6139.129  , 5819.442  ],
         [5526.919  , 4263.938  , 6235.6084 , ..., 5819.442  ,
          5074.355  , 1462.4855 ]],

        [[1802.672  , 2880.2722 , 5819.442  , ..., 6235.6084 ,
          6225.496  , 6225.496  ],
         [6173.004  , 5732.232  , 5732.232  , ..., 4845.9736 ,
          6235.6084 , 4913.9995 ],
         [3548.9463 ,  398.58328, 6219.5205 , ..., 5991.558  ,
          6173.004  , 2880.2722 ],
         ...,
         [6139.129  , 6235.6084 , 6048.6245 , ..., 5819.442  ,
          5819.442  , 5819.442  ],
         [5357.539  , 5357.539  , 5991.6294 , ..., 6232.371  ,
          6139.129  , 5819.442  ],
         [5526.919  , 4263.938  , 6235.6084 , ..., 5819.442  ,
          5074.355  , 1462.4855 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [7], 'to': [11]}
tf node:
{'name': 'softmax', 'output': array([[[[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          9.6201462e-01, 3.9035844e-05, 3.9035844e-05],
         [6.4746235e-28, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 9.9159294e-08, ...,
          0.0000000e+00, 6.2291686e-28, 0.0000000e+00],
         ...,
         [0.0000000e+00, 1.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          5.0000000e-01, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 1.0356716e-01, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          9.6201462e-01, 3.9035844e-05, 3.9035844e-05],
         [6.4746235e-28, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 9.9159294e-08, ...,
          0.0000000e+00, 6.2291686e-28, 0.0000000e+00],
         ...,
         [0.0000000e+00, 1.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          5.0000000e-01, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 1.0356716e-01, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          9.6201462e-01, 3.9035844e-05, 3.9035844e-05],
         [6.4746235e-28, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 9.9159294e-08, ...,
          0.0000000e+00, 6.2291686e-28, 0.0000000e+00],
         ...,
         [0.0000000e+00, 1.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          5.0000000e-01, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 1.0356716e-01, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],

        ...,

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          9.6201462e-01, 3.9035844e-05, 3.9035844e-05],
         [6.4746235e-28, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 9.9159294e-08, ...,
          0.0000000e+00, 6.2291686e-28, 0.0000000e+00],
         ...,
         [0.0000000e+00, 1.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          5.0000000e-01, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 1.0356716e-01, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          9.6201462e-01, 3.9035844e-05, 3.9035844e-05],
         [6.4746235e-28, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 9.9159294e-08, ...,
          0.0000000e+00, 6.2291686e-28, 0.0000000e+00],
         ...,
         [0.0000000e+00, 1.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          5.0000000e-01, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 1.0356716e-01, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          9.6201462e-01, 3.9035844e-05, 3.9035844e-05],
         [6.4746235e-28, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 9.9159294e-08, ...,
          0.0000000e+00, 6.2291686e-28, 0.0000000e+00],
         ...,
         [0.0000000e+00, 1.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          5.0000000e-01, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 1.0356716e-01, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [8], 'to': [9]}
ms node:
{'name': 'softmax', 'output': array([[[[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          9.6192539e-01, 3.9127633e-05, 3.9127633e-05],
         [6.4904504e-28, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 9.9392466e-08, ...,
          0.0000000e+00, 6.2438167e-28, 0.0000000e+00],
         ...,
         [0.0000000e+00, 1.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          5.0000000e-01, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 1.0334071e-01, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          9.6192539e-01, 3.9127633e-05, 3.9127633e-05],
         [6.4904504e-28, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 9.9392466e-08, ...,
          0.0000000e+00, 6.2438167e-28, 0.0000000e+00],
         ...,
         [0.0000000e+00, 1.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          5.0000000e-01, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 1.0334071e-01, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          9.6192539e-01, 3.9127633e-05, 3.9127633e-05],
         [6.4904504e-28, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 9.9392466e-08, ...,
          0.0000000e+00, 6.2438167e-28, 0.0000000e+00],
         ...,
         [0.0000000e+00, 1.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          5.0000000e-01, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 1.0334071e-01, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],

        ...,

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          9.6192539e-01, 3.9127633e-05, 3.9127633e-05],
         [6.4904504e-28, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 9.9392466e-08, ...,
          0.0000000e+00, 6.2438167e-28, 0.0000000e+00],
         ...,
         [0.0000000e+00, 1.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          5.0000000e-01, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 1.0334071e-01, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          9.6160245e-01, 3.9305956e-05, 3.9305956e-05],
         [6.5765842e-28, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 1.0126936e-07, ...,
          0.0000000e+00, 6.3245560e-28, 0.0000000e+00],
         ...,
         [0.0000000e+00, 1.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          5.0000000e-01, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 1.0194652e-01, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          9.6160245e-01, 3.9305956e-05, 3.9305956e-05],
         [6.5765842e-28, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 1.0126936e-07, ...,
          0.0000000e+00, 6.3245560e-28, 0.0000000e+00],
         ...,
         [0.0000000e+00, 1.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          5.0000000e-01, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 1.0194652e-01, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [8], 'to': [9]}
torch node:
{'name': 'softmax', 'output': array([[[[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          9.6192539e-01, 3.9127630e-05, 3.9127630e-05],
         [6.4904499e-28, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 9.9392473e-08, ...,
          0.0000000e+00, 6.2438162e-28, 0.0000000e+00],
         ...,
         [1.2611686e-42, 1.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          5.0000000e-01, 1.6018243e-41, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 1.0334071e-01, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          9.6192539e-01, 3.9127630e-05, 3.9127630e-05],
         [6.4904499e-28, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 9.9392473e-08, ...,
          0.0000000e+00, 6.2438162e-28, 0.0000000e+00],
         ...,
         [1.2611686e-42, 1.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          5.0000000e-01, 1.6018243e-41, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 1.0334071e-01, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          9.6192539e-01, 3.9127630e-05, 3.9127630e-05],
         [6.4904499e-28, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 9.9392473e-08, ...,
          0.0000000e+00, 6.2438162e-28, 0.0000000e+00],
         ...,
         [1.2611686e-42, 1.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          5.0000000e-01, 1.6018243e-41, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 1.0334071e-01, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],

        ...,

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          9.6192539e-01, 3.9127630e-05, 3.9127630e-05],
         [6.4904499e-28, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 9.9392473e-08, ...,
          0.0000000e+00, 6.2438162e-28, 0.0000000e+00],
         ...,
         [1.2611686e-42, 1.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          5.0000000e-01, 1.6018243e-41, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 1.0334071e-01, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          9.6192539e-01, 3.9127630e-05, 3.9127630e-05],
         [6.4904499e-28, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 9.9392473e-08, ...,
          0.0000000e+00, 6.2438162e-28, 0.0000000e+00],
         ...,
         [1.2611686e-42, 1.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          5.0000000e-01, 1.6018243e-41, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 1.0334071e-01, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          9.6192539e-01, 3.9127630e-05, 3.9127630e-05],
         [6.4904499e-28, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 9.9392473e-08, ...,
          0.0000000e+00, 6.2438162e-28, 0.0000000e+00],
         ...,
         [1.2611686e-42, 1.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          5.0000000e-01, 1.6018243e-41, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 1.0334071e-01, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [8], 'to': [9]}

generate models:202

analyse output arrays in iter:216

pre layer res:
12:empty_seq_operator
{'name': 'empty_seq_operator', 'output': array([[[[2.5345221e+01, 5.0907639e+02, 7.5554336e+04, ...,
          3.4542265e+00, 7.0100484e+00, 2.5348494e+01],
         [1.5014940e+02, 2.9248203e+03, 2.2772494e+04, ...,
          5.1619236e+01, 1.8989679e+01, 1.4035722e+02],
         [2.4541075e-04, 9.9004820e-02, 1.9885645e+00, ...,
          9.9004820e-02, 1.0857209e+02, 6.5602927e-04],
         ...,
         [4.0960000e+03, 4.0591489e+03, 3.7800243e-09, ...,
          1.3251044e-22, 1.9666289e-20, 2.9187347e-18],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          9.5463024e-09, 2.7471819e-05, 8.1892468e-02],
         [2.4415222e+02, 3.8517666e+03, 2.0480000e+03, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],

        [[2.5345221e+01, 5.0907639e+02, 7.5554336e+04, ...,
          3.4542265e+00, 7.0100484e+00, 2.5348494e+01],
         [1.5014940e+02, 2.9248203e+03, 2.2772494e+04, ...,
          5.1619236e+01, 1.8989679e+01, 1.4035722e+02],
         [2.4541075e-04, 9.9004820e-02, 1.9885645e+00, ...,
          9.9004820e-02, 1.0857209e+02, 6.5602927e-04],
         ...,
         [4.0960000e+03, 4.0591489e+03, 3.7800243e-09, ...,
          1.3251044e-22, 1.9666289e-20, 2.9187347e-18],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          9.5463024e-09, 2.7471819e-05, 8.1892468e-02],
         [2.4415222e+02, 3.8517666e+03, 2.0480000e+03, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],

        [[2.5345221e+01, 5.0907639e+02, 7.5554336e+04, ...,
          3.4542265e+00, 7.0100484e+00, 2.5348494e+01],
         [1.5014940e+02, 2.9248203e+03, 2.2772494e+04, ...,
          5.1619236e+01, 1.8989679e+01, 1.4035722e+02],
         [2.4541075e-04, 9.9004820e-02, 1.9885645e+00, ...,
          9.9004820e-02, 1.0857209e+02, 6.5602927e-04],
         ...,
         [4.0960000e+03, 4.0591489e+03, 3.7800243e-09, ...,
          1.3251044e-22, 1.9666289e-20, 2.9187347e-18],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          9.5463024e-09, 2.7471819e-05, 8.1892468e-02],
         [2.4415222e+02, 3.8517666e+03, 2.0480000e+03, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],

        ...,

        [[2.5345221e+01, 5.0907639e+02, 7.5554336e+04, ...,
          3.4542265e+00, 7.0100484e+00, 2.5348494e+01],
         [1.5014940e+02, 2.9248203e+03, 2.2772494e+04, ...,
          5.1619236e+01, 1.8989679e+01, 1.4035722e+02],
         [2.4541075e-04, 9.9004820e-02, 1.9885645e+00, ...,
          9.9004820e-02, 1.0857209e+02, 6.5602927e-04],
         ...,
         [4.0960000e+03, 4.0591489e+03, 3.7800243e-09, ...,
          1.3251044e-22, 1.9666289e-20, 2.9187347e-18],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          9.5463024e-09, 2.7471819e-05, 8.1892468e-02],
         [2.4415222e+02, 3.8517666e+03, 2.0480000e+03, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],

        [[2.5345221e+01, 5.0907639e+02, 7.5554336e+04, ...,
          3.4542265e+00, 7.0100484e+00, 2.5348494e+01],
         [1.5014940e+02, 2.9248203e+03, 2.2772494e+04, ...,
          5.1619236e+01, 1.8989679e+01, 1.4035722e+02],
         [2.4541075e-04, 9.9004820e-02, 1.9885645e+00, ...,
          9.9004820e-02, 1.0857209e+02, 6.5602927e-04],
         ...,
         [4.0960000e+03, 4.0591489e+03, 3.7800243e-09, ...,
          1.3251044e-22, 1.9666289e-20, 2.9187347e-18],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          9.5463024e-09, 2.7471819e-05, 8.1892468e-02],
         [2.4415222e+02, 3.8517666e+03, 2.0480000e+03, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],

        [[2.5345221e+01, 5.0907639e+02, 7.5554336e+04, ...,
          3.4542265e+00, 7.0100484e+00, 2.5348494e+01],
         [1.5014940e+02, 2.9248203e+03, 2.2772494e+04, ...,
          5.1619236e+01, 1.8989679e+01, 1.4035722e+02],
         [2.4541075e-04, 9.9004820e-02, 1.9885645e+00, ...,
          9.9004820e-02, 1.0857209e+02, 6.5602927e-04],
         ...,
         [4.0960000e+03, 4.0591489e+03, 3.7800243e-09, ...,
          1.3251044e-22, 1.9666289e-20, 2.9187347e-18],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          9.5463024e-09, 2.7471819e-05, 8.1892468e-02],
         [2.4415222e+02, 3.8517666e+03, 2.0480000e+03, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [7], 'to': [13]}
tf node:
{'name': 'sin', 'output': array([[[[ 2.1088412e-01,  1.3793443e-01, -8.2340258e-01, ...,
          -3.0756587e-01,  6.6452885e-01,  2.1408239e-01],
         [-6.0283422e-01,  2.4479895e-03,  7.9012036e-01, ...,
           9.7653854e-01,  1.3966532e-01,  8.4918809e-01],
         [ 2.4541075e-04,  9.8843157e-02,  9.1399676e-01, ...,
           9.8843157e-02,  9.8253971e-01,  6.5602921e-04],
         ...,
         [-5.9464198e-01,  2.0965035e-01,  3.7800243e-09, ...,
           1.3251044e-22,  1.9666289e-20,  2.9187347e-18],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           9.5463024e-09,  2.7471819e-05,  8.1800967e-02],
         [-7.7833235e-01,  1.7313147e-01, -3.1305701e-01, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 2.1088412e-01,  1.3793443e-01, -8.2340258e-01, ...,
          -3.0756587e-01,  6.6452885e-01,  2.1408239e-01],
         [-6.0283422e-01,  2.4479895e-03,  7.9012036e-01, ...,
           9.7653854e-01,  1.3966532e-01,  8.4918809e-01],
         [ 2.4541075e-04,  9.8843157e-02,  9.1399676e-01, ...,
           9.8843157e-02,  9.8253971e-01,  6.5602921e-04],
         ...,
         [-5.9464198e-01,  2.0965035e-01,  3.7800243e-09, ...,
           1.3251044e-22,  1.9666289e-20,  2.9187347e-18],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           9.5463024e-09,  2.7471819e-05,  8.1800967e-02],
         [-7.7833235e-01,  1.7313147e-01, -3.1305701e-01, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 2.1088412e-01,  1.3793443e-01, -8.2340258e-01, ...,
          -3.0756587e-01,  6.6452885e-01,  2.1408239e-01],
         [-6.0283422e-01,  2.4479895e-03,  7.9012036e-01, ...,
           9.7653854e-01,  1.3966532e-01,  8.4918809e-01],
         [ 2.4541075e-04,  9.8843157e-02,  9.1399676e-01, ...,
           9.8843157e-02,  9.8253971e-01,  6.5602921e-04],
         ...,
         [-5.9464198e-01,  2.0965035e-01,  3.7800243e-09, ...,
           1.3251044e-22,  1.9666289e-20,  2.9187347e-18],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           9.5463024e-09,  2.7471819e-05,  8.1800967e-02],
         [-7.7833235e-01,  1.7313147e-01, -3.1305701e-01, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        ...,

        [[ 2.1088412e-01,  1.3793443e-01, -8.2340258e-01, ...,
          -3.0756587e-01,  6.6452885e-01,  2.1408239e-01],
         [-6.0283422e-01,  2.4479895e-03,  7.9012036e-01, ...,
           9.7653854e-01,  1.3966532e-01,  8.4918809e-01],
         [ 2.4541075e-04,  9.8843157e-02,  9.1399676e-01, ...,
           9.8843157e-02,  9.8253971e-01,  6.5602921e-04],
         ...,
         [-5.9464198e-01,  2.0965035e-01,  3.7800243e-09, ...,
           1.3251044e-22,  1.9666289e-20,  2.9187347e-18],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           9.5463024e-09,  2.7471819e-05,  8.1800967e-02],
         [-7.7833235e-01,  1.7313147e-01, -3.1305701e-01, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 2.1088412e-01,  1.3793443e-01, -8.2340258e-01, ...,
          -3.0756587e-01,  6.6452885e-01,  2.1408239e-01],
         [-6.0283422e-01,  2.4479895e-03,  7.9012036e-01, ...,
           9.7653854e-01,  1.3966532e-01,  8.4918809e-01],
         [ 2.4541075e-04,  9.8843157e-02,  9.1399676e-01, ...,
           9.8843157e-02,  9.8253971e-01,  6.5602921e-04],
         ...,
         [-5.9464198e-01,  2.0965035e-01,  3.7800243e-09, ...,
           1.3251044e-22,  1.9666289e-20,  2.9187347e-18],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           9.5463024e-09,  2.7471819e-05,  8.1800967e-02],
         [-7.7833235e-01,  1.7313147e-01, -3.1305701e-01, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 2.1088412e-01,  1.3793443e-01, -8.2340258e-01, ...,
          -3.0756587e-01,  6.6452885e-01,  2.1408239e-01],
         [-6.0283422e-01,  2.4479895e-03,  7.9012036e-01, ...,
           9.7653854e-01,  1.3966532e-01,  8.4918809e-01],
         [ 2.4541075e-04,  9.8843157e-02,  9.1399676e-01, ...,
           9.8843157e-02,  9.8253971e-01,  6.5602921e-04],
         ...,
         [-5.9464198e-01,  2.0965035e-01,  3.7800243e-09, ...,
           1.3251044e-22,  1.9666289e-20,  2.9187347e-18],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           9.5463024e-09,  2.7471819e-05,  8.1800967e-02],
         [-7.7833235e-01,  1.7313147e-01, -3.1305701e-01, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [12], 'to': [18]}
ms node:
{'name': 'sin', 'output': array([[[[ 2.1088412e-01,  1.3793445e-01, -8.2340258e-01, ...,
          -3.0756611e-01,  6.6452807e-01,  2.1408239e-01],
         [-6.0273677e-01,  2.4479895e-03,  7.9012030e-01, ...,
           9.7653854e-01,  1.3966532e-01,  8.4917998e-01],
         [ 2.4541075e-04,  9.8843172e-02,  9.1399664e-01, ...,
           9.8843172e-02,  9.8253971e-01,  6.5602956e-04],
         ...,
         [-5.9464198e-01,  2.0965034e-01,  3.7800243e-09, ...,
           1.3251044e-22,  1.9666289e-20,  2.9187347e-18],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           9.5463024e-09,  2.7471822e-05,  8.1800967e-02],
         [-7.7835149e-01,  1.7313147e-01, -3.1305701e-01, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 2.1088412e-01,  1.3793445e-01, -8.2340258e-01, ...,
          -3.0756611e-01,  6.6452807e-01,  2.1408239e-01],
         [-6.0273677e-01,  2.4479895e-03,  7.9012030e-01, ...,
           9.7653854e-01,  1.3966532e-01,  8.4917998e-01],
         [ 2.4541075e-04,  9.8843172e-02,  9.1399664e-01, ...,
           9.8843172e-02,  9.8253971e-01,  6.5602956e-04],
         ...,
         [-5.9464198e-01,  2.0965034e-01,  3.7800243e-09, ...,
           1.3251044e-22,  1.9666289e-20,  2.9187347e-18],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           9.5463024e-09,  2.7471822e-05,  8.1800967e-02],
         [-7.7835149e-01,  1.7313147e-01, -3.1305701e-01, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 2.1088412e-01,  1.3793445e-01, -8.2340258e-01, ...,
          -3.0756611e-01,  6.6452807e-01,  2.1408239e-01],
         [-6.0273677e-01,  2.4479895e-03,  7.9012030e-01, ...,
           9.7653854e-01,  1.3966532e-01,  8.4917998e-01],
         [ 2.4541075e-04,  9.8843172e-02,  9.1399664e-01, ...,
           9.8843172e-02,  9.8253971e-01,  6.5602956e-04],
         ...,
         [-5.9464198e-01,  2.0965034e-01,  3.7800243e-09, ...,
           1.3251044e-22,  1.9666289e-20,  2.9187347e-18],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           9.5463024e-09,  2.7471822e-05,  8.1800967e-02],
         [-7.7835149e-01,  1.7313147e-01, -3.1305701e-01, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        ...,

        [[ 2.1088412e-01,  1.3793445e-01, -8.2340258e-01, ...,
          -3.0756611e-01,  6.6452807e-01,  2.1408239e-01],
         [-6.0273677e-01,  2.4479895e-03,  7.9012030e-01, ...,
           9.7653854e-01,  1.3966532e-01,  8.4917998e-01],
         [ 2.4541075e-04,  9.8843172e-02,  9.1399664e-01, ...,
           9.8843172e-02,  9.8253971e-01,  6.5602956e-04],
         ...,
         [-5.9464198e-01,  2.0965034e-01,  3.7800243e-09, ...,
           1.3251044e-22,  1.9666289e-20,  2.9187347e-18],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           9.5463024e-09,  2.7471822e-05,  8.1800967e-02],
         [-7.7835149e-01,  1.7313147e-01, -3.1305701e-01, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 2.1088971e-01,  1.3723922e-01, -8.2781065e-01, ...,
          -3.0756292e-01,  6.6452277e-01,  2.1407308e-01],
         [-6.0279769e-01,  2.4479895e-03,  7.9250860e-01, ...,
           9.7653610e-01,  1.3965966e-01,  8.4922838e-01],
         [ 2.4541086e-04,  9.8843172e-02,  9.1399664e-01, ...,
           9.8843172e-02,  9.8253971e-01,  6.5602944e-04],
         ...,
         [-5.9464198e-01,  2.1036643e-01,  3.7800256e-09, ...,
           1.3251044e-22,  1.9666289e-20,  2.9187347e-18],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           9.5463051e-09,  2.7471822e-05,  8.1800967e-02],
         [-7.7833235e-01,  1.7361234e-01, -3.1282514e-01, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 2.1088971e-01,  1.3723922e-01, -8.2781065e-01, ...,
          -3.0756292e-01,  6.6452277e-01,  2.1407308e-01],
         [-6.0279769e-01,  2.4479895e-03,  7.9250860e-01, ...,
           9.7653610e-01,  1.3965966e-01,  8.4922838e-01],
         [ 2.4541086e-04,  9.8843172e-02,  9.1399664e-01, ...,
           9.8843172e-02,  9.8253971e-01,  6.5602944e-04],
         ...,
         [-5.9464198e-01,  2.1036643e-01,  3.7800256e-09, ...,
           1.3251044e-22,  1.9666289e-20,  2.9187347e-18],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           9.5463051e-09,  2.7471822e-05,  8.1800967e-02],
         [-7.7833235e-01,  1.7361234e-01, -3.1282514e-01, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]]]],
      dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [12], 'to': [18]}
torch node:
{'name': 'sin', 'output': array([[[[ 2.1088412e-01,  1.3793445e-01, -8.2340258e-01, ...,
          -3.0756611e-01,  6.6452879e-01,  2.1408239e-01],
         [-6.0285854e-01,  2.4479895e-03,  8.1003296e-01, ...,
           9.7653854e-01,  1.3966532e-01,  8.4919614e-01],
         [ 2.4541075e-04,  9.8843157e-02,  9.1399670e-01, ...,
           9.8843157e-02,  9.8253971e-01,  6.5602921e-04],
         ...,
         [-5.9464198e-01,  2.0965034e-01,  3.7800243e-09, ...,
           1.3251044e-22,  1.9666289e-20,  2.9187347e-18],
         [ 0.0000000e+00,  1.1479437e-41,  0.0000000e+00, ...,
           9.5463024e-09,  2.7471819e-05,  8.1800967e-02],
         [-7.7833235e-01,  1.7313147e-01, -3.1305701e-01, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 2.1088412e-01,  1.3793445e-01, -8.2340258e-01, ...,
          -3.0756611e-01,  6.6452879e-01,  2.1408239e-01],
         [-6.0285854e-01,  2.4479895e-03,  8.1003296e-01, ...,
           9.7653854e-01,  1.3966532e-01,  8.4919614e-01],
         [ 2.4541075e-04,  9.8843157e-02,  9.1399670e-01, ...,
           9.8843157e-02,  9.8253971e-01,  6.5602921e-04],
         ...,
         [-5.9464198e-01,  2.0965034e-01,  3.7800243e-09, ...,
           1.3251044e-22,  1.9666289e-20,  2.9187347e-18],
         [ 0.0000000e+00,  1.1479437e-41,  0.0000000e+00, ...,
           9.5463024e-09,  2.7471819e-05,  8.1800967e-02],
         [-7.7833235e-01,  1.7313147e-01, -3.1305701e-01, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 2.1088412e-01,  1.3793445e-01, -8.2340258e-01, ...,
          -3.0756611e-01,  6.6452879e-01,  2.1408239e-01],
         [-6.0285854e-01,  2.4479895e-03,  8.1003296e-01, ...,
           9.7653854e-01,  1.3966532e-01,  8.4919614e-01],
         [ 2.4541075e-04,  9.8843157e-02,  9.1399670e-01, ...,
           9.8843157e-02,  9.8253971e-01,  6.5602921e-04],
         ...,
         [-5.9464198e-01,  2.0965034e-01,  3.7800243e-09, ...,
           1.3251044e-22,  1.9666289e-20,  2.9187347e-18],
         [ 0.0000000e+00,  1.1479437e-41,  0.0000000e+00, ...,
           9.5463024e-09,  2.7471819e-05,  8.1800967e-02],
         [-7.7833235e-01,  1.7313147e-01, -3.1305701e-01, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        ...,

        [[ 2.1088412e-01,  1.3793445e-01, -8.2340258e-01, ...,
          -3.0756611e-01,  6.6452879e-01,  2.1408239e-01],
         [-6.0285854e-01,  2.4479895e-03,  8.1003296e-01, ...,
           9.7653854e-01,  1.3966532e-01,  8.4919614e-01],
         [ 2.4541075e-04,  9.8843157e-02,  9.1399670e-01, ...,
           9.8843157e-02,  9.8253971e-01,  6.5602921e-04],
         ...,
         [-5.9464198e-01,  2.0965034e-01,  3.7800243e-09, ...,
           1.3251044e-22,  1.9666289e-20,  2.9187347e-18],
         [ 0.0000000e+00,  1.1479437e-41,  0.0000000e+00, ...,
           9.5463024e-09,  2.7471819e-05,  8.1800967e-02],
         [-7.7833235e-01,  1.7313147e-01, -3.1305701e-01, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 2.1088412e-01,  1.3793445e-01, -8.2340258e-01, ...,
          -3.0756611e-01,  6.6452879e-01,  2.1408239e-01],
         [-6.0285854e-01,  2.4479895e-03,  8.1003296e-01, ...,
           9.7653854e-01,  1.3966532e-01,  8.4919614e-01],
         [ 2.4541075e-04,  9.8843157e-02,  9.1399670e-01, ...,
           9.8843157e-02,  9.8253971e-01,  6.5602921e-04],
         ...,
         [-5.9464198e-01,  2.0965034e-01,  3.7800243e-09, ...,
           1.3251044e-22,  1.9666289e-20,  2.9187347e-18],
         [ 0.0000000e+00,  1.1479437e-41,  0.0000000e+00, ...,
           9.5463024e-09,  2.7471819e-05,  8.1800967e-02],
         [-7.7833235e-01,  1.7313147e-01, -3.1305701e-01, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 2.1088412e-01,  1.3793445e-01, -8.2340258e-01, ...,
          -3.0756611e-01,  6.6452879e-01,  2.1408239e-01],
         [-6.0285854e-01,  2.4479895e-03,  8.1003296e-01, ...,
           9.7653854e-01,  1.3966532e-01,  8.4919614e-01],
         [ 2.4541075e-04,  9.8843157e-02,  9.1399670e-01, ...,
           9.8843157e-02,  9.8253971e-01,  6.5602921e-04],
         ...,
         [-5.9464198e-01,  2.0965034e-01,  3.7800243e-09, ...,
           1.3251044e-22,  1.9666289e-20,  2.9187347e-18],
         [ 0.0000000e+00,  1.1479437e-41,  0.0000000e+00, ...,
           9.5463024e-09,  2.7471819e-05,  8.1800967e-02],
         [-7.7833235e-01,  1.7313147e-01, -3.1305701e-01, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]]]],
      dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [12], 'to': [18]}

generate models:209

analyse output arrays in iter:228

pre layer res:
16:reshape
{'name': 'reshape', 'output': array([[[[8.8142929e+15, 6.6530439e+15, 6.9328809e+15, ...,
          1.5679253e+16, 1.8433866e+16, 1.7666352e+16],
         [8.8142929e+15, 6.6530439e+15, 6.9328809e+15, ...,
          1.5679253e+16, 1.8433866e+16, 1.7666352e+16],
         [8.8142929e+15, 6.6530439e+15, 6.9328809e+15, ...,
          1.5679253e+16, 1.8433866e+16, 1.7666352e+16],
         ...,
         [8.8142929e+15, 6.6530439e+15, 6.9328809e+15, ...,
          1.5679253e+16, 1.8433866e+16, 1.7666352e+16],
         [8.8142929e+15, 6.6530439e+15, 6.9328809e+15, ...,
          1.5679253e+16, 1.8433866e+16, 1.7666352e+16],
         [8.8142929e+15, 6.6530439e+15, 6.9328809e+15, ...,
          1.5679253e+16, 1.8433866e+16, 1.7666352e+16]],

        [[8.8142929e+15, 6.6530439e+15, 6.9328809e+15, ...,
          1.5679253e+16, 1.8433866e+16, 1.7666352e+16],
         [8.8142929e+15, 6.6530439e+15, 6.9328809e+15, ...,
          1.5679253e+16, 1.8433866e+16, 1.7666352e+16],
         [8.8142929e+15, 6.6530439e+15, 6.9328809e+15, ...,
          1.5679253e+16, 1.8433866e+16, 1.7666352e+16],
         ...,
         [8.8142929e+15, 6.6530439e+15, 6.9328809e+15, ...,
          1.5679253e+16, 1.8433866e+16, 1.7666352e+16],
         [8.8142929e+15, 6.6530439e+15, 6.9328809e+15, ...,
          1.5679253e+16, 1.8433866e+16, 1.7666352e+16],
         [8.8142929e+15, 6.6530439e+15, 6.9328809e+15, ...,
          1.5679253e+16, 1.8433866e+16, 1.7666352e+16]],

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],

        ...,

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [15], 'to': [19]}
tf node:
{'name': 'cos', 'output': array([[[[ 0.9879466 ,  0.10410839,  0.4577366 , ..., -0.22310147,
          -0.99615216, -0.76064813],
         [ 0.9879466 ,  0.10410839,  0.4577366 , ..., -0.22310147,
          -0.99615216, -0.76064813],
         [ 0.9879466 ,  0.10410839,  0.4577366 , ..., -0.22310147,
          -0.99615216, -0.76064813],
         ...,
         [ 0.9879466 ,  0.10410839,  0.4577366 , ..., -0.22310147,
          -0.99615216, -0.76064813],
         [ 0.9879466 ,  0.10410839,  0.4577366 , ..., -0.22310147,
          -0.99615216, -0.76064813],
         [ 0.9879466 ,  0.10410839,  0.4577366 , ..., -0.22310147,
          -0.99615216, -0.76064813]],

        [[ 0.9879466 ,  0.10410839,  0.4577366 , ..., -0.22310147,
          -0.99615216, -0.76064813],
         [ 0.9879466 ,  0.10410839,  0.4577366 , ..., -0.22310147,
          -0.99615216, -0.76064813],
         [ 0.9879466 ,  0.10410839,  0.4577366 , ..., -0.22310147,
          -0.99615216, -0.76064813],
         ...,
         [ 0.9879466 ,  0.10410839,  0.4577366 , ..., -0.22310147,
          -0.99615216, -0.76064813],
         [ 0.9879466 ,  0.10410839,  0.4577366 , ..., -0.22310147,
          -0.99615216, -0.76064813],
         [ 0.9879466 ,  0.10410839,  0.4577366 , ..., -0.22310147,
          -0.99615216, -0.76064813]],

        [[ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]],

        ...,

        [[ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [16], 'to': [3]}
ms node:
{'name': 'cos', 'output': array([[[[-0.88322496,  0.1041169 , -0.72299415, ...,  0.4262696 ,
          -0.15175162, -0.19763869],
         [-0.88322496,  0.1041169 , -0.72299415, ...,  0.4262696 ,
          -0.15175162, -0.19763869],
         [-0.88322496,  0.1041169 , -0.72299415, ...,  0.4262696 ,
          -0.15175162, -0.19763869],
         ...,
         [-0.88322496,  0.1041169 , -0.72299415, ...,  0.4262696 ,
          -0.15175162, -0.19763869],
         [-0.26653054,  0.1041169 ,  0.49909395, ...,  0.4262696 ,
          -0.9961501 , -0.76063335],
         [-0.26653054,  0.1041169 ,  0.49909395, ...,  0.4262696 ,
          -0.9961501 , -0.76063335]],

        [[-0.88322496,  0.1041169 , -0.72299415, ...,  0.4262696 ,
          -0.15175162, -0.19763869],
         [-0.88322496,  0.1041169 , -0.72299415, ...,  0.4262696 ,
          -0.15175162, -0.19763869],
         [-0.88322496,  0.1041169 , -0.72299415, ...,  0.4262696 ,
          -0.15175162, -0.19763869],
         ...,
         [-0.88322496,  0.1041169 , -0.72299415, ...,  0.4262696 ,
          -0.15175162, -0.19763869],
         [-0.26653054,  0.1041169 ,  0.49909395, ...,  0.4262696 ,
          -0.9961501 , -0.76063335],
         [-0.26653054,  0.1041169 ,  0.49909395, ...,  0.4262696 ,
          -0.9961501 , -0.76063335]],

        [[ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]],

        ...,

        [[ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [16], 'to': [3]}
torch node:
{'name': 'cos', 'output': array([[[[ 0.9879466 ,  0.10410839, -0.722988  , ...,  0.42625132,
          -0.99615216,  0.44964555],
         [ 0.9879466 ,  0.10410839, -0.722988  , ...,  0.42625132,
          -0.99615216,  0.44964555],
         [ 0.9879466 ,  0.10410839, -0.722988  , ...,  0.42625132,
          -0.99615216,  0.44964555],
         ...,
         [ 0.9879466 ,  0.10410839, -0.722988  , ...,  0.42625132,
          -0.99615216,  0.44964555],
         [ 0.9879466 ,  0.10410839, -0.722988  , ...,  0.42625132,
          -0.99615216,  0.44964555],
         [ 0.9879466 ,  0.10410839, -0.722988  , ...,  0.42625132,
          -0.99615216,  0.44964555]],

        [[ 0.9879466 ,  0.10410839, -0.722988  , ...,  0.42625132,
          -0.99615216,  0.44964555],
         [ 0.9879466 ,  0.10410839, -0.722988  , ...,  0.42625132,
          -0.99615216,  0.44964555],
         [ 0.9879466 ,  0.10410839, -0.722988  , ...,  0.42625132,
          -0.99615216,  0.44964555],
         ...,
         [ 0.9879466 ,  0.10410839, -0.722988  , ...,  0.42625132,
          -0.99615216,  0.44964555],
         [ 0.9879466 ,  0.10410839, -0.722988  , ...,  0.42625132,
          -0.99615216,  0.44964555],
         [ 0.9879466 ,  0.10410839, -0.722988  , ...,  0.42625132,
          -0.99615216,  0.44964555]],

        [[ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]],

        ...,

        [[ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]],

        [[ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         ...,
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ],
         [ 1.        ,  1.        ,  1.        , ...,  1.        ,
           1.        ,  1.        ]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [16], 'to': [3]}

generate models:221

analyse output arrays in iter:234

pre layer res:
7:conv2d
{'name': 'conv2d', 'output': array([[[[4979994.5, 1979676. , 1926427.9, ..., 3036445.8, 3489055.2,
          3732767.5],
         [3427168.2, 2964671.8, 2868415.8, ..., 2067647.8, 1891519.8,
          4054272.5],
         [4725604. , 1162430.5, 1090750.1, ..., 2200767.8, 2649279.8,
          2911490.5],
         ...,
         [2594367.8, 2196671.8, 1772735.6, ..., 1328318.8, 1070270.1,
          3706113.8],
         [4957759.5, 1971391.8, 1920191.8, ..., 3251391.8, 3509439.8,
          3529986. ],
         [3126783.8, 2704575.8, 2593983.8, ..., 2036927.8, 1938623.8,
          4142336.5]],

        [[4979994.5, 1979676. , 1926427.9, ..., 3036445.8, 3489055.2,
          3732767.5],
         [3427168.2, 2964671.8, 2868415.8, ..., 2067647.8, 1891519.8,
          4054272.5],
         [4725604. , 1162430.5, 1090750.1, ..., 2200767.8, 2649279.8,
          2911490.5],
         ...,
         [2594367.8, 2196671.8, 1772735.6, ..., 1328318.8, 1070270.1,
          3706113.8],
         [4957759.5, 1971391.8, 1920191.8, ..., 3251391.8, 3509439.8,
          3529986. ],
         [3126783.8, 2704575.8, 2593983.8, ..., 2036927.8, 1938623.8,
          4142336.5]],

        [[4979994.5, 1979676. , 1926427.9, ..., 3036445.8, 3489055.2,
          3732767.5],
         [3427168.2, 2964671.8, 2868415.8, ..., 2067647.8, 1891519.8,
          4054272.5],
         [4725604. , 1162430.5, 1090750.1, ..., 2200767.8, 2649279.8,
          2911490.5],
         ...,
         [2594367.8, 2196671.8, 1772735.6, ..., 1328318.8, 1070270.1,
          3706113.8],
         [4957759.5, 1971391.8, 1920191.8, ..., 3251391.8, 3509439.8,
          3529986. ],
         [3126783.8, 2704575.8, 2593983.8, ..., 2036927.8, 1938623.8,
          4142336.5]],

        ...,

        [[4979994.5, 1979676. , 1926427.9, ..., 3036445.8, 3489055.2,
          3732767.5],
         [3427168.2, 2964671.8, 2868415.8, ..., 2067647.8, 1891519.8,
          4054272.5],
         [4725604. , 1162430.5, 1090750.1, ..., 2200767.8, 2649279.8,
          2911490.5],
         ...,
         [2594367.8, 2196671.8, 1772735.6, ..., 1328318.8, 1070270.1,
          3706113.8],
         [4957759.5, 1971391.8, 1920191.8, ..., 3251391.8, 3509439.8,
          3529986. ],
         [3126783.8, 2704575.8, 2593983.8, ..., 2036927.8, 1938623.8,
          4142336.5]],

        [[4979994.5, 1979676. , 1926427.9, ..., 3036445.8, 3489055.2,
          3732767.5],
         [3427168.2, 2964671.8, 2868415.8, ..., 2067647.8, 1891519.8,
          4054272.5],
         [4725604. , 1162430.5, 1090750.1, ..., 2200767.8, 2649279.8,
          2911490.5],
         ...,
         [2594367.8, 2196671.8, 1772735.6, ..., 1328318.8, 1070270.1,
          3706113.8],
         [4957759.5, 1971391.8, 1920191.8, ..., 3251391.8, 3509439.8,
          3529986. ],
         [3126783.8, 2704575.8, 2593983.8, ..., 2036927.8, 1938623.8,
          4142336.5]],

        [[4979994.5, 1979676. , 1926427.9, ..., 3036445.8, 3489055.2,
          3732767.5],
         [3427168.2, 2964671.8, 2868415.8, ..., 2067647.8, 1891519.8,
          4054272.5],
         [4725604. , 1162430.5, 1090750.1, ..., 2200767.8, 2649279.8,
          2911490.5],
         ...,
         [2594367.8, 2196671.8, 1772735.6, ..., 1328318.8, 1070270.1,
          3706113.8],
         [4957759.5, 1971391.8, 1920191.8, ..., 3251391.8, 3509439.8,
          3529986. ],
         [3126783.8, 2704575.8, 2593983.8, ..., 2036927.8, 1938623.8,
          4142336.5]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [6], 'to': [18]}
tf node:
{'name': 'cos', 'output': array([[[[-0.05497871,  0.1804618 , -0.99301946, ..., -0.5905414 ,
          -0.76954406, -0.8054486 ],
         [ 0.1115771 ,  0.5162843 , -0.9594919 , ..., -0.637353  ,
          -0.19867282, -0.9983957 ],
         [ 0.08976104, -0.9296011 , -0.15067193, ...,  0.91521657,
           0.97966105,  0.7907704 ],
         ...,
         [-0.9541351 ,  0.49620718, -0.6493819 , ..., -0.9995191 ,
           0.19254662, -0.44260806],
         [ 0.9077108 , -0.05160549,  0.99850744, ...,  0.9076409 ,
          -0.4046557 , -0.18154445],
         [ 0.8450278 , -0.8105691 , -0.5150458 , ...,  0.728394  ,
          -0.94586563, -0.48134053]],

        [[-0.05497871,  0.1804618 , -0.99301946, ..., -0.5905414 ,
          -0.76954406, -0.8054486 ],
         [ 0.1115771 ,  0.5162843 , -0.9594919 , ..., -0.637353  ,
          -0.19867282, -0.9983957 ],
         [ 0.08976104, -0.9296011 , -0.15067193, ...,  0.91521657,
           0.97966105,  0.7907704 ],
         ...,
         [-0.9541351 ,  0.49620718, -0.6493819 , ..., -0.9995191 ,
           0.19254662, -0.44260806],
         [ 0.9077108 , -0.05160549,  0.99850744, ...,  0.9076409 ,
          -0.4046557 , -0.18154445],
         [ 0.8450278 , -0.8105691 , -0.5150458 , ...,  0.728394  ,
          -0.94586563, -0.48134053]],

        [[-0.05497871,  0.1804618 , -0.99301946, ..., -0.5905414 ,
          -0.76954406, -0.8054486 ],
         [ 0.1115771 ,  0.5162843 , -0.9594919 , ..., -0.637353  ,
          -0.19867282, -0.9983957 ],
         [ 0.08976104, -0.9296011 , -0.15067193, ...,  0.91521657,
           0.97966105,  0.7907704 ],
         ...,
         [-0.9541351 ,  0.49620718, -0.6493819 , ..., -0.9995191 ,
           0.19254662, -0.44260806],
         [ 0.9077108 , -0.05160549,  0.99850744, ...,  0.9076409 ,
          -0.4046557 , -0.18154445],
         [ 0.8450278 , -0.8105691 , -0.5150458 , ...,  0.728394  ,
          -0.94586563, -0.48134053]],

        ...,

        [[-0.05497871,  0.1804618 , -0.99301946, ..., -0.5905414 ,
          -0.76954406, -0.8054486 ],
         [ 0.1115771 ,  0.5162843 , -0.9594919 , ..., -0.637353  ,
          -0.19867282, -0.9983957 ],
         [ 0.08976104, -0.9296011 , -0.15067193, ...,  0.91521657,
           0.97966105,  0.7907704 ],
         ...,
         [-0.9541351 ,  0.49620718, -0.6493819 , ..., -0.9995191 ,
           0.19254662, -0.44260806],
         [ 0.9077108 , -0.05160549,  0.99850744, ...,  0.9076409 ,
          -0.4046557 , -0.18154445],
         [ 0.8450278 , -0.8105691 , -0.5150458 , ...,  0.728394  ,
          -0.94586563, -0.48134053]],

        [[-0.05497871,  0.1804618 , -0.99301946, ..., -0.5905414 ,
          -0.76954406, -0.8054486 ],
         [ 0.1115771 ,  0.5162843 , -0.9594919 , ..., -0.637353  ,
          -0.19867282, -0.9983957 ],
         [ 0.08976104, -0.9296011 , -0.15067193, ...,  0.91521657,
           0.97966105,  0.7907704 ],
         ...,
         [-0.9541351 ,  0.49620718, -0.6493819 , ..., -0.9995191 ,
           0.19254662, -0.44260806],
         [ 0.9077108 , -0.05160549,  0.99850744, ...,  0.9076409 ,
          -0.4046557 , -0.18154445],
         [ 0.8450278 , -0.8105691 , -0.5150458 , ...,  0.728394  ,
          -0.94586563, -0.48134053]],

        [[-0.05497871,  0.1804618 , -0.99301946, ..., -0.5905414 ,
          -0.76954406, -0.8054486 ],
         [ 0.1115771 ,  0.5162843 , -0.9594919 , ..., -0.637353  ,
          -0.19867282, -0.9983957 ],
         [ 0.08976104, -0.9296011 , -0.15067193, ...,  0.91521657,
           0.97966105,  0.7907704 ],
         ...,
         [-0.9541351 ,  0.49620718, -0.6493819 , ..., -0.9995191 ,
           0.19254662, -0.44260806],
         [ 0.9077108 , -0.05160549,  0.99850744, ...,  0.9076409 ,
          -0.4046557 , -0.18154445],
         [ 0.8450278 , -0.8105691 , -0.5150458 , ...,  0.728394  ,
          -0.94586563, -0.48134053]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [7], 'to': [8]}
ms node:
{'name': 'cos', 'output': array([[[[-0.05497871,  0.05642595, -0.9705661 , ..., -0.59054136,
          -0.76954406, -0.6337813 ],
         [ 0.11157709,  0.5162843 , -0.9594919 , ..., -0.5363093 ,
          -0.31931216, -0.9533494 ],
         [ 0.08976104, -0.9296011 , -0.15067191, ...,  0.91521657,
           0.97966105,  0.7907704 ],
         ...,
         [-0.9541351 ,  0.49620715, -0.6493819 , ..., -0.9995191 ,
           0.1925466 , -0.44260803],
         [ 0.9077108 , -0.17571145,  0.997526  , ...,  0.9076409 ,
          -0.4046557 , -0.18154445],
         [ 0.84502774, -0.8105691 , -0.5150458 , ...,  0.8081327 ,
          -0.9789499 , -0.68323475]],

        [[-0.05497871,  0.05642595, -0.9705661 , ..., -0.59054136,
          -0.76954406, -0.6337813 ],
         [ 0.11157709,  0.5162843 , -0.9594919 , ..., -0.5363093 ,
          -0.31931216, -0.9533494 ],
         [ 0.08976104, -0.9296011 , -0.15067191, ...,  0.91521657,
           0.97966105,  0.7907704 ],
         ...,
         [-0.9541351 ,  0.49620715, -0.6493819 , ..., -0.9995191 ,
           0.1925466 , -0.44260803],
         [ 0.9077108 , -0.17571145,  0.997526  , ...,  0.9076409 ,
          -0.4046557 , -0.18154445],
         [ 0.84502774, -0.8105691 , -0.5150458 , ...,  0.8081327 ,
          -0.9789499 , -0.68323475]],

        [[-0.05497871,  0.05642595, -0.9705661 , ..., -0.59054136,
          -0.76954406, -0.6337813 ],
         [ 0.11157709,  0.5162843 , -0.9594919 , ..., -0.5363093 ,
          -0.31931216, -0.9533494 ],
         [ 0.08976104, -0.9296011 , -0.15067191, ...,  0.91521657,
           0.97966105,  0.7907704 ],
         ...,
         [-0.9541351 ,  0.49620715, -0.6493819 , ..., -0.9995191 ,
           0.1925466 , -0.44260803],
         [ 0.9077108 , -0.17571145,  0.997526  , ...,  0.9076409 ,
          -0.4046557 , -0.18154445],
         [ 0.84502774, -0.8105691 , -0.5150458 , ...,  0.8081327 ,
          -0.9789499 , -0.68323475]],

        ...,

        [[-0.05497871,  0.05642595, -0.9705661 , ..., -0.59054136,
          -0.76954406, -0.6337813 ],
         [ 0.11157709,  0.5162843 , -0.9594919 , ..., -0.5363093 ,
          -0.31931216, -0.9533494 ],
         [ 0.08976104, -0.9296011 , -0.15067191, ...,  0.91521657,
           0.97966105,  0.7907704 ],
         ...,
         [-0.9541351 ,  0.49620715, -0.6493819 , ..., -0.9995191 ,
           0.1925466 , -0.44260803],
         [ 0.9077108 , -0.17571145,  0.997526  , ...,  0.9076409 ,
          -0.4046557 , -0.18154445],
         [ 0.84502774, -0.8105691 , -0.5150458 , ...,  0.8081327 ,
          -0.9789499 , -0.68323475]],

        [[-0.96446234, -0.40306482,  0.9999518 , ...,  0.9795616 ,
          -0.3691803 , -0.18535388],
         [ 0.11157709,  0.7121153 , -0.9993663 , ..., -0.31082246,
          -0.5438378 , -0.6919191 ],
         [-0.43342456, -0.43340135,  0.9996093 , ...,  0.98645914,
           0.8995618 , -0.9730097 ],
         ...,
         [-0.9541351 ,  0.6955784 , -0.8173356 , ..., -0.28574473,
          -0.9998941 , -0.803462  ],
         [ 0.9077108 , -0.4138038 ,  0.9491232 , ...,  0.9832717 ,
          -0.4046557 ,  0.9999944 ],
         [ 0.95105034, -0.93026084, -0.2869689 , ...,  0.9287309 ,
          -0.99901205, -0.94967085]],

        [[-0.96446234, -0.40306482,  0.9999518 , ...,  0.9795616 ,
          -0.3691803 , -0.18535388],
         [ 0.11157709,  0.7121153 , -0.9993663 , ..., -0.31082246,
          -0.5438378 , -0.6919191 ],
         [-0.43342456, -0.43340135,  0.9996093 , ...,  0.98645914,
           0.8995618 , -0.9730097 ],
         ...,
         [-0.9541351 ,  0.6955784 , -0.8173356 , ..., -0.28574473,
          -0.9998941 , -0.803462  ],
         [ 0.9077108 , -0.4138038 ,  0.9491232 , ...,  0.9832717 ,
          -0.4046557 ,  0.9999944 ],
         [ 0.95105034, -0.93026084, -0.2869689 , ...,  0.9287309 ,
          -0.99901205, -0.94967085]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [7], 'to': [8]}
torch node:
{'name': 'cos', 'output': array([[[[-0.05497871,  0.05642595, -0.9705661 , ..., -0.59054136,
          -0.76954406, -0.6337813 ],
         [ 0.11157709,  0.5162843 , -0.9594919 , ..., -0.5363093 ,
          -0.31931216, -0.9533494 ],
         [ 0.08976104, -0.9296011 , -0.15067191, ...,  0.91521657,
           0.97966105,  0.7907704 ],
         ...,
         [-0.9541351 ,  0.49620715, -0.6493819 , ..., -0.99951917,
           0.1925466 , -0.44260803],
         [ 0.9077108 , -0.17571145,  0.997526  , ...,  0.9076409 ,
          -0.4046557 , -0.18154445],
         [ 0.84502774, -0.8105691 , -0.5150458 , ...,  0.8081327 ,
          -0.9789499 , -0.68323475]],

        [[-0.05497871,  0.05642595, -0.9705661 , ..., -0.59054136,
          -0.76954406, -0.6337813 ],
         [ 0.11157709,  0.5162843 , -0.9594919 , ..., -0.5363093 ,
          -0.31931216, -0.9533494 ],
         [ 0.08976104, -0.9296011 , -0.15067191, ...,  0.91521657,
           0.97966105,  0.7907704 ],
         ...,
         [-0.9541351 ,  0.49620715, -0.6493819 , ..., -0.99951917,
           0.1925466 , -0.44260803],
         [ 0.9077108 , -0.17571145,  0.997526  , ...,  0.9076409 ,
          -0.4046557 , -0.18154445],
         [ 0.84502774, -0.8105691 , -0.5150458 , ...,  0.8081327 ,
          -0.9789499 , -0.68323475]],

        [[-0.05497871,  0.05642595, -0.9705661 , ..., -0.59054136,
          -0.76954406, -0.6337813 ],
         [ 0.11157709,  0.5162843 , -0.9594919 , ..., -0.5363093 ,
          -0.31931216, -0.9533494 ],
         [ 0.08976104, -0.9296011 , -0.15067191, ...,  0.91521657,
           0.97966105,  0.7907704 ],
         ...,
         [-0.9541351 ,  0.49620715, -0.6493819 , ..., -0.99951917,
           0.1925466 , -0.44260803],
         [ 0.9077108 , -0.17571145,  0.997526  , ...,  0.9076409 ,
          -0.4046557 , -0.18154445],
         [ 0.84502774, -0.8105691 , -0.5150458 , ...,  0.8081327 ,
          -0.9789499 , -0.68323475]],

        ...,

        [[-0.05497871,  0.05642595, -0.9705661 , ..., -0.59054136,
          -0.76954406, -0.6337813 ],
         [ 0.11157709,  0.5162843 , -0.9594919 , ..., -0.5363093 ,
          -0.31931216, -0.9533494 ],
         [ 0.08976104, -0.9296011 , -0.15067191, ...,  0.91521657,
           0.97966105,  0.7907704 ],
         ...,
         [-0.9541351 ,  0.49620715, -0.6493819 , ..., -0.99951917,
           0.1925466 , -0.44260803],
         [ 0.9077108 , -0.17571145,  0.997526  , ...,  0.9076409 ,
          -0.4046557 , -0.18154445],
         [ 0.84502774, -0.8105691 , -0.5150458 , ...,  0.8081327 ,
          -0.9789499 , -0.68323475]],

        [[-0.05497871,  0.05642595, -0.9705661 , ..., -0.59054136,
          -0.76954406, -0.6337813 ],
         [ 0.11157709,  0.5162843 , -0.9594919 , ..., -0.5363093 ,
          -0.31931216, -0.9533494 ],
         [ 0.08976104, -0.9296011 , -0.15067191, ...,  0.91521657,
           0.97966105,  0.7907704 ],
         ...,
         [-0.9541351 ,  0.49620715, -0.6493819 , ..., -0.99951917,
           0.1925466 , -0.44260803],
         [ 0.9077108 , -0.17571145,  0.997526  , ...,  0.9076409 ,
          -0.4046557 , -0.18154445],
         [ 0.84502774, -0.8105691 , -0.5150458 , ...,  0.8081327 ,
          -0.9789499 , -0.68323475]],

        [[-0.05497871,  0.05642595, -0.9705661 , ..., -0.59054136,
          -0.76954406, -0.6337813 ],
         [ 0.11157709,  0.5162843 , -0.9594919 , ..., -0.5363093 ,
          -0.31931216, -0.9533494 ],
         [ 0.08976104, -0.9296011 , -0.15067191, ...,  0.91521657,
           0.97966105,  0.7907704 ],
         ...,
         [-0.9541351 ,  0.49620715, -0.6493819 , ..., -0.99951917,
           0.1925466 , -0.44260803],
         [ 0.9077108 , -0.17571145,  0.997526  , ...,  0.9076409 ,
          -0.4046557 , -0.18154445],
         [ 0.84502774, -0.8105691 , -0.5150458 , ...,  0.8081327 ,
          -0.9789499 , -0.68323475]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [7], 'to': [8]}

generate models:226

analyse output arrays in iter:240

pre layer res:
7:conv2d
{'name': 'conv2d', 'output': array([[[[0.0000000e+00, 1.0067051e+03, 6.1110005e+03, ...,
          4.9632554e+03, 4.9635996e+03, 4.9635996e+03],
         [4.7936255e+03, 1.0067051e+03, 5.8749370e+03, ...,
          5.4924380e+03, 6.1760015e+03, 6.2332705e+03],
         [4.7936255e+03, 4.7936255e+03, 5.8749370e+03, ...,
          2.1011526e+03, 6.0538794e+03, 4.8971880e+03],
         ...,
         [1.0067051e+03, 6.1110005e+03, 6.0837671e+03, ...,
          4.1541328e+03, 6.2241060e+03, 5.3445576e+03],
         [0.0000000e+00, 1.2191578e+03, 6.2064580e+03, ...,
          1.0776974e+03, 2.5477063e+03, 5.9599585e+03],
         [3.2531873e+03, 4.9388507e-01, 5.8901831e+03, ...,
          5.2914180e+03, 6.1760015e+03, 6.0741455e+03]],

        [[0.0000000e+00, 1.0067051e+03, 6.1110005e+03, ...,
          4.9632554e+03, 4.9635996e+03, 4.9635996e+03],
         [4.7936255e+03, 1.0067051e+03, 5.8749370e+03, ...,
          5.4924380e+03, 6.1760015e+03, 6.2332705e+03],
         [4.7936255e+03, 4.7936255e+03, 5.8749370e+03, ...,
          2.1011526e+03, 6.0538794e+03, 4.8971880e+03],
         ...,
         [1.0067051e+03, 6.1110005e+03, 6.0837671e+03, ...,
          4.1541328e+03, 6.2241060e+03, 5.3445576e+03],
         [0.0000000e+00, 1.2191578e+03, 6.2064580e+03, ...,
          1.0776974e+03, 2.5477063e+03, 5.9599585e+03],
         [3.2531873e+03, 4.9388507e-01, 5.8901831e+03, ...,
          5.2914180e+03, 6.1760015e+03, 6.0741455e+03]],

        [[0.0000000e+00, 1.0067051e+03, 6.1110005e+03, ...,
          4.9632554e+03, 4.9635996e+03, 4.9635996e+03],
         [4.7936255e+03, 1.0067051e+03, 5.8749370e+03, ...,
          5.4924380e+03, 6.1760015e+03, 6.2332705e+03],
         [4.7936255e+03, 4.7936255e+03, 5.8749370e+03, ...,
          2.1011526e+03, 6.0538794e+03, 4.8971880e+03],
         ...,
         [1.0067051e+03, 6.1110005e+03, 6.0837671e+03, ...,
          4.1541328e+03, 6.2241060e+03, 5.3445576e+03],
         [0.0000000e+00, 1.2191578e+03, 6.2064580e+03, ...,
          1.0776974e+03, 2.5477063e+03, 5.9599585e+03],
         [3.2531873e+03, 4.9388507e-01, 5.8901831e+03, ...,
          5.2914180e+03, 6.1760015e+03, 6.0741455e+03]],

        ...,

        [[0.0000000e+00, 1.0067051e+03, 6.1110005e+03, ...,
          4.9632554e+03, 4.9635996e+03, 4.9635996e+03],
         [4.7936255e+03, 1.0067051e+03, 5.8749370e+03, ...,
          5.4924380e+03, 6.1760015e+03, 6.2332705e+03],
         [4.7936255e+03, 4.7936255e+03, 5.8749370e+03, ...,
          2.1011526e+03, 6.0538794e+03, 4.8971880e+03],
         ...,
         [1.0067051e+03, 6.1110005e+03, 6.0837671e+03, ...,
          4.1541328e+03, 6.2241060e+03, 5.3445576e+03],
         [0.0000000e+00, 1.2191578e+03, 6.2064580e+03, ...,
          1.0776974e+03, 2.5477063e+03, 5.9599585e+03],
         [3.2531873e+03, 4.9388507e-01, 5.8901831e+03, ...,
          5.2914180e+03, 6.1760015e+03, 6.0741455e+03]],

        [[0.0000000e+00, 1.0067051e+03, 6.1110005e+03, ...,
          4.9632554e+03, 4.9635996e+03, 4.9635996e+03],
         [4.7936255e+03, 1.0067051e+03, 5.8749370e+03, ...,
          5.4924380e+03, 6.1760015e+03, 6.2332705e+03],
         [4.7936255e+03, 4.7936255e+03, 5.8749370e+03, ...,
          2.1011526e+03, 6.0538794e+03, 4.8971880e+03],
         ...,
         [1.0067051e+03, 6.1110005e+03, 6.0837671e+03, ...,
          4.1541328e+03, 6.2241060e+03, 5.3445576e+03],
         [0.0000000e+00, 1.2191578e+03, 6.2064580e+03, ...,
          1.0776974e+03, 2.5477063e+03, 5.9599585e+03],
         [3.2531873e+03, 4.9388507e-01, 5.8901831e+03, ...,
          5.2914180e+03, 6.1760015e+03, 6.0741455e+03]],

        [[0.0000000e+00, 1.0067051e+03, 6.1110005e+03, ...,
          4.9632554e+03, 4.9635996e+03, 4.9635996e+03],
         [4.7936255e+03, 1.0067051e+03, 5.8749370e+03, ...,
          5.4924380e+03, 6.1760015e+03, 6.2332705e+03],
         [4.7936255e+03, 4.7936255e+03, 5.8749370e+03, ...,
          2.1011526e+03, 6.0538794e+03, 4.8971880e+03],
         ...,
         [1.0067051e+03, 6.1110005e+03, 6.0837671e+03, ...,
          4.1541328e+03, 6.2241060e+03, 5.3445576e+03],
         [0.0000000e+00, 1.2191578e+03, 6.2064580e+03, ...,
          1.0776974e+03, 2.5477063e+03, 5.9599585e+03],
         [3.2531873e+03, 4.9388507e-01, 5.8901831e+03, ...,
          5.2914180e+03, 6.1760015e+03, 6.0741455e+03]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [6], 'to': [17]}
tf node:
{'name': 'softmax', 'output': array([[[[0.0000000e+00, 0.0000000e+00, 3.9627971e-36, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.3418471e-25, 9.9846399e-01],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.0613334e-05, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 3.7298257e-13, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.9649681e-03, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 3.9627971e-36, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.3418471e-25, 9.9846399e-01],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.0613334e-05, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 3.7298257e-13, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.9649681e-03, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 3.9627971e-36, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.3418471e-25, 9.9846399e-01],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.0613334e-05, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 3.7298257e-13, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.9649681e-03, 0.0000000e+00]],

        ...,

        [[0.0000000e+00, 0.0000000e+00, 3.9627971e-36, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.3418471e-25, 9.9846399e-01],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.0613334e-05, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 3.7298257e-13, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.9649681e-03, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 3.9627971e-36, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.3418471e-25, 9.9846399e-01],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.0613334e-05, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 3.7298257e-13, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.9649681e-03, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 3.9627971e-36, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.3418471e-25, 9.9846399e-01],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.0613334e-05, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 3.7298257e-13, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.9649681e-03, 0.0000000e+00]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [7], 'to': [8]}
ms node:
{'name': 'softmax', 'output': array([[[[0.0000000e+00, 0.0000000e+00, 3.9627982e-36, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.3431576e-25, 9.9846327e-01],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.0593217e-05, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 3.7301260e-13, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.9664075e-03, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 3.9627982e-36, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.3431576e-25, 9.9846327e-01],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.0593217e-05, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 3.7301260e-13, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.9664075e-03, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 3.9627982e-36, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.3431576e-25, 9.9846327e-01],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.0593217e-05, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 3.7301260e-13, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.9664075e-03, 0.0000000e+00]],

        ...,

        [[0.0000000e+00, 0.0000000e+00, 3.9627982e-36, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.3431576e-25, 9.9846327e-01],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.0593217e-05, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 3.7301260e-13, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.9664075e-03, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 3.9377231e-36, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.3314429e-25, 9.9849224e-01],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.0175205e-05, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 3.7283051e-13, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.9592169e-03, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 3.9377231e-36, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.3314429e-25, 9.9849224e-01],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.0175205e-05, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 3.7283051e-13, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.9592169e-03, 0.0000000e+00]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [7], 'to': [8]}
torch node:
{'name': 'softmax', 'output': array([[[[0.0000000e+00, 0.0000000e+00, 3.9627971e-36, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.3431573e-25, 9.9846327e-01],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.0593212e-05, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 3.7301255e-13, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.9664075e-03, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 3.9627971e-36, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.3431573e-25, 9.9846327e-01],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.0593212e-05, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 3.7301255e-13, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.9664075e-03, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 3.9627971e-36, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.3431573e-25, 9.9846327e-01],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.0593212e-05, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 3.7301255e-13, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.9664075e-03, 0.0000000e+00]],

        ...,

        [[0.0000000e+00, 0.0000000e+00, 3.9627971e-36, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.3431573e-25, 9.9846327e-01],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.0593212e-05, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 3.7301255e-13, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.9664075e-03, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 3.9627971e-36, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.3431573e-25, 9.9846327e-01],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.0593212e-05, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 3.7301255e-13, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.9664075e-03, 0.0000000e+00]],

        [[0.0000000e+00, 0.0000000e+00, 3.9627971e-36, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 1.3431573e-25, 9.9846327e-01],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         ...,
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.0593212e-05, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 3.7301255e-13, ...,
          0.0000000e+00, 0.0000000e+00, 0.0000000e+00],
         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, ...,
          0.0000000e+00, 2.9664075e-03, 0.0000000e+00]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [7], 'to': [8]}

generate models:232

analyse output arrays in iter:246

pre layer res:
12:add
{'name': 'add', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [8, 23], 'to': [9]}
tf node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        ...,

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         ...,
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         ...,
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         ...,
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [12], 'to': [10]}
ms node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        ...,

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         ...,
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         ...,
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]],

        [[ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         ...,
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00],
         [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,
           0.0000000e+00,  0.0000000e+00,  0.0000000e+00]]]],
      dtype=float32), 'output_shape': (1, 128, 8, 8), 'from': [12], 'to': [10]}
torch node:
{'name': 'maxpool2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]],

        [[  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         ...,
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.],
         [  0.,   0.,   0., ...,   0.,   0.,   0.]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 8, 8]), 'from': [12], 'to': [10]}

generate models:238

analyse output arrays in iter:248

pre layer res:
12:log
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [20], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [12], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [12], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [12], 'to': []}

generate models:240

analyse output arrays in iter:261

pre layer res:
11:cos
{'name': 'cos', 'output': array([[[[ 0.3581438 ,  0.39096957,  0.42505234, ..., -0.9967173 ,
          -0.86607474, -0.9004839 ],
         [-0.41521466, -0.99967414,  0.9320832 , ...,  0.99020827,
          -0.74112296, -0.80812305],
         [ 0.99446607,  0.99617   , -0.12892032, ..., -0.97904265,
           0.1527621 , -0.5972035 ],
         ...,
         [-0.7061489 , -0.98576003,  0.8793587 , ..., -0.98850954,
          -0.9999703 , -0.5541852 ],
         [ 0.9186286 , -0.18126059, -0.79894966, ...,  0.9247006 ,
           0.02992047,  0.6064391 ],
         [ 0.06540449, -0.3332845 ,  0.9114902 , ...,  0.9841583 ,
           0.9871425 , -0.9796037 ]],

        [[ 0.3581438 ,  0.39096957,  0.42505234, ..., -0.9967173 ,
          -0.86607474, -0.9004839 ],
         [-0.41521466, -0.99967414,  0.9320832 , ...,  0.99020827,
          -0.74112296, -0.80812305],
         [ 0.99446607,  0.99617   , -0.12892032, ..., -0.97904265,
           0.1527621 , -0.5972035 ],
         ...,
         [-0.7061489 , -0.98576003,  0.8793587 , ..., -0.98850954,
          -0.9999703 , -0.5541852 ],
         [ 0.9186286 , -0.18126059, -0.79894966, ...,  0.9247006 ,
           0.02992047,  0.6064391 ],
         [ 0.06540449, -0.3332845 ,  0.9114902 , ...,  0.9841583 ,
           0.9871425 , -0.9796037 ]],

        [[ 0.3581438 ,  0.39096957,  0.42505234, ..., -0.9967173 ,
          -0.86607474, -0.9004839 ],
         [-0.41521466, -0.99967414,  0.9320832 , ...,  0.99020827,
          -0.74112296, -0.80812305],
         [ 0.99446607,  0.99617   , -0.12892032, ..., -0.97904265,
           0.1527621 , -0.5972035 ],
         ...,
         [-0.7061489 , -0.98576003,  0.8793587 , ..., -0.98850954,
          -0.9999703 , -0.5541852 ],
         [ 0.9186286 , -0.18126059, -0.79894966, ...,  0.9247006 ,
           0.02992047,  0.6064391 ],
         [ 0.06540449, -0.3332845 ,  0.9114902 , ...,  0.9841583 ,
           0.9871425 , -0.9796037 ]],

        ...,

        [[ 0.3581438 ,  0.39096957,  0.42505234, ..., -0.9967173 ,
          -0.86607474, -0.9004839 ],
         [-0.41521466, -0.99967414,  0.9320832 , ...,  0.99020827,
          -0.74112296, -0.80812305],
         [ 0.99446607,  0.99617   , -0.12892032, ..., -0.97904265,
           0.1527621 , -0.5972035 ],
         ...,
         [-0.7061489 , -0.98576003,  0.8793587 , ..., -0.98850954,
          -0.9999703 , -0.5541852 ],
         [ 0.9186286 , -0.18126059, -0.79894966, ...,  0.9247006 ,
           0.02992047,  0.6064391 ],
         [ 0.06540449, -0.3332845 ,  0.9114902 , ...,  0.9841583 ,
           0.9871425 , -0.9796037 ]],

        [[ 0.3581438 ,  0.39096957,  0.42505234, ..., -0.9967173 ,
          -0.86607474, -0.9004839 ],
         [-0.41521466, -0.99967414,  0.9320832 , ...,  0.99020827,
          -0.74112296, -0.80812305],
         [ 0.99446607,  0.99617   , -0.12892032, ..., -0.97904265,
           0.1527621 , -0.5972035 ],
         ...,
         [-0.7061489 , -0.98576003,  0.8793587 , ..., -0.98850954,
          -0.9999703 , -0.5541852 ],
         [ 0.9186286 , -0.18126059, -0.79894966, ...,  0.9247006 ,
           0.02992047,  0.6064391 ],
         [ 0.06540449, -0.3332845 ,  0.9114902 , ...,  0.9841583 ,
           0.9871425 , -0.9796037 ]],

        [[ 0.3581438 ,  0.39096957,  0.42505234, ..., -0.9967173 ,
          -0.86607474, -0.9004839 ],
         [-0.41521466, -0.99967414,  0.9320832 , ...,  0.99020827,
          -0.74112296, -0.80812305],
         [ 0.99446607,  0.99617   , -0.12892032, ..., -0.97904265,
           0.1527621 , -0.5972035 ],
         ...,
         [-0.7061489 , -0.98576003,  0.8793587 , ..., -0.98850954,
          -0.9999703 , -0.5541852 ],
         [ 0.9186286 , -0.18126059, -0.79894966, ...,  0.9247006 ,
           0.02992047,  0.6064391 ],
         [ 0.06540449, -0.3332845 ,  0.9114902 , ...,  0.9841583 ,
           0.9871425 , -0.9796037 ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [2], 'to': [16]}
tf node:
{'name': 'log', 'output': array([[[[-1.0268207 , -0.93912554, -0.85554296, ...,         nan,
                  nan,         nan],
         [        nan,         nan, -0.07033321, ..., -0.00983999,
                  nan,         nan],
         [-0.0055493 , -0.00383737,         nan, ...,         nan,
          -1.8788735 ,         nan],
         ...,
         [        nan,         nan, -0.12856238, ...,         nan,
                  nan,         nan],
         [-0.0848734 ,         nan,         nan, ..., -0.07828525,
          -3.5092125 , -0.5001509 ],
         [-2.7271643 ,         nan, -0.09267443, ..., -0.01596854,
          -0.01294087,         nan]],

        [[-1.0268207 , -0.93912554, -0.85554296, ...,         nan,
                  nan,         nan],
         [        nan,         nan, -0.07033321, ..., -0.00983999,
                  nan,         nan],
         [-0.0055493 , -0.00383737,         nan, ...,         nan,
          -1.8788735 ,         nan],
         ...,
         [        nan,         nan, -0.12856238, ...,         nan,
                  nan,         nan],
         [-0.0848734 ,         nan,         nan, ..., -0.07828525,
          -3.5092125 , -0.5001509 ],
         [-2.7271643 ,         nan, -0.09267443, ..., -0.01596854,
          -0.01294087,         nan]],

        [[-1.0268207 , -0.93912554, -0.85554296, ...,         nan,
                  nan,         nan],
         [        nan,         nan, -0.07033321, ..., -0.00983999,
                  nan,         nan],
         [-0.0055493 , -0.00383737,         nan, ...,         nan,
          -1.8788735 ,         nan],
         ...,
         [        nan,         nan, -0.12856238, ...,         nan,
                  nan,         nan],
         [-0.0848734 ,         nan,         nan, ..., -0.07828525,
          -3.5092125 , -0.5001509 ],
         [-2.7271643 ,         nan, -0.09267443, ..., -0.01596854,
          -0.01294087,         nan]],

        ...,

        [[-1.0268207 , -0.93912554, -0.85554296, ...,         nan,
                  nan,         nan],
         [        nan,         nan, -0.07033321, ..., -0.00983999,
                  nan,         nan],
         [-0.0055493 , -0.00383737,         nan, ...,         nan,
          -1.8788735 ,         nan],
         ...,
         [        nan,         nan, -0.12856238, ...,         nan,
                  nan,         nan],
         [-0.0848734 ,         nan,         nan, ..., -0.07828525,
          -3.5092125 , -0.5001509 ],
         [-2.7271643 ,         nan, -0.09267443, ..., -0.01596854,
          -0.01294087,         nan]],

        [[-1.0268207 , -0.93912554, -0.85554296, ...,         nan,
                  nan,         nan],
         [        nan,         nan, -0.07033321, ..., -0.00983999,
                  nan,         nan],
         [-0.0055493 , -0.00383737,         nan, ...,         nan,
          -1.8788735 ,         nan],
         ...,
         [        nan,         nan, -0.12856238, ...,         nan,
                  nan,         nan],
         [-0.0848734 ,         nan,         nan, ..., -0.07828525,
          -3.5092125 , -0.5001509 ],
         [-2.7271643 ,         nan, -0.09267443, ..., -0.01596854,
          -0.01294087,         nan]],

        [[-1.0268207 , -0.93912554, -0.85554296, ...,         nan,
                  nan,         nan],
         [        nan,         nan, -0.07033321, ..., -0.00983999,
                  nan,         nan],
         [-0.0055493 , -0.00383737,         nan, ...,         nan,
          -1.8788735 ,         nan],
         ...,
         [        nan,         nan, -0.12856238, ...,         nan,
                  nan,         nan],
         [-0.0848734 ,         nan,         nan, ..., -0.07828525,
          -3.5092125 , -0.5001509 ],
         [-2.7271643 ,         nan, -0.09267443, ..., -0.01596854,
          -0.01294087,         nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [11], 'to': [3]}
ms node:
{'name': 'log', 'output': array([[[[-1.0268178 , -0.9391279 , -0.85554624, ...,         nan,
                  nan,         nan],
         [        nan,         nan, -0.07033319, ..., -0.00984142,
                  nan,         nan],
         [-0.00555073, -0.0038388 ,         nan, ...,         nan,
          -1.8788726 ,         nan],
         ...,
         [        nan,         nan, -0.12856343, ...,         nan,
                  nan,         nan],
         [-0.08487439,         nan,         nan, ..., -0.07828523,
          -3.5092125 , -0.5001525 ],
         [-2.727161  ,         nan, -0.09267542, ..., -0.01596997,
          -0.0129423 ,         nan]],

        [[-1.0268178 , -0.9391279 , -0.85554624, ...,         nan,
                  nan,         nan],
         [        nan,         nan, -0.07033319, ..., -0.00984142,
                  nan,         nan],
         [-0.00555073, -0.0038388 ,         nan, ...,         nan,
          -1.8788726 ,         nan],
         ...,
         [        nan,         nan, -0.12856343, ...,         nan,
                  nan,         nan],
         [-0.08487439,         nan,         nan, ..., -0.07828523,
          -3.5092125 , -0.5001525 ],
         [-2.727161  ,         nan, -0.09267542, ..., -0.01596997,
          -0.0129423 ,         nan]],

        [[-1.0268178 , -0.9391279 , -0.85554624, ...,         nan,
                  nan,         nan],
         [        nan,         nan, -0.07033319, ..., -0.00984142,
                  nan,         nan],
         [-0.00555073, -0.0038388 ,         nan, ...,         nan,
          -1.8788726 ,         nan],
         ...,
         [        nan,         nan, -0.12856343, ...,         nan,
                  nan,         nan],
         [-0.08487439,         nan,         nan, ..., -0.07828523,
          -3.5092125 , -0.5001525 ],
         [-2.727161  ,         nan, -0.09267542, ..., -0.01596997,
          -0.0129423 ,         nan]],

        ...,

        [[-1.0268178 , -0.9391279 , -0.85554624, ...,         nan,
                  nan,         nan],
         [        nan,         nan, -0.07033319, ..., -0.00984142,
                  nan,         nan],
         [-0.00555073, -0.0038388 ,         nan, ...,         nan,
          -1.8788726 ,         nan],
         ...,
         [        nan,         nan, -0.12856343, ...,         nan,
                  nan,         nan],
         [-0.08487439,         nan,         nan, ..., -0.07828523,
          -3.5092125 , -0.5001525 ],
         [-2.727161  ,         nan, -0.09267542, ..., -0.01596997,
          -0.0129423 ,         nan]],

        [[-1.0268178 , -0.9391279 , -0.85554624, ...,         nan,
                  nan,         nan],
         [        nan,         nan, -0.07033319, ..., -0.00984142,
                  nan,         nan],
         [-0.00555073, -0.0038388 ,         nan, ...,         nan,
          -1.8788726 ,         nan],
         ...,
         [        nan,         nan, -0.12856343, ...,         nan,
                  nan,         nan],
         [-0.08487439,         nan,         nan, ..., -0.07828523,
          -3.5092125 , -0.5001525 ],
         [-2.727161  ,         nan, -0.09267542, ..., -0.01596997,
          -0.0129423 ,         nan]],

        [[-1.0268178 , -0.9391279 , -0.85554624, ...,         nan,
                  nan,         nan],
         [        nan,         nan, -0.07033319, ..., -0.00984142,
                  nan,         nan],
         [-0.00555073, -0.0038388 ,         nan, ...,         nan,
          -1.8788726 ,         nan],
         ...,
         [        nan,         nan, -0.12856343, ...,         nan,
                  nan,         nan],
         [-0.08487439,         nan,         nan, ..., -0.07828523,
          -3.5092125 , -0.5001525 ],
         [-2.727161  ,         nan, -0.09267542, ..., -0.01596997,
          -0.0129423 ,         nan]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [11], 'to': [3]}
torch node:
{'name': 'log', 'output': array([[[[-1.0268207 , -0.93912554, -0.85554296, ...,         nan,
                  nan,         nan],
         [        nan,         nan, -0.07033321, ..., -0.00983999,
                  nan,         nan],
         [-0.0055493 , -0.00383737,         nan, ...,         nan,
          -1.8788735 ,         nan],
         ...,
         [        nan,         nan, -0.12856245, ...,         nan,
                  nan,         nan],
         [-0.0848734 ,         nan,         nan, ..., -0.07828525,
          -3.5092125 , -0.5001509 ],
         [-2.7271643 ,         nan, -0.09267443, ..., -0.01596854,
          -0.01294087,         nan]],

        [[-1.0268207 , -0.93912554, -0.85554296, ...,         nan,
                  nan,         nan],
         [        nan,         nan, -0.07033321, ..., -0.00983999,
                  nan,         nan],
         [-0.0055493 , -0.00383737,         nan, ...,         nan,
          -1.8788735 ,         nan],
         ...,
         [        nan,         nan, -0.12856245, ...,         nan,
                  nan,         nan],
         [-0.0848734 ,         nan,         nan, ..., -0.07828525,
          -3.5092125 , -0.5001509 ],
         [-2.7271643 ,         nan, -0.09267443, ..., -0.01596854,
          -0.01294087,         nan]],

        [[-1.0268207 , -0.93912554, -0.85554296, ...,         nan,
                  nan,         nan],
         [        nan,         nan, -0.07033321, ..., -0.00983999,
                  nan,         nan],
         [-0.0055493 , -0.00383737,         nan, ...,         nan,
          -1.8788735 ,         nan],
         ...,
         [        nan,         nan, -0.12856245, ...,         nan,
                  nan,         nan],
         [-0.0848734 ,         nan,         nan, ..., -0.07828525,
          -3.5092125 , -0.5001509 ],
         [-2.7271643 ,         nan, -0.09267443, ..., -0.01596854,
          -0.01294087,         nan]],

        ...,

        [[-1.0268207 , -0.93912554, -0.85554296, ...,         nan,
                  nan,         nan],
         [        nan,         nan, -0.07033321, ..., -0.00983999,
                  nan,         nan],
         [-0.0055493 , -0.00383737,         nan, ...,         nan,
          -1.8788735 ,         nan],
         ...,
         [        nan,         nan, -0.12856245, ...,         nan,
                  nan,         nan],
         [-0.0848734 ,         nan,         nan, ..., -0.07828525,
          -3.5092125 , -0.5001509 ],
         [-2.7271643 ,         nan, -0.09267443, ..., -0.01596854,
          -0.01294087,         nan]],

        [[-1.0268207 , -0.93912554, -0.85554296, ...,         nan,
                  nan,         nan],
         [        nan,         nan, -0.07033321, ..., -0.00983999,
                  nan,         nan],
         [-0.0055493 , -0.00383737,         nan, ...,         nan,
          -1.8788735 ,         nan],
         ...,
         [        nan,         nan, -0.12856245, ...,         nan,
                  nan,         nan],
         [-0.0848734 ,         nan,         nan, ..., -0.07828525,
          -3.5092125 , -0.5001509 ],
         [-2.7271643 ,         nan, -0.09267443, ..., -0.01596854,
          -0.01294087,         nan]],

        [[-1.0268207 , -0.93912554, -0.85554296, ...,         nan,
                  nan,         nan],
         [        nan,         nan, -0.07033321, ..., -0.00983999,
                  nan,         nan],
         [-0.0055493 , -0.00383737,         nan, ...,         nan,
          -1.8788735 ,         nan],
         ...,
         [        nan,         nan, -0.12856245, ...,         nan,
                  nan,         nan],
         [-0.0848734 ,         nan,         nan, ..., -0.07828525,
          -3.5092125 , -0.5001509 ],
         [-2.7271643 ,         nan, -0.09267443, ..., -0.01596854,
          -0.01294087,         nan]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [11], 'to': [3]}

generate models:253

analyse output arrays in iter:285

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [23], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [9], 'to': []}

generate models:275

analyse output arrays in iter:288

pre layer res:
16:add
{'name': 'add', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [9, 9], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [16], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [16], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [16], 'to': []}

generate models:278

analyse output arrays in iter:293

pre layer res:
20:add
{'name': 'add', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [7, 21], 'to': [18]}
tf node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [20], 'to': [8]}
ms node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [20], 'to': [8]}
torch node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [20], 'to': [8]}

generate models:283

analyse output arrays in iter:304

pre layer res:
20:reshape
{'name': 'reshape', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]],

        [[ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         ...,
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.],
         [ 0.,  0.,  0., ...,  0.,  0.,  0.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [19], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [20], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [20], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [20], 'to': []}

pre layer res:
6:relu
{'name': 'relu', 'output': array([[[[1952364.6 , 1467505.9 , 1126813.5 , ...,  731509.7 ,
           887529.56, 1804554.2 ],
         [1592317.4 , 2020515.4 , 1301982.4 , ...,  852607.3 ,
           777213.2 ,  818991.56],
         [1547488.9 , 1904505.9 , 1384265.5 , ...,  625420.56,
           601744.25,  789919.5 ],
         ...,
         [1524089.  , 1373534.8 , 1372442.4 , ..., 2221270.  ,
          2166739.5 , 2251310.2 ],
         [1743558.  , 1723240.8 , 1856238.2 , ..., 2065515.  ,
          1996030.6 , 2039333.5 ],
         [2447643.8 , 1487864.6 , 1389870.2 , ..., 1357987.8 ,
          1340196.8 , 2308406.8 ]],

        [[1952364.6 , 1467505.9 , 1126813.5 , ...,  731509.7 ,
           887529.56, 1804554.2 ],
         [1592317.4 , 2020515.4 , 1301982.4 , ...,  852607.3 ,
           777213.2 ,  818991.56],
         [1547488.9 , 1904505.9 , 1384265.5 , ...,  625420.56,
           601744.25,  789919.5 ],
         ...,
         [1524089.  , 1373534.8 , 1372442.4 , ..., 2221270.  ,
          2166739.5 , 2251310.2 ],
         [1743558.  , 1723240.8 , 1856238.2 , ..., 2065515.  ,
          1996030.6 , 2039333.5 ],
         [2447643.8 , 1487864.6 , 1389870.2 , ..., 1357987.8 ,
          1340196.8 , 2308406.8 ]],

        [[1952364.6 , 1467505.9 , 1126813.5 , ...,  731509.7 ,
           887529.56, 1804554.2 ],
         [1592317.4 , 2020515.4 , 1301982.4 , ...,  852607.3 ,
           777213.2 ,  818991.56],
         [1547488.9 , 1904505.9 , 1384265.5 , ...,  625420.56,
           601744.25,  789919.5 ],
         ...,
         [1524089.  , 1373534.8 , 1372442.4 , ..., 2221270.  ,
          2166739.5 , 2251310.2 ],
         [1743558.  , 1723240.8 , 1856238.2 , ..., 2065515.  ,
          1996030.6 , 2039333.5 ],
         [2447643.8 , 1487864.6 , 1389870.2 , ..., 1357987.8 ,
          1340196.8 , 2308406.8 ]],

        ...,

        [[1952364.6 , 1467505.9 , 1126813.5 , ...,  731509.7 ,
           887529.56, 1804554.2 ],
         [1592317.4 , 2020515.4 , 1301982.4 , ...,  852607.3 ,
           777213.2 ,  818991.56],
         [1547488.9 , 1904505.9 , 1384265.5 , ...,  625420.56,
           601744.25,  789919.5 ],
         ...,
         [1524089.  , 1373534.8 , 1372442.4 , ..., 2221270.  ,
          2166739.5 , 2251310.2 ],
         [1743558.  , 1723240.8 , 1856238.2 , ..., 2065515.  ,
          1996030.6 , 2039333.5 ],
         [2447643.8 , 1487864.6 , 1389870.2 , ..., 1357987.8 ,
          1340196.8 , 2308406.8 ]],

        [[1952364.6 , 1467505.9 , 1126813.5 , ...,  731509.7 ,
           887529.56, 1804554.2 ],
         [1592317.4 , 2020515.4 , 1301982.4 , ...,  852607.3 ,
           777213.2 ,  818991.56],
         [1547488.9 , 1904505.9 , 1384265.5 , ...,  625420.56,
           601744.25,  789919.5 ],
         ...,
         [1524089.  , 1373534.8 , 1372442.4 , ..., 2221270.  ,
          2166739.5 , 2251310.2 ],
         [1743558.  , 1723240.8 , 1856238.2 , ..., 2065515.  ,
          1996030.6 , 2039333.5 ],
         [2447643.8 , 1487864.6 , 1389870.2 , ..., 1357987.8 ,
          1340196.8 , 2308406.8 ]],

        [[1952364.6 , 1467505.9 , 1126813.5 , ...,  731509.7 ,
           887529.56, 1804554.2 ],
         [1592317.4 , 2020515.4 , 1301982.4 , ...,  852607.3 ,
           777213.2 ,  818991.56],
         [1547488.9 , 1904505.9 , 1384265.5 , ...,  625420.56,
           601744.25,  789919.5 ],
         ...,
         [1524089.  , 1373534.8 , 1372442.4 , ..., 2221270.  ,
          2166739.5 , 2251310.2 ],
         [1743558.  , 1723240.8 , 1856238.2 , ..., 2065515.  ,
          1996030.6 , 2039333.5 ],
         [2447643.8 , 1487864.6 , 1389870.2 , ..., 1357987.8 ,
          1340196.8 , 2308406.8 ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [5], 'to': [15]}
tf node:
{'name': 'cos', 'output': array([[[[-0.992722  ,  0.3915046 ,  0.9261892 , ..., -0.7404139 ,
          -0.20578845, -0.13178243],
         [ 0.41893154,  0.9982099 ,  0.90695524, ..., -0.49108252,
          -0.42933965, -0.9397638 ],
         [-0.99970955, -0.98850614, -0.32762083, ...,  0.15043175,
          -0.89977676, -0.83383685],
         ...,
         [-0.29741344,  0.5619326 ,  0.9972013 , ...,  0.80738246,
          -0.31985715,  0.56353265],
         [ 0.70384455, -0.20893517, -0.99904495, ...,  0.88311934,
           0.63484704,  0.99899447],
         [-0.80254084,  0.9981355 , -0.18402353, ..., -0.9732008 ,
           0.9238271 , -0.56171536]],

        [[-0.992722  ,  0.3915046 ,  0.9261892 , ..., -0.7404139 ,
          -0.20578845, -0.13178243],
         [ 0.41893154,  0.9982099 ,  0.90695524, ..., -0.49108252,
          -0.42933965, -0.9397638 ],
         [-0.99970955, -0.98850614, -0.32762083, ...,  0.15043175,
          -0.89977676, -0.83383685],
         ...,
         [-0.29741344,  0.5619326 ,  0.9972013 , ...,  0.80738246,
          -0.31985715,  0.56353265],
         [ 0.70384455, -0.20893517, -0.99904495, ...,  0.88311934,
           0.63484704,  0.99899447],
         [-0.80254084,  0.9981355 , -0.18402353, ..., -0.9732008 ,
           0.9238271 , -0.56171536]],

        [[-0.992722  ,  0.3915046 ,  0.9261892 , ..., -0.7404139 ,
          -0.20578845, -0.13178243],
         [ 0.41893154,  0.9982099 ,  0.90695524, ..., -0.49108252,
          -0.42933965, -0.9397638 ],
         [-0.99970955, -0.98850614, -0.32762083, ...,  0.15043175,
          -0.89977676, -0.83383685],
         ...,
         [-0.29741344,  0.5619326 ,  0.9972013 , ...,  0.80738246,
          -0.31985715,  0.56353265],
         [ 0.70384455, -0.20893517, -0.99904495, ...,  0.88311934,
           0.63484704,  0.99899447],
         [-0.80254084,  0.9981355 , -0.18402353, ..., -0.9732008 ,
           0.9238271 , -0.56171536]],

        ...,

        [[-0.992722  ,  0.3915046 ,  0.9261892 , ..., -0.7404139 ,
          -0.20578845, -0.13178243],
         [ 0.41893154,  0.9982099 ,  0.90695524, ..., -0.49108252,
          -0.42933965, -0.9397638 ],
         [-0.99970955, -0.98850614, -0.32762083, ...,  0.15043175,
          -0.89977676, -0.83383685],
         ...,
         [-0.29741344,  0.5619326 ,  0.9972013 , ...,  0.80738246,
          -0.31985715,  0.56353265],
         [ 0.70384455, -0.20893517, -0.99904495, ...,  0.88311934,
           0.63484704,  0.99899447],
         [-0.80254084,  0.9981355 , -0.18402353, ..., -0.9732008 ,
           0.9238271 , -0.56171536]],

        [[-0.992722  ,  0.3915046 ,  0.9261892 , ..., -0.7404139 ,
          -0.20578845, -0.13178243],
         [ 0.41893154,  0.9982099 ,  0.90695524, ..., -0.49108252,
          -0.42933965, -0.9397638 ],
         [-0.99970955, -0.98850614, -0.32762083, ...,  0.15043175,
          -0.89977676, -0.83383685],
         ...,
         [-0.29741344,  0.5619326 ,  0.9972013 , ...,  0.80738246,
          -0.31985715,  0.56353265],
         [ 0.70384455, -0.20893517, -0.99904495, ...,  0.88311934,
           0.63484704,  0.99899447],
         [-0.80254084,  0.9981355 , -0.18402353, ..., -0.9732008 ,
           0.9238271 , -0.56171536]],

        [[-0.992722  ,  0.3915046 ,  0.9261892 , ..., -0.7404139 ,
          -0.20578845, -0.13178243],
         [ 0.41893154,  0.9982099 ,  0.90695524, ..., -0.49108252,
          -0.42933965, -0.9397638 ],
         [-0.99970955, -0.98850614, -0.32762083, ...,  0.15043175,
          -0.89977676, -0.83383685],
         ...,
         [-0.29741344,  0.5619326 ,  0.9972013 , ...,  0.80738246,
          -0.31985715,  0.56353265],
         [ 0.70384455, -0.20893517, -0.99904495, ...,  0.88311934,
           0.63484704,  0.99899447],
         [-0.80254084,  0.9981355 , -0.18402353, ..., -0.9732008 ,
           0.9238271 , -0.56171536]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [6], 'to': [7]}
ms node:
{'name': 'cos', 'output': array([[[[-0.992722  ,  0.39150462,  0.9261892 , ..., -0.7404139 ,
          -0.20578845, -0.13178243],
         [ 0.41893154,  0.9982099 ,  0.90695524, ..., -0.49108255,
          -0.42933965, -0.9397638 ],
         [-0.99970955, -0.9885061 , -0.32762083, ...,  0.15043175,
          -0.89977676, -0.83383685],
         ...,
         [-0.29741344,  0.5619326 ,  0.9972013 , ...,  0.80738246,
          -0.31985715,  0.56353265],
         [ 0.70384455, -0.20893519, -0.99904495, ...,  0.8831193 ,
           0.63484704,  0.99899447],
         [-0.80254084,  0.9981355 , -0.18402353, ..., -0.9732008 ,
           0.9238271 , -0.56171536]],

        [[-0.992722  ,  0.39150462,  0.9261892 , ..., -0.7404139 ,
          -0.20578845, -0.13178243],
         [ 0.41893154,  0.9982099 ,  0.90695524, ..., -0.49108255,
          -0.42933965, -0.9397638 ],
         [-0.99970955, -0.9885061 , -0.32762083, ...,  0.15043175,
          -0.89977676, -0.83383685],
         ...,
         [-0.29741344,  0.5619326 ,  0.9972013 , ...,  0.80738246,
          -0.31985715,  0.56353265],
         [ 0.70384455, -0.20893519, -0.99904495, ...,  0.8831193 ,
           0.63484704,  0.99899447],
         [-0.80254084,  0.9981355 , -0.18402353, ..., -0.9732008 ,
           0.9238271 , -0.56171536]],

        [[-0.992722  ,  0.39150462,  0.9261892 , ..., -0.7404139 ,
          -0.20578845, -0.13178243],
         [ 0.41893154,  0.9982099 ,  0.90695524, ..., -0.49108255,
          -0.42933965, -0.9397638 ],
         [-0.99970955, -0.9885061 , -0.32762083, ...,  0.15043175,
          -0.89977676, -0.83383685],
         ...,
         [-0.29741344,  0.5619326 ,  0.9972013 , ...,  0.80738246,
          -0.31985715,  0.56353265],
         [ 0.70384455, -0.20893519, -0.99904495, ...,  0.8831193 ,
           0.63484704,  0.99899447],
         [-0.80254084,  0.9981355 , -0.18402353, ..., -0.9732008 ,
           0.9238271 , -0.56171536]],

        ...,

        [[-0.992722  ,  0.39150462,  0.9261892 , ..., -0.7404139 ,
          -0.20578845, -0.13178243],
         [ 0.41893154,  0.9982099 ,  0.90695524, ..., -0.49108255,
          -0.42933965, -0.9397638 ],
         [-0.99970955, -0.9885061 , -0.32762083, ...,  0.15043175,
          -0.89977676, -0.83383685],
         ...,
         [-0.29741344,  0.5619326 ,  0.9972013 , ...,  0.80738246,
          -0.31985715,  0.56353265],
         [ 0.70384455, -0.20893519, -0.99904495, ...,  0.8831193 ,
           0.63484704,  0.99899447],
         [-0.80254084,  0.9981355 , -0.18402353, ..., -0.9732008 ,
           0.9238271 , -0.56171536]],

        [[-0.07500387,  0.85588837,  0.8041103 , ..., -0.8836891 ,
          -0.49667993, -0.9053346 ],
         [ 0.72240096,  0.9046851 ,  0.981966  , ..., -0.32009715,
          -0.42933965, -0.98701006],
         [-0.8657736 , -0.8644391 , -0.08368634, ...,  0.02600205,
          -0.9471583 , -0.8961528 ],
         ...,
         [-0.5243762 ,  0.74911183,  0.9972013 , ...,  0.9914195 ,
          -0.31985715,  0.7503927 ],
         [ 0.70384455, -0.65220225, -0.9966976 , ...,  0.87192625,
           0.9334029 ,  0.76151353],
         [-0.80254084,  0.5929535 , -0.18402353, ..., -0.9942774 ,
           0.9238271 , -0.56171536]],

        [[-0.07500387,  0.85588837,  0.8041103 , ..., -0.8836891 ,
          -0.49667993, -0.9053346 ],
         [ 0.72240096,  0.9046851 ,  0.981966  , ..., -0.32009715,
          -0.42933965, -0.98701006],
         [-0.8657736 , -0.8644391 , -0.08368634, ...,  0.02600205,
          -0.9471583 , -0.8961528 ],
         ...,
         [-0.5243762 ,  0.74911183,  0.9972013 , ...,  0.9914195 ,
          -0.31985715,  0.7503927 ],
         [ 0.70384455, -0.65220225, -0.9966976 , ...,  0.87192625,
           0.9334029 ,  0.76151353],
         [-0.80254084,  0.5929535 , -0.18402353, ..., -0.9942774 ,
           0.9238271 , -0.56171536]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [6], 'to': [7]}
torch node:
{'name': 'cos', 'output': array([[[[-0.992722  ,  0.39150462,  0.9261892 , ..., -0.7404139 ,
          -0.20578845, -0.13178243],
         [ 0.41893154,  0.9982099 ,  0.90695524, ..., -0.49108255,
          -0.42933965, -0.9397638 ],
         [-0.99970955, -0.9885061 , -0.32762083, ...,  0.15043175,
          -0.89977676, -0.83383685],
         ...,
         [-0.29741344,  0.5619326 ,  0.9972013 , ...,  0.80738246,
          -0.31985715,  0.56353265],
         [ 0.70384455, -0.20893519, -0.99904495, ...,  0.8831193 ,
           0.63484704,  0.99899447],
         [-0.80254084,  0.9981355 , -0.18402353, ..., -0.9732008 ,
           0.9238271 , -0.56171536]],

        [[-0.992722  ,  0.39150462,  0.9261892 , ..., -0.7404139 ,
          -0.20578845, -0.13178243],
         [ 0.41893154,  0.9982099 ,  0.90695524, ..., -0.49108255,
          -0.42933965, -0.9397638 ],
         [-0.99970955, -0.9885061 , -0.32762083, ...,  0.15043175,
          -0.89977676, -0.83383685],
         ...,
         [-0.29741344,  0.5619326 ,  0.9972013 , ...,  0.80738246,
          -0.31985715,  0.56353265],
         [ 0.70384455, -0.20893519, -0.99904495, ...,  0.8831193 ,
           0.63484704,  0.99899447],
         [-0.80254084,  0.9981355 , -0.18402353, ..., -0.9732008 ,
           0.9238271 , -0.56171536]],

        [[-0.992722  ,  0.39150462,  0.9261892 , ..., -0.7404139 ,
          -0.20578845, -0.13178243],
         [ 0.41893154,  0.9982099 ,  0.90695524, ..., -0.49108255,
          -0.42933965, -0.9397638 ],
         [-0.99970955, -0.9885061 , -0.32762083, ...,  0.15043175,
          -0.89977676, -0.83383685],
         ...,
         [-0.29741344,  0.5619326 ,  0.9972013 , ...,  0.80738246,
          -0.31985715,  0.56353265],
         [ 0.70384455, -0.20893519, -0.99904495, ...,  0.8831193 ,
           0.63484704,  0.99899447],
         [-0.80254084,  0.9981355 , -0.18402353, ..., -0.9732008 ,
           0.9238271 , -0.56171536]],

        ...,

        [[-0.992722  ,  0.39150462,  0.9261892 , ..., -0.7404139 ,
          -0.20578845, -0.13178243],
         [ 0.41893154,  0.9982099 ,  0.90695524, ..., -0.49108255,
          -0.42933965, -0.9397638 ],
         [-0.99970955, -0.9885061 , -0.32762083, ...,  0.15043175,
          -0.89977676, -0.83383685],
         ...,
         [-0.29741344,  0.5619326 ,  0.9972013 , ...,  0.80738246,
          -0.31985715,  0.56353265],
         [ 0.70384455, -0.20893519, -0.99904495, ...,  0.8831193 ,
           0.63484704,  0.99899447],
         [-0.80254084,  0.9981355 , -0.18402353, ..., -0.9732008 ,
           0.9238271 , -0.56171536]],

        [[-0.07500387,  0.85588837,  0.8041103 , ..., -0.8836891 ,
          -0.49667993, -0.9053346 ],
         [ 0.72240096,  0.9046851 ,  0.981966  , ..., -0.32009715,
          -0.42933965, -0.98701006],
         [-0.8657736 , -0.8644391 , -0.08368634, ...,  0.02600205,
          -0.9471583 , -0.8961528 ],
         ...,
         [-0.5243762 ,  0.74911183,  0.9972013 , ...,  0.9914195 ,
          -0.31985715,  0.7503927 ],
         [ 0.70384455, -0.65220225, -0.9966976 , ...,  0.87192625,
           0.9334029 ,  0.76151353],
         [-0.80254084,  0.5929535 , -0.18402353, ..., -0.9942774 ,
           0.9238271 , -0.56171536]],

        [[-0.07500387,  0.85588837,  0.8041103 , ..., -0.8836891 ,
          -0.49667993, -0.9053346 ],
         [ 0.72240096,  0.9046851 ,  0.981966  , ..., -0.32009715,
          -0.42933965, -0.98701006],
         [-0.8657736 , -0.8644391 , -0.08368634, ...,  0.02600205,
          -0.9471583 , -0.8961528 ],
         ...,
         [-0.5243762 ,  0.74911183,  0.9972013 , ...,  0.9914195 ,
          -0.31985715,  0.7503927 ],
         [ 0.70384455, -0.65220225, -0.9966976 , ...,  0.87192625,
           0.9334029 ,  0.76151353],
         [-0.80254084,  0.5929535 , -0.18402353, ..., -0.9942774 ,
           0.9238271 , -0.56171536]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [6], 'to': [7]}

generate models:294

analyse output arrays in iter:322

pre layer res:
3:relu
{'name': 'relu', 'output': array([[[[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf, 1.9360505e+38,           inf, ...,
                    inf,           inf,           inf],
         [8.7896516e+33,           inf,           inf, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf, 1.9360505e+38,           inf, ...,
                    inf,           inf,           inf],
         [8.7896516e+33,           inf,           inf, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf, 1.9360505e+38,           inf, ...,
                    inf,           inf,           inf],
         [8.7896516e+33,           inf,           inf, ...,
                    inf,           inf,           inf]],

        ...,

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf, 1.9360505e+38,           inf, ...,
                    inf,           inf,           inf],
         [8.7896516e+33,           inf,           inf, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf, 1.9360505e+38,           inf, ...,
                    inf,           inf,           inf],
         [8.7896516e+33,           inf,           inf, ...,
                    inf,           inf,           inf]],

        [[          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         ...,
         [          inf,           inf,           inf, ...,
                    inf,           inf,           inf],
         [          inf, 1.9360505e+38,           inf, ...,
                    inf,           inf,           inf],
         [8.7896516e+33,           inf,           inf, ...,
                    inf,           inf,           inf]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [2], 'to': [11]}
tf node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 32, 32]), 'from': [3], 'to': [4]}
ms node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan,  0., nan, ..., nan, nan, nan],
         [ 0., nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan,  0., nan, ..., nan, nan, nan],
         [ 0., nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan,  0., nan, ..., nan, nan, nan],
         [ 0., nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan,  0., nan, ..., nan, nan, nan],
         [ 0., nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan,  0., nan, ..., nan, nan, nan],
         [ 0., nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan,  0., nan, ..., nan, nan, nan],
         [ 0., nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 64, 32, 32), 'from': [3], 'to': [4]}
torch node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 64, 32, 32]), 'from': [3], 'to': [4]}

generate models:311

analyse output arrays in iter:334

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [13], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [9], 'to': []}

generate models:323

analyse output arrays in iter:340

pre layer res:
16:add
{'name': 'add', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [12, 19], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [16], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [16], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [16], 'to': []}

generate models:329

analyse output arrays in iter:342

pre layer res:
17:add
{'name': 'add', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [9, 20], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [17], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [17], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [17], 'to': []}

generate models:331

analyse output arrays in iter:343

pre layer res:
6:relu
{'name': 'relu', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [5], 'to': [7, 12]}
tf node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [6], 'to': [11]}
ms node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [6], 'to': [11]}
torch node:
{'name': 'softmax', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [6], 'to': [11]}

generate models:332

analyse output arrays in iter:352

pre layer res:
17:flatten
{'name': 'flatten', 'output': array([[638372.5 , 624292.5 , 639012.5 , ..., 507684.5 , 229732.53,
        380260.53]], dtype=float32), 'output_shape': TensorShape([1, 2048]), 'from': [16], 'to': [22]}
tf node:
{'name': 'cos', 'output': array([[ 0.6426912 ,  0.07964793,  0.9999267 , ..., -0.9998961 ,
         0.9102688 , -0.55275214]], dtype=float32), 'output_shape': TensorShape([1, 2048]), 'from': [17], 'to': [18]}
ms node:
{'name': 'cos', 'output': array([[ 0.64269114,  0.07964793,  0.9999267 , ..., -0.99985826,
         0.9102687 , -0.55275214]], dtype=float32), 'output_shape': (1, 2048), 'from': [17], 'to': [18]}
torch node:
{'name': 'cos', 'output': array([[ 0.64269114,  0.07964793,  0.9999267 , ..., -0.99989617,
         0.9166264 , -0.55275214]], dtype=float32), 'output_shape': torch.Size([1, 2048]), 'from': [17], 'to': [18]}

generate models:341

analyse output arrays in iter:359

pre layer res:
20:log
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [5], 'to': [14]}
tf node:
{'name': 'log', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [20], 'to': [6]}
ms node:
{'name': 'log', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [20], 'to': [6]}
torch node:
{'name': 'log', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [20], 'to': [6]}

generate models:348

analyse output arrays in iter:372

pre layer res:
5:conv2d
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [11], 'to': [13]}
tf node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [5], 'to': [6]}
ms node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [5], 'to': [6]}
torch node:
{'name': 'cos', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [5], 'to': [6]}

generate models:361

analyse output arrays in iter:378

pre layer res:
8:relu
{'name': 'relu', 'output': array([[[[32660.31,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ],
         [    0.  ,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ],
         [    0.  ,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ],
         ...,
         [    0.  ,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ],
         [    0.  ,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ],
         [    0.  ,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ]],

        [[32660.31,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ],
         [    0.  ,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ],
         [    0.  ,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ],
         ...,
         [    0.  ,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ],
         [    0.  ,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ],
         [    0.  ,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ]],

        [[32660.31,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ],
         [    0.  ,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ],
         [    0.  ,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ],
         ...,
         [    0.  ,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ],
         [    0.  ,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ],
         [    0.  ,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ]],

        ...,

        [[32660.31,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ],
         [    0.  ,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ],
         [    0.  ,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ],
         ...,
         [    0.  ,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ],
         [    0.  ,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ],
         [    0.  ,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ]],

        [[32660.31,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ],
         [    0.  ,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ],
         [    0.  ,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ],
         ...,
         [    0.  ,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ],
         [    0.  ,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ],
         [    0.  ,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ]],

        [[32660.31,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ],
         [    0.  ,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ],
         [    0.  ,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ],
         ...,
         [    0.  ,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ],
         [    0.  ,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ],
         [    0.  ,     0.  ,     0.  , ...,     0.  ,     0.  ,
              0.  ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [7], 'to': [26]}
tf node:
{'name': 'sin', 'output': array([[[[0.30821884, 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.30821884, 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.30821884, 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        ...,

        [[0.30821884, 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.30821884, 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.30821884, 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [8], 'to': [9]}
ms node:
{'name': 'sin', 'output': array([[[[0.2989141, 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ]],

        [[0.2989141, 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ]],

        [[0.2989141, 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ]],

        ...,

        [[0.2989141, 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ]],

        [[0.3469675, 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ]],

        [[0.3469675, 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [8], 'to': [9]}
torch node:
{'name': 'sin', 'output': array([[[[0.30821884, 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.30821884, 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.30821884, 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        ...,

        [[0.30821884, 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.30821884, 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]],

        [[0.30821884, 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         ...,
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ],
         [0.        , 0.        , 0.        , ..., 0.        ,
          0.        , 0.        ]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [8], 'to': [9]}

generate models:367

analyse the exceptions in iter:379
torch exception:
{'id': 2, 'name': 'conv2d', 'frame_work': 'torch', 'input_datas': [tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]],

         [[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]])]}
Given groups=1, weight of size [64, 64, 1, 1], expected input[1, 3, 32, 32] to have 64 channels, but got 3 channels instead
mindspore exception:
{'id': 2, 'name': 'conv2d', 'framework': 'mindspore', 'input_datas': [Tensor(shape=[1, 3, 32, 32], dtype=Float32, value=
[[[[0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   ...
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000]],
  [[0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   ...
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000]],
  [[0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   ...
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000],
   [0.00000000e+000, 0.00000000e+000, 0.00000000e+000 ... 0.00000000e+000, 0.00000000e+000, 0.00000000e+000]]]])]}
For 'Conv2D', 'C_in' of input 'x' shape divide by parameter 'group' must be equal to 'C_in' of input 'weight' shape: 64, but got 'C_in' of input 'x' shape: 3, and 'group': 1.

----------------------------------------------------
- C++ Call Stack: (For framework developers)
----------------------------------------------------
mindspore\core\ops\conv2d.cc:214 Conv2dInferShape


generate models:368

analyse output arrays in iter:382

pre layer res:
17:add
{'name': 'add', 'output': array([[[[4.8520303, 4.158883 , 4.158883 , ..., 4.8520303, 5.158883 ,
          4.158883 ],
         [4.8520303, 4.158883 , 4.158883 , ..., 4.8520303, 4.158883 ,
          4.158883 ],
         [4.8520303, 4.158883 , 4.158883 , ..., 4.8520303, 4.158883 ,
          4.158883 ],
         ...,
         [4.8520303, 4.158883 , 4.158883 , ..., 4.8520303, 4.158883 ,
          4.158883 ],
         [4.8520303, 4.158883 , 4.158883 , ..., 4.8520303, 4.158883 ,
          4.158883 ],
         [5.8520303, 4.158883 , 4.158883 , ..., 4.8520303, 4.158883 ,
          4.158883 ]],

        [[4.8520303, 4.158883 , 4.158883 , ..., 4.8520303, 4.158883 ,
          5.158883 ],
         [4.8520303, 4.158883 , 4.158883 , ..., 4.8520303, 4.158883 ,
          4.158883 ],
         [4.8520303, 4.158883 , 4.158883 , ..., 4.8520303, 4.158883 ,
          4.158883 ],
         ...,
         [4.8520303, 4.158883 , 5.158883 , ..., 4.8520303, 4.158883 ,
          4.158883 ],
         [4.8520303, 4.158883 , 4.158883 , ..., 4.8520303, 4.158883 ,
          4.158883 ],
         [4.8520303, 4.158883 , 4.158883 , ..., 4.8520303, 4.158883 ,
          4.158883 ]],

        [[4.8520303, 4.158883 , 4.158883 , ..., 4.8520303, 4.158883 ,
          4.158883 ],
         [4.8520303, 4.158883 , 4.158883 , ..., 4.8520303, 5.158883 ,
          4.158883 ],
         [4.8520303, 4.158883 , 4.158883 , ..., 4.8520303, 4.158883 ,
          4.158883 ],
         ...,
         [4.8520303, 4.158883 , 4.158883 , ..., 4.8520303, 4.158883 ,
          4.158883 ],
         [4.8520303, 4.158883 , 5.158883 , ..., 4.8520303, 4.158883 ,
          4.158883 ],
         [4.8520303, 4.158883 , 4.158883 , ..., 4.8520303, 4.158883 ,
          4.158883 ]],

        ...,

        [[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          1.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 1.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ]],

        [[0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 1.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 1.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ]],

        [[1.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         ...,
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ],
         [0.       , 0.       , 0.       , ..., 0.       , 0.       ,
          0.       ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [8, 20], 'to': [11]}
tf node:
{'name': 'log', 'output': array([[[[1.5793972, 1.4252466, 1.4252466, ..., 1.5793972, 1.6407201,
          1.4252466],
         [1.5793972, 1.4252466, 1.4252466, ..., 1.5793972, 1.4252466,
          1.4252466],
         [1.5793972, 1.4252466, 1.4252466, ..., 1.5793972, 1.4252466,
          1.4252466],
         ...,
         [1.5793972, 1.4252466, 1.4252466, ..., 1.5793972, 1.4252466,
          1.4252466],
         [1.5793972, 1.4252466, 1.4252466, ..., 1.5793972, 1.4252466,
          1.4252466],
         [1.7667887, 1.4252466, 1.4252466, ..., 1.5793972, 1.4252466,
          1.4252466]],

        [[1.5793972, 1.4252466, 1.4252466, ..., 1.5793972, 1.4252466,
          1.6407201],
         [1.5793972, 1.4252466, 1.4252466, ..., 1.5793972, 1.4252466,
          1.4252466],
         [1.5793972, 1.4252466, 1.4252466, ..., 1.5793972, 1.4252466,
          1.4252466],
         ...,
         [1.5793972, 1.4252466, 1.6407201, ..., 1.5793972, 1.4252466,
          1.4252466],
         [1.5793972, 1.4252466, 1.4252466, ..., 1.5793972, 1.4252466,
          1.4252466],
         [1.5793972, 1.4252466, 1.4252466, ..., 1.5793972, 1.4252466,
          1.4252466]],

        [[1.5793972, 1.4252466, 1.4252466, ..., 1.5793972, 1.4252466,
          1.4252466],
         [1.5793972, 1.4252466, 1.4252466, ..., 1.5793972, 1.6407201,
          1.4252466],
         [1.5793972, 1.4252466, 1.4252466, ..., 1.5793972, 1.4252466,
          1.4252466],
         ...,
         [1.5793972, 1.4252466, 1.4252466, ..., 1.5793972, 1.4252466,
          1.4252466],
         [1.5793972, 1.4252466, 1.6407201, ..., 1.5793972, 1.4252466,
          1.4252466],
         [1.5793972, 1.4252466, 1.4252466, ..., 1.5793972, 1.4252466,
          1.4252466]],

        ...,

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
          0.       ],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf, 0.       , ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf, 0.       ,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf, 0.       , ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[0.       ,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [17], 'to': [9]}
ms node:
{'name': 'log', 'output': array([[[[ 1.5793954e+00,  1.4252496e+00,  1.4252496e+00, ...,
           1.5793954e+00,  1.6407226e+00,  1.4252496e+00],
         [ 1.5793954e+00,  1.4252496e+00,  1.4252496e+00, ...,
           1.5793954e+00,  1.4252496e+00,  1.4252496e+00],
         [ 1.5793954e+00,  1.4252496e+00,  1.4252496e+00, ...,
           1.5793954e+00,  1.4252496e+00,  1.4252496e+00],
         ...,
         [ 1.5793954e+00,  1.4252496e+00,  1.4252496e+00, ...,
           1.5793954e+00,  1.4252496e+00,  1.4252496e+00],
         [ 1.5793954e+00,  1.4252496e+00,  1.4252496e+00, ...,
           1.5793954e+00,  1.4252496e+00,  1.4252496e+00],
         [ 1.7667884e+00,  1.4252496e+00,  1.4252496e+00, ...,
           1.5793954e+00,  1.4252496e+00,  1.4252496e+00]],

        [[ 1.5793954e+00,  1.4252496e+00,  1.4252496e+00, ...,
           1.5793954e+00,  1.4252496e+00,  1.6407226e+00],
         [ 1.5793954e+00,  1.4252496e+00,  1.4252496e+00, ...,
           1.5793954e+00,  1.4252496e+00,  1.4252496e+00],
         [ 1.5793954e+00,  1.4252496e+00,  1.4252496e+00, ...,
           1.5793954e+00,  1.4252496e+00,  1.4252496e+00],
         ...,
         [ 1.5793954e+00,  1.4252496e+00,  1.6407226e+00, ...,
           1.5793954e+00,  1.4252496e+00,  1.4252496e+00],
         [ 1.5793954e+00,  1.4252496e+00,  1.4252496e+00, ...,
           1.5793954e+00,  1.4252496e+00,  1.4252496e+00],
         [ 1.5793954e+00,  1.4252496e+00,  1.4252496e+00, ...,
           1.5793954e+00,  1.4252496e+00,  1.4252496e+00]],

        [[ 1.5793954e+00,  1.4252496e+00,  1.4252496e+00, ...,
           1.5793954e+00,  1.4252496e+00,  1.4252496e+00],
         [ 1.5793954e+00,  1.4252496e+00,  1.4252496e+00, ...,
           1.5793954e+00,  1.6407226e+00,  1.4252496e+00],
         [ 1.5793954e+00,  1.4252496e+00,  1.4252496e+00, ...,
           1.5793954e+00,  1.4252496e+00,  1.4252496e+00],
         ...,
         [ 1.5793954e+00,  1.4252496e+00,  1.4252496e+00, ...,
           1.5793954e+00,  1.4252496e+00,  1.4252496e+00],
         [ 1.5793954e+00,  1.4252496e+00,  1.6407226e+00, ...,
           1.5793954e+00,  1.4252496e+00,  1.4252496e+00],
         [ 1.5793954e+00,  1.4252496e+00,  1.4252496e+00, ...,
           1.5793954e+00,  1.4252496e+00,  1.4252496e+00]],

        ...,

        [[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf, -1.4305115e-06],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [          -inf,           -inf, -1.4305115e-06, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]],

        [[          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf, -1.4305115e-06,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf, -1.4305115e-06, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]],

        [[-1.4305115e-06,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         ...,
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf],
         [          -inf,           -inf,           -inf, ...,
                    -inf,           -inf,           -inf]]]],
      dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [17], 'to': [9]}
torch node:
{'name': 'log', 'output': array([[[[1.5793972, 1.4252466, 1.4252466, ..., 1.5793972, 1.6407201,
          1.4252466],
         [1.5793972, 1.4252466, 1.4252466, ..., 1.5793972, 1.4252466,
          1.4252466],
         [1.5793972, 1.4252466, 1.4252466, ..., 1.5793972, 1.4252466,
          1.4252466],
         ...,
         [1.5793972, 1.4252466, 1.4252466, ..., 1.5793972, 1.4252466,
          1.4252466],
         [1.5793972, 1.4252466, 1.4252466, ..., 1.5793972, 1.4252466,
          1.4252466],
         [1.7667887, 1.4252466, 1.4252466, ..., 1.5793972, 1.4252466,
          1.4252466]],

        [[1.5793972, 1.4252466, 1.4252466, ..., 1.5793972, 1.4252466,
          1.6407201],
         [1.5793972, 1.4252466, 1.4252466, ..., 1.5793972, 1.4252466,
          1.4252466],
         [1.5793972, 1.4252466, 1.4252466, ..., 1.5793972, 1.4252466,
          1.4252466],
         ...,
         [1.5793972, 1.4252466, 1.6407201, ..., 1.5793972, 1.4252466,
          1.4252466],
         [1.5793972, 1.4252466, 1.4252466, ..., 1.5793972, 1.4252466,
          1.4252466],
         [1.5793972, 1.4252466, 1.4252466, ..., 1.5793972, 1.4252466,
          1.4252466]],

        [[1.5793972, 1.4252466, 1.4252466, ..., 1.5793972, 1.4252466,
          1.4252466],
         [1.5793972, 1.4252466, 1.4252466, ..., 1.5793972, 1.6407201,
          1.4252466],
         [1.5793972, 1.4252466, 1.4252466, ..., 1.5793972, 1.4252466,
          1.4252466],
         ...,
         [1.5793972, 1.4252466, 1.4252466, ..., 1.5793972, 1.4252466,
          1.4252466],
         [1.5793972, 1.4252466, 1.6407201, ..., 1.5793972, 1.4252466,
          1.4252466],
         [1.5793972, 1.4252466, 1.4252466, ..., 1.5793972, 1.4252466,
          1.4252466]],

        ...,

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
          0.       ],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf, 0.       , ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf, 0.       ,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf, 0.       , ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]],

        [[0.       ,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         ...,
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf],
         [     -inf,      -inf,      -inf, ...,      -inf,      -inf,
               -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [17], 'to': [9]}

generate models:370

analyse output arrays in iter:384

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [8], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [9], 'to': []}

generate models:372

analyse output arrays in iter:388

pre layer res:
8:relu
{'name': 'relu', 'output': array([[[[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        ...,

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]],

        [[1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         ...,
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.],
         [1., 1., 1., ..., 1., 1., 1.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [15], 'to': [11]}
tf node:
{'name': 'log', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [8], 'to': [9]}
ms node:
{'name': 'log', 'output': array([[[[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        ...,

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]],

        [[-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         ...,
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06],
         [-1.4305115e-06, -1.4305115e-06, -1.4305115e-06, ...,
          -1.4305115e-06, -1.4305115e-06, -1.4305115e-06]]]],
      dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [8], 'to': [9]}
torch node:
{'name': 'log', 'output': array([[[[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        ...,

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]],

        [[0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         ...,
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.],
         [0., 0., 0., ..., 0., 0., 0.]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [8], 'to': [9]}

generate models:376

analyse output arrays in iter:389

pre layer res:
5:conv2d
{'name': 'conv2d', 'output': array([[[[ 29.839327 , -28.817265 ,  28.11469  , ...,  17.392092 ,
            6.5857844,   7.367935 ],
         [ 10.148774 , -28.07816  ,  14.904376 , ...,  -5.1968713,
           41.418365 ,  -1.2975808],
         [-20.723103 ,   1.2824627,  13.552059 , ...,  52.120655 ,
          -18.718401 ,  28.490623 ],
         ...,
         [ 24.425262 , -12.032211 ,   7.27321  , ...,  24.642298 ,
           22.43129  ,  28.106483 ],
         [ 47.120464 ,  14.247559 ,   1.5096085, ...,  -7.2609715,
           35.6468   ,  19.818977 ],
         [-20.335627 ,   1.1451454,  17.872364 , ...,  -2.7126312,
           31.642696 , -32.14295  ]],

        [[ 29.839327 , -28.817265 ,  28.11469  , ...,  17.392092 ,
            6.5857844,   7.367935 ],
         [ 10.148774 , -28.07816  ,  14.904376 , ...,  -5.1968713,
           41.418365 ,  -1.2975808],
         [-20.723103 ,   1.2824627,  13.552059 , ...,  52.120655 ,
          -18.718401 ,  28.490623 ],
         ...,
         [ 24.425262 , -12.032211 ,   7.27321  , ...,  24.642298 ,
           22.43129  ,  28.106483 ],
         [ 47.120464 ,  14.247559 ,   1.5096085, ...,  -7.2609715,
           35.6468   ,  19.818977 ],
         [-20.335627 ,   1.1451454,  17.872364 , ...,  -2.7126312,
           31.642696 , -32.14295  ]],

        [[ 29.839327 , -28.817265 ,  28.11469  , ...,  17.392092 ,
            6.5857844,   7.367935 ],
         [ 10.148774 , -28.07816  ,  14.904376 , ...,  -5.1968713,
           41.418365 ,  -1.2975808],
         [-20.723103 ,   1.2824627,  13.552059 , ...,  52.120655 ,
          -18.718401 ,  28.490623 ],
         ...,
         [ 24.425262 , -12.032211 ,   7.27321  , ...,  24.642298 ,
           22.43129  ,  28.106483 ],
         [ 47.120464 ,  14.247559 ,   1.5096085, ...,  -7.2609715,
           35.6468   ,  19.818977 ],
         [-20.335627 ,   1.1451454,  17.872364 , ...,  -2.7126312,
           31.642696 , -32.14295  ]],

        ...,

        [[ 29.839327 , -28.817265 ,  28.11469  , ...,  17.392092 ,
            6.5857844,   7.367935 ],
         [ 10.148774 , -28.07816  ,  14.904376 , ...,  -5.1968713,
           41.418365 ,  -1.2975808],
         [-20.723103 ,   1.2824627,  13.552059 , ...,  52.120655 ,
          -18.718401 ,  28.490623 ],
         ...,
         [ 24.425262 , -12.032211 ,   7.27321  , ...,  24.642298 ,
           22.43129  ,  28.106483 ],
         [ 47.120464 ,  14.247559 ,   1.5096085, ...,  -7.2609715,
           35.6468   ,  19.818977 ],
         [-20.335627 ,   1.1451454,  17.872364 , ...,  -2.7126312,
           31.642696 , -32.14295  ]],

        [[ 29.839327 , -28.817265 ,  28.11469  , ...,  17.392092 ,
            6.5857844,   7.367935 ],
         [ 10.148774 , -28.07816  ,  14.904376 , ...,  -5.1968713,
           41.418365 ,  -1.2975808],
         [-20.723103 ,   1.2824627,  13.552059 , ...,  52.120655 ,
          -18.718401 ,  28.490623 ],
         ...,
         [ 24.425262 , -12.032211 ,   7.27321  , ...,  24.642298 ,
           22.43129  ,  28.106483 ],
         [ 47.120464 ,  14.247559 ,   1.5096085, ...,  -7.2609715,
           35.6468   ,  19.818977 ],
         [-20.335627 ,   1.1451454,  17.872364 , ...,  -2.7126312,
           31.642696 , -32.14295  ]],

        [[ 29.839327 , -28.817265 ,  28.11469  , ...,  17.392092 ,
            6.5857844,   7.367935 ],
         [ 10.148774 , -28.07816  ,  14.904376 , ...,  -5.1968713,
           41.418365 ,  -1.2975808],
         [-20.723103 ,   1.2824627,  13.552059 , ...,  52.120655 ,
          -18.718401 ,  28.490623 ],
         ...,
         [ 24.425262 , -12.032211 ,   7.27321  , ...,  24.642298 ,
           22.43129  ,  28.106483 ],
         [ 47.120464 ,  14.247559 ,   1.5096085, ...,  -7.2609715,
           35.6468   ,  19.818977 ],
         [-20.335627 ,   1.1451454,  17.872364 , ...,  -2.7126312,
           31.642696 , -32.14295  ]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [16], 'to': [15]}
tf node:
{'name': 'log', 'output': array([[[[3.3958273 ,        nan, 3.3362923 , ..., 2.8560157 ,
          1.8849134 , 1.9971375 ],
         [2.317353  ,        nan, 2.701655  , ...,        nan,
          3.7237244 ,        nan],
         [       nan, 0.24878223, 2.6065385 , ..., 3.9535613 ,
                 nan, 3.349575  ],
         ...,
         [3.195618  ,        nan, 1.9841977 , ..., 3.2044644 ,
          3.110457  , 3.3360002 ],
         [3.8527074 , 2.6565857 , 0.41185036, ...,        nan,
          3.5736594 , 2.98664   ],
         [       nan, 0.13553163, 2.8832557 , ...,        nan,
          3.4545074 ,        nan]],

        [[3.3958273 ,        nan, 3.3362923 , ..., 2.8560157 ,
          1.8849134 , 1.9971375 ],
         [2.317353  ,        nan, 2.701655  , ...,        nan,
          3.7237244 ,        nan],
         [       nan, 0.24878223, 2.6065385 , ..., 3.9535613 ,
                 nan, 3.349575  ],
         ...,
         [3.195618  ,        nan, 1.9841977 , ..., 3.2044644 ,
          3.110457  , 3.3360002 ],
         [3.8527074 , 2.6565857 , 0.41185036, ...,        nan,
          3.5736594 , 2.98664   ],
         [       nan, 0.13553163, 2.8832557 , ...,        nan,
          3.4545074 ,        nan]],

        [[3.3958273 ,        nan, 3.3362923 , ..., 2.8560157 ,
          1.8849134 , 1.9971375 ],
         [2.317353  ,        nan, 2.701655  , ...,        nan,
          3.7237244 ,        nan],
         [       nan, 0.24878223, 2.6065385 , ..., 3.9535613 ,
                 nan, 3.349575  ],
         ...,
         [3.195618  ,        nan, 1.9841977 , ..., 3.2044644 ,
          3.110457  , 3.3360002 ],
         [3.8527074 , 2.6565857 , 0.41185036, ...,        nan,
          3.5736594 , 2.98664   ],
         [       nan, 0.13553163, 2.8832557 , ...,        nan,
          3.4545074 ,        nan]],

        ...,

        [[3.3958273 ,        nan, 3.3362923 , ..., 2.8560157 ,
          1.8849134 , 1.9971375 ],
         [2.317353  ,        nan, 2.701655  , ...,        nan,
          3.7237244 ,        nan],
         [       nan, 0.24878223, 2.6065385 , ..., 3.9535613 ,
                 nan, 3.349575  ],
         ...,
         [3.195618  ,        nan, 1.9841977 , ..., 3.2044644 ,
          3.110457  , 3.3360002 ],
         [3.8527074 , 2.6565857 , 0.41185036, ...,        nan,
          3.5736594 , 2.98664   ],
         [       nan, 0.13553163, 2.8832557 , ...,        nan,
          3.4545074 ,        nan]],

        [[3.3958273 ,        nan, 3.3362923 , ..., 2.8560157 ,
          1.8849134 , 1.9971375 ],
         [2.317353  ,        nan, 2.701655  , ...,        nan,
          3.7237244 ,        nan],
         [       nan, 0.24878223, 2.6065385 , ..., 3.9535613 ,
                 nan, 3.349575  ],
         ...,
         [3.195618  ,        nan, 1.9841977 , ..., 3.2044644 ,
          3.110457  , 3.3360002 ],
         [3.8527074 , 2.6565857 , 0.41185036, ...,        nan,
          3.5736594 , 2.98664   ],
         [       nan, 0.13553163, 2.8832557 , ...,        nan,
          3.4545074 ,        nan]],

        [[3.3958273 ,        nan, 3.3362923 , ..., 2.8560157 ,
          1.8849134 , 1.9971375 ],
         [2.317353  ,        nan, 2.701655  , ...,        nan,
          3.7237244 ,        nan],
         [       nan, 0.24878223, 2.6065385 , ..., 3.9535613 ,
                 nan, 3.349575  ],
         ...,
         [3.195618  ,        nan, 1.9841977 , ..., 3.2044644 ,
          3.110457  , 3.3360002 ],
         [3.8527074 , 2.6565857 , 0.41185036, ...,        nan,
          3.5736594 , 2.98664   ],
         [       nan, 0.13553163, 2.8832557 , ...,        nan,
          3.4545074 ,        nan]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [5], 'to': [6]}
ms node:
{'name': 'log', 'output': array([[[[3.3958273 ,        nan, 3.3362913 , ..., 2.8560154 ,
          1.8849111 , 1.9971385 ],
         [2.3173606 ,        nan, 2.7016568 , ...,        nan,
          3.7237272 ,        nan],
         [       nan, 0.24878503, 2.6065352 , ..., 3.953559  ,
                 nan, 3.349574  ],
         ...,
         [3.19562   ,        nan, 1.9841968 , ..., 3.2044623 ,
          3.1104598 , 3.3359993 ],
         [3.8527074 , 2.6565845 , 0.41184735, ...,        nan,
          3.57366   , 2.9866407 ],
         [       nan, 0.13554034, 2.883263  , ...,        nan,
          3.4545069 ,        nan]],

        [[3.3958273 ,        nan, 3.3362913 , ..., 2.8560154 ,
          1.8849111 , 1.9971385 ],
         [2.3173606 ,        nan, 2.7016568 , ...,        nan,
          3.7237272 ,        nan],
         [       nan, 0.24878503, 2.6065352 , ..., 3.953559  ,
                 nan, 3.349574  ],
         ...,
         [3.19562   ,        nan, 1.9841968 , ..., 3.2044623 ,
          3.1104598 , 3.3359993 ],
         [3.8527074 , 2.6565845 , 0.41184735, ...,        nan,
          3.57366   , 2.9866407 ],
         [       nan, 0.13554034, 2.883263  , ...,        nan,
          3.4545069 ,        nan]],

        [[3.3958273 ,        nan, 3.3362913 , ..., 2.8560154 ,
          1.8849111 , 1.9971385 ],
         [2.3173606 ,        nan, 2.7016568 , ...,        nan,
          3.7237272 ,        nan],
         [       nan, 0.24878503, 2.6065352 , ..., 3.953559  ,
                 nan, 3.349574  ],
         ...,
         [3.19562   ,        nan, 1.9841968 , ..., 3.2044623 ,
          3.1104598 , 3.3359993 ],
         [3.8527074 , 2.6565845 , 0.41184735, ...,        nan,
          3.57366   , 2.9866407 ],
         [       nan, 0.13554034, 2.883263  , ...,        nan,
          3.4545069 ,        nan]],

        ...,

        [[3.3958273 ,        nan, 3.3362913 , ..., 2.8560154 ,
          1.8849111 , 1.9971385 ],
         [2.3173606 ,        nan, 2.7016568 , ...,        nan,
          3.7237272 ,        nan],
         [       nan, 0.24878503, 2.6065352 , ..., 3.953559  ,
                 nan, 3.349574  ],
         ...,
         [3.19562   ,        nan, 1.9841968 , ..., 3.2044623 ,
          3.1104598 , 3.3359993 ],
         [3.8527074 , 2.6565845 , 0.41184735, ...,        nan,
          3.57366   , 2.9866407 ],
         [       nan, 0.13554034, 2.883263  , ...,        nan,
          3.4545069 ,        nan]],

        [[3.3958268 ,        nan, 3.3362913 , ..., 2.8560152 ,
          1.8849111 , 1.9971383 ],
         [2.3173604 ,        nan, 2.7016568 , ...,        nan,
          3.7237272 ,        nan],
         [       nan, 0.24878475, 2.6065352 , ..., 3.953559  ,
                 nan, 3.349574  ],
         ...,
         [3.1956198 ,        nan, 1.9841964 , ..., 3.204462  ,
          3.1104596 , 3.335999  ],
         [3.8527074 , 2.6565845 , 0.4118464 , ...,        nan,
          3.57366   , 2.9866407 ],
         [       nan, 0.1355418 , 2.8832626 , ...,        nan,
          3.4545066 ,        nan]],

        [[3.3958268 ,        nan, 3.3362913 , ..., 2.8560152 ,
          1.8849111 , 1.9971383 ],
         [2.3173604 ,        nan, 2.7016568 , ...,        nan,
          3.7237272 ,        nan],
         [       nan, 0.24878475, 2.6065352 , ..., 3.953559  ,
                 nan, 3.349574  ],
         ...,
         [3.1956198 ,        nan, 1.9841964 , ..., 3.204462  ,
          3.1104596 , 3.335999  ],
         [3.8527074 , 2.6565845 , 0.4118464 , ...,        nan,
          3.57366   , 2.9866407 ],
         [       nan, 0.1355418 , 2.8832626 , ...,        nan,
          3.4545066 ,        nan]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [5], 'to': [6]}
torch node:
{'name': 'log', 'output': array([[[[3.395827  ,        nan, 3.3362923 , ..., 2.8560183 ,
          1.8849134 , 1.9971395 ],
         [2.3173578 ,        nan, 2.7016568 , ...,        nan,
          3.7237244 ,        nan],
         [       nan, 0.24878223, 2.6065385 , ..., 3.9535613 ,
                 nan, 3.349575  ],
         ...,
         [3.1956224 ,        nan, 1.9841977 , ..., 3.2044644 ,
          3.110457  , 3.3360002 ],
         [3.8527095 , 2.6565855 , 0.41184956, ...,        nan,
          3.5736594 , 2.98664   ],
         [       nan, 0.13554329, 2.8832624 , ...,        nan,
          3.4545083 ,        nan]],

        [[3.395827  ,        nan, 3.3362923 , ..., 2.8560183 ,
          1.8849134 , 1.9971395 ],
         [2.3173578 ,        nan, 2.7016568 , ...,        nan,
          3.7237244 ,        nan],
         [       nan, 0.24878223, 2.6065385 , ..., 3.9535613 ,
                 nan, 3.349575  ],
         ...,
         [3.1956224 ,        nan, 1.9841977 , ..., 3.2044644 ,
          3.110457  , 3.3360002 ],
         [3.8527095 , 2.6565855 , 0.41184956, ...,        nan,
          3.5736594 , 2.98664   ],
         [       nan, 0.13554329, 2.8832624 , ...,        nan,
          3.4545083 ,        nan]],

        [[3.395827  ,        nan, 3.3362923 , ..., 2.8560183 ,
          1.8849134 , 1.9971395 ],
         [2.3173578 ,        nan, 2.7016568 , ...,        nan,
          3.7237244 ,        nan],
         [       nan, 0.24878223, 2.6065385 , ..., 3.9535613 ,
                 nan, 3.349575  ],
         ...,
         [3.1956224 ,        nan, 1.9841977 , ..., 3.2044644 ,
          3.110457  , 3.3360002 ],
         [3.8527095 , 2.6565855 , 0.41184956, ...,        nan,
          3.5736594 , 2.98664   ],
         [       nan, 0.13554329, 2.8832624 , ...,        nan,
          3.4545083 ,        nan]],

        ...,

        [[3.395827  ,        nan, 3.3362923 , ..., 2.8560183 ,
          1.8849134 , 1.9971395 ],
         [2.3173578 ,        nan, 2.7016568 , ...,        nan,
          3.7237244 ,        nan],
         [       nan, 0.24878223, 2.6065385 , ..., 3.9535613 ,
                 nan, 3.349575  ],
         ...,
         [3.1956224 ,        nan, 1.9841977 , ..., 3.2044644 ,
          3.110457  , 3.3360002 ],
         [3.8527095 , 2.6565855 , 0.41184956, ...,        nan,
          3.5736594 , 2.98664   ],
         [       nan, 0.13554329, 2.8832624 , ...,        nan,
          3.4545083 ,        nan]],

        [[3.3958268 ,        nan, 3.3362923 , ..., 2.856018  ,
          1.8849136 , 1.9971393 ],
         [2.3173575 ,        nan, 2.7016568 , ...,        nan,
          3.7237244 ,        nan],
         [       nan, 0.24878195, 2.6065385 , ..., 3.9535613 ,
                 nan, 3.349575  ],
         ...,
         [3.195622  ,        nan, 1.9841974 , ..., 3.2044644 ,
          3.1104565 , 3.336     ],
         [3.8527095 , 2.6565855 , 0.4118486 , ...,        nan,
          3.5736594 , 2.98664   ],
         [       nan, 0.13554995, 2.883262  , ...,        nan,
          3.454508  ,        nan]],

        [[3.3958268 ,        nan, 3.3362923 , ..., 2.856018  ,
          1.8849136 , 1.9971393 ],
         [2.3173575 ,        nan, 2.7016568 , ...,        nan,
          3.7237244 ,        nan],
         [       nan, 0.24878195, 2.6065385 , ..., 3.9535613 ,
                 nan, 3.349575  ],
         ...,
         [3.195622  ,        nan, 1.9841974 , ..., 3.2044644 ,
          3.1104565 , 3.336     ],
         [3.8527095 , 2.6565855 , 0.4118486 , ...,        nan,
          3.5736594 , 2.98664   ],
         [       nan, 0.13554995, 2.883262  , ...,        nan,
          3.454508  ,        nan]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [5], 'to': [6]}

pre layer res:
17:flatten
{'name': 'flatten', 'output': array([[ 12.935712 ,  -3.9609795, -39.428127 , ...,  56.433334 ,
         45.750736 , -29.937386 ]], dtype=float32), 'output_shape': TensorShape([1, 65536]), 'from': [2], 'to': [20]}
tf node:
{'name': 'cos', 'output': array([[ 0.93256533, -0.68266946, -0.15755981, ...,  0.99335647,
        -0.19635853,  0.09212454]], dtype=float32), 'output_shape': TensorShape([1, 65536]), 'from': [17], 'to': [18]}
ms node:
{'name': 'cos', 'output': array([[ 0.93256533, -0.6826694 , -0.15755983, ...,  0.99335426,
        -0.19635853,  0.09213024]], dtype=float32), 'output_shape': (1, 65536), 'from': [17], 'to': [18]}
torch node:
{'name': 'cos', 'output': array([[ 0.9325654 , -0.6826694 , -0.15755983, ...,  0.99335605,
        -0.19635853,  0.09212454]], dtype=float32), 'output_shape': torch.Size([1, 65536]), 'from': [17], 'to': [18]}

generate models:377

analyse output arrays in iter:404

pre layer res:
16:reshape
{'name': 'reshape', 'output': array([[inf, inf, inf, ..., inf, inf, inf]], dtype=float32), 'output_shape': TensorShape([1, 2048]), 'from': [13], 'to': [26]}
tf node:
{'name': 'log', 'output': array([[inf, inf, inf, ..., inf, inf, inf]], dtype=float32), 'output_shape': TensorShape([1, 2048]), 'from': [16], 'to': [18]}
ms node:
{'name': 'log', 'output': array([[88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284, 88.72284]],
      dtype=float32), 'output_shape': (1, 2048), 'from': [16], 'to': [18]}
torch node:
{'name': 'log', 'output': array([[inf, inf, inf, ..., inf, inf, inf]], dtype=float32), 'output_shape': torch.Size([1, 2048]), 'from': [16], 'to': [18]}

generate models:391

analyse output arrays in iter:408

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [8], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [9], 'to': []}

generate models:395

analyse output arrays in iter:412

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [8], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [9], 'to': []}

generate models:399

analyse output arrays in iter:426

pre layer res:
19:reshape
{'name': 'reshape', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [18], 'to': [9]}
tf node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        ...,

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [19], 'to': [10]}
ms node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        ...,

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': (1, 128, 8, 8), 'from': [19], 'to': [10]}
torch node:
{'name': 'maxpool2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 8, 8]), 'from': [19], 'to': [10]}

generate models:412

analyse output arrays in iter:460

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [8], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [9], 'to': []}

generate models:445

analyse output arrays in iter:469

pre layer res:
14:add
{'name': 'add', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [8, 11], 'to': [9]}
tf node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        ...,

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [14], 'to': [16]}
ms node:
{'name': 'maxpool2d', 'output': array([[[[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        ...,

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]],

        [[-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         ...,
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38],
         [-3.4028235e+38, -3.4028235e+38, -3.4028235e+38, ...,
          -3.4028235e+38, -3.4028235e+38, -3.4028235e+38]]]],
      dtype=float32), 'output_shape': (1, 128, 8, 8), 'from': [14], 'to': [16]}
torch node:
{'name': 'maxpool2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 8, 8]), 'from': [14], 'to': [16]}

generate models:453

analyse output arrays in iter:473

pre layer res:
21:log
{'name': 'log', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [9], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [21], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [21], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        ...,

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]],

        [[-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         ...,
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf],
         [-inf, -inf, -inf, ..., -inf, -inf, -inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [21], 'to': []}

generate models:457

analyse output arrays in iter:478

pre layer res:
7:conv2d
{'name': 'conv2d', 'output': array([[[[2.0464630e+16, 1.9533891e+16, 1.7351813e+16, ...,
          2.4751476e+16, 2.6257624e+16, 2.3176612e+16],
         [2.2880584e+16, 1.9393216e+16, 2.0712697e+16, ...,
          2.4151619e+16, 2.1386491e+16, 2.7016948e+16],
         [2.1656713e+16, 1.8612359e+16, 2.2248895e+16, ...,
          2.6056684e+16, 3.1256019e+16, 2.5437657e+16],
         ...,
         [2.4178637e+16, 1.9237457e+16, 2.0180320e+16, ...,
          2.6308296e+16, 2.2587815e+16, 2.6806070e+16],
         [2.3021471e+16, 1.7966675e+16, 2.2328051e+16, ...,
          2.8348367e+16, 3.3905934e+16, 2.5732970e+16],
         [2.5732240e+16, 2.3064999e+16, 2.7243132e+16, ...,
          3.0882264e+16, 3.8814908e+16, 3.1941710e+16]],

        [[2.0464630e+16, 1.9533891e+16, 1.7351813e+16, ...,
          2.4751476e+16, 2.6257624e+16, 2.3176612e+16],
         [2.2880584e+16, 1.9393216e+16, 2.0712697e+16, ...,
          2.4151619e+16, 2.1386491e+16, 2.7016948e+16],
         [2.1656713e+16, 1.8612359e+16, 2.2248895e+16, ...,
          2.6056684e+16, 3.1256019e+16, 2.5437657e+16],
         ...,
         [2.4178637e+16, 1.9237457e+16, 2.0180320e+16, ...,
          2.6308296e+16, 2.2587815e+16, 2.6806070e+16],
         [2.3021471e+16, 1.7966675e+16, 2.2328051e+16, ...,
          2.8348367e+16, 3.3905934e+16, 2.5732970e+16],
         [2.5732240e+16, 2.3064999e+16, 2.7243132e+16, ...,
          3.0882264e+16, 3.8814908e+16, 3.1941710e+16]],

        [[2.0464630e+16, 1.9533891e+16, 1.7351813e+16, ...,
          2.4751476e+16, 2.6257624e+16, 2.3176612e+16],
         [2.2880584e+16, 1.9393216e+16, 2.0712697e+16, ...,
          2.4151619e+16, 2.1386491e+16, 2.7016948e+16],
         [2.1656713e+16, 1.8612359e+16, 2.2248895e+16, ...,
          2.6056684e+16, 3.1256019e+16, 2.5437657e+16],
         ...,
         [2.4178637e+16, 1.9237457e+16, 2.0180320e+16, ...,
          2.6308296e+16, 2.2587815e+16, 2.6806070e+16],
         [2.3021471e+16, 1.7966675e+16, 2.2328051e+16, ...,
          2.8348367e+16, 3.3905934e+16, 2.5732970e+16],
         [2.5732240e+16, 2.3064999e+16, 2.7243132e+16, ...,
          3.0882264e+16, 3.8814908e+16, 3.1941710e+16]],

        ...,

        [[2.0464630e+16, 1.9533891e+16, 1.7351813e+16, ...,
          2.4751476e+16, 2.6257624e+16, 2.3176612e+16],
         [2.2880584e+16, 1.9393216e+16, 2.0712697e+16, ...,
          2.4151619e+16, 2.1386491e+16, 2.7016948e+16],
         [2.1656713e+16, 1.8612359e+16, 2.2248895e+16, ...,
          2.6056684e+16, 3.1256019e+16, 2.5437657e+16],
         ...,
         [2.4178637e+16, 1.9237457e+16, 2.0180320e+16, ...,
          2.6308296e+16, 2.2587815e+16, 2.6806070e+16],
         [2.3021471e+16, 1.7966675e+16, 2.2328051e+16, ...,
          2.8348367e+16, 3.3905934e+16, 2.5732970e+16],
         [2.5732240e+16, 2.3064999e+16, 2.7243132e+16, ...,
          3.0882264e+16, 3.8814908e+16, 3.1941710e+16]],

        [[2.0464630e+16, 1.9533891e+16, 1.7351813e+16, ...,
          2.4751476e+16, 2.6257624e+16, 2.3176612e+16],
         [2.2880584e+16, 1.9393216e+16, 2.0712697e+16, ...,
          2.4151619e+16, 2.1386491e+16, 2.7016948e+16],
         [2.1656713e+16, 1.8612359e+16, 2.2248895e+16, ...,
          2.6056684e+16, 3.1256019e+16, 2.5437657e+16],
         ...,
         [2.4178637e+16, 1.9237457e+16, 2.0180320e+16, ...,
          2.6308296e+16, 2.2587815e+16, 2.6806070e+16],
         [2.3021471e+16, 1.7966675e+16, 2.2328051e+16, ...,
          2.8348367e+16, 3.3905934e+16, 2.5732970e+16],
         [2.5732240e+16, 2.3064999e+16, 2.7243132e+16, ...,
          3.0882264e+16, 3.8814908e+16, 3.1941710e+16]],

        [[2.0464630e+16, 1.9533891e+16, 1.7351813e+16, ...,
          2.4751476e+16, 2.6257624e+16, 2.3176612e+16],
         [2.2880584e+16, 1.9393216e+16, 2.0712697e+16, ...,
          2.4151619e+16, 2.1386491e+16, 2.7016948e+16],
         [2.1656713e+16, 1.8612359e+16, 2.2248895e+16, ...,
          2.6056684e+16, 3.1256019e+16, 2.5437657e+16],
         ...,
         [2.4178637e+16, 1.9237457e+16, 2.0180320e+16, ...,
          2.6308296e+16, 2.2587815e+16, 2.6806070e+16],
         [2.3021471e+16, 1.7966675e+16, 2.2328051e+16, ...,
          2.8348367e+16, 3.3905934e+16, 2.5732970e+16],
         [2.5732240e+16, 2.3064999e+16, 2.7243132e+16, ...,
          3.0882264e+16, 3.8814908e+16, 3.1941710e+16]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [6], 'to': [24]}
tf node:
{'name': 'sin', 'output': array([[[[ 0.9584744 ,  0.663545  ,  0.8843922 , ..., -0.9973361 ,
          -0.80736876,  0.8313343 ],
         [-0.5073033 , -0.99392617, -0.29991764, ...,  0.34680888,
          -0.24458249,  0.01929184],
         [ 0.93155074, -0.7947167 , -0.27273548, ...,  0.0093148 ,
          -0.6743428 , -0.98442155],
         ...,
         [-0.08441988, -0.81862056, -0.9973708 , ..., -0.5376383 ,
           0.85380185,  0.9794735 ],
         [ 0.99202114, -0.9447744 ,  0.8998549 , ...,  0.54847664,
          -0.9994451 ,  0.37617132],
         [ 0.41443008, -0.66631687,  0.8895003 , ...,  0.8943936 ,
           0.9626078 , -0.47571194]],

        [[ 0.9584744 ,  0.663545  ,  0.8843922 , ..., -0.9973361 ,
          -0.80736876,  0.8313343 ],
         [-0.5073033 , -0.99392617, -0.29991764, ...,  0.34680888,
          -0.24458249,  0.01929184],
         [ 0.93155074, -0.7947167 , -0.27273548, ...,  0.0093148 ,
          -0.6743428 , -0.98442155],
         ...,
         [-0.08441988, -0.81862056, -0.9973708 , ..., -0.5376383 ,
           0.85380185,  0.9794735 ],
         [ 0.99202114, -0.9447744 ,  0.8998549 , ...,  0.54847664,
          -0.9994451 ,  0.37617132],
         [ 0.41443008, -0.66631687,  0.8895003 , ...,  0.8943936 ,
           0.9626078 , -0.47571194]],

        [[ 0.9584744 ,  0.663545  ,  0.8843922 , ..., -0.9973361 ,
          -0.80736876,  0.8313343 ],
         [-0.5073033 , -0.99392617, -0.29991764, ...,  0.34680888,
          -0.24458249,  0.01929184],
         [ 0.93155074, -0.7947167 , -0.27273548, ...,  0.0093148 ,
          -0.6743428 , -0.98442155],
         ...,
         [-0.08441988, -0.81862056, -0.9973708 , ..., -0.5376383 ,
           0.85380185,  0.9794735 ],
         [ 0.99202114, -0.9447744 ,  0.8998549 , ...,  0.54847664,
          -0.9994451 ,  0.37617132],
         [ 0.41443008, -0.66631687,  0.8895003 , ...,  0.8943936 ,
           0.9626078 , -0.47571194]],

        ...,

        [[ 0.9584744 ,  0.663545  ,  0.8843922 , ..., -0.9973361 ,
          -0.80736876,  0.8313343 ],
         [-0.5073033 , -0.99392617, -0.29991764, ...,  0.34680888,
          -0.24458249,  0.01929184],
         [ 0.93155074, -0.7947167 , -0.27273548, ...,  0.0093148 ,
          -0.6743428 , -0.98442155],
         ...,
         [-0.08441988, -0.81862056, -0.9973708 , ..., -0.5376383 ,
           0.85380185,  0.9794735 ],
         [ 0.99202114, -0.9447744 ,  0.8998549 , ...,  0.54847664,
          -0.9994451 ,  0.37617132],
         [ 0.41443008, -0.66631687,  0.8895003 , ...,  0.8943936 ,
           0.9626078 , -0.47571194]],

        [[ 0.9584744 ,  0.663545  ,  0.8843922 , ..., -0.9973361 ,
          -0.80736876,  0.8313343 ],
         [-0.5073033 , -0.99392617, -0.29991764, ...,  0.34680888,
          -0.24458249,  0.01929184],
         [ 0.93155074, -0.7947167 , -0.27273548, ...,  0.0093148 ,
          -0.6743428 , -0.98442155],
         ...,
         [-0.08441988, -0.81862056, -0.9973708 , ..., -0.5376383 ,
           0.85380185,  0.9794735 ],
         [ 0.99202114, -0.9447744 ,  0.8998549 , ...,  0.54847664,
          -0.9994451 ,  0.37617132],
         [ 0.41443008, -0.66631687,  0.8895003 , ...,  0.8943936 ,
           0.9626078 , -0.47571194]],

        [[ 0.9584744 ,  0.663545  ,  0.8843922 , ..., -0.9973361 ,
          -0.80736876,  0.8313343 ],
         [-0.5073033 , -0.99392617, -0.29991764, ...,  0.34680888,
          -0.24458249,  0.01929184],
         [ 0.93155074, -0.7947167 , -0.27273548, ...,  0.0093148 ,
          -0.6743428 , -0.98442155],
         ...,
         [-0.08441988, -0.81862056, -0.9973708 , ..., -0.5376383 ,
           0.85380185,  0.9794735 ],
         [ 0.99202114, -0.9447744 ,  0.8998549 , ...,  0.54847664,
          -0.9994451 ,  0.37617132],
         [ 0.41443008, -0.66631687,  0.8895003 , ...,  0.8943936 ,
           0.9626078 , -0.47571194]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 16, 16]), 'from': [7], 'to': [22]}
ms node:
{'name': 'sin', 'output': array([[[[ 0.9584819 ,  0.6635261 ,  0.8843818 , ..., -0.99733377,
          -0.8073488 ,  0.8313177 ],
         [-0.5073287 , -0.9939289 , -0.2998922 , ...,  0.34677973,
          -0.24460918,  0.01925706],
         [ 0.9315406 , -0.79473126, -0.27276304, ...,  0.00928126,
          -0.67437255, -0.98441577],
         ...,
         [-0.08438887, -0.81863475, -0.9973726 , ..., -0.53766686,
           0.8537867 ,  0.9794665 ],
         [ 0.99201745, -0.9447668 ,  0.8998674 , ...,  0.5484461 ,
          -0.9994466 ,  0.37620202],
         [ 0.41446024, -0.666339  ,  0.8894843 , ...,  0.89441144,
           0.96262133, -0.4756758 ]],

        [[ 0.9584819 ,  0.6635261 ,  0.8843818 , ..., -0.99733377,
          -0.8073488 ,  0.8313177 ],
         [-0.5073287 , -0.9939289 , -0.2998922 , ...,  0.34677973,
          -0.24460918,  0.01925706],
         [ 0.9315406 , -0.79473126, -0.27276304, ...,  0.00928126,
          -0.67437255, -0.98441577],
         ...,
         [-0.08438887, -0.81863475, -0.9973726 , ..., -0.53766686,
           0.8537867 ,  0.9794665 ],
         [ 0.99201745, -0.9447668 ,  0.8998674 , ...,  0.5484461 ,
          -0.9994466 ,  0.37620202],
         [ 0.41446024, -0.666339  ,  0.8894843 , ...,  0.89441144,
           0.96262133, -0.4756758 ]],

        [[ 0.9584819 ,  0.6635261 ,  0.8843818 , ..., -0.99733377,
          -0.8073488 ,  0.8313177 ],
         [-0.5073287 , -0.9939289 , -0.2998922 , ...,  0.34677973,
          -0.24460918,  0.01925706],
         [ 0.9315406 , -0.79473126, -0.27276304, ...,  0.00928126,
          -0.67437255, -0.98441577],
         ...,
         [-0.08438887, -0.81863475, -0.9973726 , ..., -0.53766686,
           0.8537867 ,  0.9794665 ],
         [ 0.99201745, -0.9447668 ,  0.8998674 , ...,  0.5484461 ,
          -0.9994466 ,  0.37620202],
         [ 0.41446024, -0.666339  ,  0.8894843 , ...,  0.89441144,
           0.96262133, -0.4756758 ]],

        ...,

        [[ 0.9584819 ,  0.6635261 ,  0.8843818 , ..., -0.99733377,
          -0.8073488 ,  0.8313177 ],
         [-0.5073287 , -0.9939289 , -0.2998922 , ...,  0.34677973,
          -0.24460918,  0.01925706],
         [ 0.9315406 , -0.79473126, -0.27276304, ...,  0.00928126,
          -0.67437255, -0.98441577],
         ...,
         [-0.08438887, -0.81863475, -0.9973726 , ..., -0.53766686,
           0.8537867 ,  0.9794665 ],
         [ 0.99201745, -0.9447668 ,  0.8998674 , ...,  0.5484461 ,
          -0.9994466 ,  0.37620202],
         [ 0.41446024, -0.666339  ,  0.8894843 , ...,  0.89441144,
           0.96262133, -0.4756758 ]],

        [[ 0.8731296 ,  0.8108285 , -0.9341891 , ..., -0.5082925 ,
          -0.8528585 , -0.4805138 ],
         [ 0.20683739, -0.9939784 ,  0.70669323, ..., -0.23393242,
           0.99469787,  0.6886907 ],
         [ 0.9315406 ,  0.5908879 , -0.27276304, ..., -0.14042048,
          -0.52304476, -0.5371548 ],
         ...,
         [-0.9302614 , -0.9398173 , -0.512268  , ...,  0.86637706,
          -0.30264208,  0.5870213 ],
         [-0.5865107 , -0.12591213, -0.9214054 , ...,  0.8470255 ,
           0.31159174,  0.37620202],
         [ 0.9993132 ,  0.24648754,  0.12412102, ..., -0.999863  ,
          -0.74761266,  0.51059574]],

        [[ 0.8731296 ,  0.8108285 , -0.9341891 , ..., -0.5082925 ,
          -0.8528585 , -0.4805138 ],
         [ 0.20683739, -0.9939784 ,  0.70669323, ..., -0.23393242,
           0.99469787,  0.6886907 ],
         [ 0.9315406 ,  0.5908879 , -0.27276304, ..., -0.14042048,
          -0.52304476, -0.5371548 ],
         ...,
         [-0.9302614 , -0.9398173 , -0.512268  , ...,  0.86637706,
          -0.30264208,  0.5870213 ],
         [-0.5865107 , -0.12591213, -0.9214054 , ...,  0.8470255 ,
           0.31159174,  0.37620202],
         [ 0.9993132 ,  0.24648754,  0.12412102, ..., -0.999863  ,
          -0.74761266,  0.51059574]]]], dtype=float32), 'output_shape': (1, 128, 16, 16), 'from': [7], 'to': [22]}
torch node:
{'name': 'sin', 'output': array([[[[ 0.9584744 ,  0.66354495,  0.8843922 , ..., -0.9973361 ,
          -0.8073687 ,  0.8313343 ],
         [-0.5073033 , -0.99392617, -0.29991764, ...,  0.34680888,
          -0.24458247,  0.01929184],
         [ 0.93155074, -0.7947167 , -0.27273548, ...,  0.0093148 ,
          -0.6743428 , -0.98442155],
         ...,
         [-0.08441988, -0.8186205 , -0.9973708 , ..., -0.5376383 ,
           0.85380185,  0.9794735 ],
         [ 0.99202114, -0.9447744 ,  0.8998549 , ...,  0.54847664,
          -0.9994451 ,  0.37617132],
         [ 0.41443008, -0.66631687,  0.8895003 , ...,  0.8943936 ,
           0.9626078 , -0.47571197]],

        [[ 0.9584744 ,  0.66354495,  0.8843922 , ..., -0.9973361 ,
          -0.8073687 ,  0.8313343 ],
         [-0.5073033 , -0.99392617, -0.29991764, ...,  0.34680888,
          -0.24458247,  0.01929184],
         [ 0.93155074, -0.7947167 , -0.27273548, ...,  0.0093148 ,
          -0.6743428 , -0.98442155],
         ...,
         [-0.08441988, -0.8186205 , -0.9973708 , ..., -0.5376383 ,
           0.85380185,  0.9794735 ],
         [ 0.99202114, -0.9447744 ,  0.8998549 , ...,  0.54847664,
          -0.9994451 ,  0.37617132],
         [ 0.41443008, -0.66631687,  0.8895003 , ...,  0.8943936 ,
           0.9626078 , -0.47571197]],

        [[ 0.9584744 ,  0.66354495,  0.8843922 , ..., -0.9973361 ,
          -0.8073687 ,  0.8313343 ],
         [-0.5073033 , -0.99392617, -0.29991764, ...,  0.34680888,
          -0.24458247,  0.01929184],
         [ 0.93155074, -0.7947167 , -0.27273548, ...,  0.0093148 ,
          -0.6743428 , -0.98442155],
         ...,
         [-0.08441988, -0.8186205 , -0.9973708 , ..., -0.5376383 ,
           0.85380185,  0.9794735 ],
         [ 0.99202114, -0.9447744 ,  0.8998549 , ...,  0.54847664,
          -0.9994451 ,  0.37617132],
         [ 0.41443008, -0.66631687,  0.8895003 , ...,  0.8943936 ,
           0.9626078 , -0.47571197]],

        ...,

        [[ 0.9584744 ,  0.66354495,  0.8843922 , ..., -0.9973361 ,
          -0.8073687 ,  0.8313343 ],
         [-0.5073033 , -0.99392617, -0.29991764, ...,  0.34680888,
          -0.24458247,  0.01929184],
         [ 0.93155074, -0.7947167 , -0.27273548, ...,  0.0093148 ,
          -0.6743428 , -0.98442155],
         ...,
         [-0.08441988, -0.8186205 , -0.9973708 , ..., -0.5376383 ,
           0.85380185,  0.9794735 ],
         [ 0.99202114, -0.9447744 ,  0.8998549 , ...,  0.54847664,
          -0.9994451 ,  0.37617132],
         [ 0.41443008, -0.66631687,  0.8895003 , ...,  0.8943936 ,
           0.9626078 , -0.47571197]],

        [[ 0.9584744 ,  0.66354495,  0.8843922 , ..., -0.9973361 ,
          -0.8073687 ,  0.8313343 ],
         [-0.5073033 , -0.99392617, -0.29991764, ...,  0.34680888,
          -0.24458247,  0.01929184],
         [ 0.93155074, -0.7947167 , -0.27273548, ...,  0.0093148 ,
          -0.6743428 , -0.98442155],
         ...,
         [-0.08441988, -0.8186205 , -0.9973708 , ..., -0.5376383 ,
           0.85380185,  0.9794735 ],
         [ 0.99202114, -0.9447744 ,  0.8998549 , ...,  0.54847664,
          -0.9994451 ,  0.37617132],
         [ 0.41443008, -0.66631687,  0.8895003 , ...,  0.8943936 ,
           0.9626078 , -0.47571197]],

        [[ 0.9584744 ,  0.66354495,  0.8843922 , ..., -0.9973361 ,
          -0.8073687 ,  0.8313343 ],
         [-0.5073033 , -0.99392617, -0.29991764, ...,  0.34680888,
          -0.24458247,  0.01929184],
         [ 0.93155074, -0.7947167 , -0.27273548, ...,  0.0093148 ,
          -0.6743428 , -0.98442155],
         ...,
         [-0.08441988, -0.8186205 , -0.9973708 , ..., -0.5376383 ,
           0.85380185,  0.9794735 ],
         [ 0.99202114, -0.9447744 ,  0.8998549 , ...,  0.54847664,
          -0.9994451 ,  0.37617132],
         [ 0.41443008, -0.66631687,  0.8895003 , ...,  0.8943936 ,
           0.9626078 , -0.47571197]]]], dtype=float32), 'output_shape': torch.Size([1, 128, 16, 16]), 'from': [7], 'to': [22]}

generate models:462

analyse output arrays in iter:491

pre layer res:
13:slice
{'name': 'slice', 'output': array([[inf, inf, inf, ..., inf, inf, inf]], dtype=float32), 'output_shape': TensorShape([1, 16384]), 'from': [12], 'to': [19]}
tf node:
{'name': 'log', 'output': array([[inf, inf, inf, ..., inf, inf, inf]], dtype=float32), 'output_shape': TensorShape([1, 16384]), 'from': [13], 'to': [14]}
ms node:
{'name': 'log', 'output': array([[88.72284, 88.72284, 88.72284, ..., 88.72284, 88.72284, 88.72284]],
      dtype=float32), 'output_shape': (1, 16384), 'from': [13], 'to': [14]}
torch node:
{'name': 'log', 'output': array([[inf, inf, inf, ..., inf, inf, inf]], dtype=float32), 'output_shape': torch.Size([1, 16384]), 'from': [13], 'to': [14]}

generate models:475

analyse output arrays in iter:493

pre layer res:
9:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': TensorShape([1, 128, 8, 8]), 'from': [18], 'to': [10]}
tf node:
{'name': 'conv2d', 'output': array([[[[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        ...,

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]],

        [[nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         ...,
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan],
         [nan, nan, nan, ..., nan, nan, nan]]]], dtype=float32), 'output_shape': TensorShape([1, 256, 8, 8]), 'from': [9], 'to': []}
ms node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': (1, 256, 8, 8), 'from': [9], 'to': []}
torch node:
{'name': 'conv2d', 'output': array([[[[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        ...,

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]],

        [[inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         ...,
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf],
         [inf, inf, inf, ..., inf, inf, inf]]]], dtype=float32), 'output_shape': torch.Size([1, 256, 8, 8]), 'from': [9], 'to': []}

generate models:477

analyse output arrays in iter:498

pre layer res:
4:maxpool2d
{'name': 'maxpool2d', 'output': array([[[[0.9839007 , 0.9742096 , 0.9656743 , ..., 0.59401613,
          0.86948466, 0.99724936],
         [0.9839007 , 0.8812464 , 0.89731896, ..., 0.932954  ,
          0.97288734, 0.9703256 ],
         [0.77335936, 0.79164696, 0.99999815, ..., 0.86948466,
          0.86948466, 0.6026933 ],
         ...,
         [0.8812464 , 0.6616287 , 0.6173887 , ..., 0.10068601,
          0.98985165, 0.9998921 ],
         [0.4538215 , 0.24291871, 0.30681437, ..., 0.9986596 ,
          0.34008637, 0.86948466],
         [0.99588007, 0.9742096 , 0.684775  , ..., 0.9876576 ,
          0.9742096 , 0.8126379 ]],

        [[0.9839007 , 0.9742096 , 0.9656743 , ..., 0.59401613,
          0.86948466, 0.99724936],
         [0.9839007 , 0.8812464 , 0.89731896, ..., 0.932954  ,
          0.97288734, 0.9703256 ],
         [0.77335936, 0.79164696, 0.99999815, ..., 0.86948466,
          0.86948466, 0.6026933 ],
         ...,
         [0.8812464 , 0.6616287 , 0.6173887 , ..., 0.10068601,
          0.98985165, 0.9998921 ],
         [0.4538215 , 0.24291871, 0.30681437, ..., 0.9986596 ,
          0.34008637, 0.86948466],
         [0.99588007, 0.9742096 , 0.684775  , ..., 0.9876576 ,
          0.9742096 , 0.8126379 ]],

        [[0.9839007 , 0.9742096 , 0.9656743 , ..., 0.59401613,
          0.86948466, 0.99724936],
         [0.9839007 , 0.8812464 , 0.89731896, ..., 0.932954  ,
          0.97288734, 0.9703256 ],
         [0.77335936, 0.79164696, 0.99999815, ..., 0.86948466,
          0.86948466, 0.6026933 ],
         ...,
         [0.8812464 , 0.6616287 , 0.6173887 , ..., 0.10068601,
          0.98985165, 0.9998921 ],
         [0.4538215 , 0.24291871, 0.30681437, ..., 0.9986596 ,
          0.34008637, 0.86948466],
         [0.99588007, 0.9742096 , 0.684775  , ..., 0.9876576 ,
          0.9742096 , 0.8126379 ]],

        ...,

        [[0.9839007 , 0.9742096 , 0.9656743 , ..., 0.59401613,
          0.86948466, 0.99724936],
         [0.9839007 , 0.8812464 , 0.89731896, ..., 0.932954  ,
          0.97288734, 0.9703256 ],
         [0.77335936, 0.79164696, 0.99999815, ..., 0.86948466,
          0.86948466, 0.6026933 ],
         ...,
         [0.8812464 , 0.6616287 , 0.6173887 , ..., 0.10068601,
          0.98985165, 0.9998921 ],
         [0.4538215 , 0.24291871, 0.30681437, ..., 0.9986596 ,
          0.34008637, 0.86948466],
         [0.99588007, 0.9742096 , 0.684775  , ..., 0.9876576 ,
          0.9742096 , 0.8126379 ]],

        [[0.9839007 , 0.9742096 , 0.9656743 , ..., 0.59401613,
          0.86948466, 0.99724936],
         [0.9839007 , 0.8812464 , 0.89731896, ..., 0.932954  ,
          0.97288734, 0.9703256 ],
         [0.77335936, 0.79164696, 0.99999815, ..., 0.86948466,
          0.86948466, 0.6026933 ],
         ...,
         [0.8812464 , 0.6616287 , 0.6173887 , ..., 0.10068601,
          0.98985165, 0.9998921 ],
         [0.4538215 , 0.24291871, 0.30681437, ..., 0.9986596 ,
          0.34008637, 0.86948466],
         [0.99588007, 0.9742096 , 0.684775  , ..., 0.9876576 ,
          0.9742096 , 0.8126379 ]],

        [[0.9839007 , 0.9742096 , 0.9656743 , ..., 0.59401613,
          0.86948466, 0.99724936],
         [0.9839007 , 0.8812464 , 0.89731896, ..., 0.932954  ,
          0.97288734, 0.9703256 ],
         [0.77335936, 0.79164696, 0.99999815, ..., 0.86948466,
          0.86948466, 0.6026933 ],
         ...,
         [0.8812464 , 0.6616287 , 0.6173887 , ..., 0.10068601,
          0.98985165, 0.9998921 ],
         [0.4538215 , 0.24291871, 0.30681437, ..., 0.9986596 ,
          0.34008637, 0.86948466],
         [0.99588007, 0.9742096 , 0.684775  , ..., 0.9876576 ,
          0.9742096 , 0.8126379 ]]]], dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [16], 'to': [15]}
tf node:
{'name': 'log', 'output': array([[[[-1.6230276e-02, -2.6128797e-02, -3.4928683e-02, ...,
          -5.2084881e-01, -1.3985458e-01, -2.7544252e-03],
         [-1.6230276e-02, -1.2641802e-01, -1.0834389e-01, ...,
          -6.9399364e-02, -2.7486993e-02, -3.0123604e-02],
         [-2.5701144e-01, -2.3363975e-01, -1.8477457e-06, ...,
          -1.3985458e-01, -1.3985458e-01, -5.0634682e-01],
         ...,
         [-1.2641802e-01, -4.1305071e-01, -4.8225641e-01, ...,
          -2.2957485e+00, -1.0200192e-02, -1.0789023e-04],
         [-7.9005134e-01, -1.4150285e+00, -1.1815124e+00, ...,
          -1.3412883e-03, -1.0785557e+00, -1.3985458e-01],
         [-4.1284431e-03, -2.6128797e-02, -3.7866497e-01, ...,
          -1.2419193e-02, -2.6128797e-02, -2.0746963e-01]],

        [[-1.6230276e-02, -2.6128797e-02, -3.4928683e-02, ...,
          -5.2084881e-01, -1.3985458e-01, -2.7544252e-03],
         [-1.6230276e-02, -1.2641802e-01, -1.0834389e-01, ...,
          -6.9399364e-02, -2.7486993e-02, -3.0123604e-02],
         [-2.5701144e-01, -2.3363975e-01, -1.8477457e-06, ...,
          -1.3985458e-01, -1.3985458e-01, -5.0634682e-01],
         ...,
         [-1.2641802e-01, -4.1305071e-01, -4.8225641e-01, ...,
          -2.2957485e+00, -1.0200192e-02, -1.0789023e-04],
         [-7.9005134e-01, -1.4150285e+00, -1.1815124e+00, ...,
          -1.3412883e-03, -1.0785557e+00, -1.3985458e-01],
         [-4.1284431e-03, -2.6128797e-02, -3.7866497e-01, ...,
          -1.2419193e-02, -2.6128797e-02, -2.0746963e-01]],

        [[-1.6230276e-02, -2.6128797e-02, -3.4928683e-02, ...,
          -5.2084881e-01, -1.3985458e-01, -2.7544252e-03],
         [-1.6230276e-02, -1.2641802e-01, -1.0834389e-01, ...,
          -6.9399364e-02, -2.7486993e-02, -3.0123604e-02],
         [-2.5701144e-01, -2.3363975e-01, -1.8477457e-06, ...,
          -1.3985458e-01, -1.3985458e-01, -5.0634682e-01],
         ...,
         [-1.2641802e-01, -4.1305071e-01, -4.8225641e-01, ...,
          -2.2957485e+00, -1.0200192e-02, -1.0789023e-04],
         [-7.9005134e-01, -1.4150285e+00, -1.1815124e+00, ...,
          -1.3412883e-03, -1.0785557e+00, -1.3985458e-01],
         [-4.1284431e-03, -2.6128797e-02, -3.7866497e-01, ...,
          -1.2419193e-02, -2.6128797e-02, -2.0746963e-01]],

        ...,

        [[-1.6230276e-02, -2.6128797e-02, -3.4928683e-02, ...,
          -5.2084881e-01, -1.3985458e-01, -2.7544252e-03],
         [-1.6230276e-02, -1.2641802e-01, -1.0834389e-01, ...,
          -6.9399364e-02, -2.7486993e-02, -3.0123604e-02],
         [-2.5701144e-01, -2.3363975e-01, -1.8477457e-06, ...,
          -1.3985458e-01, -1.3985458e-01, -5.0634682e-01],
         ...,
         [-1.2641802e-01, -4.1305071e-01, -4.8225641e-01, ...,
          -2.2957485e+00, -1.0200192e-02, -1.0789023e-04],
         [-7.9005134e-01, -1.4150285e+00, -1.1815124e+00, ...,
          -1.3412883e-03, -1.0785557e+00, -1.3985458e-01],
         [-4.1284431e-03, -2.6128797e-02, -3.7866497e-01, ...,
          -1.2419193e-02, -2.6128797e-02, -2.0746963e-01]],

        [[-1.6230276e-02, -2.6128797e-02, -3.4928683e-02, ...,
          -5.2084881e-01, -1.3985458e-01, -2.7544252e-03],
         [-1.6230276e-02, -1.2641802e-01, -1.0834389e-01, ...,
          -6.9399364e-02, -2.7486993e-02, -3.0123604e-02],
         [-2.5701144e-01, -2.3363975e-01, -1.8477457e-06, ...,
          -1.3985458e-01, -1.3985458e-01, -5.0634682e-01],
         ...,
         [-1.2641802e-01, -4.1305071e-01, -4.8225641e-01, ...,
          -2.2957485e+00, -1.0200192e-02, -1.0789023e-04],
         [-7.9005134e-01, -1.4150285e+00, -1.1815124e+00, ...,
          -1.3412883e-03, -1.0785557e+00, -1.3985458e-01],
         [-4.1284431e-03, -2.6128797e-02, -3.7866497e-01, ...,
          -1.2419193e-02, -2.6128797e-02, -2.0746963e-01]],

        [[-1.6230276e-02, -2.6128797e-02, -3.4928683e-02, ...,
          -5.2084881e-01, -1.3985458e-01, -2.7544252e-03],
         [-1.6230276e-02, -1.2641802e-01, -1.0834389e-01, ...,
          -6.9399364e-02, -2.7486993e-02, -3.0123604e-02],
         [-2.5701144e-01, -2.3363975e-01, -1.8477457e-06, ...,
          -1.3985458e-01, -1.3985458e-01, -5.0634682e-01],
         ...,
         [-1.2641802e-01, -4.1305071e-01, -4.8225641e-01, ...,
          -2.2957485e+00, -1.0200192e-02, -1.0789023e-04],
         [-7.9005134e-01, -1.4150285e+00, -1.1815124e+00, ...,
          -1.3412883e-03, -1.0785557e+00, -1.3985458e-01],
         [-4.1284431e-03, -2.6128797e-02, -3.7866497e-01, ...,
          -1.2419193e-02, -2.6128797e-02, -2.0746963e-01]]]],
      dtype=float32), 'output_shape': TensorShape([1, 64, 16, 16]), 'from': [4], 'to': [5]}
ms node:
{'name': 'log', 'output': array([[[[-1.62317064e-02, -2.61302255e-02, -3.49286646e-02, ...,
          -5.20850301e-01, -1.39855564e-01, -2.75585544e-03],
         [-1.62317064e-02, -1.26419008e-01, -1.08344950e-01, ...,
          -6.93993494e-02, -2.74884235e-02, -3.01250350e-02],
         [-2.57013679e-01, -2.33642161e-01, -3.27825728e-06, ...,
          -1.39855564e-01, -1.39855564e-01, -5.06348372e-01],
         ...,
         [-1.26419008e-01, -4.13052648e-01, -4.82255727e-01, ...,
          -2.29575086e+00, -1.02016218e-02, -1.09320747e-04],
         [-7.90052295e-01, -1.41502988e+00, -1.18151152e+00, ...,
          -1.34271884e-03, -1.07855773e+00, -1.39855564e-01],
         [-4.12987359e-03, -2.61302255e-02, -3.78666997e-01, ...,
          -1.24206245e-02, -2.61302255e-02, -2.07472041e-01]],

        [[-1.62317064e-02, -2.61302255e-02, -3.49286646e-02, ...,
          -5.20850301e-01, -1.39855564e-01, -2.75585544e-03],
         [-1.62317064e-02, -1.26419008e-01, -1.08344950e-01, ...,
          -6.93993494e-02, -2.74884235e-02, -3.01250350e-02],
         [-2.57013679e-01, -2.33642161e-01, -3.27825728e-06, ...,
          -1.39855564e-01, -1.39855564e-01, -5.06348372e-01],
         ...,
         [-1.26419008e-01, -4.13052648e-01, -4.82255727e-01, ...,
          -2.29575086e+00, -1.02016218e-02, -1.09320747e-04],
         [-7.90052295e-01, -1.41502988e+00, -1.18151152e+00, ...,
          -1.34271884e-03, -1.07855773e+00, -1.39855564e-01],
         [-4.12987359e-03, -2.61302255e-02, -3.78666997e-01, ...,
          -1.24206245e-02, -2.61302255e-02, -2.07472041e-01]],

        [[-1.62317064e-02, -2.61302255e-02, -3.49286646e-02, ...,
          -5.20850301e-01, -1.39855564e-01, -2.75585544e-03],
         [-1.62317064e-02, -1.26419008e-01, -1.08344950e-01, ...,
          -6.93993494e-02, -2.74884235e-02, -3.01250350e-02],
         [-2.57013679e-01, -2.33642161e-01, -3.27825728e-06, ...,
          -1.39855564e-01, -1.39855564e-01, -5.06348372e-01],
         ...,
         [-1.26419008e-01, -4.13052648e-01, -4.82255727e-01, ...,
          -2.29575086e+00, -1.02016218e-02, -1.09320747e-04],
         [-7.90052295e-01, -1.41502988e+00, -1.18151152e+00, ...,
          -1.34271884e-03, -1.07855773e+00, -1.39855564e-01],
         [-4.12987359e-03, -2.61302255e-02, -3.78666997e-01, ...,
          -1.24206245e-02, -2.61302255e-02, -2.07472041e-01]],

        ...,

        [[-1.62317064e-02, -2.61302255e-02, -3.49286646e-02, ...,
          -5.20850301e-01, -1.39855564e-01, -2.75585544e-03],
         [-1.62317064e-02, -1.26419008e-01, -1.08344950e-01, ...,
          -6.93993494e-02, -2.74884235e-02, -3.01250350e-02],
         [-2.57013679e-01, -2.33642161e-01, -3.27825728e-06, ...,
          -1.39855564e-01, -1.39855564e-01, -5.06348372e-01],
         ...,
         [-1.26419008e-01, -4.13052648e-01, -4.82255727e-01, ...,
          -2.29575086e+00, -1.02016218e-02, -1.09320747e-04],
         [-7.90052295e-01, -1.41502988e+00, -1.18151152e+00, ...,
          -1.34271884e-03, -1.07855773e+00, -1.39855564e-01],
         [-4.12987359e-03, -2.61302255e-02, -3.78666997e-01, ...,
          -1.24206245e-02, -2.61302255e-02, -2.07472041e-01]],

        [[-1.62317064e-02, -2.61302255e-02, -3.49286646e-02, ...,
          -5.20850301e-01, -1.39855564e-01, -2.75585544e-03],
         [-1.62317064e-02, -1.26419008e-01, -1.08344950e-01, ...,
          -6.93993494e-02, -2.74884235e-02, -3.01250350e-02],
         [-2.57013679e-01, -2.33642161e-01, -3.27825728e-06, ...,
          -1.39855564e-01, -1.39855564e-01, -5.06348372e-01],
         ...,
         [-1.26419008e-01, -4.13052648e-01, -4.82255727e-01, ...,
          -2.29575086e+00, -1.02016218e-02, -1.09320747e-04],
         [-7.90052295e-01, -1.41502988e+00, -1.18151152e+00, ...,
          -1.34271884e-03, -1.07855773e+00, -1.39855564e-01],
         [-4.12987359e-03, -2.61302255e-02, -3.78666997e-01, ...,
          -1.24206245e-02, -2.61302255e-02, -2.07472041e-01]],

        [[-1.62317064e-02, -2.61302255e-02, -3.49286646e-02, ...,
          -5.20850301e-01, -1.39855564e-01, -2.75585544e-03],
         [-1.62317064e-02, -1.26419008e-01, -1.08344950e-01, ...,
          -6.93993494e-02, -2.74884235e-02, -3.01250350e-02],
         [-2.57013679e-01, -2.33642161e-01, -3.27825728e-06, ...,
          -1.39855564e-01, -1.39855564e-01, -5.06348372e-01],
         ...,
         [-1.26419008e-01, -4.13052648e-01, -4.82255727e-01, ...,
          -2.29575086e+00, -1.02016218e-02, -1.09320747e-04],
         [-7.90052295e-01, -1.41502988e+00, -1.18151152e+00, ...,
          -1.34271884e-03, -1.07855773e+00, -1.39855564e-01],
         [-4.12987359e-03, -2.61302255e-02, -3.78666997e-01, ...,
          -1.24206245e-02, -2.61302255e-02, -2.07472041e-01]]]],
      dtype=float32), 'output_shape': (1, 64, 16, 16), 'from': [4], 'to': [5]}
torch node:
{'name': 'log', 'output': array([[[[-1.6230276e-02, -2.6128797e-02, -3.4928683e-02, ...,
          -5.2084881e-01, -1.3985458e-01, -2.7544252e-03],
         [-1.6230276e-02, -1.2641802e-01, -1.0834389e-01, ...,
          -6.9399372e-02, -2.7486993e-02, -3.0123604e-02],
         [-2.5701144e-01, -2.3363975e-01, -1.8477457e-06, ...,
          -1.3985458e-01, -1.3985458e-01, -5.0634688e-01],
         ...,
         [-1.2641802e-01, -4.1305071e-01, -4.8225653e-01, ...,
          -2.2957485e+00, -1.0200192e-02, -1.0789023e-04],
         [-7.9005134e-01, -1.4150285e+00, -1.1815122e+00, ...,
          -1.3412883e-03, -1.0785558e+00, -1.3985458e-01],
         [-4.1284431e-03, -2.6128797e-02, -3.7866506e-01, ...,
          -1.2419193e-02, -2.6128797e-02, -2.0746963e-01]],

        [[-1.6230276e-02, -2.6128797e-02, -3.4928683e-02, ...,
          -5.2084881e-01, -1.3985458e-01, -2.7544252e-03],
         [-1.6230276e-02, -1.2641802e-01, -1.0834389e-01, ...,
          -6.9399372e-02, -2.7486993e-02, -3.0123604e-02],
         [-2.5701144e-01, -2.3363975e-01, -1.8477457e-06, ...,
          -1.3985458e-01, -1.3985458e-01, -5.0634688e-01],
         ...,
         [-1.2641802e-01, -4.1305071e-01, -4.8225653e-01, ...,
          -2.2957485e+00, -1.0200192e-02, -1.0789023e-04],
         [-7.9005134e-01, -1.4150285e+00, -1.1815122e+00, ...,
          -1.3412883e-03, -1.0785558e+00, -1.3985458e-01],
         [-4.1284431e-03, -2.6128797e-02, -3.7866506e-01, ...,
          -1.2419193e-02, -2.6128797e-02, -2.0746963e-01]],

        [[-1.6230276e-02, -2.6128797e-02, -3.4928683e-02, ...,
          -5.2084881e-01, -1.3985458e-01, -2.7544252e-03],
         [-1.6230276e-02, -1.2641802e-01, -1.0834389e-01, ...,
          -6.9399372e-02, -2.7486993e-02, -3.0123604e-02],
         [-2.5701144e-01, -2.3363975e-01, -1.8477457e-06, ...,
          -1.3985458e-01, -1.3985458e-01, -5.0634688e-01],
         ...,
         [-1.2641802e-01, -4.1305071e-01, -4.8225653e-01, ...,
          -2.2957485e+00, -1.0200192e-02, -1.0789023e-04],
         [-7.9005134e-01, -1.4150285e+00, -1.1815122e+00, ...,
          -1.3412883e-03, -1.0785558e+00, -1.3985458e-01],
         [-4.1284431e-03, -2.6128797e-02, -3.7866506e-01, ...,
          -1.2419193e-02, -2.6128797e-02, -2.0746963e-01]],

        ...,

        [[-1.6230276e-02, -2.6128797e-02, -3.4928683e-02, ...,
          -5.2084881e-01, -1.3985458e-01, -2.7544252e-03],
         [-1.6230276e-02, -1.2641802e-01, -1.0834389e-01, ...,
          -6.9399372e-02, -2.7486993e-02, -3.0123604e-02],
         [-2.5701144e-01, -2.3363975e-01, -1.8477457e-06, ...,
          -1.3985458e-01, -1.3985458e-01, -5.0634688e-01],
         ...,
         [-1.2641802e-01, -4.1305071e-01, -4.8225653e-01, ...,
          -2.2957485e+00, -1.0200192e-02, -1.0789023e-04],
         [-7.9005134e-01, -1.4150285e+00, -1.1815122e+00, ...,
          -1.3412883e-03, -1.0785558e+00, -1.3985458e-01],
         [-4.1284431e-03, -2.6128797e-02, -3.7866506e-01, ...,
          -1.2419193e-02, -2.6128797e-02, -2.0746963e-01]],

        [[-1.6230276e-02, -2.6128797e-02, -3.4928683e-02, ...,
          -5.2084881e-01, -1.3985458e-01, -2.7544252e-03],
         [-1.6230276e-02, -1.2641802e-01, -1.0834389e-01, ...,
          -6.9399372e-02, -2.7486993e-02, -3.0123604e-02],
         [-2.5701144e-01, -2.3363975e-01, -1.8477457e-06, ...,
          -1.3985458e-01, -1.3985458e-01, -5.0634688e-01],
         ...,
         [-1.2641802e-01, -4.1305071e-01, -4.8225653e-01, ...,
          -2.2957485e+00, -1.0200192e-02, -1.0789023e-04],
         [-7.9005134e-01, -1.4150285e+00, -1.1815122e+00, ...,
          -1.3412883e-03, -1.0785558e+00, -1.3985458e-01],
         [-4.1284431e-03, -2.6128797e-02, -3.7866506e-01, ...,
          -1.2419193e-02, -2.6128797e-02, -2.0746963e-01]],

        [[-1.6230276e-02, -2.6128797e-02, -3.4928683e-02, ...,
          -5.2084881e-01, -1.3985458e-01, -2.7544252e-03],
         [-1.6230276e-02, -1.2641802e-01, -1.0834389e-01, ...,
          -6.9399372e-02, -2.7486993e-02, -3.0123604e-02],
         [-2.5701144e-01, -2.3363975e-01, -1.8477457e-06, ...,
          -1.3985458e-01, -1.3985458e-01, -5.0634688e-01],
         ...,
         [-1.2641802e-01, -4.1305071e-01, -4.8225653e-01, ...,
          -2.2957485e+00, -1.0200192e-02, -1.0789023e-04],
         [-7.9005134e-01, -1.4150285e+00, -1.1815122e+00, ...,
          -1.3412883e-03, -1.0785558e+00, -1.3985458e-01],
         [-4.1284431e-03, -2.6128797e-02, -3.7866506e-01, ...,
          -1.2419193e-02, -2.6128797e-02, -2.0746963e-01]]]],
      dtype=float32), 'output_shape': torch.Size([1, 64, 16, 16]), 'from': [4], 'to': [5]}

generate models:481

final statics:
total operators:28
tensorflow --> nums:47,distinct_bugs:5
mindspore --> nums:34,distinct_bugs:5
torch --> nums:29,distinct_bugs:7
tensorflow --> 
conv2d:24
sin:4
log:5
cos:7
softmax:7
mindspore --> 
conv2d:2
sin:6
log:11
cos:7
softmax:8
torch --> 
conv2d:2
sin:4
log:5
cos:6
softmax:7
maxpool2d:4
flatten:1

generate models:481
